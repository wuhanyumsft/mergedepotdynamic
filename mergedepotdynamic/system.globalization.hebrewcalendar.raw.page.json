{"content":"    \r\n    <h1 id=\"System_Globalization_HebrewCalendar\">\r\n      <span class=\"lang-csharp\">HebrewCalendar</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the Hebrew calendar.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class HebrewCalendar : System.Globalization.Calendar</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">System.Globalization.Calendar</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HebrewCalendar</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddDays_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddDays(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddHours_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddHours(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddMilliseconds_System_DateTime_System_Double_\" data-linktype=\"relative-path\">AddMilliseconds(DateTime,Double)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddMinutes_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddMinutes(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddSeconds_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddSeconds(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddWeeks_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddWeeks(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_Clone\" data-linktype=\"relative-path\">Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_CurrentEra\" data-linktype=\"relative-path\">CurrentEra</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_DaysInYearBeforeMinSupportedYear\" data-linktype=\"relative-path\">DaysInYearBeforeMinSupportedYear</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInMonth_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetDaysInMonth(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInYear_System_Int32_\" data-linktype=\"relative-path\">GetDaysInYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetHour_System_DateTime_\" data-linktype=\"relative-path\">GetHour(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetLeapMonth_System_Int32_\" data-linktype=\"relative-path\">GetLeapMonth(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMilliseconds_System_DateTime_\" data-linktype=\"relative-path\">GetMilliseconds(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMinute_System_DateTime_\" data-linktype=\"relative-path\">GetMinute(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMonthsInYear_System_Int32_\" data-linktype=\"relative-path\">GetMonthsInYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetSecond_System_DateTime_\" data-linktype=\"relative-path\">GetSecond(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetWeekOfYear_System_DateTime_System_Globalization_CalendarWeekRule_System_DayOfWeek_\" data-linktype=\"relative-path\">GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapDay_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IsLeapDay(Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapMonth_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IsLeapMonth(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapYear_System_Int32_\" data-linktype=\"relative-path\">IsLeapYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsReadOnly\" data-linktype=\"relative-path\">IsReadOnly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ReadOnly_System_Globalization_Calendar_\" data-linktype=\"relative-path\">ReadOnly(Calendar)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Hebrew calendar recognizes two eras: B.C.E. (before the common era) and A.M. (Latin &quot;Anno Mundi&quot;, which means &quot;the year of the world&quot;). This implementation of the HebrewCalendar class recognizes only the current era (A.M.) and the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For information about using the HebrewCalendar class and the other calendar classes in the .NET Framework, see <a href=\"../Topic/Working%20with%20Calendars.md\" data-linktype=\"relative-path\">Working with Calendars</a>.  </p>\n</div>\n<p> In every 19-year cycle that ends with a year that is evenly divisible by 19, the 3rd, 6th, 8th, 11th, 14th, 17th, and 19th years are leap years. A common year can have from 353 to 355 days, depending on the placement of Jewish holidays. A leap year can have from 383 to 385 days.  </p>\n<p> The Hebrew calendar has 12 months during common years and 13 months during leap years:  </p>\n<table>\n<thead>\n<tr>\n<th>GetMonth value (common year)</th>\n<th>GetMonth value (leap year)</th>\n<th>Month</th>\n<th>Days in common years</th>\n<th>Days in leap years</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>×ª×©×¨×™ (Tishrei)</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>×—×©×•×Ÿ (Cheshvan)</td>\n<td>29/30</td>\n<td>29/30</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>×›×¡×œ×• (Kislev)</td>\n<td>29/30</td>\n<td>29/30</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n<td>×˜×‘×ª (Tevet)</td>\n<td>29</td>\n<td>29</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td>×©×‘×˜ (Shevat)</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>6</td>\n<td>-</td>\n<td>××“×¨ (Adar)</td>\n<td>29</td>\n<td>-</td>\n</tr>\n<tr>\n<td>-</td>\n<td>6</td>\n<td>××“×¨ × (Adar Alef)</td>\n<td>-</td>\n<td>30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>7</td>\n<td>××“×¨ ×‘ (Adar Beit)</td>\n<td>-</td>\n<td>29</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>× ×™×¡×Ÿ (Nissan)</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>8</td>\n<td>9</td>\n<td>××™×™×¨ (Iyar)</td>\n<td>29</td>\n<td>29</td>\n</tr>\n<tr>\n<td>9</td>\n<td>10</td>\n<td>×¡×™×•×Ÿ (Sivan)</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>10</td>\n<td>11</td>\n<td>×ª×ž×•×– (Tamuz)</td>\n<td>29</td>\n<td>29</td>\n</tr>\n<tr>\n<td>11</td>\n<td>12</td>\n<td>××‘ (Av)</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>12</td>\n<td>13</td>\n<td>××œ×•×œ (Elul)</td>\n<td>29</td>\n<td>29</td>\n</tr>\n</tbody>\n</table>\n<p> The days in Cheshvan and Kislev vary depending on the placement of Jewish holidays. During leap years, Adar is replaced by Adar Alef with 30 days and Adar Beit with 29 days. Adar Alef is considered the leap month. The last day of Adar Alef and all the days in Adar Beit are considered leap days; that is, the <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_IsLeapDay_\" data-linktype=\"relative-path\">IsLeapDay</a> method returns <code>true</code> for these days.  </p>\n<p> The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the sixth day of Tevet in the year 5761 A.M. in the Hebrew calendar.  </p>\n<p> Each <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> supports a set of calendars. The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property returns the default calendar for the culture, and the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, the application should set the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> to a new <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar__ctor\" data-linktype=\"self-bookmark\">HebrewCalendar()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"self-bookmark\">HebrewEra</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the current era. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_AlgorithmType\" data-linktype=\"self-bookmark\">AlgorithmType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_Eras\" data-linktype=\"self-bookmark\">Eras</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of eras in the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_MaxSupportedDateTime\" data-linktype=\"self-bookmark\">MaxSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the latest date and time supported by the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_MinSupportedDateTime\" data-linktype=\"self-bookmark\">MinSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the earliest date and time supported by the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_TwoDigitYearMax\" data-linktype=\"self-bookmark\">TwoDigitYearMax</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_AddMonths_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddMonths(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of months away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_AddYears_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddYears(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of years away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetDayOfMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetDayOfWeek_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfWeek(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetDayOfYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of days in the specified month in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetDaysInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of days in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetEra_System_DateTime_\" data-linktype=\"self-bookmark\">GetEra(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetLeapMonth_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetLeapMonth(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetMonthsInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetMonthsInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of months in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_GetYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapDay(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified date in the specified era is a leap day.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_IsLeapYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified year in the specified era is a leap year.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_HebrewCalendar_ToFourDigitYear_System_Int32_\" data-linktype=\"self-bookmark\">ToFourDigitYear(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified year to a 4-digit year by using the <span class=\"xref\">stem.Globalization.HebrewCalendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar__ctor\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HebrewCalendar()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public HebrewCalendar ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_HebrewEra\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HebrewEra</div>        \r\n          </div>\r\n    \r\n            <p>Represents the current era. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly int HebrewEra;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this field is 1.  </p>\n<p> The Hebrew calendar recognizes two eras: B.C.E. (before the common era) and A.M. (Latin &quot;Anno Mundi&quot;, which means &quot;the year of the world&quot;). This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the current era (A.M.).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_AlgorithmType\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_AlgorithmType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlgorithmType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a></div>\r\n                  </div>\r\n                  <p>Always returns <a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses reflection to instantiate each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> type found in the .NET Framework and displays the value of its <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AlgorithmType_\" data-linktype=\"relative-path\">AlgorithmType</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AlgorithmType#1\">using System;\nusing System.Collections;\nusing System.Globalization;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = Assembly.GetAssembly(typeof(Calendar));\n      Type[] types = assem.GetExportedTypes();\n      Type[] calendars = Array.FindAll(types, IsValidCalendar);\n      Array.Sort(calendars, new CalendarComparer());\n\n      Console.WriteLine(&quot;{0,-30} {1}<br>&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;);\n      foreach (var cal in calendars) {\n         // Instantiate a calendar object.\n         ConstructorInfo ctor = cal.GetConstructor( new Type[] {} );\n         Calendar calObj = (Calendar) ctor.Invoke( new Type[] {} ); \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty,\n                                           null, calObj, null));\n      }\n   }\n\n   private static bool IsValidCalendar(Type t)\n   {\n        if (t.IsSubclassOf(typeof(Calendar)))\n            if (t.IsAbstract)\n                return false;\n            else\n                return true;\n        else\n            return false;\n   }\n}\n\npublic class CalendarComparer : IComparer\n{\n   public int Compare(object x, object y)\n   {\n      Type tX = (Type) x;\n      Type tY = (Type) y;\n\n      return tX.Name.CompareTo(tY.Name);\n   }\n}\n// The example displays the following output:\n//       Calendar                       Algorithm Type\n//       \n//       ChineseLunisolarCalendar       LunisolarCalendar\n//       GregorianCalendar              SolarCalendar\n//       HebrewCalendar                 LunisolarCalendar\n//       HijriCalendar                  LunarCalendar\n//       JapaneseCalendar               SolarCalendar\n//       JapaneseLunisolarCalendar      LunisolarCalendar\n//       JulianCalendar                 SolarCalendar\n//       KoreanCalendar                 SolarCalendar\n//       KoreanLunisolarCalendar        LunisolarCalendar\n//       PersianCalendar                SolarCalendar\n//       TaiwanCalendar                 SolarCalendar\n//       TaiwanLunisolarCalendar        LunisolarCalendar\n//       ThaiBuddhistCalendar           SolarCalendar\n//       UmAlQuraCalendar               LunarCalendar\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AlgorithmType#1\">Imports System.Collections\nImports System.Globalization\nImports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = Assembly.GetAssembly(GetType(Calendar))\n      Dim types() As Type = assem.GetExportedTypes()\n      Dim calendars() As Type = Array.FindAll(types, AddressOf IsValidCalendar)\n      Array.Sort(calendars, New CalendarComparer())\n\n      Console.WriteLine(&quot;{0,-30} {1}&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;)\n      Console.WriteLine()\n      For Each cal In calendars\n         &#39; Instantiate a calendar object.\n         Dim ctor As ConstructorInfo = cal.GetConstructor( {} )\n         Dim calObj As Calendar = CType(ctor.Invoke( {} ), Calendar) \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.GetProperty,\n                                           Nothing, calObj, Nothing))\n      Next\n   End Sub\n   \n   Private Function IsValidCalendar(ByVal t As Type) As Boolean\n        If t.IsSubClassOf(GetType(Calendar)) Then\n            If t.IsAbstract Then\n                Return False\n            Else\n                Return True\n            End If\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n\nPublic Class CalendarComparer : Implements IComparer\n   Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer _\n                  Implements IComparer.Compare\n      Dim tX As Type = DirectCast(x, Type)\n      Dim tY As Type = DirectCast(y, Type)\n\n      Return tX.Name.CompareTo(tY.Name)\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;       Calendar                       Algorithm Type\n&#39;       \n&#39;       ChineseLunisolarCalendar       LunisolarCalendar\n&#39;       GregorianCalendar              SolarCalendar\n&#39;       HebrewCalendar                 LunisolarCalendar\n&#39;       HijriCalendar                  LunarCalendar\n&#39;       JapaneseCalendar               SolarCalendar\n&#39;       JapaneseLunisolarCalendar      LunisolarCalendar\n&#39;       JulianCalendar                 SolarCalendar\n&#39;       KoreanCalendar                 SolarCalendar\n&#39;       KoreanLunisolarCalendar        LunisolarCalendar\n&#39;       PersianCalendar                SolarCalendar\n&#39;       TaiwanCalendar                 SolarCalendar\n&#39;       TaiwanLunisolarCalendar        LunisolarCalendar\n&#39;       ThaiBuddhistCalendar           SolarCalendar\n&#39;       UmAlQuraCalendar               LunarCalendar\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_Eras\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_Eras_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Eras</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of eras in the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int[] Eras { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </div>\r\n                  <p>An array of integers that represents the eras in the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> type. The return value is always an array containing one element equal to <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Hebrew calendar recognizes two eras: B.C.E. (before the common era) and A.M. (Latin &quot;Anno Mundi&quot;, which means &quot;the year of the world&quot;). This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the current era (A.M.). This property always returns an array with only one element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_MaxSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_MaxSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the latest date and time supported by the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime MaxSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The latest date and time supported by the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> type, which is equivalent to the last moment of September, 29, 2239 C.E. in the Gregorian calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets the minimum value and the maximum value of the calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_MinMax#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Create an instance of the calendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n      Console.WriteLine( myCal.ToString() );\n\n      // Create an instance of the GregorianCalendar.\n      GregorianCalendar myGre = new GregorianCalendar();\n\n      // Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n      DateTime myMin = myCal.MinSupportedDateTime;\n      Console.Write( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin) );\n      Console.WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMin), myGre.GetDayOfMonth(myMin), myGre.GetYear(myMin) );\n\n      // Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n      DateTime myMax = myCal.MaxSupportedDateTime;\n      Console.Write( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax) );\n      Console.WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMax), myGre.GetDayOfMonth(myMax), myGre.GetYear(myMax) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.HebrewCalendar\nMinSupportedDateTime: 04/07/5343 (in Gregorian, 01/01/1583)\nMaxSupportedDateTime: 13/29/5999 (in Gregorian, 09/29/2239)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_MinMax#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Create an instance of the calendar.\n      Dim myCal As New HebrewCalendar()\n      Console.WriteLine(myCal.ToString())\n\n      &#39; Create an instance of the GregorianCalendar.\n      Dim myGre As New GregorianCalendar()\n\n      &#39; Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n      Dim myMin As DateTime = myCal.MinSupportedDateTime\n      Console.Write(&quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin))\n      Console.WriteLine(&quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMin), myGre.GetDayOfMonth(myMin), myGre.GetYear(myMin))\n\n      &#39; Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n      Dim myMax As DateTime = myCal.MaxSupportedDateTime\n      Console.Write(&quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax))\n      Console.WriteLine(&quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMax), myGre.GetDayOfMonth(myMax), myGre.GetYear(myMax))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCalendar\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Globalization.HebrewCalendar\n&#39;MinSupportedDateTime: 04/07/5343 (in Gregorian, 01/01/1583)\n&#39;MaxSupportedDateTime: 13/29/5999 (in Gregorian, 09/29/2239)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_MinMax#1\">using namespace System;\nusing namespace System::Globalization;\n\nint main()\n{\n   // Create an instance of the calendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   Console::WriteLine( myCal );\n   \n   // Create an instance of the GregorianCalendar.\n   GregorianCalendar^ myGre = gcnew GregorianCalendar;\n   \n   // Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n   DateTime myMin = myCal-&gt;MinSupportedDateTime;\n   Console::Write( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMin ), myCal-&gt;GetDayOfMonth( myMin ), myCal-&gt;GetYear( myMin ) );\n   Console::WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre-&gt;GetMonth( myMin ), myGre-&gt;GetDayOfMonth( myMin ), myGre-&gt;GetYear( myMin ) );\n   \n   // Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n   DateTime myMax = myCal-&gt;MaxSupportedDateTime;\n   Console::Write( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMax ), myCal-&gt;GetDayOfMonth( myMax ), myCal-&gt;GetYear( myMax ) );\n   Console::WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre-&gt;GetMonth( myMax ), myGre-&gt;GetDayOfMonth( myMax ), myGre-&gt;GetYear( myMax ) );\n}\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.HebrewCalendar\nMinSupportedDateTime: 04/07/5343 (in Gregorian, 01/01/1583)\nMaxSupportedDateTime: 13/29/5999 (in Gregorian, 09/29/2239)\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_MinSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_MinSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the earliest date and time supported by the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime MinSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The earliest date and time supported by the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> type, which is equivalent to the first moment of January, 1, 1583 C.E. in the Gregorian calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Microsoft Visual Basic represents time of day as the specified time on the minimum date supported by the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> type, which is January 1, 0001 C.E. However, the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> type does not support that minimum date. Consequently, if you call a method to format the time of day using the current calendar but you do not specify a format specifier, formatting uses the ISO 8601 sortable (&quot;s&quot;) date/time pattern format specifier instead of the default general (&quot;G&quot;) date/time pattern format specifier. For more information, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets the minimum value and the maximum value of the calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_MinMax#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Create an instance of the calendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n      Console.WriteLine( myCal.ToString() );\n\n      // Create an instance of the GregorianCalendar.\n      GregorianCalendar myGre = new GregorianCalendar();\n\n      // Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n      DateTime myMin = myCal.MinSupportedDateTime;\n      Console.Write( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin) );\n      Console.WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMin), myGre.GetDayOfMonth(myMin), myGre.GetYear(myMin) );\n\n      // Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n      DateTime myMax = myCal.MaxSupportedDateTime;\n      Console.Write( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax) );\n      Console.WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMax), myGre.GetDayOfMonth(myMax), myGre.GetYear(myMax) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.HebrewCalendar\nMinSupportedDateTime: 04/07/5343 (in Gregorian, 01/01/1583)\nMaxSupportedDateTime: 13/29/5999 (in Gregorian, 09/29/2239)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_MinMax#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Create an instance of the calendar.\n      Dim myCal As New HebrewCalendar()\n      Console.WriteLine(myCal.ToString())\n\n      &#39; Create an instance of the GregorianCalendar.\n      Dim myGre As New GregorianCalendar()\n\n      &#39; Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n      Dim myMin As DateTime = myCal.MinSupportedDateTime\n      Console.Write(&quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin))\n      Console.WriteLine(&quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMin), myGre.GetDayOfMonth(myMin), myGre.GetYear(myMin))\n\n      &#39; Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n      Dim myMax As DateTime = myCal.MaxSupportedDateTime\n      Console.Write(&quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax))\n      Console.WriteLine(&quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMax), myGre.GetDayOfMonth(myMax), myGre.GetYear(myMax))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCalendar\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Globalization.HebrewCalendar\n&#39;MinSupportedDateTime: 04/07/5343 (in Gregorian, 01/01/1583)\n&#39;MaxSupportedDateTime: 13/29/5999 (in Gregorian, 09/29/2239)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_MinMax#1\">using namespace System;\nusing namespace System::Globalization;\n\nint main()\n{\n   // Create an instance of the calendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   Console::WriteLine( myCal );\n   \n   // Create an instance of the GregorianCalendar.\n   GregorianCalendar^ myGre = gcnew GregorianCalendar;\n   \n   // Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n   DateTime myMin = myCal-&gt;MinSupportedDateTime;\n   Console::Write( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMin ), myCal-&gt;GetDayOfMonth( myMin ), myCal-&gt;GetYear( myMin ) );\n   Console::WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre-&gt;GetMonth( myMin ), myGre-&gt;GetDayOfMonth( myMin ), myGre-&gt;GetYear( myMin ) );\n   \n   // Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n   DateTime myMax = myCal-&gt;MaxSupportedDateTime;\n   Console::Write( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMax ), myCal-&gt;GetDayOfMonth( myMax ), myCal-&gt;GetYear( myMax ) );\n   Console::WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre-&gt;GetMonth( myMax ), myGre-&gt;GetDayOfMonth( myMax ), myGre-&gt;GetYear( myMax ) );\n}\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.HebrewCalendar\nMinSupportedDateTime: 04/07/5343 (in Gregorian, 01/01/1583)\nMaxSupportedDateTime: 13/29/5999 (in Gregorian, 09/29/2239)\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_TwoDigitYearMax\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_TwoDigitYearMax_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TwoDigitYearMax</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int TwoDigitYearMax { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> object is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the Hebrew calendar year value is less than 5343 but is not 99, or the year value is greater than 5999.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TwoDigitYearMax property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 5729, the 100-year range is from 5630 to 5729. Therefore, a 2-digit value of 30 is interpreted as 5630, while a 2-digit value of 29 is interpreted as 5729.  </p>\n<p> The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. If the initial system setting changes during the life of your application the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class does not automatically detect the change.  </p>\n<p> The special value 99 causes the <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_ToFourDigitYear_\" data-linktype=\"relative-path\">ToFourDigitYear</a> method to ignore the system settings and return the specified year unchanged.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_AddMonths_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_AddMonths_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMonths(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of months away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime AddMonths (DateTime time, int months);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add <code>months</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>months</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of months to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of months to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>months</code> is less than -120,000 or greater than 120,000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).  </p>\n<p> The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. This implementation supports only the current era. Therefore, <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, if the specified month is Av, which has 30 days, the specified day is the 30th day of that month, and the value of the <code>months</code> parameter is 5, the resulting year is one more than the specified year, the resulting month is Tevet, and the resulting day is the 29th day, which is the last day in Tevet.  </p>\n<p> If the value of the <code>months</code> parameter is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Hebrew calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesHebrewCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesHebrewCalendar \n\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       5762\n\n&#39;   Month:      7\n\n&#39;   DayOfYear:  198\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       5765\n\n&#39;   Month:      5\n\n&#39;   DayOfYear:  138\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Monday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_AddYears_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_AddYears_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddYears(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of years away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime AddYears (DateTime time, int years);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add <code>years</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>years</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of years to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of years to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).  </p>\n<p> The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. For example, Cheshvan can have 29 or 30 days, depending on the placement of Jewish holidays. Suppose that Cheshvan has 30 days in the current year and 29 in the following year. If the specified date is the 30th day of Cheshvan in the current year and the value of <code>years</code> is 1, the resulting date will be the 29th day of Cheshvan in the following year.  </p>\n<p> The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is not a valid month in the resulting year. It is changed to the last valid month in the resulting year. For example, if the month in the <code>time</code> parameter is the 13th month of a leap year and the value of <code>years</code> is 1, the month in the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is the 12th month of the following year, which is a non-leap year. Note that even when the month part does not change, it might still refer to a different month. For example, Adar Beit is the 7th month in leap years, but Nissan is the 7th month in common years.  </p>\n<p> This implementation supports only the current era. Therefore, <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> If <code>years</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Hebrew calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesHebrewCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesHebrewCalendar \n\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       5762\n\n&#39;   Month:      7\n\n&#39;   DayOfYear:  198\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       5765\n\n&#39;   Month:      5\n\n&#39;   DayOfYear:  138\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Monday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetDayOfMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetDayOfMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDayOfMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 30 that represents the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Hebrew calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesHebrewCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesHebrewCalendar \n\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       5762\n\n&#39;   Month:      7\n\n&#39;   DayOfYear:  198\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       5765\n\n&#39;   Month:      5\n\n&#39;   DayOfYear:  138\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Monday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetDayOfWeek_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetDayOfWeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfWeek(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DayOfWeek GetDayOfWeek (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value that represents the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> values are as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>DayOfWeek value</th>\n<th>Day of Week</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sunday</td>\n<td>×™×•× ×¨××©×•×Ÿ (Yom Rishon)</td>\n</tr>\n<tr>\n<td>Monday</td>\n<td>×™×•× ×©× ×™ (Yom Sheni)</td>\n</tr>\n<tr>\n<td>Tuesday</td>\n<td>×™×•× ×©×œ×™×©×™ (Yom Shlishi)</td>\n</tr>\n<tr>\n<td>Wednesday</td>\n<td>×™×•× ×¨×‘×™×¢×™ (Yom Reviee)</td>\n</tr>\n<tr>\n<td>Thursday</td>\n<td>×™×•× ×—×ž×™×©×™ (Yom Chamishi)</td>\n</tr>\n<tr>\n<td>Friday</td>\n<td>×™×•× ×©×™×©×™ (Yom Shishi)</td>\n</tr>\n<tr>\n<td>Saturday</td>\n<td>×©×‘×ª (Shabat)</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Hebrew calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesHebrewCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesHebrewCalendar \n\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       5762\n\n&#39;   Month:      7\n\n&#39;   DayOfYear:  198\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       5765\n\n&#39;   Month:      5\n\n&#39;   DayOfYear:  138\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Monday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetDayOfYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetDayOfYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDayOfYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 385 that represents the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is earlier than September 17, 1583 in the Gregorian calendar, or greater than <span class=\"xref\">stem.Globalization.HebrewCalendar.MaxSupportedDateTime*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_GetDaysInYear_\" data-linktype=\"relative-path\">GetDaysInYear</a>.  </p>\n<p> This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Hebrew calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesHebrewCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesHebrewCalendar \n\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       5762\n\n&#39;   Month:      7\n\n&#39;   DayOfYear:  198\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       5765\n\n&#39;   Month:      5\n\n&#39;   DayOfYear:  138\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Monday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetDaysInMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of days in the specified month in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDaysInMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 13 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era. Specify either <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>Calendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified month in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code>, <code>month</code>, or <code>era</code> is outside the range supported by the current <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, this method returns 29 or 30 for Cheshvan, depending on the placement of Jewish holidays.  </p>\n<p> This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls <code>GetDaysInMonth</code> for the second month in each of five years in each era.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar.GetDaysInMonth#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInMonth( y, 2, HebrewCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 5761; y &lt;= 5765; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInMonth( y, 2, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     29      29      30      30      29\nEra 1:          29      29      30      30      29\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar.GetDaysInMonth#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInMonth( y, 2, HebrewCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInMonth( y, 2, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     29      29      30      30      29\nEra 1:          29      29      30      30      29\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar.GetDaysInMonth#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesHebrewCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInMonth(y, 2, HebrewCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 5761 To 5765\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInMonth(y, 2, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHebrewCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            5761    5762    5763    5764    5765\n\n&#39;CurrentEra:     29      29      30      30      29\n\n&#39;Era 1:          29      29      30      30      29\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetDaysInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetDaysInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of days in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDaysInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era. Specify either <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>HebrewCalendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> or <code>era</code> is outside the range supported by the current <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, this method returns an integer from 353 to 355 or from 383 to 385, depending on the placement of Jewish holidays and depending on whether <code>year</code> is a leap year.  </p>\n<p> This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls <code>GetDaysInYear</code> for five years in each era.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_GetDaysInYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInYear( y, HebrewCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     353     354     385     355     383\nEra 1:          353     354     385     355     383\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_GetDaysInYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInYear( y, HebrewCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 5761; y &lt;= 5765; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     353     354     385     355     383\nEra 1:          353     354     385     355     383\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_GetDaysInYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesHebrewCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInYear(y, HebrewCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 5761 To 5765\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHebrewCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            5761    5762    5763    5764    5765\n\n&#39;CurrentEra:     353     354     385     355     383\n\n&#39;Era 1:          353     354     385     355     383\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetEra_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetEra_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEra(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetEra (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The return value is always <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Hebrew calendar recognizes two eras: B.C.E. (before the common era) and A.M. (Latin &quot;Anno Mundi&quot;, which means &quot;the year of the world&quot;). This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the current era (A.M.) and only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Hebrew calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesHebrewCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesHebrewCalendar \n\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       5762\n\n&#39;   Month:      7\n\n&#39;   DayOfYear:  198\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       5765\n\n&#39;   Month:      5\n\n&#39;   DayOfYear:  138\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Monday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetLeapMonth_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLeapMonth(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetLeapMonth (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify either <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>HebrewCalendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A positive integer that indicates the leap month in the specified year and era. The return value is 7 if the <code>year</code> and <code>era</code> parameters specify a leap year, or 0 if the year is not a leap year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is not <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>HebrewCalendar.Eras[Calendar.CurrentEra]</code>.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is less than the Hebrew calendar year 5343 or greater than the Hebrew calendar year 5999.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_\" data-linktype=\"relative-path\">GetMonth</a> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_\" data-linktype=\"relative-path\">GetMonth</a> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 13 that represents the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is less than <span class=\"xref\">stem.Globalization.HebrewCalendar.MinSupportedDateTime*</span> or greater than <span class=\"xref\">stem.Globalization.HebrewCalendar.MaxSupportedDateTime*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Hebrew calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesHebrewCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesHebrewCalendar \n\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       5762\n\n&#39;   Month:      7\n\n&#39;   DayOfYear:  198\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       5765\n\n&#39;   Month:      5\n\n&#39;   DayOfYear:  138\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Monday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetMonthsInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetMonthsInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonthsInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of months in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMonthsInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era. Specify either <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>HebrewCalendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of months in the specified year in the specified era. The return value is either 12 in a common year, or 13 in a leap year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> or <code>era</code> is outside the range supported by the current <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls <code>GetMonthsInYear</code> for five years in each era.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar.GetMonthsInYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesHebrewCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetMonthsInYear(y, HebrewCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 5761 To 5765\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetMonthsInYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHebrewCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            5761    5762    5763    5764    5765\n\n&#39;CurrentEra:     12      12      13      12      13\n\n&#39;Era 1:          12      12      13      12      13\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar.GetMonthsInYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetMonthsInYear( y, HebrewCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetMonthsInYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     12      12      13      12      13\nEra 1:          12      12      13      12      13\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar.GetMonthsInYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetMonthsInYear( y, HebrewCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 5761; y &lt;= 5765; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetMonthsInYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     12      12      13      12      13\nEra 1:          12      12      13      12      13\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_GetYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_GetYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is outside the range supported by the current <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Hebrew calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesHebrewCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesHebrewCalendar \n\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       5762\n\n&#39;   Month:      7\n\n&#39;   DayOfYear:  198\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       5765\n\n&#39;   Month:      5\n\n&#39;   DayOfYear:  138\n\n&#39;   DayOfMonth: 21\n\n&#39;   DayOfWeek:  Monday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Hebrew calendar:\n   Era:        1\n   Year:       5762\n   Month:      7\n   DayOfYear:  198\n   DayOfMonth: 21\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       5765\n   Month:      5\n   DayOfYear:  138\n   DayOfMonth: 21\n   DayOfWeek:  Monday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_IsLeapDay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapDay(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified date in the specified era is a leap day.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapDay (int year, int month, int day, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 13 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 30 that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era. Specify either <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>HebrewCalendar.Eras[Calendar.CurrentEra]</code>..</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified day is a leap day; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code>, <code>month</code>, <code>day</code>, or <code>era</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).  </p>\n<p> In every 19-year cycle that ends with a year that is evenly divisible by 19, the 3rd, 6th, 8th, 11th, 14th, 17th, and 19th years are leap years. A common year can have from 353 to 355 days, depending on the placement of Jewish holidays. A leap year can have from 383 to 385 days.  </p>\n<p> A leap day is a day that occurs only in a leap year. In the Hebrew calendar, the last day of Adar Alef and all the days in Adar Beit are considered leap days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls <code>IsLeapDay</code> for the last day of the second month (February) for five years in each of the eras.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar.IsLeapDay#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesHebrewCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Creates a holder for the last day of the second month (February).\n      Dim iLastDay As Integer\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in the current era.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 5761 To 5765\n         iLastDay = myCal.GetDaysInMonth(y, 2, HebrewCalendar.CurrentEra)\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapDay(y, 2, iLastDay, HebrewCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in each of the eras.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 5761 To 5765\n            iLastDay = myCal.GetDaysInMonth(y, 2, myCal.Eras(i))\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapDay(y, 2, iLastDay, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHebrewCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            5761    5762    5763    5764    5765\n\n&#39;CurrentEra:     False   False   False   False   False\n\n&#39;Era 1:          False   False   False   False   False\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar.IsLeapDay#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Creates a holder for the last day of the second month (February).\n      int iLastDay;\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Checks five years in the current era.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )  {\n         iLastDay = myCal.GetDaysInMonth( y, 2, HebrewCalendar.CurrentEra );\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapDay( y, 2, iLastDay, HebrewCalendar.CurrentEra ) );\n      }\n      Console.WriteLine();\n\n      // Checks five years in each of the eras.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 5761; y &lt;= 5765; y++ )  {\n            iLastDay = myCal.GetDaysInMonth( y, 2, myCal.Eras[i] );\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapDay( y, 2, iLastDay, myCal.Eras[i] ) );\n         }\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     False   False   False   False   False\nEra 1:          False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar.IsLeapDay#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Creates a holder for the last day of the second month (February).\n   int iLastDay;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Checks five years in the current era.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n   {\n      iLastDay = myCal-&gt;GetDaysInMonth( y, 2, HebrewCalendar::CurrentEra );\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapDay( y, 2, iLastDay, HebrewCalendar::CurrentEra ) );\n\n   }\n   Console::WriteLine();\n   \n   // Checks five years in each of the eras.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n      {\n         iLastDay = myCal-&gt;GetDaysInMonth( y, 2, myCal-&gt;Eras[ i ] );\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapDay( y, 2, iLastDay, myCal-&gt;Eras[ i ] ) );\n\n      }\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     False   False   False   False   False\nEra 1:          False   False   False   False   False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_IsLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 13 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era. Specify either <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>HebrewCalendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified month is a leap month; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code>, <code>month</code>, or <code>era</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).  </p>\n<p> In every 19-year cycle that ends with a year that is evenly divisible by 19, the 3rd, 6th, 8th, 11th, 14th, 17th, and 19th years are leap years. A common year can have from 353 to 355 days, depending on the placement of Jewish holidays. A leap year can have from 383 to 385 days.  </p>\n<p> A leap month is an entire month that occurs only in a leap year. In the Hebrew calendar, Adar Beit is the only leap month.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls <code>IsLeapMonth</code> for all the months in five years in the current era.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar.IsLeapMonth#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Checks all the months in five years in the current era.\n   int iMonthsInYear;\n   for ( int y = 5761; y &lt;= 5765; y++ )\n   {\n      Console::Write( &quot; {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, y );\n      iMonthsInYear = myCal-&gt;GetMonthsInYear( y, HebrewCalendar::CurrentEra );\n      for ( int m = 1; m &lt;= iMonthsInYear; m++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapMonth( y, m, HebrewCalendar::CurrentEra ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\n5761:           False   False   False   False   False   False   False   False   False   False   False   False\n5762:           False   False   False   False   False   False   False   False   False   False   False   False\n5763:           False   False   False   False   False   False   True    False   False   False   False   False   False\n5764:           False   False   False   False   False   False   False   False   False   False   False   False\n5765:           False   False   False   False   False   False   True    False   False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar.IsLeapMonth#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Checks all the months in five years in the current era.\n      int iMonthsInYear;\n      for ( int y = 5761; y &lt;= 5765; y++ )  {\n         Console.Write( &quot;{0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, y );\n         iMonthsInYear = myCal.GetMonthsInYear( y, HebrewCalendar.CurrentEra );\n         for ( int m = 1; m &lt;= iMonthsInYear; m++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapMonth( y, m, HebrewCalendar.CurrentEra ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n5761:           False   False   False   False   False   False   False   False   False   False   False   False\n5762:           False   False   False   False   False   False   False   False   False   False   False   False\n5763:           False   False   False   False   False   False   True    False   False   False   False   False   False\n5764:           False   False   False   False   False   False   False   False   False   False   False   False\n5765:           False   False   False   False   False   False   True    False   False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar.IsLeapMonth#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesHebrewCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Checks all the months in five years in the current era.\n      Dim iMonthsInYear As Integer\n      Dim y As Integer\n      For y = 5761 To 5765\n         Console.Write(&quot;{0}:&quot; + ControlChars.Tab, y)\n         iMonthsInYear = myCal.GetMonthsInYear(y, HebrewCalendar.CurrentEra)\n         Dim m As Integer\n         For m = 1 To iMonthsInYear\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapMonth(y, m, HebrewCalendar.CurrentEra))\n         Next m\n         Console.WriteLine()\n      Next y\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHebrewCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;5761:           False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;5762:           False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;5763:           False   False   False   False   False   False   True    False   False   False   False   False   False\n\n&#39;5764:           False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;5765:           False   False   False   False   False   False   True    False   False   False   False   False   False\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_IsLeapYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_IsLeapYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified year in the specified era is a leap year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era. Specify either <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>HebrewCalendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified year is a leap year; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> or <code>era</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).  </p>\n<p> In every 19-year cycle that ends with a year that is evenly divisible by 19, the 3rd, 6th, 8th, 11th, 14th, 17th, and 19th years are leap years. A common year can have from 353 to 355 days, depending on the placement of Jewish holidays. A leap year can have from 383 to 385 days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls <code>IsLeapYear</code> for five years in each of the eras.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HebrewCalendar.IsLeapYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHebrewCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a HebrewCalendar.\n      HebrewCalendar myCal = new HebrewCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Checks five years in the current era.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapYear( y, HebrewCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Checks five years in each of the eras.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 5761; y &lt;= 5765; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     False   False   True    False   True\nEra 1:          False   False   True    False   True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HebrewCalendar.IsLeapYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesHebrewCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a HebrewCalendar.\n      Dim myCal As New HebrewCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in the current era.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 5761 To 5765\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapYear(y, HebrewCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in each of the eras.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 5761 To 5765\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHebrewCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            5761    5762    5763    5764    5765\n\n&#39;CurrentEra:     False   False   True    False   True\n\n&#39;Era 1:          False   False   True    False   True\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HebrewCalendar.IsLeapYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a HebrewCalendar.\n   HebrewCalendar^ myCal = gcnew HebrewCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Checks five years in the current era.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 5761; y &lt;= 5765; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapYear( y, HebrewCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Checks five years in each of the eras.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 5761; y &lt;= 5765; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            5761    5762    5763    5764    5765\nCurrentEra:     False   False   True    False   True\nEra 1:          False   False   True    False   True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 13 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 30 that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hour</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 23 that represents the hour.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the minute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the second.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecond</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 999 that represents the millisecond.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era. Specify either <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_HebrewEra\" data-linktype=\"relative-path\">HebrewEra</a> or <code>HebrewCalendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code>, <code>month</code>, <code>day</code> or <code>era</code> is outside the range supported by the current <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> object.  </p>\n<p> -or-  </p>\n<p> <code>hour</code> is less than 0 or greater than 23.  </p>\n<p> -or-  </p>\n<p> <code>minute</code> is less than 0 or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>second</code> is less than 0 or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>millisecond</code> is less than 0 or greater than 999.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToDateTime method is useful because it can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.  </p>\n<p> This implementation of the <a class=\"xref\" href=\"system.globalization.hebrewcalendar\" data-linktype=\"relative-path\">HebrewCalendar</a> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_HebrewCalendar_ToFourDigitYear_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_HebrewCalendar_ToFourDigitYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToFourDigitYear(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified year to a 4-digit year by using the <span class=\"xref\">stem.Globalization.HebrewCalendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ToFourDigitYear (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 2-digit year from 0 through 99, or a 4-digit Hebrew calendar year from 5343 through 5999.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>If the <code>year</code> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <code>year</code> parameter is a 4-digit year, the return value is the unchanged <code>year</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is less than <span class=\"xref\">stem.Globalization.HebrewCalendar.MinSupportedDateTime*</span> or greater than <span class=\"xref\">stem.Globalization.HebrewCalendar.MaxSupportedDateTime*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToFourDigitYear method uses the <code>year</code> parameter, the <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> property, and a year to calculate a 4-digit year. The century is determined by finding the sole occurrence of the <code>year</code> parameter within that 100-year range. For example, if <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> is set to 5729, the 100-year range is from 5630 to 5729. Therefore, a value of 30 is interpreted as 5630, while a value of 29 is interpreted as 5729.  </p>\n<p> If the <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> property has the special value 99, the ToFourDigitYear method ignores the settings in the regional and language options in Control Panel and returns the value of the <code>year</code> parameter unchanged.  </p>\n<p> ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <a class=\"xref\" href=\"system.globalization.hebrewcalendar#System_Globalization_HebrewCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.HebrewCalendar.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.HebrewCalendar.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.AddMonths\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.AddYears\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.AlgorithmType\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.Eras\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetDayOfMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetDayOfWeek\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetDayOfYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetDaysInMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetDaysInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetMonthsInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.GetYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.HebrewEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.IsLeapDay\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.IsLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.IsLeapYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.MaxSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.MinSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.ToFourDigitYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.HebrewCalendar.TwoDigitYearMax\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3da2366b-64a9-ff8b-3a33-aa52e1446049\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\HebrewCalendar.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the Hebrew calendar.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.HebrewCalendar\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.HebrewCalendar.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.HebrewCalendar.yml","open_to_public_contributors":true,"api_name":["System.Globalization.HebrewCalendar","System.Globalization.HebrewCalendar..ctor","System.Globalization.HebrewCalendar.AddMonths","System.Globalization.HebrewCalendar.AddYears","System.Globalization.HebrewCalendar.AlgorithmType","System.Globalization.HebrewCalendar.Eras","System.Globalization.HebrewCalendar.GetDayOfMonth","System.Globalization.HebrewCalendar.GetDayOfWeek","System.Globalization.HebrewCalendar.GetDayOfYear","System.Globalization.HebrewCalendar.GetDaysInMonth","System.Globalization.HebrewCalendar.GetDaysInYear","System.Globalization.HebrewCalendar.GetEra","System.Globalization.HebrewCalendar.GetLeapMonth","System.Globalization.HebrewCalendar.GetMonth","System.Globalization.HebrewCalendar.GetMonthsInYear","System.Globalization.HebrewCalendar.GetYear","System.Globalization.HebrewCalendar.HebrewEra","System.Globalization.HebrewCalendar.IsLeapDay","System.Globalization.HebrewCalendar.IsLeapMonth","System.Globalization.HebrewCalendar.IsLeapYear","System.Globalization.HebrewCalendar.MaxSupportedDateTime","System.Globalization.HebrewCalendar.MinSupportedDateTime","System.Globalization.HebrewCalendar.ToDateTime","System.Globalization.HebrewCalendar.ToFourDigitYear","System.Globalization.HebrewCalendar.TwoDigitYearMax"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.HebrewCalendar","System::Globalization::HebrewCalendar","System.Globalization.HebrewCalendar.#ctor","System::Globalization::HebrewCalendar::#ctor","System.Globalization.HebrewCalendar.AddMonths","System::Globalization::HebrewCalendar::AddMonths","System.Globalization.HebrewCalendar.AddYears","System::Globalization::HebrewCalendar::AddYears","System.Globalization.HebrewCalendar.AlgorithmType","System::Globalization::HebrewCalendar::AlgorithmType","System.Globalization.HebrewCalendar.Eras","System::Globalization::HebrewCalendar::Eras","System.Globalization.HebrewCalendar.GetDayOfMonth","System::Globalization::HebrewCalendar::GetDayOfMonth","System.Globalization.HebrewCalendar.GetDayOfWeek","System::Globalization::HebrewCalendar::GetDayOfWeek","System.Globalization.HebrewCalendar.GetDayOfYear","System::Globalization::HebrewCalendar::GetDayOfYear","System.Globalization.HebrewCalendar.GetDaysInMonth","System::Globalization::HebrewCalendar::GetDaysInMonth","System.Globalization.HebrewCalendar.GetDaysInYear","System::Globalization::HebrewCalendar::GetDaysInYear","System.Globalization.HebrewCalendar.GetEra","System::Globalization::HebrewCalendar::GetEra","System.Globalization.HebrewCalendar.GetLeapMonth","System::Globalization::HebrewCalendar::GetLeapMonth","System.Globalization.HebrewCalendar.GetMonth","System::Globalization::HebrewCalendar::GetMonth","System.Globalization.HebrewCalendar.GetMonthsInYear","System::Globalization::HebrewCalendar::GetMonthsInYear","System.Globalization.HebrewCalendar.GetYear","System::Globalization::HebrewCalendar::GetYear","System.Globalization.HebrewCalendar.HebrewEra","System::Globalization::HebrewCalendar::HebrewEra","System.Globalization.HebrewCalendar.IsLeapDay","System::Globalization::HebrewCalendar::IsLeapDay","System.Globalization.HebrewCalendar.IsLeapMonth","System::Globalization::HebrewCalendar::IsLeapMonth","System.Globalization.HebrewCalendar.IsLeapYear","System::Globalization::HebrewCalendar::IsLeapYear","System.Globalization.HebrewCalendar.MaxSupportedDateTime","System::Globalization::HebrewCalendar::MaxSupportedDateTime","System.Globalization.HebrewCalendar.MinSupportedDateTime","System::Globalization::HebrewCalendar::MinSupportedDateTime","System.Globalization.HebrewCalendar.ToDateTime","System::Globalization::HebrewCalendar::ToDateTime","System.Globalization.HebrewCalendar.ToFourDigitYear","System::Globalization::HebrewCalendar::ToFourDigitYear","System.Globalization.HebrewCalendar.TwoDigitYearMax","System::Globalization::HebrewCalendar::TwoDigitYearMax"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3da2366b-64a9-ff8b-3a33-aa52e1446049","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\HebrewCalendar.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/HebrewCalendar.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HebrewCalendar class | Microsoft Docs","_op_ogTitle":"HebrewCalendar class","description":"Represents the Hebrew calendar.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.HebrewCalendar","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.hebrewcalendar","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.hebrewcalendar","fileRelativePath":"System.Globalization.HebrewCalendar.html"},"themesRelativePathToOutputRoot":"_themes/"}