{"content":"    \r\n    <h1 id=\"System_Text_RegularExpressions_Capture\">\r\n      <span class=\"lang-csharp\">Capture</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the results from a single successful subexpression capture.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Capture</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Capture</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A Capture object is immutable and has no public constructor. Instances are returned through the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a> object, which is returned by the <code>Match.Captures</code> and <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> properties. However, the <code>Match.Captures</code> property provides information about the same match as the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object.  </p>\n<p> If you do not apply a  to a capturing group, the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> property returns a <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a> with a single Capture object that provides information about the same capture as the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object. If you do apply a quantifier to a capturing group, the <code>Group.Index</code>, <code>Group.Length</code>, and <code>Group.Value</code> properties provide information only about the last captured group, whereas the Capture objects in the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a> provide information about all subexpression captures. The example provides an illustration.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Capture_Index\" data-linktype=\"self-bookmark\">Index</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The position in the original string where the first character of the captured substring is found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Capture_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length of the captured substring.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Capture_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the captured substring from the input string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Capture_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the captured substring from the input string by calling the <span class=\"xref\">stem.Text.RegularExpressions.Capture.Value*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Capture_Index\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Capture_Index_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Index</div>        \r\n          </div>\r\n    \r\n            <p>The position in the original string where the first character of the captured substring is found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Index { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based starting position in the original string where the captured substring is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Capture_Length\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Capture_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length of the captured substring.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The length of the captured substring.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Capture_Value\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Capture_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets the captured substring from the input string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Value { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The substring that is captured by the match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a call to the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> or <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method fails to find a match, the value of the returned <code>Match.Value</code> property is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If the regular expression engine is unable to match a capturing group. the value of the returned <code>Group.Value</code> property is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. See the second example for an illustration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a regular expression that matches sentences that contain no punctuation except for a period (&quot;.&quot;). The <code>Match.Value</code> property displays the result string, which consists of a matched sentence, for each match. The <code>Group.Value</code> property displays the result string for each capturing group; it consists of the last string captured by that capturing group. The Value property displays the result string for each capture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Capture.Class#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;Yes. This dog is very friendly.&quot;;\n      string pattern = @&quot;((\\w+)[\\s.])+&quot;;\n      foreach (Match match in Regex.Matches(input, pattern))\n      {\n         Console.WriteLine(&quot;Match: {0}&quot;, match.Value);\n         for (int groupCtr = 0; groupCtr &lt; match.Groups.Count; groupCtr++)\n         {\n            Group group = match.Groups[groupCtr];\n            Console.WriteLine(&quot;   Group {0}: {1}&quot;, groupCtr, group.Value);\n            for (int captureCtr = 0; captureCtr &lt; group.Captures.Count; captureCtr++)\n               Console.WriteLine(&quot;      Capture {0}: {1}&quot;, captureCtr, \n                                 group.Captures[captureCtr].Value);\n         }                      \n      }\n   }\n}\n// The example displays the following output:\n//       Match: Yes.\n//          Group 0: Yes.\n//             Capture 0: Yes.\n//          Group 1: Yes.\n//             Capture 0: Yes.\n//          Group 2: Yes\n//             Capture 0: Yes\n//       Match: This dog is very friendly.\n//          Group 0: This dog is very friendly.\n//             Capture 0: This dog is very friendly.\n//          Group 1: friendly.\n//             Capture 0: This\n//             Capture 1: dog\n//             Capture 2: is\n//             Capture 3: very\n//             Capture 4: friendly.\n//          Group 2: friendly\n//             Capture 0: This\n//             Capture 1: dog\n//             Capture 2: is\n//             Capture 3: very\n//             Capture 4: friendly\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Capture.Class#1\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;Yes. This dog is very friendly.&quot;\n      Dim pattern As String = &quot;((\\w+)[\\s.])+&quot;\n      For Each match As Match In Regex.Matches(input, pattern)\n         Console.WriteLine(&quot;Match: {0}&quot;, match.Value)\n         For groupCtr As Integer = 0 To match.Groups.Count - 1\n            Dim group As Group = match.Groups(groupCtr)\n            Console.WriteLine(&quot;   Group {0}: {1}&quot;, groupCtr, group.Value)\n            For captureCtr As Integer = 0 To group.Captures.Count - 1\n               Console.WriteLine(&quot;      Capture {0}: {1}&quot;, captureCtr, _\n                                 group.Captures(captureCtr).Value)\n            Next\n         Next                      \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Match: Yes.\n&#39;          Group 0: Yes.\n&#39;             Capture 0: Yes.\n&#39;          Group 1: Yes.\n&#39;             Capture 0: Yes.\n&#39;          Group 2: Yes\n&#39;             Capture 0: Yes\n&#39;       Match: This dog is very friendly.\n&#39;          Group 0: This dog is very friendly.\n&#39;             Capture 0: This dog is very friendly.\n&#39;          Group 1: friendly.\n&#39;             Capture 0: This\n&#39;             Capture 1: dog\n&#39;             Capture 2: is\n&#39;             Capture 3: very\n&#39;             Capture 4: friendly.\n&#39;          Group 2: friendly\n&#39;             Capture 0: This\n&#39;             Capture 1: dog\n&#39;             Capture 2: is\n&#39;             Capture 3: very\n&#39;             Capture 4: friendly\n</code></pre><p> The regular expression pattern <code>((\\w+)[\\s.])+</code> is defined as shown in the following table. Note that in this regular expression, a quantifier (+) is applied to the entire regular expression.  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(\\w+)</code></td>\n<td>Match one or more word characters. This is the second capturing group.</td>\n</tr>\n<tr>\n<td><code>[\\s.])</code></td>\n<td>Match a white-space character or period (&quot;.&quot;).</td>\n</tr>\n<tr>\n<td><code>((\\w+)[\\s.])</code></td>\n<td>Match one or more word characters followed by a white-space character or period (&quot;.&quot;). This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>((\\w+)[\\s.])+</code></td>\n<td>Match one or more occurrences of a word character or characters followed by a white-space character or period (&quot;.&quot;).</td>\n</tr>\n</tbody>\n</table>\n<p> In this example, the input string consists of two sentences. As the output shows, the first sentence consists of only one word, so the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a> object has a single <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> object that represents the same capture as the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object. The second sentence consists of multiple words, so the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> objects only contain information about the last matched subexpression. Group 1, which represents the first capture, contains the last word in the sentence that has a closing period. Group 2, which represents the second capture, contains the last word in the sentence. However, the <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> objects in the group&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a> object capture each subexpression match. The <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> objects in the first capturing group&#39;s collection of captures contain information about each captured word and white-space character or period. The <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> objects in the second capturing group&#39;s collection of captures contain information about each captured word.  </p>\n<p> The following example uses a regular expression pattern, <code>^([a-z]+)(\\d+)*\\.([a-z]+(\\d)*)$</code>, to match a product number that consists of two parts separated by a period. Both parts consist of alphabetic characters followed by optional numbers. Because the first input string does not match the pattern, the value of the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Match</a> object&#39;s <code>Value</code> property is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. Similarly, when the regular expression pattern is unable to match a capturing group, the value of the corresponding <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object&#39;s <code>Value</code> property is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Capture.Value#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String pattern = @&quot;^([a-z]+)(\\d+)?\\.([a-z]+(\\d)*)$&quot;;\n      String[] values = { &quot;AC10&quot;, &quot;Za203.CYM&quot;, &quot;XYZ.CoA&quot;, &quot;ABC.x170&quot; };   \n      foreach (var value in values) {\n         Match m = Regex.Match(value, pattern, RegexOptions.IgnoreCase);\n         if (m.Success) {\n            Console.WriteLine(&quot;Match: &#39;{0}&#39;&quot;, m.Value);\n            Console.WriteLine(&quot;   Number of Capturing Groups: {0}&quot;, \n                              m.Groups.Count);\n            for (int gCtr = 0; gCtr &lt; m.Groups.Count; gCtr++) {\n               Group group = m.Groups[gCtr];\n               Console.WriteLine(&quot;      Group {0}: {1}&quot;, gCtr, \n                                 group.Value == &quot;&quot; ? &quot;&lt;empty&gt;&quot; : &quot;&#39;&quot; + group.Value + &quot;&#39;&quot;);   \n               Console.WriteLine(&quot;         Number of Captures: {0}&quot;, \n                                 group.Captures.Count);\n           \n               for (int cCtr = 0; cCtr &lt; group.Captures.Count; cCtr++) \n                  Console.WriteLine(&quot;            Capture {0}: {1}&quot;, \n                                    cCtr, group.Captures[cCtr].Value);\n            }\n         } \n         else {\n            Console.WriteLine(&quot;No match for {0}: Match.Value is {1}&quot;, \n                              value, m.Value == String.Empty ? &quot;&lt;empty&gt;&quot; : m.Value);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       No match for AC10: Match.Value is &lt;empty&gt;\n//       Match: &#39;Za203.CYM&#39;\n//          Number of Capturing Groups: 5\n//             Group 0: &#39;Za203.CYM&#39;\n//                Number of Captures: 1\n//                   Capture 0: Za203.CYM\n//             Group 1: &#39;Za&#39;\n//                Number of Captures: 1\n//                   Capture 0: Za\n//             Group 2: &#39;203&#39;\n//                Number of Captures: 1\n//                   Capture 0: 203\n//             Group 3: &#39;CYM&#39;\n//                Number of Captures: 1\n//                   Capture 0: CYM\n//             Group 4: &lt;empty&gt;\n//                Number of Captures: 0\n//       Match: &#39;XYZ.CoA&#39;\n//          Number of Capturing Groups: 5\n//             Group 0: &#39;XYZ.CoA&#39;\n//                Number of Captures: 1\n//                   Capture 0: XYZ.CoA\n//             Group 1: &#39;XYZ&#39;\n//                Number of Captures: 1\n//                   Capture 0: XYZ\n//             Group 2: &lt;empty&gt;\n//                Number of Captures: 0\n//             Group 3: &#39;CoA&#39;\n//                Number of Captures: 1\n//                   Capture 0: CoA\n//             Group 4: &lt;empty&gt;\n//                Number of Captures: 0\n//       Match: &#39;ABC.x170&#39;\n//          Number of Capturing Groups: 5\n//             Group 0: &#39;ABC.x170&#39;\n//                Number of Captures: 1\n//                   Capture 0: ABC.x170\n//             Group 1: &#39;ABC&#39;\n//                Number of Captures: 1\n//                   Capture 0: ABC\n//             Group 2: &lt;empty&gt;\n//                Number of Captures: 0\n//             Group 3: &#39;x170&#39;\n//                Number of Captures: 1\n//                   Capture 0: x170\n//             Group 4: &#39;0&#39;\n//                Number of Captures: 3\n//                   Capture 0: 1\n//                   Capture 1: 7\n//                   Capture 2: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Capture.Value#1\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;^([a-z]+)(\\d+)?\\.([a-z]+(\\d)*)$&quot;\n      Dim values() As String = { &quot;AC10&quot;, &quot;Za203.CYM&quot;, &quot;XYZ.CoA&quot;, &quot;ABC.x170&quot; }   \n      For Each value In values\n         Dim m As Match = Regex.Match(value, pattern, RegexOptions.IgnoreCase)\n         If m.Success Then\n            Console.WriteLine(&quot;Match: &#39;{0}&#39;&quot;, m.Value)\n            Console.WriteLine(&quot;   Number of Capturing Groups: {0}&quot;, \n                              m.Groups.Count)\n            For gCtr As Integer = 0 To m.Groups.Count - 1\n               Dim group As Group = m.Groups(gCtr)\n               Console.WriteLine(&quot;      Group {0}: {1}&quot;, gCtr, \n                                 If(group.Value = &quot;&quot;, &quot;&lt;empty&gt;&quot;, &quot;&#39;&quot; + group.Value + &quot;&#39;&quot;))   \n               Console.WriteLine(&quot;         Number of Captures: {0}&quot;, \n                                 group.Captures.Count)\n           \n               For cCtr As Integer = 0 To group.Captures.Count - 1\n                  Console.WriteLine(&quot;            Capture {0}: {1}&quot;, \n                                    cCtr, group.Captures(cCtr).Value)\n               Next\n            Next\n         Else\n            Console.WriteLine(&quot;No match for {0}: Match.Value is {1}&quot;, \n                              value, If(m.Value = String.Empty, &quot;&lt;empty&gt;&quot;, m.Value))\n         End If\n      Next    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       No match for AC10: Match.Value is &lt;empty&gt;\n&#39;       Match: &#39;Za203.CYM&#39;\n&#39;          Number of Capturing Groups: 5\n&#39;             Group 0: &#39;Za203.CYM&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: Za203.CYM\n&#39;             Group 1: &#39;Za&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: Za\n&#39;             Group 2: &#39;203&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: 203\n&#39;             Group 3: &#39;CYM&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: CYM\n&#39;             Group 4: &lt;empty&gt;\n&#39;                Number of Captures: 0\n&#39;       Match: &#39;XYZ.CoA&#39;\n&#39;          Number of Capturing Groups: 5\n&#39;             Group 0: &#39;XYZ.CoA&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: XYZ.CoA\n&#39;             Group 1: &#39;XYZ&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: XYZ\n&#39;             Group 2: &lt;empty&gt;\n&#39;                Number of Captures: 0\n&#39;             Group 3: &#39;CoA&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: CoA\n&#39;             Group 4: &lt;empty&gt;\n&#39;                Number of Captures: 0\n&#39;       Match: &#39;ABC.x170&#39;\n&#39;          Number of Capturing Groups: 5\n&#39;             Group 0: &#39;ABC.x170&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: ABC.x170\n&#39;             Group 1: &#39;ABC&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: ABC\n&#39;             Group 2: &lt;empty&gt;\n&#39;                Number of Captures: 0\n&#39;             Group 3: &#39;x170&#39;\n&#39;                Number of Captures: 1\n&#39;                   Capture 0: x170\n&#39;             Group 4: &#39;0&#39;\n&#39;                Number of Captures: 3\n&#39;                   Capture 0: 1\n&#39;                   Capture 1: 7\n&#39;                   Capture 2: 0\n</code></pre><p> The regular expression pattern is defined as shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>^</code></td>\n<td>Begin the match at the beginning of the string.</td>\n</tr>\n<tr>\n<td><code>([a-z]+)</code></td>\n<td>Match one or more occurrences of any character from a to z. Because the regular expression engine is passed the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">System.Text.RegularExpressions.RegexOptions</a> option, this comparison is case-insensitive. This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>(\\d+)?</code></td>\n<td>Match zero or one occurrence of one or more decimal digits. This is the second capturing group.</td>\n</tr>\n<tr>\n<td><code>\\.</code></td>\n<td>Match a literal period character.</td>\n</tr>\n<tr>\n<td><code>([a-z]+</code></td>\n<td>Match one or more occurrences of any character from a to z. The comparison is case-insensitive.</td>\n</tr>\n<tr>\n<td><code>(\\d)*</code></td>\n<td>Match zero or more decimal digits. A single matched digit is the fourth capturing group.</td>\n</tr>\n<tr>\n<td><code>([a-z]+(\\d)*)</code></td>\n<td>Match one or more alphabetic characters from a to z followed by zero, one, or more decimal digits. This is the fourth capturing group.</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>Conclude the match at the end of the string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Capture_ToString\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Capture_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the captured substring from the input string by calling the <span class=\"xref\">stem.Text.RegularExpressions.Capture.Value*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The substring that was captured by the match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>ToString</code> is actually an internal call to the <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.Capture.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.Capture.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Capture\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Capture.Index\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Capture.Length\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Capture.ToString\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Capture.Value\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"dcff124c-dbd1-4b7a-549a-196bfaf97889\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the results from a single successful subexpression capture.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text.RegularExpressions/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.RegularExpressions.Capture\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.Capture.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.Capture.yml","open_to_public_contributors":true,"api_name":["System.Text.RegularExpressions.Capture","System.Text.RegularExpressions.Capture.Index","System.Text.RegularExpressions.Capture.Length","System.Text.RegularExpressions.Capture.ToString","System.Text.RegularExpressions.Capture.Value"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.RegularExpressions.Capture","System::Text::RegularExpressions::Capture","System.Text.RegularExpressions.Capture.Index","System::Text::RegularExpressions::Capture::Index","System.Text.RegularExpressions.Capture.Length","System::Text::RegularExpressions::Capture::Length","System.Text.RegularExpressions.Capture.ToString","System::Text::RegularExpressions::Capture::ToString","System.Text.RegularExpressions.Capture.Value","System::Text::RegularExpressions::Capture::Value"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"dcff124c-dbd1-4b7a-549a-196bfaf97889","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text.RegularExpressions/Capture.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Capture class | Microsoft Docs","_op_ogTitle":"Capture class","description":"Represents the results from a single successful subexpression capture.\n","toc_asset_id":"_splitted/System.Text.RegularExpressions/toc.json","toc_rel":"_splitted/System.Text.RegularExpressions/toc.json","source_url":"","ms.assetid":"System.Text.RegularExpressions.Capture","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.capture","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.capture","fileRelativePath":"System.Text.RegularExpressions.Capture.html"},"themesRelativePathToOutputRoot":"_themes/"}