{"content":"    \r\n    <h1 id=\"System_Security_IPermission\">\r\n      <span class=\"lang-csharp\">IPermission</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines methods implemented by permission types.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IPermission : System.Security.ISecurityEncodable</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Permissions in the common language runtime are objects that describe sets of operations that can be secured for specified resources. A permission object describes operations or access that is subject to security control; it does not represent access or a right to perform operations. Permissions are used by both application code and the .NET Framework security system in the following ways.  </p>\n<ul>\n<li><p>Code requests the permissions it needs in order to run.  </p>\n</li>\n<li><p>The security system policy grants permissions to code in order for it to run.  </p>\n</li>\n<li><p>Code demands that calling code has a permission.  </p>\n</li>\n<li><p>Code overrides the security stack using assert/deny/permit-only.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> If you write a new permission, you must implement this interface in your class.  </p>\n</div>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> A permission can be accessed by multiple threads. When implementing this interface, you must guarantee that the <a class=\"xref\" href=\"system.security.ipermission#System_Security_IPermission_IsSubsetOf_\" data-linktype=\"relative-path\">IsSubsetOf</a>, <a class=\"xref\" href=\"system.security.ipermission#System_Security_IPermission_Intersect_\" data-linktype=\"relative-path\">Intersect</a>, <a class=\"xref\" href=\"system.security.ipermission#System_Security_IPermission_Union_\" data-linktype=\"relative-path\">Union</a>, and <a class=\"xref\" href=\"system.security.ipermission#System_Security_IPermission_Copy_\" data-linktype=\"relative-path\">Copy</a> method implementations are thread safe.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_IPermission_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns an identical copy of the current permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_IPermission_Demand\" data-linktype=\"self-bookmark\">Demand()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> at run time if the security requirement is not met.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_IPermission_Intersect_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Intersect(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns a permission that is the intersection of the current permission and the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_IPermission_IsSubsetOf_System_Security_IPermission_\" data-linktype=\"self-bookmark\">IsSubsetOf(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current permission is a subset of the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_IPermission_Union_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Union(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a permission that is the union of the current permission and the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_IPermission_Copy\">\r\n    \r\n            <a id=\"System_Security_IPermission_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns an identical copy of the current permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.IPermission Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A copy of the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A copy of a permission represents the same access to resources as the original permission.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates implementing the Copy method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Permission#4\">    // Return a new object that matches &#39;this&#39; object&#39;s permissions.\n    public sealed override IPermission Copy()\n    {\n        return (IPermission)Clone();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Permission#4\">    &#39; Return a new object that matches &#39;this&#39; object&#39;s permissions.\n    Public Overrides Function Copy() As IPermission\n        Return CType(Clone(), IPermission)\n\n    End Function &#39;Copy\n</code></pre><pre><code class=\"lang-cpp\" name=\"Permission#4\">    // Return a new object that matches &#39;this&#39; object&#39;s permissions.\npublic:\n    virtual IPermission^ Copy () override sealed\n    {\n        return (IPermission^) Clone();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_IPermission_Demand\">\r\n    \r\n            <a id=\"System_Security_IPermission_Demand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Demand()</div>        \r\n          </div>\r\n    \r\n            <p>Throws a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> at run time if the security requirement is not met.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Demand ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand_\" data-linktype=\"relative-path\">Demand</a> for the necessary <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> before performing a file operation requested by the caller.  </p>\n<p> Although the majority of the classes that implement this interface method satisfy the security criteria by performing a full stack walk, a stack walk is not necessarily performed. An example of an implementation that does not perform a stack walk is <a class=\"xref\" href=\"system.security.permissions.principalpermission#System_Security_Permissions_PrincipalPermission_Demand_\" data-linktype=\"relative-path\">Demand</a>.  </p>\n<p> When a stack walk is performed, the permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand_\" data-linktype=\"relative-path\">Demand</a> succeeds only if no <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is raised.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_IPermission_Intersect_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_IPermission_Intersect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns a permission that is the intersection of the current permission and the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.IPermission Intersect (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission to intersect with the current permission. It must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new permission that represents the intersection of the current permission and the specified permission. This new permission is <code>null</code> if the intersection is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not an instance of the same class as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.  </p>\n<p> The following statements are required to be true for all implementations of the Intersect method. <code>X</code> and <code>Y</code> represent <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> object references that are not <code>null</code>.  </p>\n<ul>\n<li><p><code>X</code>.Intersect(<code>X</code>) returns a value equal to <code>X</code>.  </p>\n</li>\n<li><p><code>X</code>.Intersect(<code>Y</code>) returns the same value as <code>Y</code>.Intersect(<code>X</code>).  </p>\n</li>\n<li><p><code>X</code>.Intersect(<code>null</code>) returns <code>null</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates implementing the Intersect method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Permission#2\">    // Return a new object that contains the intersection of &#39;this&#39; and &#39;target&#39;.\n    public override IPermission Intersect(IPermission target)\n    {\n        // If &#39;target&#39; is null, return null.\n        if (target == null) return null;\n\n        // Both objects must be the same type.\n        SoundPermission soundPerm = VerifyTypeMatch(target);\n\n        // If &#39;this&#39; and &#39;target&#39; are unrestricted, return a new unrestricted permission.\n        if (m_specifiedAsUnrestricted &amp;&amp; soundPerm.m_specifiedAsUnrestricted)\n            return Clone(true, SoundPermissionState.PlayAnySound);\n\n        // Calculate the intersected permissions. If there are none, return null.\n        SoundPermissionState val = (SoundPermissionState)\n            Math.Min((Int32)m_flags, (Int32)soundPerm.m_flags);\n        if (val == 0) return null;\n\n        // Return a new object with the intersected permission value.\n        return Clone(false, val);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Permission#2\">    &#39; Return a new object that contains the intersection of &#39;this&#39; and &#39;target&#39;.\n    Public Overrides Function Intersect(ByVal target As IPermission) As IPermission\n        &#39; If &#39;target&#39; is null, return null.\n        If target Is Nothing Then\n            Return Nothing\n        End If\n        &#39; Both objects must be the same type.\n        Dim soundPerm As SoundPermission = VerifyTypeMatch(target)\n\n        &#39; If &#39;this&#39; and &#39;target&#39; are unrestricted, return a new unrestricted permission.\n        If m_specifiedAsUnrestricted AndAlso soundPerm.m_specifiedAsUnrestricted Then\n            Return Clone(True, SoundPermissionState.PlayAnySound)\n        End If\n        &#39; Calculate the intersected permissions. If there are none, return null.\n        Dim val As SoundPermissionState = CType(Math.Min(CType(m_flags, Int32), CType(soundPerm.m_flags, Int32)), SoundPermissionState)\n        If val = 0 Then\n            Return Nothing\n        End If\n        &#39; Return a new object with the intersected permission value.\n        Return Clone(False, val)\n\n    End Function &#39;Intersect\n</code></pre><pre><code class=\"lang-cpp\" name=\"Permission#2\">    // Return a new object that contains the intersection \n    // of &#39;this&#39; and &#39;target&#39;.\npublic:\n    virtual IPermission^ Intersect(IPermission^ target) override\n    {\n        // If &#39;target&#39; is null, return null.\n        if (target == nullptr)\n        {\n            return nullptr;\n        }\n\n        // Both objects must be the same type.\n        SoundPermission^ soundPerm = VerifyTypeMatch(target);\n\n        // If &#39;this&#39; and &#39;target&#39; are unrestricted, \n        // return a new unrestricted permission.\n        if (specifiedAsUnrestricted &amp;&amp; soundPerm-&gt;specifiedAsUnrestricted)\n        {\n            return Clone(true, SoundPermissionState::PlayAnySound);\n        }\n\n        // Calculate the intersected permissions. \n        // If there are none, return null.\n        SoundPermissionState minimumPermission = (SoundPermissionState)\n            Math::Min((int) stateFlags, (int) soundPerm-&gt;stateFlags);\n        if ((int)minimumPermission == 0)\n        {\n            return nullptr;\n        }\n\n        // Return a new object with the intersected permission value.\n        return Clone(false, minimumPermission);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_IPermission_IsSubsetOf_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_IPermission_IsSubsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubsetOf(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current permission is a subset of the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSubsetOf (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current permission is a subset of the specified permission; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\. If this method returns <code>true</code>, the current permission represents no more access to the protected resource than does the specified permission.  </p>\n<p> The following statements are required to be true for all implementations of the IsSubsetOf method. <code>X</code>, <code>Y</code>, and <code>Z</code> represent <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> objects that are not <code>null</code>.  </p>\n<ul>\n<li><p><code>X</code>.IsSubsetOf(<code>X</code>) returns <code>true</code>.  </p>\n</li>\n<li><p><code>X</code>.IsSubsetOf(<code>Y</code>) returns the same value as <code>Y</code>.IsSubsetOf(<code>X</code>) if and only if <code>X</code> and <code>Y</code> represent the same set of permissions.  </p>\n</li>\n<li><p>If <code>X</code>.IsSubsetOf(<code>Y</code>) and <code>Y</code>.IsSubsetOf(<code>Z</code>) both return <code>true</code>, <code>X</code>.IsSubsetOf(<code>Z</code>) returns <code>true</code>.  </p>\n<p>If <code>X</code> represents an empty <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> object with a permission state of <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> and <code>Y</code> represents an <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> object that is <code>null</code>, <code>X</code>.IsSubsetOf(<code>Y</code>) returns <code>true</code>. If <code>Z</code> is also an empty permission, the compound set operation <code>X</code>.Union(Z).IsSubsetOf(Y) also returns <code>true</code> because the union of two empty permissions is an empty permission.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates implementing the IsSubsetOf method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Permission#3\">    // Called by the Demand method: returns true if &#39;this&#39; is a subset of &#39;target&#39;.\n    public override Boolean IsSubsetOf(IPermission target)\n    {\n        // If &#39;target&#39; is null and this permission allows nothing, return true.\n        if (target == null) return m_flags == 0;\n\n        // Both objects must be the same type.\n        SoundPermission soundPerm = VerifyTypeMatch(target);\n\n        // Return true if the permissions of &#39;this&#39; is a subset of &#39;target&#39;.\n        return m_flags &lt;= soundPerm.m_flags;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Permission#3\">    &#39; Called by the Demand method: returns true if &#39;this&#39; is a subset of &#39;target&#39;.\n    Public Overrides Function IsSubsetOf(ByVal target As IPermission) As [Boolean]\n        &#39; If &#39;target&#39; is null and this permission allows nothing, return true.\n        If target Is Nothing Then\n            Return m_flags = 0\n        End If\n        &#39; Both objects must be the same type.\n        Dim soundPerm As SoundPermission = VerifyTypeMatch(target)\n\n        &#39; Return true if the permissions of &#39;this&#39; is a subset of &#39;target&#39;.\n        Return m_flags &lt;= soundPerm.m_flags\n\n    End Function &#39;IsSubsetOf\n</code></pre><pre><code class=\"lang-cpp\" name=\"Permission#3\">    // Called by the Demand method: returns true \n    // if &#39;this&#39; is a subset of &#39;target&#39;.\npublic:\n    virtual bool IsSubsetOf(IPermission^ target) override\n    {\n        // If &#39;target&#39; is null and this permission allows nothing, \n        // return true.\n        if (target == nullptr)\n        {\n            return (int)stateFlags == 0;\n        }\n\n        // Both objects must be the same type.\n        SoundPermission^ soundPerm = VerifyTypeMatch(target);\n\n        // Return true if the permissions of &#39;this&#39; \n        // is a subset of &#39;target&#39;.\n        return stateFlags &lt;= soundPerm-&gt;stateFlags;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_IPermission_Union_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_IPermission_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a permission that is the union of the current permission and the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.IPermission Union (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission to combine with the current permission. It must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new permission that represents the union of the current permission and the specified permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.  </p>\n<p> The following statements are required to be true for all implementations of the Union method. <code>X</code> and <code>Y</code> represent <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> objects that are not <code>null</code>.  </p>\n<ul>\n<li><p><code>X</code>.Union(<code>X</code>) returns an object that has the same value as <code>X</code>.  </p>\n</li>\n<li><p><code>X</code>.Union(<code>Y</code>) returns an object that has the same value as the object returned by <code>Y</code>.Union(<code>X</code>).  </p>\n</li>\n<li><p><code>X</code>.Union(<code>null</code>) returns an object that has the same value as <code>X</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates implementing the Union method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Permission#5\">    // Return a new object that contains the union of &#39;this&#39; and &#39;target&#39;.\n    // Note: You do not have to implement this method. If you do not, the version\n    // in CodeAccessPermission does this:\n    //    1. If target is not null, a NotSupportedException is thrown.\n    //    2. If target is null, then Copy is called and the new object is returned.\n    public override IPermission Union(IPermission target)\n    {\n        // If &#39;target&#39; is null, then return a copy of &#39;this&#39;.\n        if (target == null) return Copy();\n\n        // Both objects must be the same type.\n        SoundPermission soundPerm = VerifyTypeMatch(target);\n\n        // If &#39;this&#39; or &#39;target&#39; are unrestricted, return a new unrestricted permission.\n        if (m_specifiedAsUnrestricted || soundPerm.m_specifiedAsUnrestricted)\n            return Clone(true, SoundPermissionState.PlayAnySound);\n\n        // Return a new object with the calculated, unioned permission value.\n        return Clone(false, (SoundPermissionState)\n            Math.Max((Int32)m_flags, (Int32)soundPerm.m_flags));\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Permission#5\">    &#39; Return a new object that contains the union of &#39;this&#39; and &#39;target&#39;.\n    &#39; Note: You do not have to implement this method. If you do not, the version\n    &#39; in CodeAccessPermission does this:\n    &#39;    1. If target is not null, a NotSupportedException is thrown.\n    &#39;    2. If target is null, then Copy is called and the new object is returned.\n    Public Overrides Function Union(ByVal target As IPermission) As IPermission\n        &#39; If &#39;target&#39; is null, then return a copy of &#39;this&#39;.\n        If target Is Nothing Then\n            Return Copy()\n        End If\n        &#39; Both objects must be the same type.\n        Dim soundPerm As SoundPermission = VerifyTypeMatch(target)\n\n        &#39; If &#39;this&#39; or &#39;target&#39; are unrestricted, return a new unrestricted permission.\n        If m_specifiedAsUnrestricted OrElse soundPerm.m_specifiedAsUnrestricted Then\n            Return Clone(True, SoundPermissionState.PlayAnySound)\n        End If\n        &#39; Return a new object with the calculated, unioned permission value.\n        Return Clone(False, CType(Math.Max(CType(m_flags, Int32), CType(soundPerm.m_flags, Int32)), SoundPermissionState))\n\n    End Function &#39;Union\n</code></pre><pre><code class=\"lang-cpp\" name=\"Permission#5\">    // Return a new object that contains the union of &#39;this&#39; and &#39;target&#39;.\n    // Note: You do not have to implement this method. \n    // If you do not, the version\n    // in CodeAccessPermission does this:\n    //    1. If target is not null, a NotSupportedException is thrown.\n    //    2. If target is null, then Copy is called and \n    //       the new object is returned.\npublic:\n    virtual IPermission^ Union(IPermission^ target) override\n    {\n        // If &#39;target&#39; is null, then return a copy of &#39;this&#39;.\n        if (target == nullptr)\n        {\n            return Copy();\n        }\n\n        // Both objects must be the same type.\n        SoundPermission^ soundPerm = VerifyTypeMatch(target);\n\n        // If &#39;this&#39; or &#39;target&#39; are unrestricted, \n        // return a new unrestricted permission.\n        if (specifiedAsUnrestricted || soundPerm-&gt;specifiedAsUnrestricted)\n        {\n            return Clone(true, SoundPermissionState::PlayAnySound);\n        }\n\n        // Return a new object with the calculated, unioned permission value.\n        return Clone(false, (SoundPermissionState)\n            Math::Max((int) stateFlags, (int) soundPerm-&gt;stateFlags));\n    }\n</code></pre><p>-</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.IPermission.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.IPermission.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.IPermission\">\r\n<meta name=\"APIName\" content=\"System.Security.IPermission.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.IPermission.Demand\">\r\n<meta name=\"APIName\" content=\"System.Security.IPermission.Intersect\">\r\n<meta name=\"APIName\" content=\"System.Security.IPermission.IsSubsetOf\">\r\n<meta name=\"APIName\" content=\"System.Security.IPermission.Union\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a217cdc4-09e5-2130-36fc-321f82a26340\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines methods implemented by permission types.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.IPermission\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.IPermission.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.IPermission.yml","open_to_public_contributors":true,"api_name":["System.Security.IPermission","System.Security.IPermission.Copy","System.Security.IPermission.Demand","System.Security.IPermission.Intersect","System.Security.IPermission.IsSubsetOf","System.Security.IPermission.Union"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.IPermission","System::Security::IPermission","System.Security.IPermission.Copy","System::Security::IPermission::Copy","System.Security.IPermission.Demand","System::Security::IPermission::Demand","System.Security.IPermission.Intersect","System::Security::IPermission::Intersect","System.Security.IPermission.IsSubsetOf","System::Security::IPermission::IsSubsetOf","System.Security.IPermission.Union","System::Security::IPermission::Union"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a217cdc4-09e5-2130-36fc-321f82a26340","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security/IPermission.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IPermission interface | Microsoft Docs","_op_ogTitle":"IPermission interface","description":"Defines methods implemented by permission types.\n","toc_asset_id":"_splitted/System.Security/toc.json","toc_rel":"_splitted/System.Security/toc.json","source_url":"","ms.assetid":"System.Security.IPermission","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.ipermission","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.ipermission","fileRelativePath":"System.Security.IPermission.html"},"themesRelativePathToOutputRoot":"_themes/"}