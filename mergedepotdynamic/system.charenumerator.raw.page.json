{"content":"    \r\n    <h1 id=\"System_CharEnumerator\">\r\n      <span class=\"lang-csharp\">CharEnumerator</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Supports iterating over a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object and reading its individual characters. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CharEnumerator</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A CharEnumerator provides read-only access to the characters in a referenced <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. For example, the <code>foreach</code> statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a CharEnumerator from a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object in order to iterate through the characters in that object.  </p>\n<p> There is no public constructor for CharEnumerator. Instead, call a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object&#39;s <a class=\"xref\" href=\"system.string#System_String_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method to obtain a CharEnumerator that is initialized to reference the string.  </p>\n<p> A CharEnumerator maintains an internal index to the characters in the string the CharEnumerator references. The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string. The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete. An exception is thrown if you attempt to access a character while the index is invalid.  </p>\n<p> The <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method increments the index by one, so the first and subsequent characters are accessed in turn. The <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> method sets the index to a position logically before the first character. The <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property retrieves the character currently referenced by index. The <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_Clone_\" data-linktype=\"relative-path\">Clone</a> method creates a copy of the CharEnumerator.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Several independent instances of CharEnumerator across one or more threads can have access to a single instance of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. This class is implemented to support the <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> interface. For more information regarding the use of an enumerator, see the <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> topic.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CharEnumerator_Current\" data-linktype=\"self-bookmark\">Current</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the currently referenced character in the string enumerated by this <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CharEnumerator_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a copy of the current <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CharEnumerator_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CharEnumerator_MoveNext\" data-linktype=\"self-bookmark\">MoveNext()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Increments the internal index of the current <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object to the next character of the enumerated string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CharEnumerator_Reset\" data-linktype=\"self-bookmark\">Reset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes the index to a position logically before the first character of the enumerated string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_CharEnumerator_System_Collections_IEnumerator_Current\" data-linktype=\"self-bookmark\">IEnumerator.Current</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the currently referenced character in the string enumerated by this <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object. For a description of this member, see <span class=\"xref\">stem.Collections.IEnumerator.Current*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CharEnumerator_Current\">\r\n    \r\n            <a id=\"System_CharEnumerator_Current_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Current</div>        \r\n          </div>\r\n    \r\n            <p>Gets the currently referenced character in the string enumerated by this <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public char Current { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The Unicode character currently referenced by this <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The index is invalid; that is, it is before the first or after the last character of the enumerated string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> class maintains an internal index to the enumerated string, and the Current property returns the character that is currently referenced by the index. This property should be invoked only when the index is valid; otherwise, an exception is thrown.  </p>\n<p> The index is always invalid for an empty string (&quot;&quot;). The index is also invalid after the <a class=\"xref\" href=\"system.string#System_String_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> or <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> method is called. After either of these methods is called, invoke the <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to adjust the index to the first character in the enumerated string. The index is valid whenever the <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method returns <code>true</code>.  </p>\n<p> Current does not move the index, and consecutive calls to Current return the same character until <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>, <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a>, or <a class=\"xref\" href=\"system.string#System_String_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> is called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> class to enumerate the individual characters in a string. It instantiates a <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object by calling the <a class=\"xref\" href=\"system.string#System_String_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method, moves from one character to the next by calling the <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method, and displays the current character by retrieving the value of the Current property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.CharEnumerator.Class#1\">      string title = &quot;A Tale of Two Cities&quot;;\n      CharEnumerator chEnum = title.GetEnumerator();\n      int ctr = 1;\n      string outputLine1 = null;\n      string outputLine2 = null;\n      string outputLine3 = null; \n      \n      while (chEnum.MoveNext())\n      {\n         outputLine1 += ctr &lt; 10 || ctr % 10 != 0 ? &quot;  &quot; : (ctr / 10) + &quot; &quot;;\n         outputLine2 += (ctr % 10) + &quot; &quot;;\n         outputLine3 += chEnum.Current + &quot; &quot;;\n         ctr++;\n      }\n      \n      Console.WriteLine(&quot;The length of the string is {0} characters:&quot;, \n                        title.Length);\n      Console.WriteLine(outputLine1);\n      Console.WriteLine(outputLine2);    \n      Console.WriteLine(outputLine3);\n      // The example displays the following output to the console:      \n      //       The length of the string is 20 characters:\n      //                         1                   2\n      //       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n      //       A   T a l e   o f   T w o   C i t i e s\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.CharEnumerator.Class#1\">   String ^ title = &quot;A Tale of Two Cities&quot;;\n   CharEnumerator ^ chEnum = title-&gt;GetEnumerator();\n   int ctr = 1;\n   String ^ outputLine1 = nullptr;\n   String ^ outputLine2 = nullptr;\n   String ^ outputLine3 = nullptr; \n\n   while (chEnum-&gt;MoveNext())\n   {\n      outputLine1 += ctr &lt; 10 || ctr % 10 != 0 ? &quot;  &quot; : (ctr / 10) + &quot; &quot;;\n      outputLine2 += (ctr % 10) + &quot; &quot;;\n      outputLine3 += chEnum-&gt;Current + &quot; &quot;;\n      ctr++;\n   }\n\n   Console::WriteLine(&quot;The length of the string is {0} characters:&quot;, \n                     title-&gt;Length);\n   Console::WriteLine(outputLine1);\n   Console::WriteLine(outputLine2);    \n   Console::WriteLine(outputLine3);\n   // The example displays the following output to the console:      \n   //       The length of the string is 20 characters:\n   //                         1                   2\n   //       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n   //       A   T a l e   o f   T w o   C i t i e s\n</code></pre><pre><code class=\"lang-vb\" name=\"System.CharEnumerator.Class#1\">      Dim title As String = &quot;A Tale of Two Cities&quot;\n      Dim chEnum As CharEnumerator = title.GetEnumerator()\n      Dim ctr As Integer = 1\n      Dim outputLine1, outputLine2, outputLine3 As String \n      \n      Do While chEnum.MoveNext()\n         outputLine1 += CStr(iif(ctr &lt; 10 Or ctr Mod 10 &lt;&gt; 0, &quot;  &quot;, CStr(ctr \\ 10) + &quot; &quot;)) \n         outputLine2 += (ctr Mod 10)&amp; &quot; &quot;\n         outputLine3 += chEnum.Current &amp; &quot; &quot;\n         ctr += 1\n      Loop\n      \n      Console.WriteLine(&quot;The length of the string is {0} characters:&quot;, _\n                        title.Length)\n      Console.WriteLine(outputLine1)\n      Console.WriteLine(outputLine2)    \n      Console.WriteLine(outputLine3)\n      &#39; The example displays the following output to the console:      \n      &#39;       The length of the string is 20 characters:\n      &#39;                         1                   2\n      &#39;       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n      &#39;       A   T a l e   o f   T w o   C i t i e s\n</code></pre><p> Note, however, that the same operation can be performed somewhat more intuitively by using <code>foreach</code> (in C#) or <code>For Each</code> (in Visual Basic), as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.CharEnumerator.Class#2\">      string title = &quot;A Tale of Two Cities&quot;;\n      int ctr = 1;\n      string outputLine1 = null;\n      string outputLine2 = null;\n      string outputLine3 = null; \n      \n      foreach (char ch in title)\n      {\n         outputLine1 += ctr &lt; 10 || ctr % 10 != 0 ? &quot;  &quot; : (ctr / 10) + &quot; &quot;;\n         outputLine2 += (ctr % 10) + &quot; &quot;;\n         outputLine3 += ch + &quot; &quot;;\n         ctr++;\n      }\n      \n      Console.WriteLine(&quot;The length of the string is {0} characters:&quot;, \n                        title.Length);\n      Console.WriteLine(outputLine1);\n      Console.WriteLine(outputLine2);    \n      Console.WriteLine(outputLine3);\n      // The example displays the following output to the console:      \n      //       The length of the string is 20 characters:\n      //                         1                   2\n      //       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n      //       A   T a l e   o f   T w o   C i t i e s\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.CharEnumerator.Class#2\">   String ^ title = &quot;A Tale of Two Cities&quot;;\n   int ctr = 1;\n   String ^ outputLine1 = nullptr;\n   String ^ outputLine2 = nullptr;\n   String ^ outputLine3 = nullptr; \n\n   for each (wchar_t ch in title)\n   {\n      outputLine1 += ctr &lt; 10 || ctr % 10 != 0 ? &quot;  &quot; : (ctr / 10) + &quot; &quot;;\n      outputLine2 += (ctr % 10) + &quot; &quot;;\n      outputLine3 += ch + &quot; &quot;;\n      ctr++;\n   }\n\n   Console::WriteLine(&quot;The length of the string is {0} characters:&quot;, \n                     title-&gt;Length);\n   Console::WriteLine(outputLine1);\n   Console::WriteLine(outputLine2);    \n   Console::WriteLine(outputLine3);\n   // The example displays the following output to the console:      \n   //       The length of the string is 20 characters:\n   //                         1                   2\n   //       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n   //       A   T a l e   o f   T w o   C i t i e s\n</code></pre><pre><code class=\"lang-vb\" name=\"System.CharEnumerator.Class#2\">      Dim title As String = &quot;A Tale of Two Cities&quot;\n      Dim ctr As Integer = 1\n      Dim outputLine1, outputLine2, outputLine3 As String \n      \n      For Each ch As Char In title\n         outputLine1 += CStr(iif(ctr &lt; 10 Or ctr Mod 10 &lt;&gt; 0, &quot;  &quot;, CStr(ctr \\ 10) + &quot; &quot;)) \n         outputLine2 += (ctr Mod 10)&amp; &quot; &quot;\n         outputLine3 += ch &amp; &quot; &quot;\n         ctr += 1\n      Next\n      \n      Console.WriteLine(&quot;The length of the string is {0} characters:&quot;, _\n                        title.Length)\n      Console.WriteLine(outputLine1)\n      Console.WriteLine(outputLine2)    \n      Console.WriteLine(outputLine3)\n      &#39; The example displays the following output to the console:      \n      &#39;       The length of the string is 20 characters:\n      &#39;                         1                   2\n      &#39;       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n      &#39;       A   T a l e   o f   T w o   C i t i e s\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CharEnumerator_Clone\">\r\n    \r\n            <a id=\"System_CharEnumerator_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a copy of the current <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is a copy of the current <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is a copy of this instance of <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> and its current state. This is useful for saving your state while iterating through a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.  </p>\n<p> For example, suppose your application uses an original instance of <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> to iterate through each character in a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. When some unique character is encountered, your application pauses processing and invokes the Clone method. In effect, this saves the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object&#39;s index in the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> Your application uses the clone to navigate to another part of the <code>String</code> to perform some auxiliary processing. The side-effect of this navigation is the clone loses track of the position where processing stopped. However, when the auxiliary processing is complete, your application discards the clone and uses the original <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> instance to resume working on the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> where the original processing stopped.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method is implemented to support the <a class=\"xref\" href=\"system.icloneable\" data-linktype=\"relative-path\">ICloneable</a> interface.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CharEnumerator_Dispose\">\r\n    \r\n            <a id=\"System_CharEnumerator_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call Dispose when you are finished using the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a>. The Dispose method leaves the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> in an unusable state. After calling Dispose, you must release all references to the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call Dispose before you release your last reference to the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CharEnumerator_MoveNext\">\r\n    \r\n            <a id=\"System_CharEnumerator_MoveNext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveNext()</div>        \r\n          </div>\r\n    \r\n            <p>Increments the internal index of the current <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object to the next character of the enumerated string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool MoveNext ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the index is successfully incremented and within the enumerated string; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> class maintains an internal index to the enumerated string, and the MoveNext method increments the index by one. Call MoveNext after calling <a class=\"xref\" href=\"system.string#System_String_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> or <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> to increment the current character position to the first character in the enumerated string. Check that the return value is <code>true</code> to determine that the current character position is valid.  </p>\n<p> If the index is already beyond the last character of the enumerated string, the index is not changed and <code>false</code> is returned.  </p>\n<p> Notice that if the enumerated string is empty (&quot;&quot;), the state of the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> is always invalid. This is because the internal index for the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> is initially before the first character of the enumerated string and is therefore invalid. MoveNext logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> class to enumerate the individual characters in a string. It instantiates a <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object by calling the <a class=\"xref\" href=\"system.string#System_String_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <a class=\"xref\" href=\"system.charenumerator#System_CharEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.CharEnumerator.Class#1\">      string title = &quot;A Tale of Two Cities&quot;;\n      CharEnumerator chEnum = title.GetEnumerator();\n      int ctr = 1;\n      string outputLine1 = null;\n      string outputLine2 = null;\n      string outputLine3 = null; \n      \n      while (chEnum.MoveNext())\n      {\n         outputLine1 += ctr &lt; 10 || ctr % 10 != 0 ? &quot;  &quot; : (ctr / 10) + &quot; &quot;;\n         outputLine2 += (ctr % 10) + &quot; &quot;;\n         outputLine3 += chEnum.Current + &quot; &quot;;\n         ctr++;\n      }\n      \n      Console.WriteLine(&quot;The length of the string is {0} characters:&quot;, \n                        title.Length);\n      Console.WriteLine(outputLine1);\n      Console.WriteLine(outputLine2);    \n      Console.WriteLine(outputLine3);\n      // The example displays the following output to the console:      \n      //       The length of the string is 20 characters:\n      //                         1                   2\n      //       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n      //       A   T a l e   o f   T w o   C i t i e s\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.CharEnumerator.Class#1\">   String ^ title = &quot;A Tale of Two Cities&quot;;\n   CharEnumerator ^ chEnum = title-&gt;GetEnumerator();\n   int ctr = 1;\n   String ^ outputLine1 = nullptr;\n   String ^ outputLine2 = nullptr;\n   String ^ outputLine3 = nullptr; \n\n   while (chEnum-&gt;MoveNext())\n   {\n      outputLine1 += ctr &lt; 10 || ctr % 10 != 0 ? &quot;  &quot; : (ctr / 10) + &quot; &quot;;\n      outputLine2 += (ctr % 10) + &quot; &quot;;\n      outputLine3 += chEnum-&gt;Current + &quot; &quot;;\n      ctr++;\n   }\n\n   Console::WriteLine(&quot;The length of the string is {0} characters:&quot;, \n                     title-&gt;Length);\n   Console::WriteLine(outputLine1);\n   Console::WriteLine(outputLine2);    \n   Console::WriteLine(outputLine3);\n   // The example displays the following output to the console:      \n   //       The length of the string is 20 characters:\n   //                         1                   2\n   //       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n   //       A   T a l e   o f   T w o   C i t i e s\n</code></pre><pre><code class=\"lang-vb\" name=\"System.CharEnumerator.Class#1\">      Dim title As String = &quot;A Tale of Two Cities&quot;\n      Dim chEnum As CharEnumerator = title.GetEnumerator()\n      Dim ctr As Integer = 1\n      Dim outputLine1, outputLine2, outputLine3 As String \n      \n      Do While chEnum.MoveNext()\n         outputLine1 += CStr(iif(ctr &lt; 10 Or ctr Mod 10 &lt;&gt; 0, &quot;  &quot;, CStr(ctr \\ 10) + &quot; &quot;)) \n         outputLine2 += (ctr Mod 10)&amp; &quot; &quot;\n         outputLine3 += chEnum.Current &amp; &quot; &quot;\n         ctr += 1\n      Loop\n      \n      Console.WriteLine(&quot;The length of the string is {0} characters:&quot;, _\n                        title.Length)\n      Console.WriteLine(outputLine1)\n      Console.WriteLine(outputLine2)    \n      Console.WriteLine(outputLine3)\n      &#39; The example displays the following output to the console:      \n      &#39;       The length of the string is 20 characters:\n      &#39;                         1                   2\n      &#39;       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n      &#39;       A   T a l e   o f   T w o   C i t i e s\n</code></pre><p> Note, however, that the same operation can be performed somewhat more intuitively by using <code>foreach</code> (in C#) or <code>For Each</code> (in Visual Basic), as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.CharEnumerator.Class#2\">      string title = &quot;A Tale of Two Cities&quot;;\n      int ctr = 1;\n      string outputLine1 = null;\n      string outputLine2 = null;\n      string outputLine3 = null; \n      \n      foreach (char ch in title)\n      {\n         outputLine1 += ctr &lt; 10 || ctr % 10 != 0 ? &quot;  &quot; : (ctr / 10) + &quot; &quot;;\n         outputLine2 += (ctr % 10) + &quot; &quot;;\n         outputLine3 += ch + &quot; &quot;;\n         ctr++;\n      }\n      \n      Console.WriteLine(&quot;The length of the string is {0} characters:&quot;, \n                        title.Length);\n      Console.WriteLine(outputLine1);\n      Console.WriteLine(outputLine2);    \n      Console.WriteLine(outputLine3);\n      // The example displays the following output to the console:      \n      //       The length of the string is 20 characters:\n      //                         1                   2\n      //       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n      //       A   T a l e   o f   T w o   C i t i e s\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.CharEnumerator.Class#2\">   String ^ title = &quot;A Tale of Two Cities&quot;;\n   int ctr = 1;\n   String ^ outputLine1 = nullptr;\n   String ^ outputLine2 = nullptr;\n   String ^ outputLine3 = nullptr; \n\n   for each (wchar_t ch in title)\n   {\n      outputLine1 += ctr &lt; 10 || ctr % 10 != 0 ? &quot;  &quot; : (ctr / 10) + &quot; &quot;;\n      outputLine2 += (ctr % 10) + &quot; &quot;;\n      outputLine3 += ch + &quot; &quot;;\n      ctr++;\n   }\n\n   Console::WriteLine(&quot;The length of the string is {0} characters:&quot;, \n                     title-&gt;Length);\n   Console::WriteLine(outputLine1);\n   Console::WriteLine(outputLine2);    \n   Console::WriteLine(outputLine3);\n   // The example displays the following output to the console:      \n   //       The length of the string is 20 characters:\n   //                         1                   2\n   //       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n   //       A   T a l e   o f   T w o   C i t i e s\n</code></pre><pre><code class=\"lang-vb\" name=\"System.CharEnumerator.Class#2\">      Dim title As String = &quot;A Tale of Two Cities&quot;\n      Dim ctr As Integer = 1\n      Dim outputLine1, outputLine2, outputLine3 As String \n      \n      For Each ch As Char In title\n         outputLine1 += CStr(iif(ctr &lt; 10 Or ctr Mod 10 &lt;&gt; 0, &quot;  &quot;, CStr(ctr \\ 10) + &quot; &quot;)) \n         outputLine2 += (ctr Mod 10)&amp; &quot; &quot;\n         outputLine3 += ch &amp; &quot; &quot;\n         ctr += 1\n      Next\n      \n      Console.WriteLine(&quot;The length of the string is {0} characters:&quot;, _\n                        title.Length)\n      Console.WriteLine(outputLine1)\n      Console.WriteLine(outputLine2)    \n      Console.WriteLine(outputLine3)\n      &#39; The example displays the following output to the console:      \n      &#39;       The length of the string is 20 characters:\n      &#39;                         1                   2\n      &#39;       1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n      &#39;       A   T a l e   o f   T w o   C i t i e s\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_CharEnumerator_Reset\">\r\n    \r\n            <a id=\"System_CharEnumerator_Reset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reset()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes the index to a position logically before the first character of the enumerated string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Reset ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> class maintains an internal index to the enumerated string, and the Reset method sets the index to the invalid state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_CharEnumerator_System_Collections_IEnumerator_Current\">\r\n    \r\n            <a id=\"System_CharEnumerator_System_Collections_IEnumerator_Current_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerator.Current</div>        \r\n          </div>\r\n    \r\n            <p>Gets the currently referenced character in the string enumerated by this <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object. For a description of this member, see <span class=\"xref\">stem.Collections.IEnumerator.Current*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.IEnumerator.Current { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The boxed Unicode character currently referenced by this <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Enumeration has not started.  </p>\n<p> -or-  </p>\n<p> Enumeration has ended.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.charenumerator\" data-linktype=\"relative-path\">CharEnumerator</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.CharEnumerator.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.CharEnumerator.yml\">\r\n<meta name=\"APIName\" content=\"System.CharEnumerator\">\r\n<meta name=\"APIName\" content=\"System.CharEnumerator.Clone\">\r\n<meta name=\"APIName\" content=\"System.CharEnumerator.Current\">\r\n<meta name=\"APIName\" content=\"System.CharEnumerator.Dispose\">\r\n<meta name=\"APIName\" content=\"System.CharEnumerator.MoveNext\">\r\n<meta name=\"APIName\" content=\"System.CharEnumerator.Reset\">\r\n<meta name=\"APIName\" content=\"System.CharEnumerator.IEnumerator.Current\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"feb1679f-8803-b9f0-bb79-b2d6423a1a4f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Supports iterating over a  object and reading its individual characters. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CharEnumerator\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.CharEnumerator.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.CharEnumerator.yml","open_to_public_contributors":true,"api_name":["System.CharEnumerator","System.CharEnumerator.Clone","System.CharEnumerator.Current","System.CharEnumerator.Dispose","System.CharEnumerator.MoveNext","System.CharEnumerator.Reset","System.CharEnumerator.IEnumerator.Current"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CharEnumerator","System::CharEnumerator","System.CharEnumerator.Clone","System::CharEnumerator::Clone","System.CharEnumerator.Current","System::CharEnumerator::Current","System.CharEnumerator.Dispose","System::CharEnumerator::Dispose","System.CharEnumerator.MoveNext","System::CharEnumerator::MoveNext","System.CharEnumerator.Reset","System::CharEnumerator::Reset","System.CharEnumerator.System#Collections#IEnumerator#Current","System::CharEnumerator::System#Collections#IEnumerator#Current"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"feb1679f-8803-b9f0-bb79-b2d6423a1a4f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/CharEnumerator.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CharEnumerator class | Microsoft Docs","_op_ogTitle":"CharEnumerator class","description":"Supports iterating over a  object and reading its individual characters. This class cannot be inherited.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.CharEnumerator","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.charenumerator","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.charenumerator","fileRelativePath":"System.CharEnumerator.html"},"themesRelativePathToOutputRoot":"_themes/"}