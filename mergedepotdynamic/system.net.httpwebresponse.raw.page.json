{"content":"    \r\n    <h1 id=\"System_Net_HttpWebResponse\">\r\n      <span class=\"lang-csharp\">HttpWebResponse</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides an HTTP-specific implementation of the <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> class.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class HttpWebResponse : System.Net.WebResponse, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">System.Net.WebResponse</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HttpWebResponse</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webresponse#System_Net_WebResponse_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.webresponse#System_Net_WebResponse_IsFromCache\" data-linktype=\"relative-path\">IsFromCache</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class contains support for HTTP-specific uses of the properties and methods of the <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> class. The HttpWebResponse class is used to build HTTP stand-alone client applications that send HTTP requests and receive HTTP responses.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not confuse HttpWebResponse with the <a class=\"xref\" href=\"system.web.httpresponse\" data-linktype=\"relative-path\">HttpResponse</a> class that is used in ASP.NET applications and whose methods and properties are exposed through ASP.NET&#39;s intrinsic <code>Response</code> object.  </p>\n</div>\n<p> You should never directly create an instance of the HttpWebResponse class. Instead, use the instance returned by a call to <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_GetResponse_\" data-linktype=\"relative-path\">GetResponse</a>. You must call either the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> or the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Close_\" data-linktype=\"relative-path\">Close</a> method to close the response and release the connection for reuse. It is not necessary to call both <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> and <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Close_\" data-linktype=\"relative-path\">Close</a>, but doing so does not cause an error.  </p>\n<p> Common header information returned from the Internet resource is exposed as properties of the class. See the following table for a complete list. Other headers can be read from the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Headers_\" data-linktype=\"relative-path\">Headers</a> property as name/value pairs.  </p>\n<p> The following table shows the common HTTP headers that are available through properties of the HttpWebResponse class.  </p>\n<table>\n<thead>\n<tr>\n<th>Header</th>\n<th>Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content-Encoding</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_ContentEncoding_\" data-linktype=\"relative-path\">ContentEncoding</a></td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a></td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_ContentType_\" data-linktype=\"relative-path\">ContentType</a></td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_LastModified_\" data-linktype=\"relative-path\">LastModified</a></td>\n</tr>\n<tr>\n<td>Server</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Server_\" data-linktype=\"relative-path\">Server</a></td>\n</tr>\n</tbody>\n</table>\n<p> The contents of the response from the Internet resource are returned as a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> by calling the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_GetResponseStream_\" data-linktype=\"relative-path\">GetResponseStream</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse__ctor\" data-linktype=\"self-bookmark\">HttpWebResponse()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">HttpWebResponse(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class from the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> instances.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_CharacterSet\" data-linktype=\"self-bookmark\">CharacterSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the character set of the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_ContentEncoding\" data-linktype=\"self-bookmark\">ContentEncoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method that is used to encode the body of the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_ContentLength\" data-linktype=\"self-bookmark\">ContentLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length of the content returned by the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_ContentType\" data-linktype=\"self-bookmark\">ContentType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the content type of the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_Cookies\" data-linktype=\"self-bookmark\">Cookies</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the cookies that are associated with this response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_Headers\" data-linktype=\"self-bookmark\">Headers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the headers that are associated with this response from the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_IsMutuallyAuthenticated\" data-linktype=\"self-bookmark\">IsMutuallyAuthenticated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether both client and server were authenticated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_LastModified\" data-linktype=\"self-bookmark\">LastModified</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the last date and time that the contents of the response were modified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_Method\" data-linktype=\"self-bookmark\">Method</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method that is used to return the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_ProtocolVersion\" data-linktype=\"self-bookmark\">ProtocolVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the version of the HTTP protocol that is used in the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_ResponseUri\" data-linktype=\"self-bookmark\">ResponseUri</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the URI of the Internet resource that responded to the request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_Server\" data-linktype=\"self-bookmark\">Server</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the server that sent the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_StatusCode\" data-linktype=\"self-bookmark\">StatusCode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the status of the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_StatusDescription\" data-linktype=\"self-bookmark\">StatusDescription</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the status description returned with the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_SupportsHeaders\" data-linktype=\"self-bookmark\">SupportsHeaders</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates if headers are supported.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the response stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a>, and optionally disposes of the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data needed to serialize the target object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_GetResponseHeader_System_String_\" data-linktype=\"self-bookmark\">GetResponseHeader(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the contents of a header that was returned with the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_GetResponseStream\" data-linktype=\"self-bookmark\">GetResponseStream()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the stream that is used to read the body of the response from the server.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpWebResponse_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serializes this instance into the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse__ctor\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HttpWebResponse()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public HttpWebResponse ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HttpWebResponse(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class from the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> instances.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected HttpWebResponse (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>serializationInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that contains the information required to serialize the new <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>streamingContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that contains the source of the serialized stream that is associated with the new <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface for the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_CharacterSet\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_CharacterSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CharacterSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets the character set of the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string CharacterSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the character set of the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CharacterSet property contains a value that describes the character set of the response. This character set information is taken from the header returned with the response.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example obtains the character set of the response.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebResponse_ContentEncoding_CharacterSet#1\">   try\n   {\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( url ) );\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n\n      Console::WriteLine( &quot;The encoding method used is: {0}&quot;, myHttpWebResponse-&gt;ContentEncoding );\n      Console::WriteLine( &quot;The character set used is : {0}&quot;, myHttpWebResponse-&gt;CharacterSet );\n\n      char separator = &#39;/&#39;;\n      String^ contenttype = myHttpWebResponse-&gt;ContentType;\n      // Retrieve &#39;text&#39; if the content type is of &#39;text/html.\n      String^ maintype = contenttype-&gt;Substring( 0, contenttype-&gt;IndexOf( separator ) );\n      // Display only &#39;text&#39; type.\n      if ( String::Compare( maintype, &quot;text&quot; ) == 0 )\n      {\n         Console::WriteLine( &quot;<br> Content type is &#39;text&#39;.&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebResponse_ContentEncoding_CharacterSet#1\">\ttry \n \t\t  {\t\n\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\n\t\t\tConsole.WriteLine(&quot;The encoding method used is: &quot; + myHttpWebResponse.ContentEncoding);\n\t\t\tConsole.WriteLine(&quot;The character set used is :&quot; + myHttpWebResponse.CharacterSet);\n\n\t\t\tchar seperator = &#39;/&#39;;\n\t\t\tString contenttype = myHttpWebResponse.ContentType;\n\t\t\t// Retrieve &#39;text&#39; if the content type is of &#39;text/html.\n\t\t\tString maintype = contenttype.Substring(0,contenttype.IndexOf(seperator));\n\t\t\t// Display only &#39;text&#39; type.\n\t\t\tif (String.Compare(maintype,&quot;text&quot;) == 0) \n\t\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;<br> Content type is &#39;text&#39;.&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_ContentEncoding_CharacterSet#1\">      Try\n         Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n         Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n         \n         Console.WriteLine((&quot;The encoding method used is: &quot; + myHttpWebResponse.ContentEncoding))\n         Console.WriteLine((&quot;The character set used is :&quot; + myHttpWebResponse.CharacterSet))\n         \n         Dim seperator As Char = &quot;/&quot;c\n         Dim contenttype As [String] = myHttpWebResponse.ContentType\n         &#39; Retrieve &#39;text&#39; if the content type is of &#39;text/html.\n         Dim maintype As [String] = contenttype.Substring(0, contenttype.IndexOf(seperator))\n         &#39; Display only &#39;text&#39; type.\n         If [String].Compare(maintype, &quot;text&quot;) = 0 Then\n            Console.WriteLine(ControlChars.NewLine + &quot; Content type is &#39;text&#39;.&quot;)\n            \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_ContentEncoding\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_ContentEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentEncoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method that is used to encode the body of the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ContentEncoding { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that describes the method that is used to encode the body of the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ContentEncoding property contains the value of the Content-Encoding header returned with the response.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ContentEncoding property to obtain the value of the Content-Encoding header returned with the response.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebResponse_ContentEncoding_CharacterSet#1\">   try\n   {\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( url ) );\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n\n      Console::WriteLine( &quot;The encoding method used is: {0}&quot;, myHttpWebResponse-&gt;ContentEncoding );\n      Console::WriteLine( &quot;The character set used is : {0}&quot;, myHttpWebResponse-&gt;CharacterSet );\n\n      char separator = &#39;/&#39;;\n      String^ contenttype = myHttpWebResponse-&gt;ContentType;\n      // Retrieve &#39;text&#39; if the content type is of &#39;text/html.\n      String^ maintype = contenttype-&gt;Substring( 0, contenttype-&gt;IndexOf( separator ) );\n      // Display only &#39;text&#39; type.\n      if ( String::Compare( maintype, &quot;text&quot; ) == 0 )\n      {\n         Console::WriteLine( &quot;<br> Content type is &#39;text&#39;.&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebResponse_ContentEncoding_CharacterSet#1\">\ttry \n \t\t  {\t\n\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\n\t\t\tConsole.WriteLine(&quot;The encoding method used is: &quot; + myHttpWebResponse.ContentEncoding);\n\t\t\tConsole.WriteLine(&quot;The character set used is :&quot; + myHttpWebResponse.CharacterSet);\n\n\t\t\tchar seperator = &#39;/&#39;;\n\t\t\tString contenttype = myHttpWebResponse.ContentType;\n\t\t\t// Retrieve &#39;text&#39; if the content type is of &#39;text/html.\n\t\t\tString maintype = contenttype.Substring(0,contenttype.IndexOf(seperator));\n\t\t\t// Display only &#39;text&#39; type.\n\t\t\tif (String.Compare(maintype,&quot;text&quot;) == 0) \n\t\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;<br> Content type is &#39;text&#39;.&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_ContentEncoding_CharacterSet#1\">      Try\n         Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n         Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n         \n         Console.WriteLine((&quot;The encoding method used is: &quot; + myHttpWebResponse.ContentEncoding))\n         Console.WriteLine((&quot;The character set used is :&quot; + myHttpWebResponse.CharacterSet))\n         \n         Dim seperator As Char = &quot;/&quot;c\n         Dim contenttype As [String] = myHttpWebResponse.ContentType\n         &#39; Retrieve &#39;text&#39; if the content type is of &#39;text/html.\n         Dim maintype As [String] = contenttype.Substring(0, contenttype.IndexOf(seperator))\n         &#39; Display only &#39;text&#39; type.\n         If [String].Compare(maintype, &quot;text&quot;) = 0 Then\n            Console.WriteLine(ControlChars.NewLine + &quot; Content type is &#39;text&#39;.&quot;)\n            \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_ContentLength\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_ContentLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length of the content returned by the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long ContentLength { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number of bytes returned by the request. Content length does not include header information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ContentLength property contains the value of the Content-Length header returned with the response. If the Content-Length header is not set in the response, ContentLength is set to the value -1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLResponse1#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Text;\nusing namespace System::IO;\n\n// Specify the URL to receive the request.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( args[ 1 ] ));\n   \n   // Set some reasonable limits on resources used by this request\n   request-&gt;MaximumAutomaticRedirections = 4;\n   request-&gt;MaximumResponseHeadersLength = 4;\n   \n   // Set credentials to use for this request.\n   request-&gt;Credentials = CredentialCache::DefaultCredentials;\n   HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n   Console::WriteLine( &quot;Content length is {0}&quot;, response-&gt;ContentLength );\n   Console::WriteLine( &quot;Content type is {0}&quot;, response-&gt;ContentType );\n   \n   // Get the stream associated with the response.\n   Stream^ receiveStream = response-&gt;GetResponseStream();\n   \n   // Pipes the stream to a higher level stream reader with the required encoding format. \n   StreamReader^ readStream = gcnew StreamReader( receiveStream,Encoding::UTF8 );\n   Console::WriteLine( &quot;Response stream received.&quot; );\n   Console::WriteLine( readStream-&gt;ReadToEnd() );\n   response-&gt;Close();\n   readStream-&gt;Close();\n}\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLResponse1#1\">using System;\nusing System.Net;\nusing System.Text;\nusing System.IO;\n\n\n    public class Test\n    {\n        // Specify the URL to receive the request.\n        public static void Main (string[] args)\n        {\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create (args[0]);\n\n            // Set some reasonable limits on resources used by this request\n            request.MaximumAutomaticRedirections = 4;\n            request.MaximumResponseHeadersLength = 4;\n            // Set credentials to use for this request.\n            request.Credentials = CredentialCache.DefaultCredentials;\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse ();\n\n            Console.WriteLine (&quot;Content length is {0}&quot;, response.ContentLength);\n            Console.WriteLine (&quot;Content type is {0}&quot;, response.ContentType);\n             \n            // Get the stream associated with the response.\n            Stream receiveStream = response.GetResponseStream ();\n\n            // Pipes the stream to a higher level stream reader with the required encoding format. \n            StreamReader readStream = new StreamReader (receiveStream, Encoding.UTF8);\n\n            Console.WriteLine (&quot;Response stream received.&quot;);\n            Console.WriteLine (readStream.ReadToEnd ());\n            response.Close ();\n            readStream.Close ();\n        }\n    }\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLResponse1#1\">Imports System\nImports System.Net\nImports System.Text\nImports System.IO\n\n\n    Public Class Test\n\n        &#39; Specify the URL to receive the request.\n        Public Shared Sub Main(ByVal args() As String)\n        Dim request As HttpWebRequest = CType(WebRequest.Create(args(0)), HttpWebRequest)\n\n\n        &#39; Set some reasonable limits on resources used by this request\n        request.MaximumAutomaticRedirections = 4\n        request.MaximumResponseHeadersLength = 4\n\n        &#39; Set credentials to use for this request.\n        request.Credentials = CredentialCache.DefaultCredentials\n\n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n\n        Console.WriteLine(&quot;Content length is {0}&quot;, response.ContentLength)\n        Console.WriteLine(&quot;Content type is {0}&quot;, response.ContentType)\n\n        &#39; Get the stream associated with the response.\n        Dim receiveStream As Stream = response.GetResponseStream()\n\n        &#39; Pipes the stream to a higher level stream reader with the required encoding format. \n        Dim readStream As New StreamReader(receiveStream, Encoding.UTF8)\n\n        Console.WriteLine(&quot;Response stream received.&quot;)\n        Console.WriteLine(readStream.ReadToEnd())\n        response.Close()\n        readStream.Close()\n    End Sub &#39;Main\nEnd Class &#39;Test\n&#39;\n&#39;The output from this example will vary depending on the value passed into Main \n&#39;but will be similar to the following:\n&#39;\n&#39;Content length is 1542\n&#39;Content type is text/html; charset=utf-8\n&#39;Response stream received.\n&#39;&lt;html&gt;\n&#39;...\n&#39;&lt;/html&gt;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_ContentType\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_ContentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the content type of the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ContentType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the content type of the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ContentType property contains the value of the Content-Type header returned with the response.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of this property.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLResponse1#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Text;\nusing namespace System::IO;\n\n// Specify the URL to receive the request.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( args[ 1 ] ));\n   \n   // Set some reasonable limits on resources used by this request\n   request-&gt;MaximumAutomaticRedirections = 4;\n   request-&gt;MaximumResponseHeadersLength = 4;\n   \n   // Set credentials to use for this request.\n   request-&gt;Credentials = CredentialCache::DefaultCredentials;\n   HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n   Console::WriteLine( &quot;Content length is {0}&quot;, response-&gt;ContentLength );\n   Console::WriteLine( &quot;Content type is {0}&quot;, response-&gt;ContentType );\n   \n   // Get the stream associated with the response.\n   Stream^ receiveStream = response-&gt;GetResponseStream();\n   \n   // Pipes the stream to a higher level stream reader with the required encoding format. \n   StreamReader^ readStream = gcnew StreamReader( receiveStream,Encoding::UTF8 );\n   Console::WriteLine( &quot;Response stream received.&quot; );\n   Console::WriteLine( readStream-&gt;ReadToEnd() );\n   response-&gt;Close();\n   readStream-&gt;Close();\n}\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLResponse1#1\">using System;\nusing System.Net;\nusing System.Text;\nusing System.IO;\n\n\n    public class Test\n    {\n        // Specify the URL to receive the request.\n        public static void Main (string[] args)\n        {\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create (args[0]);\n\n            // Set some reasonable limits on resources used by this request\n            request.MaximumAutomaticRedirections = 4;\n            request.MaximumResponseHeadersLength = 4;\n            // Set credentials to use for this request.\n            request.Credentials = CredentialCache.DefaultCredentials;\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse ();\n\n            Console.WriteLine (&quot;Content length is {0}&quot;, response.ContentLength);\n            Console.WriteLine (&quot;Content type is {0}&quot;, response.ContentType);\n             \n            // Get the stream associated with the response.\n            Stream receiveStream = response.GetResponseStream ();\n\n            // Pipes the stream to a higher level stream reader with the required encoding format. \n            StreamReader readStream = new StreamReader (receiveStream, Encoding.UTF8);\n\n            Console.WriteLine (&quot;Response stream received.&quot;);\n            Console.WriteLine (readStream.ReadToEnd ());\n            response.Close ();\n            readStream.Close ();\n        }\n    }\n\n/*\nThe output from this example will vary depending on the value passed into Main \nbut will be similar to the following:\n\nContent length is 1542\nContent type is text/html; charset=utf-8\nResponse stream received.\n&lt;html&gt;\n...\n&lt;/html&gt;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLResponse1#1\">Imports System\nImports System.Net\nImports System.Text\nImports System.IO\n\n\n    Public Class Test\n\n        &#39; Specify the URL to receive the request.\n        Public Shared Sub Main(ByVal args() As String)\n        Dim request As HttpWebRequest = CType(WebRequest.Create(args(0)), HttpWebRequest)\n\n\n        &#39; Set some reasonable limits on resources used by this request\n        request.MaximumAutomaticRedirections = 4\n        request.MaximumResponseHeadersLength = 4\n\n        &#39; Set credentials to use for this request.\n        request.Credentials = CredentialCache.DefaultCredentials\n\n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n\n        Console.WriteLine(&quot;Content length is {0}&quot;, response.ContentLength)\n        Console.WriteLine(&quot;Content type is {0}&quot;, response.ContentType)\n\n        &#39; Get the stream associated with the response.\n        Dim receiveStream As Stream = response.GetResponseStream()\n\n        &#39; Pipes the stream to a higher level stream reader with the required encoding format. \n        Dim readStream As New StreamReader(receiveStream, Encoding.UTF8)\n\n        Console.WriteLine(&quot;Response stream received.&quot;)\n        Console.WriteLine(readStream.ReadToEnd())\n        response.Close()\n        readStream.Close()\n    End Sub &#39;Main\nEnd Class &#39;Test\n&#39;\n&#39;The output from this example will vary depending on the value passed into Main \n&#39;but will be similar to the following:\n&#39;\n&#39;Content length is 1542\n&#39;Content type is text/html; charset=utf-8\n&#39;Response stream received.\n&#39;&lt;html&gt;\n&#39;...\n&#39;&lt;/html&gt;\n&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_Cookies\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_Cookies_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cookies</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the cookies that are associated with this response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.CookieCollection Cookies { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.cookiecollection\" data-linktype=\"relative-path\">CookieCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.cookiecollection\" data-linktype=\"relative-path\">CookieCollection</a> that contains the cookies that are associated with this response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Cookies property provides an instance of the <a class=\"xref\" href=\"system.net.cookiecollection\" data-linktype=\"relative-path\">CookieCollection</a> class that holds the cookies associated with this response.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_CookieContainer_\" data-linktype=\"relative-path\">CookieContainer</a> property of the associated <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> is <code>null</code>, the Cookies property will also be <code>null</code>. Any cookie information sent by the server will be available in the <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Headers_\" data-linktype=\"relative-path\">Headers</a> property, however.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sends a request to a URL and displays the cookies returned in the response.  </p>\n<pre><code class=\"lang-cs\" name=\"NCLCookies#1\">using System.Net;\nusing System;\nnamespace Examples.System.Net.Cookies\n{\n    // This example is run at the command line.\n    // Specify one argument: the name of the host to \n    // send the request to.\n    // If the request is sucessful, the example displays the contents of the cookies\n    // returned by the host.\n    \n    public class CookieExample\n    {   \n        public static void Main(string[] args)\n        {   \n            if (args == null || args.Length != 1)\n            {\n                Console.WriteLine(&quot;Specify the URL to receive the request.&quot;);\n                Environment.Exit(1);\n            }\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(args[0]);\n            request.CookieContainer = new CookieContainer();\n        \n            HttpWebResponse response = (HttpWebResponse) request.GetResponse();\n            \n            \n\n            // Print the properties of each cookie.\n            foreach (Cookie cook in response.Cookies)\n            {\n                Console.WriteLine(&quot;Cookie:&quot;);\n                Console.WriteLine(&quot;{0} = {1}&quot;, cook.Name, cook.Value);\n                Console.WriteLine(&quot;Domain: {0}&quot;, cook.Domain);\n                Console.WriteLine(&quot;Path: {0}&quot;, cook.Path);\n                Console.WriteLine(&quot;Port: {0}&quot;, cook.Port);\n                Console.WriteLine(&quot;Secure: {0}&quot;, cook.Secure);\n             \n                Console.WriteLine(&quot;When issued: {0}&quot;, cook.TimeStamp);\n                Console.WriteLine(&quot;Expires: {0} (expired? {1})&quot;, \n                    cook.Expires, cook.Expired);\n                Console.WriteLine(&quot;Don&#39;t save: {0}&quot;, cook.Discard);    \n                Console.WriteLine(&quot;Comment: {0}&quot;, cook.Comment);\n                Console.WriteLine(&quot;Uri for comments: {0}&quot;, cook.CommentUri);\n                Console.WriteLine(&quot;Version: RFC {0}&quot; , cook.Version == 1 ? &quot;2109&quot; : &quot;2965&quot;);\n\n                // Show the string representation of the cookie.\n                Console.WriteLine (&quot;String: {0}&quot;, cook.ToString());\n            }\n        }\n    }\n}\n\n// Output from this example will be vary depending on the host name specified,\n// but will be similar to the following.\n/*\nCookie:\nCustomerID = 13xyz\nDomain: .contoso.com\nPath: /\nPort:\nSecure: False\nWhen issued: 1/14/2003 3:20:57 PM\nExpires: 1/17/2013 11:14:07 AM (expired? False)\nDon&#39;t save: False\nComment: \nUri for comments:\nVersion: RFC 2965\nString: CustomerID = 13xyz\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"NCLCookies#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\n\n// This example is run at the command line.\n// Specify one argument: the name of the host to \n// send the request to.\n// If the request is sucessful, the example displays the contents of the cookies\n// returned by the host.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   if ( args == nullptr || args-&gt;Length != 2 )\n   {\n      Console::WriteLine( &quot;Specify the URL to receive the request.&quot; );\n      Environment::Exit( 1 );\n   }\n\n   \n   HttpWebRequest^ request = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( args[ 1 ] ));\n   request-&gt;CookieContainer = gcnew CookieContainer;\n   HttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n   response-&gt;Cookies = request-&gt;CookieContainer-&gt;GetCookies( request-&gt;RequestUri );\n   \n   // Print the properties of each cookie.\n   System::Collections::IEnumerator^ myEnum = response-&gt;Cookies-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Cookie^ cook = safe_cast&lt;Cookie^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;Cookie:&quot; );\n      Console::WriteLine( &quot;{0} = {1}&quot;, cook-&gt;Name, cook-&gt;Value );\n      Console::WriteLine( &quot;Domain: {0}&quot;, cook-&gt;Domain );\n      Console::WriteLine( &quot;Path: {0}&quot;, cook-&gt;Path );\n      Console::WriteLine( &quot;Port: {0}&quot;, cook-&gt;Port );\n      Console::WriteLine( &quot;Secure: {0}&quot;, cook-&gt;Secure );\n      Console::WriteLine( &quot;When issued: {0}&quot;, cook-&gt;TimeStamp );\n      Console::WriteLine( &quot;Expires: {0} (expired? {1})&quot;, cook-&gt;Expires, cook-&gt;Expired );\n      Console::WriteLine( &quot;Don&#39;t save: {0}&quot;, cook-&gt;Discard );\n      Console::WriteLine( &quot;Comment: {0}&quot;, cook-&gt;Comment );\n      Console::WriteLine( &quot;Uri for comments: {0}&quot;, cook-&gt;CommentUri );\n      Console::WriteLine( &quot;Version: RFC {0}&quot;, cook-&gt;Version == 1 ? (String^)&quot;2109&quot; : &quot;2965&quot; );\n      \n      // Show the string representation of the cookie.\n      Console::WriteLine( &quot;String: {0}&quot;, cook );\n      \n   }\n\n}\n\n// Output from this example will be vary depending on the host name specified,\n// but will be similar to the following.\n/*\nCookie:\nCustomerID = 13xyz\nDomain: .contoso.com\nPath: /\nPort:\nSecure: False\nWhen issued: 1/14/2003 3:20:57 PM\nExpires: 1/17/2013 11:14:07 AM (expired? False)\nDon&#39;t save: False\nComment: \nUri for comments:\nVersion: RFC 2965\nString: CustomerID = 13xyz\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLCookies#1\">Imports System.Net\nImports System\n\n&#39; This example is run at the command line.\n&#39; Specify one argument: the name of the host to \n&#39; receive the request.\n&#39; If the request is sucessful, the example displays the contents of the cookies\n&#39; returned by the host.\n\nPublic Class CookieExample\n    \n    Public Shared Sub Main(args() As String)\n        If args Is Nothing OrElse args.Length &lt;&gt; 1 Then\n            Console.WriteLine(&quot;Specify the URL to receive the request.&quot;)\n            Environment.Exit(1)\n        End If\n        Dim request As HttpWebRequest = CType(WebRequest.Create(args(0)), HttpWebRequest)\n        request.CookieContainer = New CookieContainer()\n        \n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n\n        \n        \n        &#39; Print the properties of each cookie.\n        Dim cook As Cookie\n        For Each cook In  response.Cookies\n            Console.WriteLine(&quot;Cookie:&quot;)\n            Console.WriteLine(&quot;{0} = {1}&quot;, cook.Name, cook.Value)\n            Console.WriteLine(&quot;Domain: {0}&quot;, cook.Domain)\n            Console.WriteLine(&quot;Path: {0}&quot;, cook.Path)\n            Console.WriteLine(&quot;Port: {0}&quot;, cook.Port)\n            Console.WriteLine(&quot;Secure: {0}&quot;, cook.Secure)\n            \n            Console.WriteLine(&quot;When issued: {0}&quot;, cook.TimeStamp)\n            Console.WriteLine(&quot;Expires: {0} (expired? {1})&quot;, cook.Expires, cook.Expired)\n            Console.WriteLine(&quot;Don&#39;t save: {0}&quot;, cook.Discard)\n            Console.WriteLine(&quot;Comment: {0}&quot;, cook.Comment)\n            Console.WriteLine(&quot;Uri for comments: {0}&quot;, cook.CommentUri)\n            Console.WriteLine(&quot;Version: RFC {0}&quot;, IIf(cook.Version = 1, &quot;2109&quot;, &quot;2965&quot;))\n            \n            &#39; Show the string representation of the cookie.\n            Console.WriteLine(&quot;String: {0}&quot;, cook.ToString())\n        Next cook\n    End Sub &#39;Main\nEnd Class &#39;CookieExample \n\n\n\n&#39; Output from this example will be vary depending on the host name specified,\n&#39; but will be similar to the following.\n&#39;\n&#39;Cookie:\n&#39;CustomerID = 13xyz\n&#39;Domain: .contoso.com\n&#39;Path: /\n&#39;Port:\n&#39;Secure: False\n&#39;When issued: 1/14/2003 3:20:57 PM\n&#39;Expires: 1/17/2013 11:14:07 AM (expired? False)\n&#39;Don&#39;t save: False\n&#39;Comment: \n&#39;Uri for comments:\n&#39;Version: RFC 2965\n&#39;String: CustomerID = 13xyz\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_Headers\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_Headers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Headers</div>        \r\n          </div>\r\n    \r\n            <p>Gets the headers that are associated with this response from the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Net.WebHeaderCollection Headers { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> that contains the header information returned with the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Headers property is a collection of name/value pairs that contain the HTTP header values returned with the response. Common header information returned from the Internet resource is exposed as properties of the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> class. The following table lists common headers that the API exposes as properties.  </p>\n<table>\n<thead>\n<tr>\n<th>Header</th>\n<th>Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content-Encoding</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_ContentEncoding_\" data-linktype=\"relative-path\">ContentEncoding</a></td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_ContentLength_\" data-linktype=\"relative-path\">ContentLength</a></td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_ContentType_\" data-linktype=\"relative-path\">ContentType</a></td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_LastModified_\" data-linktype=\"relative-path\">LastModified</a></td>\n</tr>\n<tr>\n<td>Server</td>\n<td><a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Server_\" data-linktype=\"relative-path\">Server</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes the contents of all of the response headers to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"HttpWebResponse_Headers#1\">            &#39; Creates an HttpWebRequest with the specified URL. \n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n            &#39; Sends the HttpWebRequest and waits for a response.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            &#39; Displays all the Headers present in the response received from the URI.\n            Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;The following headers were received in the response&quot;)\n            &#39;The Headers property is a WebHeaderCollection. Use it&#39;s properties to traverse the collection and display each header.\n            Dim i As Integer\n            While i &lt; myHttpWebResponse.Headers.Count\n                Console.WriteLine(ControlChars.Cr + &quot;Header Name:{0}, Value :{1}&quot;, myHttpWebResponse.Headers.Keys(i), myHttpWebResponse.Headers(i))\n\t\t      i = i + 1\n            End While\n            myHttpWebResponse.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebResponse_Headers#1\">\t\t\t\t// Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\t\t// Sends the HttpWebRequest and waits for response.\n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\t\t                        \n\t\t\t\t// Displays all the headers present in the response received from the URI.\n\t\t\t\tConsole.WriteLine(&quot;\\r<br>The following headers were received in the response:&quot;);\n\t\t\t\t// Displays each header and it&#39;s key associated with the response.\n\t\t\t\tfor(int i=0; i &lt; myHttpWebResponse.Headers.Count; ++i)  \n\t\t\t\t\tConsole.WriteLine(&quot;<br>Header Name:{0}, Value :{1}&quot;,myHttpWebResponse.Headers.Keys[i],myHttpWebResponse.Headers[i]); \n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close(); \n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebResponse_Headers#1\">      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( url ));\n      \n      // Sends the HttpWebRequest and waits for response.\n      HttpWebResponse^ myHttpWebResponse = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest-&gt;GetResponse());\n      \n      // Displays all the headers present in the response received from the URI.\n      Console::WriteLine( &quot;\\r<br>The following headers were received in the response:&quot; );\n      \n      // Displays each header and its key associated with the response.\n      for ( int i = 0; i &lt; myHttpWebResponse-&gt;Headers-&gt;Count; ++i )\n         Console::WriteLine( &quot;<br>Header Name: {0}, Value : {1}&quot;,\n            myHttpWebResponse-&gt;Headers-&gt;Keys[ i ],\n            myHttpWebResponse-&gt;Headers[ (System::Net::HttpRequestHeader)i ] );\n      \n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_IsMutuallyAuthenticated\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_IsMutuallyAuthenticated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMutuallyAuthenticated</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether both client and server were authenticated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsMutuallyAuthenticated { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if mutual authentication occurred; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify mutual authentication using the <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_AuthenticationLevel_\" data-linktype=\"relative-path\">AuthenticationLevel</a> property.  </p>\n<p> Accessing this property can throw <a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_LastModified\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_LastModified_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastModified</div>        \r\n          </div>\r\n    \r\n            <p>Gets the last date and time that the contents of the response were modified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime LastModified { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that contains the date and time that the contents of the response were modified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LastModified property contains the value of the Last-Modified header received with the response. The date and time are assumed to be local time.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example creates an <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> and queries for a response. This example then checks whether the entity requested had been modified any time today.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebResponse_LastModified#1\">      Uri^ myUri = gcnew Uri( url );\n      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( myUri ) );\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      if ( myHttpWebResponse-&gt;StatusCode == HttpStatusCode::OK )\n      {\n         Console::WriteLine( &quot;\\r<br>Request succeeded and the requested information is in the response , Description : {0}&quot;,\n            myHttpWebResponse-&gt;StatusDescription );\n      }\n      DateTime today = DateTime::Now;\n      // Uses the LastModified property to compare with today&#39;s date.\n      if ( DateTime::Compare( today, myHttpWebResponse-&gt;LastModified ) == 0 )\n      {\n         Console::WriteLine( &quot;<br>The requested URI entity was modified today&quot; );\n      }      \n      else if ( DateTime::Compare( today, myHttpWebResponse-&gt;LastModified ) == 1 )\n      {\n         Console::WriteLine( &quot;<br>The requested URI was last modified on: {0}&quot;,\n            myHttpWebResponse-&gt;LastModified );\n      }\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_LastModified#1\">            Dim myUri As New Uri(url)\n            &#39; Creates an HttpWebRequest for the specified URL.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(myUri), HttpWebRequest)\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            If myHttpWebResponse.StatusCode = HttpStatusCode.OK Then\n                Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;Request succeeded and the requested information is in the response , Description : {0}&quot;, myHttpWebResponse.StatusDescription)\n            End If\n            Dim today As DateTime = DateTime.Now\n            &#39; Uses the LastModified property to compare with today&#39;s date.\n            If DateTime.Compare(today, myHttpWebResponse.LastModified) = 0 Then\n                Console.WriteLine(ControlChars.Cr + &quot;The requested URI entity was modified today&quot;)\n            Else\n                If DateTime.Compare(today, myHttpWebResponse.LastModified) =  1 Then\n                    Console.WriteLine(ControlChars.Cr + &quot;The requested Uri was last modified on:{0}&quot;, myHttpWebResponse.LastModified)\n                End If\n            End If\n            &#39; Releases the resources of the response.\n            myHttpWebResponse.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebResponse_LastModified#1\">            Uri myUri = new Uri(url);\n\t\t\t\t// Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(myUri); \n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse();\n\t\t\t\tif (myHttpWebResponse.StatusCode == HttpStatusCode.OK)\n\t\t\t\t\tConsole.WriteLine(&quot;\\r<br>Request succeeded and the requested information is in the response , Description : {0}&quot;,\n\t\t\t\t\t\t\t\t\t\tmyHttpWebResponse.StatusDescription);\n\t\t\t\tDateTime today = DateTime.Now;\n\t\t\t\t// Uses the LastModified property to compare with today&#39;s date.\n\t\t\t\tif (DateTime.Compare(today,myHttpWebResponse.LastModified) == 0)\n\t\t\t\t\tConsole.WriteLine(&quot;<br>The requested URI entity was modified today&quot;);\n\t\t\t\telse\n\t\t\t\t\tif (DateTime.Compare(today,myHttpWebResponse.LastModified) == 1)\n\t\t\t\t\t\tConsole.WriteLine(&quot;<br>The requested URI was last modified on:{0}&quot;,\n\t\t\t\t\t\t\t\t\t\t\tmyHttpWebResponse.LastModified);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close(); \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_Method\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_Method_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Method</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method that is used to return the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Method { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the HTTP method that is used to return the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Method returns the method that is used to return the response. Common HTTP methods are GET, HEAD, POST, PUT, and DELETE.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the string contained in Method, to determine the Http method invoked by the Web server.  </p>\n<pre><code class=\"lang-vb\" name=\"HttpWebResponse_Method_Server#1\">      Try\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            Dim method As String\n            method = myHttpWebResponse.Method\n            If [String].Compare(method, &quot;GET&quot;) = 0 Then\n                Console.WriteLine(ControlChars.NewLine + &quot;The GET method was successfully invoked on the following Web Server : {0}&quot;, myHttpWebResponse.Server)\n            End If\n            &#39; Releases the resources of the response.\n            myHttpWebResponse.Close()\n        Catch e As WebException\n            Console.WriteLine(ControlChars.NewLine + &quot;Exception Raised. The following error occured : {0}&quot;, e.Status)\n        Catch e As Exception\n            Console.WriteLine(ControlChars.NewLine + &quot;The following exception was raised : {0}&quot;, e.Message)\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebResponse_Method_Server#1\">   try\n   {\n      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( url ) );\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      String^ method;\n      method = myHttpWebResponse-&gt;Method;\n      if ( String::Compare( method, &quot;GET&quot; ) == 0 )\n      {\n         Console::WriteLine( &quot;<br>The &#39;GET&#39; method was successfully invoked on the following Web Server : {0}&quot;,\n            myHttpWebResponse-&gt;Server );\n      }\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;<br>WebException raised. The following error occured : {0}&quot;, e-&gt;Status );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>The following Exception was raised : {0}&quot;, e-&gt;Message );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebResponse_Method_Server#1\">        try \n \t\t  {\t\n            // Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\t\tstring method ;\n\t\t\t\tmethod = myHttpWebResponse.Method;\n\t\t\t\tif (String.Compare(method,&quot;GET&quot;) == 0)\n\t\t\t\t\tConsole.WriteLine(&quot;<br>The &#39;GET&#39; method was successfully invoked on the following Web Server : {0}&quot;,\n\t\t\t\t\t\t\t\t\t   myHttpWebResponse.Server);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close();\n          } \n\t\tcatch(WebException e) \n\t\t   {\n\t\t        Console.WriteLine(&quot;<br>WebException raised. The following error occured : {0}&quot;,e.Status); \n           }\n\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;<br>The following Exception was raised : {0}&quot;,e.Message);\n\t\t\t}\n\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_ProtocolVersion\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_ProtocolVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProtocolVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the version of the HTTP protocol that is used in the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version ProtocolVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> that contains the HTTP protocol version of the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ProtocolVersion property contains the HTTP protocol version number of the response sent by the Internet resource.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example creates an <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> and queries for an <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a>. The example then checks to see if the server is responding with the same version.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebResponse_ProtocolVersion#1\">      Uri^ ourUri = gcnew Uri( url );\n      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( ourUri ) );\n      myHttpWebRequest-&gt;ProtocolVersion = HttpVersion::Version10;\n      // Sends the HttpWebRequest and waits for the response.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      // Ensures that only Http/1.0 responses are accepted.\n      if ( myHttpWebResponse-&gt;ProtocolVersion != HttpVersion::Version10 )\n      {\n         Console::WriteLine( &quot;<br>The server responded with a version other than Http/1.0&quot; );\n      }\n      else if ( myHttpWebResponse-&gt;StatusCode == HttpStatusCode::OK )\n      {\n         Console::WriteLine( &quot;<br>Request sent using version Http/1.0. Successfully received response with version HTTP/1.0 &quot; );\n      }\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_ProtocolVersion#1\">            Dim ourUri As New Uri(url)\n            &#39; Creates an HttpWebRequest with the specified URL. \n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(ourUri), HttpWebRequest)\n            myHttpWebRequest.ProtocolVersion = HttpVersion.Version10\n            &#39; Sends the request and waits for the response.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            &#39;The ProtocolVersion property is used to ensure that only Http/1.0 responses are accepted. \n            If myHttpWebResponse.ProtocolVersion Is HttpVersion.Version10 Then\n                Console.WriteLine(ControlChars.NewLine + &quot;The server responded with a version other than Http/1.0&quot;)\n            Else\n                If myHttpWebResponse.StatusCode = HttpStatusCode.OK Then\n                    Console.WriteLine(ControlChars.NewLine + &quot;Request sent using version HTTP/1.0. Successfully received response with version Http/1.0 &quot;)\n                End If\n            End If\n            &#39; Releases the resources of the response.\n            myHttpWebResponse.Close()\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebResponse_ProtocolVersion#1\">            Uri ourUri = new Uri(url);\n\t\t\t\t// Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(ourUri); \n\t\t\t\tmyHttpWebRequest.ProtocolVersion = HttpVersion.Version10;\n\t\t\t\t// Sends the HttpWebRequest and waits for the response.\n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\t\t// Ensures that only Http/1.0 responses are accepted. \n\t\t\t\tif(myHttpWebResponse.ProtocolVersion != HttpVersion.Version10)\n\t\t\t\t\tConsole.WriteLine(&quot;<br>The server responded with a version other than Http/1.0&quot;);\n\t\t\t\telse\n\t\t\t\tif (myHttpWebResponse.StatusCode == HttpStatusCode.OK)\n\t\t\t\t\tConsole.WriteLine(&quot;<br>Request sent using version Http/1.0. Successfully received response with version HTTP/1.0 &quot;);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close(); \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_ResponseUri\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_ResponseUri_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResponseUri</div>        \r\n          </div>\r\n    \r\n            <p>Gets the URI of the Internet resource that responded to the request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Uri ResponseUri { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> that contains the URI of the Internet resource that responded to the request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ResponseUri property contains the URI of the Internet resource that actually responded to the request. This URI might not be the same as the originally requested URI, if the original server redirected the request.  </p>\n<p> The ResponseUri property will use the Content-Location header if present.  </p>\n<p> Applications that need to access the last redirected ResponseUri should use the <a class=\"xref\" href=\"system.net.httpwebrequest#System_Net_HttpWebRequest_Address_\" data-linktype=\"relative-path\">Address</a> property rather than ResponseUri, since the use of ResponseUri property may open security vulnerabilities.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example creates a <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> and queries for an <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> and then checks to see whether the original URI was redirected by the server.  </p>\n<pre><code class=\"lang-cpp\" name=\"HttpWebResponse_ResponseUri#1\">      Uri^ myUri = gcnew Uri( url );\n      // Create a &#39;HttpWebRequest&#39; object for the specified url.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( myUri ) );\n      // Send the request and wait for response.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      if ( myHttpWebResponse-&gt;StatusCode == HttpStatusCode::OK )\n      {\n         Console::WriteLine( &quot;<br>Request succeeded and the requested information is in the response , Description : {0}&quot;,\n            myHttpWebResponse-&gt;StatusDescription );\n      }\n      if ( myUri-&gt;Equals( myHttpWebResponse-&gt;ResponseUri ) )\n      {\n         Console::WriteLine( &quot;<br>The Request Uri was not redirected by the server&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;<br>The Request Uri was redirected to : {0}&quot;, myHttpWebResponse-&gt;ResponseUri );\n      }\n      // Release resources of response Object*.\n      myHttpWebResponse-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebResponse_ResponseUri#1\">\t\t\tUri myUri = new Uri(url);\n\t\t\t// Create a &#39;HttpWebRequest&#39; object for the specified url. \n\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(myUri); \n\t\t\t// Send the request and wait for response.\n\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\tif (myHttpWebResponse.StatusCode == HttpStatusCode.OK)\n                Console.WriteLine(&quot;<br>Request succeeded and the requested information is in the response ,Description : {0}&quot;,\n\t\t\t\t\t\t\t\t\tmyHttpWebResponse.StatusDescription);\n\t\t\tif (myUri.Equals(myHttpWebResponse.ResponseUri))\n\t\t\t\tConsole.WriteLine(&quot;<br>The Request Uri was not redirected by the server&quot;);\n\t\t\telse\n\t\t\t\tConsole.WriteLine(&quot;<br>The Request Uri was redirected to :{0}&quot;,myHttpWebResponse.ResponseUri);\n\t\t\t// Release resources of response object.\n\t\t\tmyHttpWebResponse.Close(); \n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_ResponseUri#1\">            Dim myUri As New Uri(url)\n            &#39; Create a &#39;HttpWebRequest&#39; object for the specified url \n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(myUri), HttpWebRequest)\n            &#39; Send the request and wait for response.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            If myHttpWebResponse.StatusCode = HttpStatusCode.OK Then\n                Console.WriteLine(ControlChars.Cr + &quot;Request succeeded and the requested information is in the response , Description : {0}&quot;, myHttpWebResponse.StatusDescription)\n            End If\n            If myUri.Equals(myHttpWebResponse.ResponseUri) Then\n                Console.WriteLine(ControlChars.Cr + &quot;The Request Uri was not redirected by the server&quot;)\n            Else\n                Console.WriteLine(ControlChars.Cr + &quot;The Request Uri was redirected to :{0}&quot;, myHttpWebResponse.ResponseUri)\n            End If\n            &#39; Release resources of response object.\n            myHttpWebResponse.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_Server\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_Server_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Server</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the server that sent the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Server { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the name of the server that sent the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Server property contains the value of the Server header returned with the response.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Server property to display the Web server&#39;s name to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"HttpWebResponse_Method_Server#2\">      Try\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            Dim method As String\n            method = myHttpWebResponse.Method\n            If [String].Compare(method, &quot;GET&quot;) = 0 Then\n                Console.WriteLine(ControlChars.NewLine + &quot;The GET method was successfully invoked on the following Web Server : {0}&quot;, myHttpWebResponse.Server)\n            End If\n            &#39; Releases the resources of the response.\n            myHttpWebResponse.Close()\n        Catch e As WebException\n            Console.WriteLine(ControlChars.NewLine + &quot;Exception Raised. The following error occured : {0}&quot;, e.Status)\n        Catch e As Exception\n            Console.WriteLine(ControlChars.NewLine + &quot;The following exception was raised : {0}&quot;, e.Message)\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebResponse_Method_Server#2\">   try\n   {\n      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( url ) );\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      String^ method;\n      method = myHttpWebResponse-&gt;Method;\n      if ( String::Compare( method, &quot;GET&quot; ) == 0 )\n      {\n         Console::WriteLine( &quot;<br>The &#39;GET&#39; method was successfully invoked on the following Web Server : {0}&quot;,\n            myHttpWebResponse-&gt;Server );\n      }\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;<br>WebException raised. The following error occured : {0}&quot;, e-&gt;Status );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>The following Exception was raised : {0}&quot;, e-&gt;Message );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"HttpWebResponse_Method_Server#2\">        try \n \t\t  {\t\n            // Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\t\tstring method ;\n\t\t\t\tmethod = myHttpWebResponse.Method;\n\t\t\t\tif (String.Compare(method,&quot;GET&quot;) == 0)\n\t\t\t\t\tConsole.WriteLine(&quot;<br>The &#39;GET&#39; method was successfully invoked on the following Web Server : {0}&quot;,\n\t\t\t\t\t\t\t\t\t   myHttpWebResponse.Server);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close();\n          } \n\t\tcatch(WebException e) \n\t\t   {\n\t\t        Console.WriteLine(&quot;<br>WebException raised. The following error occured : {0}&quot;,e.Status); \n           }\n\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;<br>The following Exception was raised : {0}&quot;,e.Message);\n\t\t\t}\n\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_StatusCode\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_StatusCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StatusCode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the status of the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Net.HttpStatusCode StatusCode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The StatusCode parameter is a number that indicates the status of the HTTP response. The expected values for status are defined in the <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses StatusCode to verify that the status of the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> is OK.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebResponse_StatusCode_StatusDescription#1\">    public static void GetPage(String url) \n\t{\n\t\ttry \n \t\t  {\t\n\t\t\t\t// Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\t\t// Sends the HttpWebRequest and waits for a response.\n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\t\tif (myHttpWebResponse.StatusCode == HttpStatusCode.OK)\n\t\t\t\t   Console.WriteLine(&quot;\\r<br>Response Status Code is OK and StatusDescription is: {0}&quot;,\n\t\t\t\t\t\t\t\t\t\tmyHttpWebResponse.StatusDescription);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close(); \n\t\t\t\n        \t} \n\t\tcatch(WebException e) \n\t\t   {\n\t\t        Console.WriteLine(&quot;\\r<br>WebException Raised. The following error occured : {0}&quot;,e.Status); \n           }\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;<br>The following Exception was raised : {0}&quot;,e.Message);\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_StatusCode_StatusDescription#1\">    Public Shared Sub GetPage(url As [String])\n       Try\n            &#39; Creates an HttpWebRequest with the specified URL.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n            &#39; Sends the request and waits for a response.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            If myHttpWebResponse.StatusCode = HttpStatusCode.OK Then\n                Console.WriteLine(ControlChars.Lf + ControlChars.NewLine + &quot;Response Status Code is OK and StatusDescription is: {0}&quot;, myHttpWebResponse.StatusDescription)\n            End If\n            &#39; Release the resources of the response.\n            myHttpWebResponse.Close()\n        \n        Catch e As WebException\n            Console.WriteLine(ControlChars.Lf + ControlChars.NewLine + &quot;Exception Raised. The following error occured : {0}&quot;, e.Status)\n        Catch e As Exception\n            Console.WriteLine(ControlChars.NewLine + &quot;The following exception was raised : {0}&quot;, e.Message)\n        End Try\n    End Sub \n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebResponse_StatusCode_StatusDescription#1\">void GetPage( String^ url )\n{\n   try\n   {\n      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( url ));\n      // Sends the HttpWebRequest and waits for a response.\n      HttpWebResponse^ myHttpWebResponse = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest-&gt;GetResponse());\n      if ( myHttpWebResponse-&gt;StatusCode == HttpStatusCode::OK )\n      {\n         Console::WriteLine( &quot;\\r<br>Response Status Code is OK and StatusDescription is: {0}&quot;,\n            myHttpWebResponse-&gt;StatusDescription );\n      }\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;\\r<br>WebException Raised. The following error occured : {0}&quot;, e-&gt;Status );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>The following Exception was raised : {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_StatusDescription\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_StatusDescription_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StatusDescription</div>        \r\n          </div>\r\n    \r\n            <p>Gets the status description returned with the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string StatusDescription { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that describes the status of the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A common status message is OK.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses StatusDescription to verify that the status of the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> is OK.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebResponse_StatusCode_StatusDescription#2\">    public static void GetPage(String url) \n\t{\n\t\ttry \n \t\t  {\t\n\t\t\t\t// Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\t\t// Sends the HttpWebRequest and waits for a response.\n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\t\tif (myHttpWebResponse.StatusCode == HttpStatusCode.OK)\n\t\t\t\t   Console.WriteLine(&quot;\\r<br>Response Status Code is OK and StatusDescription is: {0}&quot;,\n\t\t\t\t\t\t\t\t\t\tmyHttpWebResponse.StatusDescription);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close(); \n\t\t\t\n        \t} \n\t\tcatch(WebException e) \n\t\t   {\n\t\t        Console.WriteLine(&quot;\\r<br>WebException Raised. The following error occured : {0}&quot;,e.Status); \n           }\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;<br>The following Exception was raised : {0}&quot;,e.Message);\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_StatusCode_StatusDescription#2\">    Public Shared Sub GetPage(url As [String])\n       Try\n            &#39; Creates an HttpWebRequest with the specified URL.\n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n            &#39; Sends the request and waits for a response.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            If myHttpWebResponse.StatusCode = HttpStatusCode.OK Then\n                Console.WriteLine(ControlChars.Lf + ControlChars.NewLine + &quot;Response Status Code is OK and StatusDescription is: {0}&quot;, myHttpWebResponse.StatusDescription)\n            End If\n            &#39; Release the resources of the response.\n            myHttpWebResponse.Close()\n        \n        Catch e As WebException\n            Console.WriteLine(ControlChars.Lf + ControlChars.NewLine + &quot;Exception Raised. The following error occured : {0}&quot;, e.Status)\n        Catch e As Exception\n            Console.WriteLine(ControlChars.NewLine + &quot;The following exception was raised : {0}&quot;, e.Message)\n        End Try\n    End Sub \n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebResponse_StatusCode_StatusDescription#2\">void GetPage( String^ url )\n{\n   try\n   {\n      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( url ));\n      // Sends the HttpWebRequest and waits for a response.\n      HttpWebResponse^ myHttpWebResponse = dynamic_cast&lt;HttpWebResponse^&gt;(myHttpWebRequest-&gt;GetResponse());\n      if ( myHttpWebResponse-&gt;StatusCode == HttpStatusCode::OK )\n      {\n         Console::WriteLine( &quot;\\r<br>Response Status Code is OK and StatusDescription is: {0}&quot;,\n            myHttpWebResponse-&gt;StatusDescription );\n      }\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      Console::WriteLine( &quot;\\r<br>WebException Raised. The following error occured : {0}&quot;, e-&gt;Status );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>The following Exception was raised : {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_SupportsHeaders\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_SupportsHeaders_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SupportsHeaders</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates if headers are supported.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool SupportsHeaders { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.  </p>\n<p> <code>true</code> if headers are supported; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is always true for <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE -->.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_Close\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the response stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Close method closes the response stream and releases the connection to the resource for reuse by other requests.  </p>\n<p> You must call either the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> or the Close method to close the stream and release the connection for reuse. It is not necessary to call both <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> and Close, but doing so does not cause an error. Failure to close the stream can cause your application to run out of connections.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to close a <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebResponse_Close#1\">            // Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\t\t// Sends the HttpWebRequest and waits for a response.\n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\t\tConsole.WriteLine(&quot;<br>Response Received.Trying to Close the response stream..&quot;);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close(); \n\t\t\t\tConsole.WriteLine(&quot;<br>Response Stream successfully closed&quot;);\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebResponse_Close#1\">      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( url ) );\n      // Sends the HttpWebRequest and waits for a response.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      Console::WriteLine( &quot;<br>Response Received::Trying to Close the response stream..&quot; );\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n      Console::WriteLine( &quot;<br>Response Stream successfully closed&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_Close#1\">            &#39; Creates an HttpWebRequest for the specified URL. \n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n            &#39; Sends the HttpWebRequest and waits for a response.\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            Console.WriteLine(&quot;Response Received.Trying to Close the response stream..&quot;)\n            &#39; Releases the resources of the response.\n            myHttpWebResponse.Close()\n            Console.WriteLine(&quot;Response Stream successfully closed&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a>, and optionally disposes of the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to releases only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code> method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.net.webresponse\" data-linktype=\"relative-path\">WebResponse</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data needed to serialize the target object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>serializationInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> to populate with data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>streamingContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that specifies the destination for this serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any objects that are included in the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> are automatically tracked and serialized by the formatter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_GetResponseHeader_System_String_\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_GetResponseHeader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetResponseHeader(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the contents of a header that was returned with the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetResponseHeader (string headerName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>headerName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The header value to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The contents of the specified header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use GetResponseHeader to retrieve the contents of particular headers. You must specify which header you want to return.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example creates a Web request and queries for a response. If the site requires authentication, this example will respond with a challenge string. This string is extracted using GetResponseHeader.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebResponse_GetResponseHeader#1\">   public static void GetPage(String url) \n\t{\n\ttry \n \t\t\t{\t\n\t\t\t\tUri ourUri = new Uri(url);\n\t\t\t\t// Creates an HttpWebRequest for the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(ourUri); \n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse();\n\t\t\t\tConsole.WriteLine(&quot;<br>The server did not issue any challenge.  Please try again with a protected resource URL.&quot;);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close(); \n\t\t\t} \n\t\tcatch(WebException e) \n\t\t   {\n\t\t\t    HttpWebResponse response = (HttpWebResponse)e.Response;\n\t\t\t\tif (response != null)\n\t\t\t\t{\n\t\t\t\t\tif (response.StatusCode == HttpStatusCode.Unauthorized)\n\t\t\t\t\t{\n\t\t\t\t\t\tstring challenge = null;\n\t\t\t\t\t\tchallenge= response.GetResponseHeader(&quot;WWW-Authenticate&quot;);\n\t\t\t\t\t\tif (challenge != null)\n\t\t\t\t\t\t\tConsole.WriteLine(&quot;<br>The following challenge was raised by the server:{0}&quot;,challenge);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tConsole.WriteLine(&quot;<br>The following WebException was raised : {0}&quot;,e.Message);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tConsole.WriteLine(&quot;<br>Response Received from server was null&quot;);\n\n\t\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;<br>The following Exception was raised : {0}&quot;,e.Message);\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_GetResponseHeader#1\">    Public Shared Sub GetPage(url As [String])\n\tTry\n            Dim ourUri As New Uri(url)\n            &#39; Creates an HttpWebRequest for the specified URL. \n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(ourUri), HttpWebRequest)\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            Console.WriteLine(ControlChars.NewLine + &quot;The server did not issue any challenge.  Please try again with a protected resource URL.&quot;)\n            &#39; Releases the resources of the response.\n            myHttpWebResponse.Close()\n        Catch e As WebException\n            Dim response As HttpWebResponse = CType(e.Response, HttpWebResponse)\n            If Not (response Is Nothing) Then\n                If response.StatusCode = HttpStatusCode.Unauthorized Then\n                    Dim challenge As String = Nothing\n                    challenge = response.GetResponseHeader(&quot;WWW-Authenticate&quot;)\n                    If Not (challenge Is Nothing) Then\n                        Console.WriteLine(ControlChars.NewLine + &quot;The following challenge was raised by the server:{0}&quot;, challenge)\n                    End If\n                Else\n                    Console.WriteLine(ControlChars.NewLine + &quot;The following exception was raised : {0}&quot;, e.Message)\n                End If\n            Else\n                Console.WriteLine(ControlChars.NewLine + &quot;Response Received from server was null&quot;)\n            End If \n        Catch e As Exception\n            Console.WriteLine(ControlChars.NewLine + &quot;The following exception was raised : {0}&quot;, e.Message)\n        End Try\n    End Sub \n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebResponse_GetResponseHeader#1\">void GetPage( String^ url )\n{\n   try\n   {\n      Uri^ ourUri = gcnew Uri( url );\n      // Creates an HttpWebRequest for the specified URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( ourUri ) );\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      Console::WriteLine( &quot;<br>The server did not issue any challenge.  Please try again with a protected resource URL.&quot; );\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n   }\n   catch ( WebException^ e ) \n   {\n      HttpWebResponse^ response = (HttpWebResponse^)( e-&gt;Response );\n      if ( response != nullptr )\n      {\n         if ( response-&gt;StatusCode == HttpStatusCode::Unauthorized )\n         {\n            String^ challenge = nullptr;\n            challenge = response-&gt;GetResponseHeader( &quot;WWW-Authenticate&quot; );\n            if ( challenge != nullptr )\n                        Console::WriteLine( &quot;<br>The following challenge was raised by the server: {0}&quot;, challenge );\n         }\n         else\n         {\n            Console::WriteLine( &quot;<br>The following WebException was raised : {0}&quot;, e-&gt;Message );\n         }\n      }\n      else\n      {\n         Console::WriteLine( &quot;<br>Response Received from server was 0&quot; );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;<br>The following Exception was raised : {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_GetResponseStream\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_GetResponseStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetResponseStream()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the stream that is used to read the body of the response from the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.IO.Stream GetResponseStream ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> containing the body of the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p>There is no response stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current instance has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetResponseStream method returns the data stream from the requested Internet resource.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must call either the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> or the  <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Close_\" data-linktype=\"relative-path\">Close</a> method to close the stream and release the connection for reuse. It is not necessary to call both <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close_\" data-linktype=\"relative-path\">Close</a> and <a class=\"xref\" href=\"system.net.httpwebresponse#System_Net_HttpWebResponse_Close_\" data-linktype=\"relative-path\">Close</a>, but doing so does not cause an error. Failure to close the stream will cause your application to run out of connections.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use GetResponseStream to return the <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> instance used to read the response from the server.  </p>\n<pre><code class=\"lang-cs\" name=\"HttpWebResponse_GetResponseStream#1\">            // Creates an HttpWebRequest with the specified URL. \n\t\t\t\tHttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url); \n\t\t\t\t// Sends the HttpWebRequest and waits for the response.\t\t\t\n\t\t\t\tHttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse(); \n\t\t\t\t// Gets the stream associated with the response.\n\t\t\t\tStream receiveStream = myHttpWebResponse.GetResponseStream();\n\t\t\t\tEncoding encode = System.Text.Encoding.GetEncoding(&quot;utf-8&quot;);\n\t\t\t\t// Pipes the stream to a higher level stream reader with the required encoding format. \n\t\t\t\tStreamReader readStream = new StreamReader( receiveStream, encode );\n            Console.WriteLine(&quot;\\r<br>Response stream received.&quot;);\n\t\t\t\tChar[] read = new Char[256];\n        \t\t// Reads 256 characters at a time.    \n\t\t\t\tint count = readStream.Read( read, 0, 256 );\n\t\t\t\tConsole.WriteLine(&quot;HTML...\\r<br>&quot;);\n\t\t\t\twhile (count &gt; 0) \n\t\t\t\t\t{\n    \t\t\t\t\t// Dumps the 256 characters on a string and displays the string to the console.\n\t\t\t\t\t\tString str = new String(read, 0, count);\n\t\t\t\t\t\tConsole.Write(str);\n\t\t\t\t\t\tcount = readStream.Read(read, 0, 256);\n\t\t\t\t\t}\n\t\t\t\tConsole.WriteLine(&quot;&quot;);\n\t\t\t\t// Releases the resources of the response.\n\t\t\t\tmyHttpWebResponse.Close();\n\t\t\t\t// Releases the resources of the Stream.\n\t\t\t\treadStream.Close();\n</code></pre><pre><code class=\"lang-cpp\" name=\"HttpWebResponse_GetResponseStream#1\">      // Creates an HttpWebRequest with the specified URL.\n      HttpWebRequest^ myHttpWebRequest = (HttpWebRequest^)( WebRequest::Create( url ) );\n      // Sends the HttpWebRequest and waits for the response.\n      HttpWebResponse^ myHttpWebResponse = (HttpWebResponse^)( myHttpWebRequest-&gt;GetResponse() );\n      // Gets the stream associated with the response.\n      Stream^ receiveStream = myHttpWebResponse-&gt;GetResponseStream();\n      Encoding^ encode = System::Text::Encoding::GetEncoding( &quot;utf-8&quot; );\n      // Pipes the stream to a higher level stream reader with the required encoding format.\n      StreamReader^ readStream = gcnew StreamReader( receiveStream,encode );\n      Console::WriteLine( &quot;\\r<br>Response stream received.&quot; );\n      array&lt;Char&gt;^ read = gcnew array&lt;Char&gt;(256);\n      // Reads 256 characters at a time.\n      int count = readStream-&gt;Read( read, 0, 256 );\n      Console::WriteLine( &quot;HTML...\\r<br>&quot; );\n      while ( count &gt; 0 )\n      {\n         // Dumps the 256 characters on a String* and displays the String* to the console.\n         String^ str = gcnew String( read,0,count );\n         Console::Write( str );\n         count = readStream-&gt;Read( read, 0, 256 );\n      }\n      Console::WriteLine( &quot;&quot; );\n      // Releases the resources of the response.\n      myHttpWebResponse-&gt;Close();\n      // Releases the resources of the Stream.\n      readStream-&gt;Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"HttpWebResponse_GetResponseStream#1\">            &#39; Creates an HttpWebRequest for the specified URL. \n            Dim myHttpWebRequest As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)\n            &#39; Sends the request and waits for a response.\t\t\t\n            Dim myHttpWebResponse As HttpWebResponse = CType(myHttpWebRequest.GetResponse(), HttpWebResponse)\n            &#39; Calls the method GetResponseStream to return the stream associated with the response.\n            Dim receiveStream As Stream = myHttpWebResponse.GetResponseStream()\n            Dim encode As Encoding = System.Text.Encoding.GetEncoding(&quot;utf-8&quot;)\n            &#39; Pipes the response stream to a higher level stream reader with the required encoding format. \n            Dim readStream As New StreamReader(receiveStream, encode)\n            Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;Response stream received&quot;)\n            Dim read(256) As [Char]\n            &#39; Reads 256 characters at a time.    \n            Dim count As Integer = readStream.Read(read, 0, 256)\n            Console.WriteLine(&quot;HTML...&quot; + ControlChars.Lf + ControlChars.Cr)\n            While count &gt; 0\n                &#39; Dumps the 256 characters to a string and displays the string to the console.\n                Dim str As New [String](read, 0, count)\n                Console.Write(str)\n                count = readStream.Read(read, 0, 256)\n            End While\n            Console.WriteLine(&quot;&quot;)\n            &#39; Releases the resources of the Stream.\n            readStream.Close()\n\t         &#39; Releases the resources of the response.\n            myHttpWebResponse.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpWebResponse_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Net_HttpWebResponse_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Serializes this instance into the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>serializationInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object into which this <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> will be serialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>streamingContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination of the serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpWebResponse.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.CharacterSet\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.Close\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.ContentEncoding\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.ContentLength\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.ContentType\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.Cookies\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.GetResponseHeader\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.GetResponseStream\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.Headers\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.IsMutuallyAuthenticated\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.LastModified\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.Method\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.ProtocolVersion\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.ResponseUri\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.Server\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.StatusCode\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.StatusDescription\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.SupportsHeaders\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpWebResponse.ISerializable.GetObjectData\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-10 02:17 AM\">\r\n<meta name=\"document_id\" content=\"c5a55ce8-13e4-28ae-4806-043045a89fa9\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\HttpWebResponse.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an HTTP-specific implementation of the  class.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.HttpWebResponse\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpWebResponse.yml","open_to_public_contributors":true,"api_name":["System.Net.HttpWebResponse","System.Net.HttpWebResponse..ctor","System.Net.HttpWebResponse.CharacterSet","System.Net.HttpWebResponse.Close","System.Net.HttpWebResponse.ContentEncoding","System.Net.HttpWebResponse.ContentLength","System.Net.HttpWebResponse.ContentType","System.Net.HttpWebResponse.Cookies","System.Net.HttpWebResponse.Dispose","System.Net.HttpWebResponse.GetObjectData","System.Net.HttpWebResponse.GetResponseHeader","System.Net.HttpWebResponse.GetResponseStream","System.Net.HttpWebResponse.Headers","System.Net.HttpWebResponse.IsMutuallyAuthenticated","System.Net.HttpWebResponse.LastModified","System.Net.HttpWebResponse.Method","System.Net.HttpWebResponse.ProtocolVersion","System.Net.HttpWebResponse.ResponseUri","System.Net.HttpWebResponse.Server","System.Net.HttpWebResponse.StatusCode","System.Net.HttpWebResponse.StatusDescription","System.Net.HttpWebResponse.SupportsHeaders","System.Net.HttpWebResponse.ISerializable.GetObjectData"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.HttpWebResponse","System::Net::HttpWebResponse","System.Net.HttpWebResponse.#ctor","System::Net::HttpWebResponse::#ctor","System.Net.HttpWebResponse.CharacterSet","System::Net::HttpWebResponse::CharacterSet","System.Net.HttpWebResponse.Close","System::Net::HttpWebResponse::Close","System.Net.HttpWebResponse.ContentEncoding","System::Net::HttpWebResponse::ContentEncoding","System.Net.HttpWebResponse.ContentLength","System::Net::HttpWebResponse::ContentLength","System.Net.HttpWebResponse.ContentType","System::Net::HttpWebResponse::ContentType","System.Net.HttpWebResponse.Cookies","System::Net::HttpWebResponse::Cookies","System.Net.HttpWebResponse.Dispose","System::Net::HttpWebResponse::Dispose","System.Net.HttpWebResponse.GetObjectData","System::Net::HttpWebResponse::GetObjectData","System.Net.HttpWebResponse.GetResponseHeader","System::Net::HttpWebResponse::GetResponseHeader","System.Net.HttpWebResponse.GetResponseStream","System::Net::HttpWebResponse::GetResponseStream","System.Net.HttpWebResponse.Headers","System::Net::HttpWebResponse::Headers","System.Net.HttpWebResponse.IsMutuallyAuthenticated","System::Net::HttpWebResponse::IsMutuallyAuthenticated","System.Net.HttpWebResponse.LastModified","System::Net::HttpWebResponse::LastModified","System.Net.HttpWebResponse.Method","System::Net::HttpWebResponse::Method","System.Net.HttpWebResponse.ProtocolVersion","System::Net::HttpWebResponse::ProtocolVersion","System.Net.HttpWebResponse.ResponseUri","System::Net::HttpWebResponse::ResponseUri","System.Net.HttpWebResponse.Server","System::Net::HttpWebResponse::Server","System.Net.HttpWebResponse.StatusCode","System::Net::HttpWebResponse::StatusCode","System.Net.HttpWebResponse.StatusDescription","System::Net::HttpWebResponse::StatusDescription","System.Net.HttpWebResponse.SupportsHeaders","System::Net::HttpWebResponse::SupportsHeaders","System.Net.HttpWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData","System::Net::HttpWebResponse::System#Runtime#Serialization#ISerializable#GetObjectData"],"dev_langs":["csharp"],"updated_at":"2017-03-10 02:17 AM","document_id":"c5a55ce8-13e4-28ae-4806-043045a89fa9","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\HttpWebResponse.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/HttpWebResponse.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HttpWebResponse class | Microsoft Docs","_op_ogTitle":"HttpWebResponse class","description":"Provides an HTTP-specific implementation of the  class.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.HttpWebResponse","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httpwebresponse","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httpwebresponse","fileRelativePath":"System.Net.HttpWebResponse.html"},"themesRelativePathToOutputRoot":"_themes/"}