{"content":"    \r\n    <h1 id=\"System_Convert\">\r\n      <span class=\"lang-csharp\">Convert</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Converts a base data type to another base data type.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Convert</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Convert</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The static methods of the Convert class are primarily used to support conversion to and from the base data types in the .NET Framework. The supported base types are <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>, <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> and <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. In addition, the Convert class includes methods to support  other kinds of conversions.  </p>\n<p> This topic consists of the following sections:  </p>\n<p> <a href=\"#Base\" data-linktype=\"self-bookmark\">Conversions to and from Base Types</a><br> <a href=\"#NonDecimal\" data-linktype=\"self-bookmark\">Non-Decimal Numbers</a><br> <a href=\"#Custom\" data-linktype=\"self-bookmark\">Conversions from Custom Objects to Base Types</a><br> <a href=\"#Culture\" data-linktype=\"self-bookmark\">Culture-Specific Formatting Information</a><br> <a href=\"#Base64\" data-linktype=\"self-bookmark\">Base64 Encoding</a><br> <a href=\"#Other\" data-linktype=\"self-bookmark\">Other Common Conversions</a>  </p>\n<p><a name=\"Base\"></a>   </p>\n<h2 id=\"conversions-to-and-from-base-types\">Conversions to and from Base Types</h2>\n<p> A conversion method exists to convert every base type to every other base type. However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type. These five outcomes are:  </p>\n<ul>\n<li><p>No conversion. This occurs when an attempt is made to convert from a type to itself (for example, by calling <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToInt32(Int32)</a> with an argument of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>). In this case, the method simply returns an instance of the original type.  </p>\n</li>\n<li><p>An <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>. This occurs when a particular conversion is not supported. An <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown for the following conversions:  </p>\n<ul>\n<li><p>Conversions from <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, or <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n</li>\n<li><p>Conversions from <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, or <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.  </p>\n</li>\n<li><p>Conversions from <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to any other type except <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n</li>\n<li><p>Conversions from any other type, except <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, to <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n</li>\n</ul>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>. This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format. The exception is thrown for the following conversions:  </p>\n<ul>\n<li><p>A string to be converted to a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value does not equal <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">System.Boolean.TrueString</a> or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">System.Boolean.FalseString</a>.  </p>\n</li>\n<li><p>A string to be converted to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value consists of multiple characters.  </p>\n</li>\n<li><p>A string to be converted to any numeric type is not recognized as a valid number.  </p>\n</li>\n<li><p>A string to be converted to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is not recognized as a valid date and time value.  </p>\n</li>\n</ul>\n</li>\n<li><p>A successful conversion. For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.  </p>\n</li>\n<li><p>An <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>. This occurs when a narrowing conversion results in a loss of data. For example, trying to convert a <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance whose value is 10000 to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> type throws an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> because 10000 is outside the range of the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> data type.  </p>\n<p>An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits). However, an exception will be thrown if the result is larger than can be represented by the particular conversion method&#39;s return value type.  </p>\n<p>For example, when a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> is converted to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, a loss of precision might occur but no exception is thrown. However, if the magnitude of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> is too large to be represented by a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, an overflow exception is thrown.  </p>\n</li>\n</ul>\n<p><a name=\"NonDecimal\"></a>   </p>\n<h2 id=\"non-decimal-numbers\">Non-Decimal Numbers</h2>\n<p> The Convert class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values. Each of these conversion methods includes a <code>base</code> argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10). There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Byte_System_Int32_\" data-linktype=\"relative-path\">ToString(Byte,Int32)</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_System_String_System_Int32_\" data-linktype=\"relative-path\">ToByte(String,Int32)</a>, to convert a byte value to and from a string in a specified base.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Int16_System_Int32_\" data-linktype=\"relative-path\">ToString(Int16,Int32)</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_System_String_System_Int32_\" data-linktype=\"relative-path\">ToInt16(String,Int32)</a>, to convert a 16-bit signed integer to and from a string in a specified base.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Int32_System_Int32_\" data-linktype=\"relative-path\">ToString(Int32,Int32)</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_String_System_Int32_\" data-linktype=\"relative-path\">ToInt32(String,Int32)</a>, to convert a 32-bit signed integer to and from a string in a specified base.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Int64_System_Int32_\" data-linktype=\"relative-path\">ToString(Int64,Int32)</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_String_System_Int32_\" data-linktype=\"relative-path\">ToInt64(String,Int32)</a>, to convert a 64-bit signed integer to and from a string in a specified base.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_System_String_System_Int32_\" data-linktype=\"relative-path\">ToSByte(String,Int32)</a>, to convert the string representation of a byte value in a specified format to a signed byte.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_System_String_System_Int32_\" data-linktype=\"relative-path\">ToUInt16(String,Int32)</a>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_System_String_System_Int32_\" data-linktype=\"relative-path\">ToUInt32(String,Int32)</a>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_System_String_System_Int32_\" data-linktype=\"relative-path\">ToUInt64(String,Int32)</a>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.  </p>\n<p>The following example converts the value of <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">System.Int16.MaxValue</a> to a string in all supported numeric formats. It then converts the string value back to a <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert#2\">using namespace System;\n\nvoid main()\n{\n   array&lt;int&gt;^ baseValues = { 2, 8, 10, 16 };\n   Int16 value = Int16::MaxValue;\n   for each (Int16 baseValue in baseValues) {\n      String^ s = Convert::ToString(value, baseValue);\n      Int16 value2 = Convert::ToInt16(s, baseValue);\n\n      Console::WriteLine(&quot;{0} --&gt; {1} (base {2}) --&gt; {3}&quot;, \n                        value, s, baseValue, value2);\n   }                     \n}\n// The example displays the following output:\n//     32767 --&gt; 111111111111111 (base 2) --&gt; 32767\n//     32767 --&gt; 77777 (base 8) --&gt; 32767\n//     32767 --&gt; 32767 (base 10) --&gt; 32767\n//     32767 --&gt; 7fff (base 16) --&gt; 32767\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] baseValues = { 2, 8, 10, 16 };\n      short value = Int16.MaxValue;\n      foreach (var baseValue in baseValues) {\n         String s = Convert.ToString(value, baseValue);\n         short value2 = Convert.ToInt16(s, baseValue);\n\n         Console.WriteLine(&quot;{0} --&gt; {1} (base {2}) --&gt; {3}&quot;, \n                           value, s, baseValue, value2);\n      }                     \n   }\n}\n// The example displays the following output:\n//     32767 --&gt; 111111111111111 (base 2) --&gt; 32767\n//     32767 --&gt; 77777 (base 8) --&gt; 32767\n//     32767 --&gt; 32767 (base 10) --&gt; 32767\n//     32767 --&gt; 7fff (base 16) --&gt; 32767\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert#2\">Module Example\n   Public Sub Main()\n      Dim baseValues() As Integer = { 2, 8, 10, 16 }\n      Dim value As Short = Int16.MaxValue\n      For Each baseValue in baseValues\n         Dim s As String = Convert.ToString(value, baseValue)\n         Dim value2 As Short = Convert.ToInt16(s, baseValue)\n\n         Console.WriteLine(&quot;{0} --&gt; {1} (base {2}) --&gt; {3}&quot;, \n                           value, s, baseValue, value2)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     32767 --&gt; 111111111111111 (base 2) --&gt; 32767\n&#39;     32767 --&gt; 77777 (base 8) --&gt; 32767\n&#39;     32767 --&gt; 32767 (base 10) --&gt; 32767\n&#39;     32767 --&gt; 7fff (base 16) --&gt; 32767\n</code></pre></li>\n</ul>\n<p><a name=\"Custom\"></a>   </p>\n<h2 id=\"conversions-from-custom-objects-to-base-types\">Conversions from Custom Objects to Base Types</h2>\n<p> In addition to supporting conversions between the base types, the Convert method supports conversion of any custom type to any base type. To do this, the custom type must implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, which defines methods for converting the implementing type to each of the base types. Conversions that are not supported by a particular type should throw an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.  </p>\n<p> When the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method is passed a custom type as its first parameter, or when the <code>Convert.To</code><em>Type</em> method (such as <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_Object_\" data-linktype=\"relative-path\">System.Convert.ToInt32(Object)</a> or <a class=\"xref\" href=\"system.convert#System_Convert_ToDouble_System_Object_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToDouble(Object,IFormatProvider)</a> is called and passed an instance of a custom type as its first parameter, the Convert method, in turn, calls the custom type&#39;s <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> implementation to perform the conversion. For more information, see <a href=\"../Topic/Type%20Conversion%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Type Conversion in the .NET Framework</a>.  </p>\n<p><a name=\"Culture\"></a>   </p>\n<h2 id=\"culture-specific-formatting-information\">Culture-Specific Formatting Information</h2>\n<p> All the base type conversion methods and the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method include overloads that have a parameter of type <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. For example, the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_\" data-linktype=\"relative-path\">ToBoolean</a> method has the following two overloads:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_Object_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(Object,IFormatProvider)</a>  \n</li>\n<li><a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(String,IFormatProvider)</a>  \n\n<p>The <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter can supply culture-specific formatting information to assist the conversion process. However, it is ignored by most of the base type conversion methods. It is used only by the following base type conversion methods.If a <code>null</code><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> argument is passed to these methods, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current thread culture is used.  </p>\n</li>\n<li><p>By methods that convert a value to a numeric type. The <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter is used by the overload that has parameters of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. It is also used by the overload that has parameters of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> if the object&#39;s run-time type is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n</li>\n<li><p>By methods that convert a value to a date and time. The <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter is used by the overload that has parameters of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. It is also used by the overload that has parameters of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> if the object&#39;s run-time type is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n</li>\n<li><p>By the <a class=\"xref\" href=\"system.convert#System_Convert_ToString_\" data-linktype=\"relative-path\">ToString</a> overloads that include an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter and that convert either a numeric value to a string or a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to a string.  </p>\n<p>However, any user-defined type that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> can make use of the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter.  </p>\n</li>\n</ul>\n<p><a name=\"Base64\"></a>   </p>\n<h2 id=\"base64-encoding\">Base64 Encoding</h2>\n<p> Base64 encoding converts binary data to a string. Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters. The Convert class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or to and from an array of Unicode characters consisting of base-64 digit characters.  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToBase64String_\" data-linktype=\"relative-path\">ToBase64String</a>, which converts a byte array to a base64-encoded string.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_ToBase64CharArray_\" data-linktype=\"relative-path\">ToBase64CharArray</a>, which converts a byte array to a base64-encoded character array.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_FromBase64String_\" data-linktype=\"relative-path\">FromBase64String</a>, which converts a base64-encoded string to a byte array.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.convert#System_Convert_FromBase64CharArray_\" data-linktype=\"relative-path\">FromBase64CharArray</a>, which converts a base64-encoded character array to a byte array.  </p>\n</li>\n</ul>\n<p><a name=\"Other\"></a>   </p>\n<h2 id=\"other-common-conversions\">Other Common Conversions</h2>\n<p> You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the Convert class.  These include:  </p>\n<p> Conversion to byte arrays<br> The <a class=\"xref\" href=\"system.bitconverter\" data-linktype=\"relative-path\">BitConverter</a> class  provides methods that convert the primitive numeric types (including <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>) to byte arrays and from byte arrays back to primitive data types.  </p>\n<p> Character encoding and decoding<br> The <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class and its derived classes (such as <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> and <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters. For more information, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a></p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_DBNull\" data-linktype=\"self-bookmark\">DBNull</a></div>\r\n          </td>\r\n            <td>\r\n            <p>A constant that represents a database column that is absent of data; that is, database null.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ChangeType_System_Object_System_Type_\" data-linktype=\"self-bookmark\">ChangeType(Object,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an object of the specified type and whose value is equivalent to the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ChangeType_System_Object_System_TypeCode_\" data-linktype=\"self-bookmark\">ChangeType(Object,TypeCode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an object of the specified type whose value is equivalent to the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ChangeType_System_Object_System_Type_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ChangeType(Object,Type,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ChangeType_System_Object_System_TypeCode_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ChangeType(Object,TypeCode,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_FromBase64CharArray_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">FromBase64CharArray(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_FromBase64String_System_String_\" data-linktype=\"self-bookmark\">FromBase64String(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_GetTypeCode_System_Object_\" data-linktype=\"self-bookmark\">GetTypeCode(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_IsDBNull_System_Object_\" data-linktype=\"self-bookmark\">IsDBNull(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an indication whether the specified object is of type <a class=\"xref\" href=\"system.dbnull\" data-linktype=\"relative-path\">DBNull</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBase64CharArray_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\" data-linktype=\"self-bookmark\">ToBase64CharArray(Byte[],Int32,Int32,Char[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBase64CharArray_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_System_Base64FormattingOptions_\" data-linktype=\"self-bookmark\">ToBase64CharArray(Byte[],Int32,Int32,Char[],Int32,Base64FormattingOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBase64String_System_Byte___\" data-linktype=\"self-bookmark\">ToBase64String(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBase64String_System_Byte___System_Base64FormattingOptions_\" data-linktype=\"self-bookmark\">ToBase64String(Byte[],Base64FormattingOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBase64String_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToBase64String(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBase64String_System_Byte___System_Int32_System_Int32_System_Base64FormattingOptions_\" data-linktype=\"self-bookmark\">ToBase64String(Byte[],Int32,Int32,Base64FormattingOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Boolean_\" data-linktype=\"self-bookmark\">ToBoolean(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified Boolean value; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Byte_\" data-linktype=\"self-bookmark\">ToBoolean(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Char_\" data-linktype=\"self-bookmark\">ToBoolean(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_DateTime_\" data-linktype=\"self-bookmark\">ToBoolean(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Decimal_\" data-linktype=\"self-bookmark\">ToBoolean(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Double_\" data-linktype=\"self-bookmark\">ToBoolean(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Int16_\" data-linktype=\"self-bookmark\">ToBoolean(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Int32_\" data-linktype=\"self-bookmark\">ToBoolean(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Int64_\" data-linktype=\"self-bookmark\">ToBoolean(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Object_\" data-linktype=\"self-bookmark\">ToBoolean(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a specified object to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_SByte_\" data-linktype=\"self-bookmark\">ToBoolean(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Single_\" data-linktype=\"self-bookmark\">ToBoolean(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_String_\" data-linktype=\"self-bookmark\">ToBoolean(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a logical value to its Boolean equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_UInt16_\" data-linktype=\"self-bookmark\">ToBoolean(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_UInt32_\" data-linktype=\"self-bookmark\">ToBoolean(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_UInt64_\" data-linktype=\"self-bookmark\">ToBoolean(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToBoolean(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToBoolean_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToBoolean(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Boolean_\" data-linktype=\"self-bookmark\">ToByte(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Byte_\" data-linktype=\"self-bookmark\">ToByte(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Char_\" data-linktype=\"self-bookmark\">ToByte(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_DateTime_\" data-linktype=\"self-bookmark\">ToByte(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Decimal_\" data-linktype=\"self-bookmark\">ToByte(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Double_\" data-linktype=\"self-bookmark\">ToByte(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Int16_\" data-linktype=\"self-bookmark\">ToByte(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Int32_\" data-linktype=\"self-bookmark\">ToByte(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Int64_\" data-linktype=\"self-bookmark\">ToByte(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Object_\" data-linktype=\"self-bookmark\">ToByte(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_SByte_\" data-linktype=\"self-bookmark\">ToByte(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Single_\" data-linktype=\"self-bookmark\">ToByte(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_String_\" data-linktype=\"self-bookmark\">ToByte(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_UInt16_\" data-linktype=\"self-bookmark\">ToByte(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_UInt32_\" data-linktype=\"self-bookmark\">ToByte(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_UInt64_\" data-linktype=\"self-bookmark\">ToByte(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToByte(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToByte(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToByte_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ToByte(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Boolean_\" data-linktype=\"self-bookmark\">ToChar(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Byte_\" data-linktype=\"self-bookmark\">ToChar(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Char_\" data-linktype=\"self-bookmark\">ToChar(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified Unicode character value; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_DateTime_\" data-linktype=\"self-bookmark\">ToChar(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Decimal_\" data-linktype=\"self-bookmark\">ToChar(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Double_\" data-linktype=\"self-bookmark\">ToChar(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Int16_\" data-linktype=\"self-bookmark\">ToChar(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Int32_\" data-linktype=\"self-bookmark\">ToChar(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Int64_\" data-linktype=\"self-bookmark\">ToChar(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Object_\" data-linktype=\"self-bookmark\">ToChar(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_SByte_\" data-linktype=\"self-bookmark\">ToChar(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Single_\" data-linktype=\"self-bookmark\">ToChar(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_String_\" data-linktype=\"self-bookmark\">ToChar(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the first character of a specified string to a Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_UInt16_\" data-linktype=\"self-bookmark\">ToChar(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_UInt32_\" data-linktype=\"self-bookmark\">ToChar(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_UInt64_\" data-linktype=\"self-bookmark\">ToChar(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToChar(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToChar_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToChar(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Boolean_\" data-linktype=\"self-bookmark\">ToDateTime(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Byte_\" data-linktype=\"self-bookmark\">ToDateTime(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Char_\" data-linktype=\"self-bookmark\">ToDateTime(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_DateTime_\" data-linktype=\"self-bookmark\">ToDateTime(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Decimal_\" data-linktype=\"self-bookmark\">ToDateTime(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Double_\" data-linktype=\"self-bookmark\">ToDateTime(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Int16_\" data-linktype=\"self-bookmark\">ToDateTime(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Int32_\" data-linktype=\"self-bookmark\">ToDateTime(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Int64_\" data-linktype=\"self-bookmark\">ToDateTime(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Object_\" data-linktype=\"self-bookmark\">ToDateTime(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_SByte_\" data-linktype=\"self-bookmark\">ToDateTime(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Single_\" data-linktype=\"self-bookmark\">ToDateTime(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_String_\" data-linktype=\"self-bookmark\">ToDateTime(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a date and time to an equivalent date and time value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_UInt16_\" data-linktype=\"self-bookmark\">ToDateTime(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_UInt32_\" data-linktype=\"self-bookmark\">ToDateTime(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_UInt64_\" data-linktype=\"self-bookmark\">ToDateTime(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToDateTime(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDateTime_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToDateTime(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Boolean_\" data-linktype=\"self-bookmark\">ToDecimal(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Byte_\" data-linktype=\"self-bookmark\">ToDecimal(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Char_\" data-linktype=\"self-bookmark\">ToDecimal(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_DateTime_\" data-linktype=\"self-bookmark\">ToDecimal(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Decimal_\" data-linktype=\"self-bookmark\">ToDecimal(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified decimal number; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Double_\" data-linktype=\"self-bookmark\">ToDecimal(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Int16_\" data-linktype=\"self-bookmark\">ToDecimal(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Int32_\" data-linktype=\"self-bookmark\">ToDecimal(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Int64_\" data-linktype=\"self-bookmark\">ToDecimal(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Object_\" data-linktype=\"self-bookmark\">ToDecimal(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_SByte_\" data-linktype=\"self-bookmark\">ToDecimal(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Single_\" data-linktype=\"self-bookmark\">ToDecimal(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_String_\" data-linktype=\"self-bookmark\">ToDecimal(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_UInt16_\" data-linktype=\"self-bookmark\">ToDecimal(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_UInt32_\" data-linktype=\"self-bookmark\">ToDecimal(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_UInt64_\" data-linktype=\"self-bookmark\">ToDecimal(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToDecimal(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDecimal_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToDecimal(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Boolean_\" data-linktype=\"self-bookmark\">ToDouble(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Byte_\" data-linktype=\"self-bookmark\">ToDouble(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Char_\" data-linktype=\"self-bookmark\">ToDouble(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_DateTime_\" data-linktype=\"self-bookmark\">ToDouble(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Decimal_\" data-linktype=\"self-bookmark\">ToDouble(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Double_\" data-linktype=\"self-bookmark\">ToDouble(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified double-precision floating-point number; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Int16_\" data-linktype=\"self-bookmark\">ToDouble(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Int32_\" data-linktype=\"self-bookmark\">ToDouble(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Int64_\" data-linktype=\"self-bookmark\">ToDouble(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Object_\" data-linktype=\"self-bookmark\">ToDouble(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_SByte_\" data-linktype=\"self-bookmark\">ToDouble(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Single_\" data-linktype=\"self-bookmark\">ToDouble(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_String_\" data-linktype=\"self-bookmark\">ToDouble(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_UInt16_\" data-linktype=\"self-bookmark\">ToDouble(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_UInt32_\" data-linktype=\"self-bookmark\">ToDouble(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_UInt64_\" data-linktype=\"self-bookmark\">ToDouble(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToDouble(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToDouble_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToDouble(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Boolean_\" data-linktype=\"self-bookmark\">ToInt16(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Byte_\" data-linktype=\"self-bookmark\">ToInt16(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Char_\" data-linktype=\"self-bookmark\">ToInt16(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_DateTime_\" data-linktype=\"self-bookmark\">ToInt16(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Decimal_\" data-linktype=\"self-bookmark\">ToInt16(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Double_\" data-linktype=\"self-bookmark\">ToInt16(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Int16_\" data-linktype=\"self-bookmark\">ToInt16(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 16-bit signed integer; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Int32_\" data-linktype=\"self-bookmark\">ToInt16(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Int64_\" data-linktype=\"self-bookmark\">ToInt16(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Object_\" data-linktype=\"self-bookmark\">ToInt16(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_SByte_\" data-linktype=\"self-bookmark\">ToInt16(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Single_\" data-linktype=\"self-bookmark\">ToInt16(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_String_\" data-linktype=\"self-bookmark\">ToInt16(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_UInt16_\" data-linktype=\"self-bookmark\">ToInt16(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_UInt32_\" data-linktype=\"self-bookmark\">ToInt16(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_UInt64_\" data-linktype=\"self-bookmark\">ToInt16(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToInt16(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToInt16(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt16_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ToInt16(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Boolean_\" data-linktype=\"self-bookmark\">ToInt32(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Byte_\" data-linktype=\"self-bookmark\">ToInt32(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Char_\" data-linktype=\"self-bookmark\">ToInt32(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_DateTime_\" data-linktype=\"self-bookmark\">ToInt32(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Decimal_\" data-linktype=\"self-bookmark\">ToInt32(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Double_\" data-linktype=\"self-bookmark\">ToInt32(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Int16_\" data-linktype=\"self-bookmark\">ToInt32(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Int32_\" data-linktype=\"self-bookmark\">ToInt32(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 32-bit signed integer; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Int64_\" data-linktype=\"self-bookmark\">ToInt32(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Object_\" data-linktype=\"self-bookmark\">ToInt32(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_SByte_\" data-linktype=\"self-bookmark\">ToInt32(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Single_\" data-linktype=\"self-bookmark\">ToInt32(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_String_\" data-linktype=\"self-bookmark\">ToInt32(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_UInt16_\" data-linktype=\"self-bookmark\">ToInt32(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_UInt32_\" data-linktype=\"self-bookmark\">ToInt32(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_UInt64_\" data-linktype=\"self-bookmark\">ToInt32(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToInt32(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToInt32(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt32_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ToInt32(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Boolean_\" data-linktype=\"self-bookmark\">ToInt64(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Byte_\" data-linktype=\"self-bookmark\">ToInt64(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Char_\" data-linktype=\"self-bookmark\">ToInt64(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_DateTime_\" data-linktype=\"self-bookmark\">ToInt64(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Decimal_\" data-linktype=\"self-bookmark\">ToInt64(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Double_\" data-linktype=\"self-bookmark\">ToInt64(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Int16_\" data-linktype=\"self-bookmark\">ToInt64(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Int32_\" data-linktype=\"self-bookmark\">ToInt64(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Int64_\" data-linktype=\"self-bookmark\">ToInt64(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 64-bit signed integer; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Object_\" data-linktype=\"self-bookmark\">ToInt64(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_SByte_\" data-linktype=\"self-bookmark\">ToInt64(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Single_\" data-linktype=\"self-bookmark\">ToInt64(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_String_\" data-linktype=\"self-bookmark\">ToInt64(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_UInt16_\" data-linktype=\"self-bookmark\">ToInt64(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_UInt32_\" data-linktype=\"self-bookmark\">ToInt64(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_UInt64_\" data-linktype=\"self-bookmark\">ToInt64(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToInt64(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToInt64(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToInt64_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ToInt64(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Boolean_\" data-linktype=\"self-bookmark\">ToSByte(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Byte_\" data-linktype=\"self-bookmark\">ToSByte(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Char_\" data-linktype=\"self-bookmark\">ToSByte(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_DateTime_\" data-linktype=\"self-bookmark\">ToSByte(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Decimal_\" data-linktype=\"self-bookmark\">ToSByte(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Double_\" data-linktype=\"self-bookmark\">ToSByte(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Int16_\" data-linktype=\"self-bookmark\">ToSByte(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Int32_\" data-linktype=\"self-bookmark\">ToSByte(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Int64_\" data-linktype=\"self-bookmark\">ToSByte(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Object_\" data-linktype=\"self-bookmark\">ToSByte(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_SByte_\" data-linktype=\"self-bookmark\">ToSByte(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 8-bit signed integer; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Single_\" data-linktype=\"self-bookmark\">ToSByte(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_String_\" data-linktype=\"self-bookmark\">ToSByte(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_UInt16_\" data-linktype=\"self-bookmark\">ToSByte(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_UInt32_\" data-linktype=\"self-bookmark\">ToSByte(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_UInt64_\" data-linktype=\"self-bookmark\">ToSByte(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToSByte(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToSByte(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSByte_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ToSByte(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Boolean_\" data-linktype=\"self-bookmark\">ToSingle(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Byte_\" data-linktype=\"self-bookmark\">ToSingle(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Char_\" data-linktype=\"self-bookmark\">ToSingle(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_DateTime_\" data-linktype=\"self-bookmark\">ToSingle(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Decimal_\" data-linktype=\"self-bookmark\">ToSingle(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Double_\" data-linktype=\"self-bookmark\">ToSingle(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Int16_\" data-linktype=\"self-bookmark\">ToSingle(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Int32_\" data-linktype=\"self-bookmark\">ToSingle(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Int64_\" data-linktype=\"self-bookmark\">ToSingle(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Object_\" data-linktype=\"self-bookmark\">ToSingle(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_SByte_\" data-linktype=\"self-bookmark\">ToSingle(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Single_\" data-linktype=\"self-bookmark\">ToSingle(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified single-precision floating-point number; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_String_\" data-linktype=\"self-bookmark\">ToSingle(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_UInt16_\" data-linktype=\"self-bookmark\">ToSingle(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_UInt32_\" data-linktype=\"self-bookmark\">ToSingle(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_UInt64_\" data-linktype=\"self-bookmark\">ToSingle(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToSingle(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToSingle_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToSingle(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Boolean_\" data-linktype=\"self-bookmark\">ToString(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Byte_\" data-linktype=\"self-bookmark\">ToString(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Char_\" data-linktype=\"self-bookmark\">ToString(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_DateTime_\" data-linktype=\"self-bookmark\">ToString(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Decimal_\" data-linktype=\"self-bookmark\">ToString(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Double_\" data-linktype=\"self-bookmark\">ToString(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int16_\" data-linktype=\"self-bookmark\">ToString(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int32_\" data-linktype=\"self-bookmark\">ToString(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int64_\" data-linktype=\"self-bookmark\">ToString(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Object_\" data-linktype=\"self-bookmark\">ToString(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_SByte_\" data-linktype=\"self-bookmark\">ToString(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Single_\" data-linktype=\"self-bookmark\">ToString(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified string instance; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_UInt16_\" data-linktype=\"self-bookmark\">ToString(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_UInt32_\" data-linktype=\"self-bookmark\">ToString(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_UInt64_\" data-linktype=\"self-bookmark\">ToString(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Boolean_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Boolean,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Byte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Byte,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Byte_System_Int32_\" data-linktype=\"self-bookmark\">ToString(Byte,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Char_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Char,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_DateTime_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(DateTime,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Decimal_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Decimal,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Double_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Double,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Int16,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int16_System_Int32_\" data-linktype=\"self-bookmark\">ToString(Int16,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Int32,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToString(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Int64,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Int64_System_Int32_\" data-linktype=\"self-bookmark\">ToString(Int64,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_SByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(SByte,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_Single_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(Single,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified string instance; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_UInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(UInt16,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_UInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(UInt32,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToString_System_UInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(UInt64,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Boolean_\" data-linktype=\"self-bookmark\">ToUInt16(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Byte_\" data-linktype=\"self-bookmark\">ToUInt16(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Char_\" data-linktype=\"self-bookmark\">ToUInt16(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_DateTime_\" data-linktype=\"self-bookmark\">ToUInt16(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Decimal_\" data-linktype=\"self-bookmark\">ToUInt16(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Double_\" data-linktype=\"self-bookmark\">ToUInt16(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Int16_\" data-linktype=\"self-bookmark\">ToUInt16(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Int32_\" data-linktype=\"self-bookmark\">ToUInt16(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Int64_\" data-linktype=\"self-bookmark\">ToUInt16(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Object_\" data-linktype=\"self-bookmark\">ToUInt16(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_SByte_\" data-linktype=\"self-bookmark\">ToUInt16(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Single_\" data-linktype=\"self-bookmark\">ToUInt16(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_String_\" data-linktype=\"self-bookmark\">ToUInt16(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_UInt16_\" data-linktype=\"self-bookmark\">ToUInt16(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_UInt32_\" data-linktype=\"self-bookmark\">ToUInt16(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_UInt64_\" data-linktype=\"self-bookmark\">ToUInt16(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToUInt16(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToUInt16(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt16_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ToUInt16(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Boolean_\" data-linktype=\"self-bookmark\">ToUInt32(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Byte_\" data-linktype=\"self-bookmark\">ToUInt32(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Char_\" data-linktype=\"self-bookmark\">ToUInt32(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_DateTime_\" data-linktype=\"self-bookmark\">ToUInt32(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Decimal_\" data-linktype=\"self-bookmark\">ToUInt32(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Double_\" data-linktype=\"self-bookmark\">ToUInt32(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Int16_\" data-linktype=\"self-bookmark\">ToUInt32(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Int32_\" data-linktype=\"self-bookmark\">ToUInt32(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Int64_\" data-linktype=\"self-bookmark\">ToUInt32(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Object_\" data-linktype=\"self-bookmark\">ToUInt32(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_SByte_\" data-linktype=\"self-bookmark\">ToUInt32(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Single_\" data-linktype=\"self-bookmark\">ToUInt32(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_String_\" data-linktype=\"self-bookmark\">ToUInt32(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_UInt16_\" data-linktype=\"self-bookmark\">ToUInt32(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_UInt32_\" data-linktype=\"self-bookmark\">ToUInt32(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_UInt64_\" data-linktype=\"self-bookmark\">ToUInt32(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToUInt32(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToUInt32(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt32_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ToUInt32(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Boolean_\" data-linktype=\"self-bookmark\">ToUInt64(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Byte_\" data-linktype=\"self-bookmark\">ToUInt64(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Char_\" data-linktype=\"self-bookmark\">ToUInt64(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_DateTime_\" data-linktype=\"self-bookmark\">ToUInt64(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Decimal_\" data-linktype=\"self-bookmark\">ToUInt64(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Double_\" data-linktype=\"self-bookmark\">ToUInt64(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Int16_\" data-linktype=\"self-bookmark\">ToUInt64(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Int32_\" data-linktype=\"self-bookmark\">ToUInt64(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Int64_\" data-linktype=\"self-bookmark\">ToUInt64(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Object_\" data-linktype=\"self-bookmark\">ToUInt64(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_SByte_\" data-linktype=\"self-bookmark\">ToUInt64(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Single_\" data-linktype=\"self-bookmark\">ToUInt64(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_String_\" data-linktype=\"self-bookmark\">ToUInt64(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_UInt16_\" data-linktype=\"self-bookmark\">ToUInt64(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_UInt32_\" data-linktype=\"self-bookmark\">ToUInt64(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_UInt64_\" data-linktype=\"self-bookmark\">ToUInt64(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_Object_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToUInt64(Object,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToUInt64(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Convert_ToUInt64_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ToUInt64(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_DBNull\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DBNull</div>        \r\n          </div>\r\n    \r\n            <p>A constant that represents a database column that is absent of data; that is, database null.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly object DBNull;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DBNull field is equivalent to <a class=\"xref\" href=\"system.dbnull#System_DBNull_Value\" data-linktype=\"relative-path\">System.DBNull.Value</a>, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.DBNull#1\">      Console.WriteLine(Convert.DBNull.Equals(DBNull.Value))\n      &#39; Displays True.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.DBNull#1\">      Console.WriteLine(Convert.DBNull.Equals(DBNull.Value));\n      // Displays True.\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ChangeType_System_Object_System_Type_\">\r\n    \r\n            <a id=\"System_Convert_ChangeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangeType(Object,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an object of the specified type and whose value is equivalent to the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ChangeType (object value, Type conversionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of object to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic), if <code>value</code> is <code>null</code> and <code>conversionType</code> is not a value type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code> and <code>conversionType</code> is a value type.  </p>\n<p> -or-  </p>\n<p> <code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in a format recognized by <code>conversionType</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is out of the range of <code>conversionType</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>conversionType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> is a general-purpose conversion method that converts the object specified by <code>value</code> to <code>conversionType</code>. The <code>value</code> parameter can be an object of any type, and <code>conversionType</code> can also be a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents any base or custom type. For the conversion to succeed, <code>value</code> must implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, because the method simply wraps a call to an appropriate <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> method. The method requires that conversion of <code>value</code> to <code>conversionType</code> be supported.  </p>\n<p> This method uses the current thread&#39;s culture for the conversion.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"convertchangetype#1\">using System;\n\npublic class ChangeTypeTest {\n    public static void Main() {\n\n        Double d = -2.345;\n        int i = (int)Convert.ChangeType(d, typeof(int));\n\n        Console.WriteLine(&quot;The double value {0} when converted to an int becomes {1}&quot;, d, i);\n\n        string s = &quot;12/12/98&quot;;\n        DateTime dt = (DateTime)Convert.ChangeType(s, typeof(DateTime));\n\n        Console.WriteLine(&quot;The string value {0} when converted to a Date becomes {1}&quot;, s, dt);        \n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"convertchangetype#1\">using namespace System;\n\nint main()\n{\n   Double d = -2.345;\n   int i =  *safe_cast&lt;Int32^&gt;(Convert::ChangeType( d, int::typeid ));\n   Console::WriteLine( &quot;The double value {0} when converted to an int becomes {1}&quot;, d, i );\n   String^ s = &quot;12/12/98&quot;;\n   DateTime dt =  *safe_cast&lt;DateTime^&gt;(Convert::ChangeType( s, DateTime::typeid ));\n   Console::WriteLine( &quot;The string value {0} when converted to a Date becomes {1}&quot;, s, dt );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"convertchangetype#1\">Imports System\n\nPublic Class ChangeTypeTest\n    \n    Public Shared Sub Main()\n        Dim d As [Double] = - 2.345\n        Dim i As Integer = CInt(Convert.ChangeType(d, GetType(Integer)))\n        \n        Console.WriteLine(&quot;The double value {0} when converted to an int becomes {1}&quot;, d, i)\n        Dim s As String = &quot;12/12/98&quot;\n        Dim dt As DateTime = CType(Convert.ChangeType(s, GetType(DateTime)), DateTime)\n        \n        Console.WriteLine(&quot;The string value {0} when converted to a Date becomes {1}&quot;, s, dt)\n    End Sub &#39;Main\nEnd Class &#39;ChangeTypeTest\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ChangeType_System_Object_System_TypeCode_\">\r\n    \r\n            <a id=\"System_Convert_ChangeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangeType(Object,TypeCode)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an object of the specified type whose value is equivalent to the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ChangeType (object value, TypeCode typeCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of object to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic), if <code>value</code> is <code>null</code> and <code>typeCode</code> is <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>, <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>, or <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code> and <code>typeCode</code> specifies a value type.  </p>\n<p> -or-  </p>\n<p> <code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in a format recognized by the <code>typeCode</code> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is out of the range of the <code>typeCode</code> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>typeCode</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ChangeType is a general-purpose conversion method that converts the object specified by <code>value</code> to a predefined type specified by <code>typeCode</code>. The <code>value</code> parameter can be an object of any type. For the conversion to succeed, <code>value</code> must implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, because the method simply wraps a call to an appropriate <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> method. The method also requires that conversion of <code>value</code> to <code>typeCode</code> be supported.  </p>\n<p> The ChangeType method does not support the conversion of <code>value</code> to a custom type. To perform such a conversion, call the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_System_Object_System_Type_\" data-linktype=\"relative-path\">ChangeType(Object,Type)</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates how to use the ChangeType method to change an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to the type specified by the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> parameter, if possible.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ChangeType#2\">using namespace System;\n\nvoid main()\n{\n   Double d = -2.345;\n   int i = (int) Convert::ChangeType(d, TypeCode::Int32);\n\n   Console::WriteLine(&quot;The Double {0} when converted to an Int32 is {1}&quot;, d, i);\n\n   String^ s = &quot;12/12/2009&quot;;\n   DateTime dt = (DateTime)Convert::ChangeType(s, DateTime::typeid);\n\n   Console::WriteLine(&quot;The String {0} when converted to a Date is {1}&quot;, s, dt);        \n}\n// The example displays the following output:\n//    The Double -2.345 when converted to an Int32 is -2\n//    The String 12/12/2009 when converted to a Date is 12/12/2009 12:00:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ChangeType#2\">Imports System\n\nPublic Class ChangeTypeTest\n    \n    Public Shared Sub Main()\n        Dim d As [Double] = - 2.345\n        Dim i As Integer = CInt(Convert.ChangeType(d, TypeCode.Int32))\n        \n        Console.WriteLine(&quot;The Double {0} when converted to an Int32 is {1}&quot;, d, i)\n        Dim s As String = &quot;12/12/2009&quot;\n        Dim dt As DateTime = CDate(Convert.ChangeType(s, TypeCode.DateTime))\n        \n        Console.WriteLine(&quot;The String {0} when converted to a Date is {1}&quot;, s, dt)\n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;    The Double -2.345 when converted to an Int32 is -2\n&#39;    The String 12/12/2009 when converted to a Date is 12/12/2009 12:00:00 AM\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ChangeType#2\">using System;\n\npublic class ChangeTypeTest {\n    public static void Main() {\n\n        Double d = -2.345;\n        int i = (int)Convert.ChangeType(d, TypeCode.Int32);\n\n        Console.WriteLine(&quot;The Double {0} when converted to an Int32 is {1}&quot;, d, i);\n\n        string s = &quot;12/12/2009&quot;;\n        DateTime dt = (DateTime)Convert.ChangeType(s, typeof(DateTime));\n\n        Console.WriteLine(&quot;The String {0} when converted to a Date is {1}&quot;, s, dt);        \n    }\n}\n// The example displays the following output:\n//    The Double -2.345 when converted to an Int32 is -2\n//    The String 12/12/2009 when converted to a Date is 12/12/2009 12:00:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ChangeType_System_Object_System_Type_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ChangeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangeType(Object,Type,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ChangeType (object value, Type conversionType, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>conversionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of object to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object whose type is <code>conversionType</code> and whose value is equivalent to <code>value</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, if the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of <code>value</code> and <code>conversionType</code> are equal.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic), if <code>value</code> is <code>null</code> and <code>conversionType</code> is not a value type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code> and <code>conversionType</code> is a value type.  </p>\n<p> -or-  </p>\n<p> <code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in a format for <code>conversionType</code> recognized by <code>provider</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is out of the range of <code>conversionType</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>conversionType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> is a general-purpose conversion method that converts the object specified by <code>value</code> to <code>conversionType</code>. The <code>value</code> parameter can be an object of any type, and <code>conversionType</code> can also be a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents any base or custom type. For the conversion to succeed, <code>value</code> must implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, because the method simply wraps a call to an appropriate <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> method. The method requires that conversion of <code>value</code> to <code>conversionType</code> be supported.  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> implementation. If <code>value</code> is a base data type, <code>provider</code> is used only for the following conversions:  </p>\n<ul>\n<li><p>Conversion from a number to a string, or from a string to a number. <code>provider</code> must be a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object, a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object, or a custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. However, because the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_System_Object_System_TypeCode_System_IFormatProvider_\" data-linktype=\"relative-path\">ChangeType(Object,TypeCode,IFormatProvider)</a> method performs the conversion using the default &quot;G&quot; format specifier, the <code>provider</code> parameter has no effect if <code>value</code> or the target type is an unsigned integer. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current thread culture is used.  </p>\n</li>\n<li><p>Conversion from a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to a string, or from a string to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value. <code>provider</code> must be a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> or <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current thread culture is used.  </p>\n<p>If <code>value</code> is an application-defined type, its <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> implementation may use the <code>provider</code> parameter.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Temperature</code> class that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ChangeType#3\">Imports System.Globalization\n\nPublic Class Temperature : Implements IConvertible\n   Private m_Temp As Decimal\n\n   Public Sub New(temperature As Decimal)\n      Me.m_Temp = temperature\n   End Sub\n   \n   Public ReadOnly Property Celsius() As Decimal\n      Get\n         Return Me.m_Temp\n      End Get   \n   End Property\n   \n   Public ReadOnly Property Kelvin() As Decimal\n      Get\n         Return Me.m_Temp + 273.15d   \n      End Get\n   End Property\n   \n   Public ReadOnly Property Fahrenheit() As Decimal\n      Get\n         Return Math.Round(CDec(Me.m_Temp * 9 / 5 + 32), 2)\n      End Get      \n   End Property\n   \n   Public Overrides Function ToString() As String\n      Return m_Temp.ToString(&quot;N2&quot;) &amp; &quot;&#176;C&quot;\n   End Function\n\n   &#39; IConvertible implementations.\n   Public Function GetTypeCode() As TypeCode _\n                   Implements IConvertible.GetTypeCode\n      Return TypeCode.Object\n   End Function\n   \n   Public Function ToBoolean(provider As IFormatProvider) As Boolean _\n                   Implements IConvertible.ToBoolean\n      If m_Temp = 0 Then\n         Return False\n      Else\n         Return True\n      End If\n   End Function \n   \n   Public Function ToByte(provider As IFormatProvider) As Byte _\n                   Implements IConvertible.ToByte\n      If m_Temp &lt; Byte.MinValue Or m_Temp &gt; Byte.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, _ \n                                                   Me.m_Temp)) \n      Else\n         Return Decimal.ToByte(Me.m_Temp)\n      End If       \n   End Function\n   \n   Public Function ToChar(provider As IFormatProvider) As Char _\n                   Implements IConvertible.ToChar\n      Throw New InvalidCastException(&quot;Temperature to Char conversion is not supported.&quot;)\n   End Function \n   \n   Public Function ToDateTime(provider As IFormatProvider) As Date _\n                   Implements IConvertible.ToDateTime\n      Throw New InvalidCastException(&quot;Temperature to DateTime conversion is not supported.&quot;)\n   End Function\n   \n   Public Function ToDecimal(provider As IFormatProvider) As Decimal _\n                   Implements IConvertible.ToDecimal\n      Return Me.m_Temp\n   End Function\n   \n   Public Function ToDouble(provider As IFormatProvider) As Double _\n                   Implements IConvertible.ToDouble\n      Return Decimal.ToDouble(Me.m_Temp)\n   End Function   \n   \n   Public Function ToInt16(provider As IFormatProvider) As Int16 _\n                   Implements IConvertible.ToInt16\n      If Me.m_Temp &lt; Int16.MinValue Or Me.m_Temp &gt; Int16.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToInt16(Me.m_Temp)   \n      End If\n   End Function\n   \n   Public Function ToInt32(provider As IFormatProvider) As Int32 _\n                   Implements IConvertible.ToInt32\n      If Me.m_Temp &lt; Int32.MinValue Or Me.m_Temp &gt; Int32.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToInt32(Me.m_Temp)\n      End If      \n   End Function\n   \n   Public Function ToInt64(provider As IFormatProvider) As Int64 _\n                   Implements IConvertible.ToInt64\n      If Me.m_Temp &lt; Int64.MinValue Or Me.m_Temp &gt; Int64.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int64 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToInt64(Me.m_Temp)\n      End If      \n   End Function\n   \n   Public Function ToSByte(provider As IFormatProvider) As SByte _\n                   Implements IConvertible.ToSByte\n      If Me.m_Temp &lt; SByte.MinValue Or Me.m_Temp &gt; SByte.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the SByte type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToSByte(Me.m_Temp)\n      End If      \n   End Function\n\n   Public Function ToSingle(provider As IFormatProvider) As Single _\n                   Implements IConvertible.ToSingle\n      Return Decimal.ToSingle(Me.m_Temp)\n   End Function\n\n   Public Overloads Function ToString(provider As IFormatProvider) As String _\n                   Implements IConvertible.ToString\n      Return m_Temp.ToString(&quot;N2&quot;, provider) &amp; &quot;&#176;C&quot;\n   End Function\n   \n   Public Function ToType(conversionType As Type, provider As IFormatProvider) As Object _\n                   Implements IConvertible.ToType\n      Select Case Type.GetTypeCode(conversionType)\n         Case TypeCode.Boolean \n            Return Me.ToBoolean(Nothing)\n         Case TypeCode.Byte\n            Return Me.ToByte(Nothing)\n         Case TypeCode.Char\n            Return Me.ToChar(Nothing)\n         Case TypeCode.DateTime\n            Return Me.ToDateTime(Nothing)\n         Case TypeCode.Decimal\n            Return Me.ToDecimal(Nothing)\n         Case TypeCode.Double\n            Return Me.ToDouble(Nothing)\n         Case TypeCode.Int16\n            Return Me.ToInt16(Nothing)\n         Case TypeCode.Int32\n            Return Me.ToInt32(Nothing)\n         Case TypeCode.Int64\n            Return Me.ToInt64(Nothing)\n         Case TypeCode.Object\n            If GetType(Temperature).Equals(conversionType) Then\n               Return Me\n            Else\n               Throw New InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, _\n                                                            conversionType.Name))\n            End If \n         Case TypeCode.SByte\n            Return Me.ToSByte(Nothing)\n         Case TypeCode.Single\n            Return Me.ToSingle(Nothing)\n         Case TypeCode.String\n            Return Me.ToString(provider)\n         Case TypeCode.UInt16\n            Return Me.ToUInt16(Nothing)\n         Case TypeCode.UInt32\n            Return Me.ToUInt32(Nothing)\n         Case TypeCode.UInt64\n            Return Me.ToUInt64(Nothing)   \n         Case Else\n            Throw New InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name))   \n      End Select\n   End Function\n   \n   Public Function ToUInt16(provider As IFormatProvider) As UInt16 _\n                   Implements IConvertible.ToUInt16\n      If Me.m_Temp &lt; UInt16.MinValue Or Me.m_Temp &gt; UInt16.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToUInt16(Me.m_Temp)\n      End If   \n   End Function\n\n   Public Function ToUInt32(provider As IFormatProvider) As UInt32 _\n                   Implements IConvertible.ToUInt32\n      If Me.m_Temp &lt; UInt32.MinValue Or Me.m_Temp &gt; UInt32.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt32 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToUInt32(Me.m_Temp)\n      End If   \n   End Function\n   \n   Public Function ToUInt64(provider As IFormatProvider) As UInt64 _\n                   Implements IConvertible.ToUInt64\n      If Me.m_Temp &lt; UInt64.MinValue Or Me.m_Temp &gt; UInt64.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt64 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToUInt64(Me.m_temp)\n      End If   \n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert.ChangeType#3\">using namespace System;\nusing namespace System::Globalization;\n\npublic ref class Temperature : IConvertible\n{\nprivate:\n   Decimal m_Temp;\n\npublic:\n   Temperature(Decimal temperature)\n   {\n      m_Temp = temperature;\n   }\n   \n   property Decimal Celsius {\n      Decimal get() { return m_Temp; }\n   }\n   \n   property Decimal Kelvin {\n      Decimal get() { return m_Temp + (Decimal) 273.15; }\n   }\n   \n   property Decimal Fahrenheit {\n      Decimal get() { return Math::Round((Decimal) (m_Temp * 9 / 5 + 32), 2); }\n   }\n   \n   virtual String^ ToString()\n   override {\n      return m_Temp.ToString(&quot;N2&quot;) + &quot;�C&quot;;\n   }\n\n   // IConvertible implementations.\n   virtual TypeCode GetTypeCode()\n   {\n      return TypeCode::Object;\n   }\n   \n   virtual bool ToBoolean(IFormatProvider^ provider) \n   {\n      if (m_Temp == 0)\n         return false;\n      else\n         return true;\n   } \n   \n   virtual Byte ToByte(IFormatProvider^ provider)\n   {\n      if (m_Temp &lt; Byte::MinValue || m_Temp &gt; Byte::MaxValue)\n         throw gcnew OverflowException(String::Format(&quot;{0} is out of range of the Byte type.&quot;, \n                                                   m_Temp));\n      else\n         return Decimal::ToByte(m_Temp);\n   }\n   \n   virtual Char ToChar(IFormatProvider^ provider)\n   {\n      throw gcnew InvalidCastException(&quot;Temperature to Char conversion is not supported.&quot;);\n   } \n   \n   virtual DateTime ToDateTime(IFormatProvider^ provider)\n   {\n      throw gcnew InvalidCastException(&quot;Temperature to DateTime conversion is not supported.&quot;);\n   }\n   \n   virtual Decimal ToDecimal(IFormatProvider^ provider)\n   {\n      return m_Temp;\n   }\n   \n   virtual Double ToDouble(IFormatProvider^ provider)\n   {\n      return Decimal::ToDouble(m_Temp);\n   }   \n   \n   virtual Int16 ToInt16(IFormatProvider^ provider)\n   {\n      if (m_Temp &lt; Int16::MinValue || m_Temp &gt; Int16::MaxValue)\n         throw gcnew OverflowException(String::Format(&quot;{0} is out of range of the Int16 type.&quot;,\n                                                   m_Temp));\n      else\n         return Decimal::ToInt16(m_Temp);\n   }\n   \n   virtual Int32 ToInt32(IFormatProvider^ provider)\n      {\n      if (m_Temp &lt; Int32::MinValue || m_Temp &gt; Int32::MaxValue)\n         throw gcnew OverflowException(String::Format(&quot;{0} is out of range of the Int32 type.&quot;,\n                                                   m_Temp));\n      else\n         return Decimal::ToInt32(m_Temp);\n   }\n   \n   virtual Int64 ToInt64(IFormatProvider^ provider)\n   {\n      if (m_Temp &lt; Int64::MinValue || m_Temp &gt; Int64::MaxValue)\n         throw gcnew OverflowException(String::Format(&quot;{0} is out of range of the Int64 type.&quot;,\n                                                   m_Temp));\n      else\n         return Decimal::ToInt64(m_Temp);\n   }\n   \n   virtual SByte ToSByte(IFormatProvider^ provider)\n   {\n      if (m_Temp &lt; SByte::MinValue || m_Temp &gt; SByte::MaxValue)\n         throw gcnew OverflowException(String::Format(&quot;{0} is out of range of the SByte type.&quot;,\n                                                   m_Temp));\n      else\n         return Decimal::ToSByte(m_Temp);\n   }\n\n   virtual Single ToSingle(IFormatProvider^ provider)\n   {\n      return Decimal::ToSingle(m_Temp);\n   }\n\n   virtual String^ ToString(IFormatProvider^ provider)\n   {\n      return m_Temp.ToString(&quot;N2&quot;, provider) + &quot;�C&quot;;\n   }\n   \n   virtual Object^ ToType(Type^ conversionType, IFormatProvider^ provider)\n   {\n      switch (Type::GetTypeCode(conversionType))\n      {\n      case TypeCode::Boolean: \n            return ToBoolean(nullptr);\n      case TypeCode::Byte:\n            return ToByte(nullptr);\n      case TypeCode::Char:\n            return ToChar(nullptr);\n      case TypeCode::DateTime:\n            return ToDateTime(nullptr);\n      case TypeCode::Decimal:\n            return ToDecimal(nullptr);\n      case TypeCode::Double:\n            return ToDouble(nullptr);\n      case TypeCode::Int16:\n            return ToInt16(nullptr);\n      case TypeCode::Int32:\n            return ToInt32(nullptr);\n      case TypeCode::Int64:\n            return ToInt64(nullptr);\n      case TypeCode::Object:\n            if (Temperature::typeid-&gt;Equals(conversionType))\n               return this;\n            else\n               throw gcnew InvalidCastException(String::Format(&quot;Conversion to a {0} is not supported.&quot;,\n                                                            conversionType-&gt;Name));\n      case TypeCode::SByte:\n            return ToSByte(nullptr);\n      case TypeCode::Single:\n            return ToSingle(nullptr);\n      case TypeCode::String:\n            return ToString(provider);\n      case TypeCode::UInt16:\n            return ToUInt16(nullptr);\n      case TypeCode::UInt32:\n            return ToUInt32(nullptr);\n      case TypeCode::UInt64:\n            return ToUInt64(nullptr);   \n         default:\n            throw gcnew InvalidCastException(String::Format(&quot;Conversion to {0} is not supported.&quot;, conversionType-&gt;Name));   \n      }\n   }\n   \n   virtual UInt16 ToUInt16(IFormatProvider^ provider)\n   {\n      if (m_Temp &lt; UInt16::MinValue || m_Temp &gt; UInt16::MaxValue)\n         throw gcnew OverflowException(String::Format(&quot;{0} is out of range of the UInt16 type.&quot;,\n                                                   m_Temp));\n      else\n         return Decimal::ToUInt16(m_Temp);\n   }\n\n   virtual UInt32 ToUInt32(IFormatProvider^ provider)\n   {\n      if (m_Temp &lt; UInt32::MinValue || m_Temp &gt; UInt32::MaxValue)\n         throw gcnew OverflowException(String::Format(&quot;{0} is out of range of the UInt32 type.&quot;,\n                                                   m_Temp));\n      else\n         return Decimal::ToUInt32(m_Temp);\n   }\n   \n   virtual UInt64 ToUInt64(IFormatProvider^ provider)\n   {\n      if (m_Temp &lt; UInt64::MinValue || m_Temp &gt; UInt64::MaxValue)\n         throw gcnew OverflowException(String::Format(&quot;{0} is out of range of the UInt64 type.&quot;,\n                                                   m_Temp));\n      else\n         return Decimal::ToUInt64(m_Temp);\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ChangeType#3\">using System;\nusing System.Globalization;\n\npublic class Temperature : IConvertible\n{\n   private decimal m_Temp;\n\n   public Temperature(decimal temperature)\n   {\n      this.m_Temp = temperature;\n   }\n   \n   public decimal Celsius\n   {\n      get { return this.m_Temp; }   \n   }\n   \n   public decimal Kelvin\n   {\n      get { return this.m_Temp + 273.15m; }    \n   }\n   \n   public decimal Fahrenheit\n   {\n      get { return Math.Round((decimal) (this.m_Temp * 9 / 5 + 32), 2); }\n   }\n   \n   public override string ToString()\n   {\n      return m_Temp.ToString(&quot;N2&quot;) + &quot;&#176;C&quot;;\n   }\n\n   // IConvertible implementations.\n   public TypeCode GetTypeCode()\n   {\n      return TypeCode.Object;\n   }\n   \n   public bool ToBoolean(IFormatProvider provider) \n   {\n      if (m_Temp == 0)\n         return false;\n      else\n         return true;\n   } \n   \n   public byte ToByte(IFormatProvider provider)\n   {\n      if (m_Temp &lt; Byte.MinValue || m_Temp &gt; Byte.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, \n                                                   this.m_Temp));\n      else\n         return Decimal.ToByte(this.m_Temp);\n   }\n   \n   public char ToChar(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Temperature to Char conversion is not supported.&quot;);\n   } \n   \n   public DateTime ToDateTime(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Temperature to DateTime conversion is not supported.&quot;);\n   }\n   \n   public decimal ToDecimal(IFormatProvider provider)\n   {\n      return this.m_Temp;\n   }\n   \n   public double ToDouble(IFormatProvider provider)\n   {\n      return Decimal.ToDouble(this.m_Temp);\n   }   \n   \n   public short ToInt16(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; Int16.MinValue || this.m_Temp &gt; Int16.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToInt16(this.m_Temp);\n   }\n   \n   public int ToInt32(IFormatProvider provider)\n      {\n      if (this.m_Temp &lt; Int32.MinValue || this.m_Temp &gt; Int32.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToInt32(this.m_Temp);\n   }\n   \n   public long ToInt64(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; Int64.MinValue || this.m_Temp &gt; Int64.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int64 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToInt64(this.m_Temp);\n   }\n   \n   public sbyte ToSByte(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; SByte.MinValue || this.m_Temp &gt; SByte.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the SByte type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToSByte(this.m_Temp);\n   }\n\n   public float ToSingle(IFormatProvider provider)\n   {\n      return Decimal.ToSingle(this.m_Temp);\n   }\n\n   public string ToString(IFormatProvider provider)\n   {\n      return m_Temp.ToString(&quot;N2&quot;, provider) + &quot;&#176;C&quot;;\n   }\n   \n   public object ToType(Type conversionType, IFormatProvider provider)\n   {\n      switch (Type.GetTypeCode(conversionType))\n      {\n         case TypeCode.Boolean: \n            return this.ToBoolean(null);\n         case TypeCode.Byte:\n            return this.ToByte(null);\n         case TypeCode.Char:\n            return this.ToChar(null);\n         case TypeCode.DateTime:\n            return this.ToDateTime(null);\n         case TypeCode.Decimal:\n            return this.ToDecimal(null);\n         case TypeCode.Double:\n            return this.ToDouble(null);\n         case TypeCode.Int16:\n            return this.ToInt16(null);\n         case TypeCode.Int32:\n            return this.ToInt32(null);\n         case TypeCode.Int64:\n            return this.ToInt64(null);\n         case TypeCode.Object:\n            if (typeof(Temperature).Equals(conversionType))\n               return this;\n            else\n               throw new InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;,\n                                                            conversionType.Name));\n         case TypeCode.SByte:\n            return this.ToSByte(null);\n         case TypeCode.Single:\n            return this.ToSingle(null);\n         case TypeCode.String:\n            return this.ToString(provider);\n         case TypeCode.UInt16:\n            return this.ToUInt16(null);\n         case TypeCode.UInt32:\n            return this.ToUInt32(null);\n         case TypeCode.UInt64:\n            return this.ToUInt64(null);   \n         default:\n            throw new InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name));   \n      }\n   }\n   \n   public ushort ToUInt16(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt16.MinValue || this.m_Temp &gt; UInt16.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToUInt16(this.m_Temp);\n   }\n\n   public uint ToUInt32(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt32.MinValue || this.m_Temp &gt; UInt32.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt32 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToUInt32(this.m_Temp);\n   }\n   \n   public ulong ToUInt64(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt64.MinValue || this.m_Temp &gt; UInt64.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt64 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToUInt64(this.m_Temp);\n   }\n}\n</code></pre><p> The following example creates an instance of the <code>Temperature</code> class and calls the ChangeType method to convert it to the basic numeric types supported by the .NET Framework and to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. It illustrates that the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method wraps a call to the source type&#39;s <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> implementation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ChangeType#4\">Module Example\n   Public Sub Main()\n      Dim cool As New Temperature(5)\n      Dim targetTypes() As Type = { GetType(SByte), GetType(Int16), GetType(Int32), _\n                                    GetType(Int64), GetType(Byte), GetType(UInt16), _\n                                    GetType(UInt32), GetType(UInt64), GetType(Decimal), _\n                                    GetType(Single), GetType(Double), GetType(String) }\n      Dim provider As New CultureInfo(&quot;fr-FR&quot;)\n      \n      For Each targetType As Type In targetTypes\n         Try\n            Dim value As Object = Convert.ChangeType(cool, targetType, provider)\n            Console.WriteLine(&quot;Converted {0} {1} to {2} {3}.&quot;, _\n                              cool.GetType().Name, cool.ToString(), _\n                              targetType.Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;Unsupported {0} --&gt; {1} conversion.&quot;, _\n                              cool.GetType().Name, targetType.Name)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is out of range of the {1} type.&quot;, _\n                              cool, targetType.Name)\n         End Try                     \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted Temperature 5.00&#176;C to SByte 5.\n&#39;       Converted Temperature 5.00&#176;C to Int16 5.\n&#39;       Converted Temperature 5.00&#176;C to Int32 5.\n&#39;       Converted Temperature 5.00&#176;C to Int64 5.\n&#39;       Converted Temperature 5.00&#176;C to Byte 5.\n&#39;       Converted Temperature 5.00&#176;C to UInt16 5.\n&#39;       Converted Temperature 5.00&#176;C to UInt32 5.\n&#39;       Converted Temperature 5.00&#176;C to UInt64 5.\n&#39;       Converted Temperature 5.00&#176;C to Decimal 5.\n&#39;       Converted Temperature 5.00&#176;C to Single 5.\n&#39;       Converted Temperature 5.00&#176;C to Double 5.\n&#39;       Converted Temperature 5.00&#176;C to String 5,00&#176;C.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert.ChangeType#4\">void main()\n{     \n   Temperature^ cool = gcnew Temperature(5);\n   array&lt;Type^&gt;^ targetTypes = gcnew array&lt;Type^&gt; { SByte::typeid, Int16::typeid, Int32::typeid,\n                                                    Int64::typeid, Byte::typeid, UInt16::typeid,\n                                                    UInt32::typeid, UInt64::typeid, Decimal::typeid,\n                                                    Single::typeid, Double::typeid, String::typeid };\n   CultureInfo^ provider = gcnew CultureInfo(&quot;fr-FR&quot;);\n      \n   for each (Type^ targetType in targetTypes)\n   {\n      try {\n         Object^ value = Convert::ChangeType(cool, targetType, provider);\n         Console::WriteLine(&quot;Converted {0} {1} to {2} {3}.&quot;,\n                           cool-&gt;GetType()-&gt;Name, cool-&gt;ToString(),\n                           targetType-&gt;Name, value);\n      }\n      catch (InvalidCastException^) {\n         Console::WriteLine(&quot;Unsupported {0} --&gt; {1} conversion.&quot;,\n                           cool-&gt;GetType()-&gt;Name, targetType-&gt;Name);\n      }                     \n      catch (OverflowException^) {\n         Console::WriteLine(&quot;{0} is out of range of the {1} type.&quot;,\n                           cool, targetType-&gt;Name);\n      }\n   }\n}\n// The example dosplays the following output:\n//       Converted Temperature 5.00�C to SByte 5.\n//       Converted Temperature 5.00�C to Int16 5.\n//       Converted Temperature 5.00�C to Int32 5.\n//       Converted Temperature 5.00�C to Int64 5.\n//       Converted Temperature 5.00�C to Byte 5.\n//       Converted Temperature 5.00�C to UInt16 5.\n//       Converted Temperature 5.00�C to UInt32 5.\n//       Converted Temperature 5.00�C to UInt64 5.\n//       Converted Temperature 5.00�C to Decimal 5.\n//       Converted Temperature 5.00�C to Single 5.\n//       Converted Temperature 5.00�C to Double 5.\n//       Converted Temperature 5.00�C to String 5,00�C.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ChangeType#4\">public class Example\n{\n   public static void Main()\n   {\n      Temperature cool = new Temperature(5);\n      Type[] targetTypes = { typeof(SByte), typeof(Int16), typeof(Int32),\n                             typeof(Int64), typeof(Byte), typeof(UInt16),\n                             typeof(UInt32), typeof(UInt64), typeof(Decimal),\n                             typeof(Single), typeof(Double), typeof(String) };\n      CultureInfo provider = new CultureInfo(&quot;fr-FR&quot;);\n      \n      foreach (Type targetType in targetTypes)\n      {\n         try {\n            object value = Convert.ChangeType(cool, targetType, provider);\n            Console.WriteLine(&quot;Converted {0} {1} to {2} {3}.&quot;,\n                              cool.GetType().Name, cool.ToString(),\n                              targetType.Name, value);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;Unsupported {0} --&gt; {1} conversion.&quot;,\n                              cool.GetType().Name, targetType.Name);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is out of range of the {1} type.&quot;,\n                              cool, targetType.Name);\n         }\n      }\n   }\n}\n// The example dosplays the following output:\n//       Converted Temperature 5.00&#176;C to SByte 5.\n//       Converted Temperature 5.00&#176;C to Int16 5.\n//       Converted Temperature 5.00&#176;C to Int32 5.\n//       Converted Temperature 5.00&#176;C to Int64 5.\n//       Converted Temperature 5.00&#176;C to Byte 5.\n//       Converted Temperature 5.00&#176;C to UInt16 5.\n//       Converted Temperature 5.00&#176;C to UInt32 5.\n//       Converted Temperature 5.00&#176;C to UInt64 5.\n//       Converted Temperature 5.00&#176;C to Decimal 5.\n//       Converted Temperature 5.00&#176;C to Single 5.\n//       Converted Temperature 5.00&#176;C to Double 5.\n//       Converted Temperature 5.00&#176;C to String 5,00&#176;C.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ChangeType_System_Object_System_TypeCode_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ChangeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangeType(Object,TypeCode,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object ChangeType (object value, TypeCode typeCode, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of object to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object whose underlying type is <code>typeCode</code> and whose value is equivalent to <code>value</code>.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic), if <code>value</code> is <code>null</code> and <code>typeCode</code> is <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>, <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>, or <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <code>null</code> and <code>typeCode</code> specifies a value type.  </p>\n<p> -or-  </p>\n<p> <code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in a format for the <code>typeCode</code> type recognized by <code>provider</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is out of the range of the <code>typeCode</code> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>typeCode</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ChangeType is a general-purpose conversion method that converts the object specified by <code>value</code> to a predefined type specified by <code>typeCode</code>. The <code>value</code> parameter can be an object of any type. For the conversion to succeed, <code>value</code> must implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, because the method simply wraps a call to an appropriate <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> method. The method also requires that conversion of <code>value</code> to <code>typeCode</code> be supported.  </p>\n<p> The ChangeType method does not support the conversion of <code>value</code> to a custom type. To perform such a conversion, call the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_System_Object_System_Type_System_IFormatProvider_\" data-linktype=\"relative-path\">ChangeType(Object,Type,IFormatProvider)</a> method.  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> implementation. If <code>value</code> is a base data type, <code>provider</code> is used only for the following conversions. If a <code>null</code><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> argument is passed to these methods, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current thread culture is used.  </p>\n<ul>\n<li><p>Conversion from a number to a string, or from a string to a number. <code>provider</code> must be a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object, a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object, or a custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. However, because the ChangeType method performs the conversion using the default &quot;G&quot; format specifier, the <code>provider</code> parameter has no effect if <code>value</code> or the target type is an unsigned integer.  </p>\n</li>\n<li><p>Conversion from a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to a string, or from a string to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value. <code>provider</code> must be a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> or <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.  </p>\n<p>If <code>value</code> is an application-defined type, its <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> implementation may use the <code>provider</code> parameter.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom format provider named <code>InterceptProvider</code> that indicates when its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method is called and returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the fr-FR culture and a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object for the en-US culture. This format provider is used in all calls to the ChangeType method. The example then creates an array with a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> and a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value and makes repeated calls to ChangeType with each value and each member of the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> enumeration. The example illustrates when the method uses the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter and also illustrates the use of the <code>provider</code> parameter to perform culture-sensitive formatting.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ChangeType#1\">using namespace System;\nusing namespace System::Globalization;\n\nref class InterceptProvider : IFormatProvider\n{\npublic: \n   virtual Object^ GetFormat(Type^ formatType) \n   {\n      CultureInfo^ culture;\n      if (formatType == NumberFormatInfo::typeid) {\n         Console::WriteLine(&quot;   Returning a fr-FR numeric format provider.&quot;);\n         \n         culture = gcnew CultureInfo(&quot;fr-FR&quot;);\n         return culture-&gt;NumberFormat;\n      }  \n      else if (formatType == DateTimeFormatInfo::typeid) {\n         Console::WriteLine(&quot;   Returning an en-US date/time format provider.&quot;);\n         culture = gcnew CultureInfo(&quot;en-US&quot;);\n         return culture-&gt;DateTimeFormat;\n      }\n      else {\n         Console::WriteLine(&quot;   Requesting a format provider of {0}.&quot;, formatType-&gt;Name);\n         return nullptr;\n      }\n   }\n};\n\nvoid main()\n{\n   array&lt;Object^&gt;^ values = gcnew array&lt;Object^&gt; { 103.5, gcnew DateTime(2010, 12, 26, 14, 34, 0) };\n   IFormatProvider^ provider = gcnew InterceptProvider();\n      \n   // Convert value to each of the types represented in TypeCode enum.\n   for each (Object^ value in values)\n   {\n      // Iterate types in TypeCode enum.\n      for each (TypeCode enumType in (array&lt;TypeCode&gt;^) Enum::GetValues(TypeCode::typeid))\n      {         \n         if (enumType == TypeCode::DBNull || enumType == TypeCode::Empty) continue;\n            \n         try {\n            Console::WriteLine(&quot;{0} ({1}) --&gt; {2} ({3}).&quot;, \n                              value, value-&gt;GetType()-&gt;Name,\n                              Convert::ChangeType(value, enumType, provider),\n                              enumType.ToString());\n         }\n         catch (InvalidCastException^ e) {\n            Console::WriteLine(&quot;Cannot convert a {0} to a {1}&quot;,\n                              value-&gt;GetType()-&gt;Name, enumType.ToString());\n         }                     \n         catch (OverflowException^ e) {\n            Console::WriteLine(&quot;Overflow: {0} is out of the range of a {1}&quot;,\n                              value, enumType.ToString());\n         }\n      }\n      Console::WriteLine();\n   }\n}\n// The example displays the following output:\n//    103.5 (Double) --&gt; 103.5 (Object).\n//    103.5 (Double) --&gt; True (Boolean).\n//    Cannot convert a Double to a Char\n//    103.5 (Double) --&gt; 104 (SByte).\n//    103.5 (Double) --&gt; 104 (Byte).\n//    103.5 (Double) --&gt; 104 (Int16).\n//    103.5 (Double) --&gt; 104 (UInt16).\n//    103.5 (Double) --&gt; 104 (Int32).\n//    103.5 (Double) --&gt; 104 (UInt32).\n//    103.5 (Double) --&gt; 104 (Int64).\n//    103.5 (Double) --&gt; 104 (UInt64).\n//    103.5 (Double) --&gt; 103.5 (Single).\n//    103.5 (Double) --&gt; 103.5 (Double).\n//    103.5 (Double) --&gt; 103.5 (Decimal).\n//    Cannot convert a Double to a DateTime\n//       Returning a fr-FR numeric format provider.\n//    103.5 (Double) --&gt; 103,5 (String).\n//    \n//    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (Object).\n//    Cannot convert a DateTime to a Boolean\n//    Cannot convert a DateTime to a Char\n//    Cannot convert a DateTime to a SByte\n//    Cannot convert a DateTime to a Byte\n//    Cannot convert a DateTime to a Int16\n//    Cannot convert a DateTime to a UInt16\n//    Cannot convert a DateTime to a Int32\n//    Cannot convert a DateTime to a UInt32\n//    Cannot convert a DateTime to a Int64\n//    Cannot convert a DateTime to a UInt64\n//    Cannot convert a DateTime to a Single\n//    Cannot convert a DateTime to a Double\n//    Cannot convert a DateTime to a Decimal\n//    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (DateTime).\n//       Returning an en-US date/time format provider.\n//    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (String).\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ChangeType#1\">Imports System.Globalization\n\nPublic Class InterceptProvider : Implements IFormatProvider\n   Public Function GetFormat(formatType As Type) As Object _\n          Implements IFormatProvider.GetFormat\n      If formatType.Equals(GetType(NumberFormatInfo)) Then\n         Console.WriteLine(&quot;   Returning a fr-FR numeric format provider.&quot;)\n         Return New CultureInfo(&quot;fr-FR&quot;).NumberFormat\n      ElseIf formatType.Equals(GetType(DateTimeFormatInfo)) Then\n         Console.WriteLine(&quot;   Returning an en-US date/time format provider.&quot;)\n         Return New CultureInfo(&quot;en-US&quot;).DateTimeFormat\n      Else\n         Console.WriteLine(&quot;   Requesting a format provider of {0}.&quot;, formatType.Name)\n         Return Nothing\n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim values() As Object = { 103.5r, #12/26/2010 2:34PM# }\n      Dim provider As New InterceptProvider()\n      \n      &#39; Convert value to each of the types represented in TypeCode enum.\n      For Each value As Object In values\n         &#39; Iterate types in TypeCode enum.\n         For Each enumType As TypeCode In DirectCast([Enum].GetValues(GetType(TypeCode)), TypeCode())         \n            If enumType = TypeCode.DbNull Or enumType = TypeCode.Empty Then Continue For\n            \n            Try\n               Console.WriteLine(&quot;{0} ({1}) --&gt; {2} ({3}).&quot;, _\n                                 value, value.GetType().Name, _\n                                 Convert.ChangeType(value, enumType, provider), _\n                                 enumType.ToString())\n            Catch e As InvalidCastException\n               Console.WriteLine(&quot;Cannot convert a {0} to a {1}&quot;, _\n                                 value.GetType().Name, enumType.ToString())\n            Catch e As OverflowException\n               Console.WriteLine(&quot;Overflow: {0} is out of the range of a {1}&quot;, _\n                                 value, enumType.ToString())\n            End Try\n         Next\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    103.5 (Double) --&gt; 103.5 (Object).\n&#39;    103.5 (Double) --&gt; True (Boolean).\n&#39;    Cannot convert a Double to a Char\n&#39;    103.5 (Double) --&gt; 104 (SByte).\n&#39;    103.5 (Double) --&gt; 104 (Byte).\n&#39;    103.5 (Double) --&gt; 104 (Int16).\n&#39;    103.5 (Double) --&gt; 104 (UInt16).\n&#39;    103.5 (Double) --&gt; 104 (Int32).\n&#39;    103.5 (Double) --&gt; 104 (UInt32).\n&#39;    103.5 (Double) --&gt; 104 (Int64).\n&#39;    103.5 (Double) --&gt; 104 (UInt64).\n&#39;    103.5 (Double) --&gt; 103.5 (Single).\n&#39;    103.5 (Double) --&gt; 103.5 (Double).\n&#39;    103.5 (Double) --&gt; 103.5 (Decimal).\n&#39;    Cannot convert a Double to a DateTime\n&#39;       Returning a fr-FR numeric format provider.\n&#39;    103.5 (Double) --&gt; 103,5 (String).\n&#39;    \n&#39;    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (Object).\n&#39;    Cannot convert a DateTime to a Boolean\n&#39;    Cannot convert a DateTime to a Char\n&#39;    Cannot convert a DateTime to a SByte\n&#39;    Cannot convert a DateTime to a Byte\n&#39;    Cannot convert a DateTime to a Int16\n&#39;    Cannot convert a DateTime to a UInt16\n&#39;    Cannot convert a DateTime to a Int32\n&#39;    Cannot convert a DateTime to a UInt32\n&#39;    Cannot convert a DateTime to a Int64\n&#39;    Cannot convert a DateTime to a UInt64\n&#39;    Cannot convert a DateTime to a Single\n&#39;    Cannot convert a DateTime to a Double\n&#39;    Cannot convert a DateTime to a Decimal\n&#39;    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (DateTime).\n&#39;       Returning an en-US date/time format provider.\n&#39;    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (String).\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ChangeType#1\">using System;\nusing System.Globalization;\n\npublic class InterceptProvider : IFormatProvider\n{\n   public object GetFormat(Type formatType) \n   {\n      if (formatType == typeof(NumberFormatInfo)) {\n         Console.WriteLine(&quot;   Returning a fr-FR numeric format provider.&quot;);\n         return new System.Globalization.CultureInfo(&quot;fr-FR&quot;).NumberFormat;\n      }   \n      else if (formatType == typeof(DateTimeFormatInfo)) {\n         Console.WriteLine(&quot;   Returning an en-US date/time format provider.&quot;);\n         return new System.Globalization.CultureInfo(&quot;en-US&quot;).DateTimeFormat;\n      }\n      else {\n         Console.WriteLine(&quot;   Requesting a format provider of {0}.&quot;, formatType.Name);\n         return null;\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      object[] values = { 103.5d, new DateTime(2010, 12, 26, 14, 34, 0) };\n      IFormatProvider provider = new InterceptProvider();\n      \n      // Convert value to each of the types represented in TypeCode enum.\n      foreach (object value in values)\n      {\n         // Iterate types in TypeCode enum.\n         foreach (TypeCode enumType in ((TypeCode[]) Enum.GetValues(typeof(TypeCode))))\n         {         \n            if (enumType == TypeCode.DBNull || enumType == TypeCode.Empty) continue;\n            \n            try {\n               Console.WriteLine(&quot;{0} ({1}) --&gt; {2} ({3}).&quot;, \n                                 value, value.GetType().Name,\n                                 Convert.ChangeType(value, enumType, provider),\n                                 enumType.ToString());\n            }\n            catch (InvalidCastException) {\n               Console.WriteLine(&quot;Cannot convert a {0} to a {1}&quot;,\n                                 value.GetType().Name, enumType.ToString());\n            }                     \n            catch (OverflowException) {\n               Console.WriteLine(&quot;Overflow: {0} is out of the range of a {1}&quot;,\n                                 value, enumType.ToString());\n            }\n         }\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//    103.5 (Double) --&gt; 103.5 (Object).\n//    103.5 (Double) --&gt; True (Boolean).\n//    Cannot convert a Double to a Char\n//    103.5 (Double) --&gt; 104 (SByte).\n//    103.5 (Double) --&gt; 104 (Byte).\n//    103.5 (Double) --&gt; 104 (Int16).\n//    103.5 (Double) --&gt; 104 (UInt16).\n//    103.5 (Double) --&gt; 104 (Int32).\n//    103.5 (Double) --&gt; 104 (UInt32).\n//    103.5 (Double) --&gt; 104 (Int64).\n//    103.5 (Double) --&gt; 104 (UInt64).\n//    103.5 (Double) --&gt; 103.5 (Single).\n//    103.5 (Double) --&gt; 103.5 (Double).\n//    103.5 (Double) --&gt; 103.5 (Decimal).\n//    Cannot convert a Double to a DateTime\n//       Returning a fr-FR numeric format provider.\n//    103.5 (Double) --&gt; 103,5 (String).\n//    \n//    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (Object).\n//    Cannot convert a DateTime to a Boolean\n//    Cannot convert a DateTime to a Char\n//    Cannot convert a DateTime to a SByte\n//    Cannot convert a DateTime to a Byte\n//    Cannot convert a DateTime to a Int16\n//    Cannot convert a DateTime to a UInt16\n//    Cannot convert a DateTime to a Int32\n//    Cannot convert a DateTime to a UInt32\n//    Cannot convert a DateTime to a Int64\n//    Cannot convert a DateTime to a UInt64\n//    Cannot convert a DateTime to a Single\n//    Cannot convert a DateTime to a Double\n//    Cannot convert a DateTime to a Decimal\n//    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (DateTime).\n//       Returning an en-US date/time format provider.\n//    12/26/2010 2:34:00 PM (DateTime) --&gt; 12/26/2010 2:34:00 PM (String).\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_FromBase64CharArray_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_FromBase64CharArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromBase64CharArray(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] FromBase64CharArray (char[] inArray, int offset, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A position within <code>inArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in <code>inArray</code> to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of 8-bit unsigned integers equivalent to <code>length</code> elements at position <code>offset</code> in <code>inArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>length</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>offset</code> plus <code>length</code> indicates a position not within <code>inArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>inArray</code>, ignoring white-space characters, is not zero or a multiple of 4.  </p>\n<p> -or-  </p>\n<p> The format of <code>inArray</code> is invalid. <code>inArray</code> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>inArray</code> is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters &quot;A&quot; to &quot;Z&quot;, lowercase characters &quot;a&quot; to &quot;z&quot;, numerals &quot;0&quot; to &quot;9&quot;, and the symbols &quot;+&quot; and &quot;/&quot;.  </p>\n<p> The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in <code>inArray</code> because all white-space characters are ignored.  </p>\n<p> The valueless character, &quot;=&quot;, is used for trailing padding. The end of <code>inArray</code> can consist of zero, one, or two padding characters.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The FromBase64CharArray method is designed to process a single character array that contains all the data to be decoded. To decode base-64 character data from a stream, use the <a class=\"xref\" href=\"system.security.cryptography.frombase64transform\" data-linktype=\"relative-path\">System.Security.Cryptography.FromBase64Transform</a> class.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the FromBase64CharArray method to decode UUencoded (base-64) data and save it as binary output.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert UUEncodeDecode functions#3\">      public void DecodeWithCharArray() {\n         System.IO.StreamReader inFile;    \n         char[] base64CharArray;\n\n         try {\n            inFile = new System.IO.StreamReader(inputFileName,\n                                    System.Text.Encoding.ASCII);\n            base64CharArray = new char[inFile.BaseStream.Length];\n            inFile.Read(base64CharArray, 0, (int)inFile.BaseStream.Length);\n            inFile.Close();\n         }\n         catch (System.Exception exp) {\n            // Error creating stream or reading from it.\n            System.Console.WriteLine(&quot;{0}&quot;, exp.Message);\n            return;\n         }\n\n         // Convert the Base64 UUEncoded input into binary output.\n         byte[] binaryData;\n         try {\n            binaryData = \n               System.Convert.FromBase64CharArray(base64CharArray,\n                                          0,\n                                          base64CharArray.Length);\n         }\n         catch ( System.ArgumentNullException ) {\n            System.Console.WriteLine(&quot;Base 64 character array is null.&quot;);\n            return;\n         }\n         catch ( System.FormatException ) {\n            System.Console.WriteLine(&quot;Base 64 Char Array length is not &quot; +\n               &quot;4 or is not an even multiple of 4.&quot; );\n            return;\n         }\n\n         // Write out the decoded data.\n         System.IO.FileStream outFile;\n         try {\n            outFile = new System.IO.FileStream(outputFileName,\n                                       System.IO.FileMode.Create,\n                                       System.IO.FileAccess.Write);\n            outFile.Write(binaryData, 0, binaryData.Length);\n            outFile.Close();\n         }\n         catch (System.Exception exp) {\n            // Error creating stream or writing to it.\n            System.Console.WriteLine(&quot;{0}&quot;, exp.Message);\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert UUEncodeDecode functions#3\">      Public Sub DecodeWithCharArray()\n         Dim inFile As System.IO.StreamReader\n         Dim base64CharArray() As Char\n\n         Try\n            inFile = New System.IO.StreamReader(inputFileName, _\n                                                System.Text.Encoding.ASCII)\n\n            ReDim base64CharArray(inFile.BaseStream.Length - 1)\n            inFile.Read(base64CharArray, 0, inFile.BaseStream.Length)\n            inFile.Close()\n         Catch exp As System.Exception\n            &#39; Error creating stream or reading from it.\n            System.Console.WriteLine(&quot;{0}&quot;, exp.Message)\n            Return\n         End Try\n\n         &#39; Convert the Base64 UUEncoded input into binary output.\n         Dim binaryData() As Byte\n         Try\n            binaryData = System.Convert.FromBase64CharArray(base64CharArray, 0, _\n                                                      base64CharArray.Length)\n         Catch exp As System.ArgumentNullException\n            System.Console.WriteLine(&quot;Base 64 character array is null.&quot;)\n            Return\n         Catch exp As System.FormatException\n            System.Console.WriteLine(&quot;Base 64 Char Array length is not &quot; + _\n                     &quot;4 or is not an even multiple of 4&quot;)\n            Return\n         End Try\n\n         &#39; Write out the decoded data.\n         Dim outFile As System.IO.FileStream\n         Try\n            outFile = New System.IO.FileStream(outputFileName, _\n                                               System.IO.FileMode.Create, _\n                                               System.IO.FileAccess.Write)\n            outFile.Write(binaryData, 0, binaryData.Length - 1)\n            outFile.Close()\n         Catch exp As System.Exception\n            &#39; Error creating stream or writing to it.\n            System.Console.WriteLine(&quot;{0}&quot;, exp.Message)\n         End Try\n      End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert UUEncodeDecode functions#3\">public:\n   void DecodeWithCharArray()\n   {\n      StreamReader^ inFile;\n      array&lt;Char&gt;^base64CharArray;\n      try\n      {\n         inFile = gcnew StreamReader( inputFileName,\n                                      Text::Encoding::ASCII );\n         base64CharArray = gcnew array&lt;Char&gt;((int)(inFile-&gt;BaseStream-&gt;Length));\n         inFile-&gt;Read( base64CharArray, 0, (int)inFile-&gt;BaseStream-&gt;Length );\n         inFile-&gt;Close();\n      }\n      catch ( Exception^ exp ) \n      {\n         \n         // Error creating stream or reading from it.\n         Console::WriteLine( &quot;{0}&quot;, exp-&gt;Message );\n         return;\n      }\n      \n      // Convert the Base64 UUEncoded input into binary output.\n      array&lt;Byte&gt;^binaryData;\n      try\n      {\n         binaryData = Convert::FromBase64CharArray( base64CharArray,\n                                                    0,\n                                                    base64CharArray-&gt;Length );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         Console::WriteLine( &quot;Base 64 character array is null.&quot; );\n         return;\n      }\n      catch ( FormatException^ ) \n      {\n         Console::WriteLine( &quot;Base 64 Char Array length is not &quot; +\n            &quot;4 or is not an even multiple of 4.&quot; );\n         return;\n      }\n      \n      // Write out the decoded data.\n      FileStream^ outFile;\n      try\n      {\n         outFile = gcnew FileStream( outputFileName,\n                                     FileMode::Create,\n                                     FileAccess::Write );\n         outFile-&gt;Write( binaryData, 0, binaryData-&gt;Length );\n         outFile-&gt;Close();\n      }\n      catch ( Exception^ exp ) \n      {\n         // Error creating stream or writing to it.\n         Console::WriteLine( &quot;{0}&quot;, exp-&gt;Message );\n      }\n   }\n</code></pre><p> The following example demonstrates the [ToBase64CharArray(Byte[], Int32, Int32, Char&lt;xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29&gt; and FromBase64CharArray methods. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits, &quot;A&quot;, &quot;A&quot;, &quot;E&quot;, and &quot;C&quot;, at the beginning of the output.  </p>\n<p> If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit &quot;/&quot; at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, &quot;w&quot;. The last two 6-bit values are padding and correspond to the valueless padding character, &quot;=&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"convert.tobase64chararray#1\">// This example demonstrates the Convert.ToBase64CharArray() and\n//                               Convert.FromBase64CharArray methods\nusing namespace System;\nbool ArraysAreEqual( array&lt;Byte&gt;^a1, array&lt;Byte&gt;^a2 );\nint main()\n{\n   array&lt;Byte&gt;^byteArray1 = gcnew array&lt;Byte&gt;(256);\n   array&lt;Byte&gt;^byteArray2 = gcnew array&lt;Byte&gt;(256);\n   array&lt;Char&gt;^charArray = gcnew array&lt;Char&gt;(352);\n   int charArrayLength;\n   String^ nl = Environment::NewLine;\n   String^ ruler1a = &quot;         1         2         3         4&quot;;\n   String^ ruler2a = &quot;1234567890123456789012345678901234567890&quot;;\n   String^ ruler3a = &quot;----+----+----+----+----+----+----+----+&quot;;\n   String^ ruler1b = &quot;         5         6         7      &quot;;\n   String^ ruler2b = &quot;123456789012345678901234567890123456&quot;;\n   String^ ruler3b = &quot;----+----+----+----+----+----+----+-&quot;;\n   String^ ruler = String::Concat( ruler1a, ruler1b, nl, ruler2a, ruler2b, nl, ruler3a, ruler3b );\n   \n   // 1) Initialize and display a Byte array of arbitrary data.\n   Console::WriteLine( &quot;1) Input: A Byte array of arbitrary data.{0}&quot;, nl );\n   for ( int x = 0; x &lt; byteArray1-&gt;Length; x++ )\n   {\n      byteArray1[ x ] = (Byte)x;\n      Console::Write( &quot;{0:X2} &quot;, byteArray1[ x ] );\n      if ( ((x + 1) % 20) == 0 )\n            Console::WriteLine();\n\n   }\n   Console::Write( &quot;{0}{0}&quot;, nl );\n   \n   // 2) Convert the input Byte array to a Char array, with newlines inserted.\n   charArrayLength = Convert::ToBase64CharArray( byteArray1, 0, byteArray1-&gt;Length, \n                                                 charArray, 0, \n                                                 Base64FormattingOptions::InsertLineBreaks );\n   Console::WriteLine( &quot;2) Convert the input Byte array to a Char array with newlines.&quot; );\n   Console::Write( &quot;   Output: A Char array (length = {0}). &quot;, charArrayLength );\n   Console::WriteLine( &quot;The elements of the array are:{0}&quot;, nl );\n   Console::WriteLine( ruler );\n   Console::WriteLine( gcnew String( charArray ) );\n   Console::WriteLine();\n   \n   // 3) Convert the Char array back to a Byte array.\n   Console::WriteLine( &quot;3) Convert the Char array to an output Byte array.&quot; );\n   byteArray2 = Convert::FromBase64CharArray( charArray, 0, charArrayLength );\n   \n   // 4) Are the input and output Byte arrays equivalent?\n   Console::WriteLine( &quot;4) The output Byte array is equal to the input Byte array: {0}&quot;, ArraysAreEqual( byteArray1, byteArray2 ) );\n}\n\nbool ArraysAreEqual( array&lt;Byte&gt;^a1, array&lt;Byte&gt;^a2 )\n{\n   if ( a1-&gt;Length != a2-&gt;Length )\n      return false;\n\n   for ( int i = 0; i &lt; a1-&gt;Length; i++ )\n      if ( a1[ i ] != a2[ i ] )\n            return false;\n\n   return true;\n}\n\n/*\nThis example produces the following results:\n\n1) Input: A Byte array of arbitrary data.\n\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\nB4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\nC8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\nDC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\nF0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n\n2) Convert the input Byte array to a Char array with newlines.\n   Output: A Char array (length = 352). The elements of the array are:\n\n         1         2         3         4         5         6         7\n1234567890123456789012345678901234567890123456789012345678901234567890123456\n----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\nAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\nOTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\ncnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\nq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n\n3) Convert the Char array to an output Byte array.\n4) The output Byte array is equal to the input Byte array: True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"convert.tobase64chararray#1\">&#39; This example demonstrates the Convert.ToBase64CharArray() and \n&#39;                               Convert.FromBase64CharArray methods\nClass Sample\n   Public Shared Sub Main()\n      Dim byteArray1(255) As Byte\n      Dim byteArray2(255) As Byte\n      Dim charArray(351) As Char\n      Dim charArrayLength As Integer\n      Dim nl As String = Environment.NewLine\n      \n      Dim ruler1a As String = &quot;         1         2         3         4&quot;\n      Dim ruler2a As String = &quot;1234567890123456789012345678901234567890&quot;\n      Dim ruler3a As String = &quot;----+----+----+----+----+----+----+----+&quot;\n      Dim ruler1b As String = &quot;         5         6         7      &quot;\n      Dim ruler2b As String = &quot;123456789012345678901234567890123456&quot;\n      Dim ruler3b As String = &quot;----+----+----+----+----+----+----+-&quot;\n      Dim ruler As String = String.Concat(ruler1a, ruler1b, nl, _\n                                          ruler2a, ruler2b, nl, _\n                                          ruler3a, ruler3b)\n\n      &#39; 1) Initialize and display a Byte array of arbitrary data.\n      Console.WriteLine(&quot;1) Input: A Byte array of arbitrary data.{0}&quot;, nl)\n      Dim x As Integer\n      For x = 0 To byteArray1.Length - 1\n         byteArray1(x) = CByte(x)\n         Console.Write(&quot;{0:X2} &quot;, byteArray1(x))\n         If(x + 1) Mod 20 = 0 Then\n            Console.WriteLine()\n         End If\n      Next x\n      Console.Write(&quot;{0}{0}&quot;, nl)\n      \n      &#39; 2) Convert the input Byte array to a Char array, with newlines inserted.\n      charArrayLength = Convert.ToBase64CharArray( _\n                                byteArray1, 0, byteArray1.Length, _\n                                charArray, 0, _\n                                Base64FormattingOptions.InsertLineBreaks)\n      Console.WriteLine(&quot;2) Convert the input Byte array to a Char array with newlines.&quot;)\n      Console.Write(&quot;   Output: A Char array (length = {0}). &quot;, charArrayLength)\n      Console.WriteLine(&quot;The elements of the array are:{0}&quot;, nl)\n      Console.WriteLine(ruler)\n      Console.WriteLine(New [String](charArray))\n      Console.WriteLine()\n      \n      &#39; 3) Convert the Char array back to a Byte array.\n      Console.WriteLine(&quot;3) Convert the Char array to an output Byte array.&quot;)\n      byteArray2 = Convert.FromBase64CharArray(charArray, 0, charArrayLength)\n      \n      &#39; 4) Are the input and output Byte arrays equivalent?\n      Console.WriteLine(&quot;4) The output Byte array is equal to the input Byte array: {0}&quot;, _\n                            ArraysAreEqual(byteArray1, byteArray2))\n   End Sub &#39;Main\n   \n   Public Shared Function ArraysAreEqual(a1() As Byte, a2() As Byte) As Boolean\n      If a1.Length &lt;&gt; a2.Length Then\n         Return False\n      End If\n      Dim i As Integer\n      For i = 0 To a1.Length - 1\n         If a1(i) &lt;&gt; a2(i) Then\n            Return False\n         End If\n      Next i\n      Return True\n   End Function &#39;ArraysAreEqual\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;1) Input: A Byte array of arbitrary data.\n&#39;\n&#39;00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n&#39;14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n&#39;28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n&#39;3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n&#39;50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n&#39;64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n&#39;78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n&#39;8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\n&#39;A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\n&#39;B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\n&#39;C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\n&#39;DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\n&#39;F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n&#39;\n&#39;2) Convert the input Byte array to a Char array with newlines.\n&#39;   Output: A Char array (length = 352). The elements of the array are:\n&#39;\n&#39;         1         2         3         4         5         6         7\n&#39;1234567890123456789012345678901234567890123456789012345678901234567890123456\n&#39;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\n&#39;AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\n&#39;OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\n&#39;cnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\n&#39;q6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n&#39;5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n&#39;\n&#39;3) Convert the Char array to an output Byte array.\n&#39;4) The output Byte array is equal to the input Byte array: True\n</code></pre><pre><code class=\"lang-cs\" name=\"convert.tobase64chararray#1\">// This example demonstrates the Convert.ToBase64CharArray() and\n//                               Convert.FromBase64CharArray methods\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    byte[] byteArray1 = new byte[256];\n    byte[] byteArray2 = new byte[256];\n    char[] charArray  = new char[352];\n    int charArrayLength;\n    string nl = Environment.NewLine;\n\n    string ruler1a = &quot;         1         2         3         4&quot;;\n    string ruler2a = &quot;1234567890123456789012345678901234567890&quot;;\n    string ruler3a = &quot;----+----+----+----+----+----+----+----+&quot;;\n    string ruler1b = &quot;         5         6         7      &quot;;\n    string ruler2b = &quot;123456789012345678901234567890123456&quot;;\n    string ruler3b = &quot;----+----+----+----+----+----+----+-&quot;;\n    string ruler   = String.Concat(ruler1a, ruler1b, nl, \n                                   ruler2a, ruler2b, nl,\n                                   ruler3a, ruler3b);\n\n// 1) Initialize and display a Byte array of arbitrary data.\n    Console.WriteLine(&quot;1) Input: A Byte array of arbitrary data.{0}&quot;, nl);\n    for (int x = 0; x &lt; byteArray1.Length; x++)\n    {\n    byteArray1[x] = (byte)x;\n    Console.Write(&quot;{0:X2} &quot;, byteArray1[x]);\n    if (((x+1)%20) == 0) Console.WriteLine();\n    }\n    Console.Write(&quot;{0}{0}&quot;, nl);\n\n// 2) Convert the input Byte array to a Char array, with newlines inserted.\n    charArrayLength = \n        Convert.ToBase64CharArray(byteArray1, 0, byteArray1.Length, \n                                   charArray, 0, Base64FormattingOptions.InsertLineBreaks);\n    Console.WriteLine(&quot;2) Convert the input Byte array to a Char array with newlines.&quot;);\n    Console.Write(&quot;   Output: A Char array (length = {0}). &quot;, charArrayLength);\n    Console.WriteLine(&quot;The elements of the array are:{0}&quot;, nl);\n    Console.WriteLine(ruler);\n    Console.WriteLine(new String(charArray));\n    Console.WriteLine();\n\n// 3) Convert the Char array back to a Byte array.\n    Console.WriteLine(&quot;3) Convert the Char array to an output Byte array.&quot;);\n    byteArray2 = Convert.FromBase64CharArray(charArray, 0, charArrayLength);\n\n// 4) Are the input and output Byte arrays equivalent?\n    Console.WriteLine(&quot;4) The output Byte array is equal to the input Byte array: {0}&quot;, \n                      ArraysAreEqual(byteArray1, byteArray2));\n    }\n\n    public static bool ArraysAreEqual(byte[] a1, byte[] a2)\n    {\n    if (a1.Length != a2.Length) return false;\n    for (int i = 0; i &lt; a1.Length; i++)\n        if (a1[i] != a2[i]) return false;\n    return true;\n    }\n}\n/*\nThis example produces the following results:\n\n1) Input: A Byte array of arbitrary data.\n\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\nB4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\nC8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\nDC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\nF0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n\n2) Convert the input Byte array to a Char array with newlines.\n   Output: A Char array (length = 352). The elements of the array are:\n\n         1         2         3         4         5         6         7\n1234567890123456789012345678901234567890123456789012345678901234567890123456\n----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\nAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\nOTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\ncnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\nq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n\n3) Convert the Char array to an output Byte array.\n4) The output Byte array is equal to the input Byte array: True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_FromBase64String_System_String_\">\r\n    \r\n            <a id=\"System_Convert_FromBase64String_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromBase64String(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] FromBase64String (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of 8-bit unsigned integers that is equivalent to <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>s</code>, ignoring white-space characters, is not zero or a multiple of 4.  </p>\n<p> -or-  </p>\n<p> The format of <code>s</code> is invalid. <code>s</code> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>s</code> is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters &quot;A&quot; to &quot;Z&quot;, lowercase characters &quot;a&quot; to &quot;z&quot;, numerals &quot;0&quot; to &quot;9&quot;, and the symbols &quot;+&quot; and &quot;/&quot;.  </p>\n<p> The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in <code>s</code> because all white-space characters are ignored.  </p>\n<p> The valueless character, &quot;=&quot;, is used for trailing padding. The end of <code>s</code> can consist of zero, one, or two padding characters.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The FromBase64Stringmethod is designed to process a single string that contains all the data to be decoded. To decode base-64 character data from a stream, use the <a class=\"xref\" href=\"system.security.cryptography.frombase64transform\" data-linktype=\"relative-path\">System.Security.Cryptography.FromBase64Transform</a> class.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the [ToBase64String(Byte&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt; method to convert a byte array to a UUencoded (base-64) string, and then calls the FromBase64String method to restore the original byte array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToBase64String#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n       // Define a byte array.\n       byte[] bytes = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n       Console.WriteLine(&quot;The byte array: &quot;);\n       Console.WriteLine(&quot;   {0}<br>&quot;, BitConverter.ToString(bytes));\n       \n       // Convert the array to a base 64 sring.\n       String s = Convert.ToBase64String(bytes);\n       Console.WriteLine(&quot;The base 64 string:<br>   {0}<br>&quot;, s);\n       \n       // Restore the byte array.\n       byte[] newBytes = Convert.FromBase64String(s);\n       Console.WriteLine(&quot;The restored byte array: &quot;);\n       Console.WriteLine(&quot;   {0}<br>&quot;, BitConverter.ToString(newBytes));\n   }\n}\n// The example displays the following output:\n//     The byte array:\n//        02-04-06-08-0A-0C-0E-10-12-14\n//     \n//     The base 64 string:\n//        AgQGCAoMDhASFA==\n//     \n//     The restored byte array:\n//        02-04-06-08-0A-0C-0E-10-12-14\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBase64String#1\">Module Example\n   Public Sub Main()\n       &#39; Define a byte array.\n       Dim bytes() As Byte = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n       Console.WriteLine(&quot;The byte array: &quot;)\n       Console.WriteLine(&quot;   {0}&quot;, BitConverter.ToString(bytes))\n       Console.WriteLine()\n       \n       &#39; Convert the array to a base 64 sring.\n       Dim s As String = Convert.ToBase64String(bytes)\n       Console.WriteLine(&quot;The base 64 string:{1}   {0}{1}&quot;, \n                         s, vbCrLf)\n       \n       &#39; Restore the byte array.\n       Dim newBytes() As Byte = Convert.FromBase64String(s)\n       Console.WriteLine(&quot;The restored byte array: &quot;)\n       Console.WriteLine(&quot;   {0}&quot;, BitConverter.ToString(newBytes))\n       Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The byte array:\n&#39;        02-04-06-08-0A-0C-0E-10-12-14\n&#39;     \n&#39;     The base 64 string:\n&#39;        AgQGCAoMDhASFA==\n&#39;     \n&#39;     The restored byte array:\n&#39;        02-04-06-08-0A-0C-0E-10-12-14\n</code></pre><p> The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Int32_\" data-linktype=\"relative-path\">System.BitConverter.GetBytes(Int32)</a> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <a class=\"xref\" href=\"system.array#System_Array_Copy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_\" data-linktype=\"relative-path\">System.Array.Copy(Array,Int32,Array,Int32,Int32)</a> method. This buffer is then passed to the [ToBase64String(Byte&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt; method to create a UUencoded (base-64) string.  It then calls the FromBase64String method to decode the UUencoded string, and calls the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToBase64String#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define an array of 20 elements and display it.\n      int[] arr = new int[20]; \n      int value = 1;\n      for (int ctr = 0; ctr &lt;= arr.GetUpperBound(0); ctr++) {\n         arr[ctr] = value;\n         value = value * 2 + 1;\n      }\n      DisplayArray(arr);\n\n      // Convert the array of integers to a byte array.\n      byte[] bytes = new byte[arr.Length * 4];\n      for (int ctr = 0; ctr &lt; arr.Length; ctr++) {\n         Array.Copy(BitConverter.GetBytes(arr[ctr]), 0, \n                    bytes, ctr * 4, 4);\n      }\n         \n      // Encode the byte array using Base64 encoding\n      String base64 = Convert.ToBase64String(bytes);\n      Console.WriteLine(&quot;The encoded string: &quot;);\n      for (int ctr = 0; ctr &lt;= base64.Length / 50; ctr++) \n         Console.WriteLine(base64.Substring(ctr * 50, \n                                            ctr * 50 + 50 &lt;= base64.Length \n                                               ? 50 : base64.Length - ctr * 50));\n      Console.WriteLine();\n      \n      // Convert the string back to a byte array.\n      byte[] newBytes = Convert.FromBase64String(base64);\n\n      // Convert the byte array back to an integer array.\n      int[] newArr = new int[newBytes.Length/4];\n      for (int ctr = 0; ctr &lt; newBytes.Length / 4; ctr ++)\n         newArr[ctr] = BitConverter.ToInt32(newBytes, ctr * 4);\n         \n      DisplayArray(newArr);\n   }\n\n   private static void DisplayArray(Array arr)\n   {\n      Console.WriteLine(&quot;The array:&quot;);\n      Console.Write(&quot;{ &quot;);\n      for (int ctr = 0; ctr &lt; arr.GetUpperBound(0); ctr++) {\n         Console.Write(&quot;{0}, &quot;, arr.GetValue(ctr));\n         if ((ctr + 1) % 10 == 0) \n            Console.Write(&quot;<br>  &quot;);\n      }\n      Console.WriteLine(&quot;{0} {1}&quot;, arr.GetValue(arr.GetUpperBound(0)), &quot;}&quot;);\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n// The array:\n// { 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023,\n//   2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575 }\n// \n// The encoded string:\n// AQAAAAMAAAAHAAAADwAAAB8AAAA/AAAAfwAAAP8AAAD/AQAA/w\n// MAAP8HAAD/DwAA/x8AAP8/AAD/fwAA//8AAP//AQD//wMA//8H\n// \n// The array:\n// { 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023,\n//   2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575 }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBase64String#2\">Module Example\n   Public Sub Main()\n      &#39; Define an array of 20 elements and display it.\n      Dim arr(19) As Integer \n      Dim value As Integer = 1\n      For ctr As Integer = 0 To arr.GetUpperBound(0)\n         arr(ctr) = value\n         value = value * 2 + 1\n      Next\n      DisplayArray(arr)\n\n      &#39; Convert the array of integers to a byte array.\n      Dim bytes(arr.Length * 4 - 1) As Byte \n      For ctr As Integer = 0 To arr.Length - 1\n         Array.Copy(BitConverter.GetBytes(arr(ctr)), 0, \n                    bytes, ctr * 4, 4)\n      Next\n         \n      &#39; Encode the byte array using Base64 encoding\n      Dim base64 As String = Convert.ToBase64String(bytes)\n      Console.WriteLine(&quot;The encoded string: &quot;)\n      For ctr As Integer = 0 To base64.Length \\ 50 - 1 \n         Console.WriteLine(base64.Substring(ctr * 50, \n                                            If(ctr * 50 + 50 &lt;= base64.Length, \n                                               50, base64.Length - ctr * 50)))\n      Next\n      Console.WriteLine()\n      \n      &#39; Convert the string back to a byte array.\n      Dim newBytes() As Byte = Convert.FromBase64String(base64)\n\n      &#39; Convert the byte array back to an integer array.\n      Dim newArr(newBytes.Length\\4 - 1) As Integer\n      For ctr As Integer = 0 To newBytes.Length \\ 4 - 1\n         newArr(ctr) = BitConverter.ToInt32(newBytes, ctr * 4)\n      Next   \n      DisplayArray(newArr)\n   End Sub\n\n   Private Sub DisplayArray(arr As Array)\n      Console.WriteLine(&quot;The array:&quot;)\n      Console.Write(&quot;{ &quot;)\n      For ctr As Integer = 0 To arr.GetUpperBound(0) - 1\n         Console.Write(&quot;{0}, &quot;, arr.GetValue(ctr))\n         If (ctr + 1) Mod 10 = 0 Then Console.Write(&quot;{0}  &quot;, vbCrLf)\n      Next\n      Console.WriteLine(&quot;{0} {1}&quot;, arr.GetValue(arr.GetUpperBound(0)), &quot;}&quot;)\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The array:\n&#39;     { 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023,\n&#39;       2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575 }\n&#39;     \n&#39;     The encoded string:\n&#39;     AQAAAAMAAAAHAAAADwAAAB8AAAA/AAAAfwAAAP8AAAD/AQAA/w\n&#39;     MAAP8HAAD/DwAA/x8AAP8/AAD/fwAA//8AAP//AQD//wMA//8H\n&#39;     \n&#39;     The array:\n&#39;     { 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023,\n&#39;       2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575 }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_GetTypeCode_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_GetTypeCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeCode(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TypeCode GetTypeCode (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for <code>value</code>, or <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_IsDBNull_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_IsDBNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDBNull(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an indication whether the specified object is of type <a class=\"xref\" href=\"system.dbnull\" data-linktype=\"relative-path\">DBNull</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDBNull (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is of type <a class=\"xref\" href=\"system.dbnull\" data-linktype=\"relative-path\">DBNull</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsDBNull method tests whether the <code>value</code> parameter is equal to <a class=\"xref\" href=\"system.dbnull#System_DBNull_Value\" data-linktype=\"relative-path\">System.DBNull.Value</a>. It is equivalent to the following code:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.IsDBNull#1\">return DBNull.Value.Equals(value);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.IsDBNull#1\">Return DBNull.Value.Equals(value)\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> <a class=\"xref\" href=\"system.dbnull#System_DBNull_Value\" data-linktype=\"relative-path\">System.DBNull.Value</a> is used to indicate a value that is missing. It is not equivalent to <code>null</code> or to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. Therefore, code such as <code>Convert.IsDBNull(null)</code> in C# or <code>Convert.IsDBNull(Nothing)</code> in Visual Basic returns<code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> object to retrieve survey data from a database. It assigns each row&#39;s field values to an array, and then passes each array element to the IsDBNull method. If the method returns <code>true</code>, the example assigns the string &quot;NA&quot; to the array element. The array is then added to the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_Rows_\" data-linktype=\"relative-path\">Rows</a> collection of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">System.Windows.Forms.DataGridView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.IsDBNull#2\">private void Form1_Load(object sender, EventArgs e)\n{\n   // Define ADO.NET objects.\n   SqlConnection conn = new SqlConnection(connectionString);\n   SqlCommand cmd = new SqlCommand();\n   SqlDataReader dr;\n\n   // Open connection, and retrieve dataset.\n   conn.Open();\n\n   // Define Command object.\n   cmd.CommandText = &quot;Select * From Responses&quot;;\n   cmd.CommandType = CommandType.Text;\n   cmd.Connection = conn;\n\n   // Retrieve data reader.\n   dr = cmd.ExecuteReader();\n\n   int fieldCount = dr.FieldCount;\n   object[] fieldValues = new object[fieldCount];\n   string[] headers = new string[fieldCount];\n    \n   // Get names of fields.\n   for (int ctr = 0; ctr &lt; fieldCount; ctr++)\n      headers[ctr] = dr.GetName(ctr);\n\n   // Set up data grid.\n   this.grid.ColumnCount = fieldCount;\n\n   this.grid.ColumnHeadersDefaultCellStyle.BackColor = Color.Navy;\n   this.grid.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;\n   this.grid.ColumnHeadersDefaultCellStyle.Font = new Font(this.grid.Font, FontStyle.Bold);\n\n   this.grid.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders;\n   this.grid.ColumnHeadersBorderStyle = DataGridViewHeaderBorderStyle.Single;\n   this.grid.CellBorderStyle = DataGridViewCellBorderStyle.Single;\n   this.grid.GridColor = Color.Black;\n   this.grid.RowHeadersVisible = true;\n\n   for (int columnNumber = 0; columnNumber &lt; headers.Length;  columnNumber++)\n      this.grid.Columns[columnNumber].Name = headers[columnNumber];\n\n   // Get data, replace missing values with &quot;NA&quot;, and display it.\n   while (dr.Read())\n   {\n      dr.GetValues(fieldValues);\n\n      for (int fieldCounter = 0; fieldCounter &lt; fieldCount; fieldCounter++)\n      {\n         if (Convert.IsDBNull(fieldValues[fieldCounter]))\n            fieldValues[fieldCounter] = &quot;NA&quot;;\n      }\n      grid.Rows.Add(fieldValues);\n   }\n   dr.Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.IsDBNull#2\">Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load\n   &#39; Define ADO.NET objects.\n   Dim conn As New SqlConnection(connectionString)\n   Dim cmd As New SqlCommand\n   Dim dr As SqlDataReader\n\n   &#39; Open connection, and retrieve dataset.\n   conn.Open()\n\n   &#39; Define Command object.\n   cmd.CommandText = &quot;Select * From Responses&quot;\n   cmd.CommandType = CommandType.Text\n   cmd.Connection = conn\n\n   &#39; Retrieve data reader.\n   dr = cmd.ExecuteReader()\n\n   Dim fieldCount As Integer = dr.FieldCount\n   Dim fieldValues(fieldCount - 1) As Object\n   Dim headers(fieldCount - 1) As String\n\n   &#39; Get names of fields.\n   For ctr As Integer = 0 To fieldCount - 1\n      headers(ctr) = dr.GetName(ctr)\n   Next\n\n   &#39; Set up data grid.\n   grid.ColumnCount = fieldCount\n\n   With grid.ColumnHeadersDefaultCellStyle\n      .BackColor = Color.Navy\n      .ForeColor = Color.White\n      .Font = New Font(grid.Font, FontStyle.Bold)\n   End With\n\n   With grid\n      .AutoSizeRowsMode = _\n          DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders\n      .ColumnHeadersBorderStyle = DataGridViewHeaderBorderStyle.Single\n      .CellBorderStyle = DataGridViewCellBorderStyle.Single\n      .GridColor = Color.Black\n      .RowHeadersVisible = True\n\n      For columnNumber As Integer = 0 To headers.Length - 1\n         .Columns(columnNumber).Name = headers(columnNumber)\n      Next\n   End With\n\n   &#39; Get data, replace missing values with &quot;NA&quot;, and display it.\n   Do While dr.Read()\n      dr.GetValues(fieldValues)\n\n      For fieldCounter As Integer = 0 To fieldCount - 1\n         If Convert.IsDBNull(fieldValues(fieldCounter)) Then\n            fieldValues(fieldCounter) = &quot;NA&quot;\n         End If\n      Next\n      grid.Rows.Add(fieldValues)\n   Loop\n   dr.Close()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBase64CharArray_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToBase64CharArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBase64CharArray(Byte[],Int32,Int32,Char[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An input array of 8-bit unsigned integers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetIn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A position within <code>inArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements of <code>inArray</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An output array of Unicode characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetOut</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A position within <code>outArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer containing the number of bytes in <code>outArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inArray</code> or <code>outArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The subset of <code>length</code> elements of <code>inArray</code> starting at position <code>offsetIn</code>, are taken as a numeric value and converted to a subset of elements in <code>outArray</code> starting at position <code>offsetOut</code>. The return value indicates the number of converted elements in <code>outArray</code>. The subset of <code>outArray</code> consists of base-64 digits.  </p>\n<p> The base-64 digits in ascending order from zero are the uppercase characters &quot;A&quot; to &quot;Z&quot;, the lowercase characters &quot;a&quot; to &quot;z&quot;, the numerals &quot;0&quot; to &quot;9&quot;, and the symbols &quot;+&quot; and &quot;/&quot;. The valueless character, &quot;=&quot;, is used for trailing padding.  </p>\n<p> The <code>offset</code> and <code>length</code> parameters are 32-bit signed numbers. The <code>offsetIn</code> and <code>offsetOut</code> parameters are zero-based array positions.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The ToBase64CharArraymethod is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <a class=\"xref\" href=\"system.security.cryptography.tobase64transform\" data-linktype=\"relative-path\">System.Security.Cryptography.ToBase64Transform</a> class.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates using the ToBase64CharArray method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert UUEncodeDecode functions#2\">      public void EncodeWithCharArray() {\n         System.IO.FileStream inFile;    \n         byte[]             binaryData;\n\n         try {\n            inFile = new System.IO.FileStream(inputFileName,\n                                       System.IO.FileMode.Open,\n                                      System.IO.FileAccess.Read);\n            binaryData = new Byte[inFile.Length];\n            long bytesRead = inFile.Read(binaryData, 0,\n                                 (int) inFile.Length);\n            inFile.Close();\n         }\n         catch (System.Exception exp) {\n            // Error creating stream or reading from it.\n            System.Console.WriteLine(&quot;{0}&quot;, exp.Message);\n            return;\n         }\n\n         // Convert the binary input into Base64 UUEncoded output.\n         // Each 3 byte sequence in the source data becomes a 4 byte\n         // sequence in the character array. \n         long arrayLength = (long) ((4.0d/3.0d) * binaryData.Length);\n         \n         // If array length is not divisible by 4, go up to the next\n         // multiple of 4.\n         if (arrayLength % 4 != 0) {\n            arrayLength += 4 - arrayLength % 4;\n         }\n         \n         char[] base64CharArray = new char[arrayLength];\n         try {\n            System.Convert.ToBase64CharArray(binaryData, \n                                     0,\n                                     binaryData.Length,\n                                     base64CharArray,\n                                     0);\n         }\n         catch (System.ArgumentNullException) {\n            System.Console.WriteLine(&quot;Binary data array is null.&quot;);\n            return;\n         }\n         catch (System.ArgumentOutOfRangeException) {\n            System.Console.WriteLine(&quot;Char Array is not large enough.&quot;);\n            return;\n         }\n\n         // Write the UUEncoded version to the output file.\n         System.IO.StreamWriter outFile; \n         try {\n            outFile = new System.IO.StreamWriter(outputFileName,\n                                    false,\n                                    System.Text.Encoding.ASCII);          \n            outFile.Write(base64CharArray);\n            outFile.Close();\n         }\n         catch (System.Exception exp) {\n            // Error creating stream or writing to it.\n            System.Console.WriteLine(&quot;{0}&quot;, exp.Message);\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert UUEncodeDecode functions#2\">      Public Sub EncodeWithCharArray()\n         Dim inFile As System.IO.FileStream\n         Dim binaryData() As Byte\n\n         Try\n            inFile = New System.IO.FileStream(inputFileName, _\n                                              System.IO.FileMode.Open, _\n                                              System.IO.FileAccess.Read)\n            ReDim binaryData(inFile.Length)\n            Dim bytesRead As Long = inFile.Read(binaryData, _\n                                                0, _\n                                                CInt(inFile.Length))\n            inFile.Close()\n         Catch exp As System.Exception\n            &#39; Error creating stream or reading from it.\n            System.Console.WriteLine(&quot;{0}&quot;, exp.Message)\n            Return\n         End Try\n\n         &#39; Convert the binary input into Base64 UUEncoded output.\n         &#39; Each 3 byte sequence in the source data becomes a 4 byte\n         &#39; sequence in the character array. \n         Dim arrayLength As Long \n         arrayLength = (4 / 3) * binaryData.Length\n         If arrayLength Mod 4 &lt;&gt; 0 Then\n            arrayLength = arrayLength + 4 - arrayLength Mod 4\n         End If\n\n         Dim base64CharArray(arrayLength - 1) As Char\n         Try\n            System.Convert.ToBase64CharArray(binaryData, _\n                                             0, _\n                                             binaryData.Length, _\n                                             base64CharArray, 0)\n         Catch exp As System.ArgumentNullException\n            System.Console.WriteLine(&quot;Binary data array is null.&quot;)\n            Return\n         Catch exp As System.ArgumentOutOfRangeException\n            System.Console.WriteLine(&quot;Char Array is not large enough.&quot;)\n            Return\n         End Try\n\n         &#39; Write the UUEncoded version to the output file.\n         Dim outFile As System.IO.StreamWriter\n         Try\n            outFile = New System.IO.StreamWriter(outputFileName, _\n                                                 False, _\n                                                 System.Text.Encoding.ASCII)\n            outFile.Write(base64CharArray)\n            outFile.Close()\n         Catch exp As System.Exception\n            &#39; Error creating stream or writing to it.\n            System.Console.WriteLine(&quot;{0}&quot;, exp.Message)\n         End Try\n      End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert UUEncodeDecode functions#2\">public:\n   void EncodeWithCharArray()\n   {\n      FileStream^ inFile;\n      array&lt;Byte&gt;^binaryData;\n\n      try\n      {\n         inFile = gcnew FileStream( inputFileName,\n                                    FileMode::Open,\n                                    FileAccess::Read );\n         binaryData = gcnew array&lt;Byte&gt;((int)(inFile-&gt;Length));\n         long bytesRead = inFile-&gt;Read( binaryData, 0,\n                                        (int)inFile-&gt;Length );\n         inFile-&gt;Close();\n      }\n      catch ( Exception^ exp ) \n      {\n         // Error creating stream or reading from it.\n         Console::WriteLine( &quot;{0}&quot;, exp-&gt;Message );\n         return;\n      }\n      \n      // Convert the binary input into Base64 UUEncoded output.\n      // Each 3 Byte sequence in the source data becomes a 4 Byte\n      // sequence in the character array. \n      long arrayLength = (long)((4.0 / 3.0) * binaryData-&gt;Length);\n      \n      // If array length is not divisible by 4, go up to the next\n      // multiple of 4.\n      if ( arrayLength % 4 != 0 )\n      {\n         arrayLength += 4 - arrayLength % 4;\n      }\n\n      array&lt;Char&gt;^ base64CharArray = gcnew array&lt;Char&gt;(arrayLength);\n      try\n      {\n         Convert::ToBase64CharArray( binaryData,\n                                     0,\n                                     binaryData-&gt;Length,\n                                     base64CharArray, 0 );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         Console::WriteLine( &quot;Binary data array is null.&quot; );\n         return;\n      }\n      catch ( ArgumentOutOfRangeException^ ) \n      {\n         Console::WriteLine( &quot;Char Array is not large enough.&quot; );\n         return;\n      }\n      \n      // Write the UUEncoded version to the output file.\n      StreamWriter^ outFile;\n      try\n      {\n         outFile = gcnew StreamWriter( outputFileName,\n                                       false,\n                                       Text::Encoding::ASCII );\n         outFile-&gt;Write( base64CharArray );\n         outFile-&gt;Close();\n      }\n      catch ( Exception^ exp ) \n      {\n         // Error creating stream or writing to it.\n         Console::WriteLine( &quot; {0}&quot;, exp-&gt;Message );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBase64CharArray_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_System_Base64FormattingOptions_\">\r\n    \r\n            <a id=\"System_Convert_ToBase64CharArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBase64CharArray(Byte[],Int32,Int32,Char[],Int32,Base64FormattingOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An input array of 8-bit unsigned integers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetIn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A position within <code>inArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements of <code>inArray</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>outArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An output array of Unicode characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetOut</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A position within <code>outArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> to insert a line break every 76 characters, or <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> to not insert line breaks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer containing the number of bytes in <code>outArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inArray</code> or <code>outArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offsetIn</code>, <code>offsetOut</code>, or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>offsetIn</code> plus <code>length</code> is greater than the length of <code>inArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>offsetOut</code> plus the number of elements to return is greater than the length of <code>outArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not a valid <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The subset of <code>length</code> elements of the <code>inArray</code> parameter starting at position <code>offsetIn</code>, are taken as a numeric value and converted to a subset of elements in the <code>outArray</code> parameter starting at position <code>offsetOut</code>. The return value indicates the number of converted elements in <code>outArray</code>. The subset of <code>outArray</code> consists of base-64 digits.  </p>\n<p> The base-64 digits in ascending order from zero are the uppercase characters &quot;A&quot; to &quot;Z&quot;, the lowercase characters &quot;a&quot; to &quot;z&quot;, the numerals &quot;0&quot; to &quot;9&quot;, and the symbols &quot;+&quot; and &quot;/&quot;. The valueless character &quot;=&quot; is used for trailing padding.  </p>\n<p> The <code>offset</code> and <code>length</code> parameters are 32-bit signed numbers. The <code>offsetIn</code> and <code>offsetOut</code> parameters are zero-based array positions.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The ToBase64CharArray method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <a class=\"xref\" href=\"system.security.cryptography.tobase64transform\" data-linktype=\"relative-path\">System.Security.Cryptography.ToBase64Transform</a> class.  </p>\n</div>\n<p> If the <code>options</code> parameter is set to <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, &quot;Multipurpose Internet Mail Extensions&quot;, at <a href=\"http://www.rfc-editor.org/\" data-linktype=\"external\">http://www.rfc-editor.org/</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the ToBase64CharArray method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits &quot;A&quot;, &quot;A&quot;, &quot;E&quot;, and &quot;C&quot; at the beginning of the output.  </p>\n<p> If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit &quot;/&quot; at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, &quot;w&quot;. The last two 6-bit values are padding and correspond to the valueless padding character, &quot;=&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"convert.tobase64chararray#1\">// This example demonstrates the Convert.ToBase64CharArray() and\n//                               Convert.FromBase64CharArray methods\nusing namespace System;\nbool ArraysAreEqual( array&lt;Byte&gt;^a1, array&lt;Byte&gt;^a2 );\nint main()\n{\n   array&lt;Byte&gt;^byteArray1 = gcnew array&lt;Byte&gt;(256);\n   array&lt;Byte&gt;^byteArray2 = gcnew array&lt;Byte&gt;(256);\n   array&lt;Char&gt;^charArray = gcnew array&lt;Char&gt;(352);\n   int charArrayLength;\n   String^ nl = Environment::NewLine;\n   String^ ruler1a = &quot;         1         2         3         4&quot;;\n   String^ ruler2a = &quot;1234567890123456789012345678901234567890&quot;;\n   String^ ruler3a = &quot;----+----+----+----+----+----+----+----+&quot;;\n   String^ ruler1b = &quot;         5         6         7      &quot;;\n   String^ ruler2b = &quot;123456789012345678901234567890123456&quot;;\n   String^ ruler3b = &quot;----+----+----+----+----+----+----+-&quot;;\n   String^ ruler = String::Concat( ruler1a, ruler1b, nl, ruler2a, ruler2b, nl, ruler3a, ruler3b );\n   \n   // 1) Initialize and display a Byte array of arbitrary data.\n   Console::WriteLine( &quot;1) Input: A Byte array of arbitrary data.{0}&quot;, nl );\n   for ( int x = 0; x &lt; byteArray1-&gt;Length; x++ )\n   {\n      byteArray1[ x ] = (Byte)x;\n      Console::Write( &quot;{0:X2} &quot;, byteArray1[ x ] );\n      if ( ((x + 1) % 20) == 0 )\n            Console::WriteLine();\n\n   }\n   Console::Write( &quot;{0}{0}&quot;, nl );\n   \n   // 2) Convert the input Byte array to a Char array, with newlines inserted.\n   charArrayLength = Convert::ToBase64CharArray( byteArray1, 0, byteArray1-&gt;Length, \n                                                 charArray, 0, \n                                                 Base64FormattingOptions::InsertLineBreaks );\n   Console::WriteLine( &quot;2) Convert the input Byte array to a Char array with newlines.&quot; );\n   Console::Write( &quot;   Output: A Char array (length = {0}). &quot;, charArrayLength );\n   Console::WriteLine( &quot;The elements of the array are:{0}&quot;, nl );\n   Console::WriteLine( ruler );\n   Console::WriteLine( gcnew String( charArray ) );\n   Console::WriteLine();\n   \n   // 3) Convert the Char array back to a Byte array.\n   Console::WriteLine( &quot;3) Convert the Char array to an output Byte array.&quot; );\n   byteArray2 = Convert::FromBase64CharArray( charArray, 0, charArrayLength );\n   \n   // 4) Are the input and output Byte arrays equivalent?\n   Console::WriteLine( &quot;4) The output Byte array is equal to the input Byte array: {0}&quot;, ArraysAreEqual( byteArray1, byteArray2 ) );\n}\n\nbool ArraysAreEqual( array&lt;Byte&gt;^a1, array&lt;Byte&gt;^a2 )\n{\n   if ( a1-&gt;Length != a2-&gt;Length )\n      return false;\n\n   for ( int i = 0; i &lt; a1-&gt;Length; i++ )\n      if ( a1[ i ] != a2[ i ] )\n            return false;\n\n   return true;\n}\n\n/*\nThis example produces the following results:\n\n1) Input: A Byte array of arbitrary data.\n\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\nB4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\nC8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\nDC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\nF0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n\n2) Convert the input Byte array to a Char array with newlines.\n   Output: A Char array (length = 352). The elements of the array are:\n\n         1         2         3         4         5         6         7\n1234567890123456789012345678901234567890123456789012345678901234567890123456\n----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\nAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\nOTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\ncnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\nq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n\n3) Convert the Char array to an output Byte array.\n4) The output Byte array is equal to the input Byte array: True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"convert.tobase64chararray#1\">&#39; This example demonstrates the Convert.ToBase64CharArray() and \n&#39;                               Convert.FromBase64CharArray methods\nClass Sample\n   Public Shared Sub Main()\n      Dim byteArray1(255) As Byte\n      Dim byteArray2(255) As Byte\n      Dim charArray(351) As Char\n      Dim charArrayLength As Integer\n      Dim nl As String = Environment.NewLine\n      \n      Dim ruler1a As String = &quot;         1         2         3         4&quot;\n      Dim ruler2a As String = &quot;1234567890123456789012345678901234567890&quot;\n      Dim ruler3a As String = &quot;----+----+----+----+----+----+----+----+&quot;\n      Dim ruler1b As String = &quot;         5         6         7      &quot;\n      Dim ruler2b As String = &quot;123456789012345678901234567890123456&quot;\n      Dim ruler3b As String = &quot;----+----+----+----+----+----+----+-&quot;\n      Dim ruler As String = String.Concat(ruler1a, ruler1b, nl, _\n                                          ruler2a, ruler2b, nl, _\n                                          ruler3a, ruler3b)\n\n      &#39; 1) Initialize and display a Byte array of arbitrary data.\n      Console.WriteLine(&quot;1) Input: A Byte array of arbitrary data.{0}&quot;, nl)\n      Dim x As Integer\n      For x = 0 To byteArray1.Length - 1\n         byteArray1(x) = CByte(x)\n         Console.Write(&quot;{0:X2} &quot;, byteArray1(x))\n         If(x + 1) Mod 20 = 0 Then\n            Console.WriteLine()\n         End If\n      Next x\n      Console.Write(&quot;{0}{0}&quot;, nl)\n      \n      &#39; 2) Convert the input Byte array to a Char array, with newlines inserted.\n      charArrayLength = Convert.ToBase64CharArray( _\n                                byteArray1, 0, byteArray1.Length, _\n                                charArray, 0, _\n                                Base64FormattingOptions.InsertLineBreaks)\n      Console.WriteLine(&quot;2) Convert the input Byte array to a Char array with newlines.&quot;)\n      Console.Write(&quot;   Output: A Char array (length = {0}). &quot;, charArrayLength)\n      Console.WriteLine(&quot;The elements of the array are:{0}&quot;, nl)\n      Console.WriteLine(ruler)\n      Console.WriteLine(New [String](charArray))\n      Console.WriteLine()\n      \n      &#39; 3) Convert the Char array back to a Byte array.\n      Console.WriteLine(&quot;3) Convert the Char array to an output Byte array.&quot;)\n      byteArray2 = Convert.FromBase64CharArray(charArray, 0, charArrayLength)\n      \n      &#39; 4) Are the input and output Byte arrays equivalent?\n      Console.WriteLine(&quot;4) The output Byte array is equal to the input Byte array: {0}&quot;, _\n                            ArraysAreEqual(byteArray1, byteArray2))\n   End Sub &#39;Main\n   \n   Public Shared Function ArraysAreEqual(a1() As Byte, a2() As Byte) As Boolean\n      If a1.Length &lt;&gt; a2.Length Then\n         Return False\n      End If\n      Dim i As Integer\n      For i = 0 To a1.Length - 1\n         If a1(i) &lt;&gt; a2(i) Then\n            Return False\n         End If\n      Next i\n      Return True\n   End Function &#39;ArraysAreEqual\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;1) Input: A Byte array of arbitrary data.\n&#39;\n&#39;00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n&#39;14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n&#39;28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n&#39;3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n&#39;50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n&#39;64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n&#39;78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n&#39;8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\n&#39;A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\n&#39;B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\n&#39;C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\n&#39;DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\n&#39;F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n&#39;\n&#39;2) Convert the input Byte array to a Char array with newlines.\n&#39;   Output: A Char array (length = 352). The elements of the array are:\n&#39;\n&#39;         1         2         3         4         5         6         7\n&#39;1234567890123456789012345678901234567890123456789012345678901234567890123456\n&#39;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\n&#39;AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\n&#39;OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\n&#39;cnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\n&#39;q6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n&#39;5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n&#39;\n&#39;3) Convert the Char array to an output Byte array.\n&#39;4) The output Byte array is equal to the input Byte array: True\n</code></pre><pre><code class=\"lang-cs\" name=\"convert.tobase64chararray#1\">// This example demonstrates the Convert.ToBase64CharArray() and\n//                               Convert.FromBase64CharArray methods\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    byte[] byteArray1 = new byte[256];\n    byte[] byteArray2 = new byte[256];\n    char[] charArray  = new char[352];\n    int charArrayLength;\n    string nl = Environment.NewLine;\n\n    string ruler1a = &quot;         1         2         3         4&quot;;\n    string ruler2a = &quot;1234567890123456789012345678901234567890&quot;;\n    string ruler3a = &quot;----+----+----+----+----+----+----+----+&quot;;\n    string ruler1b = &quot;         5         6         7      &quot;;\n    string ruler2b = &quot;123456789012345678901234567890123456&quot;;\n    string ruler3b = &quot;----+----+----+----+----+----+----+-&quot;;\n    string ruler   = String.Concat(ruler1a, ruler1b, nl, \n                                   ruler2a, ruler2b, nl,\n                                   ruler3a, ruler3b);\n\n// 1) Initialize and display a Byte array of arbitrary data.\n    Console.WriteLine(&quot;1) Input: A Byte array of arbitrary data.{0}&quot;, nl);\n    for (int x = 0; x &lt; byteArray1.Length; x++)\n    {\n    byteArray1[x] = (byte)x;\n    Console.Write(&quot;{0:X2} &quot;, byteArray1[x]);\n    if (((x+1)%20) == 0) Console.WriteLine();\n    }\n    Console.Write(&quot;{0}{0}&quot;, nl);\n\n// 2) Convert the input Byte array to a Char array, with newlines inserted.\n    charArrayLength = \n        Convert.ToBase64CharArray(byteArray1, 0, byteArray1.Length, \n                                   charArray, 0, Base64FormattingOptions.InsertLineBreaks);\n    Console.WriteLine(&quot;2) Convert the input Byte array to a Char array with newlines.&quot;);\n    Console.Write(&quot;   Output: A Char array (length = {0}). &quot;, charArrayLength);\n    Console.WriteLine(&quot;The elements of the array are:{0}&quot;, nl);\n    Console.WriteLine(ruler);\n    Console.WriteLine(new String(charArray));\n    Console.WriteLine();\n\n// 3) Convert the Char array back to a Byte array.\n    Console.WriteLine(&quot;3) Convert the Char array to an output Byte array.&quot;);\n    byteArray2 = Convert.FromBase64CharArray(charArray, 0, charArrayLength);\n\n// 4) Are the input and output Byte arrays equivalent?\n    Console.WriteLine(&quot;4) The output Byte array is equal to the input Byte array: {0}&quot;, \n                      ArraysAreEqual(byteArray1, byteArray2));\n    }\n\n    public static bool ArraysAreEqual(byte[] a1, byte[] a2)\n    {\n    if (a1.Length != a2.Length) return false;\n    for (int i = 0; i &lt; a1.Length; i++)\n        if (a1[i] != a2[i]) return false;\n    return true;\n    }\n}\n/*\nThis example produces the following results:\n\n1) Input: A Byte array of arbitrary data.\n\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\nB4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\nC8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\nDC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\nF0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n\n2) Convert the input Byte array to a Char array with newlines.\n   Output: A Char array (length = 352). The elements of the array are:\n\n         1         2         3         4         5         6         7\n1234567890123456789012345678901234567890123456789012345678901234567890123456\n----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\nAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\nOTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\ncnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\nq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n\n3) Convert the Char array to an output Byte array.\n4) The output Byte array is equal to the input Byte array: True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBase64String_System_Byte___\">\r\n    \r\n            <a id=\"System_Convert_ToBase64String_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBase64String(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToBase64String (byte[] inArray);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of 8-bit unsigned integers.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation, in base 64, of the contents of <code>inArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of <code>inArray</code> are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.  </p>\n<p> The base-64 digits in ascending order from zero are the uppercase characters &quot;A&quot; to &quot;Z&quot;, the lowercase characters &quot;a&quot; to &quot;z&quot;, the numerals &quot;0&quot; to &quot;9&quot;, and the symbols &quot;+&quot; and &quot;/&quot;. The valueless character, &quot;=&quot;, is used for trailing padding.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The ToBase64String method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <a class=\"xref\" href=\"system.security.cryptography.tobase64transform\" data-linktype=\"relative-path\">System.Security.Cryptography.ToBase64Transform</a> class.  </p>\n</div>\n<p> Ordinarily, the <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64String_\" data-linktype=\"relative-path\">ToBase64String</a> method is not used to round-trip a  UUEncoded (base-64 encoded) string.  That is, if you decode a string by calling the <a class=\"xref\" href=\"system.convert#System_Convert_FromBase64String_\" data-linktype=\"relative-path\">FromBase64String</a> method, then encode the returned byte array by calling the <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64String_\" data-linktype=\"relative-path\">ToBase64String</a> method, the resulting string will not necessarily be identical to the original string. The string will round-trip only if the original string is a valid base-64 encoded string.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToBase64String method to convert a byte array to a UUencoded (base-64) string, and then calls the <a class=\"xref\" href=\"system.convert#System_Convert_FromBase64String_System_String_\" data-linktype=\"relative-path\">FromBase64String(String)</a> method to restore the original byte array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToBase64String#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n       // Define a byte array.\n       byte[] bytes = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n       Console.WriteLine(&quot;The byte array: &quot;);\n       Console.WriteLine(&quot;   {0}<br>&quot;, BitConverter.ToString(bytes));\n       \n       // Convert the array to a base 64 sring.\n       String s = Convert.ToBase64String(bytes);\n       Console.WriteLine(&quot;The base 64 string:<br>   {0}<br>&quot;, s);\n       \n       // Restore the byte array.\n       byte[] newBytes = Convert.FromBase64String(s);\n       Console.WriteLine(&quot;The restored byte array: &quot;);\n       Console.WriteLine(&quot;   {0}<br>&quot;, BitConverter.ToString(newBytes));\n   }\n}\n// The example displays the following output:\n//     The byte array:\n//        02-04-06-08-0A-0C-0E-10-12-14\n//     \n//     The base 64 string:\n//        AgQGCAoMDhASFA==\n//     \n//     The restored byte array:\n//        02-04-06-08-0A-0C-0E-10-12-14\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBase64String#1\">Module Example\n   Public Sub Main()\n       &#39; Define a byte array.\n       Dim bytes() As Byte = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n       Console.WriteLine(&quot;The byte array: &quot;)\n       Console.WriteLine(&quot;   {0}&quot;, BitConverter.ToString(bytes))\n       Console.WriteLine()\n       \n       &#39; Convert the array to a base 64 sring.\n       Dim s As String = Convert.ToBase64String(bytes)\n       Console.WriteLine(&quot;The base 64 string:{1}   {0}{1}&quot;, \n                         s, vbCrLf)\n       \n       &#39; Restore the byte array.\n       Dim newBytes() As Byte = Convert.FromBase64String(s)\n       Console.WriteLine(&quot;The restored byte array: &quot;)\n       Console.WriteLine(&quot;   {0}&quot;, BitConverter.ToString(newBytes))\n       Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The byte array:\n&#39;        02-04-06-08-0A-0C-0E-10-12-14\n&#39;     \n&#39;     The base 64 string:\n&#39;        AgQGCAoMDhASFA==\n&#39;     \n&#39;     The restored byte array:\n&#39;        02-04-06-08-0A-0C-0E-10-12-14\n</code></pre><p> The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_GetBytes_System_Int32_\" data-linktype=\"relative-path\">System.BitConverter.GetBytes(Int32)</a> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <a class=\"xref\" href=\"system.array#System_Array_Copy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_\" data-linktype=\"relative-path\">System.Array.Copy(Array,Int32,Array,Int32,Int32)</a> method. This buffer is then passed to the ToBase64String method to create a UUencoded (base-64) string.  It then calls the <a class=\"xref\" href=\"system.convert#System_Convert_FromBase64String_System_String_\" data-linktype=\"relative-path\">FromBase64String(String)</a> method to decode the UUencoded string, and calls the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToBase64String#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define an array of 20 elements and display it.\n      int[] arr = new int[20]; \n      int value = 1;\n      for (int ctr = 0; ctr &lt;= arr.GetUpperBound(0); ctr++) {\n         arr[ctr] = value;\n         value = value * 2 + 1;\n      }\n      DisplayArray(arr);\n\n      // Convert the array of integers to a byte array.\n      byte[] bytes = new byte[arr.Length * 4];\n      for (int ctr = 0; ctr &lt; arr.Length; ctr++) {\n         Array.Copy(BitConverter.GetBytes(arr[ctr]), 0, \n                    bytes, ctr * 4, 4);\n      }\n         \n      // Encode the byte array using Base64 encoding\n      String base64 = Convert.ToBase64String(bytes);\n      Console.WriteLine(&quot;The encoded string: &quot;);\n      for (int ctr = 0; ctr &lt;= base64.Length / 50; ctr++) \n         Console.WriteLine(base64.Substring(ctr * 50, \n                                            ctr * 50 + 50 &lt;= base64.Length \n                                               ? 50 : base64.Length - ctr * 50));\n      Console.WriteLine();\n      \n      // Convert the string back to a byte array.\n      byte[] newBytes = Convert.FromBase64String(base64);\n\n      // Convert the byte array back to an integer array.\n      int[] newArr = new int[newBytes.Length/4];\n      for (int ctr = 0; ctr &lt; newBytes.Length / 4; ctr ++)\n         newArr[ctr] = BitConverter.ToInt32(newBytes, ctr * 4);\n         \n      DisplayArray(newArr);\n   }\n\n   private static void DisplayArray(Array arr)\n   {\n      Console.WriteLine(&quot;The array:&quot;);\n      Console.Write(&quot;{ &quot;);\n      for (int ctr = 0; ctr &lt; arr.GetUpperBound(0); ctr++) {\n         Console.Write(&quot;{0}, &quot;, arr.GetValue(ctr));\n         if ((ctr + 1) % 10 == 0) \n            Console.Write(&quot;<br>  &quot;);\n      }\n      Console.WriteLine(&quot;{0} {1}&quot;, arr.GetValue(arr.GetUpperBound(0)), &quot;}&quot;);\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n// The array:\n// { 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023,\n//   2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575 }\n// \n// The encoded string:\n// AQAAAAMAAAAHAAAADwAAAB8AAAA/AAAAfwAAAP8AAAD/AQAA/w\n// MAAP8HAAD/DwAA/x8AAP8/AAD/fwAA//8AAP//AQD//wMA//8H\n// \n// The array:\n// { 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023,\n//   2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575 }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBase64String#2\">Module Example\n   Public Sub Main()\n      &#39; Define an array of 20 elements and display it.\n      Dim arr(19) As Integer \n      Dim value As Integer = 1\n      For ctr As Integer = 0 To arr.GetUpperBound(0)\n         arr(ctr) = value\n         value = value * 2 + 1\n      Next\n      DisplayArray(arr)\n\n      &#39; Convert the array of integers to a byte array.\n      Dim bytes(arr.Length * 4 - 1) As Byte \n      For ctr As Integer = 0 To arr.Length - 1\n         Array.Copy(BitConverter.GetBytes(arr(ctr)), 0, \n                    bytes, ctr * 4, 4)\n      Next\n         \n      &#39; Encode the byte array using Base64 encoding\n      Dim base64 As String = Convert.ToBase64String(bytes)\n      Console.WriteLine(&quot;The encoded string: &quot;)\n      For ctr As Integer = 0 To base64.Length \\ 50 - 1 \n         Console.WriteLine(base64.Substring(ctr * 50, \n                                            If(ctr * 50 + 50 &lt;= base64.Length, \n                                               50, base64.Length - ctr * 50)))\n      Next\n      Console.WriteLine()\n      \n      &#39; Convert the string back to a byte array.\n      Dim newBytes() As Byte = Convert.FromBase64String(base64)\n\n      &#39; Convert the byte array back to an integer array.\n      Dim newArr(newBytes.Length\\4 - 1) As Integer\n      For ctr As Integer = 0 To newBytes.Length \\ 4 - 1\n         newArr(ctr) = BitConverter.ToInt32(newBytes, ctr * 4)\n      Next   \n      DisplayArray(newArr)\n   End Sub\n\n   Private Sub DisplayArray(arr As Array)\n      Console.WriteLine(&quot;The array:&quot;)\n      Console.Write(&quot;{ &quot;)\n      For ctr As Integer = 0 To arr.GetUpperBound(0) - 1\n         Console.Write(&quot;{0}, &quot;, arr.GetValue(ctr))\n         If (ctr + 1) Mod 10 = 0 Then Console.Write(&quot;{0}  &quot;, vbCrLf)\n      Next\n      Console.WriteLine(&quot;{0} {1}&quot;, arr.GetValue(arr.GetUpperBound(0)), &quot;}&quot;)\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The array:\n&#39;     { 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023,\n&#39;       2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575 }\n&#39;     \n&#39;     The encoded string:\n&#39;     AQAAAAMAAAAHAAAADwAAAB8AAAA/AAAAfwAAAP8AAAD/AQAA/w\n&#39;     MAAP8HAAD/DwAA/x8AAP8/AAD/fwAA//8AAP//AQD//wMA//8H\n&#39;     \n&#39;     The array:\n&#39;     { 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023,\n&#39;       2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575 }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBase64String_System_Byte___System_Base64FormattingOptions_\">\r\n    \r\n            <a id=\"System_Convert_ToBase64String_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBase64String(Byte[],Base64FormattingOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToBase64String (byte[] inArray, Base64FormattingOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of 8-bit unsigned integers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> to insert a line break every 76 characters, or <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> to not insert line breaks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation in base 64 of the elements in <code>inArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not a valid <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of the <code>inArray</code> parameter are taken as a numeric value and converted to a string representation in base 64.  </p>\n<p> The base-64 digits in ascending order from zero are the uppercase characters &quot;A&quot; to &quot;Z&quot;, the lowercase characters &quot;a&quot; to &quot;z&quot;, the numerals &quot;0&quot; to &quot;9&quot;, and the symbols &quot;+&quot; and &quot;/&quot;. The valueless character &quot;=&quot; is used for trailing padding.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The ToBase64String method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <a class=\"xref\" href=\"system.security.cryptography.tobase64transform\" data-linktype=\"relative-path\">System.Security.Cryptography.ToBase64Transform</a> class.  </p>\n</div>\n<p> If the <code>options</code> parameter is set to <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array. The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window. For more information, see RFC 2045, &quot;Multipurpose Internet Mail Extensions&quot;, at <a href=\"http://www.rfc-editor.org/\" data-linktype=\"external\">http://www.rfc-editor.org/</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the ToBase64String with a <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">System.Base64FormattingOptions</a> argument to insert line breaks in the string that is produced by encoding a 100-element byte array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToBase64String#3\">Module Example\n   Public Sub Main()\n       &#39; Define a byte array.\n       Dim bytes(99) As Byte\n       Dim originalTotal As Integer = 0\n       For ctr As Integer = 0 To bytes.GetUpperBound(0)\n          bytes(ctr) = CByte(ctr + 1)\n          originalTotal += bytes(ctr)\n       Next\n       &#39; Display summary information about the array.\n       Console.WriteLine(&quot;The original byte array:&quot;)\n       Console.WriteLine(&quot;   Total elements: {0}&quot;, bytes.Length)\n       Console.WriteLine(&quot;   Length of String Representation: {0}&quot;,\n                         BitConverter.ToString(bytes).Length)\n       Console.WriteLine(&quot;   Sum of elements: {0:N0}&quot;, originalTotal)                  \n       Console.WriteLine()\n       \n       &#39; Convert the array to a base 64 sring.\n       Dim s As String = Convert.ToBase64String(bytes, \n                                               Base64FormattingOptions.InsertLineBreaks)\n       Console.WriteLine(&quot;The base 64 string:{1}   {0}{1}&quot;, \n                         s, vbCrLf)\n       \n       &#39; Restore the byte array.\n       Dim newBytes() As Byte = Convert.FromBase64String(s)\n       Dim newTotal As Integer = 0\n       For Each newByte In newBytes\n          newTotal += newByte\n       Next\n       &#39; Display summary information about the restored array.\n       Console.WriteLine(&quot;   Total elements: {0}&quot;, newBytes.Length)\n       Console.WriteLine(&quot;   Length of String Representation: {0}&quot;,\n                         BitConverter.ToString(newBytes).Length)\n       Console.WriteLine(&quot;   Sum of elements: {0:N0}&quot;, newTotal)                  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   The original byte array:\n&#39;      Total elements: 100\n&#39;      Length of String Representation: 299\n&#39;      Sum of elements: 5,050\n&#39;   \n&#39;   The base 64 string:\n&#39;      AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5\n&#39;   Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZA==\n&#39;   \n&#39;      Total elements: 100\n&#39;      Length of String Representation: 299\n&#39;      Sum of elements: 5,050\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBase64String#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n       // Define a byte array.\n       Byte[] bytes = new Byte[100];\n       int originalTotal = 0;\n       for (int ctr = 0; ctr &lt;= bytes.GetUpperBound(0); ctr++) {\n          bytes[ctr] = (byte)(ctr + 1);\n          originalTotal += bytes[ctr];\n       }\n       // Display summary information about the array.\n       Console.WriteLine(&quot;The original byte array:&quot;);\n       Console.WriteLine(&quot;   Total elements: {0}&quot;, bytes.Length);\n       Console.WriteLine(&quot;   Length of String Representation: {0}&quot;,\n                         BitConverter.ToString(bytes).Length);\n       Console.WriteLine(&quot;   Sum of elements: {0:N0}&quot;, originalTotal);                  \n       Console.WriteLine();\n       \n       // Convert the array to a base 64 sring.\n       String s = Convert.ToBase64String(bytes, \n                                         Base64FormattingOptions.InsertLineBreaks);\n       Console.WriteLine(&quot;The base 64 string:<br>   {0}<br>&quot;, s);\n       \n       // Restore the byte array.\n       Byte[] newBytes = Convert.FromBase64String(s);\n       int newTotal = 0;\n       foreach (var newByte in newBytes)\n          newTotal += newByte;\n\n       // Display summary information about the restored array.\n       Console.WriteLine(&quot;   Total elements: {0}&quot;, newBytes.Length);\n       Console.WriteLine(&quot;   Length of String Representation: {0}&quot;,\n                         BitConverter.ToString(newBytes).Length);\n       Console.WriteLine(&quot;   Sum of elements: {0:N0}&quot;, newTotal);                  \n   }\n}\n// The example displays the following output:\n//   The original byte array:\n//      Total elements: 100\n//      Length of String Representation: 299\n//      Sum of elements: 5,050\n//   \n//   The base 64 string:\n//      AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5\n//   Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZA==\n//   \n//      Total elements: 100\n//      Length of String Representation: 299\n//      Sum of elements: 5,050\n</code></pre><p> As the output from the example shows, the <a class=\"xref\" href=\"system.convert#System_Convert_FromBase64String_\" data-linktype=\"relative-path\">FromBase64String</a> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBase64String_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToBase64String_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBase64String(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToBase64String (byte[] inArray, int offset, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of 8-bit unsigned integers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An offset in <code>inArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements of <code>inArray</code> to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of <code>inArray</code> are taken as a numeric value and converted to a string representation in base 64.  </p>\n<p> The base-64 digits in ascending order from zero are the uppercase characters &quot;A&quot; to &quot;Z&quot;, the lowercase characters &quot;a&quot; to &quot;z&quot;, the numerals &quot;0&quot; to &quot;9&quot;, and the symbols &quot;+&quot; and &quot;/&quot;. The valueless character, &quot;=&quot;, is used for trailing padding.  </p>\n<p> The <code>offset</code> and <code>length</code> parameters are 32-bit signed numbers. The <code>offset</code> parameter is zero-based.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The ToBase64String method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <a class=\"xref\" href=\"system.security.cryptography.tobase64transform\" data-linktype=\"relative-path\">System.Security.Cryptography.ToBase64Transform</a> class.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBase64String_System_Byte___System_Int32_System_Int32_System_Base64FormattingOptions_\">\r\n    \r\n            <a id=\"System_Convert_ToBase64String_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBase64String(Byte[],Int32,Int32,Base64FormattingOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToBase64String (byte[] inArray, int offset, int length, Base64FormattingOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of 8-bit unsigned integers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An offset in <code>inArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements of <code>inArray</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> to insert a line break every 76 characters, or <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> to not insert line breaks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation in base 64 of <code>length</code> elements of <code>inArray</code>, starting at position <code>offset</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> or <code>length</code> is negative.  </p>\n<p> -or-  </p>\n<p> <code>offset</code> plus <code>length</code> is greater than the length of <code>inArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not a valid <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of the <code>inArray</code> parameter are taken as a numeric value and converted to a string representation in base 64.  </p>\n<p> The base-64 digits in ascending order from zero are the uppercase characters &quot;A&quot; to &quot;Z&quot;, the lowercase characters &quot;a&quot; to &quot;z&quot;, the numerals &quot;0&quot; to &quot;9&quot;, and the symbols &quot;+&quot; and &quot;/&quot;. The valueless character &quot;=&quot; is used for trailing padding.  </p>\n<p> The <code>offset</code> and <code>length</code> parameters are 32-bit signed numbers. The <code>offset</code> parameter is zero-based.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The ToBase64String method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <a class=\"xref\" href=\"system.security.cryptography.tobase64transform\" data-linktype=\"relative-path\">System.Security.Cryptography.ToBase64Transform</a> class.  </p>\n</div>\n<p> If the <code>options</code> parameter is set to <a class=\"xref\" href=\"system.base64formattingoptions\" data-linktype=\"relative-path\">Base64FormattingOptions</a> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, &quot;Multipurpose Internet Mail Extensions&quot;, at <a href=\"http://www.rfc-editor.org/\" data-linktype=\"external\">http://www.rfc-editor.org/</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the ToBase64String method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits &quot;A&quot;, &quot;A&quot;, &quot;E&quot;, and &quot;C&quot; at the beginning of the output.  </p>\n<p> If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit &quot;/&quot; at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, &quot;w&quot;. The last two 6-bit values are padding and correspond to the valueless padding character, &quot;=&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"convert.tobase64string#1\">// This example demonstrates the Convert.ToBase64String() and \n//                               Convert.FromBase64String() methods\n\nusing System;\nclass Sample \n{\n    public static void Main() \n    {\n    byte[] inArray  = new byte[256];\n    byte[] outArray = new byte[256];\n    string s2;\n    string s3;\n    string step1 = &quot;1) The input is a byte array (inArray) of arbitrary data.&quot;;\n    string step2 = &quot;2) Convert a subarray of the input data array to a base 64 string.&quot;;\n    string step3 = &quot;3) Convert the entire input data array to a base 64 string.&quot;;\n    string step4 = &quot;4) The two methods in steps 2 and 3 produce the same result: {0}&quot;;\n    string step5 = &quot;5) Convert the base 64 string to an output byte array (outArray).&quot;;\n    string step6 = &quot;6) The input and output arrays, inArray and outArray, are equal: {0}&quot;;\n    int x;\n    string nl = Environment.NewLine;\n    string ruler1a = &quot;         1         2         3         4&quot;;\n    string ruler2a = &quot;1234567890123456789012345678901234567890&quot;;\n    string ruler3a = &quot;----+----+----+----+----+----+----+----+&quot;;\n    string ruler1b = &quot;         5         6         7      &quot;;\n    string ruler2b = &quot;123456789012345678901234567890123456&quot;;\n    string ruler3b = &quot;----+----+----+----+----+----+----+-&quot;;\n    string ruler   = String.Concat(ruler1a, ruler1b, nl, \n                                   ruler2a, ruler2b, nl,\n                                   ruler3a, ruler3b, nl);\n\n// 1) Display an arbitrary array of input data (inArray). The data could be \n//    derived from user input, a file, an algorithm, etc.\n\n    Console.WriteLine(step1);\n    Console.WriteLine();\n    for (x = 0; x &lt; inArray.Length; x++)\n        {\n        inArray[x] = (byte)x;\n        Console.Write(&quot;{0:X2} &quot;, inArray[x]);\n        if (((x+1)%20) == 0) Console.WriteLine();\n        }\n    Console.Write(&quot;{0}{0}&quot;, nl);\n\n// 2) Convert a subarray of the input data to a base64 string. In this case, \n//    the subarray is the entire input data array. New lines (CRLF) are inserted.\n\n    Console.WriteLine(step2);\n    s2 = Convert.ToBase64String(inArray, 0, inArray.Length, \n                                Base64FormattingOptions.InsertLineBreaks);\n    Console.WriteLine(&quot;{0}{1}{2}{3}&quot;, nl, ruler, s2, nl);\n\n// 3) Convert the input data to a base64 string. In this case, the entire \n//    input data array is converted by default. New lines (CRLF) are inserted.\n\n    Console.WriteLine(step3);\n    s3 = Convert.ToBase64String(inArray, Base64FormattingOptions.InsertLineBreaks);\n\n// 4) Test whether the methods in steps 2 and 3 produce the same result.\n    Console.WriteLine(step4, s2.Equals(s3));\n\n// 5) Convert the base 64 string to an output array (outArray).\n    Console.WriteLine(step5);\n    outArray = Convert.FromBase64String(s2);\n\n// 6) Is outArray equal to inArray?\n   Console.WriteLine(step6, ArraysAreEqual(inArray, outArray));\n   }\n\n    public static bool ArraysAreEqual(byte[] a1, byte[] a2)\n    {\n    if (a1.Length != a2.Length) return false;\n    for (int i = 0; i &lt; a1.Length; i++)\n        if (a1[i] != a2[i]) return false;\n    return true;\n    }\n}\n/*\nThis example produces the following results:\n\n1) The input is a byte array (inArray) of arbitrary data.\n\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\nB4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\nC8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\nDC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\nF0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n\n2) Convert a subarray of the input data array to a base 64 string.\n\n         1         2         3         4         5         6         7\n1234567890123456789012345678901234567890123456789012345678901234567890123456\n----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\nAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\nOTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\ncnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\nq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n\n3) Convert the entire input data array to a base 64 string.\n4) The two methods in steps 2 and 3 produce the same result: True\n5) Convert the base 64 string to an output byte array (outArray).\n6) The input and output arrays, inArray and outArray, are equal: True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"convert.tobase64string#1\">&#39; This example demonstrates the Convert.ToBase64String() and \n&#39;                               Convert.FromBase64String() methods\nClass Sample\n   Public Shared Sub Main()\n      Dim inArray(255)  As Byte\n      Dim outArray(255) As Byte\n      Dim s2 As String\n      Dim s3 As String\n      Dim step1 As String = &quot;1) The input is a byte array (inArray) of arbitrary data.&quot;\n      Dim step2 As String = &quot;2) Convert a subarray of the input data array to a base 64 string.&quot;\n      Dim step3 As String = &quot;3) Convert the entire input data array to a base 64 string.&quot;\n      Dim step4 As String = &quot;4) The two methods in steps 2 and 3 produce the same result: {0}&quot;\n      Dim step5 As String = &quot;5) Convert the base 64 string to an output byte array (outArray).&quot;\n      Dim step6 As String = &quot;6) The input and output arrays, inArray and outArray, are equal: {0}&quot;\n      Dim x As Integer\n      Dim nl As String = Environment.NewLine\n      Dim ruler1a As String = &quot;         1         2         3         4&quot;\n      Dim ruler2a As String = &quot;1234567890123456789012345678901234567890&quot;\n      Dim ruler3a As String = &quot;----+----+----+----+----+----+----+----+&quot;\n      Dim ruler1b As String = &quot;         5         6         7      &quot;\n      Dim ruler2b As String = &quot;123456789012345678901234567890123456&quot;\n      Dim ruler3b As String = &quot;----+----+----+----+----+----+----+-&quot;\n      Dim ruler As String = [String].Concat(ruler1a, ruler1b, nl, ruler2a, ruler2b, nl, ruler3a, ruler3b, nl)\n      \n      &#39; 1) Display an arbitrary array of input data (inArray). The data could be \n      &#39;    derived from user input, a file, an algorithm, etc.\n      Console.WriteLine(step1)\n      Console.WriteLine()\n      For x = 0 To inArray.Length - 1\n         inArray(x) = CByte(x)\n         Console.Write(&quot;{0:X2} &quot;, inArray(x))\n         If (x + 1) Mod 20 = 0 Then\n            Console.WriteLine()\n         End If\n      Next x\n      Console.Write(&quot;{0}{0}&quot;, nl)\n      \n      &#39; 2) Convert a subarray of the input data to a base64 string. In this case, \n      &#39;    the subarray is the entire input data array. New lines (CRLF) are inserted.\n      Console.WriteLine(step2)\n      s2 = Convert.ToBase64String(inArray, 0, inArray.Length, _\n                                  Base64FormattingOptions.InsertLineBreaks)\n      Console.WriteLine(&quot;{0}{1}{2}{3}&quot;, nl, ruler, s2, nl)\n      \n      &#39; 3) Convert the input data to a base64 string. In this case, the entire \n      &#39;    input data array is converted by default. New lines (CRLF) are inserted.\n      Console.WriteLine(step3)\n      s3 = Convert.ToBase64String(inArray, Base64FormattingOptions.InsertLineBreaks)\n      \n      &#39; 4) Test whether the methods in steps 2 and 3 produce the same result.\n      Console.WriteLine(step4, s2.Equals(s3))\n      \n      &#39; 5) Convert the base 64 string to an output array (outArray).\n      Console.WriteLine(step5)\n      outArray = Convert.FromBase64String(s2)\n      \n      &#39; 6) Is outArray equal to inArray?\n      Console.WriteLine(step6, ArraysAreEqual(inArray, outArray))\n   End Sub &#39;Main\n   \n   \n   Public Shared Function ArraysAreEqual(a1() As Byte, a2() As Byte) As Boolean\n      If a1.Length &lt;&gt; a2.Length Then\n         Return False\n      End If\n      Dim i As Integer\n      For i = 0 To a1.Length - 1\n         If a1(i) &lt;&gt; a2(i) Then\n            Return False\n         End If\n      Next i\n      Return True\n   End Function &#39;ArraysAreEqual\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;1) The input is a byte array (inArray) of arbitrary data.\n&#39;\n&#39;00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n&#39;14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n&#39;28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n&#39;3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n&#39;50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n&#39;64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n&#39;78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n&#39;8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\n&#39;A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\n&#39;B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\n&#39;C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\n&#39;DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\n&#39;F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n&#39;\n&#39;2) Convert a subarray of the input data array to a base 64 string.\n&#39;\n&#39;         1         2         3         4         5         6         7\n&#39;1234567890123456789012345678901234567890123456789012345678901234567890123456\n&#39;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\n&#39;AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\n&#39;OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\n&#39;cnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\n&#39;q6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n&#39;5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n&#39;\n&#39;3) Convert the entire input data array to a base 64 string.\n&#39;4) The two methods in steps 2 and 3 produce the same result: True\n&#39;5) Convert the base 64 string to an output byte array (outArray).\n&#39;6) The input and output arrays, inArray and outArray, are equal: True\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"convert.tobase64string#1\">// This example demonstrates the Convert.ToBase64String() and \n//                               Convert.FromBase64String() methods\nusing namespace System;\nbool ArraysAreEqual( array&lt;Byte&gt;^a1, array&lt;Byte&gt;^a2 );\nint main()\n{\n   array&lt;Byte&gt;^inArray = gcnew array&lt;Byte&gt;(256);\n   array&lt;Byte&gt;^outArray = gcnew array&lt;Byte&gt;(256);\n   String^ s2;\n   String^ s3;\n   String^ step1 = &quot;1) The input is a byte array (inArray) of arbitrary data.&quot;;\n   String^ step2 = &quot;2) Convert a subarray of the input data array to a base 64 string.&quot;;\n   String^ step3 = &quot;3) Convert the entire input data array to a base 64 string.&quot;;\n   String^ step4 = &quot;4) The two methods in steps 2 and 3 produce the same result: {0}&quot;;\n   String^ step5 = &quot;5) Convert the base 64 string to an output byte array (outArray).&quot;;\n   String^ step6 = &quot;6) The input and output arrays, inArray and outArray, are equal: {0}&quot;;\n   int x;\n   String^ nl = Environment::NewLine;\n   String^ ruler1a = &quot;         1         2         3         4&quot;;\n   String^ ruler2a = &quot;1234567890123456789012345678901234567890&quot;;\n   String^ ruler3a = &quot;----+----+----+----+----+----+----+----+&quot;;\n   String^ ruler1b = &quot;         5         6         7      &quot;;\n   String^ ruler2b = &quot;123456789012345678901234567890123456&quot;;\n   String^ ruler3b = &quot;----+----+----+----+----+----+----+-&quot;;\n   String^ ruler = String::Concat( ruler1a, ruler1b, nl, ruler2a, ruler2b, nl, ruler3a, ruler3b, nl );\n   \n   // 1) Display an arbitrary array of input data (inArray). The data could be \n   //    derived from user input, a file, an algorithm, etc.\n   Console::WriteLine( step1 );\n   Console::WriteLine();\n   for ( x = 0; x &lt; inArray-&gt;Length; x++ )\n   {\n      inArray[ x ] = (Byte)x;\n      Console::Write( &quot;{0:X2} &quot;, inArray[ x ] );\n      if ( ((x + 1) % 20) == 0 )\n            Console::WriteLine();\n\n   }\n   Console::Write( &quot;{0}{0}&quot;, nl );\n   \n   // 2) Convert a subarray of the input data to a base64 string. In this case, \n   //    the subarray is the entire input data array. New lines (CRLF) are inserted.\n   Console::WriteLine( step2 );\n   s2 = Convert::ToBase64String( inArray, 0, inArray-&gt;Length, Base64FormattingOptions::InsertLineBreaks );\n   Console::WriteLine( &quot;{0}{1}{2}{3}&quot;, nl, ruler, s2, nl );\n   \n   // 3) Convert the input data to a base64 string. In this case, the entire \n   //    input data array is converted by default. New lines (CRLF) are inserted.\n   Console::WriteLine( step3 );\n   s3 = Convert::ToBase64String( inArray, Base64FormattingOptions::InsertLineBreaks );\n   \n   // 4) Test whether the methods in steps 2 and 3 produce the same result.\n   Console::WriteLine( step4, s2-&gt;Equals( s3 ) );\n   \n   // 5) Convert the base 64 string to an output array (outArray).\n   Console::WriteLine( step5 );\n   outArray = Convert::FromBase64String( s2 );\n   \n   // 6) Is outArray equal to inArray?\n   Console::WriteLine( step6, ArraysAreEqual( inArray, outArray ) );\n}\n\nbool ArraysAreEqual( array&lt;Byte&gt;^a1, array&lt;Byte&gt;^a2 )\n{\n   if ( a1-&gt;Length != a2-&gt;Length )\n      return false;\n\n   for ( int i = 0; i &lt; a1-&gt;Length; i++ )\n      if ( a1[ i ] != a2[ i ] )\n            return false;\n\n   return true;\n}\n\n/*\nThis example produces the following results:\n\n1) The input is a byte array (inArray) of arbitrary data.\n\n00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13\n14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27\n28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B\n3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F\n50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63\n64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77\n78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B\n8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F\nA0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3\nB4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7\nC8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB\nDC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF\nF0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF\n\n2) Convert a subarray of the input data array to a base 64 string.\n\n         1         2         3         4         5         6         7\n1234567890123456789012345678901234567890123456789012345678901234567890123456\n----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\nAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4\nOTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx\ncnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq\nq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj\n5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==\n\n3) Convert the entire input data array to a base 64 string.\n4) The two methods in steps 2 and 3 produce the same result: True\n5) Convert the base 64 string to an output byte array (outArray).\n6) The input and output arrays, inArray and outArray, are equal: True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified Boolean value; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#12\">   array&lt;Byte&gt;^ bytes = gcnew array&lt;Byte&gt; { Byte::MinValue, 100, 200, Byte::MaxValue };\n   bool result;\n      \n   for each (Byte byteValue in bytes)\n   {\n      result = Convert::ToBoolean(byteValue); \n      Console::WriteLine(&quot;{0,-5}  --&gt;  {1}&quot;, byteValue, result);\n   }           \n   // The example displays the following output:\n   //       0      --&gt;  False\n   //       100    --&gt;  True\n   //       200    --&gt;  True\n   //       255    --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#12\">      byte[] bytes = { Byte.MinValue, 100, 200, Byte.MaxValue };\n      bool result;\n      \n      foreach (byte byteValue in bytes)\n      {\n         result = Convert.ToBoolean(byteValue); \n         Console.WriteLine(&quot;{0,-5}  --&gt;  {1}&quot;, byteValue, result);\n      }           \n      // The example displays the following output:\n      //       0      --&gt;  False\n      //       100    --&gt;  True\n      //       200    --&gt;  True\n      //       255    --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#12\">      Dim bytes() As Byte = { Byte.MinValue, 100, 200, Byte.MaxValue }\n      Dim result As Boolean\n      \n      For Each byteValue As Byte In bytes\n         result = Convert.ToBoolean(byteValue) \n         Console.WriteLine(&quot;{0,-5}  --&gt;  {1}&quot;, byteValue, result)\n      Next           \n      &#39; The example displays the following output:\n      &#39;       0      --&gt;  False\n      &#39;       100    --&gt;  True\n      &#39;       200    --&gt;  True\n      &#39;       255    --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates that an attempt to convert a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to a Boolean type throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#20\">public:\n   void ConvertBoolean()\n   {\n      const int year = 1979;\n      const int month = 7;\n      const int day = 28;\n      const int hour = 13;\n      const int minute = 26;\n      const int second = 15;\n      const int millisecond = 53;\n      DateTime dateTime( year, month, day, hour,\n         minute, second, millisecond );\n      bool boolVal;\n      \n      // System::InvalidCastException is always thrown.\n      try\n      {\n         boolVal = System::Convert::ToBoolean( dateTime );\n      }\n      catch ( System::InvalidCastException^ ) \n      {\n         System::Console::WriteLine( &quot;Conversion from DateTime to Boolean &quot;+\n            &quot;is not supported by the .NET Framework.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#20\">\t\tpublic void ConvertBoolean() {\n\t\t\tconst int year\t\t\t= 1979;\n\t\t\tconst int month\t\t\t= 7;   \n\t\t\tconst int day\t\t\t= 28;\n\t\t\tconst int hour\t\t\t= 13;\n\t\t\tconst int minute\t\t= 26;\n\t\t\tconst int second\t\t= 15;\n\t\t\tconst int millisecond\t= 53;\n\n\t\t\tDateTime dateTime = new DateTime(year, month, day, hour,\n\t\t\t\t\t\t\t\t\t\tminute, second, millisecond);\n\t\t\t\n\t\t\tbool boolVal;\n\n\t\t\t// System.InvalidCastException is always thrown.\n\t\t\ttry {\n\t\t\t\tboolVal = System.Convert.ToBoolean(dateTime);\n\t\t\t}\n\t\t\tcatch (System.InvalidCastException) {\n\t\t\t\tSystem.Console.WriteLine(&quot;Conversion from DateTime to &quot; +\n\t\t\t\t\t&quot;Boolean is not supported by the .NET Framework.&quot;);\n\t\t\t}\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#20\">     Public Sub ConvertBoolean()\n         Const year As Integer = 1979\n         Const month As Integer = 7\n         Const day As Integer = 28\n         Const hour As Integer = 13\n         Const minute As Integer = 26\n         Const second As Integer = 15\n         Const millisecond As Integer = 53\n\n         Dim dateTime As New DateTime(year, month, day, hour, minute, _\n                                      second, millisecond)\n\n         Dim boolVal As Boolean\n\n         &#39; System.InvalidCastException is always thrown.\n         Try\n             boolVal = System.Convert.ToBoolean(dateTime)\n         Catch exception As System.InvalidCastException\n             System.Console.WriteLine(&quot;Conversion from DateTime to &quot; + _\n                     &quot;Boolean is not supported by the .NET Framework.&quot;)\n         End Try\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#2\">      array&lt;Decimal&gt;^ numbers = gcnew array&lt;Decimal&gt; { Decimal::MinValue, (Decimal) -12034.87, \n                                                       (Decimal) -100, (Decimal) 0, (Decimal) 300, \n                                                       (Decimal) 6790823.45, Decimal::MaxValue };\n      bool result;\n      \n      for each (Decimal number in numbers)\n      {\n         result = Convert::ToBoolean(number); \n         Console::WriteLine(&quot;{0,-30}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       -79228162514264337593543950335  --&gt;  True\n      //       -12034.87                       --&gt;  True\n      //       -100                            --&gt;  True\n      //       0                               --&gt;  False\n      //       300                             --&gt;  True\n      //       6790823.45                      --&gt;  True\n      //       79228162514264337593543950335   --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#2\">      decimal[] numbers = { Decimal.MinValue, -12034.87m, -100m, 0m, \n                                   300m, 6790823.45m, Decimal.MaxValue };\n      bool result;\n      \n      foreach (decimal number in numbers)\n      {\n         result = Convert.ToBoolean(number); \n         Console.WriteLine(&quot;{0,-30}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       -79228162514264337593543950335  --&gt;  True\n      //       -12034.87                       --&gt;  True\n      //       -100                            --&gt;  True\n      //       0                               --&gt;  False\n      //       300                             --&gt;  True\n      //       6790823.45                      --&gt;  True\n      //       79228162514264337593543950335   --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#2\">      Dim numbers() As Decimal = { Decimal.MinValue, -12034.87d, -100d, _\n                                   0d, 300d, 6790823.45d, Decimal.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As Decimal In numbers\n         result = Convert.ToBoolean(number) \n         Console.WriteLine(&quot;{0,-30}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       -79228162514264337593543950335  --&gt;  True\n      &#39;       -12034.87                       --&gt;  True\n      &#39;       -100                            --&gt;  True\n      &#39;       0                               --&gt;  False\n      &#39;       300                             --&gt;  True\n      &#39;       6790823.45                      --&gt;  True\n      &#39;       79228162514264337593543950335   --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a Boolean to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> and a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> to a Boolean value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#1\">public:\n   void ConvertDoubleBool( double doubleVal )\n   {\n      bool boolVal;\n      \n      // Double to bool conversion cannot overflow.\n      boolVal = System::Convert::ToBoolean( doubleVal );\n      System::Console::WriteLine( &quot; {0} as a Boolean is: {1}.&quot;,\n         doubleVal, boolVal );\n      \n      // bool to double conversion cannot overflow.\n      doubleVal = System::Convert::ToDouble( boolVal );\n      System::Console::WriteLine( &quot; {0} as a double is: {1}.&quot;,\n         boolVal, doubleVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#1\">\t\tpublic void ConvertDoubleBool(double doubleVal) {\n\t\t\tbool\tboolVal;\n\t\t\t// Double to bool conversion cannot overflow.\n\t\t\tboolVal = System.Convert.ToBoolean(doubleVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a Boolean is: {1}.&quot;,\n\t\t\t\tdoubleVal, boolVal);\n\n\t\t\t// bool to double conversion cannot overflow.\n\t\t\tdoubleVal = System.Convert.ToDouble(boolVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}.&quot;,\n\t\t\t\tboolVal, doubleVal);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#1\">     Public Sub ConvertDoubleBool(ByVal doubleVal As Double)\n         Dim boolVal As Boolean\n\n         &#39;Double to Boolean conversion cannot overflow.\n         boolVal = System.Convert.ToBoolean(doubleVal)\n         System.Console.WriteLine(&quot;{0} as a Boolean is: {1}.&quot;, _\n                                   doubleVal, boolVal)\n\n         &#39;Boolean to Double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(boolVal)\n         System.Console.WriteLine(&quot;{0} as a Double is: {1}.&quot;, _\n                                   boolVal, doubleVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#3\">   array&lt;Int16&gt;^ numbers = gcnew array&lt;Int16&gt; { Int16::MinValue, -10000, -154, 0, 216, 21453, \n                                          Int16::MaxValue };\n   bool result;\n      \n   for each (Int16 number in numbers)\n   {\n      result = Convert::ToBoolean(number);                                 \n      Console::WriteLine(&quot;{0,-7:N0}  --&gt;  {1}&quot;, number, result);\n   }\n   // The example displays the following output:\n   //       -32,768  --&gt;  True\n   //       -10,000  --&gt;  True\n   //       -154     --&gt;  True\n   //       0        --&gt;  False\n   //       216      --&gt;  True\n   //       21,453   --&gt;  True\n   //       32,767   --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#3\">      short[] numbers = { Int16.MinValue, -10000, -154, 0, 216, 21453, \n                          Int16.MaxValue };\n      bool result;\n      \n      foreach (short number in numbers)\n      {\n         result = Convert.ToBoolean(number);                                 \n         Console.WriteLine(&quot;{0,-7:N0}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       -32,768  --&gt;  True\n      //       -10,000  --&gt;  True\n      //       -154     --&gt;  True\n      //       0        --&gt;  False\n      //       216      --&gt;  True\n      //       21,453   --&gt;  True\n      //       32,767   --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#3\">      Dim numbers() As Short = { Int16.MinValue, -10000, -154, 0, 216, _\n                                 21453, Int16.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As Short In numbers\n         result = Convert.ToBoolean(number)                                 \n         Console.WriteLine(&quot;{0,-7:N0}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       -32,768  --&gt;  True\n      &#39;       -10,000  --&gt;  True\n      &#39;       -154     --&gt;  True\n      &#39;       0        --&gt;  False\n      &#39;       216      --&gt;  True\n      &#39;       21,453   --&gt;  True\n      &#39;       32,767   --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#4\">   array&lt;int&gt;^ numbers = gcnew array&lt;int&gt; { Int32::MinValue, -201649, -68, 0, 612, 4038907, \n                                            Int32::MaxValue };\n   bool result;\n      \n   for each (int number in numbers)\n   {\n      result = Convert::ToBoolean(number);                                 \n      Console::WriteLine(&quot;{0,-15:N0}  --&gt;  {1}&quot;, number, result);\n   }\n   // The example displays the following output:\n   //       -2,147,483,648   --&gt;  True\n   //       -201,649         --&gt;  True\n   //       -68              --&gt;  True\n   //       0                --&gt;  False\n   //       612              --&gt;  True\n   //       4,038,907        --&gt;  True\n   //       2,147,483,647    --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#4\">      int[] numbers = { Int32.MinValue, -201649, -68, 0, 612, 4038907, \n                        Int32.MaxValue };\n      bool result;\n      \n      foreach (int number in numbers)\n      {\n         result = Convert.ToBoolean(number);                                 \n         Console.WriteLine(&quot;{0,-15:N0}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       -2,147,483,648   --&gt;  True\n      //       -201,649         --&gt;  True\n      //       -68              --&gt;  True\n      //       0                --&gt;  False\n      //       612              --&gt;  True\n      //       4,038,907        --&gt;  True\n      //       2,147,483,647    --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#4\">      Dim numbers() As Integer = { Int32.MinValue, -201649, -68, 0, 612, _\n                                   4038907, Int32.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As Integer In numbers\n         result = Convert.ToBoolean(number)                                 \n         Console.WriteLine(&quot;{0,-15:N0}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       -2,147,483,648   --&gt;  True\n      &#39;       -201,649         --&gt;  True\n      &#39;       -68              --&gt;  True\n      &#39;       0                --&gt;  False\n      &#39;       612              --&gt;  True\n      &#39;       4,038,907        --&gt;  True\n      &#39;       2,147,483,647    --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#5\">   array&lt;Int64&gt;^ numbers = gcnew array&lt;Int64&gt; { Int64::MinValue, -2016493, -689, 0, 6121, \n                                              403890774, Int64::MaxValue };\n   bool result;\n      \n   for each (Int64 number in numbers)\n   {\n      result = Convert::ToBoolean(number);                                 \n      Console::WriteLine(&quot;{0,-26:N0}  --&gt;  {1}&quot;, number, result);\n   }\n   // The example displays the following output:\n   //       -9,223,372,036,854,775,808  --&gt;  True\n   //       -2,016,493                  --&gt;  True\n   //       -689                        --&gt;  True\n   //       0                           --&gt;  False\n   //       6,121                       --&gt;  True\n   //       403,890,774                 --&gt;  True\n   //       9,223,372,036,854,775,807   --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#5\">      long[] numbers = { Int64.MinValue, -2016493, -689, 0, 6121, \n                         403890774, Int64.MaxValue };\n      bool result;\n      \n      foreach (long number in numbers)\n      {\n         result = Convert.ToBoolean(number);                                 \n         Console.WriteLine(&quot;{0,-26:N0}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       -9,223,372,036,854,775,808  --&gt;  True\n      //       -2,016,493                  --&gt;  True\n      //       -689                        --&gt;  True\n      //       0                           --&gt;  False\n      //       6,121                       --&gt;  True\n      //       403,890,774                 --&gt;  True\n      //       9,223,372,036,854,775,807   --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#5\">      Dim numbers() As Long = { Int64.MinValue, -2016493, -689, 0, 6121, _\n                                403890774, Int64.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As Long In numbers\n         result = Convert.ToBoolean(number)                                 \n         Console.WriteLine(&quot;{0,-26:N0}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       -9,223,372,036,854,775,808  --&gt;  True\n      &#39;       -2,016,493                  --&gt;  True\n      &#39;       -689                        --&gt;  True\n      &#39;       0                           --&gt;  False\n      &#39;       6,121                       --&gt;  True\n      &#39;       403,890,774                 --&gt;  True\n      &#39;       9,223,372,036,854,775,807   --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a specified object to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> or <code>false</code>, which reflects the value returned by invoking the <span class=\"xref\">stem.IConvertible.ToBoolean*</span> method for the underlying type of <code>value</code>. If <code>value</code> is <code>null</code>, the method returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is a string that does not equal <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion of <code>value</code> to a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of object values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#11\">      array&lt;Object^&gt;^ objects = gcnew array&lt;Object^&gt; { 16.33, -24, 0, &quot;12&quot;, &quot;12.7&quot;, String::Empty, \n                                                      &quot;1String&quot;, &quot;True&quot;, &quot;false&quot;, nullptr, \n                                                      gcnew System::Collections::ArrayList };\n      \n      for each (Object^ obj in objects)\n      {\n         Console::Write(&quot;{0,-40}  --&gt;  &quot;, \n                       obj == nullptr ? &quot;null&quot; :\n                       String::Format(&quot;{0} ({1})&quot;, obj, obj-&gt;GetType()-&gt;Name));\n         try {\n            Console::WriteLine(&quot;{0}&quot;, Convert::ToBoolean((Object^) obj));\n         }   \n         catch (FormatException^) {\n            Console::WriteLine(&quot;Bad Format&quot;);\n         }   \n         catch (InvalidCastException^) {\n            Console::WriteLine(&quot;No Conversion&quot;);\n         }   \n      }     \n      // The example displays the following output:\n      //       16.33 (Double)                            --&gt;  True\n      //       -24 (Int32)                               --&gt;  True\n      //       0 (Int32)                                 --&gt;  False\n      //       12 (String)                               --&gt;  Bad Format\n      //       12.7 (String)                             --&gt;  Bad Format\n      //        (String)                                 --&gt;  Bad Format\n      //       1String (String)                          --&gt;  Bad Format\n      //       True (String)                             --&gt;  True\n      //       false (String)                            --&gt;  False\n      //       null                                      --&gt;  False\n      //       System.Collections.ArrayList (ArrayList)  --&gt;  No Conversion\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#11\">      object[] objects = { 16.33, -24, 0, &quot;12&quot;, &quot;12.7&quot;, String.Empty, \n                           &quot;1String&quot;, &quot;True&quot;, &quot;false&quot;, null, \n                           new System.Collections.ArrayList() };\n      \n      foreach (object obj in objects)\n      {\n         Console.Write(&quot;{0,-40}  --&gt;  &quot;, \n                       obj != null ? \n                       String.Format(&quot;{0} ({1})&quot;, obj, obj.GetType().Name) : \n                       &quot;null&quot;);\n         try {\n            Console.WriteLine(&quot;{0}&quot;, Convert.ToBoolean(obj));\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;Bad Format&quot;);\n         }   \n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No Conversion&quot;);\n         }   \n      }     \n      // The example displays the following output:\n      //       16.33 (Double)                            --&gt;  True\n      //       -24 (Int32)                               --&gt;  True\n      //       0 (Int32)                                 --&gt;  False\n      //       12 (String)                               --&gt;  Bad Format\n      //       12.7 (String)                             --&gt;  Bad Format\n      //        (String)                                 --&gt;  Bad Format\n      //       1String (String)                          --&gt;  Bad Format\n      //       True (String)                             --&gt;  True\n      //       false (String)                            --&gt;  False\n      //       null                                      --&gt;  False\n      //       System.Collections.ArrayList (ArrayList)  --&gt;  No Conversion\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#11\">      Dim objects() As Object = {16.33, -24, 0, &quot;12&quot;, &quot;12.7&quot;, String.Empty, _\n                                 &quot;1String&quot;, &quot;True&quot;, &quot;false&quot;, Nothing, _\n                                 New System.Collections.ArrayList() }\n      For Each obj As Object In objects\n         If obj IsNot Nothing Then\n            Console.Write(&quot;{0,-40}  --&gt;  &quot;, _\n                          String.Format(&quot;{0} ({1})&quot;, obj, obj.GetType().Name))\n         Else\n            Console.Write(&quot;{0,-40}  --&gt;  &quot;, &quot;Nothing&quot;)   \n         End If\n         Try\n            Console.WriteLine(&quot;{0}&quot;, Convert.ToBoolean(obj))\n         Catch e As FormatException\n            Console.WriteLine(&quot;Bad Format&quot;)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No Conversion&quot;)\n         End Try   \n      Next     \n      &#39; The example displays the following output:\n      &#39;       16.33 (Double)                            --&gt;  True\n      &#39;       -24 (Int32)                               --&gt;  True\n      &#39;       0 (Int32)                                 --&gt;  False\n      &#39;       12 (String)                               --&gt;  Bad Format\n      &#39;       12.7 (String)                             --&gt;  Bad Format\n      &#39;        (String)                                 --&gt;  Bad Format\n      &#39;       1String (String)                          --&gt;  Bad Format\n      &#39;       True (String)                             --&gt;  True\n      &#39;       false (String)                            --&gt;  False\n      &#39;       Nothing                                   --&gt;  False\n      &#39;       System.Collections.ArrayList (ArrayList)  --&gt;  No Conversion\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#6\">   array&lt;SByte&gt;^ numbers = gcnew array&lt;SByte&gt; { SByte::MinValue, -1, 0, 10, 100, SByte::MaxValue };\n   bool result;\n      \n   for each (SByte number in numbers)\n   {\n      result = Convert::ToBoolean(number);                                 \n      Console::WriteLine(&quot;{0,-5}  --&gt;  {1}&quot;, number, result);\n   }\n   // The example displays the following output:\n   //       -128   --&gt;  True\n   //       -1     --&gt;  True\n   //       0      --&gt;  False\n   //       10     --&gt;  True\n   //       100    --&gt;  True\n   //       127    --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#6\">      sbyte[] numbers = { SByte.MinValue, -1, 0, 10, 100, SByte.MaxValue };\n      bool result;\n      \n      foreach (sbyte number in numbers)\n      {\n         result = Convert.ToBoolean(number);                                 \n         Console.WriteLine(&quot;{0,-5}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       -128   --&gt;  True\n      //       -1     --&gt;  True\n      //       0      --&gt;  False\n      //       10     --&gt;  True\n      //       100    --&gt;  True\n      //       127    --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#6\">      Dim numbers() As SByte = { SByte.MinValue, -1, 0, 10, 100, SByte.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As SByte In numbers\n         result = Convert.ToBoolean(number)                                 \n         Console.WriteLine(&quot;{0,-5}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       -128   --&gt;  True\n      &#39;       -1     --&gt;  True\n      &#39;       0      --&gt;  False\n      &#39;       10     --&gt;  True\n      &#39;       100    --&gt;  True\n      &#39;       127    --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#7\">   array&lt;float&gt;^ numbers = gcnew array&lt;float&gt; { Single::MinValue, (float) -193.0012, (float) 20e-15f, 0, \n                                                (float) 10551e-10, (float) 100.3398, Single::MaxValue };\n   bool result;\n      \n   for each (float number in numbers)\n   {\n      result = Convert::ToBoolean(number);                                 \n      Console::WriteLine(&quot;{0,-15}  --&gt;  {1}&quot;, number, result);\n   }\n   // The example displays the following output:\n   //       -3.402823E+38    --&gt;  True\n   //       -193.0012        --&gt;  True\n   //       2E-14            --&gt;  True\n   //       0                --&gt;  False\n   //       1.0551E-06       --&gt;  True\n   //       100.3398         --&gt;  True\n   //       3.402823E+38     --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#7\">      float[] numbers = { Single.MinValue, -193.0012f, 20e-15f, 0f, \n                          10551e-10f, 100.3398f, Single.MaxValue };\n      bool result;\n      \n      foreach (float number in numbers)\n      {\n         result = Convert.ToBoolean(number);                                 \n         Console.WriteLine(&quot;{0,-15}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       -3.402823E+38    --&gt;  True\n      //       -193.0012        --&gt;  True\n      //       2E-14            --&gt;  True\n      //       0                --&gt;  False\n      //       1.0551E-06       --&gt;  True\n      //       100.3398         --&gt;  True\n      //       3.402823E+38     --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#7\">      Dim numbers() As Single = { Single.MinValue, -193.0012, 20e-15, 0, _\n                                  10551e-10, 100.3398, Single.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As Single In numbers\n         result = Convert.ToBoolean(number)                                 \n         Console.WriteLine(&quot;{0,-15}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       -3.402823E+38    --&gt;  True\n      &#39;       -193.0012        --&gt;  True\n      &#39;       2E-14            --&gt;  True\n      &#39;       0                --&gt;  False\n      &#39;       1.0551E-06       --&gt;  True\n      &#39;       100.3398         --&gt;  True\n      &#39;       3.402823E+38     --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a logical value to its Boolean equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the value of either <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> equals <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>, or <code>false</code> if <code>value</code> equals <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not equal to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a successful conversion to occur, the <code>value</code> parameter must equal either <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">System.Boolean.TrueString</a>, a constant whose value is <code>True</code>, <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">System.Boolean.FalseString</a>, a constant whose value is <code>False</code>, or it must be <code>null</code>. In comparing <code>value</code> with <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">System.Boolean.TrueString</a> and <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">System.Boolean.FalseString</a>, the method ignores case as well as leading and trailing white space.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.boolean#System_Boolean_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToBoolean method to convert various strings to Boolean values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#1\">using namespace System;\n\nvoid main()\n{\n   array&lt;String^&gt;^ values = gcnew array&lt;String^&gt; { nullptr, String::Empty,\n                                                   &quot;true&quot;, &quot;TrueString&quot;,\n                                                   &quot;False&quot;, &quot;    false    &quot;,\n                                                   &quot;-1&quot;, &quot;0&quot; };\n   for each (String^ value in values) {\n      try\n      {\n         Console::WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value,  \n                           Convert::ToBoolean(value));\n      }\n      catch (FormatException^ e)\n      {\n         Console::WriteLine(&quot;Unable to convert &#39;{0}&#39; to a Boolean.&quot;, value);\n      }\n   }\n}\n// The example displays the following output:\n//       Converted &#39;&#39; to False.\n//       Unable to convert &#39;&#39; to a Boolean.\n//       Converted &#39;true&#39; to True.\n//       Unable to convert &#39;TrueString&#39; to a Boolean.\n//       Converted &#39;False&#39; to False.\n//       Converted &#39;    false    &#39; to False.\n//       Unable to convert &#39;-1&#39; to a Boolean.\n//       Unable to convert &#39;0&#39; to a Boolean.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#1\">using System;\n\npublic class BooleanConversion\n{\n   public static void Main()\n   {\n      String[] values = { null, String.Empty, &quot;true&quot;, &quot;TrueString&quot;, \n                          &quot;False&quot;, &quot;    false    &quot;, &quot;-1&quot;, &quot;0&quot; };\n      foreach (var value in values) {\n         try\n         {\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value,  \n                              Convert.ToBoolean(value));\n         }\n         catch (FormatException)\n         {\n            Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a Boolean.&quot;, value);\n         }\n      }   \n   }\n}\n// The example displays the following output:\n//       Converted &#39;&#39; to False.\n//       Unable to convert &#39;&#39; to a Boolean.\n//       Converted &#39;true&#39; to True.\n//       Unable to convert &#39;TrueString&#39; to a Boolean.\n//       Converted &#39;False&#39; to False.\n//       Converted &#39;    false    &#39; to False.\n//       Unable to convert &#39;-1&#39; to a Boolean.\n//       Unable to convert &#39;0&#39; to a Boolean.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#1\">Module BooleanConversion\n   Public Sub Main()\n      Dim values() As String = { Nothing, String.Empty, &quot;true&quot;, \n                                 &quot;TrueString&quot;, &quot;False&quot;, &quot;    false    &quot;,\n                                 &quot;-1&quot;, &quot;0&quot; }\n      For Each value In values                                 \n         Try\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, _ \n                              Convert.ToBoolean(value))\n         Catch e As FormatException\n            Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a Boolean.&quot;, value)\n         End Try\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Converted &#39;&#39; to False.\n&#39;       Unable to convert &#39;&#39; to a Boolean.\n&#39;       Converted &#39;true&#39; to True.\n&#39;       Unable to convert &#39;TrueString&#39; to a Boolean.\n&#39;       Converted &#39;False&#39; to False.\n&#39;       Converted &#39;    false    &#39; to False.\n&#39;       Unable to convert &#39;-1&#39; to a Boolean.\n&#39;       Unable to convert &#39;0&#39; to a Boolean.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#8\">   array&lt;unsigned short&gt;^ numbers = gcnew array&lt;unsigned short&gt; { UInt16::MinValue, 216, 21453, UInt16::MaxValue };\n   bool result;\n      \n   for each (unsigned short number in numbers)\n   {\n      result = Convert::ToBoolean(number);                                 \n      Console::WriteLine(&quot;{0,-7:N0}  --&gt;  {1}&quot;, number, result);\n   }\n   // The example displays the following output:\n   //       0        --&gt;  False\n   //       216      --&gt;  True\n   //       21,453   --&gt;  True\n   //       65,535   --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#8\">      ushort[] numbers = { UInt16.MinValue, 216, 21453, UInt16.MaxValue };\n      bool result;\n      \n      foreach (ushort number in numbers)\n      {\n         result = Convert.ToBoolean(number);                                 \n         Console.WriteLine(&quot;{0,-7:N0}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       0        --&gt;  False\n      //       216      --&gt;  True\n      //       21,453   --&gt;  True\n      //       65,535   --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#8\">      Dim numbers() As UShort = { UInt16.MinValue, 216, 21453, UInt16.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As UShort In numbers\n         result = Convert.ToBoolean(number)                                 \n         Console.WriteLine(&quot;{0,-7:N0}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       0        --&gt;  False\n      &#39;       216      --&gt;  True\n      &#39;       21,453   --&gt;  True\n      &#39;       65,535   --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#9\">   array&lt;UInt32&gt;^ numbers = gcnew array&lt;UInt32&gt; { UInt32::MinValue, 612, 4038907, Int32::MaxValue };\n   bool result;\n      \n   for each (unsigned int number in numbers)\n   {\n      result = Convert::ToBoolean(number);                                 \n      Console::WriteLine(&quot;{0,-15:N0}  --&gt;  {1}&quot;, number, result);\n   }\n   // The example displays the following output:\n   //       0                --&gt;  False\n   //       612              --&gt;  True\n   //       4,038,907        --&gt;  True\n   //       2,147,483,647    --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#9\">      uint[] numbers = { UInt32.MinValue, 612, 4038907, Int32.MaxValue };\n      bool result;\n      \n      foreach (uint number in numbers)\n      {\n         result = Convert.ToBoolean(number);                                 \n         Console.WriteLine(&quot;{0,-15:N0}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       0                --&gt;  False\n      //       612              --&gt;  True\n      //       4,038,907        --&gt;  True\n      //       2,147,483,647    --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#9\">      Dim numbers() As UInteger = { UInt32.MinValue, 612, 4038907, Int32.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As UInteger In numbers\n         result = Convert.ToBoolean(number)                                 \n         Console.WriteLine(&quot;{0,-15:N0}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       0                --&gt;  False\n      &#39;       612              --&gt;  True\n      &#39;       4,038,907        --&gt;  True\n      &#39;       2,147,483,647    --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> values to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToBoolean#10\">      array&lt;UInt64&gt;^ numbers = gcnew array&lt;UInt64&gt; { UInt64::MinValue, 6121, 403890774, UInt64::MaxValue };\n      bool result;\n      \n      for each (UInt64 number in numbers)\n      {\n         result = Convert::ToBoolean(number);                                 \n         Console::WriteLine(&quot;{0,-26:N0}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       0                           --&gt;  False\n      //       6,121                       --&gt;  True\n      //       403,890,774                 --&gt;  True\n      //       18,446,744,073,709,551,615  --&gt;  True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBoolean#10\">      ulong[] numbers = { UInt64.MinValue, 6121, 403890774, UInt64.MaxValue };\n      bool result;\n      \n      foreach (ulong number in numbers)\n      {\n         result = Convert.ToBoolean(number);                                 \n         Console.WriteLine(&quot;{0,-26:N0}  --&gt;  {1}&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       0                           --&gt;  False\n      //       6,121                       --&gt;  True\n      //       403,890,774                 --&gt;  True\n      //       18,446,744,073,709,551,615  --&gt;  True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToBoolean#10\">      Dim numbers() As ULong = { UInt64.MinValue, 6121, 403890774, UInt64.MaxValue }\n      Dim result As Boolean\n      \n      For Each number As ULong In numbers\n         result = Convert.ToBoolean(number)                                 \n         Console.WriteLine(&quot;{0,-26:N0}  --&gt;  {1}&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       0                           --&gt;  False\n      &#39;       6,121                       --&gt;  True\n      &#39;       403,890,774                 --&gt;  True\n      &#39;       18,446,744,073,709,551,615  --&gt;  True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> or <code>false</code>, which reflects the value returned by invoking the <span class=\"xref\">stem.IConvertible.ToBoolean*</span> method for the underlying type of <code>value</code>. If <code>value</code> is <code>null</code>, the method returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is a string that does not equal <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion of <code>value</code> to a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. The base types ignore the <code>provider</code> parameter; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> and a class that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Objects of the class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> hold an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. An object of each class is passed to the ToBoolean method. This method returns <code>true</code> if any of the non-discarded array values are non-zero. The <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object determines how elements are discarded for this calculation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToXXX_Object_IFP#1\">using System;\nusing System.Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum AverageType : short\n{\n    None = 0,\n    GeometricMean = 1,\n    ArithmeticMean = 2,\n    Median = 3\n};\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\npublic class AverageInfo : IFormatProvider\n{\n    protected AverageType AvgType;\n\n    // Specify the type of averaging in the constructor.\n    public AverageInfo( AverageType avgType )\n    {\n        this.AvgType = avgType;\n    }\n\n    // This method returns a reference to the containing object \n    // if an object of AverageInfo type is requested. \n    public object GetFormat( Type argType )\n    {\n        if ( argType == typeof( AverageInfo ) )\n            return this;\n        else\n            return null;\n    }\n\n    // Use this property to set or get the type of averaging.\n    public AverageType TypeOfAverage        \n    {\n        get { return this.AvgType; }\n        set { this.AvgType = value; }\n    }\n}\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \npublic class DataSet : IConvertible\n{\n    protected ArrayList     data;\n    protected AverageInfo   defaultProvider;\n        \n    // Construct the object and add an initial list of values.\n    // Create a default format provider.\n    public DataSet( params double[ ] values )\n    {\n        data = new ArrayList( values );\n        defaultProvider = \n            new AverageInfo( AverageType.ArithmeticMean );\n    }\n        \n    // Add additional values with this method.\n    public int Add( double value )\n    {\n        data.Add( value );\n        return data.Count;\n    }\n        \n    // Get, set, and add values with this indexer property.\n    public double this[ int index ]        \n    {\n        get\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                return (double)data[ index ];\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.get] Index out of range.&quot; );\n        }\n        set\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                data[ index ] = value;\n\n            else if( index == data.Count )\n                data.Add( value );\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.set] Index out of range.&quot; );\n        }\n    }\n        \n    // This property returns the number of elements in the object.\n    public int Count        \n    {\n        get { return data.Count; }\n    }\n\n    // This method calculates the average of the object&#39;s elements.\n    protected double Average( AverageType avgType )\n    {\n        double  SumProd;\n\n        if( data.Count == 0 ) \n            return 0.0;\n\n        switch( avgType )\n        {\n            case AverageType.GeometricMean:\n\n                SumProd = 1.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd *= (double)data[ Index ];\n                \n                // This calculation will not fail with negative \n                // elements.\n                return Math.Sign( SumProd ) * Math.Pow( \n                    Math.Abs( SumProd ), 1.0 / data.Count );\n\n            case AverageType.ArithmeticMean:\n\n                SumProd = 0.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd += (double)data[ Index ];\n\n                return SumProd / data.Count;\n\n            case AverageType.Median:\n\n                if( data.Count % 2 == 0 )\n                    return ( (double)data[ data.Count / 2 ] + \n                        (double)data[ data.Count / 2 - 1 ] ) / 2.0;\n                else\n                    return (double)data[ data.Count / 2 ];\n\n            default:\n                return 0.0;\n        }\n    }\n\n    // Get the AverageInfo object from the caller&#39;s format provider,\n    // or use the local default.\n    protected AverageInfo GetAverageInfo( IFormatProvider provider )\n    {\n        AverageInfo avgInfo = null;\n\n        if( provider != null )\n            avgInfo = (AverageInfo)provider.GetFormat( \n                typeof( AverageInfo ) );\n\n        if ( avgInfo == null )\n            return defaultProvider;\n        else\n            return avgInfo;\n    }\n\n    // Calculate the average and limit the range.\n    protected double CalcNLimitAverage( double min, double max, \n        IFormatProvider provider )\n    {\n        // Get the format provider and calculate the average.\n        AverageInfo avgInfo = GetAverageInfo( provider );\n        double avg = Average( avgInfo.TypeOfAverage );\n\n        // Limit the range, based on the minimum and maximum values \n        // for the type.\n        return avg &gt; max ? max : avg &lt; min ? min : avg;\n\n    }\n\n    // The following elements are required by IConvertible.\n\n    // None of these conversion functions throw exceptions. When\n    // the data is out of range for the type, the appropriate\n    // MinValue or MaxValue is used.\n    public TypeCode GetTypeCode( )\n    {\n        return TypeCode.Object;\n    }\n\n    public bool ToBoolean( IFormatProvider provider )\n    {\n        // ToBoolean is false if the dataset is empty.\n        if( data.Count &lt;= 0 )\n            return false;\n\n        // For median averaging, ToBoolean is true if any \n        // non-discarded elements are nonzero.\n        else if( AverageType.Median == \n            GetAverageInfo( provider ).TypeOfAverage )\n        {\n            if (data.Count % 2 == 0 )\n                return ( (double)data[ data.Count / 2 ] != 0.0 || \n                    (double)data[ data.Count / 2 - 1 ] != 0.0 );\n            else\n                return (double)data[ data.Count / 2 ] != 0.0;\n        }\n\n        // For arithmetic or geometric mean averaging, ToBoolean is \n        // true if any element of the dataset is nonzero.  \n        else\n        {\n            for( int Index = 0; Index &lt; data.Count; Index++ )\n                if( (double)data[ Index ] != 0.0 ) \n                    return true;\n            return false;\n        }\n    }\n\n    public byte ToByte( IFormatProvider provider )\n    {\n        return Convert.ToByte( CalcNLimitAverage( \n            Byte.MinValue, Byte.MaxValue, provider ) );\n    }\n\n    public char ToChar( IFormatProvider provider )\n    {\n        return Convert.ToChar( Convert.ToUInt16( CalcNLimitAverage( \n            Char.MinValue, Char.MaxValue, provider ) ) );\n    }\n\n    // Convert to DateTime by adding the calculated average as \n    // seconds to the current date and time. A valid DateTime is \n    // always returned.\n    public DateTime ToDateTime( IFormatProvider provider )\n    {\n        double seconds = \n            Average( GetAverageInfo( provider ).TypeOfAverage );\n        try\n        {\n            return DateTime.Now.AddSeconds( seconds );\n        }\n        catch( ArgumentOutOfRangeException )\n        {\n            return seconds &lt; 0.0 ? DateTime.MinValue : DateTime.MaxValue;\n        }\n    }\n\n    public decimal ToDecimal( IFormatProvider provider )\n    {\n        // The Double conversion rounds Decimal.MinValue and \n        // Decimal.MaxValue to invalid Decimal values, so the \n        // following limits must be used.\n        return Convert.ToDecimal( CalcNLimitAverage( \n            -79228162514264330000000000000.0, \n            79228162514264330000000000000.0, provider ) );\n    }\n\n    public double ToDouble( IFormatProvider provider )\n    {\n        return Average( GetAverageInfo(provider).TypeOfAverage );\n    }\n\n    public short ToInt16( IFormatProvider provider )\n    {\n        return Convert.ToInt16( CalcNLimitAverage( \n            Int16.MinValue, Int16.MaxValue, provider ) );\n    }\n\n    public int ToInt32( IFormatProvider provider )\n    {\n        return Convert.ToInt32( CalcNLimitAverage( \n            Int32.MinValue, Int32.MaxValue, provider ) );\n    }\n\n    public long ToInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds Int64.MinValue and \n        // Int64.MaxValue to invalid Int64 values, so the following \n        // limits must be used.\n        return Convert.ToInt64( CalcNLimitAverage( \n            -9223372036854775000, 9223372036854775000, provider ) );\n    }\n\n    public SByte ToSByte( IFormatProvider provider )\n    {\n        return Convert.ToSByte( CalcNLimitAverage( \n            SByte.MinValue, SByte.MaxValue, provider ) );\n    }\n\n    public float ToSingle( IFormatProvider provider )\n    {\n        return Convert.ToSingle( CalcNLimitAverage( \n            Single.MinValue, Single.MaxValue, provider ) );\n    }\n\n    public UInt16 ToUInt16( IFormatProvider provider )\n    {\n        return Convert.ToUInt16( CalcNLimitAverage( \n            UInt16.MinValue, UInt16.MaxValue, provider ) );\n    }\n\n    public UInt32 ToUInt32( IFormatProvider provider )\n    {\n        return Convert.ToUInt32( CalcNLimitAverage( \n            UInt32.MinValue, UInt32.MaxValue, provider ) );\n    }\n\n    public UInt64 ToUInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds UInt64.MaxValue to an invalid\n        // UInt64 value, so the following limit must be used.\n        return Convert.ToUInt64( CalcNLimitAverage( \n            0, 18446744073709550000.0, provider ) );\n    }\n\n    public object ToType( Type conversionType, \n        IFormatProvider provider )\n    {\n        return Convert.ChangeType( Average( \n            GetAverageInfo( provider ).TypeOfAverage ), \n            conversionType );\n    }\n\n    public string ToString( IFormatProvider provider )\n    {\n        AverageType avgType = GetAverageInfo( provider ).TypeOfAverage;\n        return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, \n            Average( avgType ) );\n    }\n}\n   \nclass IConvertibleProviderDemo\n{\n    // Display a DataSet with three different format providers.\n    public static void DisplayDataSet( DataSet ds )\n    {\n        string      fmt    = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n        AverageInfo median = new AverageInfo( AverageType.Median );\n        AverageInfo geMean = \n            new AverageInfo( AverageType.GeometricMean );\n\n         // Display the dataset elements.\n        if( ds.Count &gt; 0 )\n        {\n            Console.Write( &quot;<br>DataSet: [{0}&quot;, ds[ 0 ] );\n            for( int iX = 1; iX &lt; ds.Count; iX++ )\n                Console.Write( &quot;, {0}&quot;, ds[ iX ] );\n            Console.WriteLine( &quot;]<br>&quot; );\n        }\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, \n            &quot;Geometric Mean&quot;, &quot;Median&quot;);\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, \n            &quot;--------------&quot;, &quot;------&quot;);\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, \n            Convert.ToBoolean( ds, null ), \n            Convert.ToBoolean( ds, geMean ), \n            Convert.ToBoolean( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToByte&quot;, \n            Convert.ToByte( ds, null ), \n            Convert.ToByte( ds, geMean ), \n            Convert.ToByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToChar&quot;, \n            Convert.ToChar( ds, null ), \n            Convert.ToChar( ds, geMean ), \n            Convert.ToChar( ds, median ) );\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; +\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, \n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, null ), \n            Convert.ToDateTime( ds, geMean ), \n            Convert.ToDateTime( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, \n            Convert.ToDecimal( ds, null ), \n            Convert.ToDecimal( ds, geMean ), \n            Convert.ToDecimal( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, \n            Convert.ToDouble( ds, null ), \n            Convert.ToDouble( ds, geMean ), \n            Convert.ToDouble( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, \n            Convert.ToInt16( ds, null ), \n            Convert.ToInt16( ds, geMean ), \n            Convert.ToInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, \n            Convert.ToInt32( ds, null ), \n            Convert.ToInt32( ds, geMean ), \n            Convert.ToInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, \n            Convert.ToInt64( ds, null ), \n            Convert.ToInt64( ds, geMean ), \n            Convert.ToInt64( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, \n            Convert.ToSByte( ds, null ), \n            Convert.ToSByte( ds, geMean ), \n            Convert.ToSByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, \n            Convert.ToSingle( ds, null ), \n            Convert.ToSingle( ds, geMean ), \n            Convert.ToSingle( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, \n            Convert.ToUInt16( ds, null ), \n            Convert.ToUInt16( ds, geMean ), \n            Convert.ToUInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, \n            Convert.ToUInt32( ds, null ), \n            Convert.ToUInt32( ds, geMean ), \n            Convert.ToUInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, \n            Convert.ToUInt64( ds, null ), \n            Convert.ToUInt64( ds, geMean ), \n            Convert.ToUInt64( ds, median ) );\n    }\n   \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods &quot; +\n            &quot;<br>generates the following output. The example &quot; +\n            &quot;displays the values <br>returned by the methods, &quot; +\n            &quot;using several IFormatProvider objects.<br>&quot; );\n          \n        DataSet ds1 = new DataSet( \n            10.5, 22.2, 45.9, 88.7, 156.05, 297.6 );\n        DisplayDataSet( ds1 );\n          \n        DataSet ds2 = new DataSet( \n            359999.95, 425000, 499999.5, 775000, 1695000 );\n        DisplayDataSet( ds2 );\n    }\n}\n\n/*\nThis example of the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:04:12 2003-05-13 15:03:28 2003-05-13 15:03:35\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 07:39:08 2003-05-20 22:28:45 2003-05-19 09:55:48\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert.ToXXX_Object_IFP#1\">using namespace System;\nusing namespace System::Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum class AverageType : short\n{\n   None = 0,\n   GeometricMean = 1,\n   ArithmeticMean = 2,\n   Median = 3\n};\n\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\nref class AverageInfo: public IFormatProvider\n{\nprotected:\n   AverageType AvgType;\n\npublic:\n\n   // Specify the type of averaging in the constructor.\n   AverageInfo( AverageType avgType )\n   {\n      this-&gt;AvgType = avgType;\n   }\n\n\n   // This method returns a reference to the containing object \n   // if an object of AverageInfo type is requested. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      if ( argType == AverageInfo::typeid)\n            return this;\n      else\n            return (Object^)0;\n   }\n\n\n   property AverageType TypeOfAverage \n   {\n\n      // Use this property to set or get the type of averaging.\n      AverageType get()\n      {\n         return this-&gt;AvgType;\n      }\n\n      void set( AverageType value )\n      {\n         this-&gt;AvgType = value;\n      }\n\n   }\n\n};\n\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \nref class DataSet: public IConvertible\n{\nprivate:\n   static Object^ null = nullptr;\n\nprotected:\n   ArrayList^ data;\n   AverageInfo^ defaultProvider;\n\n   // This method unboxes a boxed double.\n   double UnBoxDouble( Object^ obj )\n   {\n      return  *static_cast&lt;double^&gt;(obj);\n   }\n\n\npublic:\n\n   // Construct the object and add an initial list of values.\n   // Create a default format provider.\n   DataSet( ... array&lt;Double&gt;^values )\n   {\n      data = gcnew ArrayList( (Array^)values );\n      defaultProvider = gcnew AverageInfo( AverageType::ArithmeticMean );\n   }\n\n\n   // Add additional values with this method.\n   int Add( double value )\n   {\n      data-&gt;Add( value );\n      return data-&gt;Count;\n   }\n\n\n   property double Item[ int ]\n   {\n\n      // Get, set, and add values with this indexer property.\n      double get( int index )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  return UnBoxDouble( data[ index ] );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.get] Index out of range.&quot; );\n      }\n\n      void set( int index, double value )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  data[ index ] = value;\n         else\n         if ( index == data-&gt;Count )\n                  data-&gt;Add( value );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.set] Index out of range.&quot; );\n      }\n\n   }\n\n   property int Count \n   {\n\n      // This property returns the number of elements in the object.\n      int get()\n      {\n         return data-&gt;Count;\n      }\n\n   }\n\nprotected:\n\n   // This method calculates the average of the object&#39;s elements.\n   double Average( AverageType avgType )\n   {\n      double SumProd;\n      if ( data-&gt;Count == 0 )\n            return 0.0;\n\n      switch ( avgType )\n      {\n         case AverageType::GeometricMean:\n            SumProd = 1.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd *= UnBoxDouble( data[ Index ] );\n            \n            // This calculation will not fail with negative \n            // elements.\n            return Math::Sign( SumProd ) * Math::Pow( Math::Abs( SumProd ), 1.0 / data-&gt;Count );\n\n         case AverageType::ArithmeticMean:\n            SumProd = 0.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd += UnBoxDouble( data[ Index ] );\n            return SumProd / data-&gt;Count;\n\n         case AverageType::Median:\n            if ( data-&gt;Count % 2 == 0 )\n                        return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) + UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] )) / 2.0;\n            else\n                        return UnBoxDouble( data[ data-&gt;Count / 2 ] );\n\n         default:\n            return 0.0;\n      }\n   }\n\n\n   // Get the AverageInfo object from the caller&#39;s format provider,\n   // or use the local default.\n   AverageInfo^ GetAverageInfo( IFormatProvider^ provider )\n   {\n      AverageInfo^ avgInfo = nullptr;\n      if ( provider != nullptr )\n            avgInfo = static_cast&lt;AverageInfo^&gt;(provider-&gt;GetFormat( AverageInfo::typeid ));\n\n      if ( avgInfo == nullptr )\n            return defaultProvider;\n      else\n            return avgInfo;\n   }\n\n\n   // Calculate the average and limit the range.\n   double CalcNLimitAverage( double min, double max, IFormatProvider^ provider )\n   {\n      \n      // Get the format provider and calculate the average.\n      AverageInfo^ avgInfo = GetAverageInfo( provider );\n      double avg = Average( avgInfo-&gt;TypeOfAverage );\n      \n      // Limit the range, based on the minimum and maximum values \n      // for the type.\n      return avg &gt; max ? max : avg &lt; min ? min : avg;\n   }\n\n\npublic:\n\n   // The following elements are required by IConvertible.\n   // None of these conversion functions throw exceptions. When\n   // the data is out of range for the type, the appropriate\n   // MinValue or MaxValue is used.\n   virtual TypeCode GetTypeCode()\n   {\n      return TypeCode::Object;\n   }\n\n   virtual bool ToBoolean( IFormatProvider^ provider )\n   {\n      \n      // ToBoolean is false if the dataset is empty.\n      if ( data-&gt;Count &lt;= 0 )\n            return false;\n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      else\n      \n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      if ( AverageType::Median == GetAverageInfo( provider )-&gt;TypeOfAverage )\n      {\n         if ( data-&gt;Count % 2 == 0 )\n                  return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0 || UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] ) != 0.0);\n         else\n                  return UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0;\n      }\n      // For arithmetic or geometric mean averaging, ToBoolean is \n      // true if any element of the dataset is nonzero.  \n      else\n      {\n         for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n            if ( UnBoxDouble( data[ Index ] ) != 0.0 )\n                        return true;\n         return false;\n      }\n   }\n\n   virtual Byte ToByte( IFormatProvider^ provider )\n   {\n      return Convert::ToByte( CalcNLimitAverage( Byte::MinValue, Byte::MaxValue, provider ) );\n   }\n\n   virtual Char ToChar( IFormatProvider^ provider )\n   {\n      return Convert::ToChar( Convert::ToUInt16( CalcNLimitAverage( Char::MinValue, Char::MaxValue, provider ) ) );\n   }\n\n\n   // Convert to DateTime by adding the calculated average as \n   // seconds to the current date and time. A valid DateTime is \n   // always returned.\n   virtual DateTime ToDateTime( IFormatProvider^ provider )\n   {\n      double seconds = Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n      try\n      {\n         return DateTime::Now.AddSeconds( seconds );\n      }\n      catch ( ArgumentOutOfRangeException^ ) \n      {\n         return seconds &lt; 0.0 ? DateTime::MinValue : DateTime::MaxValue;\n      }\n\n   }\n\n   virtual Decimal ToDecimal( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Decimal.MinValue and \n      // Decimal.MaxValue to invalid Decimal values, so the \n      // following limits must be used.\n      return Convert::ToDecimal( CalcNLimitAverage(  -79228162514264330000000000000.0, 79228162514264330000000000000.0, provider ) );\n   }\n\n   virtual double ToDouble( IFormatProvider^ provider )\n   {\n      return Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n   }\n\n   virtual short ToInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToInt16( CalcNLimitAverage( Int16::MinValue, Int16::MaxValue, provider ) );\n   }\n\n   virtual int ToInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToInt32( CalcNLimitAverage( Int32::MinValue, Int32::MaxValue, provider ) );\n   }\n\n   virtual __int64 ToInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Int64.MinValue and \n      // Int64.MaxValue to invalid Int64 values, so the following \n      // limits must be used.\n      return Convert::ToInt64( CalcNLimitAverage(  -9223372036854775000, 9223372036854775000, provider ) );\n   }\n\n   virtual signed char ToSByte( IFormatProvider^ provider )\n   {\n      return Convert::ToSByte( CalcNLimitAverage( SByte::MinValue, SByte::MaxValue, provider ) );\n   }\n\n   virtual float ToSingle( IFormatProvider^ provider )\n   {\n      return Convert::ToSingle( CalcNLimitAverage( Single::MinValue, Single::MaxValue, provider ) );\n   }\n\n   virtual UInt16 ToUInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt16( CalcNLimitAverage( UInt16::MinValue, UInt16::MaxValue, provider ) );\n   }\n\n   virtual UInt32 ToUInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt32( CalcNLimitAverage( UInt32::MinValue, UInt32::MaxValue, provider ) );\n   }\n\n   virtual UInt64 ToUInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds UInt64.MaxValue to an invalid\n      // UInt64 value, so the following limit must be used.\n      return Convert::ToUInt64( CalcNLimitAverage( 0, 18446744073709550000.0, provider ) );\n   }\n\n   virtual Object^ ToType( Type^ conversionType, IFormatProvider^ provider )\n   {\n      return Convert::ChangeType( Average( GetAverageInfo( provider )-&gt;TypeOfAverage ), conversionType );\n   }\n\n   virtual String^ ToString( IFormatProvider^ provider )\n   {\n      AverageType avgType = GetAverageInfo( provider )-&gt;TypeOfAverage;\n      return String::Format( &quot;( {0}: {1:G10} )&quot;, avgType, Average( avgType ) );\n   }\n\n};\n\n\n// Display a DataSet with three different format providers.\nvoid DisplayDataSet( DataSet^ ds )\n{\n   IFormatProvider^ null = nullptr;\n   String^ fmt = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n   AverageInfo^ median = gcnew AverageInfo( AverageType::Median );\n   AverageInfo^ geMean = gcnew AverageInfo( AverageType::GeometricMean );\n   \n   // Display the dataset elements.\n   if ( ds-&gt;Count &gt; 0 )\n   {\n      Console::Write( &quot;<br>DataSet: [{0}&quot;, ds-&gt;Item[ 0 ] );\n      for ( int iX = 1; iX &lt; ds-&gt;Count; iX++ )\n         Console::Write( &quot;, {0}&quot;, ds-&gt;Item[ iX ] );\n      Console::WriteLine( &quot;]<br>&quot; );\n   }\n\n   Console::WriteLine( fmt, &quot;Convert::&quot;, &quot;Default&quot;, &quot;Geometric Mean&quot;, &quot;Median&quot; );\n   Console::WriteLine( fmt, &quot;---------&quot;, &quot;-------&quot;, &quot;--------------&quot;, &quot;------&quot; );\n   Console::WriteLine( fmt, &quot;ToBoolean&quot;, Convert::ToBoolean( ds, null ), Convert::ToBoolean( ds, geMean ), Convert::ToBoolean( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToByte&quot;, Convert::ToByte( ds, null ), Convert::ToByte( ds, geMean ), Convert::ToByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToChar&quot;, Convert::ToChar( ds, null ), Convert::ToChar( ds, geMean ), Convert::ToChar( ds, median ) );\n   Console::WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot;\n   &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, &quot;ToDateTime&quot;, Convert::ToDateTime( ds, null ), Convert::ToDateTime( ds, geMean ), Convert::ToDateTime( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDecimal&quot;, Convert::ToDecimal( ds, null ), Convert::ToDecimal( ds, geMean ), Convert::ToDecimal( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDouble&quot;, Convert::ToDouble( ds, null ), Convert::ToDouble( ds, geMean ), Convert::ToDouble( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt16&quot;, Convert::ToInt16( ds, null ), Convert::ToInt16( ds, geMean ), Convert::ToInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt32&quot;, Convert::ToInt32( ds, null ), Convert::ToInt32( ds, geMean ), Convert::ToInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt64&quot;, Convert::ToInt64( ds, null ), Convert::ToInt64( ds, geMean ), Convert::ToInt64( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSByte&quot;, Convert::ToSByte( ds, null ), Convert::ToSByte( ds, geMean ), Convert::ToSByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSingle&quot;, Convert::ToSingle( ds, null ), Convert::ToSingle( ds, geMean ), Convert::ToSingle( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt16&quot;, Convert::ToUInt16( ds, null ), Convert::ToUInt16( ds, geMean ), Convert::ToUInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt32&quot;, Convert::ToUInt32( ds, null ), Convert::ToUInt32( ds, geMean ), Convert::ToUInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt64&quot;, Convert::ToUInt64( ds, null ), Convert::ToUInt64( ds, geMean ), Convert::ToUInt64( ds, median ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods &quot;\n   &quot;<br>generates the following output. The example &quot;\n   &quot;displays the values <br>returned by the methods, &quot;\n   &quot;using several IFormatProvider objects.<br>&quot; );\n   \n   // To call a [ParamArray] method in C++, you cannot just\n   // list the parameters, you need to build an array.\n   array&lt;Double&gt;^dataElem = gcnew array&lt;Double&gt;(6);\n   dataElem[ 0 ] = 10.5;\n   dataElem[ 1 ] = 22.2;\n   dataElem[ 2 ] = 45.9;\n   dataElem[ 3 ] = 88.7;\n   dataElem[ 4 ] = 156.05;\n   dataElem[ 5 ] = 297.6;\n   DataSet^ ds1 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds1 );\n   dataElem = gcnew array&lt;Double&gt;(5);\n   dataElem[ 0 ] = 359999.95;\n   dataElem[ 1 ] = 425000;\n   dataElem[ 2 ] = 499999.5;\n   dataElem[ 3 ] = 775000;\n   dataElem[ 4 ] = 1695000;\n   DataSet^ ds2 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds2 );\n}\n\n/*\nThis example of the Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:30:23 2003-05-13 15:29:39 2003-05-13 15:29:47\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 08:05:19 2003-05-20 22:54:57 2003-05-19 10:21:59\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToXXX_Object_IFP#1\">Imports System.Collections\n\nModule IConvertibleProviderDemo\n\n    &#39; Define the types of averaging available in the class \n    &#39; implementing IConvertible.\n    Enum AverageType as Short\n        None = 0\n        GeometricMean = 1\n        ArithmeticMean = 2\n        Median = 3\n    End Enum\n\n    &#39; Pass an instance of this class to methods that require an \n    &#39; IFormatProvider. The class instance determines the type of \n    &#39; average to calculate.\n    Public Class AverageInfo\n        Implements IFormatProvider\n\n        Protected  AvgType      As AverageType\n\n        &#39; Specify the type of averaging in the constructor.\n        Public Sub New( avgType As AverageType )\n            Me.AvgType = avgType\n        End Sub\n\n        &#39; This method returns a reference to the containing object \n        &#39; if an object of AverageInfo type is requested. \n        Public Function GetFormat( argType As Type ) As Object _\n            Implements IFormatProvider.GetFormat\n\n            If argType Is GetType( AverageInfo ) Then\n                Return Me\n            Else\n                Return Nothing\n            End If\n        End Function \n\n        &#39; Use this property to set or get the type of averaging.\n        Public Property TypeOfAverage( ) As AverageType\n            Get\n                Return Me.AvgType\n            End Get\n            Set( ByVal value as AverageType )\n                Me.AvgType = value\n            End Set\n        End Property\n    End Class \n\n    &#39; This class encapsulates an array of Double values and implements \n    &#39; the IConvertible interface. Most of the IConvertible methods \n    &#39; return an average of the array elements in one of three types: \n    &#39; arithmetic mean, geometric mean, or median. \n    Public Class DataSet\n        Implements IConvertible\n\n        Protected data              As ArrayList\n        Protected defaultProvider   As AverageInfo\n           \n        &#39; Construct the object and add an initial list of values.\n        &#39; Create a default format provider.\n        Public Sub New( ParamArray values( ) As Double )\n            data = New ArrayList( values )\n            defaultProvider = New AverageInfo( _\n                AverageType.ArithmeticMean )  \n        End Sub\n           \n        &#39; Add additional values with this method.\n        Public Function Add( value As Double ) As Integer\n            data.Add( value )\n            Return data.Count\n        End Function\n           \n        &#39; Get, set, and add values with this indexer property.\n        Default Public Property Item(index As Integer) As Double\n            Get\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    Return System.Convert.ToDouble( data( index ) )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.get] Index out of range.&quot; )\n                End If\n            End Get\n            Set\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    data( index ) = value\n                 \n                ElseIf index = data.Count Then\n                    data.Add( value )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.set] Index out of range.&quot; )\n                End If\n            End Set\n        End Property\n          \n        &#39; This property returns the number of elements in the object.\n        Public ReadOnly Property Count( ) As Integer\n            Get\n                Return data.Count\n            End Get\n        End Property\n\n        &#39; This method calculates the average of the object&#39;s elements.\n        Protected Function Average( ByVal avgType As AverageType ) As Double\n\n            Dim SumProd As Double \n            Dim Index   As Integer\n\n            If data.Count = 0 Then Return 0.0\n\n            Select Case avgType\n                \n                Case AverageType.GeometricMean\n\n                    SumProd = 1.0\n                    For Index = 0 To data.Count - 1\n                        SumProd *= data( Index )\n                    Next Index\n                    \n                    &#39; This calculation will not fail with negative \n                    &#39; elements.\n                    Return Math.Sign( SumProd ) * Math.Pow( _\n                        Math.Abs( SumProd ), 1.0 / data.Count )\n\n                Case AverageType.ArithmeticMean\n\n                    SumProd = 0.0\n                    For Index = 0 To data.Count - 1\n                        SumProd += data( Index )\n                    Next Index\n\n                    Return SumProd / data.Count \n\n                Case AverageType.Median\n\n                    If data.Count Mod 2 = 0 Then\n                        Return ( data( data.Count \\ 2 ) + _\n                            data( data.Count \\ 2 - 1 ) ) / 2.0\n                    Else\n                        Return data( data.Count \\ 2 ) \n                    End If\n            End Select\n        End Function\n\n        &#39; Get the AverageInfo object from the caller&#39;s format \n        &#39; provider, or use the local default.\n        Protected Function GetAverageInfo( _\n            provider As IFormatProvider ) As AverageInfo\n\n            Dim avgInfo As AverageInfo = Nothing\n\n            If Not provider Is Nothing Then\n                avgInfo = provider.GetFormat( GetType( AverageInfo ) )\n            End If\n\n            Return IIf( avgInfo Is Nothing, defaultProvider, avgInfo )\n            \n        End Function           \n\n        &#39; Calculate the average and limit the range.\n        Protected Function CalcNLimitAverage( min As Double, _\n            max As Double, provider as IFormatProvider ) As Double\n\n            &#39; Get the format provider and calculate the average.\n            Dim avgInfo As AverageInfo = GetAverageInfo( provider )\n            Dim avg As Double = Average( avgInfo.TypeOfAverage )\n\n            &#39; Limit the range, based on the minimum and maximum values \n            &#39; for the type.\n            Return IIf( avg &gt; max, max, IIf( avg &lt; min, min, avg ) )\n\n        End Function\n\n        &#39; The following elements are required by IConvertible.\n\n        &#39; None of these conversion functions throw exceptions. When\n        &#39; the data is out of range for the type, the appropriate\n        &#39; MinValue or MaxValue is used.\n        Public Function GetTypeCode( ) As TypeCode _\n            Implements IConvertible.GetTypeCode\n            Return TypeCode.Object\n        End Function\n\n        Function ToBoolean( ByVal provider As IFormatProvider ) As _\n            Boolean Implements IConvertible.ToBoolean\n\n            &#39; ToBoolean is false if the dataset is empty.\n            If data.Count &lt;= 0 Then\n                Return False\n\n            &#39; For median averaging, ToBoolean is true if any \n            &#39; non-discarded elements are nonzero.\n            ElseIf AverageType.Median = _\n                GetAverageInfo( provider ).TypeOfAverage Then\n\n                If data.Count Mod 2 = 0 Then\n                    Return ( data( data.Count \\ 2 ) &lt;&gt; 0.0 Or _\n                        data( data.Count \\ 2 - 1 ) &lt;&gt; 0.0 )\n                Else\n                    Return data( data.Count \\ 2 ) &lt;&gt; 0.0\n                End If\n\n            &#39; For arithmetic or geometric mean averaging, ToBoolean is \n            &#39; true if any element of the dataset is nonzero.  \n            Else\n                Dim Index As Integer\n                For Index = 0 To data.Count - 1\n                    If data( Index ) &lt;&gt; 0.0 Then Return True\n                Next Index\n                Return False\n            End If\n        End Function\n\n        Function ToByte( ByVal provider As IFormatProvider ) As Byte _\n            Implements IConvertible.ToByte\n            Return Convert.ToByte( CalcNLimitAverage( _\n                Byte.MinValue, Byte.MaxValue, provider ) )\n        End Function\n\n        Function ToChar( ByVal provider As IFormatProvider ) As Char _\n            Implements IConvertible.ToChar\n            Return Convert.ToChar( Convert.ToUInt16( _\n                CalcNLimitAverage( 0.0, &amp;HFFFF, provider ) ) )\n        End Function\n\n        &#39; Convert to DateTime by adding the calculated average as \n        &#39; seconds to the current date and time. A valid DateTime is \n        &#39; always returned.\n        Function ToDateTime( ByVal provider As IFormatProvider ) As _\n            DateTime Implements IConvertible.ToDateTime\n            Dim seconds As Double = Average( _\n                GetAverageInfo( provider ).TypeOfAverage )\n            Try\n                Return DateTime.Now.AddSeconds( seconds )\n            Catch ex As ArgumentOutOfRangeException \n                Return IIf( seconds &lt; 0.0, DateTime.MinValue, _\n                    DateTime.MaxValue )\n            End Try\n        End Function\n\n        Function ToDecimal( ByVal provider As IFormatProvider ) As _\n            Decimal Implements IConvertible.ToDecimal\n\n            &#39; The Double conversion rounds Decimal.MinValue and\n            &#39; Decimal.MaxValue to invalid Decimal values, so the \n            &#39; following limits must be used.\n            Return Convert.ToDecimal( CalcNLimitAverage( _\n                -79228162514264330000000000000.0, _\n                79228162514264330000000000000.0, provider ) )\n        End Function\n\n        Function ToDouble( ByVal provider As IFormatProvider) As _\n            Double Implements IConvertible.ToDouble\n            Return Average( GetAverageInfo( provider ).TypeOfAverage )\n        End Function\n\n        Function ToInt16( ByVal provider As IFormatProvider ) As _\n            Short Implements IConvertible.ToInt16\n            Return Convert.ToInt16( CalcNLimitAverage( _\n                Int16.MinValue, Int16.MaxValue, provider ) )\n        End Function\n\n        Function ToInt32( ByVal provider As IFormatProvider ) As _\n            Integer Implements IConvertible.ToInt32\n            Return Convert.ToInt32( CalcNLimitAverage( _\n                Int32.MinValue, Int32.MaxValue, provider ) )\n        End Function\n\n        Function ToInt64( ByVal provider As IFormatProvider ) As Long _\n            Implements IConvertible.ToInt64\n\n            &#39; The Double conversion rounds Int64.MinValue and \n            &#39; Int64.MaxValue to invalid Long values, so the following \n            &#39; limits must be used.\n            Return Convert.ToInt64( CalcNLimitAverage( _\n                -9223372036854775000, 9223372036854775000, provider ) )\n        End Function\n\n        Function ToSByte( ByVal provider As IFormatProvider ) As _\n            SByte Implements IConvertible.ToSByte\n\n            &#39; SByte.MinValue and SByte.MaxValue are not defined in\n            &#39; Visual Basic.\n            Return Convert.ToSByte( CalcNLimitAverage( _\n                -128, 127, provider ) )\n        End Function\n\n        Function ToSingle( ByVal provider As IFormatProvider ) As _\n            Single Implements IConvertible.ToSingle\n            Return Convert.ToSingle( CalcNLimitAverage( _\n                Single.MinValue, Single.MaxValue, provider ) )\n        End Function\n\n        Function ToUInt16( ByVal provider As IFormatProvider ) As _\n            UInt16 Implements IConvertible.ToUInt16\n\n            &#39; UInt16.MinValue and UInt16.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt16( CalcNLimitAverage( _\n                0, &amp;HFFFF, provider ) )\n        End Function\n\n        Function ToUInt32( ByVal provider As IFormatProvider ) As _\n            UInt32 Implements IConvertible.ToUInt32\n\n            &#39; UInt32.MinValue and UInt32.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt32( CalcNLimitAverage( _\n                0, 4294967295, provider ) )\n        End Function\n\n        Function ToUInt64( ByVal provider As IFormatProvider ) As _\n            UInt64 Implements IConvertible.ToUInt64\n\n            &#39; UInt64.MinValue and UInt64.MaxValue are not defined in \n            &#39; Visual Basic. The Double conversion would have rounded \n            &#39; UInt64.MaxValue, so the following limit must be used.\n            Return Convert.ToUInt64( CalcNLimitAverage( _\n                0, 18446744073709550000.0, provider ) )\n        End Function\n\n        Function ToType( ByVal conversionType As Type, _\n            ByVal provider As IFormatProvider) As Object _\n            Implements IConvertible.ToType\n            Return Convert.ChangeType( Average( GetAverageInfo( _\n                provider ).TypeOfAverage ), conversionType )\n        End Function\n\n        Overloads Function ToString( ByVal provider As IFormatProvider _\n            ) As String Implements IConvertible.ToString\n            Dim avgType as AverageType = _\n                GetAverageInfo( provider ).TypeOfAverage\n            Return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, _\n                Average( avgType ) )\n        End Function\n    End Class\n   \n    &#39; Display a DataSet with three different format providers.\n    Sub DisplayDataSet( ds As DataSet )\n\n        Dim fmt    As String      = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;\n        Dim median As AverageInfo = New AverageInfo( AverageType.Median )\n        Dim geMean As AverageInfo = _\n            New AverageInfo( AverageType.GeometricMean )\n        Dim iX     As Integer\n\n        &#39; Display the dataset elements.\n        If ds.Count &gt; 0 Then\n            Console.Write( vbCrLf &amp; &quot;DataSet: [{0}&quot;, ds( 0 ) )\n            For iX = 1 To ds.Count - 1\n                Console.Write( &quot;, {0}&quot;, ds( iX ) )\n            Next iX\n            Console.WriteLine( &quot;]&quot; &amp; vbCrLf )\n        End If\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, _\n            &quot;Geometric Mean&quot;, &quot;Median&quot; )\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, _\n            &quot;--------------&quot;, &quot;------&quot; )\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, _\n            Convert.ToBoolean( ds, Nothing ), _\n            Convert.ToBoolean( ds, geMean ), _\n            Convert.ToBoolean( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToByte&quot;, _\n            Convert.ToByte( ds, Nothing ), _\n            Convert.ToByte( ds, geMean ), _\n            Convert.ToByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToChar&quot;, _\n            Convert.ToChar( ds, Nothing ), _\n            Convert.ToChar( ds, geMean ), _\n            Convert.ToChar( ds, median ) )\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; &amp; _\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, _\n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, Nothing ), _\n            Convert.ToDateTime( ds, geMean ), _\n            Convert.ToDateTime( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, _\n            Convert.ToDecimal( ds, Nothing ), _\n            Convert.ToDecimal( ds, geMean ), _\n            Convert.ToDecimal( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, _\n            Convert.ToDouble( ds, Nothing ), _\n            Convert.ToDouble( ds, geMean ), _\n            Convert.ToDouble( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, _\n            Convert.ToInt16( ds, Nothing ), _\n            Convert.ToInt16( ds, geMean ), _\n            Convert.ToInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, _\n            Convert.ToInt32( ds, Nothing ), _\n            Convert.ToInt32( ds, geMean ), _\n            Convert.ToInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, _\n            Convert.ToInt64( ds, Nothing ), _\n            Convert.ToInt64( ds, geMean ), _\n            Convert.ToInt64( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, _\n            Convert.ToSByte( ds, Nothing ), _\n            Convert.ToSByte( ds, geMean ), _\n            Convert.ToSByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, _\n            Convert.ToSingle( ds, Nothing ), _\n            Convert.ToSingle( ds, geMean ), _\n            Convert.ToSingle( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, _\n            Convert.ToUInt16( ds, Nothing ), _\n            Convert.ToUInt16( ds, geMean ), _\n            Convert.ToUInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, _\n            Convert.ToUInt32( ds, Nothing ), _\n            Convert.ToUInt32( ds, geMean ), _\n            Convert.ToUInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, _\n            Convert.ToUInt64( ds, Nothing ), _\n            Convert.ToUInt64( ds, geMean ), _\n            Convert.ToUInt64( ds, median ) )\n    End Sub\n   \n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Convert.To&lt;Type&gt;( Object, &quot; &amp; _\n            &quot;IFormatProvider ) methods &quot; &amp; vbCrLf &amp; &quot;generates &quot; &amp; _\n            &quot;the following output. The example displays the &quot; &amp; _\n            &quot;values &quot; &amp; vbCrLf &amp; &quot;returned by the methods, &quot; &amp; _\n            &quot;using several IFormatProvider objects.&quot; &amp; vbCrLf )\n          \n        Dim ds1 As New DataSet( 10.5, 22.2, 45.9, 88.7, 156.05, 297.6 )\n        DisplayDataSet( ds1 )\n          \n        Dim ds2 As New DataSet( _\n            359999.95, 425000, 499999.5, 775000, 1695000 )\n        DisplayDataSet( ds2 )\n    End Sub \nEnd Module \n\n&#39; This example of the Convert.To&lt;Type&gt;( Object, IFormatProvider ) methods\n&#39; generates the following output. The example displays the values\n&#39; returned by the methods, using several IFormatProvider objects.\n&#39; \n&#39; DataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       103                  59                  67\n&#39; ToChar                         g                   ;                   C\n&#39; ToDateTime   2003-05-13 14:52:53 2003-05-13 14:52:09 2003-05-13 14:52:17\n&#39; ToDecimal       103.491666666667    59.4332135445164                67.3\n&#39; ToDouble        103.491666666667    59.4332135445164                67.3\n&#39; ToInt16                      103                  59                  67\n&#39; ToInt32                      103                  59                  67\n&#39; ToInt64                      103                  59                  67\n&#39; ToSByte                      103                  59                  67\n&#39; ToSingle                103.4917            59.43321                67.3\n&#39; ToUInt16                     103                  59                  67\n&#39; ToUInt32                     103                  59                  67\n&#39; ToUInt64                     103                  59                  67\n&#39; \n&#39; DataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       255                 255                 255\n&#39; ToChar                         ?                   ?                   ?\n&#39; ToDateTime   2003-05-22 07:27:49 2003-05-20 22:17:27 2003-05-19 09:44:29\n&#39; ToDecimal              750999.89    631577.237188435            499999.5\n&#39; ToDouble               750999.89    631577.237188435            499999.5\n&#39; ToInt16                    32767               32767               32767\n&#39; ToInt32                   751000              631577              500000\n&#39; ToInt64                   751000              631577              500000\n&#39; ToSByte                      127                 127                 127\n&#39; ToSingle                750999.9            631577.3            499999.5\n&#39; ToUInt16                   65535               65535               65535\n&#39; ToUInt32                  751000              631577              500000\n&#39; ToUInt64                  751000              631577              500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToBoolean_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToBoolean(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ToBoolean (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the value of either <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">TrueString</a> or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">FalseString</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> equals <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>, or <code>false</code> if <code>value</code> equals <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not equal to <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> or <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.boolean#System_Boolean_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the conversion of <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToByte#1\">using namespace System;\n\nvoid main()\n{\n   bool falseFlag = false;\n   bool trueFlag = true;\n\n   Console::WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag,\n                      Convert::ToByte(falseFlag));\n   Console::WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, \n                      Convert::ToByte(trueFlag));\n}\n// The example displays the following output:\n//       False converts to 0.\n//       True converts to 1.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, \n                        Convert.ToByte(falseFlag));\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, \n                        Convert.ToByte(trueFlag));\n      // The example displays the following output:\n      //       False converts to 0.\n      //       True converts to 1.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, _\n                        Convert.ToByte(falseFlag))\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, _\n                        Convert.ToByte(trueFlag))\n      &#39; The example displays the following output:\n      &#39;       False converts to 0.\n      &#39;       True converts to 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns an unsigned byte value that represents the numeric code of the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object passed to it. In the .NET Framework, a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object is a 16-bit value. This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#2\">      char[] chars = { &#39;a&#39;, &#39;z&#39;, &#39;\\x0007&#39;, &#39;\\x03FF&#39; };\n      foreach (char ch in chars)\n      {\n         try {\n            byte result = Convert.ToByte(ch);\n            Console.WriteLine(&quot;{0} is converted to {1}.&quot;, ch, result);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;Unable to convert u+{0} to a byte.&quot;, \n                              Convert.ToInt16(ch).ToString(&quot;X4&quot;));\n         }\n      }   \n      // The example displays the following output:\n      //       a is converted to 97.\n      //       z is converted to 122.\n      //        is converted to 7.\n      //       Unable to convert u+03FF to a byte.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#2\">      Dim chars() As Char = { &quot;a&quot;c, &quot;z&quot;c, ChrW(7), ChrW(1023) }\n      For Each ch As Char in chars\n         Try\n            Dim result As Byte = Convert.ToByte(ch)\n            Console.WriteLine(&quot;{0} is converted to {1}.&quot;, ch, result)\n         Catch e As OverflowException\n            Console.WriteLIne(&quot;Unable to convert u+{0} to a byte.&quot;, _\n                              AscW(ch).ToString(&quot;X4&quot;))\n         End Try\n      Next   \n      &#39; The example displays the following output:\n      &#39;       a is converted to 97.\n      &#39;       z is converted to 122.\n      &#39;        is converted to 7.\n      &#39;       Unable to convert u+03FF to a byte.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> and a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#18\">public:\n   void ConvertByteDecimal( Byte byteVal )\n   {\n      Decimal decimalVal;\n      \n      // Byte to decimal conversion will not overflow.\n      decimalVal = System::Convert::ToDecimal( byteVal );\n      System::Console::WriteLine( &quot;The Byte as a decimal is {0}.&quot;,\n         decimalVal );\n      \n      // Decimal to Byte conversion can overflow.\n      try\n      {\n         byteVal = System::Convert::ToByte( decimalVal );\n         System::Console::WriteLine( &quot;The Decimal as a Byte is {0}.&quot;,\n         byteVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;The decimal value is too large for a Byte.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#18\">\t\tpublic void ConvertByteDecimal(byte byteVal) {\n\t\t\tdecimal decimalVal;\n\n\t\t\t// Byte to decimal conversion will not overflow.\n\t\t\tdecimalVal = System.Convert.ToDecimal(byteVal);\n\t\t\tSystem.Console.WriteLine(&quot;The byte as a decimal is {0}.&quot;,\n\t\t\t\tdecimalVal);\n\n\t\t\t// Decimal to byte conversion can overflow.\n\t\t\ttry {\n\t\t\t\tbyteVal = System.Convert.ToByte(decimalVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;The Decimal as a byte is {0}.&quot;,\n\t\t\t\t\tbyteVal);\n\t\t\t}\n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The decimal value is too large for a byte.&quot;);\n\t\t\t}\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#18\">     Public Sub ConvertByteDecimal(ByVal byteVal As Byte)\n         Dim decimalVal As Decimal\n\n         &#39; Byte to decimal conversion will not overflow.\n         decimalVal = System.Convert.ToDecimal(byteVal)\n         System.Console.WriteLine(&quot;The byte as a decimal is {0}.&quot;, _\n                                   decimalVal)\n\n         &#39; Decimal to byte conversion can overflow.\n         Try\n             byteVal = System.Convert.ToByte(decimalVal)\n             System.Console.WriteLine(&quot;The Decimal as a byte is {0}.&quot;, _\n                                       byteVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in decimal-to-byte conversion.&quot;)\n         End Try\n     End Sub\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> and a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#2\">public:\n   void ConvertDoubleByte( double doubleVal )\n   {\n      Byte byteVal = 0;\n      \n      // Double to Byte conversion can overflow.\n      try\n      {\n         byteVal = System::Convert::ToByte( doubleVal );\n         System::Console::WriteLine( &quot; {0} as a Byte is: {1}.&quot;,\n         doubleVal, byteVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine( &quot;Overflow in double-to-Byte conversion.&quot; );\n      }\n      \n      // Byte to double conversion cannot overflow.\n      doubleVal = System::Convert::ToDouble( byteVal );\n      System::Console::WriteLine( &quot; {0} as a double is: {1}.&quot;,\n         byteVal, doubleVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#2\">\t\tpublic void ConvertDoubleByte(double doubleVal) {\n\t\t\tbyte\tbyteVal = 0;\n\n\t\t\t// Double to byte conversion can overflow.\n\t\t\ttry {\n\t\t\t\tbyteVal = System.Convert.ToByte(doubleVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;{0} as a byte is: {1}.&quot;,\n\t\t\t\t\tdoubleVal, byteVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Overflow in double-to-byte conversion.&quot;);\n\t\t\t}\n\n\t\t\t// Byte to double conversion cannot overflow.\n\t\t\tdoubleVal = System.Convert.ToDouble(byteVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}.&quot;,\n\t\t\t\tbyteVal, doubleVal);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#2\">     Public Sub ConvertDoubleByte(ByVal doubleVal As Double)\n         Dim byteVal As Byte = 0\n\n         &#39; Double to Byte conversion can overflow.\n         Try\n             byteVal = System.Convert.ToByte(doubleVal)\n             System.Console.WriteLine(&quot;{0} as a Byte is: {1}.&quot;, _\n                 doubleVal, byteVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in Double-to-Byte conversion.&quot;)\n         End Try\n\n         &#39; Byte to Double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(byteVal)\n         System.Console.WriteLine(&quot;{0} as a Double is: {1}.&quot;, _\n                                   byteVal, doubleVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#3\">      short[] numbers = { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue };\n      byte result;\n      foreach (short number in numbers)\n      {\n         try {\n            result = Convert.ToByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       The Int16 value -32768 is outside the range of the Byte type.\n      //       The Int16 value -1 is outside the range of the Byte type.\n      //       Converted the Int16 value 0 to the Byte value 0.\n      //       Converted the Int16 value 121 to the Byte value 121.\n      //       The Int16 value 340 is outside the range of the Byte type.\n      //       The Int16 value 32767 is outside the range of the Byte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#3\">      Dim numbers() As Short = { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue }\n      Dim result As Byte\n      For Each number As Short In numbers\n         Try\n            result = Convert.ToByte(number)\n            Console.WriteLIne(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       The Int16 value -32768 is outside the range of the Byte type.\n      &#39;       The Int16 value -1 is outside the range of the Byte type.\n      &#39;       Converted the Int16 value 0 to the Byte value 0.\n      &#39;       Converted the Int16 value 121 to the Byte value 121.\n      &#39;       The Int16 value 340 is outside the range of the Byte type.\n      &#39;       The Int16 value 32767 is outside the range of the Byte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#4\">      int[] numbers = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue };\n      byte result;\n      foreach (int number in numbers)\n      {\n         try {\n            result = Convert.ToByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       The Int32 value -2147483648 is outside the range of the Byte type.\n      //       The Int32 value -1 is outside the range of the Byte type.\n      //       Converted the Int32 value 0 to the Byte value 0.\n      //       Converted the Int32 value 121 to the Byte value 121.\n      //       The Int32 value 340 is outside the range of the Byte type.\n      //       The Int32 value 2147483647 is outside the range of the Byte type.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#4\">      Dim numbers() As Integer = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue }\n      Dim result As Byte\n      For Each number As Integer In numbers\n         Try\n            result = Convert.ToByte(number)\n            Console.WriteLIne(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       The Int32 value -2147483648 is outside the range of the Byte type.\n      &#39;       The Int32 value -1 is outside the range of the Byte type.\n      &#39;       Converted the Int32 value 0 to the Byte value 0.\n      &#39;       Converted the Int32 value 121 to the Byte value 121.\n      &#39;       The Int32 value 340 is outside the range of the Byte type.\n      &#39;       The Int32 value 2147483647 is outside the range of the Byte type.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#5\">      long[] numbers = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue };\n      byte result;\n      foreach (long number in numbers)\n      {\n         try {\n            result = Convert.ToByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       The Int64 value -9223372036854775808 is outside the range of the Byte type.\n      //       The Int64 value -1 is outside the range of the Byte type.\n      //       Converted the Int64 value 0 to the Byte value 0.\n      //       Converted the Int64 value 121 to the Byte value 121.\n      //       The Int64 value 340 is outside the range of the Byte type.\n      //       The Int64 value 9223372036854775807 is outside the range of the Byte type.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#5\">      Dim numbers() As Long = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue }\n      Dim result As Byte\n      For Each number As Long In numbers\n         Try\n            result = Convert.ToByte(number)\n            Console.WriteLIne(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       The Int64 value -9223372036854775808 is outside the range of the Byte type.\n      &#39;       The Int64 value -1 is outside the range of the Byte type.\n      &#39;       Converted the Int64 value 0 to the Byte value 0.\n      &#39;       Converted the Int64 value 121 to the Byte value 121.\n      &#39;       The Int64 value 340 is outside the range of the Byte type.\n      &#39;       The Int64 value 9223372036854775807 is outside the range of the Byte type.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in the property format for a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a>.  </p>\n<p> -or-  </p>\n<p> Conversion from <code>value</code> to the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> type is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.byte#System_Byte_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.byte#System_Byte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is not <code>null</code>, this method wraps a call to the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToByte_\" data-linktype=\"relative-path\">ToByte</a>implementation of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToByte method to convert an array of objects to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#6\">      object[] values = { true, -12, 163, 935, &#39;x&#39;, &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, \n                          &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2};\n      byte result;\n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToByte(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              value.GetType().Name, value, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException)\n         {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              value.GetType().Name, value);\n         }                     \n         catch (FormatException)\n         {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, \n                              value.GetType().Name, value);\n         }\n         catch (InvalidCastException)\n         {\n            Console.WriteLine(&quot;No conversion to a Byte exists for the {0} value {1}.&quot;, \n                              value.GetType().Name, value);\n                              \n         }\n      }                           \n      // The example displays the following output:\n      //       Converted the Boolean value True to the Byte value 1.\n      //       The Int32 value -12 is outside the range of the Byte type.\n      //       Converted the Int32 value 163 to the Byte value 163.\n      //       The Int32 value 935 is outside the range of the Byte type.\n      //       Converted the Char value x to the Byte value 120.\n      //       Converted the String value 104 to the Byte value 104.\n      //       The String value 103.0 is not in a recognizable format.\n      //       The String value -1 is outside the range of the Byte type.\n      //       The String value 1.00e2 is not in a recognizable format.\n      //       The String value One is not in a recognizable format.\n      //       Converted the Double value 100 to the Byte value 100.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#6\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2}\n      Dim result As Byte\n      For Each value As Object In values\n         Try\n            result = Convert.ToByte(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to a Byte exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n      &#39;       Converted the Boolean value True to the Byte value 1.\n      &#39;       The Int32 value -12 is outside the range of the Byte type.\n      &#39;       Converted the Int32 value 163 to the Byte value 163.\n      &#39;       The Int32 value 935 is outside the range of the Byte type.\n      &#39;       Converted the Char value x to the Byte value 120.\n      &#39;       Converted the String value 104 to the Byte value 104.\n      &#39;       The String value 103.0 is not in a recognizable format.\n      &#39;       The String value -1 is outside the range of the Byte type.\n      &#39;       The String value 1.00e2 is not in a recognizable format.\n      &#39;       The String value One is not in a recognizable format.\n      &#39;       Converted the Double value 100 to the Byte value 100.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to be converted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> values to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#7\">      sbyte[] numbers = { SByte.MinValue, -1, 0, 10, SByte.MaxValue };\n      byte result;\n      foreach (sbyte number in numbers)\n      {\n         try {\n            result = Convert.ToByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException)\n         {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       The SByte value -128 is outside the range of the Byte type.\n      //       The SByte value -1 is outside the range of the Byte type.\n      //       Converted the SByte value 0 to the Byte value 0.\n      //       Converted the SByte value 10 to the Byte value 10.\n      //       Converted the SByte value 127 to the Byte value 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#7\">      Dim numbers() As SByte = { SByte.MinValue, -1, 0, 10, SByte.MaxValue }\n      Dim result As Byte\n      For Each number As SByte In numbers\n         Try\n            result = Convert.ToByte(number)\n            Console.WriteLIne(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       The SByte value -128 is outside the range of the Byte type.\n      &#39;       The SByte value -1 is outside the range of the Byte type.\n      &#39;       Converted the SByte value 0 to the Byte value 0.\n      &#39;       Converted the SByte value 10 to the Byte value 10.\n      &#39;       Converted the SByte value 127 to the Byte value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A single-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 8-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#19\">public:\n   void ConvertByteSingle( Byte byteVal )\n   {\n      float floatVal;\n      \n      // Byte to float conversion will not overflow.\n      floatVal = System::Convert::ToSingle( byteVal );\n      System::Console::WriteLine( &quot;The Byte as a float is {0}.&quot;,\n         floatVal );\n      \n      // Float to Byte conversion can overflow.\n      try\n      {\n         byteVal = System::Convert::ToByte( floatVal );\n         System::Console::WriteLine( &quot;The float as a Byte is {0}.&quot;,\n         byteVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;The float value is too large for a Byte.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#19\">\t\tpublic void ConvertByteSingle(byte byteVal) {\n\t\t\tfloat floatVal;\n\n\t\t\t// Byte to float conversion will not overflow.\n\t\t\tfloatVal = System.Convert.ToSingle(byteVal);\n\t\t\tSystem.Console.WriteLine(&quot;The byte as a float is {0}.&quot;,\n\t\t\t\tfloatVal);\n\n\t\t\t// Float to byte conversion can overflow.\n\t\t\ttry {\n\t\t\t\tbyteVal = System.Convert.ToByte(floatVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;The float as a byte is {0}.&quot;,\n\t\t\t\t\tbyteVal);\n\t\t\t}\n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The float value is too large for a byte.&quot;);\n\t\t\t}\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#19\">     Public Sub ConvertByteSingle(ByVal byteVal As Byte)\n         Dim singleVal As Single\n\n         &#39; Byte to float conversion will not overflow.\n         singleVal = System.Convert.ToSingle(byteVal)\n         System.Console.WriteLine(&quot;The byte as a single is {0}.&quot;, _\n                                   singleVal)\n\n         &#39; Single to byte conversion can overflow.\n         Try\n             byteVal = System.Convert.ToByte(singleVal)\n             System.Console.WriteLine(&quot;The single as a byte is {0}.&quot;, _\n                                       byteVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in single-to-byte conversion.&quot;)\n         End Try\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToByte method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_\" data-linktype=\"relative-path\">System.Byte.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.byte#System_Byte_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a string array and attempts to convert each string to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.  Note that while a <code>null</code> string parses to zero, <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>. Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#15\">Module Example\n   Public Sub Main()\n      Dim values() As String = { Nothing, &quot;&quot;, &quot;0xC9&quot;, &quot;C9&quot;, &quot;101&quot;, \n                                 &quot;16.3&quot;, &quot;$12&quot;, &quot;$12.01&quot;, &quot;-4&quot;, \n                                 &quot;1,032&quot;, &quot;255&quot;, &quot;   16  &quot; }\n      For Each value In values\n         Try \n            Dim number As Byte = Convert.ToByte(value)\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, \n                              If(value Is Nothing, &quot;&lt;null&gt;&quot;, value), number)\n         Catch e As FormatException\n            Console.WriteLine(&quot;Bad Format: &#39;{0}&#39;&quot;, \n                              If(value Is Nothing, &quot;&lt;null&gt;&quot;, value))\n         Catch e As OverflowException\n            Console.WriteLine(&quot;OverflowException: &#39;{0}&#39;&quot;, value)\n         End Try\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     &#39;&lt;null&gt;&#39; --&gt; 0\n&#39;     Bad Format: &#39;&#39;\n&#39;     Bad Format: &#39;0xC9&#39;\n&#39;     Bad Format: &#39;C9&#39;\n&#39;     &#39;101&#39; --&gt; 101\n&#39;     Bad Format: &#39;16.3&#39;\n&#39;     Bad Format: &#39;$12&#39;\n&#39;     Bad Format: &#39;$12.01&#39;\n&#39;     OverflowException: &#39;-4&#39;\n&#39;     Bad Format: &#39;1,032&#39;\n&#39;     &#39;255&#39; --&gt; 255\n&#39;     &#39;   16  &#39; --&gt; 16\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#15\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] values = { null, &quot;&quot;, &quot;0xC9&quot;, &quot;C9&quot;, &quot;101&quot;, &quot;16.3&quot;, \n                          &quot;$12&quot;, &quot;$12.01&quot;, &quot;-4&quot;, &quot;1,032&quot;, &quot;255&quot;,\n                          &quot;   16  &quot; };\n      foreach (var value in values) {\n         try {\n            byte number = Convert.ToByte(value);\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, \n                              value == null ? &quot;&lt;null&gt;&quot; : value, number);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;Bad Format: &#39;{0}&#39;&quot;, \n                              value == null ? &quot;&lt;null&gt;&quot; : value);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;OverflowException: &#39;{0}&#39;&quot;, value);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//     &#39;&lt;null&gt;&#39; --&gt; 0\n//     Bad Format: &#39;&#39;\n//     Bad Format: &#39;0xC9&#39;\n//     Bad Format: &#39;C9&#39;\n//     &#39;101&#39; --&gt; 101\n//     Bad Format: &#39;16.3&#39;\n//     Bad Format: &#39;$12&#39;\n//     Bad Format: &#39;$12.01&#39;\n//     OverflowException: &#39;-4&#39;\n//     Bad Format: &#39;1,032&#39;\n//     &#39;255&#39; --&gt; 255\n//     &#39;   16  &#39; --&gt; 16\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of unsigned 16-bit integers to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#8\">      ushort[] numbers = { UInt16.MinValue, 121, 340, UInt16.MaxValue };\n      byte result;\n      foreach (ushort number in numbers)\n      {\n         try {\n            result = Convert.ToByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       Converted the UInt16 value 0 to the Byte value 0.\n      //       Converted the UInt16 value 121 to the Byte value 121.\n      //       The UInt16 value 340 is outside the range of the Byte type.\n      //       The UInt16 value 65535 is outside the range of the Byte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#8\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 340, UInt16.MaxValue }\n      Dim result As Byte\n      For Each number As UShort In numbers\n         Try\n            result = Convert.ToByte(number)\n            Console.WriteLIne(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the UInt16 value 0 to the Byte value 0.\n      &#39;       Converted the UInt16 value 121 to the Byte value 121.\n      &#39;       The UInt16 value 340 is outside the range of the Byte type.\n      &#39;       The UInt16 value 65535 is outside the range of the Byte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of unsigned integers to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#9\">      uint[] numbers = { UInt32.MinValue, 121, 340, UInt32.MaxValue };\n      byte result;\n      foreach (uint number in numbers)\n      {\n         try {\n            result = Convert.ToByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       Converted the UInt32 value 0 to the Byte value 0.\n      //       Converted the UInt32 value 121 to the Byte value 121.\n      //       The UInt32 value 340 is outside the range of the Byte type.\n      //       The UInt32 value 4294967295 is outside the range of the Byte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#9\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 340, UInt32.MaxValue }\n      Dim result As Byte\n      For Each number As UInteger In numbers\n         Try\n            result = Convert.ToByte(number)\n            Console.WriteLIne(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the UInt32 value 0 to the Byte value 0.\n      &#39;       Converted the UInt32 value 121 to the Byte value 121.\n      &#39;       The UInt32 value 340 is outside the range of the Byte type.\n      &#39;       The UInt32 value 4294967295 is outside the range of the Byte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of unsigned long integers to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#10\">      ulong[] numbers= { UInt64.MinValue, 121, 340, UInt64.MaxValue };\n      byte result;\n      foreach (ulong number in numbers)\n      {\n         try {\n            result = Convert.ToByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException)\n         {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, \n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       Converted the UInt64 value 0 to the Byte value 0.\n      //       Converted the UInt64 value 121 to the Byte value 121.\n      //       The UInt64 value 340 is outside the range of the Byte type.\n      //       The UInt64 value 18446744073709551615 is outside the range of the Byte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#10\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 340, UInt64.MaxValue }\n      Dim result As Byte\n      For Each number As ULong In numbers\n         Try\n            result = Convert.ToByte(number)\n            Console.WriteLIne(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Byte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the UInt64 value 0 to the Byte value 0.\n      &#39;       Converted the UInt64 value 121 to the Byte value 121.\n      &#39;       The UInt64 value 340 is outside the range of the Byte type.\n      &#39;       The UInt64 value 18446744073709551615 is outside the range of the Byte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in the property format for a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a>.  </p>\n<p> -or-  </p>\n<p> Conversion from <code>value</code> to the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> type is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.byte#System_Byte_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.byte#System_Byte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>ByteString</code> class that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#12\">using System;\nusing System.Globalization;\n\npublic enum SignBit { Negative=-1, Zero=0, Positive=1 };\n\npublic struct ByteString : IConvertible\n{\n   private SignBit signBit;\n   private string byteString;\n   \n   public SignBit Sign\n   { \n      set { signBit = value; }\n      get { return signBit; }\n   }\n\n   public string Value\n   { \n      set {\n         if (value.Trim().Length &gt; 2)\n            throw new ArgumentException(&quot;The string representation of a byte cannot have more than two characters.&quot;);\n         else\n            byteString = value;\n      }\n      get { return byteString; }\n   }\n   \n   // IConvertible implementations.\n   public TypeCode GetTypeCode() {\n      return TypeCode.Object;\n   }\n   \n   public bool ToBoolean(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Zero)\n         return false;\n      else\n         return true;\n   } \n   \n   public byte ToByte(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToSByte(byteString, 16)));\n      else\n         return Byte.Parse(byteString, NumberStyles.HexNumber);\n   }\n   \n   public char ToChar(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative) { \n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToSByte(byteString, 16)));\n      }\n      else {\n         byte byteValue = Byte.Parse(this.byteString, NumberStyles.HexNumber);\n         return Convert.ToChar(byteValue);\n      }                \n   } \n   \n   public DateTime ToDateTime(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;ByteString to DateTime conversion is not supported.&quot;);\n   }\n   \n   public decimal ToDecimal(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative) \n      {\n         sbyte byteValue = SByte.Parse(byteString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(byteValue);\n      }\n      else \n      {\n         byte byteValue = Byte.Parse(byteString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(byteValue);\n      }\n   }\n   \n   public double ToDouble(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToDouble(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToDouble(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }   \n   \n   public short ToInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt16(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToInt16(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n   \n   public int ToInt32(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt32(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToInt32(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n   \n   public long ToInt64(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt64(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToInt64(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n   \n   public sbyte ToSByte(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         try {\n            return Convert.ToSByte(Byte.Parse(byteString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, \n                                                   Byte.Parse(byteString, NumberStyles.HexNumber)), e);\n         }\n      else   \n         return SByte.Parse(byteString, NumberStyles.HexNumber);\n   }\n\n   public float ToSingle(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToSingle(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToSingle(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n\n   public string ToString(IFormatProvider provider)\n   {\n      return &quot;0x&quot; + this.byteString;\n   }\n   \n   public object ToType(Type conversionType, IFormatProvider provider)\n   {\n      switch (Type.GetTypeCode(conversionType))\n      {\n         case TypeCode.Boolean: \n            return this.ToBoolean(null);\n         case TypeCode.Byte:\n            return this.ToByte(null);\n         case TypeCode.Char:\n            return this.ToChar(null);\n         case TypeCode.DateTime:\n            return this.ToDateTime(null);\n         case TypeCode.Decimal:\n            return this.ToDecimal(null);\n         case TypeCode.Double:\n            return this.ToDouble(null);\n         case TypeCode.Int16:\n            return this.ToInt16(null);\n         case TypeCode.Int32:\n            return this.ToInt32(null);\n         case TypeCode.Int64:\n            return this.ToInt64(null);\n         case TypeCode.Object:\n            if (typeof(ByteString).Equals(conversionType))\n               return this;\n            else\n               throw new InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name));\n         case TypeCode.SByte:\n            return this.ToSByte(null);\n         case TypeCode.Single:\n            return this.ToSingle(null);\n         case TypeCode.String:\n            return this.ToString(null);\n         case TypeCode.UInt16:\n            return this.ToUInt16(null);\n         case TypeCode.UInt32:\n            return this.ToUInt32(null);\n         case TypeCode.UInt64:\n            return this.ToUInt64(null);   \n         default:\n            throw new InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name));   \n      }\n   }\n   \n   public UInt16 ToUInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, \n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt16(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n\n   public UInt32 ToUInt32(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, \n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt32(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n   \n   public UInt64 ToUInt64(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, \n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt64(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#12\">Imports System.Globalization\n\nPublic Enum SignBit As Integer\n   Positive = 1\n   Zero = 0\n   Negative = -1\nEnd Enum\n\nPublic Structure ByteString : Implements IConvertible\n   Private signBit As SignBit\n   Private byteString As String\n   \n   Public Property Sign As SignBit\n      Set\n         signBit = value\n      End Set\n      Get\n         Return signBit\n      End Get\n   End Property\n   \n   Public Property Value As String\n      Set\n         If value.Trim().Length &gt; 2 Then\n            Throw New ArgumentException(&quot;The string representation of a byte cannot have more than two characters.&quot;)\n         Else\n            byteString = value\n         End If   \n      End Set\n      Get\n         Return byteString\n      End Get\n   End Property\n   \n   &#39; IConvertible implementations.\n   Public Function GetTypeCode() As TypeCode _\n                   Implements IConvertible.GetTypeCode\n      Return TypeCode.Object\n   End Function\n   \n   Public Function ToBoolean(provider As IFormatProvider) As Boolean _\n                   Implements IConvertible.ToBoolean\n      If signBit = SignBit.Zero Then\n         Return False\n      Else\n         Return True\n      End If\n   End Function \n   \n   Public Function ToByte(provider As IFormatProvider) As Byte _\n                   Implements IConvertible.ToByte\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToSByte(byteString, 16))) \n      Else\n         Return Byte.Parse(byteString, NumberStyles.HexNumber)\n      End If       \n   End Function\n   \n   Public Function ToChar(provider As IFormatProvider) As Char _\n                   Implements IConvertible.ToChar\n      If signBit = signBit.Negative Then \n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToSByte(byteString, 16)))\n      Else\n         Dim byteValue As Byte = Byte.Parse(Me.byteString, NumberStyles.HexNumber)\n         Return Convert.ToChar(byteValue)\n      End If                \n   End Function \n   \n   Public Function ToDateTime(provider As IFormatProvider) As Date _\n                   Implements IConvertible.ToDateTime\n      Throw New InvalidCastException(&quot;ByteString to DateTime conversion is not supported.&quot;)\n   End Function\n   \n   Public Function ToDecimal(provider As IFormatProvider) As Decimal _\n                   Implements IConvertible.ToDecimal\n      If signBit = signBit.Negative Then\n         Dim byteValue As SByte = SByte.Parse(byteString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(byteValue)\n      Else\n         Dim byteValue As Byte = Byte.Parse(byteString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(byteValue)\n      End If\n   End Function\n   \n   Public Function ToDouble(provider As IFormatProvider) As Double _\n                   Implements IConvertible.ToDouble\n      If signBit = signBit.Negative Then\n         Return Convert.ToDouble(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToDouble(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function   \n   \n   Public Function ToInt16(provider As IFormatProvider) As Int16 _\n                   Implements IConvertible.ToInt16\n      If signBit = signBit.Negative Then\n         Return Convert.ToInt16(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToInt16(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToInt32(provider As IFormatProvider) As Int32 _\n                   Implements IConvertible.ToInt32\n      If signBit = signBit.Negative Then\n         Return Convert.ToInt32(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToInt32(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToInt64(provider As IFormatProvider) As Int64 _\n                   Implements IConvertible.ToInt64\n      If signBit = signBit.Negative Then\n         Return Convert.ToInt64(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToInt64(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToSByte(provider As IFormatProvider) As SByte _\n                   Implements IConvertible.ToSByte\n      If signBit = SignBit.Positive Then\n         Try\n            Return Convert.ToSByte(Byte.Parse(byteString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, _\n                                                   Byte.Parse(byteString, NumberStyles.HexNumber)), e)   \n         End Try\n      Else\n         Return SByte.Parse(byteString, NumberStyles.HexNumber)\n      End If\n   End Function\n\n   Public Function ToSingle(provider As IFormatProvider) As Single _\n                   Implements IConvertible.ToSingle\n      If signBit = signBit.Negative Then\n         Return Convert.ToSingle(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToSingle(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n\n   Public Overloads Function ToString(provider As IFormatProvider) As String _\n                   Implements IConvertible.ToString\n      Return Me.byteString\n   End Function\n   \n   Public Function ToType(conversionType As Type, provider As IFormatProvider) As Object _\n                   Implements IConvertible.ToType\n      Select Case Type.GetTypeCode(conversionType)\n         Case TypeCode.Boolean \n            Return Me.ToBoolean(Nothing)\n         Case TypeCode.Byte\n            Return Me.ToByte(Nothing)\n         Case TypeCode.Char\n            Return Me.ToChar(Nothing)\n         Case TypeCode.DateTime\n            Return Me.ToDateTime(Nothing)\n         Case TypeCode.Decimal\n            Return Me.ToDecimal(Nothing)\n         Case TypeCode.Double\n            Return Me.ToDouble(Nothing)\n         Case TypeCode.Int16\n            Return Me.ToInt16(Nothing)\n         Case TypeCode.Int32\n            Return Me.ToInt32(Nothing)\n         Case TypeCode.Int64\n            Return Me.ToInt64(Nothing)\n         Case TypeCode.Object\n            If GetType(ByteString).Equals(conversionType) Then\n               Return Me\n            Else\n               Throw New InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name))\n            End If \n         Case TypeCode.SByte\n            Return Me.ToSByte(Nothing)\n         Case TypeCode.Single\n            Return Me.ToSingle(Nothing)\n         Case TypeCode.String\n            Return Me.ToString(Nothing)\n         Case TypeCode.UInt16\n            Return Me.ToUInt16(Nothing)\n         Case TypeCode.UInt32\n            Return Me.ToUInt32(Nothing)\n         Case TypeCode.UInt64\n            Return Me.ToUInt64(Nothing)   \n         Case Else\n            Throw New InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name))   \n            \n      End Select\n   End Function\n   \n   Public Function ToUInt16(provider As IFormatProvider) As UInt16 _\n                   Implements IConvertible.ToUInt16\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, _\n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt16(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n\n   Public Function ToUInt32(provider As IFormatProvider) As UInt32 _\n                   Implements IConvertible.ToUInt32\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt32(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToUInt64(provider As IFormatProvider) As UInt64 _\n                   Implements IConvertible.ToUInt64\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, _\n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt64(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \nEnd Structure\n</code></pre><p> The following example instantiates several <code>ByteString</code> objects and calls the ToByte method to convert them to byte values. It illustrates that the ToByte method wraps a call to the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToByte_\" data-linktype=\"relative-path\">ToByte</a> method of the object to be converted.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#13\">public class Class1\n{\n   public static void Main()\n   {\n      byte positiveByte = 216;\n      sbyte negativeByte = -101;\n      \n      \n      ByteString positiveString = new ByteString();\n      positiveString.Sign = (SignBit) Math.Sign(positiveByte);\n      positiveString.Value = positiveByte.ToString(&quot;X2&quot;);\n      \n      ByteString negativeString = new ByteString();\n      negativeString.Sign = (SignBit) Math.Sign(negativeByte);\n      negativeString.Value = negativeByte.ToString(&quot;X2&quot;);\n      \n      try {\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, positiveString.Value, Convert.ToByte(positiveString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;0x{0} is outside the range of the Byte type.&quot;, positiveString.Value);\n      }\n\n      try {\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, negativeString.Value, Convert.ToByte(negativeString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;0x{0} is outside the range of the Byte type.&quot;, negativeString.Value);\n      }   \n   }\n}\n// The example displays the following output:\n//       &#39;D8&#39; converts to 216.\n//       0x9B is outside the range of the Byte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#13\">Module modMain\n   Public Sub Main()\n      Dim positiveByte As Byte = 216\n      Dim negativeByte As SByte = -101\n      \n      \n      Dim positiveString As New ByteString()\n      positiveString.Sign = CType(Math.Sign(positiveByte), SignBit)\n      positiveString.Value = positiveByte.ToString(&quot;X2&quot;)\n      \n      Dim negativeString As New ByteString()\n      negativeString.Sign = CType(Math.Sign(negativeByte), SignBit)\n      negativeString.Value = negativeByte.ToString(&quot;X2&quot;)\n      \n      Try\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, positiveString.Value, Convert.ToByte(positiveString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;0x{0} is outside the range of the Byte type.&quot;, positiveString.Value)\n      End Try\n\n      Try\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, negativeString.Value, Convert.ToByte(negativeString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;0x{0} is outside the range of the Byte type.&quot;, negativeString.Value)\n      End Try   \n   End Sub\nEnd Module\n&#39; The example dosplays the following output:\n&#39;       &#39;D8&#39; converts to 216.\n&#39;       0x9B is outside the range of the Byte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.byte#System_Byte_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that defines the positive sign as &quot;pos&quot; and the negative sign as &quot;neg&quot;, which it uses in calls to the ToByte method. It then calls the ToByte method repeatedly to convert each element in a string array to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#14\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Create a NumberFormatInfo object and set several of its\n      &#39; properties that apply to unsigned bytes.\n      Dim provider As New NumberFormatInfo()\n      With provider \n         &#39; These properties affect the conversion.\n         .PositiveSign = &quot;pos &quot;\n         .NegativeSign = &quot;neg &quot;\n\n         &#39; This property does not affect the conversion.\n         &#39; The input string cannot have a decimal separator.\n         .NumberDecimalSeparator = &quot;.&quot;\n      End With\n      \n      &#39; Define an array of numeric strings.\n      Dim numericStrings() As String = { &quot;234&quot;, &quot;+234&quot;, &quot;pos 234&quot;, &quot;234.&quot;, _\n                                         &quot;255&quot;, &quot;256&quot;, &quot;-1&quot; }\n\n      For Each numericString As String In numericStrings\n         Console.Write(&quot;&#39;{0,-8}&#39; -&gt;   &quot;, numericString)\n         Try\n            Dim number As Byte = Convert.ToByte(numericString, provider)\n            Console.WriteLine(number)\n         Catch ex As FormatException\n            Console.WriteLine(&quot;Incorrect Format&quot;)                          \n         Catch ex As OverflowException\n            Console.WriteLine(&quot;Overflows a Byte&quot;)\n         End Try   \n      Next\n   End Sub   \nEnd Module \n&#39; The example displays the following output:\n&#39;       &#39;234     &#39; -&gt;   234\n&#39;       &#39;+234    &#39; -&gt;   Incorrect Format\n&#39;       &#39;pos 234 &#39; -&gt;   234\n&#39;       &#39;234.    &#39; -&gt;   Incorrect Format\n&#39;       &#39;255     &#39; -&gt;   255\n&#39;       &#39;256     &#39; -&gt;   Overflows a Byte\n&#39;       &#39;-1      &#39; -&gt;   Incorrect Format\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#14\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a NumberFormatInfo object and set several of its\n      // properties that apply to unsigned bytes.\n      NumberFormatInfo provider = new NumberFormatInfo();\n\n      // These properties affect the conversion.\n      provider.PositiveSign = &quot;pos &quot;;\n      provider.NegativeSign = &quot;neg &quot;;\n\n      // This property does not affect the conversion.\n      // The input string cannot have a decimal separator.\n      provider.NumberDecimalSeparator = &quot;.&quot;;\n      \n      // Define an array of numeric strings.\n      string[] numericStrings = { &quot;234&quot;, &quot;+234&quot;, &quot;pos 234&quot;, &quot;234.&quot;, &quot;255&quot;, \n                                  &quot;256&quot;, &quot;-1&quot; };\n\n      foreach (string numericString in numericStrings)\n      {\n         Console.Write(&quot;&#39;{0,-8}&#39; -&gt;   &quot;, numericString);\n         try {\n            byte number = Convert.ToByte(numericString, provider);\n            Console.WriteLine(number);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;Incorrect Format&quot;);\n         }                             \n         catch (OverflowException) {\n            Console.WriteLine(&quot;Overflows a Byte&quot;);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//       &#39;234     &#39; -&gt;   234\n//       &#39;+234    &#39; -&gt;   Incorrect Format\n//       &#39;pos 234 &#39; -&gt;   234\n//       &#39;234.    &#39; -&gt;   Incorrect Format\n//       &#39;255     &#39; -&gt;   255\n//       &#39;256     &#39; -&gt;   Overflows a Byte\n//       &#39;-1      &#39; -&gt;   Incorrect Format\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToByte_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (string value, int fromBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fromBase</code> is not 2, 8, 10, or 16.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, which represents a base 10 unsigned number, is prefixed with a negative sign.  </p>\n<p> -or-  </p>\n<p> <code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>fromBase</code> is 16, you can prefix the number specified by the <code>value</code> parameter with &quot;0x&quot; or &quot;0X&quot;.  </p>\n<p> Because the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> data type supports unsigned values only, the ToByte method assumes that <code>value</code> is expressed using unsigned binary representation. In other words, all eight bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed byte value that is out of the range of the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> data type is converted to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value without the method throwing an exception. The following example converts <a class=\"xref\" href=\"system.sbyte#System_SByte_MinValue\" data-linktype=\"relative-path\">MinValue</a> to its hexadecimal string representation, and then calls the ToByte method. Instead of throwing an exception, the method displays the message, &quot;0x80 converts to 128.&quot;  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#3\">      &#39; Create a hexadecimal value out of range of the Byte type.\n      Dim value As String = SByte.MinValue.ToString(&quot;X&quot;)\n      &#39; Convert it back to a number.\n      Try\n         Dim number As Byte = Convert.ToByte(value, 16)\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a byte.&quot;, value)\n      End Try   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#3\">      // Create a hexadecimal value out of range of the Byte type.\n      string value = SByte.MinValue.ToString(&quot;X&quot;);\n      // Convert it back to a number.\n      try\n      {\n         byte number = Convert.ToByte(value, 16);\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number);\n      }   \n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a byte.&quot;, value);\n      }   \n</code></pre><p> When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value back to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two&#39;s complement instead of unsigned binary representation), the method throws an exception.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#4\">      &#39; Create a negative hexadecimal value out of range of the Byte type.\n      Dim sourceNumber As SByte = SByte.MinValue\n      Dim isSigned As Boolean = Math.Sign(sourceNumber.MinValue) = -1\n      Dim value As String = sourceNumber.ToString(&quot;X&quot;)\n      Dim targetNumber As Byte\n      Try\n         targetNumber = Convert.ToByte(value, 16)\n         If isSigned And ((targetNumber And &amp;H80) &lt;&gt; 0) Then\n            Throw New OverflowException()\n         Else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber)\n         End If    \n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned byte.&quot;, value)\n      End Try \n      &#39; Displays the following to the console:\n      &#39;    Unable to convert &#39;0x80&#39; to an unsigned byte.     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#4\">      // Create a negative hexadecimal value out of range of the Byte type.\n      sbyte sourceNumber = SByte.MinValue;\n      bool isSigned = Math.Sign((sbyte)sourceNumber.GetType().GetField(&quot;MinValue&quot;).GetValue(null)) == -1;\n      string value = sourceNumber.ToString(&quot;X&quot;);\n      byte targetNumber;\n      try\n      {\n         targetNumber = Convert.ToByte(value, 16);\n         if (isSigned &amp;&amp; ((targetNumber &amp; 0x80) != 0))\n            throw new OverflowException();\n         else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned byte.&quot;, value);\n      } \n      // Displays the following to the console:\n      //    Unable to convert &#39;0x80&#39; to an unsigned byte.     \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToByte#11\">Module Example\n   Public Sub Main()\n      Dim bases() As Integer = { 2, 8, 10, 16 }\n      Dim values() As String = { &quot;-1&quot;, &quot;1&quot;, &quot;08&quot;, &quot;0F&quot;, &quot;11&quot; , &quot;12&quot;, &quot;30&quot;, _                \n                                  &quot;101&quot;, &quot;255&quot;, &quot;FF&quot;, &quot;10000000&quot;, &quot;80&quot; }\n      Dim number As Byte\n      For Each base As Integer In bases\n         Console.WriteLine(&quot;Base {0}:&quot;, base)\n         For Each value As String In values\n            Try\n               number = Convert.ToByte(value, base)\n               Console.WriteLine(&quot;   Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n            Catch e As FormatException\n               Console.WriteLine(&quot;   &#39;{0}&#39; is not in the correct format for a base {1} conversion.&quot;, _\n                                 value, base)\n            Catch e As OverflowException\n               Console.WriteLine(&quot;   &#39;{0}&#39; is outside the range of the Byte type.&quot;, value)\n            Catch e As ArgumentException\n               Console.WriteLine(&quot;   &#39;{0}&#39; is invalid in base {1}.&quot;, value, base)\n            End Try   \n         Next                                 \n      Next \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Base 2:\n&#39;       &#39;-1&#39; is invalid in base 2.\n&#39;       Converted &#39;1&#39; to 1.\n&#39;       &#39;08&#39; is not in the correct format for a base 2 conversion.\n&#39;       &#39;0F&#39; is not in the correct format for a base 2 conversion.\n&#39;       Converted &#39;11&#39; to 3.\n&#39;       &#39;12&#39; is not in the correct format for a base 2 conversion.\n&#39;       &#39;30&#39; is not in the correct format for a base 2 conversion.\n&#39;       Converted &#39;101&#39; to 5.\n&#39;       &#39;255&#39; is not in the correct format for a base 2 conversion.\n&#39;       &#39;FF&#39; is not in the correct format for a base 2 conversion.\n&#39;       Converted &#39;10000000&#39; to 128.\n&#39;       &#39;80&#39; is not in the correct format for a base 2 conversion.\n&#39;    Base 8:\n&#39;       &#39;-1&#39; is invalid in base 8.\n&#39;       Converted &#39;1&#39; to 1.\n&#39;       &#39;08&#39; is not in the correct format for a base 8 conversion.\n&#39;       &#39;0F&#39; is not in the correct format for a base 8 conversion.\n&#39;       Converted &#39;11&#39; to 9.\n&#39;       Converted &#39;12&#39; to 10.\n&#39;       Converted &#39;30&#39; to 24.\n&#39;       Converted &#39;101&#39; to 65.\n&#39;       Converted &#39;255&#39; to 173.\n&#39;       &#39;FF&#39; is not in the correct format for a base 8 conversion.\n&#39;       &#39;10000000&#39; is outside the range of the Byte type.\n&#39;       &#39;80&#39; is not in the correct format for a base 8 conversion.\n&#39;    Base 10:\n&#39;       &#39;-1&#39; is outside the range of the Byte type.\n&#39;       Converted &#39;1&#39; to 1.\n&#39;       Converted &#39;08&#39; to 8.\n&#39;       &#39;0F&#39; is not in the correct format for a base 10 conversion.\n&#39;       Converted &#39;11&#39; to 11.\n&#39;       Converted &#39;12&#39; to 12.\n&#39;       Converted &#39;30&#39; to 30.\n&#39;       Converted &#39;101&#39; to 101.\n&#39;       Converted &#39;255&#39; to 255.\n&#39;       &#39;FF&#39; is not in the correct format for a base 10 conversion.\n&#39;       &#39;10000000&#39; is outside the range of the Byte type.\n&#39;       Converted &#39;80&#39; to 80.\n&#39;    Base 16:\n&#39;       &#39;-1&#39; is invalid in base 16.\n&#39;       Converted &#39;1&#39; to 1.\n&#39;       Converted &#39;08&#39; to 8.\n&#39;       Converted &#39;0F&#39; to 15.\n&#39;       Converted &#39;11&#39; to 17.\n&#39;       Converted &#39;12&#39; to 18.\n&#39;       Converted &#39;30&#39; to 48.\n&#39;       &#39;101&#39; is outside the range of the Byte type.\n&#39;       &#39;255&#39; is outside the range of the Byte type.\n&#39;       Converted &#39;FF&#39; to 255.\n&#39;       &#39;10000000&#39; is outside the range of the Byte type.\n&#39;       Converted &#39;80&#39; to 128.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToByte#11\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] bases = { 2, 8, 10, 16 };\n      string[] values = { &quot;-1&quot;, &quot;1&quot;, &quot;08&quot;, &quot;0F&quot;, &quot;11&quot; , &quot;12&quot;, &quot;30&quot;,                \n                          &quot;101&quot;, &quot;255&quot;, &quot;FF&quot;, &quot;10000000&quot;, &quot;80&quot; };\n      byte number;\n      foreach (int numBase in bases)\n      {\n         Console.WriteLine(&quot;Base {0}:&quot;, numBase);\n         foreach (string value in values)\n         {\n            try {\n               number = Convert.ToByte(value, numBase);\n               Console.WriteLine(&quot;   Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n            }   \n            catch (FormatException) {\n               Console.WriteLine(&quot;   &#39;{0}&#39; is not in the correct format for a base {1} byte value.&quot;, \n                                 value, numBase);\n            }                     \n            catch (OverflowException) {\n               Console.WriteLine(&quot;   &#39;{0}&#39; is outside the range of the Byte type.&quot;, value);\n            }   \n            catch (ArgumentException) {\n               Console.WriteLine(&quot;   &#39;{0}&#39; is invalid in base {1}.&quot;, value, numBase);\n            }\n         }                                 \n      } \n   }\n}\n// The example displays the following output:\n//    Base 2:\n//       &#39;-1&#39; is invalid in base 2.\n//       Converted &#39;1&#39; to 1.\n//       &#39;08&#39; is not in the correct format for a base 2 conversion.\n//       &#39;0F&#39; is not in the correct format for a base 2 conversion.\n//       Converted &#39;11&#39; to 3.\n//       &#39;12&#39; is not in the correct format for a base 2 conversion.\n//       &#39;30&#39; is not in the correct format for a base 2 conversion.\n//       Converted &#39;101&#39; to 5.\n//       &#39;255&#39; is not in the correct format for a base 2 conversion.\n//       &#39;FF&#39; is not in the correct format for a base 2 conversion.\n//       Converted &#39;10000000&#39; to 128.\n//       &#39;80&#39; is not in the correct format for a base 2 conversion.\n//    Base 8:\n//       &#39;-1&#39; is invalid in base 8.\n//       Converted &#39;1&#39; to 1.\n//       &#39;08&#39; is not in the correct format for a base 8 conversion.\n//       &#39;0F&#39; is not in the correct format for a base 8 conversion.\n//       Converted &#39;11&#39; to 9.\n//       Converted &#39;12&#39; to 10.\n//       Converted &#39;30&#39; to 24.\n//       Converted &#39;101&#39; to 65.\n//       Converted &#39;255&#39; to 173.\n//       &#39;FF&#39; is not in the correct format for a base 8 conversion.\n//       &#39;10000000&#39; is outside the range of the Byte type.\n//       &#39;80&#39; is not in the correct format for a base 8 conversion.\n//    Base 10:\n//       &#39;-1&#39; is outside the range of the Byte type.\n//       Converted &#39;1&#39; to 1.\n//       Converted &#39;08&#39; to 8.\n//       &#39;0F&#39; is not in the correct format for a base 10 conversion.\n//       Converted &#39;11&#39; to 11.\n//       Converted &#39;12&#39; to 12.\n//       Converted &#39;30&#39; to 30.\n//       Converted &#39;101&#39; to 101.\n//       Converted &#39;255&#39; to 255.\n//       &#39;FF&#39; is not in the correct format for a base 10 conversion.\n//       &#39;10000000&#39; is outside the range of the Byte type.\n//       Converted &#39;80&#39; to 80.\n//    Base 16:\n//       &#39;-1&#39; is invalid in base 16.\n//       Converted &#39;1&#39; to 1.\n//       Converted &#39;08&#39; to 8.\n//       Converted &#39;0F&#39; to 15.\n//       Converted &#39;11&#39; to 17.\n//       Converted &#39;12&#39; to 18.\n//       Converted &#39;30&#39; to 48.\n//       &#39;101&#39; is outside the range of the Byte type.\n//       &#39;255&#39; is outside the range of the Byte type.\n//       Converted &#39;FF&#39; to 255.\n//       &#39;10000000&#39; is outside the range of the Byte type.\n//       Converted &#39;80&#39; to 128.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of unsigned bytes to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#1\">      byte[] bytes = {Byte.MinValue, 40, 80, 120, 180, Byte.MaxValue};\n      char result;\n      foreach (byte number in bytes)\n      {\n         result = Convert.ToChar(number);\n         Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result);\n      }\n      // The example displays the following output:\n      //       0 converts to &#39; &#39;.\n      //       40 converts to &#39;(&#39;.\n      //       80 converts to &#39;P&#39;.\n      //       120 converts to &#39;x&#39;.\n      //       180 converts to &#39;&#39;&#39;.\n      //       255 converts to &#39;&#255;&#39;.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#1\">      Dim bytes() As Byte = {Byte.MinValue, 40, 80, 120, 180, Byte.MaxValue}\n      Dim result As Char\n      For Each number As Byte In bytes\n         result = Convert.ToChar(number)\n         Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       0 converts to &#39; &#39;.\n      &#39;       40 converts to &#39;(&#39;.\n      &#39;       80 converts to &#39;P&#39;.\n      &#39;       120 converts to &#39;x&#39;.\n      &#39;       180 converts to &#39;&#39;&#39;.\n      &#39;       255 converts to &#39;&#255;&#39;.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified Unicode character value; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, and throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> on failure.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#17\">public:\n   void ConvertCharDecimal( Char charVal )\n   {\n      Decimal decimalVal = 0;\n      \n      // Char to decimal conversion is not supported and will always\n      // throw an InvalidCastException.\n      try\n      {\n         decimalVal = System::Convert::ToDecimal( charVal );\n      }\n      catch ( System::InvalidCastException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;Char-to-Decimal conversion is not supported by the .NET Framework.&quot; );\n      }\n      \n      //Decimal to char conversion is also not supported.\n      try\n      {\n         charVal = System::Convert::ToChar( decimalVal );\n      }\n      catch ( System::InvalidCastException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;Decimal-to-Char conversion is not supported by the .NET Framework.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#17\">\t\tpublic void ConvertCharDecimal(char charVal) {\n\t\t\tDecimal decimalVal = 0;\n\t\t\t\n\t\t\t// Char to decimal conversion is not supported and will always\n\t\t\t// throw an InvalidCastException.\n\t\t\ttry {\n\t\t\t\tdecimalVal = System.Convert.ToDecimal(charVal);\n\t\t\t} \n\t\t\tcatch (System.InvalidCastException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Char-to-Decimal conversion is not supported &quot; +\n\t\t\t\t\t&quot;by the .NET Framework.&quot;);\n\t\t\t}\n\n\t\t\t//Decimal to char conversion is also not supported.\n\t\t\ttry {\n\t\t\t\tcharVal = System.Convert.ToChar(decimalVal);\n\t\t\t} \n\t\t\tcatch (System.InvalidCastException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Decimal-to-Char conversion is not supported &quot; +\n\t\t\t\t\t&quot;by the .NET Framework.&quot;);\n\t\t\t}\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#17\">     Public Sub ConvertCharDecimal(ByVal charVal As Char)\n         Dim decimalVal As [Decimal] = 0\n\n         &#39; Char to decimal conversion is not supported and will always\n         &#39; throw an InvalidCastException.\n         Try\n             decimalVal = System.Convert.ToDecimal(charVal)\n         Catch exception As System.InvalidCastException\n             System.Console.WriteLine( _\n                  &quot;Char-to-Decimal conversion is not supported &quot; + _\n                  &quot;by the .NET Framework.&quot;)\n         End Try\n\n         &#39;Decimal to char conversion is also not supported.\n         Try\n             charVal = System.Convert.ToChar(decimalVal)\n         Catch exception As System.InvalidCastException\n             System.Console.WriteLine( _\n                 &quot;Decimal-to-Char conversion is not supported &quot; + _\n                 &quot;by the .NET Framework.&quot;)\n         End Try\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of signed 16-bit integers to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#2\">      short[] numbers = { Int16.MinValue, 0, 40, 160, 255, 1028, \n                          2011, Int16.MaxValue };\n      char result;\n      foreach (short number in numbers)\n      {\n         try {\n            result = Convert.ToChar(number);\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;, \n                              number);\n         }\n      }   \n      // The example displays the following output:\n      //       -32768 is outside the range of the Char data type.\n      //       0 converts to &#39; &#39;.\n      //       40 converts to &#39;(&#39;.\n      //       160 converts to &#39;&#160;&#39;.\n      //       255 converts to &#39;&#255;&#39;.\n      //       1028 converts to &#39;?&#39;.\n      //       2011 converts to &#39;?&#39;.\n      //       32767 converts to &#39;?&#39;.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#2\">      Dim numbers() As Short = { Int16.MinValue, 0, 40, 160, 255, 1028, _\n                                 2011, Int16.MaxValue }\n      Dim result As Char\n      For Each number As Short In numbers\n         Try\n            result = Convert.ToChar(number)\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;, _\n                              number)\n         End Try\n      Next   \n      &#39; The example displays the following output:\n      &#39;       -32768 is outside the range of the Char data type.\n      &#39;       0 converts to &#39; &#39;.\n      &#39;       40 converts to &#39;(&#39;.\n      &#39;       160 converts to &#39;&#160;&#39;.\n      &#39;       255 converts to &#39;&#255;&#39;.\n      &#39;       1028 converts to &#39;?&#39;.\n      &#39;       2011 converts to &#39;?&#39;.\n      &#39;       32767 converts to &#39;?&#39;.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> or greater than <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of signed integers to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#3\">      int[] numbers = { -1, 0, 40, 160, 255, 1028, \n                        2011, 30001, 207154, Int32.MaxValue };\n      char result;\n      foreach (int number in numbers)\n      {\n         try {\n            result = Convert.ToChar(number);\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;,\n                              number);\n         }\n      }   \n   }\n   //       -1 is outside the range of the Char data type.\n   //       0 converts to &#39; &#39;.\n   //       40 converts to &#39;(&#39;.\n   //       160 converts to &#39;&#160;&#39;.\n   //       255 converts to &#39;&#255;&#39;.\n   //       1028 converts to &#39;?&#39;.\n   //       2011 converts to &#39;?&#39;.\n   //       30001 converts to &#39;?&#39;.\n   //       207154 is outside the range of the Char data type.\n   //       2147483647 is outside the range of the Char data type.   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#3\">      Dim numbers() As Integer = { -1, 0, 40, 160, 255, 1028, _\n                                 2011, 30001, 207154, Int32.MaxValue }\n      Dim result As Char\n      For Each number As Integer In numbers\n         Try\n            result = Convert.ToChar(number)\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;, _\n                              number)\n         End Try\n      Next   \n   End Sub\n   &#39;       -1 is outside the range of the Char data type.\n   &#39;       0 converts to &#39; &#39;.\n   &#39;       40 converts to &#39;(&#39;.\n   &#39;       160 converts to &#39;&#160;&#39;.\n   &#39;       255 converts to &#39;&#255;&#39;.\n   &#39;       1028 converts to &#39;?&#39;.\n   &#39;       2011 converts to &#39;?&#39;.\n   &#39;       30001 converts to &#39;?&#39;.\n   &#39;       207154 is outside the range of the Char data type.\n   &#39;       2147483647 is outside the range of the Char data type.   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> or greater than <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert a long integer to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, and throws a <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on failure.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#8\">public:\n   void ConvertLongChar( Int64 longVal )\n   {\n      Char charVal = &#39;a&#39;;\n\n      try\n      {\n         charVal = System::Convert::ToChar( longVal );\n         System::Console::WriteLine( &quot; {0} as a char is {1}&quot;,\n         longVal, charVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine( &quot;Overflow in long-to-char conversion.&quot; );\n      }\n\n      \n      // A conversion from Char to long cannot overflow.\n      longVal = System::Convert::ToInt64( charVal );\n      System::Console::WriteLine( &quot; {0} as an Int64 is {1}&quot;,\n         charVal, longVal );\n   }\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#8\">\t\tpublic void ConvertLongChar(long longVal) {\n\n\t\t\tchar\tcharVal = &#39;a&#39;;\n\n\t\t\ttry {\n\t\t\t\tcharVal = System.Convert.ToChar(longVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;{0} as a char is {1}&quot;,\n\t\t\t\t\tlongVal, charVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Overflow in long-to-char conversion.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\t// A conversion from Char to long cannot overflow.\n\t\t\tlongVal = System.Convert.ToInt64(charVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as an Int64 is {1}&quot;,\n\t\t\t\tcharVal, longVal);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#8\">     Public Sub ConvertLongChar(ByVal longVal As Long)\n\n         Dim charVal As Char = &quot;a&quot;c\n\n         Try\n             charVal = System.Convert.ToChar(longVal)\n             System.Console.WriteLine(&quot;{0} as a char is {1}&quot;, _\n                                       longVal, charVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in Long-to-Char conversion.&quot;)\n         End Try\n\n         &#39; A conversion from Char to Long cannot overflow.\n         longVal = System.Convert.ToInt64(charVal)\n         System.Console.WriteLine(&quot;{0} as a Long is {1}&quot;, _\n                                   charVal, longVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to value, or <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is a null string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion of <code>value</code> to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.char#System_Char_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.char#System_Char_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is not <code>null</code>, this method wraps a call to the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToChar_\" data-linktype=\"relative-path\">ToChar</a>implementation of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#9\">      object[] values = { &#39;r&#39;, &quot;s&quot;, &quot;word&quot;, (byte) 83, 77, 109324, 335812911, \n                          new DateTime(2009, 3, 10), (uint) 1934, \n                          (sbyte) -17, 169.34, 175.6m, null };\n      char result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToChar(value);\n            Console.WriteLine(&quot;The {0} value {1} converts to {2}.&quot;, \n                              value.GetType().Name, value, result);\n         }\n         catch (FormatException e) {\n            Console.WriteLine(e.Message);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;Conversion of the {0} value {1} to a Char is not supported.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Char data type.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (NullReferenceException) {\n            Console.WriteLine(&quot;Cannot convert a null reference to a Char.&quot;);\n         }\n      }\n      // The example displays the following output:\n      //       The Char value r converts to r.\n      //       The String value s converts to s.\n      //       String must be exactly one character long.\n      //       The Byte value 83 converts to S.\n      //       The Int32 value 77 converts to M.\n      //       The Int32 value 109324 is outside the range of the Char data type.\n      //       The Int32 value 335812911 is outside the range of the Char data type.\n      //       Conversion of the DateTime value 3/10/2009 12:00:00 AM to a Char is not supported.\n      //       The UInt32 value 1934 converts to ?.\n      //       The SByte value -17 is outside the range of the Char data type.\n      //       Conversion of the Double value 169.34 to a Char is not supported.\n      //       Conversion of the Decimal value 175.6 to a Char is not supported.\n      //       Cannot convert a null reference to a Char.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#9\">      Dim values() As Object = { &quot;r&quot;c, &quot;s&quot;, &quot;word&quot;, CByte(83), 77, 109324, _\n                                 335812911, #3/10/2009#, CUInt(1934), _ \n                                 CSByte(-17), 169.34, 175.6d, Nothing }\n      Dim result As Char\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToChar(value)\n            Console.WriteLine(&quot;The {0} value {1} converts to {2}.&quot;, _ \n                              value.GetType().Name, value, result)\n         Catch e As FormatException\n            Console.WriteLine(e.Message)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;Conversion of the {0} value {1} to a Char is not supported.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Char data type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As NullReferenceException\n            Console.WriteLine(&quot;Cannot convert a null reference to a Char.&quot;)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       The Char value r converts to r.\n      &#39;       The String value s converts to s.\n      &#39;       String must be exactly one character long.\n      &#39;       The Byte value 83 converts to S.\n      &#39;       The Int32 value 77 converts to M.\n      &#39;       The Int32 value 109324 is outside the range of the Char data type.\n      &#39;       The Int32 value 335812911 is outside the range of the Char data type.\n      &#39;       Conversion of the DateTime value 3/10/2009 12:00:00 AM to a Char is not supported.\n      &#39;       The UInt32 value 1934 converts to ?.\n      &#39;       The SByte value -17 is outside the range of the Char data type.\n      &#39;       Conversion of the Double value 169.34 to a Char is not supported.\n      &#39;       Conversion of the Decimal value 175.6 to a Char is not supported.\n      &#39;       Cannot convert a null reference to a Char.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of signed bytes to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#4\">      sbyte[] numbers = { SByte.MinValue, -1, 40, 80, 120, SByte.MaxValue };\n      char result;\n      foreach (sbyte number in numbers)\n      {\n         try {\n            result = Convert.ToChar(number);\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;,\n                              number);\n         }\n      }\n      // The example displays the following output:\n      //       -128 is outside the range of the Char data type.\n      //       -1 is outside the range of the Char data type.\n      //       40 converts to &#39;(&#39;.\n      //       80 converts to &#39;P&#39;.\n      //       120 converts to &#39;x&#39;.\n      //       127 converts to &#39;⌂&#39;.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#4\">      Dim numbers() As SByte = { SByte.MinValue, -1, 40, 80, 120, SByte.MaxValue }\n      Dim result As Char\n      For Each number As SByte In numbers\n         Try\n            result = Convert.ToChar(number)\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;, _\n                              number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       -128 is outside the range of the Char data type.\n      &#39;       -1 is outside the range of the Char data type.\n      &#39;       40 converts to &#39;(&#39;.\n      &#39;       80 converts to &#39;P&#39;.\n      &#39;       120 converts to &#39;x&#39;.\n      &#39;       127 converts to &#39;⌂&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the first character of a specified string to a Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string of length 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to the first and only character in <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>value</code> is not 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>value</code> must be a string that contains a single character.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.char#System_Char_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a string array to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#5\">      string nullString = null;\n      string[] strings = { &quot;A&quot;, &quot;This&quot;,  &#39;\\u0007&#39;.ToString(), nullString };\n      char result;\n      foreach (string strng in strings)\n      {\n         try {\n            result = Convert.ToChar(strng);\n            Console.WriteLine(&quot;&#39;{0}&#39; converts to &#39;{1}&#39;.&quot;, strng, result);\n         }   \n         catch (FormatException)\n         {\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the correct format for conversion to a Char.&quot;,\n                              strng);\n         }\n         catch (ArgumentNullException) {\n            Console.WriteLine(&quot;A null string cannot be converted to a Char.&quot;);\n         }   \n      }\n      // The example displays the following output:\n      //       &#39;A&#39; converts to &#39;A&#39;.\n      //       &#39;This&#39; is not in the correct format for conversion to a Char.\n      //       &#39;       &#39; converts to &#39; &#39;.\n      //       A null string cannot be converted to a Char.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#5\">      Dim nullString As String = Nothing\n      Dim strings() As String = { &quot;A&quot;, &quot;This&quot;, vbTab, nullString }\n      Dim result As Char\n      For Each strng As String In strings\n         Try\n            result = Convert.ToChar(strng)\n            Console.WriteLine(&quot;&#39;{0}&#39; converts to &#39;{1}&#39;.&quot;, strng, result)\n         Catch e As FormatException\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the correct format for conversion to a Char.&quot;, _\n                              strng)\n         Catch e As ArgumentNullException\n            Console.WriteLine(&quot;A null string cannot be converted to a Char.&quot;)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       &#39;A&#39; converts to &#39;A&#39;.\n      &#39;       &#39;This&#39; is not in the correct format for conversion to a Char.\n      &#39;       &#39;       &#39; converts to &#39; &#39;.\n      &#39;       A null string cannot be converted to a Char.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned 16-bit integers to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#6\">      ushort[] numbers = { UInt16.MinValue, 40, 160, 255, 1028, \n                           2011, UInt16.MaxValue };\n      char result;\n      foreach (ushort number in numbers)\n      {\n         result = Convert.ToChar(number);\n         Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result);\n      }   \n      // The example displays the following output:\n      //       0 converts to &#39; &#39;.\n      //       40 converts to &#39;(&#39;.\n      //       160 converts to &#39;&#160;&#39;.\n      //       255 converts to &#39;&#255;&#39;.\n      //       1028 converts to &#39;?&#39;.\n      //       2011 converts to &#39;?&#39;.\n      //       65535 converts to &#39;?&#39;.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#6\">      Dim numbers() As UShort = { UInt16.MinValue, 40, 160, 255, 1028, _\n                                  2011, UInt16.MaxValue }\n      Dim result As Char\n      For Each number As UShort In numbers\n         result = Convert.ToChar(number)\n         Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;       0 converts to &#39; &#39;.\n      &#39;       40 converts to &#39;(&#39;.\n      &#39;       160 converts to &#39;&#160;&#39;.\n      &#39;       255 converts to &#39;&#255;&#39;.\n      &#39;       1028 converts to &#39;?&#39;.\n      &#39;       2011 converts to &#39;?&#39;.\n      &#39;       65535 converts to &#39;?&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned integers to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#7\">      uint[] numbers = { UInt32.MinValue, 40, 160, 255, 1028,\n                         2011, 30001, 207154, Int32.MaxValue };\n      char result;\n      foreach (uint number in numbers)\n      {\n         try {\n            result = Convert.ToChar(number);\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;,\n                              number);\n         }\n      }   \n      // The example displays the following output:\n      //       0 converts to &#39; &#39;.\n      //       40 converts to &#39;(&#39;.\n      //       160 converts to &#39;&#160;&#39;.\n      //       255 converts to &#39;&#255;&#39;.\n      //       1028 converts to &#39;?&#39;.\n      //       2011 converts to &#39;?&#39;.\n      //       30001 converts to &#39;?&#39;.\n      //       207154 is outside the range of the Char data type.\n      //       2147483647 is outside the range of the Char data type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#7\">      Dim numbers() As UInteger = { UInt32.MinValue, 40, 160, 255, 1028, _\n                                    2011, 30001, 207154, Int32.MaxValue }\n      Dim result As Char\n      For Each number As UInteger In numbers\n         Try\n            result = Convert.ToChar(number)\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;, _\n                              number)\n         End Try\n      Next   \n      &#39; The example displays the following output:\n      &#39;       0 converts to &#39; &#39;.\n      &#39;       40 converts to &#39;(&#39;.\n      &#39;       160 converts to &#39;&#160;&#39;.\n      &#39;       255 converts to &#39;&#255;&#39;.\n      &#39;       1028 converts to &#39;?&#39;.\n      &#39;       2011 converts to &#39;?&#39;.\n      &#39;       30001 converts to &#39;?&#39;.\n      &#39;       207154 is outside the range of the Char data type.\n      &#39;       2147483647 is outside the range of the Char data type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned long integers to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToChar#8\">      ulong[] numbers = { UInt64.MinValue, 40, 160, 255, 1028,\n                          2011, 30001, 207154, Int64.MaxValue };\n      char result;\n      foreach (ulong number in numbers)\n      {\n         try {\n            result = Convert.ToChar(number);\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;,\n                              number);\n         }\n      }   \n      // The example displays the following output:\n      //       0 converts to &#39; &#39;.\n      //       40 converts to &#39;(&#39;.\n      //       160 converts to &#39;&#160;&#39;.\n      //       255 converts to &#39;&#255;&#39;.\n      //       1028 converts to &#39;?&#39;.\n      //       2011 converts to &#39;?&#39;.\n      //       30001 converts to &#39;?&#39;.\n      //       207154 is outside the range of the Char data type.\n      //       9223372036854775807 is outside the range of the Char data type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToChar#8\">      Dim numbers() As ULong = { UInt64.MinValue, 40, 160, 255, 1028, _\n                                    2011, 30001, 207154, Int64.MaxValue }\n      Dim result As Char\n      For Each number As ULong In numbers\n         Try\n            result = Convert.ToChar(number)\n            Console.WriteLine(&quot;{0} converts to &#39;{1}&#39;.&quot;, number, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Char data type.&quot;, _\n                              number)\n         End Try\n      Next   \n      &#39; The example displays the following output:\n      &#39;       0 converts to &#39; &#39;.\n      &#39;       40 converts to &#39;(&#39;.\n      &#39;       160 converts to &#39;&#160;&#39;.\n      &#39;       255 converts to &#39;&#255;&#39;.\n      &#39;       1028 converts to &#39;?&#39;.\n      &#39;       2011 converts to &#39;?&#39;.\n      &#39;       30001 converts to &#39;?&#39;.\n      &#39;       207154 is outside the range of the Char data type.\n      &#39;       9223372036854775807 is outside the range of the Char data type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to <code>value</code>, or <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is a null string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion of <code>value</code> to a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.char#System_Char_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.char#System_Char_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToChar_\" data-linktype=\"relative-path\">ToChar</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> and a class that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Objects of the class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> hold an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. An object of each class is passed to the <code>ToChar</code> method. This method returns a character whose Unicode value is the average of the array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values, using the object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> to determine how to calculate the average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToXXX_Object_IFP#1\">using System;\nusing System.Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum AverageType : short\n{\n    None = 0,\n    GeometricMean = 1,\n    ArithmeticMean = 2,\n    Median = 3\n};\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\npublic class AverageInfo : IFormatProvider\n{\n    protected AverageType AvgType;\n\n    // Specify the type of averaging in the constructor.\n    public AverageInfo( AverageType avgType )\n    {\n        this.AvgType = avgType;\n    }\n\n    // This method returns a reference to the containing object \n    // if an object of AverageInfo type is requested. \n    public object GetFormat( Type argType )\n    {\n        if ( argType == typeof( AverageInfo ) )\n            return this;\n        else\n            return null;\n    }\n\n    // Use this property to set or get the type of averaging.\n    public AverageType TypeOfAverage        \n    {\n        get { return this.AvgType; }\n        set { this.AvgType = value; }\n    }\n}\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \npublic class DataSet : IConvertible\n{\n    protected ArrayList     data;\n    protected AverageInfo   defaultProvider;\n        \n    // Construct the object and add an initial list of values.\n    // Create a default format provider.\n    public DataSet( params double[ ] values )\n    {\n        data = new ArrayList( values );\n        defaultProvider = \n            new AverageInfo( AverageType.ArithmeticMean );\n    }\n        \n    // Add additional values with this method.\n    public int Add( double value )\n    {\n        data.Add( value );\n        return data.Count;\n    }\n        \n    // Get, set, and add values with this indexer property.\n    public double this[ int index ]        \n    {\n        get\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                return (double)data[ index ];\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.get] Index out of range.&quot; );\n        }\n        set\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                data[ index ] = value;\n\n            else if( index == data.Count )\n                data.Add( value );\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.set] Index out of range.&quot; );\n        }\n    }\n        \n    // This property returns the number of elements in the object.\n    public int Count        \n    {\n        get { return data.Count; }\n    }\n\n    // This method calculates the average of the object&#39;s elements.\n    protected double Average( AverageType avgType )\n    {\n        double  SumProd;\n\n        if( data.Count == 0 ) \n            return 0.0;\n\n        switch( avgType )\n        {\n            case AverageType.GeometricMean:\n\n                SumProd = 1.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd *= (double)data[ Index ];\n                \n                // This calculation will not fail with negative \n                // elements.\n                return Math.Sign( SumProd ) * Math.Pow( \n                    Math.Abs( SumProd ), 1.0 / data.Count );\n\n            case AverageType.ArithmeticMean:\n\n                SumProd = 0.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd += (double)data[ Index ];\n\n                return SumProd / data.Count;\n\n            case AverageType.Median:\n\n                if( data.Count % 2 == 0 )\n                    return ( (double)data[ data.Count / 2 ] + \n                        (double)data[ data.Count / 2 - 1 ] ) / 2.0;\n                else\n                    return (double)data[ data.Count / 2 ];\n\n            default:\n                return 0.0;\n        }\n    }\n\n    // Get the AverageInfo object from the caller&#39;s format provider,\n    // or use the local default.\n    protected AverageInfo GetAverageInfo( IFormatProvider provider )\n    {\n        AverageInfo avgInfo = null;\n\n        if( provider != null )\n            avgInfo = (AverageInfo)provider.GetFormat( \n                typeof( AverageInfo ) );\n\n        if ( avgInfo == null )\n            return defaultProvider;\n        else\n            return avgInfo;\n    }\n\n    // Calculate the average and limit the range.\n    protected double CalcNLimitAverage( double min, double max, \n        IFormatProvider provider )\n    {\n        // Get the format provider and calculate the average.\n        AverageInfo avgInfo = GetAverageInfo( provider );\n        double avg = Average( avgInfo.TypeOfAverage );\n\n        // Limit the range, based on the minimum and maximum values \n        // for the type.\n        return avg &gt; max ? max : avg &lt; min ? min : avg;\n\n    }\n\n    // The following elements are required by IConvertible.\n\n    // None of these conversion functions throw exceptions. When\n    // the data is out of range for the type, the appropriate\n    // MinValue or MaxValue is used.\n    public TypeCode GetTypeCode( )\n    {\n        return TypeCode.Object;\n    }\n\n    public bool ToBoolean( IFormatProvider provider )\n    {\n        // ToBoolean is false if the dataset is empty.\n        if( data.Count &lt;= 0 )\n            return false;\n\n        // For median averaging, ToBoolean is true if any \n        // non-discarded elements are nonzero.\n        else if( AverageType.Median == \n            GetAverageInfo( provider ).TypeOfAverage )\n        {\n            if (data.Count % 2 == 0 )\n                return ( (double)data[ data.Count / 2 ] != 0.0 || \n                    (double)data[ data.Count / 2 - 1 ] != 0.0 );\n            else\n                return (double)data[ data.Count / 2 ] != 0.0;\n        }\n\n        // For arithmetic or geometric mean averaging, ToBoolean is \n        // true if any element of the dataset is nonzero.  \n        else\n        {\n            for( int Index = 0; Index &lt; data.Count; Index++ )\n                if( (double)data[ Index ] != 0.0 ) \n                    return true;\n            return false;\n        }\n    }\n\n    public byte ToByte( IFormatProvider provider )\n    {\n        return Convert.ToByte( CalcNLimitAverage( \n            Byte.MinValue, Byte.MaxValue, provider ) );\n    }\n\n    public char ToChar( IFormatProvider provider )\n    {\n        return Convert.ToChar( Convert.ToUInt16( CalcNLimitAverage( \n            Char.MinValue, Char.MaxValue, provider ) ) );\n    }\n\n    // Convert to DateTime by adding the calculated average as \n    // seconds to the current date and time. A valid DateTime is \n    // always returned.\n    public DateTime ToDateTime( IFormatProvider provider )\n    {\n        double seconds = \n            Average( GetAverageInfo( provider ).TypeOfAverage );\n        try\n        {\n            return DateTime.Now.AddSeconds( seconds );\n        }\n        catch( ArgumentOutOfRangeException )\n        {\n            return seconds &lt; 0.0 ? DateTime.MinValue : DateTime.MaxValue;\n        }\n    }\n\n    public decimal ToDecimal( IFormatProvider provider )\n    {\n        // The Double conversion rounds Decimal.MinValue and \n        // Decimal.MaxValue to invalid Decimal values, so the \n        // following limits must be used.\n        return Convert.ToDecimal( CalcNLimitAverage( \n            -79228162514264330000000000000.0, \n            79228162514264330000000000000.0, provider ) );\n    }\n\n    public double ToDouble( IFormatProvider provider )\n    {\n        return Average( GetAverageInfo(provider).TypeOfAverage );\n    }\n\n    public short ToInt16( IFormatProvider provider )\n    {\n        return Convert.ToInt16( CalcNLimitAverage( \n            Int16.MinValue, Int16.MaxValue, provider ) );\n    }\n\n    public int ToInt32( IFormatProvider provider )\n    {\n        return Convert.ToInt32( CalcNLimitAverage( \n            Int32.MinValue, Int32.MaxValue, provider ) );\n    }\n\n    public long ToInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds Int64.MinValue and \n        // Int64.MaxValue to invalid Int64 values, so the following \n        // limits must be used.\n        return Convert.ToInt64( CalcNLimitAverage( \n            -9223372036854775000, 9223372036854775000, provider ) );\n    }\n\n    public SByte ToSByte( IFormatProvider provider )\n    {\n        return Convert.ToSByte( CalcNLimitAverage( \n            SByte.MinValue, SByte.MaxValue, provider ) );\n    }\n\n    public float ToSingle( IFormatProvider provider )\n    {\n        return Convert.ToSingle( CalcNLimitAverage( \n            Single.MinValue, Single.MaxValue, provider ) );\n    }\n\n    public UInt16 ToUInt16( IFormatProvider provider )\n    {\n        return Convert.ToUInt16( CalcNLimitAverage( \n            UInt16.MinValue, UInt16.MaxValue, provider ) );\n    }\n\n    public UInt32 ToUInt32( IFormatProvider provider )\n    {\n        return Convert.ToUInt32( CalcNLimitAverage( \n            UInt32.MinValue, UInt32.MaxValue, provider ) );\n    }\n\n    public UInt64 ToUInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds UInt64.MaxValue to an invalid\n        // UInt64 value, so the following limit must be used.\n        return Convert.ToUInt64( CalcNLimitAverage( \n            0, 18446744073709550000.0, provider ) );\n    }\n\n    public object ToType( Type conversionType, \n        IFormatProvider provider )\n    {\n        return Convert.ChangeType( Average( \n            GetAverageInfo( provider ).TypeOfAverage ), \n            conversionType );\n    }\n\n    public string ToString( IFormatProvider provider )\n    {\n        AverageType avgType = GetAverageInfo( provider ).TypeOfAverage;\n        return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, \n            Average( avgType ) );\n    }\n}\n   \nclass IConvertibleProviderDemo\n{\n    // Display a DataSet with three different format providers.\n    public static void DisplayDataSet( DataSet ds )\n    {\n        string      fmt    = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n        AverageInfo median = new AverageInfo( AverageType.Median );\n        AverageInfo geMean = \n            new AverageInfo( AverageType.GeometricMean );\n\n         // Display the dataset elements.\n        if( ds.Count &gt; 0 )\n        {\n            Console.Write( &quot;<br>DataSet: [{0}&quot;, ds[ 0 ] );\n            for( int iX = 1; iX &lt; ds.Count; iX++ )\n                Console.Write( &quot;, {0}&quot;, ds[ iX ] );\n            Console.WriteLine( &quot;]<br>&quot; );\n        }\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, \n            &quot;Geometric Mean&quot;, &quot;Median&quot;);\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, \n            &quot;--------------&quot;, &quot;------&quot;);\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, \n            Convert.ToBoolean( ds, null ), \n            Convert.ToBoolean( ds, geMean ), \n            Convert.ToBoolean( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToByte&quot;, \n            Convert.ToByte( ds, null ), \n            Convert.ToByte( ds, geMean ), \n            Convert.ToByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToChar&quot;, \n            Convert.ToChar( ds, null ), \n            Convert.ToChar( ds, geMean ), \n            Convert.ToChar( ds, median ) );\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; +\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, \n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, null ), \n            Convert.ToDateTime( ds, geMean ), \n            Convert.ToDateTime( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, \n            Convert.ToDecimal( ds, null ), \n            Convert.ToDecimal( ds, geMean ), \n            Convert.ToDecimal( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, \n            Convert.ToDouble( ds, null ), \n            Convert.ToDouble( ds, geMean ), \n            Convert.ToDouble( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, \n            Convert.ToInt16( ds, null ), \n            Convert.ToInt16( ds, geMean ), \n            Convert.ToInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, \n            Convert.ToInt32( ds, null ), \n            Convert.ToInt32( ds, geMean ), \n            Convert.ToInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, \n            Convert.ToInt64( ds, null ), \n            Convert.ToInt64( ds, geMean ), \n            Convert.ToInt64( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, \n            Convert.ToSByte( ds, null ), \n            Convert.ToSByte( ds, geMean ), \n            Convert.ToSByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, \n            Convert.ToSingle( ds, null ), \n            Convert.ToSingle( ds, geMean ), \n            Convert.ToSingle( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, \n            Convert.ToUInt16( ds, null ), \n            Convert.ToUInt16( ds, geMean ), \n            Convert.ToUInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, \n            Convert.ToUInt32( ds, null ), \n            Convert.ToUInt32( ds, geMean ), \n            Convert.ToUInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, \n            Convert.ToUInt64( ds, null ), \n            Convert.ToUInt64( ds, geMean ), \n            Convert.ToUInt64( ds, median ) );\n    }\n   \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods &quot; +\n            &quot;<br>generates the following output. The example &quot; +\n            &quot;displays the values <br>returned by the methods, &quot; +\n            &quot;using several IFormatProvider objects.<br>&quot; );\n          \n        DataSet ds1 = new DataSet( \n            10.5, 22.2, 45.9, 88.7, 156.05, 297.6 );\n        DisplayDataSet( ds1 );\n          \n        DataSet ds2 = new DataSet( \n            359999.95, 425000, 499999.5, 775000, 1695000 );\n        DisplayDataSet( ds2 );\n    }\n}\n\n/*\nThis example of the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:04:12 2003-05-13 15:03:28 2003-05-13 15:03:35\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 07:39:08 2003-05-20 22:28:45 2003-05-19 09:55:48\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert.ToXXX_Object_IFP#1\">using namespace System;\nusing namespace System::Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum class AverageType : short\n{\n   None = 0,\n   GeometricMean = 1,\n   ArithmeticMean = 2,\n   Median = 3\n};\n\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\nref class AverageInfo: public IFormatProvider\n{\nprotected:\n   AverageType AvgType;\n\npublic:\n\n   // Specify the type of averaging in the constructor.\n   AverageInfo( AverageType avgType )\n   {\n      this-&gt;AvgType = avgType;\n   }\n\n\n   // This method returns a reference to the containing object \n   // if an object of AverageInfo type is requested. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      if ( argType == AverageInfo::typeid)\n            return this;\n      else\n            return (Object^)0;\n   }\n\n\n   property AverageType TypeOfAverage \n   {\n\n      // Use this property to set or get the type of averaging.\n      AverageType get()\n      {\n         return this-&gt;AvgType;\n      }\n\n      void set( AverageType value )\n      {\n         this-&gt;AvgType = value;\n      }\n\n   }\n\n};\n\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \nref class DataSet: public IConvertible\n{\nprivate:\n   static Object^ null = nullptr;\n\nprotected:\n   ArrayList^ data;\n   AverageInfo^ defaultProvider;\n\n   // This method unboxes a boxed double.\n   double UnBoxDouble( Object^ obj )\n   {\n      return  *static_cast&lt;double^&gt;(obj);\n   }\n\n\npublic:\n\n   // Construct the object and add an initial list of values.\n   // Create a default format provider.\n   DataSet( ... array&lt;Double&gt;^values )\n   {\n      data = gcnew ArrayList( (Array^)values );\n      defaultProvider = gcnew AverageInfo( AverageType::ArithmeticMean );\n   }\n\n\n   // Add additional values with this method.\n   int Add( double value )\n   {\n      data-&gt;Add( value );\n      return data-&gt;Count;\n   }\n\n\n   property double Item[ int ]\n   {\n\n      // Get, set, and add values with this indexer property.\n      double get( int index )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  return UnBoxDouble( data[ index ] );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.get] Index out of range.&quot; );\n      }\n\n      void set( int index, double value )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  data[ index ] = value;\n         else\n         if ( index == data-&gt;Count )\n                  data-&gt;Add( value );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.set] Index out of range.&quot; );\n      }\n\n   }\n\n   property int Count \n   {\n\n      // This property returns the number of elements in the object.\n      int get()\n      {\n         return data-&gt;Count;\n      }\n\n   }\n\nprotected:\n\n   // This method calculates the average of the object&#39;s elements.\n   double Average( AverageType avgType )\n   {\n      double SumProd;\n      if ( data-&gt;Count == 0 )\n            return 0.0;\n\n      switch ( avgType )\n      {\n         case AverageType::GeometricMean:\n            SumProd = 1.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd *= UnBoxDouble( data[ Index ] );\n            \n            // This calculation will not fail with negative \n            // elements.\n            return Math::Sign( SumProd ) * Math::Pow( Math::Abs( SumProd ), 1.0 / data-&gt;Count );\n\n         case AverageType::ArithmeticMean:\n            SumProd = 0.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd += UnBoxDouble( data[ Index ] );\n            return SumProd / data-&gt;Count;\n\n         case AverageType::Median:\n            if ( data-&gt;Count % 2 == 0 )\n                        return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) + UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] )) / 2.0;\n            else\n                        return UnBoxDouble( data[ data-&gt;Count / 2 ] );\n\n         default:\n            return 0.0;\n      }\n   }\n\n\n   // Get the AverageInfo object from the caller&#39;s format provider,\n   // or use the local default.\n   AverageInfo^ GetAverageInfo( IFormatProvider^ provider )\n   {\n      AverageInfo^ avgInfo = nullptr;\n      if ( provider != nullptr )\n            avgInfo = static_cast&lt;AverageInfo^&gt;(provider-&gt;GetFormat( AverageInfo::typeid ));\n\n      if ( avgInfo == nullptr )\n            return defaultProvider;\n      else\n            return avgInfo;\n   }\n\n\n   // Calculate the average and limit the range.\n   double CalcNLimitAverage( double min, double max, IFormatProvider^ provider )\n   {\n      \n      // Get the format provider and calculate the average.\n      AverageInfo^ avgInfo = GetAverageInfo( provider );\n      double avg = Average( avgInfo-&gt;TypeOfAverage );\n      \n      // Limit the range, based on the minimum and maximum values \n      // for the type.\n      return avg &gt; max ? max : avg &lt; min ? min : avg;\n   }\n\n\npublic:\n\n   // The following elements are required by IConvertible.\n   // None of these conversion functions throw exceptions. When\n   // the data is out of range for the type, the appropriate\n   // MinValue or MaxValue is used.\n   virtual TypeCode GetTypeCode()\n   {\n      return TypeCode::Object;\n   }\n\n   virtual bool ToBoolean( IFormatProvider^ provider )\n   {\n      \n      // ToBoolean is false if the dataset is empty.\n      if ( data-&gt;Count &lt;= 0 )\n            return false;\n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      else\n      \n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      if ( AverageType::Median == GetAverageInfo( provider )-&gt;TypeOfAverage )\n      {\n         if ( data-&gt;Count % 2 == 0 )\n                  return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0 || UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] ) != 0.0);\n         else\n                  return UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0;\n      }\n      // For arithmetic or geometric mean averaging, ToBoolean is \n      // true if any element of the dataset is nonzero.  \n      else\n      {\n         for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n            if ( UnBoxDouble( data[ Index ] ) != 0.0 )\n                        return true;\n         return false;\n      }\n   }\n\n   virtual Byte ToByte( IFormatProvider^ provider )\n   {\n      return Convert::ToByte( CalcNLimitAverage( Byte::MinValue, Byte::MaxValue, provider ) );\n   }\n\n   virtual Char ToChar( IFormatProvider^ provider )\n   {\n      return Convert::ToChar( Convert::ToUInt16( CalcNLimitAverage( Char::MinValue, Char::MaxValue, provider ) ) );\n   }\n\n\n   // Convert to DateTime by adding the calculated average as \n   // seconds to the current date and time. A valid DateTime is \n   // always returned.\n   virtual DateTime ToDateTime( IFormatProvider^ provider )\n   {\n      double seconds = Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n      try\n      {\n         return DateTime::Now.AddSeconds( seconds );\n      }\n      catch ( ArgumentOutOfRangeException^ ) \n      {\n         return seconds &lt; 0.0 ? DateTime::MinValue : DateTime::MaxValue;\n      }\n\n   }\n\n   virtual Decimal ToDecimal( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Decimal.MinValue and \n      // Decimal.MaxValue to invalid Decimal values, so the \n      // following limits must be used.\n      return Convert::ToDecimal( CalcNLimitAverage(  -79228162514264330000000000000.0, 79228162514264330000000000000.0, provider ) );\n   }\n\n   virtual double ToDouble( IFormatProvider^ provider )\n   {\n      return Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n   }\n\n   virtual short ToInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToInt16( CalcNLimitAverage( Int16::MinValue, Int16::MaxValue, provider ) );\n   }\n\n   virtual int ToInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToInt32( CalcNLimitAverage( Int32::MinValue, Int32::MaxValue, provider ) );\n   }\n\n   virtual __int64 ToInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Int64.MinValue and \n      // Int64.MaxValue to invalid Int64 values, so the following \n      // limits must be used.\n      return Convert::ToInt64( CalcNLimitAverage(  -9223372036854775000, 9223372036854775000, provider ) );\n   }\n\n   virtual signed char ToSByte( IFormatProvider^ provider )\n   {\n      return Convert::ToSByte( CalcNLimitAverage( SByte::MinValue, SByte::MaxValue, provider ) );\n   }\n\n   virtual float ToSingle( IFormatProvider^ provider )\n   {\n      return Convert::ToSingle( CalcNLimitAverage( Single::MinValue, Single::MaxValue, provider ) );\n   }\n\n   virtual UInt16 ToUInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt16( CalcNLimitAverage( UInt16::MinValue, UInt16::MaxValue, provider ) );\n   }\n\n   virtual UInt32 ToUInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt32( CalcNLimitAverage( UInt32::MinValue, UInt32::MaxValue, provider ) );\n   }\n\n   virtual UInt64 ToUInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds UInt64.MaxValue to an invalid\n      // UInt64 value, so the following limit must be used.\n      return Convert::ToUInt64( CalcNLimitAverage( 0, 18446744073709550000.0, provider ) );\n   }\n\n   virtual Object^ ToType( Type^ conversionType, IFormatProvider^ provider )\n   {\n      return Convert::ChangeType( Average( GetAverageInfo( provider )-&gt;TypeOfAverage ), conversionType );\n   }\n\n   virtual String^ ToString( IFormatProvider^ provider )\n   {\n      AverageType avgType = GetAverageInfo( provider )-&gt;TypeOfAverage;\n      return String::Format( &quot;( {0}: {1:G10} )&quot;, avgType, Average( avgType ) );\n   }\n\n};\n\n\n// Display a DataSet with three different format providers.\nvoid DisplayDataSet( DataSet^ ds )\n{\n   IFormatProvider^ null = nullptr;\n   String^ fmt = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n   AverageInfo^ median = gcnew AverageInfo( AverageType::Median );\n   AverageInfo^ geMean = gcnew AverageInfo( AverageType::GeometricMean );\n   \n   // Display the dataset elements.\n   if ( ds-&gt;Count &gt; 0 )\n   {\n      Console::Write( &quot;<br>DataSet: [{0}&quot;, ds-&gt;Item[ 0 ] );\n      for ( int iX = 1; iX &lt; ds-&gt;Count; iX++ )\n         Console::Write( &quot;, {0}&quot;, ds-&gt;Item[ iX ] );\n      Console::WriteLine( &quot;]<br>&quot; );\n   }\n\n   Console::WriteLine( fmt, &quot;Convert::&quot;, &quot;Default&quot;, &quot;Geometric Mean&quot;, &quot;Median&quot; );\n   Console::WriteLine( fmt, &quot;---------&quot;, &quot;-------&quot;, &quot;--------------&quot;, &quot;------&quot; );\n   Console::WriteLine( fmt, &quot;ToBoolean&quot;, Convert::ToBoolean( ds, null ), Convert::ToBoolean( ds, geMean ), Convert::ToBoolean( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToByte&quot;, Convert::ToByte( ds, null ), Convert::ToByte( ds, geMean ), Convert::ToByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToChar&quot;, Convert::ToChar( ds, null ), Convert::ToChar( ds, geMean ), Convert::ToChar( ds, median ) );\n   Console::WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot;\n   &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, &quot;ToDateTime&quot;, Convert::ToDateTime( ds, null ), Convert::ToDateTime( ds, geMean ), Convert::ToDateTime( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDecimal&quot;, Convert::ToDecimal( ds, null ), Convert::ToDecimal( ds, geMean ), Convert::ToDecimal( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDouble&quot;, Convert::ToDouble( ds, null ), Convert::ToDouble( ds, geMean ), Convert::ToDouble( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt16&quot;, Convert::ToInt16( ds, null ), Convert::ToInt16( ds, geMean ), Convert::ToInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt32&quot;, Convert::ToInt32( ds, null ), Convert::ToInt32( ds, geMean ), Convert::ToInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt64&quot;, Convert::ToInt64( ds, null ), Convert::ToInt64( ds, geMean ), Convert::ToInt64( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSByte&quot;, Convert::ToSByte( ds, null ), Convert::ToSByte( ds, geMean ), Convert::ToSByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSingle&quot;, Convert::ToSingle( ds, null ), Convert::ToSingle( ds, geMean ), Convert::ToSingle( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt16&quot;, Convert::ToUInt16( ds, null ), Convert::ToUInt16( ds, geMean ), Convert::ToUInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt32&quot;, Convert::ToUInt32( ds, null ), Convert::ToUInt32( ds, geMean ), Convert::ToUInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt64&quot;, Convert::ToUInt64( ds, null ), Convert::ToUInt64( ds, geMean ), Convert::ToUInt64( ds, median ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods &quot;\n   &quot;<br>generates the following output. The example &quot;\n   &quot;displays the values <br>returned by the methods, &quot;\n   &quot;using several IFormatProvider objects.<br>&quot; );\n   \n   // To call a [ParamArray] method in C++, you cannot just\n   // list the parameters, you need to build an array.\n   array&lt;Double&gt;^dataElem = gcnew array&lt;Double&gt;(6);\n   dataElem[ 0 ] = 10.5;\n   dataElem[ 1 ] = 22.2;\n   dataElem[ 2 ] = 45.9;\n   dataElem[ 3 ] = 88.7;\n   dataElem[ 4 ] = 156.05;\n   dataElem[ 5 ] = 297.6;\n   DataSet^ ds1 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds1 );\n   dataElem = gcnew array&lt;Double&gt;(5);\n   dataElem[ 0 ] = 359999.95;\n   dataElem[ 1 ] = 425000;\n   dataElem[ 2 ] = 499999.5;\n   dataElem[ 3 ] = 775000;\n   dataElem[ 4 ] = 1695000;\n   DataSet^ ds2 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds2 );\n}\n\n/*\nThis example of the Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:30:23 2003-05-13 15:29:39 2003-05-13 15:29:47\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 08:05:19 2003-05-20 22:54:57 2003-05-19 10:21:59\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToXXX_Object_IFP#1\">Imports System.Collections\n\nModule IConvertibleProviderDemo\n\n    &#39; Define the types of averaging available in the class \n    &#39; implementing IConvertible.\n    Enum AverageType as Short\n        None = 0\n        GeometricMean = 1\n        ArithmeticMean = 2\n        Median = 3\n    End Enum\n\n    &#39; Pass an instance of this class to methods that require an \n    &#39; IFormatProvider. The class instance determines the type of \n    &#39; average to calculate.\n    Public Class AverageInfo\n        Implements IFormatProvider\n\n        Protected  AvgType      As AverageType\n\n        &#39; Specify the type of averaging in the constructor.\n        Public Sub New( avgType As AverageType )\n            Me.AvgType = avgType\n        End Sub\n\n        &#39; This method returns a reference to the containing object \n        &#39; if an object of AverageInfo type is requested. \n        Public Function GetFormat( argType As Type ) As Object _\n            Implements IFormatProvider.GetFormat\n\n            If argType Is GetType( AverageInfo ) Then\n                Return Me\n            Else\n                Return Nothing\n            End If\n        End Function \n\n        &#39; Use this property to set or get the type of averaging.\n        Public Property TypeOfAverage( ) As AverageType\n            Get\n                Return Me.AvgType\n            End Get\n            Set( ByVal value as AverageType )\n                Me.AvgType = value\n            End Set\n        End Property\n    End Class \n\n    &#39; This class encapsulates an array of Double values and implements \n    &#39; the IConvertible interface. Most of the IConvertible methods \n    &#39; return an average of the array elements in one of three types: \n    &#39; arithmetic mean, geometric mean, or median. \n    Public Class DataSet\n        Implements IConvertible\n\n        Protected data              As ArrayList\n        Protected defaultProvider   As AverageInfo\n           \n        &#39; Construct the object and add an initial list of values.\n        &#39; Create a default format provider.\n        Public Sub New( ParamArray values( ) As Double )\n            data = New ArrayList( values )\n            defaultProvider = New AverageInfo( _\n                AverageType.ArithmeticMean )  \n        End Sub\n           \n        &#39; Add additional values with this method.\n        Public Function Add( value As Double ) As Integer\n            data.Add( value )\n            Return data.Count\n        End Function\n           \n        &#39; Get, set, and add values with this indexer property.\n        Default Public Property Item(index As Integer) As Double\n            Get\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    Return System.Convert.ToDouble( data( index ) )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.get] Index out of range.&quot; )\n                End If\n            End Get\n            Set\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    data( index ) = value\n                 \n                ElseIf index = data.Count Then\n                    data.Add( value )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.set] Index out of range.&quot; )\n                End If\n            End Set\n        End Property\n          \n        &#39; This property returns the number of elements in the object.\n        Public ReadOnly Property Count( ) As Integer\n            Get\n                Return data.Count\n            End Get\n        End Property\n\n        &#39; This method calculates the average of the object&#39;s elements.\n        Protected Function Average( ByVal avgType As AverageType ) As Double\n\n            Dim SumProd As Double \n            Dim Index   As Integer\n\n            If data.Count = 0 Then Return 0.0\n\n            Select Case avgType\n                \n                Case AverageType.GeometricMean\n\n                    SumProd = 1.0\n                    For Index = 0 To data.Count - 1\n                        SumProd *= data( Index )\n                    Next Index\n                    \n                    &#39; This calculation will not fail with negative \n                    &#39; elements.\n                    Return Math.Sign( SumProd ) * Math.Pow( _\n                        Math.Abs( SumProd ), 1.0 / data.Count )\n\n                Case AverageType.ArithmeticMean\n\n                    SumProd = 0.0\n                    For Index = 0 To data.Count - 1\n                        SumProd += data( Index )\n                    Next Index\n\n                    Return SumProd / data.Count \n\n                Case AverageType.Median\n\n                    If data.Count Mod 2 = 0 Then\n                        Return ( data( data.Count \\ 2 ) + _\n                            data( data.Count \\ 2 - 1 ) ) / 2.0\n                    Else\n                        Return data( data.Count \\ 2 ) \n                    End If\n            End Select\n        End Function\n\n        &#39; Get the AverageInfo object from the caller&#39;s format \n        &#39; provider, or use the local default.\n        Protected Function GetAverageInfo( _\n            provider As IFormatProvider ) As AverageInfo\n\n            Dim avgInfo As AverageInfo = Nothing\n\n            If Not provider Is Nothing Then\n                avgInfo = provider.GetFormat( GetType( AverageInfo ) )\n            End If\n\n            Return IIf( avgInfo Is Nothing, defaultProvider, avgInfo )\n            \n        End Function           \n\n        &#39; Calculate the average and limit the range.\n        Protected Function CalcNLimitAverage( min As Double, _\n            max As Double, provider as IFormatProvider ) As Double\n\n            &#39; Get the format provider and calculate the average.\n            Dim avgInfo As AverageInfo = GetAverageInfo( provider )\n            Dim avg As Double = Average( avgInfo.TypeOfAverage )\n\n            &#39; Limit the range, based on the minimum and maximum values \n            &#39; for the type.\n            Return IIf( avg &gt; max, max, IIf( avg &lt; min, min, avg ) )\n\n        End Function\n\n        &#39; The following elements are required by IConvertible.\n\n        &#39; None of these conversion functions throw exceptions. When\n        &#39; the data is out of range for the type, the appropriate\n        &#39; MinValue or MaxValue is used.\n        Public Function GetTypeCode( ) As TypeCode _\n            Implements IConvertible.GetTypeCode\n            Return TypeCode.Object\n        End Function\n\n        Function ToBoolean( ByVal provider As IFormatProvider ) As _\n            Boolean Implements IConvertible.ToBoolean\n\n            &#39; ToBoolean is false if the dataset is empty.\n            If data.Count &lt;= 0 Then\n                Return False\n\n            &#39; For median averaging, ToBoolean is true if any \n            &#39; non-discarded elements are nonzero.\n            ElseIf AverageType.Median = _\n                GetAverageInfo( provider ).TypeOfAverage Then\n\n                If data.Count Mod 2 = 0 Then\n                    Return ( data( data.Count \\ 2 ) &lt;&gt; 0.0 Or _\n                        data( data.Count \\ 2 - 1 ) &lt;&gt; 0.0 )\n                Else\n                    Return data( data.Count \\ 2 ) &lt;&gt; 0.0\n                End If\n\n            &#39; For arithmetic or geometric mean averaging, ToBoolean is \n            &#39; true if any element of the dataset is nonzero.  \n            Else\n                Dim Index As Integer\n                For Index = 0 To data.Count - 1\n                    If data( Index ) &lt;&gt; 0.0 Then Return True\n                Next Index\n                Return False\n            End If\n        End Function\n\n        Function ToByte( ByVal provider As IFormatProvider ) As Byte _\n            Implements IConvertible.ToByte\n            Return Convert.ToByte( CalcNLimitAverage( _\n                Byte.MinValue, Byte.MaxValue, provider ) )\n        End Function\n\n        Function ToChar( ByVal provider As IFormatProvider ) As Char _\n            Implements IConvertible.ToChar\n            Return Convert.ToChar( Convert.ToUInt16( _\n                CalcNLimitAverage( 0.0, &amp;HFFFF, provider ) ) )\n        End Function\n\n        &#39; Convert to DateTime by adding the calculated average as \n        &#39; seconds to the current date and time. A valid DateTime is \n        &#39; always returned.\n        Function ToDateTime( ByVal provider As IFormatProvider ) As _\n            DateTime Implements IConvertible.ToDateTime\n            Dim seconds As Double = Average( _\n                GetAverageInfo( provider ).TypeOfAverage )\n            Try\n                Return DateTime.Now.AddSeconds( seconds )\n            Catch ex As ArgumentOutOfRangeException \n                Return IIf( seconds &lt; 0.0, DateTime.MinValue, _\n                    DateTime.MaxValue )\n            End Try\n        End Function\n\n        Function ToDecimal( ByVal provider As IFormatProvider ) As _\n            Decimal Implements IConvertible.ToDecimal\n\n            &#39; The Double conversion rounds Decimal.MinValue and\n            &#39; Decimal.MaxValue to invalid Decimal values, so the \n            &#39; following limits must be used.\n            Return Convert.ToDecimal( CalcNLimitAverage( _\n                -79228162514264330000000000000.0, _\n                79228162514264330000000000000.0, provider ) )\n        End Function\n\n        Function ToDouble( ByVal provider As IFormatProvider) As _\n            Double Implements IConvertible.ToDouble\n            Return Average( GetAverageInfo( provider ).TypeOfAverage )\n        End Function\n\n        Function ToInt16( ByVal provider As IFormatProvider ) As _\n            Short Implements IConvertible.ToInt16\n            Return Convert.ToInt16( CalcNLimitAverage( _\n                Int16.MinValue, Int16.MaxValue, provider ) )\n        End Function\n\n        Function ToInt32( ByVal provider As IFormatProvider ) As _\n            Integer Implements IConvertible.ToInt32\n            Return Convert.ToInt32( CalcNLimitAverage( _\n                Int32.MinValue, Int32.MaxValue, provider ) )\n        End Function\n\n        Function ToInt64( ByVal provider As IFormatProvider ) As Long _\n            Implements IConvertible.ToInt64\n\n            &#39; The Double conversion rounds Int64.MinValue and \n            &#39; Int64.MaxValue to invalid Long values, so the following \n            &#39; limits must be used.\n            Return Convert.ToInt64( CalcNLimitAverage( _\n                -9223372036854775000, 9223372036854775000, provider ) )\n        End Function\n\n        Function ToSByte( ByVal provider As IFormatProvider ) As _\n            SByte Implements IConvertible.ToSByte\n\n            &#39; SByte.MinValue and SByte.MaxValue are not defined in\n            &#39; Visual Basic.\n            Return Convert.ToSByte( CalcNLimitAverage( _\n                -128, 127, provider ) )\n        End Function\n\n        Function ToSingle( ByVal provider As IFormatProvider ) As _\n            Single Implements IConvertible.ToSingle\n            Return Convert.ToSingle( CalcNLimitAverage( _\n                Single.MinValue, Single.MaxValue, provider ) )\n        End Function\n\n        Function ToUInt16( ByVal provider As IFormatProvider ) As _\n            UInt16 Implements IConvertible.ToUInt16\n\n            &#39; UInt16.MinValue and UInt16.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt16( CalcNLimitAverage( _\n                0, &amp;HFFFF, provider ) )\n        End Function\n\n        Function ToUInt32( ByVal provider As IFormatProvider ) As _\n            UInt32 Implements IConvertible.ToUInt32\n\n            &#39; UInt32.MinValue and UInt32.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt32( CalcNLimitAverage( _\n                0, 4294967295, provider ) )\n        End Function\n\n        Function ToUInt64( ByVal provider As IFormatProvider ) As _\n            UInt64 Implements IConvertible.ToUInt64\n\n            &#39; UInt64.MinValue and UInt64.MaxValue are not defined in \n            &#39; Visual Basic. The Double conversion would have rounded \n            &#39; UInt64.MaxValue, so the following limit must be used.\n            Return Convert.ToUInt64( CalcNLimitAverage( _\n                0, 18446744073709550000.0, provider ) )\n        End Function\n\n        Function ToType( ByVal conversionType As Type, _\n            ByVal provider As IFormatProvider) As Object _\n            Implements IConvertible.ToType\n            Return Convert.ChangeType( Average( GetAverageInfo( _\n                provider ).TypeOfAverage ), conversionType )\n        End Function\n\n        Overloads Function ToString( ByVal provider As IFormatProvider _\n            ) As String Implements IConvertible.ToString\n            Dim avgType as AverageType = _\n                GetAverageInfo( provider ).TypeOfAverage\n            Return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, _\n                Average( avgType ) )\n        End Function\n    End Class\n   \n    &#39; Display a DataSet with three different format providers.\n    Sub DisplayDataSet( ds As DataSet )\n\n        Dim fmt    As String      = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;\n        Dim median As AverageInfo = New AverageInfo( AverageType.Median )\n        Dim geMean As AverageInfo = _\n            New AverageInfo( AverageType.GeometricMean )\n        Dim iX     As Integer\n\n        &#39; Display the dataset elements.\n        If ds.Count &gt; 0 Then\n            Console.Write( vbCrLf &amp; &quot;DataSet: [{0}&quot;, ds( 0 ) )\n            For iX = 1 To ds.Count - 1\n                Console.Write( &quot;, {0}&quot;, ds( iX ) )\n            Next iX\n            Console.WriteLine( &quot;]&quot; &amp; vbCrLf )\n        End If\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, _\n            &quot;Geometric Mean&quot;, &quot;Median&quot; )\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, _\n            &quot;--------------&quot;, &quot;------&quot; )\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, _\n            Convert.ToBoolean( ds, Nothing ), _\n            Convert.ToBoolean( ds, geMean ), _\n            Convert.ToBoolean( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToByte&quot;, _\n            Convert.ToByte( ds, Nothing ), _\n            Convert.ToByte( ds, geMean ), _\n            Convert.ToByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToChar&quot;, _\n            Convert.ToChar( ds, Nothing ), _\n            Convert.ToChar( ds, geMean ), _\n            Convert.ToChar( ds, median ) )\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; &amp; _\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, _\n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, Nothing ), _\n            Convert.ToDateTime( ds, geMean ), _\n            Convert.ToDateTime( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, _\n            Convert.ToDecimal( ds, Nothing ), _\n            Convert.ToDecimal( ds, geMean ), _\n            Convert.ToDecimal( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, _\n            Convert.ToDouble( ds, Nothing ), _\n            Convert.ToDouble( ds, geMean ), _\n            Convert.ToDouble( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, _\n            Convert.ToInt16( ds, Nothing ), _\n            Convert.ToInt16( ds, geMean ), _\n            Convert.ToInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, _\n            Convert.ToInt32( ds, Nothing ), _\n            Convert.ToInt32( ds, geMean ), _\n            Convert.ToInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, _\n            Convert.ToInt64( ds, Nothing ), _\n            Convert.ToInt64( ds, geMean ), _\n            Convert.ToInt64( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, _\n            Convert.ToSByte( ds, Nothing ), _\n            Convert.ToSByte( ds, geMean ), _\n            Convert.ToSByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, _\n            Convert.ToSingle( ds, Nothing ), _\n            Convert.ToSingle( ds, geMean ), _\n            Convert.ToSingle( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, _\n            Convert.ToUInt16( ds, Nothing ), _\n            Convert.ToUInt16( ds, geMean ), _\n            Convert.ToUInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, _\n            Convert.ToUInt32( ds, Nothing ), _\n            Convert.ToUInt32( ds, geMean ), _\n            Convert.ToUInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, _\n            Convert.ToUInt64( ds, Nothing ), _\n            Convert.ToUInt64( ds, geMean ), _\n            Convert.ToUInt64( ds, median ) )\n    End Sub\n   \n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Convert.To&lt;Type&gt;( Object, &quot; &amp; _\n            &quot;IFormatProvider ) methods &quot; &amp; vbCrLf &amp; &quot;generates &quot; &amp; _\n            &quot;the following output. The example displays the &quot; &amp; _\n            &quot;values &quot; &amp; vbCrLf &amp; &quot;returned by the methods, &quot; &amp; _\n            &quot;using several IFormatProvider objects.&quot; &amp; vbCrLf )\n          \n        Dim ds1 As New DataSet( 10.5, 22.2, 45.9, 88.7, 156.05, 297.6 )\n        DisplayDataSet( ds1 )\n          \n        Dim ds2 As New DataSet( _\n            359999.95, 425000, 499999.5, 775000, 1695000 )\n        DisplayDataSet( ds2 )\n    End Sub \nEnd Module \n\n&#39; This example of the Convert.To&lt;Type&gt;( Object, IFormatProvider ) methods\n&#39; generates the following output. The example displays the values\n&#39; returned by the methods, using several IFormatProvider objects.\n&#39; \n&#39; DataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       103                  59                  67\n&#39; ToChar                         g                   ;                   C\n&#39; ToDateTime   2003-05-13 14:52:53 2003-05-13 14:52:09 2003-05-13 14:52:17\n&#39; ToDecimal       103.491666666667    59.4332135445164                67.3\n&#39; ToDouble        103.491666666667    59.4332135445164                67.3\n&#39; ToInt16                      103                  59                  67\n&#39; ToInt32                      103                  59                  67\n&#39; ToInt64                      103                  59                  67\n&#39; ToSByte                      103                  59                  67\n&#39; ToSingle                103.4917            59.43321                67.3\n&#39; ToUInt16                     103                  59                  67\n&#39; ToUInt32                     103                  59                  67\n&#39; ToUInt64                     103                  59                  67\n&#39; \n&#39; DataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       255                 255                 255\n&#39; ToChar                         ?                   ?                   ?\n&#39; ToDateTime   2003-05-22 07:27:49 2003-05-20 22:17:27 2003-05-19 09:44:29\n&#39; ToDecimal              750999.89    631577.237188435            499999.5\n&#39; ToDouble               750999.89    631577.237188435            499999.5\n&#39; ToInt16                    32767               32767               32767\n&#39; ToInt32                   751000              631577              500000\n&#39; ToInt64                   751000              631577              500000\n&#39; ToSByte                      127                 127                 127\n&#39; ToSingle                750999.9            631577.3            499999.5\n&#39; ToUInt16                   65535               65535               65535\n&#39; ToUInt32                  751000              631577              500000\n&#39; ToUInt64                  751000              631577              500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToChar_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToChar(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToChar (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string of length 1 or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character that is equivalent to the first and only character in <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>value</code> is not 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>value</code> must be a string that contains a single character.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.char#System_Char_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a string representation of a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value with the <code>ToChar</code> method, using an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object that displays the type of the format provider for which it is called. The example shows that the format provider is not referenced.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToNonNum_String#2\">using namespace System;\nusing namespace System::Globalization;\nref class DummyProvider: public IFormatProvider\n{\npublic:\n\n   // Normally, GetFormat returns an object of the requested type\n   // (usually itself) if it is able; otherwise, it returns Nothing. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      // Here, GetFormat displays the name of argType, after removing \n      // the namespace information. GetFormat always returns null.\n      String^ argStr = argType-&gt;ToString();\n      if ( argStr-&gt;Equals( &quot;&quot; ) )\n            argStr = &quot;Empty&quot;;\n\n      argStr = argStr-&gt;Substring( argStr-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n      Console::Write( &quot;{0,-20}&quot;, argStr );\n      return (Object^)0;\n   }\n};\n\nint main()\n{\n   // Create an instance of IFormatProvider.\n   DummyProvider^ provider = gcnew DummyProvider;\n   String^ format = &quot;{0,-17}{1,-17}{2}&quot;;\n\n   // Convert these values using DummyProvider.\n   String^ Int32A = &quot;-252645135&quot;;\n   String^ DoubleA = &quot;61680.3855&quot;;\n   String^ DayTimeA = &quot;2001/9/11 13:45&quot;;\n   String^ BoolA = &quot;True&quot;;\n   String^ StringA = &quot;Qwerty&quot;;\n   String^ CharA = &quot;$&quot;;\n   Console::WriteLine( &quot;This example of selected &quot;\n   &quot;Convert::To&lt;Type&gt;( String*, IFormatProvider* ) <br>methods &quot;\n   &quot;generates the following output. The example displays the &quot;\n   &quot;<br>provider type if the IFormatProvider is called.&quot; );\n   Console::WriteLine( &quot;<br>Note: For the &quot;\n   &quot;ToBoolean, ToString, and ToChar methods, the <br>&quot;\n   &quot;IFormatProvider object is not referenced.&quot; );\n\n   // The format provider is called for the following conversions.\n   Console::WriteLine();\n   Console::WriteLine( format, &quot;ToInt32&quot;, Int32A, Convert::ToInt32( Int32A, provider ) );\n   Console::WriteLine( format, &quot;ToDouble&quot;, DoubleA, Convert::ToDouble( DoubleA, provider ) );\n   Console::WriteLine( format, &quot;ToDateTime&quot;, DayTimeA, Convert::ToDateTime( DayTimeA, provider ) );\n\n   // The format provider is not called for these conversions.\n   Console::WriteLine();\n   Console::WriteLine( format, &quot;ToBoolean&quot;, BoolA, Convert::ToBoolean( BoolA, provider ) );\n   Console::WriteLine( format, &quot;ToString&quot;, StringA, Convert::ToString( StringA, provider ) );\n   Console::WriteLine( format, &quot;ToChar&quot;, CharA, Convert::ToChar( CharA, provider ) );\n}\n\n/*\nThis example of selected Convert::To&lt;Type&gt;( String*, IFormatProvider* )\nmethods generates the following output. The example displays the\nprovider type if the IFormatProvider is called.\n\nNote: For the ToBoolean, ToString, and ToChar methods, the\nIFormatProvider object is not referenced.\n\nNumberFormatInfo    ToInt32          -252645135       -252645135\nNumberFormatInfo    ToDouble         61680.3855       61680.3855\nDateTimeFormatInfo  ToDateTime       2001/9/11 13:45  9/11/2001 1:45:00 PM\n\nToBoolean        True             True\nToString         Qwerty           Qwerty\nToChar           $                $\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToNonNum_String#2\">using System;\nusing System.Globalization;\n\npublic class DummyProvider : IFormatProvider\n{\n    // Normally, GetFormat returns an object of the requested type\n    // (usually itself) if it is able; otherwise, it returns Nothing. \n    public object GetFormat(Type argType)\n    {\n        // Here, GetFormat displays the name of argType, after removing \n        // the namespace information. GetFormat always returns null.\n        string argStr = argType.ToString( );\n        if( argStr == &quot;&quot; ) \n            argStr = &quot;Empty&quot;;\n        argStr = argStr.Substring( argStr.LastIndexOf( &#39;.&#39; ) + 1 );\n\n        Console.Write( &quot;{0,-20}&quot;, argStr );\n        return null;\n    }\n}\n\nclass ConvertNonNumericProviderDemo\n{\n    public static void Main( )\n    {\n        // Create an instance of IFormatProvider.\n        DummyProvider provider = new DummyProvider( );\n        string format   = &quot;{0,-17}{1,-17}{2}&quot;;\n\n        // Convert these values using DummyProvider.\n        string Int32A   = &quot;-252645135&quot;;\n        string DoubleA  = &quot;61680.3855&quot;;\n        string DayTimeA = &quot;2001/9/11 13:45&quot;;\n\n        string BoolA    = &quot;True&quot;;\n        string StringA  = &quot;Qwerty&quot;;\n        string CharA    = &quot;$&quot;;\n\n        Console.WriteLine( &quot;This example of selected &quot; +\n            &quot;Convert.To&lt;Type&gt;( String, IFormatProvider ) <br>methods &quot; +\n            &quot;generates the following output. The example displays &quot; +\n            &quot;the <br>provider type if the IFormatProvider is called.&quot; );\n        Console.WriteLine( &quot;<br>Note: For the &quot; +\n            &quot;ToBoolean, ToString, and ToChar methods, the <br>&quot; +\n            &quot;IFormatProvider object is not referenced.&quot; );\n\n        // The format provider is called for the following conversions.\n        Console.WriteLine( );\n        Console.WriteLine( format, &quot;ToInt32&quot;, Int32A, \n            Convert.ToInt32( Int32A, provider ) );\n        Console.WriteLine( format, &quot;ToDouble&quot;, DoubleA, \n            Convert.ToDouble( DoubleA, provider ) );\n        Console.WriteLine( format, &quot;ToDateTime&quot;, DayTimeA, \n            Convert.ToDateTime( DayTimeA, provider ) );\n\n        // The format provider is not called for these conversions.\n        Console.WriteLine( );\n        Console.WriteLine( format, &quot;ToBoolean&quot;, BoolA, \n            Convert.ToBoolean( BoolA, provider ) );\n        Console.WriteLine( format, &quot;ToString&quot;, StringA, \n            Convert.ToString( StringA, provider ) );\n        Console.WriteLine( format, &quot;ToChar&quot;, CharA, \n            Convert.ToChar( CharA, provider ) );\n    }\n}\n\n/*\nThis example of selected Convert.To&lt;Type&gt;( String, IFormatProvider )\nmethods generates the following output. The example displays the\nprovider type if the IFormatProvider is called.\n\nNote: For the ToBoolean, ToString, and ToChar methods, the\nIFormatProvider object is not referenced.\n\nNumberFormatInfo    ToInt32          -252645135       -252645135\nNumberFormatInfo    ToDouble         61680.3855       61680.3855\nDateTimeFormatInfo  ToDateTime       2001/9/11 13:45  9/11/2001 1:45:00 PM\n\nToBoolean        True             True\nToString         Qwerty           Qwerty\nToChar           $                $\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToNonNum_String#2\">Imports System.Globalization\n\nPublic Class DummyProvider\n    Implements IFormatProvider\n\n    &#39; Normally, GetFormat returns an object of the requested type\n    &#39; (usually itself) if it is able; otherwise, it returns Nothing. \n    Public Function GetFormat( argType As Type ) As Object _\n        Implements IFormatProvider.GetFormat\n\n        &#39; Here, GetFormat displays the name of argType, after removing \n        &#39; the namespace information. GetFormat always returns Nothing.\n        Dim argStr  As String = argType.ToString( )\n        If argStr = &quot;&quot; Then argStr = &quot;Empty&quot;\n        argStr = argStr.Substring( argStr.LastIndexOf( &quot;.&quot;c ) + 1 )\n\n        Console.Write( &quot;{0,-20}&quot;, argStr )\n        Return Nothing\n\n    End Function \nEnd Class\n\nModule ConvertNonNumericProviderDemo\n\n    Sub Main( )\n\n        &#39; Create an instance of IFormatProvider.\n        Dim provider    As New DummyProvider( )\n        Dim format      As String   = &quot;{0,-17}{1,-17}{2}&quot;\n\n        &#39; Convert these values using DummyProvider.\n        Dim Int32A      As String   = &quot;-252645135&quot;   \n        Dim DoubleA     As String   = &quot;61680.3855&quot;\n        Dim DayTimeA    As String   = &quot;2001/9/11 13:45&quot;\n\n        Dim BoolA       As String   = &quot;True&quot;\n        Dim StringA     As String   = &quot;Qwerty&quot;\n        Dim CharA       As String   = &quot;$&quot;\n\n        Console.WriteLine( &quot;This example of selected &quot; &amp; _\n            &quot;Convert.To&lt;Type&gt;( String, IFormatProvider ) &quot; &amp; vbCrLf &amp; _\n            &quot;methods generates the following output. The example &quot; &amp; _\n            &quot;displays the &quot; &amp; vbCrLf &amp; &quot;provider type if the &quot; &amp; _\n            &quot;IFormatProvider is called.&quot; )\n        Console.WriteLine( vbCrLf &amp; _\n            &quot;Note: For the ToBoolean, ToString, and ToChar &quot; &amp; _\n            &quot;methods, the &quot; &amp; vbCrLf &amp; &quot;IFormatProvider object &quot; &amp; _\n            &quot;is not referenced.&quot; )\n\n        &#39; The format provider is called for the following conversions.\n        Console.WriteLine( )\n        Console.WriteLine( format, &quot;ToInt32&quot;, Int32A, _\n            Convert.ToInt32( Int32A, provider ) )\n        Console.WriteLine( format, &quot;ToDouble&quot;, DoubleA, _\n            Convert.ToDouble( DoubleA, provider ) )\n        Console.WriteLine( format, &quot;ToDateTime&quot;, DayTimeA, _\n            Convert.ToDateTime( DayTimeA, provider ) )\n\n        &#39; The format provider is not called for these conversions.\n        Console.WriteLine( )\n        Console.WriteLine( format, &quot;ToBoolean&quot;, BoolA, _\n            Convert.ToBoolean( BoolA, provider ) )\n        Console.WriteLine( format, &quot;ToString&quot;, StringA, _\n            Convert.ToString( StringA, provider ) )\n        Console.WriteLine( format, &quot;ToChar&quot;, CharA, _\n            Convert.ToChar( CharA, provider ) )\n\n    End Sub\nEnd Module\n\n&#39; This example of selected Convert.To&lt;Type&gt;( String, IFormatProvider )\n&#39; methods generates the following output. The example displays the\n&#39; provider type if the IFormatProvider is called.\n&#39;\n&#39; Note: For the ToBoolean, ToString, and ToChar methods, the\n&#39; IFormatProvider object is not referenced.\n&#39; \n&#39; NumberFormatInfo    ToInt32          -252645135       -252645135\n&#39; NumberFormatInfo    ToDouble         61680.3855       61680.3855\n&#39; DateTimeFormatInfo  ToDateTime       2001/9/11 13:45  9/11/2001 1:45:00 PM\n&#39; \n&#39; ToBoolean        True             True\n&#39; ToString         Qwerty           Qwerty\n&#39; ToChar           $                $\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A date and time value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The date and time equivalent of the value of <code>value</code>, or a date and time equivalent of <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a valid date and time value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the conversion to succeed, the runtime type of the <code>value</code> parameter must be either a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> or a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, or <code>value</code> must be <code>null</code>. Otherwise, the method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>. In addition, if <code>value</code> is a string, it must contain a valid representation of a date and time value in the current culture or a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.  </p>\n<p> The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToDateTime_\" data-linktype=\"relative-path\">ToDateTime</a> method of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the ToDateTime method with a variety of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> variables.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDateTime#1\">using System;\n\npublic class ConversionToDateTime\n{\n   public static void Main()\n   {\n      // Try converting an integer.\n      int number = 16352;\n      ConvertToDateTime(number);\n      \n      // Convert a null.\n      object obj = null;\n      ConvertToDateTime(obj);\n      \n      // Convert a non-date string.\n      string nonDateString = &quot;monthly&quot;;\n      ConvertToDateTime(nonDateString);\n      \n      // Try to convert various date strings.\n      string dateString; \n      dateString = &quot;05/01/1996&quot;;\n      ConvertToDateTime(dateString);\n      dateString = &quot;Tue Apr 28, 2009&quot;;\n      ConvertToDateTime(dateString);\n      dateString = &quot;06 July 2008 7:32:47 AM&quot;;\n      ConvertToDateTime(dateString);\n      dateString = &quot;17:32:47.003&quot;;\n      ConvertToDateTime(dateString);\n   }\n\n   private static void ConvertToDateTime(object value)\n   {\n      DateTime convertedDate;\n      try {\n         convertedDate = Convert.ToDateTime(value);\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, value, convertedDate);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is not in the proper format.&quot;, value);\n      }   \n      catch (InvalidCastException) {\n         Console.WriteLine(&quot;Conversion of the {0} &#39;{1}&#39; is not supported&quot;, \n                           value.GetType().Name, value);\n      }\n   }\n}\n// The example displays the following output:\n//       Conversion of the Int32 &#39;16352&#39; is not supported\n//       &#39;&#39; converts to 1/1/0001 12:00:00 AM.\n//       &#39;monthly&#39; is not in the proper format.\n//       &#39;05/01/1996&#39; converts to 5/1/1996 12:00:00 AM.\n//       &#39;Tue Apr 28, 2009&#39; converts to 4/28/2009 12:00:00 AM.\n//       &#39;06 July 2008 7:32:47 AM&#39; converts to 7/6/2008 7:32:47 AM.\n//       &#39;17:32:47.003&#39; converts to 5/28/2008 5:32:47 PM.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDateTime#1\">Module ConversionToDateTime\n   Public Sub Main()\n      &#39; Try converting an integer.\n      Dim number As Integer = 16352\n      ConvertToDateTime(number)\n      \n      &#39; Convert a null.\n      Dim obj As Object = Nothing\n      ConvertToDateTime(obj)\n      \n      &#39; Convert a non-date string.\n      Dim nonDateString As String = &quot;monthly&quot;\n      ConvertToDateTime(nonDateString)\n      \n      &#39; Try to convert various dates.\n      Dim dateString As String \n      dateString = &quot;05/01/1996&quot;\n      ConvertToDateTime(dateString)\n      dateString = &quot;Tue Apr 28, 2009&quot;\n      ConvertToDateTime(dateString)\n      dateString = &quot;06 July 2008 7:32:47 AM&quot;\n      ConvertToDateTime(dateString)\n      dateString = &quot;17:32:47.003&quot;\n      ConvertToDateTime(dateString)\n   End Sub\n   \n   Private Sub ConvertToDateTime(value As Object)\n      Dim convertedDate As Date\n      Try\n         convertedDate = Convert.ToDateTime(value)\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, value, convertedDate)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39; is not in the proper format.&quot;, value)\n      Catch e As InvalidCastException\n         Console.WriteLine(&quot;Conversion of the {0} &#39;{1}&#39; is not supported&quot;, _\n                           value.GetType().Name, value)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Conversion of the Int32 &#39;16352&#39; is not supported\n&#39;       &#39;&#39; converts to 1/1/0001 12:00:00 AM.\n&#39;       &#39;monthly&#39; is not in the proper format.\n&#39;       &#39;05/01/1996&#39; converts to 5/1/1996 12:00:00 AM.\n&#39;       &#39;Tue Apr 28, 2009&#39; converts to 4/28/2009 12:00:00 AM.\n&#39;       &#39;06 July 2008 7:32:47 AM&#39; converts to 7/6/2008 7:32:47 AM.\n&#39;       &#39;17:32:47.003&#39; converts to 5/28/2008 5:32:47 PM.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a date and time to an equivalent date and time value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of a date and time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a properly formatted date and time string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is not <code>null</code>, the return value is the result of invoking the <a class=\"xref\" href=\"system.datetime#System_DateTime_Parse_\" data-linktype=\"relative-path\">Parse</a> method on <code>value</code> using the formatting information in a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is initialized for the current culture. The <code>value</code> argument must contain the representation of a date and time in one of the formats described in the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> topic. If <code>value</code> is <code>null</code>, the method returns <a class=\"xref\" href=\"system.datetime#System_DateTime_MinValue\" data-linktype=\"relative-path\">System.DateTime.MinValue</a>.  </p>\n<p> This method tries to parse <code>value</code> completely and avoid throwing a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>. It completes missing month, day, and year information with the current date. If <code>value</code> contains only a date and no time, this method assumes a time of midnight. Any leading, inner, or trailing white-space characters in <code>value</code> are ignored.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.datetime#System_DateTime_TryParse_\" data-linktype=\"relative-path\">TryParse</a>method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToDateTime method to convert various string representations of dates and times to <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToDateTime#2\">Module ConversionToDateTime\n   Public Sub Main()\n      Dim dateString As String = Nothing\n      \n      &#39; Convert a null string.\n      ConvertToDateTime(dateString)\n      \n      &#39; Convert an empty string.\n      dateString = String.Empty\n      ConvertToDateTime(dateString)\n      \n      &#39; Convert a non-date string.\n      dateString = &quot;not a date&quot;\n      ConvertToDateTime(dateString)\n      \n      &#39; Try to convert various date strings.\n      dateString = &quot;05/01/1996&quot;\n      ConvertToDateTime(dateString)\n      dateString = &quot;Tue Apr 28, 2009&quot;\n      ConvertToDateTime(dateString)\n      dateString = &quot;Wed Apr 28, 2009&quot;\n      ConvertToDateTime(dateString)\n      dateString = &quot;06 July 2008 7:32:47 AM&quot;\n      ConvertToDateTime(dateString)\n      dateString = &quot;17:32:47.003&quot;\n      ConvertToDateTime(dateString)\n      &#39; Convert a string returned by DateTime.ToString(&quot;R&quot;).\n      dateString = &quot;Sat, 10 May 2008 14:32:17 GMT&quot;\n      ConvertToDateTime(dateString)\n      &#39; Convert a string returned by DateTime.ToString(&quot;o&quot;)\n      dateString = &quot;2009-05-01T07:54:59.9843750-04:00&quot;\n      ConvertToDateTime(dateString)\n   End Sub\n   \n   Private Sub ConvertToDateTime(value As String)\n      Dim convertedDate As Date\n      Try\n         convertedDate = Convert.ToDateTime(value)\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, value, convertedDate)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39; is not in the proper format.&quot;, value)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;&#39; converts to 1/1/0001 12:00:00 AM.\n&#39;    &#39;&#39; is not in the proper format.\n&#39;    &#39;not a date&#39; is not in the proper format.\n&#39;    &#39;05/01/1996&#39; converts to 5/1/1996 12:00:00 AM.\n&#39;    &#39;Tue Apr 28, 2009&#39; converts to 4/28/2009 12:00:00 AM.\n&#39;    &#39;Wed Apr 28, 2009&#39; is not in the proper format.\n&#39;    &#39;06 July 2008 7:32:47 AM&#39; converts to 7/6/2008 7:32:47 AM.\n&#39;    &#39;17:32:47.003&#39; converts to 5/30/2008 5:32:47 PM.\n&#39;    &#39;Sat, 10 May 2008 14:32:17 GMT&#39; converts to 5/10/2008 7:32:17 AM.\n&#39;    &#39;2009-05-01T07:54:59.9843750-04:00&#39; converts to 5/1/2009 4:54:59 AM.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToDateTime#2\">using System;\n\npublic class ConversionToDateTime\n{\n   public static void Main()\n   {\n      string dateString = null;\n      \n      // Convert a null string.\n      ConvertToDateTime(dateString);\n      \n      // Convert an empty string.\n      dateString = String.Empty;\n      ConvertToDateTime(dateString);\n      \n      // Convert a non-date string.\n      dateString = &quot;not a date&quot;;\n      ConvertToDateTime(dateString);\n      \n      // Try to convert various date strings.\n      dateString = &quot;05/01/1996&quot;;\n      ConvertToDateTime(dateString);\n      dateString = &quot;Tue Apr 28, 2009&quot;;\n      ConvertToDateTime(dateString);\n      dateString = &quot;Wed Apr 28, 2009&quot;;\n      ConvertToDateTime(dateString);\n      dateString = &quot;06 July 2008 7:32:47 AM&quot;;\n      ConvertToDateTime(dateString);\n      dateString = &quot;17:32:47.003&quot;;\n      ConvertToDateTime(dateString);\n      // Convert a string returned by DateTime.ToString(&quot;R&quot;).\n      dateString = &quot;Sat, 10 May 2008 14:32:17 GMT&quot;;\n      ConvertToDateTime(dateString);\n      // Convert a string returned by DateTime.ToString(&quot;o&quot;).\n      dateString = &quot;2009-05-01T07:54:59.9843750-04:00&quot;;\n      ConvertToDateTime(dateString);\n   }\n\n   private static void ConvertToDateTime(string value)\n   {\n      DateTime convertedDate;\n      try {\n         convertedDate = Convert.ToDateTime(value);\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1} {2} time.&quot;, \n                           value, convertedDate, \n                           convertedDate.Kind.ToString());\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39; is not in the proper format.&quot;, value);\n      }\n   }\n}\n// The example displays the following output:\n//    &#39;&#39; converts to 1/1/0001 12:00:00 AM Unspecified time.\n//    &#39;&#39; is not in the proper format.\n//    &#39;not a date&#39; is not in the proper format.\n//    &#39;05/01/1996&#39; converts to 5/1/1996 12:00:00 AM Unspecified time.\n//    &#39;Tue Apr 28, 2009&#39; converts to 4/28/2009 12:00:00 AM Unspecified time.\n//    &#39;Wed Apr 28, 2009&#39; is not in the proper format.\n//    &#39;06 July 2008 7:32:47 AM&#39; converts to 7/6/2008 7:32:47 AM Unspecified time.\n//    &#39;17:32:47.003&#39; converts to 5/30/2008 5:32:47 PM Unspecified time.\n//    &#39;Sat, 10 May 2008 14:32:17 GMT&#39; converts to 5/10/2008 7:32:17 AM Local time.\n//    &#39;2009-05-01T07:54:59.9843750-04:00&#39; converts to 5/1/2009 4:54:59 AM Local time.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a valid date and time value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToDateTime_\" data-linktype=\"relative-path\">ToDateTime</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a date, <code>provider</code> could supply culture-specific information about the notation used to represent that date. <code>provider</code> is involved in the conversion of <code>value</code> if the runtime type of <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, or if <code>value</code> is a user-defined type whose <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToDateTime_\" data-linktype=\"relative-path\">ToDateTime</a> implementation makes use of <code>provider</code>. If the runtime type of <code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current thread culture is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom format provider, <code>CustomProvider</code>, whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method outputs a message to the console that it has been invoked, and then returns the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object of the culture whose name was passed as a parameter to its class constructor. Each of these <code>CustomProvider</code> objects is used to convert the elements in an object array to date and time values. The output indicates that the <code>CustomProvider</code> object is used in the conversion only when the type of the <code>value</code> parameter is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDateTime#4\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] cultureNames = { &quot;en-US&quot;, &quot;hu-HU&quot;, &quot;pt-PT&quot; };\n      object[] objects = { 12, 17.2, false, new DateTime(2010, 1, 1), &quot;today&quot;, \n                           new System.Collections.ArrayList(), &#39;c&#39;, \n                           &quot;05/10/2009 6:13:18 PM&quot;, &quot;September 8, 1899&quot; };\n      \n      foreach (string cultureName in cultureNames)\n      {\n         Console.WriteLine(&quot;{0} culture:&quot;, cultureName);\n         CustomProvider provider = new CustomProvider(cultureName);\n         foreach (object obj in objects)\n         {            \n            try {\n               DateTime dateValue = Convert.ToDateTime(obj, provider);      \n               Console.WriteLine(&quot;{0} --&gt; {1}&quot;, obj, \n                                 dateValue.ToString(new CultureInfo(cultureName)));\n            }\n            catch (FormatException) {\n               Console.WriteLine(&quot;{0} --&gt; Bad Format&quot;, obj);\n            }   \n            catch (InvalidCastException) {\n               Console.WriteLine(&quot;{0} --&gt; Conversion Not Supported&quot;, obj);\n            }\n         }\n         Console.WriteLine();\n      }\n   }\n}\n\npublic class CustomProvider : IFormatProvider\n{\n   private string cultureName;\n   \n   public CustomProvider(string cultureName)\n   {\n      this.cultureName = cultureName;\n   }\n   \n   public object GetFormat(Type formatType)\n   {\n      if (formatType == typeof(DateTimeFormatInfo))\n      {\n         Console.Write(&quot;(CustomProvider retrieved.) &quot;);\n         return new CultureInfo(cultureName).GetFormat(formatType);\n      }\n      else\n      {\n         return null;\n      }   \n   }\n}\n// The example displays the following output:\n//    en-US culture:\n//    12 --&gt; Conversion Not Supported\n//    17.2 --&gt; Conversion Not Supported\n//    False --&gt; Conversion Not Supported\n//    1/1/2010 12:00:00 AM --&gt; 1/1/2010 12:00:00 AM\n//    (CustomProvider retrieved.) today --&gt; Bad Format\n//    System.Collections.ArrayList --&gt; Conversion Not Supported\n//    c --&gt; Conversion Not Supported\n//    (CustomProvider retrieved.) 05/10/2009 6:13:18 PM --&gt; 5/10/2009 6:13:18 PM\n//    (CustomProvider retrieved.) September 8, 1899 --&gt; 9/8/1899 12:00:00 AM\n//    \n//    hu-HU culture:\n//    12 --&gt; Conversion Not Supported\n//    17.2 --&gt; Conversion Not Supported\n//    False --&gt; Conversion Not Supported\n//    1/1/2010 12:00:00 AM --&gt; 2010. 01. 01. 0:00:00\n//    (CustomProvider retrieved.) today --&gt; Bad Format\n//    System.Collections.ArrayList --&gt; Conversion Not Supported\n//    c --&gt; Conversion Not Supported\n//    (CustomProvider retrieved.) 05/10/2009 6:13:18 PM --&gt; 2009. 05. 10. 18:13:18\n//    (CustomProvider retrieved.) September 8, 1899 --&gt; 1899. 09. 08. 0:00:00\n//    \n//    pt-PT culture:\n//    12 --&gt; Conversion Not Supported\n//    17.2 --&gt; Conversion Not Supported\n//    False --&gt; Conversion Not Supported\n//    1/1/2010 12:00:00 AM --&gt; 01-01-2010 0:00:00\n//    (CustomProvider retrieved.) today --&gt; Bad Format\n//    System.Collections.ArrayList --&gt; Conversion Not Supported\n//    c --&gt; Conversion Not Supported\n//    (CustomProvider retrieved.) 05/10/2009 6:13:18 PM --&gt; 05-10-2009 18:13:18\n//    (CustomProvider retrieved.) September 8, 1899 --&gt; 08-09-1899 0:00:00\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDateTime#4\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;hu-HU&quot;, &quot;pt-PT&quot; }\n      Dim objects() As Object = { 12, 17.2, False, #1/1/2010#, &quot;today&quot;, _\n                                  New System.Collections.ArrayList(), &quot;c&quot;c, _\n                                  &quot;05/10/2009 6:13:18 PM&quot;, &quot;September 8, 1899&quot; }\n      \n      For Each cultureName As String In cultureNames\n         Console.WriteLine(&quot;{0} culture:&quot;, cultureName)\n         Dim provider As New CustomProvider(cultureName)\n         For Each obj As Object In objects\n            Try\n               Dim dateValue As Date = Convert.ToDateTime(obj, provider)      \n               Console.WriteLine(&quot;{0} --&gt; {1}&quot;, obj, _\n                                 dateValue.ToString(New CultureInfo(cultureName)))\n            Catch e As FormatException\n               Console.WriteLine(&quot;{0} --&gt; Bad Format&quot;, obj)\n            Catch e As InvalidCastException\n               Console.WriteLine(&quot;{0} --&gt; Conversion Not Supported&quot;, obj)\n            End Try\n         Next\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n\nPublic Class CustomProvider : Implements IFormatProvider\n   Private cultureName As String\n   \n   Public Sub New(cultureName As String)\n      Me.cultureName = cultureName\n   End Sub\n   \n   Public Function GetFormat(formatType As Type) As Object _\n          Implements IFormatProvider.GetFormat\n      If formatType Is GetType(DateTimeFormatInfo) Then\n         Console.Write(&quot;(CustomProvider retrieved.) &quot;)\n         Return New CultureInfo(cultureName).GetFormat(formatType)\n      Else\n         Return Nothing\n      End If   \n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;    en-US culture:\n&#39;    12 --&gt; Conversion Not Supported\n&#39;    17.2 --&gt; Conversion Not Supported\n&#39;    False --&gt; Conversion Not Supported\n&#39;    1/1/2010 12:00:00 AM --&gt; 1/1/2010 12:00:00 AM\n&#39;    (CustomProvider retrieved.) today --&gt; Bad Format\n&#39;    System.Collections.ArrayList --&gt; Conversion Not Supported\n&#39;    c --&gt; Conversion Not Supported\n&#39;    (CustomProvider retrieved.) 05/10/2009 6:13:18 PM --&gt; 5/10/2009 6:13:18 PM\n&#39;    (CustomProvider retrieved.) September 8, 1899 --&gt; 9/8/1899 12:00:00 AM\n&#39;    \n&#39;    hu-HU culture:\n&#39;    12 --&gt; Conversion Not Supported\n&#39;    17.2 --&gt; Conversion Not Supported\n&#39;    False --&gt; Conversion Not Supported\n&#39;    1/1/2010 12:00:00 AM --&gt; 2010. 01. 01. 0:00:00\n&#39;    (CustomProvider retrieved.) today --&gt; Bad Format\n&#39;    System.Collections.ArrayList --&gt; Conversion Not Supported\n&#39;    c --&gt; Conversion Not Supported\n&#39;    (CustomProvider retrieved.) 05/10/2009 6:13:18 PM --&gt; 2009. 05. 10. 18:13:18\n&#39;    (CustomProvider retrieved.) September 8, 1899 --&gt; 1899. 09. 08. 0:00:00\n&#39;    \n&#39;    pt-PT culture:\n&#39;    12 --&gt; Conversion Not Supported\n&#39;    17.2 --&gt; Conversion Not Supported\n&#39;    False --&gt; Conversion Not Supported\n&#39;    1/1/2010 12:00:00 AM --&gt; 01-01-2010 0:00:00\n&#39;    (CustomProvider retrieved.) today --&gt; Bad Format\n&#39;    System.Collections.ArrayList --&gt; Conversion Not Supported\n&#39;    c --&gt; Conversion Not Supported\n&#39;    (CustomProvider retrieved.) 05/10/2009 6:13:18 PM --&gt; 05-10-2009 18:13:18\n&#39;    (CustomProvider retrieved.) September 8, 1899 --&gt; 08-09-1899 0:00:00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDateTime_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime ToDateTime (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a date and time to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The date and time equivalent of the value of <code>value</code>, or the date and time equivalent of <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a properly formatted date and time string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.datetime#System_DateTime_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.DateTime.Parse(String,IFormatProvider)</a> method on <code>value</code>.  </p>\n<p> <code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.datetime#System_DateTime_TryParse_\" data-linktype=\"relative-path\">TryParse</a>method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts string representations of date values with the <code>ToDateTime</code> method, using an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDateTime#3\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;{0,-18}{1,-12}{2}<br>&quot;, &quot;Date String&quot;, &quot;Culture&quot;, &quot;Result&quot;);\n\n      string[] cultureNames = { &quot;en-US&quot;, &quot;ru-RU&quot;,&quot;ja-JP&quot; };\n      string[] dateStrings = { &quot;01/02/09&quot;, &quot;2009/02/03&quot;,  &quot;01/2009/03&quot;, \n                               &quot;01/02/2009&quot;, &quot;21/02/09&quot;, &quot;01/22/09&quot;,  \n                               &quot;01/02/23&quot; };\n      // Iterate each culture name in the array.\n      foreach (string cultureName in cultureNames)\n      {\n         CultureInfo culture = new CultureInfo(cultureName);\n        \n         // Parse each date using the designated culture.\n         foreach (string dateStr in dateStrings)\n         {\n            DateTime dateTimeValue;\n            try {\n               dateTimeValue = Convert.ToDateTime(dateStr, culture);\n                // Display the date and time in a fixed format.\n                Console.WriteLine(&quot;{0,-18}{1,-12}{2:yyyy-MMM-dd}&quot;,\n                                  dateStr, cultureName, dateTimeValue);\n            }\n            catch (FormatException e) { \n                Console.WriteLine(&quot;{0,-18}{1,-12}{2}&quot;, \n                                  dateStr, cultureName, e.GetType().Name);\n            }\n         }\n         Console.WriteLine();\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDateTime#3\">Imports System.Globalization\n\nModule Example\n   Public Sub Main( )\n      Console.WriteLine(&quot;{0,-18}{1,-12}{2}&quot;, &quot;Date String&quot;, &quot;Culture&quot;, &quot;Result&quot;)\n      Console.WriteLine()\n\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;ru-RU&quot;,&quot;ja-JP&quot; }\n      Dim dateStrings() As String = { &quot;01/02/09&quot;, &quot;2009/02/03&quot;,  &quot;01/2009/03&quot;, _\n                                      &quot;01/02/2009&quot;, &quot;21/02/09&quot;, &quot;01/22/09&quot;,   _\n                                      &quot;01/02/23&quot; }\n      &#39; Iterate each culture name in the array.\n      For Each cultureName As String In cultureNames\n         Dim culture As CultureInfo = New CultureInfo(cultureName)\n        \n         &#39; Parse each date using the designated culture.\n         For Each dateStr As String In dateStrings\n            Dim dateTimeValue As DateTime\n            Try\n               dateTimeValue = Convert.ToDateTime(dateStr, culture)\n                &#39; Display the date and time in a fixed format.\n                Console.WriteLine(&quot;{0,-18}{1,-12}{2:yyyy-MMM-dd}&quot;, _\n                                  dateStr, cultureName, dateTimeValue)\n            Catch e As FormatException \n                Console.WriteLine(&quot;{0,-18}{1,-12}{2}&quot;, _\n                                  dateStr, cultureName, e.GetType().Name)\n            End Try            \n         Next\n         Console.WriteLine()\n      Next\n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       Date String       Culture     Result\n&#39;       \n&#39;       01/02/09          en-US       2009-Jan-02\n&#39;       2009/02/03        en-US       2009-Feb-03\n&#39;       01/2009/03        en-US       2009-Jan-03\n&#39;       01/02/2009        en-US       2009-Jan-02\n&#39;       21/02/09          en-US       FormatException\n&#39;       01/22/09          en-US       2009-Jan-22\n&#39;       01/02/23          en-US       2023-Jan-02\n&#39;       \n&#39;       01/02/09          ru-RU       2009-Feb-01\n&#39;       2009/02/03        ru-RU       2009-Feb-03\n&#39;       01/2009/03        ru-RU       2009-Jan-03\n&#39;       01/02/2009        ru-RU       2009-Feb-01\n&#39;       21/02/09          ru-RU       2009-Feb-21\n&#39;       01/22/09          ru-RU       FormatException\n&#39;       01/02/23          ru-RU       2023-Feb-01\n&#39;       \n&#39;       01/02/09          ja-JP       2001-Feb-09\n&#39;       2009/02/03        ja-JP       2009-Feb-03\n&#39;       01/2009/03        ja-JP       2009-Jan-03\n&#39;       01/02/2009        ja-JP       2009-Jan-02\n&#39;       21/02/09          ja-JP       2021-Feb-09\n&#39;       01/22/09          ja-JP       FormatException\n&#39;       01/02/23          ja-JP       2001-Feb-23\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the conversion of <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#1\">      bool[] flags = { true, false };\n      decimal result;\n      \n      foreach (bool flag in flags)\n      {\n         result = Convert.ToDecimal(flag);\n         Console.WriteLine(&quot;Converted {0} to {1}.&quot;, flag, result);\n      }\n      // The example displays the following output:\n      //       Converted True to 1.\n      //       Converted False to 0.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#1\">      Dim flags() As Boolean = { True, False }\n      Dim result As Decimal\n      \n      For Each flag As Boolean In flags\n         result = Convert.ToDecimal(flag)\n         Console.WriteLine(&quot;Converted {0} to {1}.&quot;, flag, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted True to 1.\n      &#39;       Converted False to 0.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#18\">public:\n   void ConvertByteDecimal( Byte byteVal )\n   {\n      Decimal decimalVal;\n      \n      // Byte to decimal conversion will not overflow.\n      decimalVal = System::Convert::ToDecimal( byteVal );\n      System::Console::WriteLine( &quot;The Byte as a decimal is {0}.&quot;,\n         decimalVal );\n      \n      // Decimal to Byte conversion can overflow.\n      try\n      {\n         byteVal = System::Convert::ToByte( decimalVal );\n         System::Console::WriteLine( &quot;The Decimal as a Byte is {0}.&quot;,\n         byteVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;The decimal value is too large for a Byte.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#18\">\t\tpublic void ConvertByteDecimal(byte byteVal) {\n\t\t\tdecimal decimalVal;\n\n\t\t\t// Byte to decimal conversion will not overflow.\n\t\t\tdecimalVal = System.Convert.ToDecimal(byteVal);\n\t\t\tSystem.Console.WriteLine(&quot;The byte as a decimal is {0}.&quot;,\n\t\t\t\tdecimalVal);\n\n\t\t\t// Decimal to byte conversion can overflow.\n\t\t\ttry {\n\t\t\t\tbyteVal = System.Convert.ToByte(decimalVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;The Decimal as a byte is {0}.&quot;,\n\t\t\t\t\tbyteVal);\n\t\t\t}\n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The decimal value is too large for a byte.&quot;);\n\t\t\t}\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#18\">     Public Sub ConvertByteDecimal(ByVal byteVal As Byte)\n         Dim decimalVal As Decimal\n\n         &#39; Byte to decimal conversion will not overflow.\n         decimalVal = System.Convert.ToDecimal(byteVal)\n         System.Console.WriteLine(&quot;The byte as a decimal is {0}.&quot;, _\n                                   decimalVal)\n\n         &#39; Decimal to byte conversion can overflow.\n         Try\n             byteVal = System.Convert.ToByte(decimalVal)\n             System.Console.WriteLine(&quot;The Decimal as a byte is {0}.&quot;, _\n                                       byteVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in decimal-to-byte conversion.&quot;)\n         End Try\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, and throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> upon failure.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#17\">public:\n   void ConvertCharDecimal( Char charVal )\n   {\n      Decimal decimalVal = 0;\n      \n      // Char to decimal conversion is not supported and will always\n      // throw an InvalidCastException.\n      try\n      {\n         decimalVal = System::Convert::ToDecimal( charVal );\n      }\n      catch ( System::InvalidCastException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;Char-to-Decimal conversion is not supported by the .NET Framework.&quot; );\n      }\n      \n      //Decimal to char conversion is also not supported.\n      try\n      {\n         charVal = System::Convert::ToChar( decimalVal );\n      }\n      catch ( System::InvalidCastException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;Decimal-to-Char conversion is not supported by the .NET Framework.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#17\">\t\tpublic void ConvertCharDecimal(char charVal) {\n\t\t\tDecimal decimalVal = 0;\n\t\t\t\n\t\t\t// Char to decimal conversion is not supported and will always\n\t\t\t// throw an InvalidCastException.\n\t\t\ttry {\n\t\t\t\tdecimalVal = System.Convert.ToDecimal(charVal);\n\t\t\t} \n\t\t\tcatch (System.InvalidCastException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Char-to-Decimal conversion is not supported &quot; +\n\t\t\t\t\t&quot;by the .NET Framework.&quot;);\n\t\t\t}\n\n\t\t\t//Decimal to char conversion is also not supported.\n\t\t\ttry {\n\t\t\t\tcharVal = System.Convert.ToChar(decimalVal);\n\t\t\t} \n\t\t\tcatch (System.InvalidCastException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Decimal-to-Char conversion is not supported &quot; +\n\t\t\t\t\t&quot;by the .NET Framework.&quot;);\n\t\t\t}\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#17\">     Public Sub ConvertCharDecimal(ByVal charVal As Char)\n         Dim decimalVal As [Decimal] = 0\n\n         &#39; Char to decimal conversion is not supported and will always\n         &#39; throw an InvalidCastException.\n         Try\n             decimalVal = System.Convert.ToDecimal(charVal)\n         Catch exception As System.InvalidCastException\n             System.Console.WriteLine( _\n                  &quot;Char-to-Decimal conversion is not supported &quot; + _\n                  &quot;by the .NET Framework.&quot;)\n         End Try\n\n         &#39;Decimal to char conversion is also not supported.\n         Try\n             charVal = System.Convert.ToChar(decimalVal)\n         Catch exception As System.InvalidCastException\n             System.Console.WriteLine( _\n                 &quot;Decimal-to-Char conversion is not supported &quot; + _\n                 &quot;by the .NET Framework.&quot;)\n         End Try\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified decimal number; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A decimal number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value returned by this method contains a maximum of 15 significant digits. If the <code>value</code> parameter contains more than 15 significant digits, it is rounded using rounding to nearest. The following example illustrates how the ToDecimal method uses rounding to nearest to return a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value with 15 significant digits.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal#2\">   Console.WriteLine(Convert.ToDecimal(123456789012345500.12R))   &#39; Displays 123456789012346000\n   Console.WriteLine(Convert.ToDecimal(123456789012346500.12R))   &#39; Displays 123456789012346000\n   \n   Console.WriteLine(Convert.ToDecimal(10030.12345678905R))       &#39; Displays 10030.123456789 \n   Console.WriteLine(Convert.ToDecimal(10030.12345678915R))       &#39; Displays 10030.1234567892\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal#2\">   Console.WriteLine(Convert.ToDecimal(123456789012345500.12D));  // Displays 123456789012346000\n   Console.WriteLine(Convert.ToDecimal(123456789012346500.12D));  // Displays 123456789012346000\n   \n   Console.WriteLine(Convert.ToDecimal(10030.12345678905D));      // Displays 10030.123456789 \n   Console.WriteLine(Convert.ToDecimal(10030.12345678915D));      // Displays 10030.1234567892\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#5\">public:\n   void ConvertDoubleDecimal( double doubleVal )\n   {\n      Decimal decimalVal;\n      \n      // Conversion from double to decimal cannot overflow.\n      decimalVal = System::Convert::ToDecimal( doubleVal );\n      System::Console::WriteLine( &quot; {0} as a decimal is: {1}&quot;,\n         doubleVal, decimalVal );\n      \n      // Decimal to double conversion can overflow.\n      try\n      {\n         doubleVal = System::Convert::ToDouble( decimalVal );\n         System::Console::WriteLine( &quot; {0} as a double is: {1}&quot;,\n         decimalVal, doubleVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine( &quot;Overflow in decimal-to-double conversion.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#5\">\t\tpublic void ConvertDoubleDecimal(decimal decimalVal){\n\t\t\t\n\t\t\tdouble doubleVal;\n\t\t\t\n\t\t\t// Decimal to double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(decimalVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}&quot;,\n\t\t\t\t\tdecimalVal, doubleVal);\n\n\t\t\t// Conversion from double to decimal can overflow.\n\t\t\ttry \n         {\n\t\t\t   decimalVal = System.Convert.ToDecimal(doubleVal);\n   \t\t\tSystem.Console.WriteLine (&quot;{0} as a decimal is: {1}&quot;,\n\t   \t\t\tdoubleVal, decimalVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Overflow in double-to-double conversion.&quot;);\n\t\t\t}\n\t\t\t\n\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#5\">     Public Sub ConvertDoubleDecimal(ByVal decimalVal As Decimal)\n\n         Dim doubleVal As Double\n\n         &#39; Decimal to Double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(decimalVal)\n         System.Console.WriteLine(&quot;{0} as a Double is: {1}&quot;, _\n                                  decimalVal, doubleVal)\n         \n         &#39; Conversion from Double to Decimal can overflow.\n         Try\n            decimalVal = System.Convert.ToDecimal(doubleVal)\n            System.Console.WriteLine(&quot;{0} as a Decimal is: {1}&quot;, _\n                                     doubleVal, decimalVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in Double-to-Decimal conversion.&quot;)\n         End Try\n\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of 16-bit signed integers to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#2\">      short[] numbers = { Int16.MinValue, -1000, 0, 1000, Int16.MaxValue };\n      decimal result;\n      \n      foreach (short number in numbers)\n      {\n         result = Convert.ToDecimal(number);\n         Console.WriteLine(&quot;Converted the Int16 value {0} to the Decimal value {1}.&quot;,\n                           number, result);\n      }\n      // The example displays the following output:\n      //       Converted the Int16 value -32768 to the Decimal value -32768.\n      //       Converted the Int16 value -1000 to the Decimal value -1000.\n      //       Converted the Int16 value 0 to the Decimal value 0.\n      //       Converted the Int16 value 1000 to the Decimal value 1000.\n      //       Converted the Int16 value 32767 to the Decimal value 32767.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#2\">      Dim numbers() As Short = { Int16.MinValue, -1000, 0, 1000, Int16.MaxValue }\n      Dim result As Decimal\n      \n      For Each number As Short In numbers\n         result = Convert.ToDecimal(number)\n         Console.WriteLine(&quot;Converted the Int16 value {0} to the Decimal value {1}.&quot;, _\n                           number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the Int16 value -32768 to the Decimal value -32768.\n      &#39;       Converted the Int16 value -1000 to the Decimal value -1000.\n      &#39;       Converted the Int16 value 0 to the Decimal value 0.\n      &#39;       Converted the Int16 value 1000 to the Decimal value 1000.\n      &#39;       Converted the Int16 value 32767 to the Decimal value 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of signed integers to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#3\">      int[] numbers = { Int32.MinValue, -1000, 0, 1000, Int32.MaxValue };\n      decimal result;\n      \n      foreach (int number in numbers)\n      {\n         result = Convert.ToDecimal(number);\n         Console.WriteLine(&quot;Converted the Int32 value {0} to the Decimal value {1}.&quot;,\n                           number, result);\n      }\n      // The example displays the following output:\n      //    Converted the Int32 value -2147483648 to the Decimal value -2147483648.\n      //    Converted the Int32 value -1000 to the Decimal value -1000.\n      //    Converted the Int32 value 0 to the Decimal value 0.\n      //    Converted the Int32 value 1000 to the Decimal value 1000.\n      //    Converted the Int32 value 2147483647 to the Decimal value 2147483647.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#3\">      Dim numbers() As Integer = { Int32.MinValue, -1000, 0, 1000, Int32.MaxValue }\n      Dim result As Decimal\n      \n      For Each number As Integer In numbers\n         result = Convert.ToDecimal(number)\n         Console.WriteLine(&quot;Converted the Int32 value {0} to the Decimal value {1}.&quot;, _\n                           number, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Int32 value -2147483648 to the Decimal value -2147483648.\n      &#39;    Converted the Int32 value -1000 to the Decimal value -1000.\n      &#39;    Converted the Int32 value 0 to the Decimal value 0.\n      &#39;    Converted the Int32 value 1000 to the Decimal value 1000.\n      &#39;    Converted the Int32 value 2147483647 to the Decimal value 2147483647.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#10\">public:\n   void ConvertLongDecimal( Int64 longVal )\n   {\n      Decimal decimalVal;\n      \n      // Long to decimal conversion cannot overflow.\n      decimalVal = System::Convert::ToDecimal( longVal );\n      System::Console::WriteLine( &quot; {0} as a decimal is {1}&quot;,\n         longVal, decimalVal );\n      \n      // Decimal to long conversion can overflow.\n      try\n      {\n         longVal = System::Convert::ToInt64( decimalVal );\n         System::Console::WriteLine( &quot; {0} as a long is {1}&quot;,\n         decimalVal, longVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine( &quot;Overflow in decimal-to-long conversion.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#10\">\t\tpublic void ConvertLongDecimal(long longVal) {\n\n\t\t\tdecimal\tdecimalVal;\n\t\t\t\n\t\t\t// Long to decimal conversion cannot overflow.\n\t\t\tdecimalVal = System.Convert.ToDecimal(longVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a decimal is {1}&quot;, \n\t\t\t\t\tlongVal, decimalVal);\n\n\t\t\t// Decimal to long conversion can overflow.\n\t\t\ttry {\n\t\t\t\tlongVal = System.Convert.ToInt64(decimalVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;{0} as a long is {1}&quot;, \n\t\t\t\t\tdecimalVal, longVal);\n\t\t\t}\n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Overflow in decimal-to-long conversion.&quot;);\n\t\t\t}\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#10\">     Public Sub ConvertLongDecimal(ByVal longVal As Long)\n\n         Dim decimalVal As Decimal\n\n         &#39;Long to Decimal conversion cannot overflow.\n         decimalVal = System.Convert.ToDecimal(longVal)\n         System.Console.WriteLine(&quot;{0} as a Decimal is {1}&quot;, _\n                                   longVal, decimalVal)\n\n         &#39;Decimal to Long conversion can overflow.\n         Try\n             longVal = System.Convert.ToInt64(decimalVal)\n             System.Console.WriteLine(&quot;{0} as a Long is {1}&quot;, _\n                                       decimalVal, longVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in decimal-to-long conversion.&quot;)\n         End Try\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format for a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToDecimal_\" data-linktype=\"relative-path\">ToDecimal</a> method of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example tries to convert each element in an object array to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#4\">      object[] values = { true, &#39;a&#39;, 123, 1.764e32, &quot;9.78&quot;, &quot;1e-02&quot;,\n                          1.67e03, &quot;A100&quot;, &quot;1,033.67&quot;, DateTime.Now,\n                          Double.MaxValue };   \n      decimal result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToDecimal(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to {2}.&quot;,\n                              value.GetType().Name, value, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is out of range of the Decimal type.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not recognized as a valid Decimal value.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;Conversion of the {0} value {1} to a Decimal is not supported.&quot;,\n                              value.GetType().Name, value);\n         }                     \n      }\n      // The example displays the following output:\n      //    Converted the Boolean value True to 1.\n      //    Conversion of the Char value a to a Decimal is not supported.\n      //    Converted the Int32 value 123 to 123.\n      //    The Double value 1.764E+32 is out of range of the Decimal type.\n      //    Converted the String value 9.78 to 9.78.\n      //    The String value 1e-02 is not recognized as a valid Decimal value.\n      //    Converted the Double value 1670 to 1670.\n      //    The String value A100 is not recognized as a valid Decimal value.\n      //    Converted the String value 1,033.67 to 1033.67.\n      //    Conversion of the DateTime value 10/15/2008 05:40:42 PM to a Decimal is not supported.\n      //    The Double value 1.79769313486232E+308 is out of range of the Decimal type.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#4\">      Dim values() As Object = { True, &quot;a&quot;c, 123, 1.764e32, &quot;9.78&quot;, &quot;1e-02&quot;, _\n                                 1.67e03, &quot;A100&quot;, &quot;1,033.67&quot;, Date.Now, _\n                                 Double.MaxValue }   \n      Dim result As Decimal\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToDecimal(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to {2}.&quot;, _\n                              value.GetType().Name, value, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is out of range of the Decimal type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not recognized as a valid Decimal value.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;Conversion of the {0} value {1} to a Decimal is not supported.&quot;, _\n                              value.GetType().Name, value)\n         End Try                     \n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to 1.\n      &#39;    Conversion of the Char value a to a Decimal is not supported.\n      &#39;    Converted the Int32 value 123 to 123.\n      &#39;    The Double value 1.764E+32 is out of range of the Decimal type.\n      &#39;    Converted the String value 9.78 to 9.78.\n      &#39;    The String value 1e-02 is not recognized as a valid Decimal value.\n      &#39;    Converted the Double value 1670 to 1670.\n      &#39;    The String value A100 is not recognized as a valid Decimal value.\n      &#39;    Converted the String value 1,033.67 to 1033.67.\n      &#39;    Conversion of the DateTime value 10/15/2008 05:40:42 PM to a Decimal is not supported.\n      &#39;    The Double value 1.79769313486232E+308 is out of range of the Decimal type.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of signed bytes to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#5\">      sbyte[] numbers = { SByte.MinValue, -23, 0, 17, SByte.MaxValue };\n      decimal result;\n      \n      foreach (sbyte number in numbers)\n      {\n         result = Convert.ToDecimal(number);\n         Console.WriteLine(&quot;Converted the SByte value {0} to {1}.&quot;, number, result);\n      }\n      //       Converted the SByte value -128 to -128.\n      //       Converted the SByte value -23 to -23.\n      //       Converted the SByte value 0 to 0.\n      //       Converted the SByte value 17 to 17.\n      //       Converted the SByte value 127 to 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#5\">      Dim numbers() As SByte = { SByte.MinValue, -23, 0, 17, SByte.MaxValue }\n      Dim result As Decimal\n      \n      For Each number As SByte In numbers\n         result = Convert.ToDecimal(number)\n         Console.WriteLine(&quot;Converted the SByte value {0} to {1}.&quot;, number, result)\n      Next\n      &#39;       Converted the SByte value -128 to -128.\n      &#39;       Converted the SByte value -23 to -23.\n      &#39;       Converted the SByte value 0 to 0.\n      &#39;       Converted the SByte value 17 to 17.\n      &#39;       Converted the SByte value 127 to 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value returned by this method contains a maximum of seven significant digits. If the <code>value</code> parameter contains more than seven significant digits, it is rounded using rounding to nearest. The following example illustrates how the ToDecimal method uses rounding to nearest to return a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value with seven significant digits.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal#1\">   Console.WriteLine(Convert.ToDecimal(1234567500.12f))   &#39; Displays 1234568000\n   Console.WriteLine(Convert.ToDecimal(1234568500.12f))   &#39; Displays 1234568000\n   \n   Console.WriteLine(Convert.ToDecimal(10.980365f))       &#39; Displays 10.98036 \n   Console.WriteLine(Convert.ToDecimal(10.980355f))       &#39; Displays 10.98036\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal#1\">   Console.WriteLine(Convert.ToDecimal(1234567500.12F));  // Displays 1234568000\n   Console.WriteLine(Convert.ToDecimal(1234568500.12F));  // Displays 1234568000\n   \n   Console.WriteLine(Convert.ToDecimal(10.980365F));      // Displays 10.98036 \n   Console.WriteLine(Convert.ToDecimal(10.980355F));      // Displays 10.98036\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example tries to convert each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#6\">      float[] numbers = { Single.MinValue, -3e10f, -1093.54f, 0f, 1e-03f,\n                          1034.23f, Single.MaxValue };\n      decimal result;\n      \n      foreach (float number in numbers)\n      {\n         try {\n            result = Convert.ToDecimal(number);\n            Console.WriteLine(&quot;Converted the Single value {0} to {1}.&quot;, number, result);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is out of range of the Decimal type.&quot;, number);\n         }\n      }                                  \n      // The example displays the following output:\n      //       -3.402823E+38 is out of range of the Decimal type.\n      //       Converted the Single value -3E+10 to -30000000000.\n      //       Converted the Single value -1093.54 to -1093.54.\n      //       Converted the Single value 0 to 0.\n      //       Converted the Single value 0.001 to 0.001.\n      //       Converted the Single value 1034.23 to 1034.23.\n      //       3.402823E+38 is out of range of the Decimal type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#6\">      Dim numbers() As Single = { Single.MinValue, -3e10, -1093.54, 0, 1e-03, _\n                                  1034.23, Single.MaxValue }\n      Dim result As Decimal\n      \n      For Each number As Single In numbers\n         Try\n            result = Convert.ToDecimal(number)\n            Console.WriteLine(&quot;Converted the Single value {0} to {1}.&quot;, number, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is out of range of the Decimal type.&quot;, number)\n         End Try\n      Next                                  \n      &#39; The example displays the following output:\n      &#39;       -3.402823E+38 is out of range of the Decimal type.\n      &#39;       Converted the Single value -3E+10 to -30000000000.\n      &#39;       Converted the Single value -1093.54 to -1093.54.\n      &#39;       Converted the Single value 0 to 0.\n      &#39;       Converted the Single value 0.001 to 0.001.\n      &#39;       Converted the Single value 1034.23 to 1034.23.\n      &#39;       3.402823E+38 is out of range of the Decimal type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToDecimal method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_System_String_\" data-linktype=\"relative-path\">System.Decimal.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.decimal#System_Decimal_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>ToDecimal</code>. It attempts to convert a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, and throws the possible exceptions that may arise during the conversion.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#15\">public:\n   void ConvertStringDecimal( String^ stringVal )\n   {\n      Decimal decimalVal = 0;\n\n      try\n      {\n         decimalVal = System::Convert::ToDecimal( stringVal );\n         System::Console::WriteLine( &quot;The String as a decimal is {0}.&quot;,\n         decimalVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;The conversion from String to decimal overflowed.&quot; );\n      }\n      catch ( System::FormatException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;The String is not formatted as a decimal.&quot; );\n      }\n      catch ( System::ArgumentNullException^ ) \n      {\n         System::Console::WriteLine( &quot;The String is 0.&quot; );\n      }\n      \n      // Decimal to String conversion will not overflow.\n      stringVal = System::Convert::ToString( decimalVal );\n      System::Console::WriteLine(\n         &quot;The decimal as a String is {0}.&quot;, stringVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#15\">\t\tpublic void ConvertStringDecimal(string stringVal) {\n\t\t\tdecimal decimalVal = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tdecimalVal = System.Convert.ToDecimal(stringVal);\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string as a decimal is {0}.&quot;, decimalVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException){\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The conversion from string to decimal overflowed.&quot;);\n\t\t\t}\n\t\t\tcatch (System.FormatException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string is not formatted as a decimal.&quot;);\n\t\t\t}\n\t\t\tcatch (System.ArgumentNullException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string is null.&quot;);\n\t\t\t}\n\n\t\t\t// Decimal to string conversion will not overflow.\n\t\t\tstringVal = System.Convert.ToString(decimalVal);\n\t\t\tSystem.Console.WriteLine(\n\t\t\t\t&quot;The decimal as a string is {0}.&quot;, stringVal);\n\t\t}\t\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#15\">     Public Sub ConvertStringDecimal(ByVal stringVal As String)\n         Dim decimalVal As Decimal = 0\n\n         Try\n             decimalVal = System.Convert.ToDecimal(stringVal)\n             System.Console.WriteLine(&quot;The string as a decimal is {0}.&quot;, _\n                                       decimalVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in string-to-decimal conversion.&quot;)\n         Catch exception As System.FormatException\n             System.Console.WriteLine( _\n                 &quot;The string is not formatted as a decimal.&quot;)\n         Catch exception As System.ArgumentException\n             System.Console.WriteLine(&quot;The string is null.&quot;)\n         End Try\n\n         &#39; Decimal to string conversion will not overflow.\n         stringVal = System.Convert.ToString(decimalVal)\n         System.Console.WriteLine(&quot;The decimal as a string is {0}.&quot;, _\n                                   stringVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of 16-bit unsigned integers to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#7\">      ushort[] numbers = { UInt16.MinValue, 121, 12345, UInt16.MaxValue };\n      decimal result;\n      \n      foreach (ushort number in numbers)\n      {\n         result = Convert.ToDecimal(number);\n         Console.WriteLine(&quot;Converted the UInt16 value {0} to {1}.&quot;,\n                           number, result);\n      }   \n      // The example displays the following output:\n      //       Converted the UInt16 value 0 to 0.\n      //       Converted the UInt16 value 121 to 121.\n      //       Converted the UInt16 value 12345 to 12345.\n      //       Converted the UInt16 value 65535 to 65535.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#7\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 12345, UInt16.MaxValue }\n      Dim result As Decimal\n      \n      For Each number As UShort In numbers\n         result = Convert.ToDecimal(number)\n         Console.WriteLine(&quot;Converted the UInt16 value {0} to {1}.&quot;, _\n                           number, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;       Converted the UInt16 value 0 to 0.\n      &#39;       Converted the UInt16 value 121 to 121.\n      &#39;       Converted the UInt16 value 12345 to 12345.\n      &#39;       Converted the UInt16 value 65535 to 65535.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of unsigned integers to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#8\">      uint[] numbers = { UInt32.MinValue, 121, 12345, UInt32.MaxValue };\n      decimal result;\n      \n      foreach (uint number in numbers)\n      {\n         result = Convert.ToDecimal(number);\n         Console.WriteLine(&quot;Converted the UInt32 value {0} to {1}.&quot;,\n                           number, result);\n      }   \n      // The example displays the following output:\n      //       Converted the UInt32 value 0 to 0.\n      //       Converted the UInt32 value 121 to 121.\n      //       Converted the UInt32 value 12345 to 12345.\n      //       Converted the UInt32 value 4294967295 to 4294967295.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#8\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 12345, UInt32.MaxValue }\n      Dim result As Decimal\n      \n      For Each number As UInteger In numbers\n         result = Convert.ToDecimal(number)\n         Console.WriteLine(&quot;Converted the UInt32 value {0} to {1}.&quot;, _\n                           number, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;       Converted the UInt32 value 0 to 0.\n      &#39;       Converted the UInt32 value 121 to 121.\n      &#39;       Converted the UInt32 value 12345 to 12345.\n      &#39;       Converted the UInt32 value 4294967295 to 4294967295.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an array of unsigned long integers to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#9\">      ulong[] numbers = { UInt64.MinValue, 121, 12345, UInt64.MaxValue };\n      decimal result;\n      \n      foreach (ulong number in numbers)\n      {\n         result = Convert.ToDecimal(number);\n         Console.WriteLine(&quot;Converted the UInt64 value {0} to {1}.&quot;,\n                           number, result);\n      }   \n      // The example displays the following output:\n      //    Converted the UInt64 value 0 to 0.\n      //    Converted the UInt64 value 121 to 121.\n      //    Converted the UInt64 value 12345 to 12345.\n      //    Converted the UInt64 value 18446744073709551615 to 18446744073709551615.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#9\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 12345, UInt64.MaxValue }\n      Dim result As Decimal\n      \n      For Each number As ULong In numbers\n         result = Convert.ToDecimal(number)\n         Console.WriteLine(&quot;Converted the UInt64 value {0} to {1}.&quot;, _\n                           number, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value 0 to 0.\n      &#39;    Converted the UInt64 value 121 to 121.\n      &#39;    Converted the UInt64 value 12345 to 12345.\n      &#39;    Converted the UInt64 value 18446744073709551615 to 18446744073709551615.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format for a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToDecimal_\" data-linktype=\"relative-path\">ToDecimal</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Temperature</code> class that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#10\">Imports System.Globalization\n\nPublic Class Temperature : Implements IConvertible\n   Private m_Temp As Decimal\n\n   Public Sub New(temperature As Decimal)\n      Me.m_Temp = temperature\n   End Sub\n   \n   Public ReadOnly Property Celsius() As Decimal\n      Get\n         Return Me.m_Temp\n      End Get   \n   End Property\n   \n   Public ReadOnly Property Kelvin() As Decimal\n      Get\n         Return Me.m_Temp + 273.15d   \n      End Get\n   End Property\n   \n   Public ReadOnly Property Fahrenheit() As Decimal\n      Get\n         Return Math.Round(CDec(Me.m_Temp * 9 / 5 + 32), 2)\n      End Get      \n   End Property\n   \n   Public Overrides Function ToString() As String\n      Return m_Temp.ToString(&quot;N2&quot;) &amp; &quot; &#176;C&quot;\n   End Function\n\n   &#39; IConvertible implementations.\n   Public Function GetTypeCode() As TypeCode _\n                   Implements IConvertible.GetTypeCode\n      Return TypeCode.Object\n   End Function\n   \n   Public Function ToBoolean(provider As IFormatProvider) As Boolean _\n                   Implements IConvertible.ToBoolean\n      If m_Temp = 0 Then\n         Return False\n      Else\n         Return True\n      End If\n   End Function \n   \n   Public Function ToByte(provider As IFormatProvider) As Byte _\n                   Implements IConvertible.ToByte\n      If m_Temp &lt; Byte.MinValue Or m_Temp &gt; Byte.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, _ \n                                                   Me.m_Temp)) \n      Else\n         Return Decimal.ToByte(Me.m_Temp)\n      End If       \n   End Function\n   \n   Public Function ToChar(provider As IFormatProvider) As Char _\n                   Implements IConvertible.ToChar\n      Throw New InvalidCastException(&quot;Temperature to Char conversion is not supported.&quot;)\n   End Function \n   \n   Public Function ToDateTime(provider As IFormatProvider) As Date _\n                   Implements IConvertible.ToDateTime\n      Throw New InvalidCastException(&quot;Temperature to DateTime conversion is not supported.&quot;)\n   End Function\n   \n   Public Function ToDecimal(provider As IFormatProvider) As Decimal _\n                   Implements IConvertible.ToDecimal\n      Return Me.m_Temp\n   End Function\n   \n   Public Function ToDouble(provider As IFormatProvider) As Double _\n                   Implements IConvertible.ToDouble\n      Return Decimal.ToDouble(Me.m_Temp)\n   End Function   \n   \n   Public Function ToInt16(provider As IFormatProvider) As Int16 _\n                   Implements IConvertible.ToInt16\n      If Me.m_Temp &lt; Int16.MinValue Or Me.m_Temp &gt; Int16.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToInt16(Me.m_Temp)   \n      End If\n   End Function\n   \n   Public Function ToInt32(provider As IFormatProvider) As Int32 _\n                   Implements IConvertible.ToInt32\n      If Me.m_Temp &lt; Int32.MinValue Or Me.m_Temp &gt; Int32.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToInt32(Me.m_Temp)\n      End If      \n   End Function\n   \n   Public Function ToInt64(provider As IFormatProvider) As Int64 _\n                   Implements IConvertible.ToInt64\n      If Me.m_Temp &lt; Int64.MinValue Or Me.m_Temp &gt; Int64.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int64 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToInt64(Me.m_Temp)\n      End If      \n   End Function\n   \n   Public Function ToSByte(provider As IFormatProvider) As SByte _\n                   Implements IConvertible.ToSByte\n      If Me.m_Temp &lt; SByte.MinValue Or Me.m_Temp &gt; SByte.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the SByte type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToSByte(Me.m_Temp)\n      End If      \n   End Function\n\n   Public Function ToSingle(provider As IFormatProvider) As Single _\n                   Implements IConvertible.ToSingle\n      Return Decimal.ToSingle(Me.m_Temp)\n   End Function\n\n   Public Overloads Function ToString(provider As IFormatProvider) As String _\n                   Implements IConvertible.ToString\n      Return m_Temp.ToString(&quot;N2&quot;, provider) &amp; &quot; &#176;C&quot;\n   End Function\n   \n   Public Function ToType(conversionType As Type, provider As IFormatProvider) As Object _\n                   Implements IConvertible.ToType\n      Select Case Type.GetTypeCode(conversionType)\n         Case TypeCode.Boolean \n            Return Me.ToBoolean(Nothing)\n         Case TypeCode.Byte\n            Return Me.ToByte(Nothing)\n         Case TypeCode.Char\n            Return Me.ToChar(Nothing)\n         Case TypeCode.DateTime\n            Return Me.ToDateTime(Nothing)\n         Case TypeCode.Decimal\n            Return Me.ToDecimal(Nothing)\n         Case TypeCode.Double\n            Return Me.ToDouble(Nothing)\n         Case TypeCode.Int16\n            Return Me.ToInt16(Nothing)\n         Case TypeCode.Int32\n            Return Me.ToInt32(Nothing)\n         Case TypeCode.Int64\n            Return Me.ToInt64(Nothing)\n         Case TypeCode.Object\n            If GetType(Temperature).Equals(conversionType) Then\n               Return Me\n            Else\n               Throw New InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, _\n                                                            conversionType.Name))\n            End If \n         Case TypeCode.SByte\n            Return Me.ToSByte(Nothing)\n         Case TypeCode.Single\n            Return Me.ToSingle(Nothing)\n         Case TypeCode.String\n            Return Me.ToString(provider)\n         Case TypeCode.UInt16\n            Return Me.ToUInt16(Nothing)\n         Case TypeCode.UInt32\n            Return Me.ToUInt32(Nothing)\n         Case TypeCode.UInt64\n            Return Me.ToUInt64(Nothing)   \n         Case Else\n            Throw New InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name))   \n      End Select\n   End Function\n   \n   Public Function ToUInt16(provider As IFormatProvider) As UInt16 _\n                   Implements IConvertible.ToUInt16\n      If Me.m_Temp &lt; UInt16.MinValue Or Me.m_Temp &gt; UInt16.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToUInt16(Me.m_Temp)\n      End If   \n   End Function\n\n   Public Function ToUInt32(provider As IFormatProvider) As UInt32 _\n                   Implements IConvertible.ToUInt32\n      If Me.m_Temp &lt; UInt32.MinValue Or Me.m_Temp &gt; UInt32.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt32 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToUInt32(Me.m_Temp)\n      End If   \n   End Function\n   \n   Public Function ToUInt64(provider As IFormatProvider) As UInt64 _\n                   Implements IConvertible.ToUInt64\n      If Me.m_Temp &lt; UInt64.MinValue Or Me.m_Temp &gt; UInt64.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt64 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Decimal.ToUInt64(Me.m_temp)\n      End If   \n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#10\">using System;\nusing System.Globalization;\n\npublic class Temperature : IConvertible\n{\n   private decimal m_Temp;\n\n   public Temperature(decimal temperature)\n   {\n      this.m_Temp = temperature;\n   }\n   \n   public decimal Celsius\n   {\n      get { return this.m_Temp; }   \n   }\n   \n   public decimal Kelvin\n   {\n      get { return this.m_Temp + 273.15m; }    \n   }\n   \n   public decimal Fahrenheit\n   {\n      get { return Math.Round((decimal) (this.m_Temp * 9 / 5 + 32), 2); }\n   }\n   \n   public override string ToString()\n   {\n      return m_Temp.ToString(&quot;N2&quot;) + &quot; &#176;C&quot;;\n   }\n\n   // IConvertible implementations.\n   public TypeCode GetTypeCode()\n   {\n      return TypeCode.Object;\n   }\n   \n   public bool ToBoolean(IFormatProvider provider) \n   {\n      if (m_Temp == 0)\n         return false;\n      else\n         return true;\n   } \n   \n   public byte ToByte(IFormatProvider provider)\n   {\n      if (m_Temp &lt; Byte.MinValue || m_Temp &gt; Byte.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, \n                                                   this.m_Temp));\n      else\n         return Decimal.ToByte(this.m_Temp);\n   }\n   \n   public char ToChar(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Temperature to Char conversion is not supported.&quot;);\n   } \n   \n   public DateTime ToDateTime(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Temperature to DateTime conversion is not supported.&quot;);\n   }\n   \n   public decimal ToDecimal(IFormatProvider provider)\n   {\n      return this.m_Temp;\n   }\n   \n   public double ToDouble(IFormatProvider provider)\n   {\n      return Decimal.ToDouble(this.m_Temp);\n   }   \n   \n   public short ToInt16(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; Int16.MinValue || this.m_Temp &gt; Int16.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToInt16(this.m_Temp);\n   }\n   \n   public int ToInt32(IFormatProvider provider)\n      {\n      if (this.m_Temp &lt; Int32.MinValue || this.m_Temp &gt; Int32.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToInt32(this.m_Temp);\n   }\n   \n   public long ToInt64(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; Int64.MinValue || this.m_Temp &gt; Int64.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int64 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToInt64(this.m_Temp);\n   }\n   \n   public sbyte ToSByte(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; SByte.MinValue || this.m_Temp &gt; SByte.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the SByte type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToSByte(this.m_Temp);\n   }\n\n   public float ToSingle(IFormatProvider provider)\n   {\n      return Decimal.ToSingle(this.m_Temp);\n   }\n\n   public string ToString(IFormatProvider provider)\n   {\n      return m_Temp.ToString(&quot;N2&quot;, provider) + &quot; &#176;C&quot;;\n   }\n   \n   public object ToType(Type conversionType, IFormatProvider provider)\n   {\n      switch (Type.GetTypeCode(conversionType))\n      {\n         case TypeCode.Boolean: \n            return this.ToBoolean(null);\n         case TypeCode.Byte:\n            return this.ToByte(null);\n         case TypeCode.Char:\n            return this.ToChar(null);\n         case TypeCode.DateTime:\n            return this.ToDateTime(null);\n         case TypeCode.Decimal:\n            return this.ToDecimal(null);\n         case TypeCode.Double:\n            return this.ToDouble(null);\n         case TypeCode.Int16:\n            return this.ToInt16(null);\n         case TypeCode.Int32:\n            return this.ToInt32(null);\n         case TypeCode.Int64:\n            return this.ToInt64(null);\n         case TypeCode.Object:\n            if (typeof(Temperature).Equals(conversionType))\n               return this;\n            else\n               throw new InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;,\n                                                            conversionType.Name));\n         case TypeCode.SByte:\n            return this.ToSByte(null);\n         case TypeCode.Single:\n            return this.ToSingle(null);\n         case TypeCode.String:\n            return this.ToString(provider);\n         case TypeCode.UInt16:\n            return this.ToUInt16(null);\n         case TypeCode.UInt32:\n            return this.ToUInt32(null);\n         case TypeCode.UInt64:\n            return this.ToUInt64(null);   \n         default:\n            throw new InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name));   \n      }\n   }\n   \n   public ushort ToUInt16(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt16.MinValue || this.m_Temp &gt; UInt16.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToUInt16(this.m_Temp);\n   }\n\n   public uint ToUInt32(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt32.MinValue || this.m_Temp &gt; UInt32.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt32 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToUInt32(this.m_Temp);\n   }\n   \n   public ulong ToUInt64(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt64.MinValue || this.m_Temp &gt; UInt64.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt64 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Decimal.ToUInt64(this.m_Temp);\n   }\n}\n</code></pre><p> The following example shows that when a <code>Temperature</code> object is passed as a parameter to the ToDecimal method, the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToDecimal_\" data-linktype=\"relative-path\">ToDecimal</a> implementation of the <code>Temperature</code> class is called to perform the conversion.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#11\">Module Example\n   Public Sub Main()\n      Dim cold As New Temperature(-40)\n      Dim freezing As New Temperature(0)\n      Dim boiling As New Temperature(100)\n      \n      Console.WriteLine(Convert.ToDecimal(cold, Nothing))\n      Console.WriteLine(Convert.ToDecimal(freezing, Nothing))\n      Console.WriteLine(Convert.ToDecimal(boiling, Nothing))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       -40\n&#39;       0\n&#39;       100\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#11\">public class Example\n{\n   public static void Main()\n   {\n      Temperature cold = new Temperature(-40);\n      Temperature freezing = new Temperature(0);\n      Temperature boiling = new Temperature(100);\n      \n      Console.WriteLine(Convert.ToDecimal(cold, null));\n      Console.WriteLine(Convert.ToDecimal(freezing, null));\n      Console.WriteLine(Convert.ToDecimal(boiling, null));\n   }\n}\n// The example dosplays the following output:\n//       -40\n//       0\n//       100\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDecimal_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDecimal(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal ToDecimal (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_\" data-linktype=\"relative-path\">Parse</a> method on <code>value</code>.  </p>\n<p> <code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.decimal#System_Decimal_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert an array of strings to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values by using <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> objects that represent two different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDecimal2#12\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { &quot;123456789&quot;, &quot;12345.6789&quot;, &quot;12 345,6789&quot;,\n                          &quot;123,456.789&quot;, &quot;123 456,789&quot;, &quot;123,456,789.0123&quot;,\n                          &quot;123 456 789,0123&quot; };\n      CultureInfo[] cultures = { new CultureInfo(&quot;en-US&quot;),\n                                 new CultureInfo(&quot;fr-FR&quot;) }; \n\n      foreach (CultureInfo culture in cultures)\n      {\n         Console.WriteLine(&quot;String -&gt; Decimal Conversion Using the {0} Culture&quot;,\n                           culture.Name);\n         foreach (string value in values)\n         {\n            Console.Write(&quot;{0,20}  -&gt;  &quot;, value);\n            try {\n               Console.WriteLine(Convert.ToDecimal(value, culture));\n            }\n            catch (FormatException) {\n               Console.WriteLine(&quot;FormatException&quot;);\n            }\n         }\n         Console.WriteLine();\n      }                     \n   }\n}\n// The example displays the following output:\n//       String -&gt; Decimal Conversion Using the en-US Culture\n//                  123456789  -&gt;  123456789\n//                 12345.6789  -&gt;  12345.6789\n//                12 345,6789  -&gt;  FormatException\n//                123,456.789  -&gt;  123456.789\n//                123 456,789  -&gt;  FormatException\n//           123,456,789.0123  -&gt;  123456789.0123\n//           123 456 789,0123  -&gt;  FormatException\n//       \n//       String -&gt; Decimal Conversion Using the fr-FR Culture\n//                  123456789  -&gt;  123456789\n//                 12345.6789  -&gt;  FormatException\n//                12 345,6789  -&gt;  12345.6789\n//                123,456.789  -&gt;  FormatException\n//                123 456,789  -&gt;  123456.789\n//           123,456,789.0123  -&gt;  FormatException\n//           123 456 789,0123  -&gt;  123456789.0123\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDecimal2#12\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim values() As String = { &quot;123456789&quot;, &quot;12345.6789&quot;, &quot;12 345,6789&quot;, _\n                                 &quot;123,456.789&quot;, &quot;123 456,789&quot;, &quot;123,456,789.0123&quot;, _\n                                 &quot;123 456 789,0123&quot; }\n      Dim cultures() As CultureInfo = { New CultureInfo(&quot;en-US&quot;), _\n                                        New CultureInfo(&quot;fr-FR&quot;) } \n\n      For Each culture As CultureInfo In cultures\n         Console.WriteLine(&quot;String -&gt; Decimal Conversion Using the {0} Culture&quot;, _\n                           culture.Name)\n         For Each value As String In values\n            Console.Write(&quot;{0,20}  -&gt;  &quot;, value)\n            Try\n               Console.WriteLine(Convert.ToDecimal(value, culture))\n            Catch e As FormatException\n               Console.WriteLine(&quot;FormatException&quot;)\n            End Try   \n         Next\n         Console.WriteLine()\n      Next                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       String -&gt; Decimal Conversion Using the en-US Culture\n&#39;                  123456789  -&gt;  123456789\n&#39;                 12345.6789  -&gt;  12345.6789\n&#39;                12 345,6789  -&gt;  FormatException\n&#39;                123,456.789  -&gt;  123456.789\n&#39;                123 456,789  -&gt;  FormatException\n&#39;           123,456,789.0123  -&gt;  123456789.0123\n&#39;           123 456 789,0123  -&gt;  FormatException\n&#39;       \n&#39;       String -&gt; Decimal Conversion Using the fr-FR Culture\n&#39;                  123456789  -&gt;  123456789\n&#39;                 12345.6789  -&gt;  FormatException\n&#39;                12 345,6789  -&gt;  12345.6789\n&#39;                123,456.789  -&gt;  FormatException\n&#39;                123 456,789  -&gt;  123456.789\n&#39;           123,456,789.0123  -&gt;  FormatException\n&#39;           123 456 789,0123  -&gt;  123456789.0123\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#1\">public:\n   void ConvertDoubleBool( double doubleVal )\n   {\n      bool boolVal;\n      \n      // Double to bool conversion cannot overflow.\n      boolVal = System::Convert::ToBoolean( doubleVal );\n      System::Console::WriteLine( &quot; {0} as a Boolean is: {1}.&quot;,\n         doubleVal, boolVal );\n      \n      // bool to double conversion cannot overflow.\n      doubleVal = System::Convert::ToDouble( boolVal );\n      System::Console::WriteLine( &quot; {0} as a double is: {1}.&quot;,\n         boolVal, doubleVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#1\">\t\tpublic void ConvertDoubleBool(double doubleVal) {\n\t\t\tbool\tboolVal;\n\t\t\t// Double to bool conversion cannot overflow.\n\t\t\tboolVal = System.Convert.ToBoolean(doubleVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a Boolean is: {1}.&quot;,\n\t\t\t\tdoubleVal, boolVal);\n\n\t\t\t// bool to double conversion cannot overflow.\n\t\t\tdoubleVal = System.Convert.ToDouble(boolVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}.&quot;,\n\t\t\t\tboolVal, doubleVal);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#1\">     Public Sub ConvertDoubleBool(ByVal doubleVal As Double)\n         Dim boolVal As Boolean\n\n         &#39;Double to Boolean conversion cannot overflow.\n         boolVal = System.Convert.ToBoolean(doubleVal)\n         System.Console.WriteLine(&quot;{0} as a Boolean is: {1}.&quot;, _\n                                   doubleVal, boolVal)\n\n         &#39;Boolean to Double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(boolVal)\n         System.Console.WriteLine(&quot;{0} as a Double is: {1}.&quot;, _\n                                   boolVal, doubleVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The double-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> value to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#2\">public:\n   void ConvertDoubleByte( double doubleVal )\n   {\n      Byte byteVal = 0;\n      \n      // Double to Byte conversion can overflow.\n      try\n      {\n         byteVal = System::Convert::ToByte( doubleVal );\n         System::Console::WriteLine( &quot; {0} as a Byte is: {1}.&quot;,\n         doubleVal, byteVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine( &quot;Overflow in double-to-Byte conversion.&quot; );\n      }\n      \n      // Byte to double conversion cannot overflow.\n      doubleVal = System::Convert::ToDouble( byteVal );\n      System::Console::WriteLine( &quot; {0} as a double is: {1}.&quot;,\n         byteVal, doubleVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#2\">\t\tpublic void ConvertDoubleByte(double doubleVal) {\n\t\t\tbyte\tbyteVal = 0;\n\n\t\t\t// Double to byte conversion can overflow.\n\t\t\ttry {\n\t\t\t\tbyteVal = System.Convert.ToByte(doubleVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;{0} as a byte is: {1}.&quot;,\n\t\t\t\t\tdoubleVal, byteVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Overflow in double-to-byte conversion.&quot;);\n\t\t\t}\n\n\t\t\t// Byte to double conversion cannot overflow.\n\t\t\tdoubleVal = System.Convert.ToDouble(byteVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}.&quot;,\n\t\t\t\tbyteVal, doubleVal);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#2\">     Public Sub ConvertDoubleByte(ByVal doubleVal As Double)\n         Dim byteVal As Byte = 0\n\n         &#39; Double to Byte conversion can overflow.\n         Try\n             byteVal = System.Convert.ToByte(doubleVal)\n             System.Console.WriteLine(&quot;{0} as a Byte is: {1}.&quot;, _\n                 doubleVal, byteVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in Double-to-Byte conversion.&quot;)\n         End Try\n\n         &#39; Byte to Double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(byteVal)\n         System.Console.WriteLine(&quot;{0} as a Double is: {1}.&quot;, _\n                                   byteVal, doubleVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#5\">public:\n   void ConvertDoubleDecimal( double doubleVal )\n   {\n      Decimal decimalVal;\n      \n      // Conversion from double to decimal cannot overflow.\n      decimalVal = System::Convert::ToDecimal( doubleVal );\n      System::Console::WriteLine( &quot; {0} as a decimal is: {1}&quot;,\n         doubleVal, decimalVal );\n      \n      // Decimal to double conversion can overflow.\n      try\n      {\n         doubleVal = System::Convert::ToDouble( decimalVal );\n         System::Console::WriteLine( &quot; {0} as a double is: {1}&quot;,\n         decimalVal, doubleVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine( &quot;Overflow in decimal-to-double conversion.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#5\">\t\tpublic void ConvertDoubleDecimal(decimal decimalVal){\n\t\t\t\n\t\t\tdouble doubleVal;\n\t\t\t\n\t\t\t// Decimal to double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(decimalVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}&quot;,\n\t\t\t\t\tdecimalVal, doubleVal);\n\n\t\t\t// Conversion from double to decimal can overflow.\n\t\t\ttry \n         {\n\t\t\t   decimalVal = System.Convert.ToDecimal(doubleVal);\n   \t\t\tSystem.Console.WriteLine (&quot;{0} as a decimal is: {1}&quot;,\n\t   \t\t\tdoubleVal, decimalVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Overflow in double-to-double conversion.&quot;);\n\t\t\t}\n\t\t\t\n\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#5\">     Public Sub ConvertDoubleDecimal(ByVal decimalVal As Decimal)\n\n         Dim doubleVal As Double\n\n         &#39; Decimal to Double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(decimalVal)\n         System.Console.WriteLine(&quot;{0} as a Double is: {1}&quot;, _\n                                  decimalVal, doubleVal)\n         \n         &#39; Conversion from Double to Decimal can overflow.\n         Try\n            decimalVal = System.Convert.ToDecimal(doubleVal)\n            System.Console.WriteLine(&quot;{0} as a Decimal is: {1}&quot;, _\n                                     doubleVal, decimalVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in Double-to-Decimal conversion.&quot;)\n         End Try\n\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified double-precision floating-point number; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of 16-bit signed integers to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDouble#1\">      short[] numbers = { Int16.MinValue, -1032, 0, 192, Int16.MaxValue };\n      double result;\n      \n      foreach (short number in numbers)\n      {\n         result = Convert.ToDouble(number);\n         Console.WriteLine(&quot;Converted the UInt16 value {0} to {1}.&quot;,\n                           number, result);\n      }                     \n      //       Converted the UInt16 value -32768 to -32768.\n      //       Converted the UInt16 value -1032 to -1032.\n      //       Converted the UInt16 value 0 to 0.\n      //       Converted the UInt16 value 192 to 192.\n      //       Converted the UInt16 value 32767 to 32767.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDouble#1\">      Dim numbers() As Short = { Int16.MinValue, -1032, 0, 192, Int16.MaxValue }\n      Dim result As Double\n      \n      For Each number As Short In numbers\n         result = Convert.ToDouble(number)\n         Console.WriteLine(&quot;Converted the UInt16 value {0} to {1}.&quot;, _\n                           number, result)\n      Next                     \n      &#39;       Converted the UInt16 value -32768 to -32768.\n      &#39;       Converted the UInt16 value -1032 to -1032.\n      &#39;       Converted the UInt16 value 0 to 0.\n      &#39;       Converted the UInt16 value 192 to 192.\n      &#39;       Converted the UInt16 value 32767 to 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#3\">public:\n   void ConvertDoubleInt( double doubleVal )\n   {\n      int intVal = 0;\n      \n      // Double to int conversion can overflow.\n      try\n      {\n         intVal = System::Convert::ToInt32( doubleVal );\n         System::Console::WriteLine( &quot; {0} as an int is: {1}&quot;,\n         doubleVal, intVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine( &quot;Overflow in double-to-int conversion.&quot; );\n      }\n      \n      // Int to double conversion cannot overflow.\n      doubleVal = System::Convert::ToDouble( intVal );\n      System::Console::WriteLine( &quot; {0} as a double is: {1}&quot;,\n         intVal, doubleVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#3\">\t\tpublic void ConvertDoubleInt(double doubleVal) {\n\t\t\t\n\t\t\tint     intVal = 0;\n\t\t\t// Double to int conversion can overflow.\n\t\t\ttry {\n\t\t\t\tintVal = System.Convert.ToInt32(doubleVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;{0} as an int is: {1}&quot;,\n\t\t\t\t\tdoubleVal, intVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Overflow in double-to-int conversion.&quot;);\n\t\t\t}\n\n\t\t\t// Int to double conversion cannot overflow.\n\t\t\tdoubleVal = System.Convert.ToDouble(intVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}&quot;,\n\t\t\t\tintVal, doubleVal);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#3\">     Public Sub ConvertDoubleInt(ByVal doubleVal As Double)\n\n         Dim intVal As Integer = 0\n         &#39; Double to Integer conversion can overflow.\n         Try\n             intVal = System.Convert.ToInt32(doubleVal)\n             System.Console.WriteLine(&quot;{0} as an Integer is: {1}&quot;, _\n                                       doubleVal, intVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in Double-to-Byte conversion.&quot;)\n         End Try\n\n         &#39; Integer to Double conversion cannot overflow.\n         doubleVal = System.Convert.ToDouble(intVal)\n         System.Console.WriteLine(&quot;{0} as a Double is: {1}&quot;, _\n                                   intVal, doubleVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of signed long integers to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDouble#2\">      long[] numbers = { Int64.MinValue, -903, 0, 172, Int64.MaxValue};\n      double result;\n      \n      foreach (long number in numbers)\n      {\n         result = Convert.ToDouble(number);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           number.GetType().Name, number, \n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the Int64 value &#39;-9223372036854775808&#39; to the Double value -9.22337203685478E+18.\n      //    Converted the Int64 value &#39;-903&#39; to the Double value -903.\n      //    Converted the Int64 value &#39;0&#39; to the Double value 0.\n      //    Converted the Int64 value &#39;172&#39; to the Double value 172.\n      //    Converted the Int64 value &#39;9223372036854775807&#39; to the Double value 9.22337203685478E+18.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDouble#2\">      Dim numbers() As Long = { Int64.MinValue, -903, 0, 172, Int64.MaxValue}\n      Dim result As Double\n      \n      For Each number As Long In numbers\n         result = Convert.ToDouble(number)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Int64 value &#39;-9223372036854775808&#39; to the Double value -9.22337203685478E+18.\n      &#39;    Converted the Int64 value &#39;-903&#39; to the Double value -903.\n      &#39;    Converted the Int64 value &#39;0&#39; to the Double value 0.\n      &#39;    Converted the Int64 value &#39;172&#39; to the Double value 172.\n      &#39;    Converted the Int64 value &#39;9223372036854775807&#39; to the Double value 9.22337203685478E+18.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format for a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.double#System_Double_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.double#System_Double_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is not <code>null</code>, this method wraps a call to the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToDouble_\" data-linktype=\"relative-path\">ToDouble</a>implementation of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each value in an object array to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDouble#3\">      object[] values = { true, &#39;a&#39;, 123, 1.764e32f, &quot;9.78&quot;, &quot;1e-02&quot;,\n                          1.67e03f, &quot;A100&quot;, &quot;1,033.67&quot;, DateTime.Now,\n                          Decimal.MaxValue };   \n      double result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToDouble(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to {2}.&quot;,\n                              value.GetType().Name, value, result);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not recognized as a valid Double value.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;Conversion of the {0} value {1} to a Double is not supported.&quot;,\n                              value.GetType().Name, value);\n         }                     \n      }\n      // The example displays the following output:\n      //    Converted the Boolean value True to 1.\n      //    Conversion of the Char value a to a Double is not supported.\n      //    Converted the Int32 value 123 to 123.\n      //    Converted the Single value 1.764E+32 to 1.76399995098587E+32.\n      //    Converted the String value 9.78 to 9.78.\n      //    Converted the String value 1e-02 to 0.01.\n      //    Converted the Single value 1670 to 1670.\n      //    The String value A100 is not recognized as a valid Double value.\n      //    Converted the String value 1,033.67 to 1033.67.\n      //    Conversion of the DateTime value 10/21/2008 07:12:12 AM to a Double is not supported.\n      //    Converted the Decimal value 79228162514264337593543950335 to 7.92281625142643E+28.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDouble#3\">      Dim values() As Object = { True, &quot;a&quot;c, 123, CSng(1.764e32), &quot;9.78&quot;, &quot;1e-02&quot;, _\n                                 CSng(1.67e03), &quot;A100&quot;, &quot;1,033.67&quot;, Date.Now, _\n                                 Decimal.MaxValue }   \n      Dim result As Double\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToDouble(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to {2}.&quot;, _\n                              value.GetType().Name, value, result)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not recognized as a valid Double value.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;Conversion of the {0} value {1} to a Double is not supported.&quot;, _\n                              value.GetType().Name, value)\n         End Try                     \n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to 1.\n      &#39;    Conversion of the Char value a to a Double is not supported.\n      &#39;    Converted the Int32 value 123 to 123.\n      &#39;    Converted the Single value 1.764E+32 to 1.76399995098587E+32.\n      &#39;    Converted the String value 9.78 to 9.78.\n      &#39;    Converted the String value 1e-02 to 0.01.\n      &#39;    Converted the Single value 1670 to 1670.\n      &#39;    The String value A100 is not recognized as a valid Double value.\n      &#39;    Converted the String value 1,033.67 to 1033.67.\n      &#39;    Conversion of the DateTime value 10/21/2008 07:12:12 AM to a Double is not supported.\n      &#39;    Converted the Decimal value 79228162514264337593543950335 to 7.92281625142643E+28.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> values to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDouble#4\">      sbyte[] numbers = { SByte.MinValue, -23, 0, 17, SByte.MaxValue };\n      double result;\n      \n      foreach (sbyte number in numbers)\n      {\n         result = Convert.ToDouble(number);\n         Console.WriteLine(&quot;Converted the SByte value {0} to {1}.&quot;, number, result);\n      }\n      //       Converted the SByte value -128 to -128.\n      //       Converted the SByte value -23 to -23.\n      //       Converted the SByte value 0 to 0.\n      //       Converted the SByte value 17 to 17.\n      //       Converted the SByte value 127 to 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDouble#4\">      Dim numbers() As SByte = { SByte.MinValue, -23, 0, 17, SByte.MaxValue }\n      Dim result As Double\n      \n      For Each number As SByte In numbers\n         result = Convert.ToDouble(number)\n         Console.WriteLine(&quot;Converted the SByte value {0} to {1}.&quot;, number, result)\n      Next\n      &#39;       Converted the SByte value -128 to -128.\n      &#39;       Converted the SByte value -23 to -23.\n      &#39;       Converted the SByte value 0 to 0.\n      &#39;       Converted the SByte value 17 to 17.\n      &#39;       Converted the SByte value 127 to 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#6\">public:\n   void CovertDoubleFloat( double doubleVal )\n   {\n      float floatVal = 0;\n      \n      // A conversion from Double to Single cannot overflow.\n      floatVal = System::Convert::ToSingle( doubleVal );\n      System::Console::WriteLine( &quot; {0} as a float is {1}&quot;,\n                                  doubleVal, floatVal );\n\n      // A conversion from Single to Double cannot overflow.\n      doubleVal = System::Convert::ToDouble( floatVal );\n      System::Console::WriteLine( &quot; {0} as a double is: {1}&quot;,\n                                  floatVal, doubleVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#6\">\t\tpublic void CovertDoubleFloat(double doubleVal) {\t\n\t\t\tfloat floatVal = 0;\n\n\t\t\t// Double to float conversion cannot overflow.\n\t\t\t\tfloatVal = System.Convert.ToSingle(doubleVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;{0} as a float is {1}&quot;,\n\t\t\t\t\tdoubleVal, floatVal);\n\n\t\t\t// Conversion from float to double cannot overflow.\n\t\t\tdoubleVal = System.Convert.ToDouble(floatVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}&quot;,\n\t\t\t\tfloatVal, doubleVal);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#6\">     Public Sub CovertDoubleFloat(ByVal doubleVal As Double)\n         Dim singleVal As Single = 0\n\n         &#39; Double to Single conversion cannot overflow.\n             singleVal = System.Convert.ToSingle(doubleVal)\n             System.Console.WriteLine(&quot;{0} as a Single is {1}&quot;, _\n                                       doubleVal, singleVal)\n\n         &#39; Conversion from Single to Double cannot overflow.\n         doubleVal = System.Convert.ToDouble(singleVal)\n         System.Console.WriteLine(&quot;{0} as a Double is: {1}&quot;, _\n                                   singleVal, doubleVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> or greater than <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToDouble method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.double#System_Double_Parse_System_String_\" data-linktype=\"relative-path\">System.Double.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.double#System_Double_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of numeric strings to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The example&#39;s output is from a system whose current culture is en-US.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToDouble#8\">Module Example\n   Public Sub Main()\n      Dim values() As String = { &quot;-1,035.77219&quot;, &quot;1AFF&quot;, &quot;1e-35&quot;, _\n                                 &quot;1,635,592,999,999,999,999,999,999&quot;, &quot;-17.455&quot;, _\n                                 &quot;190.34001&quot;, &quot;1.29e325&quot;}\n      Dim result As Double\n      \n      For Each value As String In values\n         Try\n            result = Convert.ToDouble(value)\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, result)\n         Catch e As FormatException\n            Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a Double.&quot;, value)            \n         Catch e As OverflowException\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of a Double.&quot;, value)\n         End Try\n      Next       \n   End Sub   \nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;-1,035.77219&#39; to -1035.77219.\n&#39;       Unable to convert &#39;1AFF&#39; to a Double.\n&#39;       Converted &#39;1e-35&#39; to 1E-35.\n&#39;       Converted &#39;1,635,592,999,999,999,999,999,999&#39; to 1.635593E+24.\n&#39;       Converted &#39;-17.455&#39; to -17.455.\n&#39;       Converted &#39;190.34001&#39; to 190.34001.\n&#39;       &#39;1.29e325&#39; is outside the range of a Double.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToDouble#8\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values= { &quot;-1,035.77219&quot;, &quot;1AFF&quot;, &quot;1e-35&quot;, \n                         &quot;1,635,592,999,999,999,999,999,999&quot;, &quot;-17.455&quot;, \n                         &quot;190.34001&quot;, &quot;1.29e325&quot;};\n      double result;\n      \n      foreach (string value in values)\n      {\n         try {\n            result = Convert.ToDouble(value);\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, result);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a Double.&quot;, value);\n         }               \n         catch (OverflowException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of a Double.&quot;, value);\n         }\n      }       \n   }   \n}\n// The example displays the following output:\n//       Converted &#39;-1,035.77219&#39; to -1035.77219.\n//       Unable to convert &#39;1AFF&#39; to a Double.\n//       Converted &#39;1e-35&#39; to 1E-35.\n//       Converted &#39;1,635,592,999,999,999,999,999,999&#39; to 1.635593E+24.\n//       Converted &#39;-17.455&#39; to -17.455.\n//       Converted &#39;190.34001&#39; to 190.34001.\n//       &#39;1.29e325&#39; is outside the range of a Double.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> values to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDouble#5\">      ushort[] numbers = { UInt16.MinValue, 121, 12345, UInt16.MaxValue };\n      double result;\n      \n      foreach (ushort number in numbers)\n      {\n         result = Convert.ToDouble(number);\n         Console.WriteLine(&quot;Converted the UInt16 value {0} to {1}.&quot;,\n                           number, result);\n      }   \n      // The example displays the following output:\n      //       Converted the UInt16 value 0 to 0.\n      //       Converted the UInt16 value 121 to 121.\n      //       Converted the UInt16 value 12345 to 12345.\n      //       Converted the UInt16 value 65535 to 65535.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDouble#5\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 12345, UInt16.MaxValue }\n      Dim result As Double\n      \n      For Each number As UShort In numbers\n         result = Convert.ToDouble(number)\n         Console.WriteLine(&quot;Converted the UInt16 value {0} to {1}.&quot;, _\n                           number, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;       Converted the UInt16 value 0 to 0.\n      &#39;       Converted the UInt16 value 121 to 121.\n      &#39;       Converted the UInt16 value 12345 to 12345.\n      &#39;       Converted the UInt16 value 65535 to 65535.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> values to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDouble#6\">      uint[] numbers = { UInt32.MinValue, 121, 12345, UInt32.MaxValue };\n      double result;\n      \n      foreach (uint number in numbers)\n      {\n         result = Convert.ToDouble(number);\n         Console.WriteLine(&quot;Converted the UInt32 value {0} to {1}.&quot;,\n                           number, result);\n      }   \n      // The example displays the following output:\n      //       Converted the UInt32 value 0 to 0.\n      //       Converted the UInt32 value 121 to 121.\n      //       Converted the UInt32 value 12345 to 12345.\n      //       Converted the UInt32 value 4294967295 to 4294967295.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDouble#6\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 12345, UInt32.MaxValue }\n      Dim result As Double\n      \n      For Each number As UInteger In numbers\n         result = Convert.ToDouble(number)\n         Console.WriteLine(&quot;Converted the UInt32 value {0} to {1}.&quot;, _\n                           number, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;       Converted the UInt32 value 0 to 0.\n      &#39;       Converted the UInt32 value 121 to 121.\n      &#39;       Converted the UInt32 value 12345 to 12345.\n      &#39;       Converted the UInt32 value 4294967295 to 4294967295.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> values to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToDouble#7\">      ulong[] numbers = { UInt64.MinValue, 121, 12345, UInt64.MaxValue };\n      double result;\n      \n      foreach (ulong number in numbers)\n      {\n         result = Convert.ToDouble(number);\n         Console.WriteLine(&quot;Converted the UInt64 value {0} to {1}.&quot;,\n                           number, result);\n      }   \n      // The example displays the following output:\n      //    Converted the UInt64 value 0 to 0.\n      //    Converted the UInt64 value 121 to 121.\n      //    Converted the UInt64 value 12345 to 12345.\n      //    Converted the UInt64 value 18446744073709551615 to 1.84467440737096E+19.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToDouble#7\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 12345, UInt64.MaxValue }\n      Dim result As Double\n      \n      For Each number As ULong In numbers\n         result = Convert.ToDouble(number)\n         Console.WriteLine(&quot;Converted the UInt64 value {0} to {1}.&quot;, _\n                           number, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value 0 to 0.\n      &#39;    Converted the UInt64 value 121 to 121.\n      &#39;    Converted the UInt64 value 12345 to 12345.\n      &#39;    Converted the UInt64 value 18446744073709551615 to 1.84467440737096E+19.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format for a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.double#System_Double_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.double#System_Double_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToDouble_\" data-linktype=\"relative-path\">ToDouble</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> and a class that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Objects of the class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> hold an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. An object of each class is passed to the <code>ToDouble</code> method. This method returns an average of the array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values, using the object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> to determine how to calculate the average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToXXX_Object_IFP#1\">using System;\nusing System.Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum AverageType : short\n{\n    None = 0,\n    GeometricMean = 1,\n    ArithmeticMean = 2,\n    Median = 3\n};\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\npublic class AverageInfo : IFormatProvider\n{\n    protected AverageType AvgType;\n\n    // Specify the type of averaging in the constructor.\n    public AverageInfo( AverageType avgType )\n    {\n        this.AvgType = avgType;\n    }\n\n    // This method returns a reference to the containing object \n    // if an object of AverageInfo type is requested. \n    public object GetFormat( Type argType )\n    {\n        if ( argType == typeof( AverageInfo ) )\n            return this;\n        else\n            return null;\n    }\n\n    // Use this property to set or get the type of averaging.\n    public AverageType TypeOfAverage        \n    {\n        get { return this.AvgType; }\n        set { this.AvgType = value; }\n    }\n}\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \npublic class DataSet : IConvertible\n{\n    protected ArrayList     data;\n    protected AverageInfo   defaultProvider;\n        \n    // Construct the object and add an initial list of values.\n    // Create a default format provider.\n    public DataSet( params double[ ] values )\n    {\n        data = new ArrayList( values );\n        defaultProvider = \n            new AverageInfo( AverageType.ArithmeticMean );\n    }\n        \n    // Add additional values with this method.\n    public int Add( double value )\n    {\n        data.Add( value );\n        return data.Count;\n    }\n        \n    // Get, set, and add values with this indexer property.\n    public double this[ int index ]        \n    {\n        get\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                return (double)data[ index ];\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.get] Index out of range.&quot; );\n        }\n        set\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                data[ index ] = value;\n\n            else if( index == data.Count )\n                data.Add( value );\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.set] Index out of range.&quot; );\n        }\n    }\n        \n    // This property returns the number of elements in the object.\n    public int Count        \n    {\n        get { return data.Count; }\n    }\n\n    // This method calculates the average of the object&#39;s elements.\n    protected double Average( AverageType avgType )\n    {\n        double  SumProd;\n\n        if( data.Count == 0 ) \n            return 0.0;\n\n        switch( avgType )\n        {\n            case AverageType.GeometricMean:\n\n                SumProd = 1.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd *= (double)data[ Index ];\n                \n                // This calculation will not fail with negative \n                // elements.\n                return Math.Sign( SumProd ) * Math.Pow( \n                    Math.Abs( SumProd ), 1.0 / data.Count );\n\n            case AverageType.ArithmeticMean:\n\n                SumProd = 0.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd += (double)data[ Index ];\n\n                return SumProd / data.Count;\n\n            case AverageType.Median:\n\n                if( data.Count % 2 == 0 )\n                    return ( (double)data[ data.Count / 2 ] + \n                        (double)data[ data.Count / 2 - 1 ] ) / 2.0;\n                else\n                    return (double)data[ data.Count / 2 ];\n\n            default:\n                return 0.0;\n        }\n    }\n\n    // Get the AverageInfo object from the caller&#39;s format provider,\n    // or use the local default.\n    protected AverageInfo GetAverageInfo( IFormatProvider provider )\n    {\n        AverageInfo avgInfo = null;\n\n        if( provider != null )\n            avgInfo = (AverageInfo)provider.GetFormat( \n                typeof( AverageInfo ) );\n\n        if ( avgInfo == null )\n            return defaultProvider;\n        else\n            return avgInfo;\n    }\n\n    // Calculate the average and limit the range.\n    protected double CalcNLimitAverage( double min, double max, \n        IFormatProvider provider )\n    {\n        // Get the format provider and calculate the average.\n        AverageInfo avgInfo = GetAverageInfo( provider );\n        double avg = Average( avgInfo.TypeOfAverage );\n\n        // Limit the range, based on the minimum and maximum values \n        // for the type.\n        return avg &gt; max ? max : avg &lt; min ? min : avg;\n\n    }\n\n    // The following elements are required by IConvertible.\n\n    // None of these conversion functions throw exceptions. When\n    // the data is out of range for the type, the appropriate\n    // MinValue or MaxValue is used.\n    public TypeCode GetTypeCode( )\n    {\n        return TypeCode.Object;\n    }\n\n    public bool ToBoolean( IFormatProvider provider )\n    {\n        // ToBoolean is false if the dataset is empty.\n        if( data.Count &lt;= 0 )\n            return false;\n\n        // For median averaging, ToBoolean is true if any \n        // non-discarded elements are nonzero.\n        else if( AverageType.Median == \n            GetAverageInfo( provider ).TypeOfAverage )\n        {\n            if (data.Count % 2 == 0 )\n                return ( (double)data[ data.Count / 2 ] != 0.0 || \n                    (double)data[ data.Count / 2 - 1 ] != 0.0 );\n            else\n                return (double)data[ data.Count / 2 ] != 0.0;\n        }\n\n        // For arithmetic or geometric mean averaging, ToBoolean is \n        // true if any element of the dataset is nonzero.  \n        else\n        {\n            for( int Index = 0; Index &lt; data.Count; Index++ )\n                if( (double)data[ Index ] != 0.0 ) \n                    return true;\n            return false;\n        }\n    }\n\n    public byte ToByte( IFormatProvider provider )\n    {\n        return Convert.ToByte( CalcNLimitAverage( \n            Byte.MinValue, Byte.MaxValue, provider ) );\n    }\n\n    public char ToChar( IFormatProvider provider )\n    {\n        return Convert.ToChar( Convert.ToUInt16( CalcNLimitAverage( \n            Char.MinValue, Char.MaxValue, provider ) ) );\n    }\n\n    // Convert to DateTime by adding the calculated average as \n    // seconds to the current date and time. A valid DateTime is \n    // always returned.\n    public DateTime ToDateTime( IFormatProvider provider )\n    {\n        double seconds = \n            Average( GetAverageInfo( provider ).TypeOfAverage );\n        try\n        {\n            return DateTime.Now.AddSeconds( seconds );\n        }\n        catch( ArgumentOutOfRangeException )\n        {\n            return seconds &lt; 0.0 ? DateTime.MinValue : DateTime.MaxValue;\n        }\n    }\n\n    public decimal ToDecimal( IFormatProvider provider )\n    {\n        // The Double conversion rounds Decimal.MinValue and \n        // Decimal.MaxValue to invalid Decimal values, so the \n        // following limits must be used.\n        return Convert.ToDecimal( CalcNLimitAverage( \n            -79228162514264330000000000000.0, \n            79228162514264330000000000000.0, provider ) );\n    }\n\n    public double ToDouble( IFormatProvider provider )\n    {\n        return Average( GetAverageInfo(provider).TypeOfAverage );\n    }\n\n    public short ToInt16( IFormatProvider provider )\n    {\n        return Convert.ToInt16( CalcNLimitAverage( \n            Int16.MinValue, Int16.MaxValue, provider ) );\n    }\n\n    public int ToInt32( IFormatProvider provider )\n    {\n        return Convert.ToInt32( CalcNLimitAverage( \n            Int32.MinValue, Int32.MaxValue, provider ) );\n    }\n\n    public long ToInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds Int64.MinValue and \n        // Int64.MaxValue to invalid Int64 values, so the following \n        // limits must be used.\n        return Convert.ToInt64( CalcNLimitAverage( \n            -9223372036854775000, 9223372036854775000, provider ) );\n    }\n\n    public SByte ToSByte( IFormatProvider provider )\n    {\n        return Convert.ToSByte( CalcNLimitAverage( \n            SByte.MinValue, SByte.MaxValue, provider ) );\n    }\n\n    public float ToSingle( IFormatProvider provider )\n    {\n        return Convert.ToSingle( CalcNLimitAverage( \n            Single.MinValue, Single.MaxValue, provider ) );\n    }\n\n    public UInt16 ToUInt16( IFormatProvider provider )\n    {\n        return Convert.ToUInt16( CalcNLimitAverage( \n            UInt16.MinValue, UInt16.MaxValue, provider ) );\n    }\n\n    public UInt32 ToUInt32( IFormatProvider provider )\n    {\n        return Convert.ToUInt32( CalcNLimitAverage( \n            UInt32.MinValue, UInt32.MaxValue, provider ) );\n    }\n\n    public UInt64 ToUInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds UInt64.MaxValue to an invalid\n        // UInt64 value, so the following limit must be used.\n        return Convert.ToUInt64( CalcNLimitAverage( \n            0, 18446744073709550000.0, provider ) );\n    }\n\n    public object ToType( Type conversionType, \n        IFormatProvider provider )\n    {\n        return Convert.ChangeType( Average( \n            GetAverageInfo( provider ).TypeOfAverage ), \n            conversionType );\n    }\n\n    public string ToString( IFormatProvider provider )\n    {\n        AverageType avgType = GetAverageInfo( provider ).TypeOfAverage;\n        return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, \n            Average( avgType ) );\n    }\n}\n   \nclass IConvertibleProviderDemo\n{\n    // Display a DataSet with three different format providers.\n    public static void DisplayDataSet( DataSet ds )\n    {\n        string      fmt    = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n        AverageInfo median = new AverageInfo( AverageType.Median );\n        AverageInfo geMean = \n            new AverageInfo( AverageType.GeometricMean );\n\n         // Display the dataset elements.\n        if( ds.Count &gt; 0 )\n        {\n            Console.Write( &quot;<br>DataSet: [{0}&quot;, ds[ 0 ] );\n            for( int iX = 1; iX &lt; ds.Count; iX++ )\n                Console.Write( &quot;, {0}&quot;, ds[ iX ] );\n            Console.WriteLine( &quot;]<br>&quot; );\n        }\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, \n            &quot;Geometric Mean&quot;, &quot;Median&quot;);\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, \n            &quot;--------------&quot;, &quot;------&quot;);\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, \n            Convert.ToBoolean( ds, null ), \n            Convert.ToBoolean( ds, geMean ), \n            Convert.ToBoolean( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToByte&quot;, \n            Convert.ToByte( ds, null ), \n            Convert.ToByte( ds, geMean ), \n            Convert.ToByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToChar&quot;, \n            Convert.ToChar( ds, null ), \n            Convert.ToChar( ds, geMean ), \n            Convert.ToChar( ds, median ) );\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; +\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, \n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, null ), \n            Convert.ToDateTime( ds, geMean ), \n            Convert.ToDateTime( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, \n            Convert.ToDecimal( ds, null ), \n            Convert.ToDecimal( ds, geMean ), \n            Convert.ToDecimal( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, \n            Convert.ToDouble( ds, null ), \n            Convert.ToDouble( ds, geMean ), \n            Convert.ToDouble( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, \n            Convert.ToInt16( ds, null ), \n            Convert.ToInt16( ds, geMean ), \n            Convert.ToInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, \n            Convert.ToInt32( ds, null ), \n            Convert.ToInt32( ds, geMean ), \n            Convert.ToInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, \n            Convert.ToInt64( ds, null ), \n            Convert.ToInt64( ds, geMean ), \n            Convert.ToInt64( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, \n            Convert.ToSByte( ds, null ), \n            Convert.ToSByte( ds, geMean ), \n            Convert.ToSByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, \n            Convert.ToSingle( ds, null ), \n            Convert.ToSingle( ds, geMean ), \n            Convert.ToSingle( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, \n            Convert.ToUInt16( ds, null ), \n            Convert.ToUInt16( ds, geMean ), \n            Convert.ToUInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, \n            Convert.ToUInt32( ds, null ), \n            Convert.ToUInt32( ds, geMean ), \n            Convert.ToUInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, \n            Convert.ToUInt64( ds, null ), \n            Convert.ToUInt64( ds, geMean ), \n            Convert.ToUInt64( ds, median ) );\n    }\n   \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods &quot; +\n            &quot;<br>generates the following output. The example &quot; +\n            &quot;displays the values <br>returned by the methods, &quot; +\n            &quot;using several IFormatProvider objects.<br>&quot; );\n          \n        DataSet ds1 = new DataSet( \n            10.5, 22.2, 45.9, 88.7, 156.05, 297.6 );\n        DisplayDataSet( ds1 );\n          \n        DataSet ds2 = new DataSet( \n            359999.95, 425000, 499999.5, 775000, 1695000 );\n        DisplayDataSet( ds2 );\n    }\n}\n\n/*\nThis example of the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:04:12 2003-05-13 15:03:28 2003-05-13 15:03:35\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 07:39:08 2003-05-20 22:28:45 2003-05-19 09:55:48\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert.ToXXX_Object_IFP#1\">using namespace System;\nusing namespace System::Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum class AverageType : short\n{\n   None = 0,\n   GeometricMean = 1,\n   ArithmeticMean = 2,\n   Median = 3\n};\n\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\nref class AverageInfo: public IFormatProvider\n{\nprotected:\n   AverageType AvgType;\n\npublic:\n\n   // Specify the type of averaging in the constructor.\n   AverageInfo( AverageType avgType )\n   {\n      this-&gt;AvgType = avgType;\n   }\n\n\n   // This method returns a reference to the containing object \n   // if an object of AverageInfo type is requested. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      if ( argType == AverageInfo::typeid)\n            return this;\n      else\n            return (Object^)0;\n   }\n\n\n   property AverageType TypeOfAverage \n   {\n\n      // Use this property to set or get the type of averaging.\n      AverageType get()\n      {\n         return this-&gt;AvgType;\n      }\n\n      void set( AverageType value )\n      {\n         this-&gt;AvgType = value;\n      }\n\n   }\n\n};\n\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \nref class DataSet: public IConvertible\n{\nprivate:\n   static Object^ null = nullptr;\n\nprotected:\n   ArrayList^ data;\n   AverageInfo^ defaultProvider;\n\n   // This method unboxes a boxed double.\n   double UnBoxDouble( Object^ obj )\n   {\n      return  *static_cast&lt;double^&gt;(obj);\n   }\n\n\npublic:\n\n   // Construct the object and add an initial list of values.\n   // Create a default format provider.\n   DataSet( ... array&lt;Double&gt;^values )\n   {\n      data = gcnew ArrayList( (Array^)values );\n      defaultProvider = gcnew AverageInfo( AverageType::ArithmeticMean );\n   }\n\n\n   // Add additional values with this method.\n   int Add( double value )\n   {\n      data-&gt;Add( value );\n      return data-&gt;Count;\n   }\n\n\n   property double Item[ int ]\n   {\n\n      // Get, set, and add values with this indexer property.\n      double get( int index )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  return UnBoxDouble( data[ index ] );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.get] Index out of range.&quot; );\n      }\n\n      void set( int index, double value )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  data[ index ] = value;\n         else\n         if ( index == data-&gt;Count )\n                  data-&gt;Add( value );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.set] Index out of range.&quot; );\n      }\n\n   }\n\n   property int Count \n   {\n\n      // This property returns the number of elements in the object.\n      int get()\n      {\n         return data-&gt;Count;\n      }\n\n   }\n\nprotected:\n\n   // This method calculates the average of the object&#39;s elements.\n   double Average( AverageType avgType )\n   {\n      double SumProd;\n      if ( data-&gt;Count == 0 )\n            return 0.0;\n\n      switch ( avgType )\n      {\n         case AverageType::GeometricMean:\n            SumProd = 1.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd *= UnBoxDouble( data[ Index ] );\n            \n            // This calculation will not fail with negative \n            // elements.\n            return Math::Sign( SumProd ) * Math::Pow( Math::Abs( SumProd ), 1.0 / data-&gt;Count );\n\n         case AverageType::ArithmeticMean:\n            SumProd = 0.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd += UnBoxDouble( data[ Index ] );\n            return SumProd / data-&gt;Count;\n\n         case AverageType::Median:\n            if ( data-&gt;Count % 2 == 0 )\n                        return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) + UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] )) / 2.0;\n            else\n                        return UnBoxDouble( data[ data-&gt;Count / 2 ] );\n\n         default:\n            return 0.0;\n      }\n   }\n\n\n   // Get the AverageInfo object from the caller&#39;s format provider,\n   // or use the local default.\n   AverageInfo^ GetAverageInfo( IFormatProvider^ provider )\n   {\n      AverageInfo^ avgInfo = nullptr;\n      if ( provider != nullptr )\n            avgInfo = static_cast&lt;AverageInfo^&gt;(provider-&gt;GetFormat( AverageInfo::typeid ));\n\n      if ( avgInfo == nullptr )\n            return defaultProvider;\n      else\n            return avgInfo;\n   }\n\n\n   // Calculate the average and limit the range.\n   double CalcNLimitAverage( double min, double max, IFormatProvider^ provider )\n   {\n      \n      // Get the format provider and calculate the average.\n      AverageInfo^ avgInfo = GetAverageInfo( provider );\n      double avg = Average( avgInfo-&gt;TypeOfAverage );\n      \n      // Limit the range, based on the minimum and maximum values \n      // for the type.\n      return avg &gt; max ? max : avg &lt; min ? min : avg;\n   }\n\n\npublic:\n\n   // The following elements are required by IConvertible.\n   // None of these conversion functions throw exceptions. When\n   // the data is out of range for the type, the appropriate\n   // MinValue or MaxValue is used.\n   virtual TypeCode GetTypeCode()\n   {\n      return TypeCode::Object;\n   }\n\n   virtual bool ToBoolean( IFormatProvider^ provider )\n   {\n      \n      // ToBoolean is false if the dataset is empty.\n      if ( data-&gt;Count &lt;= 0 )\n            return false;\n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      else\n      \n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      if ( AverageType::Median == GetAverageInfo( provider )-&gt;TypeOfAverage )\n      {\n         if ( data-&gt;Count % 2 == 0 )\n                  return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0 || UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] ) != 0.0);\n         else\n                  return UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0;\n      }\n      // For arithmetic or geometric mean averaging, ToBoolean is \n      // true if any element of the dataset is nonzero.  \n      else\n      {\n         for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n            if ( UnBoxDouble( data[ Index ] ) != 0.0 )\n                        return true;\n         return false;\n      }\n   }\n\n   virtual Byte ToByte( IFormatProvider^ provider )\n   {\n      return Convert::ToByte( CalcNLimitAverage( Byte::MinValue, Byte::MaxValue, provider ) );\n   }\n\n   virtual Char ToChar( IFormatProvider^ provider )\n   {\n      return Convert::ToChar( Convert::ToUInt16( CalcNLimitAverage( Char::MinValue, Char::MaxValue, provider ) ) );\n   }\n\n\n   // Convert to DateTime by adding the calculated average as \n   // seconds to the current date and time. A valid DateTime is \n   // always returned.\n   virtual DateTime ToDateTime( IFormatProvider^ provider )\n   {\n      double seconds = Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n      try\n      {\n         return DateTime::Now.AddSeconds( seconds );\n      }\n      catch ( ArgumentOutOfRangeException^ ) \n      {\n         return seconds &lt; 0.0 ? DateTime::MinValue : DateTime::MaxValue;\n      }\n\n   }\n\n   virtual Decimal ToDecimal( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Decimal.MinValue and \n      // Decimal.MaxValue to invalid Decimal values, so the \n      // following limits must be used.\n      return Convert::ToDecimal( CalcNLimitAverage(  -79228162514264330000000000000.0, 79228162514264330000000000000.0, provider ) );\n   }\n\n   virtual double ToDouble( IFormatProvider^ provider )\n   {\n      return Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n   }\n\n   virtual short ToInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToInt16( CalcNLimitAverage( Int16::MinValue, Int16::MaxValue, provider ) );\n   }\n\n   virtual int ToInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToInt32( CalcNLimitAverage( Int32::MinValue, Int32::MaxValue, provider ) );\n   }\n\n   virtual __int64 ToInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Int64.MinValue and \n      // Int64.MaxValue to invalid Int64 values, so the following \n      // limits must be used.\n      return Convert::ToInt64( CalcNLimitAverage(  -9223372036854775000, 9223372036854775000, provider ) );\n   }\n\n   virtual signed char ToSByte( IFormatProvider^ provider )\n   {\n      return Convert::ToSByte( CalcNLimitAverage( SByte::MinValue, SByte::MaxValue, provider ) );\n   }\n\n   virtual float ToSingle( IFormatProvider^ provider )\n   {\n      return Convert::ToSingle( CalcNLimitAverage( Single::MinValue, Single::MaxValue, provider ) );\n   }\n\n   virtual UInt16 ToUInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt16( CalcNLimitAverage( UInt16::MinValue, UInt16::MaxValue, provider ) );\n   }\n\n   virtual UInt32 ToUInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt32( CalcNLimitAverage( UInt32::MinValue, UInt32::MaxValue, provider ) );\n   }\n\n   virtual UInt64 ToUInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds UInt64.MaxValue to an invalid\n      // UInt64 value, so the following limit must be used.\n      return Convert::ToUInt64( CalcNLimitAverage( 0, 18446744073709550000.0, provider ) );\n   }\n\n   virtual Object^ ToType( Type^ conversionType, IFormatProvider^ provider )\n   {\n      return Convert::ChangeType( Average( GetAverageInfo( provider )-&gt;TypeOfAverage ), conversionType );\n   }\n\n   virtual String^ ToString( IFormatProvider^ provider )\n   {\n      AverageType avgType = GetAverageInfo( provider )-&gt;TypeOfAverage;\n      return String::Format( &quot;( {0}: {1:G10} )&quot;, avgType, Average( avgType ) );\n   }\n\n};\n\n\n// Display a DataSet with three different format providers.\nvoid DisplayDataSet( DataSet^ ds )\n{\n   IFormatProvider^ null = nullptr;\n   String^ fmt = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n   AverageInfo^ median = gcnew AverageInfo( AverageType::Median );\n   AverageInfo^ geMean = gcnew AverageInfo( AverageType::GeometricMean );\n   \n   // Display the dataset elements.\n   if ( ds-&gt;Count &gt; 0 )\n   {\n      Console::Write( &quot;<br>DataSet: [{0}&quot;, ds-&gt;Item[ 0 ] );\n      for ( int iX = 1; iX &lt; ds-&gt;Count; iX++ )\n         Console::Write( &quot;, {0}&quot;, ds-&gt;Item[ iX ] );\n      Console::WriteLine( &quot;]<br>&quot; );\n   }\n\n   Console::WriteLine( fmt, &quot;Convert::&quot;, &quot;Default&quot;, &quot;Geometric Mean&quot;, &quot;Median&quot; );\n   Console::WriteLine( fmt, &quot;---------&quot;, &quot;-------&quot;, &quot;--------------&quot;, &quot;------&quot; );\n   Console::WriteLine( fmt, &quot;ToBoolean&quot;, Convert::ToBoolean( ds, null ), Convert::ToBoolean( ds, geMean ), Convert::ToBoolean( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToByte&quot;, Convert::ToByte( ds, null ), Convert::ToByte( ds, geMean ), Convert::ToByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToChar&quot;, Convert::ToChar( ds, null ), Convert::ToChar( ds, geMean ), Convert::ToChar( ds, median ) );\n   Console::WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot;\n   &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, &quot;ToDateTime&quot;, Convert::ToDateTime( ds, null ), Convert::ToDateTime( ds, geMean ), Convert::ToDateTime( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDecimal&quot;, Convert::ToDecimal( ds, null ), Convert::ToDecimal( ds, geMean ), Convert::ToDecimal( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDouble&quot;, Convert::ToDouble( ds, null ), Convert::ToDouble( ds, geMean ), Convert::ToDouble( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt16&quot;, Convert::ToInt16( ds, null ), Convert::ToInt16( ds, geMean ), Convert::ToInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt32&quot;, Convert::ToInt32( ds, null ), Convert::ToInt32( ds, geMean ), Convert::ToInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt64&quot;, Convert::ToInt64( ds, null ), Convert::ToInt64( ds, geMean ), Convert::ToInt64( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSByte&quot;, Convert::ToSByte( ds, null ), Convert::ToSByte( ds, geMean ), Convert::ToSByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSingle&quot;, Convert::ToSingle( ds, null ), Convert::ToSingle( ds, geMean ), Convert::ToSingle( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt16&quot;, Convert::ToUInt16( ds, null ), Convert::ToUInt16( ds, geMean ), Convert::ToUInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt32&quot;, Convert::ToUInt32( ds, null ), Convert::ToUInt32( ds, geMean ), Convert::ToUInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt64&quot;, Convert::ToUInt64( ds, null ), Convert::ToUInt64( ds, geMean ), Convert::ToUInt64( ds, median ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods &quot;\n   &quot;<br>generates the following output. The example &quot;\n   &quot;displays the values <br>returned by the methods, &quot;\n   &quot;using several IFormatProvider objects.<br>&quot; );\n   \n   // To call a [ParamArray] method in C++, you cannot just\n   // list the parameters, you need to build an array.\n   array&lt;Double&gt;^dataElem = gcnew array&lt;Double&gt;(6);\n   dataElem[ 0 ] = 10.5;\n   dataElem[ 1 ] = 22.2;\n   dataElem[ 2 ] = 45.9;\n   dataElem[ 3 ] = 88.7;\n   dataElem[ 4 ] = 156.05;\n   dataElem[ 5 ] = 297.6;\n   DataSet^ ds1 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds1 );\n   dataElem = gcnew array&lt;Double&gt;(5);\n   dataElem[ 0 ] = 359999.95;\n   dataElem[ 1 ] = 425000;\n   dataElem[ 2 ] = 499999.5;\n   dataElem[ 3 ] = 775000;\n   dataElem[ 4 ] = 1695000;\n   DataSet^ ds2 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds2 );\n}\n\n/*\nThis example of the Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:30:23 2003-05-13 15:29:39 2003-05-13 15:29:47\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 08:05:19 2003-05-20 22:54:57 2003-05-19 10:21:59\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToXXX_Object_IFP#1\">Imports System.Collections\n\nModule IConvertibleProviderDemo\n\n    &#39; Define the types of averaging available in the class \n    &#39; implementing IConvertible.\n    Enum AverageType as Short\n        None = 0\n        GeometricMean = 1\n        ArithmeticMean = 2\n        Median = 3\n    End Enum\n\n    &#39; Pass an instance of this class to methods that require an \n    &#39; IFormatProvider. The class instance determines the type of \n    &#39; average to calculate.\n    Public Class AverageInfo\n        Implements IFormatProvider\n\n        Protected  AvgType      As AverageType\n\n        &#39; Specify the type of averaging in the constructor.\n        Public Sub New( avgType As AverageType )\n            Me.AvgType = avgType\n        End Sub\n\n        &#39; This method returns a reference to the containing object \n        &#39; if an object of AverageInfo type is requested. \n        Public Function GetFormat( argType As Type ) As Object _\n            Implements IFormatProvider.GetFormat\n\n            If argType Is GetType( AverageInfo ) Then\n                Return Me\n            Else\n                Return Nothing\n            End If\n        End Function \n\n        &#39; Use this property to set or get the type of averaging.\n        Public Property TypeOfAverage( ) As AverageType\n            Get\n                Return Me.AvgType\n            End Get\n            Set( ByVal value as AverageType )\n                Me.AvgType = value\n            End Set\n        End Property\n    End Class \n\n    &#39; This class encapsulates an array of Double values and implements \n    &#39; the IConvertible interface. Most of the IConvertible methods \n    &#39; return an average of the array elements in one of three types: \n    &#39; arithmetic mean, geometric mean, or median. \n    Public Class DataSet\n        Implements IConvertible\n\n        Protected data              As ArrayList\n        Protected defaultProvider   As AverageInfo\n           \n        &#39; Construct the object and add an initial list of values.\n        &#39; Create a default format provider.\n        Public Sub New( ParamArray values( ) As Double )\n            data = New ArrayList( values )\n            defaultProvider = New AverageInfo( _\n                AverageType.ArithmeticMean )  \n        End Sub\n           \n        &#39; Add additional values with this method.\n        Public Function Add( value As Double ) As Integer\n            data.Add( value )\n            Return data.Count\n        End Function\n           \n        &#39; Get, set, and add values with this indexer property.\n        Default Public Property Item(index As Integer) As Double\n            Get\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    Return System.Convert.ToDouble( data( index ) )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.get] Index out of range.&quot; )\n                End If\n            End Get\n            Set\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    data( index ) = value\n                 \n                ElseIf index = data.Count Then\n                    data.Add( value )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.set] Index out of range.&quot; )\n                End If\n            End Set\n        End Property\n          \n        &#39; This property returns the number of elements in the object.\n        Public ReadOnly Property Count( ) As Integer\n            Get\n                Return data.Count\n            End Get\n        End Property\n\n        &#39; This method calculates the average of the object&#39;s elements.\n        Protected Function Average( ByVal avgType As AverageType ) As Double\n\n            Dim SumProd As Double \n            Dim Index   As Integer\n\n            If data.Count = 0 Then Return 0.0\n\n            Select Case avgType\n                \n                Case AverageType.GeometricMean\n\n                    SumProd = 1.0\n                    For Index = 0 To data.Count - 1\n                        SumProd *= data( Index )\n                    Next Index\n                    \n                    &#39; This calculation will not fail with negative \n                    &#39; elements.\n                    Return Math.Sign( SumProd ) * Math.Pow( _\n                        Math.Abs( SumProd ), 1.0 / data.Count )\n\n                Case AverageType.ArithmeticMean\n\n                    SumProd = 0.0\n                    For Index = 0 To data.Count - 1\n                        SumProd += data( Index )\n                    Next Index\n\n                    Return SumProd / data.Count \n\n                Case AverageType.Median\n\n                    If data.Count Mod 2 = 0 Then\n                        Return ( data( data.Count \\ 2 ) + _\n                            data( data.Count \\ 2 - 1 ) ) / 2.0\n                    Else\n                        Return data( data.Count \\ 2 ) \n                    End If\n            End Select\n        End Function\n\n        &#39; Get the AverageInfo object from the caller&#39;s format \n        &#39; provider, or use the local default.\n        Protected Function GetAverageInfo( _\n            provider As IFormatProvider ) As AverageInfo\n\n            Dim avgInfo As AverageInfo = Nothing\n\n            If Not provider Is Nothing Then\n                avgInfo = provider.GetFormat( GetType( AverageInfo ) )\n            End If\n\n            Return IIf( avgInfo Is Nothing, defaultProvider, avgInfo )\n            \n        End Function           \n\n        &#39; Calculate the average and limit the range.\n        Protected Function CalcNLimitAverage( min As Double, _\n            max As Double, provider as IFormatProvider ) As Double\n\n            &#39; Get the format provider and calculate the average.\n            Dim avgInfo As AverageInfo = GetAverageInfo( provider )\n            Dim avg As Double = Average( avgInfo.TypeOfAverage )\n\n            &#39; Limit the range, based on the minimum and maximum values \n            &#39; for the type.\n            Return IIf( avg &gt; max, max, IIf( avg &lt; min, min, avg ) )\n\n        End Function\n\n        &#39; The following elements are required by IConvertible.\n\n        &#39; None of these conversion functions throw exceptions. When\n        &#39; the data is out of range for the type, the appropriate\n        &#39; MinValue or MaxValue is used.\n        Public Function GetTypeCode( ) As TypeCode _\n            Implements IConvertible.GetTypeCode\n            Return TypeCode.Object\n        End Function\n\n        Function ToBoolean( ByVal provider As IFormatProvider ) As _\n            Boolean Implements IConvertible.ToBoolean\n\n            &#39; ToBoolean is false if the dataset is empty.\n            If data.Count &lt;= 0 Then\n                Return False\n\n            &#39; For median averaging, ToBoolean is true if any \n            &#39; non-discarded elements are nonzero.\n            ElseIf AverageType.Median = _\n                GetAverageInfo( provider ).TypeOfAverage Then\n\n                If data.Count Mod 2 = 0 Then\n                    Return ( data( data.Count \\ 2 ) &lt;&gt; 0.0 Or _\n                        data( data.Count \\ 2 - 1 ) &lt;&gt; 0.0 )\n                Else\n                    Return data( data.Count \\ 2 ) &lt;&gt; 0.0\n                End If\n\n            &#39; For arithmetic or geometric mean averaging, ToBoolean is \n            &#39; true if any element of the dataset is nonzero.  \n            Else\n                Dim Index As Integer\n                For Index = 0 To data.Count - 1\n                    If data( Index ) &lt;&gt; 0.0 Then Return True\n                Next Index\n                Return False\n            End If\n        End Function\n\n        Function ToByte( ByVal provider As IFormatProvider ) As Byte _\n            Implements IConvertible.ToByte\n            Return Convert.ToByte( CalcNLimitAverage( _\n                Byte.MinValue, Byte.MaxValue, provider ) )\n        End Function\n\n        Function ToChar( ByVal provider As IFormatProvider ) As Char _\n            Implements IConvertible.ToChar\n            Return Convert.ToChar( Convert.ToUInt16( _\n                CalcNLimitAverage( 0.0, &amp;HFFFF, provider ) ) )\n        End Function\n\n        &#39; Convert to DateTime by adding the calculated average as \n        &#39; seconds to the current date and time. A valid DateTime is \n        &#39; always returned.\n        Function ToDateTime( ByVal provider As IFormatProvider ) As _\n            DateTime Implements IConvertible.ToDateTime\n            Dim seconds As Double = Average( _\n                GetAverageInfo( provider ).TypeOfAverage )\n            Try\n                Return DateTime.Now.AddSeconds( seconds )\n            Catch ex As ArgumentOutOfRangeException \n                Return IIf( seconds &lt; 0.0, DateTime.MinValue, _\n                    DateTime.MaxValue )\n            End Try\n        End Function\n\n        Function ToDecimal( ByVal provider As IFormatProvider ) As _\n            Decimal Implements IConvertible.ToDecimal\n\n            &#39; The Double conversion rounds Decimal.MinValue and\n            &#39; Decimal.MaxValue to invalid Decimal values, so the \n            &#39; following limits must be used.\n            Return Convert.ToDecimal( CalcNLimitAverage( _\n                -79228162514264330000000000000.0, _\n                79228162514264330000000000000.0, provider ) )\n        End Function\n\n        Function ToDouble( ByVal provider As IFormatProvider) As _\n            Double Implements IConvertible.ToDouble\n            Return Average( GetAverageInfo( provider ).TypeOfAverage )\n        End Function\n\n        Function ToInt16( ByVal provider As IFormatProvider ) As _\n            Short Implements IConvertible.ToInt16\n            Return Convert.ToInt16( CalcNLimitAverage( _\n                Int16.MinValue, Int16.MaxValue, provider ) )\n        End Function\n\n        Function ToInt32( ByVal provider As IFormatProvider ) As _\n            Integer Implements IConvertible.ToInt32\n            Return Convert.ToInt32( CalcNLimitAverage( _\n                Int32.MinValue, Int32.MaxValue, provider ) )\n        End Function\n\n        Function ToInt64( ByVal provider As IFormatProvider ) As Long _\n            Implements IConvertible.ToInt64\n\n            &#39; The Double conversion rounds Int64.MinValue and \n            &#39; Int64.MaxValue to invalid Long values, so the following \n            &#39; limits must be used.\n            Return Convert.ToInt64( CalcNLimitAverage( _\n                -9223372036854775000, 9223372036854775000, provider ) )\n        End Function\n\n        Function ToSByte( ByVal provider As IFormatProvider ) As _\n            SByte Implements IConvertible.ToSByte\n\n            &#39; SByte.MinValue and SByte.MaxValue are not defined in\n            &#39; Visual Basic.\n            Return Convert.ToSByte( CalcNLimitAverage( _\n                -128, 127, provider ) )\n        End Function\n\n        Function ToSingle( ByVal provider As IFormatProvider ) As _\n            Single Implements IConvertible.ToSingle\n            Return Convert.ToSingle( CalcNLimitAverage( _\n                Single.MinValue, Single.MaxValue, provider ) )\n        End Function\n\n        Function ToUInt16( ByVal provider As IFormatProvider ) As _\n            UInt16 Implements IConvertible.ToUInt16\n\n            &#39; UInt16.MinValue and UInt16.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt16( CalcNLimitAverage( _\n                0, &amp;HFFFF, provider ) )\n        End Function\n\n        Function ToUInt32( ByVal provider As IFormatProvider ) As _\n            UInt32 Implements IConvertible.ToUInt32\n\n            &#39; UInt32.MinValue and UInt32.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt32( CalcNLimitAverage( _\n                0, 4294967295, provider ) )\n        End Function\n\n        Function ToUInt64( ByVal provider As IFormatProvider ) As _\n            UInt64 Implements IConvertible.ToUInt64\n\n            &#39; UInt64.MinValue and UInt64.MaxValue are not defined in \n            &#39; Visual Basic. The Double conversion would have rounded \n            &#39; UInt64.MaxValue, so the following limit must be used.\n            Return Convert.ToUInt64( CalcNLimitAverage( _\n                0, 18446744073709550000.0, provider ) )\n        End Function\n\n        Function ToType( ByVal conversionType As Type, _\n            ByVal provider As IFormatProvider) As Object _\n            Implements IConvertible.ToType\n            Return Convert.ChangeType( Average( GetAverageInfo( _\n                provider ).TypeOfAverage ), conversionType )\n        End Function\n\n        Overloads Function ToString( ByVal provider As IFormatProvider _\n            ) As String Implements IConvertible.ToString\n            Dim avgType as AverageType = _\n                GetAverageInfo( provider ).TypeOfAverage\n            Return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, _\n                Average( avgType ) )\n        End Function\n    End Class\n   \n    &#39; Display a DataSet with three different format providers.\n    Sub DisplayDataSet( ds As DataSet )\n\n        Dim fmt    As String      = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;\n        Dim median As AverageInfo = New AverageInfo( AverageType.Median )\n        Dim geMean As AverageInfo = _\n            New AverageInfo( AverageType.GeometricMean )\n        Dim iX     As Integer\n\n        &#39; Display the dataset elements.\n        If ds.Count &gt; 0 Then\n            Console.Write( vbCrLf &amp; &quot;DataSet: [{0}&quot;, ds( 0 ) )\n            For iX = 1 To ds.Count - 1\n                Console.Write( &quot;, {0}&quot;, ds( iX ) )\n            Next iX\n            Console.WriteLine( &quot;]&quot; &amp; vbCrLf )\n        End If\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, _\n            &quot;Geometric Mean&quot;, &quot;Median&quot; )\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, _\n            &quot;--------------&quot;, &quot;------&quot; )\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, _\n            Convert.ToBoolean( ds, Nothing ), _\n            Convert.ToBoolean( ds, geMean ), _\n            Convert.ToBoolean( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToByte&quot;, _\n            Convert.ToByte( ds, Nothing ), _\n            Convert.ToByte( ds, geMean ), _\n            Convert.ToByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToChar&quot;, _\n            Convert.ToChar( ds, Nothing ), _\n            Convert.ToChar( ds, geMean ), _\n            Convert.ToChar( ds, median ) )\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; &amp; _\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, _\n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, Nothing ), _\n            Convert.ToDateTime( ds, geMean ), _\n            Convert.ToDateTime( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, _\n            Convert.ToDecimal( ds, Nothing ), _\n            Convert.ToDecimal( ds, geMean ), _\n            Convert.ToDecimal( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, _\n            Convert.ToDouble( ds, Nothing ), _\n            Convert.ToDouble( ds, geMean ), _\n            Convert.ToDouble( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, _\n            Convert.ToInt16( ds, Nothing ), _\n            Convert.ToInt16( ds, geMean ), _\n            Convert.ToInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, _\n            Convert.ToInt32( ds, Nothing ), _\n            Convert.ToInt32( ds, geMean ), _\n            Convert.ToInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, _\n            Convert.ToInt64( ds, Nothing ), _\n            Convert.ToInt64( ds, geMean ), _\n            Convert.ToInt64( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, _\n            Convert.ToSByte( ds, Nothing ), _\n            Convert.ToSByte( ds, geMean ), _\n            Convert.ToSByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, _\n            Convert.ToSingle( ds, Nothing ), _\n            Convert.ToSingle( ds, geMean ), _\n            Convert.ToSingle( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, _\n            Convert.ToUInt16( ds, Nothing ), _\n            Convert.ToUInt16( ds, geMean ), _\n            Convert.ToUInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, _\n            Convert.ToUInt32( ds, Nothing ), _\n            Convert.ToUInt32( ds, geMean ), _\n            Convert.ToUInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, _\n            Convert.ToUInt64( ds, Nothing ), _\n            Convert.ToUInt64( ds, geMean ), _\n            Convert.ToUInt64( ds, median ) )\n    End Sub\n   \n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Convert.To&lt;Type&gt;( Object, &quot; &amp; _\n            &quot;IFormatProvider ) methods &quot; &amp; vbCrLf &amp; &quot;generates &quot; &amp; _\n            &quot;the following output. The example displays the &quot; &amp; _\n            &quot;values &quot; &amp; vbCrLf &amp; &quot;returned by the methods, &quot; &amp; _\n            &quot;using several IFormatProvider objects.&quot; &amp; vbCrLf )\n          \n        Dim ds1 As New DataSet( 10.5, 22.2, 45.9, 88.7, 156.05, 297.6 )\n        DisplayDataSet( ds1 )\n          \n        Dim ds2 As New DataSet( _\n            359999.95, 425000, 499999.5, 775000, 1695000 )\n        DisplayDataSet( ds2 )\n    End Sub \nEnd Module \n\n&#39; This example of the Convert.To&lt;Type&gt;( Object, IFormatProvider ) methods\n&#39; generates the following output. The example displays the values\n&#39; returned by the methods, using several IFormatProvider objects.\n&#39; \n&#39; DataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       103                  59                  67\n&#39; ToChar                         g                   ;                   C\n&#39; ToDateTime   2003-05-13 14:52:53 2003-05-13 14:52:09 2003-05-13 14:52:17\n&#39; ToDecimal       103.491666666667    59.4332135445164                67.3\n&#39; ToDouble        103.491666666667    59.4332135445164                67.3\n&#39; ToInt16                      103                  59                  67\n&#39; ToInt32                      103                  59                  67\n&#39; ToInt64                      103                  59                  67\n&#39; ToSByte                      103                  59                  67\n&#39; ToSingle                103.4917            59.43321                67.3\n&#39; ToUInt16                     103                  59                  67\n&#39; ToUInt32                     103                  59                  67\n&#39; ToUInt64                     103                  59                  67\n&#39; \n&#39; DataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       255                 255                 255\n&#39; ToChar                         ?                   ?                   ?\n&#39; ToDateTime   2003-05-22 07:27:49 2003-05-20 22:17:27 2003-05-19 09:44:29\n&#39; ToDecimal              750999.89    631577.237188435            499999.5\n&#39; ToDouble               750999.89    631577.237188435            499999.5\n&#39; ToInt16                    32767               32767               32767\n&#39; ToInt32                   751000              631577              500000\n&#39; ToInt64                   751000              631577              500000\n&#39; ToSByte                      127                 127                 127\n&#39; ToSingle                750999.9            631577.3            499999.5\n&#39; ToUInt16                   65535               65535               65535\n&#39; ToUInt32                  751000              631577              500000\n&#39; ToUInt64                  751000              631577              500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToDouble_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> or greater than <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.double#System_Double_Parse_\" data-linktype=\"relative-path\">Parse</a> method on <code>value</code>.  </p>\n<p> <code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.double#System_Double_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts string representations of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values with the <code>ToDouble</code> method, using an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToReals_String#2\">Imports System.Globalization\n\nModule Example\n    Sub Main()\n        &#39; Create a NumberFormatInfo object and set some of its properties.\n        Dim provider As New NumberFormatInfo() \n        provider.NumberDecimalSeparator = &quot;,&quot;\n        provider.NumberGroupSeparator = &quot;.&quot;\n        provider.NumberGroupSizes = { 3 }\n\n        &#39; Define an array of numeric strings to convert.\n        Dim values() As String = { &quot;123456789&quot;, &quot;12345.6789&quot;, &quot;12345,6789&quot;, \n                                   &quot;123,456.789&quot;, &quot;123.456,789&quot;, \n                                   &quot;123,456,789.0123&quot;, &quot;123.456.789,0123&quot; }\n\n        Console.WriteLine(&quot;Default Culture: {0}&quot;, \n                          CultureInfo.CurrentCulture.Name)\n        Console.WriteLine()                          \n        Console.WriteLine(&quot;{0,-22} {1,-20} {2,-20}&quot;, &quot;String to Convert&quot;,\n                          &quot;Default/Exception&quot;, &quot;Provider/Exception&quot;)\n        Console.WriteLine()\n        &#39; Convert each string to a Double with and without the provider.\n        For Each value In values\n           Console.Write(&quot;{0,-22} &quot;, value)\n           Try\n              Console.Write(&quot;{0,-20} &quot;, Convert.ToDouble(value))\n           Catch e As FormatException\n              Console.Write(&quot;{0,-20} &quot;, e.GetType().Name)\n           End Try\n           Try\n              Console.WriteLine(&quot;{0,-20} &quot;, Convert.ToDouble(value, provider))\n           Catch e As FormatException\n              Console.WriteLine(&quot;{0,-20} &quot;, e.GetType().Name)\n           End Try\n        Next\n    End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       Default Culture: en-US\n&#39;       \n&#39;       String to Convert      Default/Exception    Provider/Exception\n&#39;       \n&#39;       123456789              123456789            123456789\n&#39;       12345.6789             12345.6789           123456789\n&#39;       12345,6789             123456789            12345.6789\n&#39;       123,456.789            123456.789           FormatException\n&#39;       123.456,789            FormatException      123456.789\n&#39;       123,456,789.0123       123456789.0123       FormatException\n&#39;       123.456.789,0123       FormatException      123456789.0123\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToReals_String#2\">using System;\nusing System.Globalization;\n\nclass Example\n{\n    static void Main()\n    {\n        // Create a NumberFormatInfo object and set some of its properties.\n        NumberFormatInfo provider = new NumberFormatInfo();\n        provider.NumberDecimalSeparator = &quot;,&quot;;\n        provider.NumberGroupSeparator = &quot;.&quot;;\n        provider.NumberGroupSizes = new int[] { 3 };\n\n        // Define an array of numeric strings to convert.\n        String[] values = { &quot;123456789&quot;, &quot;12345.6789&quot;, &quot;12345,6789&quot;, \n                            &quot;123,456.789&quot;, &quot;123.456,789&quot;, \n                            &quot;123,456,789.0123&quot;, &quot;123.456.789,0123&quot; };\n\n        Console.WriteLine(&quot;Default Culture: {0}<br>&quot;, \n                          CultureInfo.CurrentCulture.Name);\n        Console.WriteLine(&quot;{0,-22} {1,-20} {2,-20}<br>&quot;, &quot;String to Convert&quot;,\n                          &quot;Default/Exception&quot;, &quot;Provider/Exception&quot;);\n\n        // Convert each string to a Double with and without the provider.\n        foreach (var value in values) {\n           Console.Write(&quot;{0,-22} &quot;, value);\n           try {\n              Console.Write(&quot;{0,-20} &quot;, Convert.ToDouble(value));\n           }   \n           catch (FormatException e) {\n              Console.Write(&quot;{0,-20} &quot;, e.GetType().Name);\n           }\n           try {\n              Console.WriteLine(&quot;{0,-20} &quot;, Convert.ToDouble(value, provider));\n           }\n           catch (FormatException e) {\n              Console.WriteLine(&quot;{0,-20} &quot;, e.GetType().Name);\n           }\n        }\n    }\n}\n// The example displays the following output:\n//       Default Culture: en-US\n//       \n//       String to Convert      Default/Exception    Provider/Exception\n//       \n//       123456789              123456789            123456789\n//       12345.6789             12345.6789           123456789\n//       12345,6789             123456789            12345.6789\n//       123,456.789            123456.789           FormatException\n//       123.456,789            FormatException      123456.789\n//       123,456,789.0123       123456789.0123       FormatException\n//       123.456.789,0123       FormatException      123456789.0123\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts the Boolean values <code>true</code> and <code>false</code> to <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag,\n                        Convert.ToInt16(falseFlag));\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag,\n                        Convert.ToInt16(trueFlag));\n      // The example displays the following output:\n      //       False converts to 0.\n      //       True converts to 1.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, _\n                        Convert.ToInt16(falseFlag))\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, _\n                        Convert.ToInt16(trueFlag))\n      &#39; The example displays the following output:\n      &#39;       False converts to 0.\n      &#39;       True converts to 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#2\">      byte[] bytes = { Byte.MinValue, 14, 122, Byte.MaxValue};\n      short result;\n      \n      foreach (byte byteValue in bytes)\n      {\n         result = Convert.ToInt16(byteValue);\n         Console.WriteLine(&quot;The Byte value {0} converts to {1}.&quot;,\n                           byteValue, result);\n      }\n      // The example displays the following output:\n      //       The Byte value 0 converts to 0.\n      //       The Byte value 14 converts to 14.\n      //       The Byte value 122 converts to 122.\n      //       The Byte value 255 converts to 255.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#2\">      Dim bytes() As Byte = { Byte.MinValue, 14, 122, Byte.MaxValue}\n      Dim result As Short\n      \n      For Each byteValue As Byte In bytes\n         result = Convert.ToInt16(byteValue)\n         Console.WriteLine(&quot;The Byte value {0} converts to {1}.&quot;, _\n                           byteValue, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       The Byte value 0 converts to 0.\n      &#39;       The Byte value 14 converts to 14.\n      &#39;       The Byte value 122 converts to 122.\n      &#39;       The Byte value 255 converts to 255.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#3\">      char[] chars = { &#39;a&#39;, &#39;z&#39;, &#39;\\x0007&#39;, &#39;\\x03FF&#39;,\n                       &#39;\\x7FFF&#39;, &#39;\\xFFFE&#39; };\n      short result;\n      \n      foreach (char ch in chars)\n      {\n         try {\n            result = Convert.ToInt16(ch);\n            Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, ch, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;Unable to convert u+{0} to an Int16.&quot;,\n                              ((int)ch).ToString(&quot;X4&quot;));\n         }\n      }   \n      // The example displays the following output:\n      //       &#39;a&#39; converts to 97.\n      //       &#39;z&#39; converts to 122.\n      //       &#39;&#39; converts to 7.\n      //       &#39;?&#39; converts to 1023.\n      //       &#39;?&#39; converts to 32767.\n      //       Unable to convert u+FFFE to a UInt16.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#3\">      Dim chars() As Char = { &quot;a&quot;c, &quot;z&quot;c, ChrW(7), ChrW(1023), _\n                              ChrW(Short.MaxValue), ChrW(&amp;hFFFE) }\n      Dim result As Short\n                              \n      For Each ch As Char in chars\n         Try\n            result = Convert.ToInt16(ch)\n            Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, ch, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;Unable to convert u+{0} to an Int16.&quot;, _\n                              AscW(ch).ToString(&quot;X4&quot;))\n         End Try\n      Next   \n      &#39; The example displays the following output:\n      &#39;       &#39;a&#39; converts to 97.\n      &#39;       &#39;z&#39; converts to 122.\n      &#39;       &#39;&#39; converts to 7.\n      &#39;       &#39;?&#39; converts to 1023.\n      &#39;       &#39;?&#39; converts to 32767.\n      &#39;       Unable to convert u+FFFE to a UInt16.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to a 16-bit signed integer. The example illustrates that any fractional part of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value is rounded when performing the conversion.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#4\">      decimal[] values = { Decimal.MinValue, -1034.23m, -12m, 0m, 147m,\n                                  9214.16m, Decimal.MaxValue };\n      short result;\n      \n      foreach (decimal value in values)\n      {\n         try {\n            result = Convert.ToInt16(value);\n            Console.WriteLine(&quot;Converted {0} to {1}.&quot;, value, result);\n         }   \n         catch (OverflowException)\n         {\n            Console.WriteLine(&quot;{0} is outside the range of the Int16 type.&quot;,\n                              value);\n         }   \n      }                                  \n      // The example displays the following output:\n      //    -79228162514264337593543950335 is outside the range of the Int16 type.\n      //    Converted -1034.23 to -1034.\n      //    Converted -12 to -12.\n      //    Converted 0 to 0.\n      //    Converted 147 to 147.\n      //    Converted 9214.16 to 9214.\n      //    79228162514264337593543950335 is outside the range of the Int16 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#4\">      Dim values() As Decimal = { Decimal.MinValue, -1034.23d, -12d, 0d, 147d, _\n                                  9214.16d, Decimal.MaxValue }\n      Dim result As Short\n      \n      For Each value As Decimal In values\n         Try\n            result = Convert.ToInt16(value)\n            Console.WriteLine(&quot;Converted {0} to {1}.&quot;, value, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int16 type.&quot;, _\n                              value)\n         End Try   \n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    -79228162514264337593543950335 is outside the range of the Int16 type.\n      &#39;    Converted -1034.23 to -1034.\n      &#39;    Converted -12 to -12.\n      &#39;    Converted 0 to 0.\n      &#39;    Converted 147 to 147.\n      &#39;    Converted 9214.16 to 9214.\n      &#39;    79228162514264337593543950335 is outside the range of the Int16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to a 16-bit signed integer. The example illustrates that any fractional part of a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value is rounded before performing the conversion.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#5\">      double[] values = { Double.MinValue, -1.38e10, -1023.299, -12.98,\n                          0, 9.113e-16, 103.919, 17834.191, Double.MaxValue };\n      short result;\n      \n      foreach (double value in values)\n      {\n         try {\n            result = Convert.ToInt16(value);\n            Console.WriteLine(&quot;Converted {0} to {1}.&quot;, value, result);\n         }   \n         catch (OverflowException)\n         {\n            Console.WriteLine(&quot;{0} is outside the range of the Int16 type.&quot;, value);\n         }   \n      }                                 \n      //       -1.79769313486232E+308 is outside the range of the Int16 type.\n      //       -13800000000 is outside the range of the Int16 type.\n      //       Converted -1023.299 to -1023.\n      //       Converted -12.98 to -13.\n      //       Converted 0 to 0.\n      //       Converted 9.113E-16 to 0.\n      //       Converted 103.919 to 104.\n      //       Converted 17834.191 to 17834.\n      //       1.79769313486232E+308 is outside the range of the Int16 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#5\">      Dim values() As Double = { Double.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Double.MaxValue }\n      Dim result As Short\n      \n      For Each value As Double In values\n         Try\n            result = Convert.ToInt16(value)\n            Console.WriteLine(&quot;Converted {0} to {1}.&quot;, value, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int16 type.&quot;, value)\n         End Try   \n      Next                                 \n      &#39;       -1.79769313486232E+308 is outside the range of the Int16 type.\n      &#39;       -13800000000 is outside the range of the Int16 type.\n      &#39;       Converted -1023.299 to -1023.\n      &#39;       Converted -12.98 to -13.\n      &#39;       Converted 0 to 0.\n      &#39;       Converted 9.113E-16 to 0.\n      &#39;       Converted 103.919 to 104.\n      &#39;       Converted 17834.191 to 17834.\n      &#39;       1.79769313486232E+308 is outside the range of the Int16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 16-bit signed integer; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The 16-bit signed integer equivalent of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of integers to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#6\">      int[] numbers = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue };\n      short result;\n      \n      foreach (int number in numbers)\n      {\n         try {\n            result = Convert.ToInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int32 value -2147483648 is outside the range of the Int16 type.\n      //    Converted the Int32 value -1 to a Int16 value -1.\n      //    Converted the Int32 value 0 to a Int16 value 0.\n      //    Converted the Int32 value 121 to a Int16 value 121.\n      //    Converted the Int32 value 340 to a Int16 value 340.\n      //    The Int32 value 2147483647 is outside the range of the Int16 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#6\">      Dim numbers() As Integer = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue }\n      Dim result As Short\n      \n      For Each number As Integer In numbers\n         Try\n            result = Convert.ToInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int32 value -2147483648 is outside the range of the Int16 type.\n      &#39;    Converted the Int32 value -1 to a Int16 value -1.\n      &#39;    Converted the Int32 value 0 to a Int16 value 0.\n      &#39;    Converted the Int32 value 121 to a Int16 value 121.\n      &#39;    Converted the Int32 value 340 to a Int16 value 340.\n      &#39;    The Int32 value 2147483647 is outside the range of the Int16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#7\">      long[] numbers = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue };\n      short result;\n      \n      foreach (long number in numbers)\n      {\n         try {\n            result = Convert.ToInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int64 value -9223372036854775808 is outside the range of the Int16 type.\n      //    Converted the Int64 value -1 to the Int16 value -1.\n      //    Converted the Int64 value 0 to the Int16 value 0.\n      //    Converted the Int64 value 121 to the Int16 value 121.\n      //    Converted the Int64 value 340 to the Int16 value 340.\n      //    The Int64 value 9223372036854775807 is outside the range of the Int16 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#7\">      Dim numbers() As Long = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue }\n      Dim result As Short\n      For Each number As Long In numbers\n         Try\n            result = Convert.ToInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int64 value -9223372036854775808 is outside the range of the Int16 type.\n      &#39;    Converted the Int64 value -1 to the Int16 value -1.\n      &#39;    Converted the Int64 value 0 to the Int16 value 0.\n      &#39;    Converted the Int64 value 121 to the Int16 value 121.\n      &#39;    Converted the Int64 value 340 to the Int16 value 340.\n      &#39;    The Int64 value 9223372036854775807 is outside the range of the Int16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format for an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int16#System_Int16_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is not <code>null</code>, this method wraps a call to the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToInt16_\" data-linktype=\"relative-path\">ToInt16</a> implementation of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#8\">      object[] values= { true, -12, 163, 935, &#39;x&#39;, new DateTime(2009, 5, 12),\n                         &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2};\n      short result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToInt16(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No conversion to an Int16 exists for the {0} value {1}.&quot;,\n                              value.GetType().Name, value);\n         }\n      }                           \n      // The example displays the following output:\n      //    Converted the Boolean value True to the Int16 value 1.\n      //    Converted the Int32 value -12 to the Int16 value -12.\n      //    Converted the Int32 value 163 to the Int16 value 163.\n      //    Converted the Int32 value 935 to the Int16 value 935.\n      //    Converted the Char value x to the Int16 value 120.\n      //    No conversion to an Int16 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      //    Converted the String value 104 to the Int16 value 104.\n      //    The String value 103.0 is not in a recognizable format.\n      //    Converted the String value -1 to the Int16 value -1.\n      //    The String value 1.00e2 is not in a recognizable format.\n      //    The String value One is not in a recognizable format.\n      //    Converted the Double value 100 to the Int16 value 100.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#8\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, #5/12/2009#, _\n                                 &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2}\n      Dim result As Short\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToInt16(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to an Int16 exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to the Int16 value 1.\n      &#39;    Converted the Int32 value -12 to the Int16 value -12.\n      &#39;    Converted the Int32 value 163 to the Int16 value 163.\n      &#39;    Converted the Int32 value 935 to the Int16 value 935.\n      &#39;    Converted the Char value x to the Int16 value 120.\n      &#39;    No conversion to an Int16 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      &#39;    Converted the String value 104 to the Int16 value 104.\n      &#39;    The String value 103.0 is not in a recognizable format.\n      &#39;    Converted the String value -1 to the Int16 value -1.\n      &#39;    The String value 1.00e2 is not in a recognizable format.\n      &#39;    The String value One is not in a recognizable format.\n      &#39;    Converted the Double value 100 to the Int16 value 100.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of signed bytes to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#9\">      sbyte[] numbers = { SByte.MinValue, -1, 0, 10, SByte.MaxValue };\n      short result;\n      \n      foreach (sbyte number in numbers)\n      {\n         result = Convert.ToInt16(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           number.GetType().Name, number,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //       Converted the SByte value -128 to the Int16 value -128.\n      //       Converted the SByte value -1 to the Int16 value -1.\n      //       Converted the SByte value 0 to the Int16 value 0.\n      //       Converted the SByte value 10 to the Int16 value 10.\n      //       Converted the SByte value 127 to the Int16 value 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#9\">      Dim numbers() As SByte = { SByte.MinValue, -1, 0, 10, SByte.MaxValue }\n      Dim result As Short\n      \n      For Each number As SByte In numbers\n         result = Convert.ToInt16(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the SByte value -128 to the Int16 value -128.\n      &#39;       Converted the SByte value -1 to the Int16 value -1.\n      &#39;       Converted the SByte value 0 to the Int16 value 0.\n      &#39;       Converted the SByte value 10 to the Int16 value 10.\n      &#39;       Converted the SByte value 127 to the Int16 value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 16-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#10\">      float[] values = { Single.MinValue, -1.38e10f, -1023.299f, -12.98f,\n                         0f, 9.113e-16f, 103.919f, 17834.191f, Single.MaxValue };\n      short result;\n      \n      foreach (float value in values)\n      {\n         try {\n            result = Convert.ToInt16(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int16 type.&quot;, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    -3.40282346638529E+38 is outside the range of the Int16 type.\n      //    -13799999488 is outside the range of the Int16 type.\n      //    Converted the Double value -1023.29901123047 to the Int16 value -1023.\n      //    Converted the Double value -12.9799995422363 to the Int16 value -13.\n      //    Converted the Double value 0 to the Int16 value 0.\n      //    Converted the Double value 9.11299983940444E-16 to the Int16 value 0.\n      //    Converted the Double value 103.918998718262 to the Int16 value 104.\n      //    Converted the Double value 17834.19140625 to the Int16 value 17834.\n      //    3.40282346638529E+38 is outside the range of the Int16 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#10\">      Dim values() As Single = { Single.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Single.MaxValue }\n      Dim result As Short\n      \n      For Each value As Single In values\n         Try\n            result = Convert.ToInt16(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int16 type.&quot;, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    -3.40282346638529E+38 is outside the range of the Int16 type.\n      &#39;    -13799999488 is outside the range of the Int16 type.\n      &#39;    Converted the Double value -1023.29901123047 to the Int16 value -1023.\n      &#39;    Converted the Double value -12.9799995422363 to the Int16 value -13.\n      &#39;    Converted the Double value 0 to the Int16 value 0.\n      &#39;    Converted the Double value 9.11299983940444E-16 to the Int16 value 0.\n      &#39;    Converted the Double value 103.918998718262 to the Int16 value 104.\n      &#39;    Converted the Double value 17834.19140625 to the Int16 value 17834.\n      &#39;    3.40282346638529E+38 is outside the range of the Int16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToInt16 method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.int16#System_Int16_Parse_System_String_\" data-linktype=\"relative-path\">System.Int16.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.int16#System_Int16_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts string representations of 16-bit integers with the <code>ToInt16</code> method, using default formatting.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToSInts_String#3\">// Example of the Convert::ToInt16( String* ) and \n// Convert::ToInt16( String*, IFormatProvider* ) methods.\nusing namespace System;\nusing namespace System::Globalization;\nconst __wchar_t * protoFmt = L&quot;{0,-20}{1,-20}{2}&quot;;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\nvoid ConvertToInt16( String^ numericStr, IFormatProvider^ provider )\n{\n   Object^ defaultValue;\n   Object^ providerValue;\n   \n   // Convert numericStr to Int16 without a format provider.\n   try\n   {\n      defaultValue = Convert::ToInt16( numericStr );\n   }\n   catch ( Exception^ ex ) \n   {\n      defaultValue = GetExceptionType( ex );\n   }\n\n   \n   // Convert numericStr to Int16 with a format provider.\n   try\n   {\n      providerValue = Convert::ToInt16( numericStr, provider );\n   }\n   catch ( Exception^ ex ) \n   {\n      providerValue = GetExceptionType( ex );\n   }\n\n   Console::WriteLine( gcnew String( protoFmt ), numericStr, defaultValue, providerValue );\n}\n\nint main()\n{\n   \n   // Create a NumberFormatInfo object and set several of its\n   // properties that apply to numbers.\n   NumberFormatInfo^ provider = gcnew NumberFormatInfo;\n   \n   // These properties affect the conversion.\n   provider-&gt;NegativeSign = &quot;neg &quot;;\n   provider-&gt;PositiveSign = &quot;pos &quot;;\n   \n   // These properties do not affect the conversion.\n   // The input string cannot have decimal and group separators.\n   provider-&gt;NumberDecimalSeparator = &quot;.&quot;;\n   provider-&gt;NumberGroupSeparator = &quot;,&quot;;\n   array&lt;Int32&gt;^sizes = {3};\n   provider-&gt;NumberGroupSizes = sizes;\n   provider-&gt;NumberNegativePattern = 0;\n   Console::WriteLine( &quot;This example of<br>&quot;\n   &quot;  Convert::ToInt16( String* ) and <br>&quot;\n   &quot;  Convert::ToInt16( String*, IFormatProvider* ) &quot;\n   &quot;<br>generates the following output. It converts &quot;\n   &quot;several strings to <br>short values, using &quot;\n   &quot;default formatting or a NumberFormatInfo object.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;String to convert&quot;, &quot;Default/exception&quot;, &quot;Provider/exception&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;-----------------&quot;, &quot;-----------------&quot;, &quot;------------------&quot; );\n   \n   // Convert strings, with and without an IFormatProvider.\n   ConvertToInt16( &quot;12345&quot;, provider );\n   ConvertToInt16( &quot;+12345&quot;, provider );\n   ConvertToInt16( &quot;pos 12345&quot;, provider );\n   ConvertToInt16( &quot;-12345&quot;, provider );\n   ConvertToInt16( &quot;neg 12345&quot;, provider );\n   ConvertToInt16( &quot;12345.&quot;, provider );\n   ConvertToInt16( &quot;12,345&quot;, provider );\n   ConvertToInt16( &quot;(12345)&quot;, provider );\n   ConvertToInt16( &quot;32768&quot;, provider );\n   ConvertToInt16( &quot;-32769&quot;, provider );\n}\n\n/*\nThis example of\n  Convert::ToInt16( String* ) and\n  Convert::ToInt16( String*, IFormatProvider* )\ngenerates the following output. It converts several strings to\nshort values, using default formatting or a NumberFormatInfo object.\n\nString to convert   Default/exception   Provider/exception\n-----------------   -----------------   ------------------\n12345               12345               12345\n+12345              12345               FormatException\npos 12345           FormatException     12345\n-12345              -12345              FormatException\nneg 12345           FormatException     -12345\n12345.              FormatException     FormatException\n12,345              FormatException     FormatException\n(12345)             FormatException     FormatException\n32768               OverflowException   OverflowException\n-32769              OverflowException   FormatException\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToSInts_String#3\">// Example of the Convert.ToInt16( string ) and \n// Convert.ToInt16( string, IFormatProvider ) methods.\nusing System;\nusing System.Globalization;\n\nclass ToInt16ProviderDemo\n{\n    static string format = &quot;{0,-20}{1,-20}{2}&quot;;\n\n     // Get the exception type name; remove the namespace prefix.\n    static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    static void ConvertToInt16( string numericStr, \n        IFormatProvider provider )\n    {\n        object defaultValue;\n        object providerValue;\n\n        // Convert numericStr to Int16 without a format provider.\n        try\n        {\n            defaultValue = Convert.ToInt16( numericStr );\n        }\n        catch( Exception ex )\n        {\n            defaultValue = GetExceptionType( ex );\n        }\n\n        // Convert numericStr to Int16 with a format provider.\n        try\n        {\n            providerValue = Convert.ToInt16( numericStr, provider );\n        }\n        catch( Exception ex )\n        {\n            providerValue = GetExceptionType( ex );\n        }\n\n        Console.WriteLine( format, numericStr, \n            defaultValue, providerValue );\n    }\n\n    public static void Main( )\n    {\n        // Create a NumberFormatInfo object and set several of its\n        // properties that apply to numbers.\n        NumberFormatInfo provider = new NumberFormatInfo();\n\n        // These properties affect the conversion.\n        provider.NegativeSign = &quot;neg &quot;;\n        provider.PositiveSign = &quot;pos &quot;;\n\n        // These properties do not affect the conversion.\n        // The input string cannot have decimal and group separators.\n        provider.NumberDecimalSeparator = &quot;.&quot;;\n        provider.NumberGroupSeparator = &quot;,&quot;;\n        provider.NumberGroupSizes = new int[ ] { 3 };\n        provider.NumberNegativePattern = 0;\n\n        Console.WriteLine(&quot;This example of<br>&quot; +\n            &quot;  Convert.ToInt16( string ) and <br>&quot; +\n            &quot;  Convert.ToInt16( string, IFormatProvider ) &quot; +\n            &quot;<br>generates the following output. It converts &quot; +\n            &quot;several strings to <br>short values, using &quot; +\n            &quot;default formatting or a NumberFormatInfo object.<br>&quot; );\n        Console.WriteLine( format, &quot;String to convert&quot;, \n            &quot;Default/exception&quot;, &quot;Provider/exception&quot; );\n        Console.WriteLine( format, &quot;-----------------&quot;, \n            &quot;-----------------&quot;, &quot;------------------&quot; );\n\n        // Convert strings, with and without an IFormatProvider.\n        ConvertToInt16( &quot;12345&quot;, provider );\n        ConvertToInt16( &quot;+12345&quot;, provider );\n        ConvertToInt16( &quot;pos 12345&quot;, provider );\n        ConvertToInt16( &quot;-12345&quot;, provider );\n        ConvertToInt16( &quot;neg 12345&quot;, provider );\n        ConvertToInt16( &quot;12345.&quot;, provider );\n        ConvertToInt16( &quot;12,345&quot;, provider );\n        ConvertToInt16( &quot;(12345)&quot;, provider );\n        ConvertToInt16( &quot;32768&quot;, provider );\n        ConvertToInt16( &quot;-32769&quot;, provider );\n    }\n}\n\n/*\nThis example of\n  Convert.ToInt16( string ) and\n  Convert.ToInt16( string, IFormatProvider )\ngenerates the following output. It converts several strings to\nshort values, using default formatting or a NumberFormatInfo object.\n\nString to convert   Default/exception   Provider/exception\n-----------------   -----------------   ------------------\n12345               12345               12345\n+12345              12345               FormatException\npos 12345           FormatException     12345\n-12345              -12345              FormatException\nneg 12345           FormatException     -12345\n12345.              FormatException     FormatException\n12,345              FormatException     FormatException\n(12345)             FormatException     FormatException\n32768               OverflowException   OverflowException\n-32769              OverflowException   FormatException\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSInts_String#3\">&#39; Example of the Convert.ToInt16( String ) and \n&#39; Convert.ToInt16( String, IFormatProvider ) methods.\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nModule ToInt16ProviderDemo\n\n    Dim format As String = &quot;{0,-20}{1,-20}{2}&quot;\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    Sub ConvertToInt16( numericStr As String, _\n        provider As IFormatProvider )\n\n        Dim defaultValue    As Object\n        Dim providerValue   As Object\n\n        &#39; Convert numericStr to Int16 without a format provider.\n        Try\n            defaultValue = Convert.ToInt16( numericStr )\n        Catch ex As Exception\n            defaultValue = GetExceptionType( ex )\n        End Try\n\n        &#39; Convert numericStr to Int16 with a format provider.\n        Try\n            providerValue = Convert.ToInt16( numericStr, provider )\n        Catch ex As Exception\n            providerValue = GetExceptionType( ex )\n        End Try\n\n        Console.WriteLine( format, numericStr, _\n            defaultValue, providerValue )\n    End Sub\n\n    Sub Main( )\n\n        &#39; Create a NumberFormatInfo object and set several of its\n        &#39; properties that apply to numbers.\n        Dim provider  As NumberFormatInfo = new NumberFormatInfo( )\n\n        &#39; These properties affect the conversion.\n        provider.NegativeSign = &quot;neg &quot;\n        provider.PositiveSign = &quot;pos &quot;\n\n        &#39; These properties do not affect the conversion.\n        &#39; The input string cannot have decimal and group separators.\n        provider.NumberDecimalSeparator = &quot;.&quot;\n        provider.NumberGroupSeparator = &quot;,&quot;\n        provider.NumberGroupSizes = New Integer( ) { 3 }\n        provider.NumberNegativePattern = 0\n\n        Console.WriteLine( &quot;This example of&quot; &amp; vbCrLf &amp; _\n            &quot;  Convert.ToInt16( String ) and &quot; &amp; vbCrLf &amp; _\n            &quot;  Convert.ToInt16( String, IFormatProvider ) &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output. It &quot; &amp; _\n            &quot;converts several strings to &quot; &amp; vbCrLf &amp; &quot;Short &quot; &amp; _\n            &quot;values, using default formatting &quot; &amp; _\n            &quot;or a NumberFormatInfo object.&quot; &amp; vbCrLf )\n        Console.WriteLine( format, &quot;String to convert&quot;, _\n            &quot;Default/exception&quot;, &quot;Provider/exception&quot; )\n        Console.WriteLine( format, &quot;-----------------&quot;, _\n            &quot;-----------------&quot;, &quot;------------------&quot; )\n\n        &#39; Convert strings, with and without an IFormatProvider.\n        ConvertToInt16( &quot;12345&quot;, provider )\n        ConvertToInt16( &quot;+12345&quot;, provider )\n        ConvertToInt16( &quot;pos 12345&quot;, provider )\n        ConvertToInt16( &quot;-12345&quot;, provider )\n        ConvertToInt16( &quot;neg 12345&quot;, provider )\n        ConvertToInt16( &quot;12345.&quot;, provider )\n        ConvertToInt16( &quot;12,345&quot;, provider )\n        ConvertToInt16( &quot;(12345)&quot;, provider )\n        ConvertToInt16( &quot;32768&quot;, provider )\n        ConvertToInt16( &quot;-32769&quot;, provider )\n    End Sub \nEnd Module \n\n&#39; This example of\n&#39;   Convert.ToInt16( String ) and\n&#39;   Convert.ToInt16( String, IFormatProvider )\n&#39; generates the following output. It converts several strings to\n&#39; Short values, using default formatting or a NumberFormatInfo object.\n&#39; \n&#39; String to convert   Default/exception   Provider/exception\n&#39; -----------------   -----------------   ------------------\n&#39; 12345               12345               12345\n&#39; +12345              12345               FormatException\n&#39; pos 12345           FormatException     12345\n&#39; -12345              -12345              FormatException\n&#39; neg 12345           FormatException     -12345\n&#39; 12345.              FormatException     FormatException\n&#39; 12,345              FormatException     FormatException\n&#39; (12345)             FormatException     FormatException\n&#39; 32768               OverflowException   OverflowException\n&#39; -32769              OverflowException   FormatException\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#11\">      ushort[] numbers = { UInt16.MinValue, 121, 340, UInt16.MaxValue };\n      short result;\n      foreach (ushort number in numbers)\n      {\n         try {\n            result = Convert.ToInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //       Converted the UInt16 value 0 to a Int16 value 0.\n      //       Converted the UInt16 value 121 to a Int16 value 121.\n      //       Converted the UInt16 value 340 to a Int16 value 340.\n      //       The UInt16 value 65535 is outside the range of the Int16 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#11\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 340, UInt16.MaxValue }\n      Dim result As Short\n      For Each number As UShort In numbers\n         Try\n            result = Convert.ToInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the UInt16 value 0 to a Int16 value 0.\n      &#39;       Converted the UInt16 value 121 to a Int16 value 121.\n      &#39;       Converted the UInt16 value 340 to a Int16 value 340.\n      &#39;       The UInt16 value 65535 is outside the range of the Int16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#12\">      uint[] numbers = { UInt32.MinValue, 121, 340, UInt32.MaxValue };\n      short result;\n      \n      foreach (uint number in numbers)\n      {\n         try {\n            result = Convert.ToInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt32 value 0 to a Int16 value 0.\n      //    Converted the UInt32 value 121 to a Int16 value 121.\n      //    Converted the UInt32 value 340 to a Int16 value 340.\n      //    The UInt32 value 4294967295 is outside the range of the Int16 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#12\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 340, UInt32.MaxValue }\n      Dim result As Short\n      For Each number As UInteger In numbers\n         Try\n            result = Convert.ToInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt32 value 0 to a Int16 value 0.\n      &#39;    Converted the UInt32 value 121 to a Int16 value 121.\n      &#39;    Converted the UInt32 value 340 to a Int16 value 340.\n      &#39;    The UInt32 value 4294967295 is outside the range of the Int16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#13\">      ulong[] numbers = { UInt64.MinValue, 121, 340, UInt64.MaxValue };\n      short result;\n      \n      foreach (ulong number in numbers)\n      {\n         try {\n            result = Convert.ToInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt64 value 0 to a Int16 value 0.\n      //    Converted the UInt64 value 121 to a Int16 value 121.\n      //    Converted the UInt64 value 340 to a Int16 value 340.\n      //    The UInt64 value 18446744073709551615 is outside the range of the Int16 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#13\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 340, UInt64.MaxValue }\n      Dim result As Short\n      For Each number As ULong In numbers\n         Try\n            result = Convert.ToInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value 0 to a Int16 value 0.\n      &#39;    Converted the UInt64 value 121 to a Int16 value 121.\n      &#39;    Converted the UInt64 value 340 to a Int16 value 340.\n      &#39;    The UInt64 value 18446744073709551615 is outside the range of the Int16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format for an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int16#System_Int16_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> and a class that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Objects of the class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> hold an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. An object of each class is passed to the <code>ToInt16</code> method. This method returns an average of the array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values, using the object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> to determine how to calculate the average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToXXX_Object_IFP#1\">using System;\nusing System.Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum AverageType : short\n{\n    None = 0,\n    GeometricMean = 1,\n    ArithmeticMean = 2,\n    Median = 3\n};\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\npublic class AverageInfo : IFormatProvider\n{\n    protected AverageType AvgType;\n\n    // Specify the type of averaging in the constructor.\n    public AverageInfo( AverageType avgType )\n    {\n        this.AvgType = avgType;\n    }\n\n    // This method returns a reference to the containing object \n    // if an object of AverageInfo type is requested. \n    public object GetFormat( Type argType )\n    {\n        if ( argType == typeof( AverageInfo ) )\n            return this;\n        else\n            return null;\n    }\n\n    // Use this property to set or get the type of averaging.\n    public AverageType TypeOfAverage        \n    {\n        get { return this.AvgType; }\n        set { this.AvgType = value; }\n    }\n}\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \npublic class DataSet : IConvertible\n{\n    protected ArrayList     data;\n    protected AverageInfo   defaultProvider;\n        \n    // Construct the object and add an initial list of values.\n    // Create a default format provider.\n    public DataSet( params double[ ] values )\n    {\n        data = new ArrayList( values );\n        defaultProvider = \n            new AverageInfo( AverageType.ArithmeticMean );\n    }\n        \n    // Add additional values with this method.\n    public int Add( double value )\n    {\n        data.Add( value );\n        return data.Count;\n    }\n        \n    // Get, set, and add values with this indexer property.\n    public double this[ int index ]        \n    {\n        get\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                return (double)data[ index ];\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.get] Index out of range.&quot; );\n        }\n        set\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                data[ index ] = value;\n\n            else if( index == data.Count )\n                data.Add( value );\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.set] Index out of range.&quot; );\n        }\n    }\n        \n    // This property returns the number of elements in the object.\n    public int Count        \n    {\n        get { return data.Count; }\n    }\n\n    // This method calculates the average of the object&#39;s elements.\n    protected double Average( AverageType avgType )\n    {\n        double  SumProd;\n\n        if( data.Count == 0 ) \n            return 0.0;\n\n        switch( avgType )\n        {\n            case AverageType.GeometricMean:\n\n                SumProd = 1.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd *= (double)data[ Index ];\n                \n                // This calculation will not fail with negative \n                // elements.\n                return Math.Sign( SumProd ) * Math.Pow( \n                    Math.Abs( SumProd ), 1.0 / data.Count );\n\n            case AverageType.ArithmeticMean:\n\n                SumProd = 0.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd += (double)data[ Index ];\n\n                return SumProd / data.Count;\n\n            case AverageType.Median:\n\n                if( data.Count % 2 == 0 )\n                    return ( (double)data[ data.Count / 2 ] + \n                        (double)data[ data.Count / 2 - 1 ] ) / 2.0;\n                else\n                    return (double)data[ data.Count / 2 ];\n\n            default:\n                return 0.0;\n        }\n    }\n\n    // Get the AverageInfo object from the caller&#39;s format provider,\n    // or use the local default.\n    protected AverageInfo GetAverageInfo( IFormatProvider provider )\n    {\n        AverageInfo avgInfo = null;\n\n        if( provider != null )\n            avgInfo = (AverageInfo)provider.GetFormat( \n                typeof( AverageInfo ) );\n\n        if ( avgInfo == null )\n            return defaultProvider;\n        else\n            return avgInfo;\n    }\n\n    // Calculate the average and limit the range.\n    protected double CalcNLimitAverage( double min, double max, \n        IFormatProvider provider )\n    {\n        // Get the format provider and calculate the average.\n        AverageInfo avgInfo = GetAverageInfo( provider );\n        double avg = Average( avgInfo.TypeOfAverage );\n\n        // Limit the range, based on the minimum and maximum values \n        // for the type.\n        return avg &gt; max ? max : avg &lt; min ? min : avg;\n\n    }\n\n    // The following elements are required by IConvertible.\n\n    // None of these conversion functions throw exceptions. When\n    // the data is out of range for the type, the appropriate\n    // MinValue or MaxValue is used.\n    public TypeCode GetTypeCode( )\n    {\n        return TypeCode.Object;\n    }\n\n    public bool ToBoolean( IFormatProvider provider )\n    {\n        // ToBoolean is false if the dataset is empty.\n        if( data.Count &lt;= 0 )\n            return false;\n\n        // For median averaging, ToBoolean is true if any \n        // non-discarded elements are nonzero.\n        else if( AverageType.Median == \n            GetAverageInfo( provider ).TypeOfAverage )\n        {\n            if (data.Count % 2 == 0 )\n                return ( (double)data[ data.Count / 2 ] != 0.0 || \n                    (double)data[ data.Count / 2 - 1 ] != 0.0 );\n            else\n                return (double)data[ data.Count / 2 ] != 0.0;\n        }\n\n        // For arithmetic or geometric mean averaging, ToBoolean is \n        // true if any element of the dataset is nonzero.  \n        else\n        {\n            for( int Index = 0; Index &lt; data.Count; Index++ )\n                if( (double)data[ Index ] != 0.0 ) \n                    return true;\n            return false;\n        }\n    }\n\n    public byte ToByte( IFormatProvider provider )\n    {\n        return Convert.ToByte( CalcNLimitAverage( \n            Byte.MinValue, Byte.MaxValue, provider ) );\n    }\n\n    public char ToChar( IFormatProvider provider )\n    {\n        return Convert.ToChar( Convert.ToUInt16( CalcNLimitAverage( \n            Char.MinValue, Char.MaxValue, provider ) ) );\n    }\n\n    // Convert to DateTime by adding the calculated average as \n    // seconds to the current date and time. A valid DateTime is \n    // always returned.\n    public DateTime ToDateTime( IFormatProvider provider )\n    {\n        double seconds = \n            Average( GetAverageInfo( provider ).TypeOfAverage );\n        try\n        {\n            return DateTime.Now.AddSeconds( seconds );\n        }\n        catch( ArgumentOutOfRangeException )\n        {\n            return seconds &lt; 0.0 ? DateTime.MinValue : DateTime.MaxValue;\n        }\n    }\n\n    public decimal ToDecimal( IFormatProvider provider )\n    {\n        // The Double conversion rounds Decimal.MinValue and \n        // Decimal.MaxValue to invalid Decimal values, so the \n        // following limits must be used.\n        return Convert.ToDecimal( CalcNLimitAverage( \n            -79228162514264330000000000000.0, \n            79228162514264330000000000000.0, provider ) );\n    }\n\n    public double ToDouble( IFormatProvider provider )\n    {\n        return Average( GetAverageInfo(provider).TypeOfAverage );\n    }\n\n    public short ToInt16( IFormatProvider provider )\n    {\n        return Convert.ToInt16( CalcNLimitAverage( \n            Int16.MinValue, Int16.MaxValue, provider ) );\n    }\n\n    public int ToInt32( IFormatProvider provider )\n    {\n        return Convert.ToInt32( CalcNLimitAverage( \n            Int32.MinValue, Int32.MaxValue, provider ) );\n    }\n\n    public long ToInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds Int64.MinValue and \n        // Int64.MaxValue to invalid Int64 values, so the following \n        // limits must be used.\n        return Convert.ToInt64( CalcNLimitAverage( \n            -9223372036854775000, 9223372036854775000, provider ) );\n    }\n\n    public SByte ToSByte( IFormatProvider provider )\n    {\n        return Convert.ToSByte( CalcNLimitAverage( \n            SByte.MinValue, SByte.MaxValue, provider ) );\n    }\n\n    public float ToSingle( IFormatProvider provider )\n    {\n        return Convert.ToSingle( CalcNLimitAverage( \n            Single.MinValue, Single.MaxValue, provider ) );\n    }\n\n    public UInt16 ToUInt16( IFormatProvider provider )\n    {\n        return Convert.ToUInt16( CalcNLimitAverage( \n            UInt16.MinValue, UInt16.MaxValue, provider ) );\n    }\n\n    public UInt32 ToUInt32( IFormatProvider provider )\n    {\n        return Convert.ToUInt32( CalcNLimitAverage( \n            UInt32.MinValue, UInt32.MaxValue, provider ) );\n    }\n\n    public UInt64 ToUInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds UInt64.MaxValue to an invalid\n        // UInt64 value, so the following limit must be used.\n        return Convert.ToUInt64( CalcNLimitAverage( \n            0, 18446744073709550000.0, provider ) );\n    }\n\n    public object ToType( Type conversionType, \n        IFormatProvider provider )\n    {\n        return Convert.ChangeType( Average( \n            GetAverageInfo( provider ).TypeOfAverage ), \n            conversionType );\n    }\n\n    public string ToString( IFormatProvider provider )\n    {\n        AverageType avgType = GetAverageInfo( provider ).TypeOfAverage;\n        return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, \n            Average( avgType ) );\n    }\n}\n   \nclass IConvertibleProviderDemo\n{\n    // Display a DataSet with three different format providers.\n    public static void DisplayDataSet( DataSet ds )\n    {\n        string      fmt    = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n        AverageInfo median = new AverageInfo( AverageType.Median );\n        AverageInfo geMean = \n            new AverageInfo( AverageType.GeometricMean );\n\n         // Display the dataset elements.\n        if( ds.Count &gt; 0 )\n        {\n            Console.Write( &quot;<br>DataSet: [{0}&quot;, ds[ 0 ] );\n            for( int iX = 1; iX &lt; ds.Count; iX++ )\n                Console.Write( &quot;, {0}&quot;, ds[ iX ] );\n            Console.WriteLine( &quot;]<br>&quot; );\n        }\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, \n            &quot;Geometric Mean&quot;, &quot;Median&quot;);\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, \n            &quot;--------------&quot;, &quot;------&quot;);\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, \n            Convert.ToBoolean( ds, null ), \n            Convert.ToBoolean( ds, geMean ), \n            Convert.ToBoolean( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToByte&quot;, \n            Convert.ToByte( ds, null ), \n            Convert.ToByte( ds, geMean ), \n            Convert.ToByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToChar&quot;, \n            Convert.ToChar( ds, null ), \n            Convert.ToChar( ds, geMean ), \n            Convert.ToChar( ds, median ) );\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; +\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, \n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, null ), \n            Convert.ToDateTime( ds, geMean ), \n            Convert.ToDateTime( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, \n            Convert.ToDecimal( ds, null ), \n            Convert.ToDecimal( ds, geMean ), \n            Convert.ToDecimal( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, \n            Convert.ToDouble( ds, null ), \n            Convert.ToDouble( ds, geMean ), \n            Convert.ToDouble( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, \n            Convert.ToInt16( ds, null ), \n            Convert.ToInt16( ds, geMean ), \n            Convert.ToInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, \n            Convert.ToInt32( ds, null ), \n            Convert.ToInt32( ds, geMean ), \n            Convert.ToInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, \n            Convert.ToInt64( ds, null ), \n            Convert.ToInt64( ds, geMean ), \n            Convert.ToInt64( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, \n            Convert.ToSByte( ds, null ), \n            Convert.ToSByte( ds, geMean ), \n            Convert.ToSByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, \n            Convert.ToSingle( ds, null ), \n            Convert.ToSingle( ds, geMean ), \n            Convert.ToSingle( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, \n            Convert.ToUInt16( ds, null ), \n            Convert.ToUInt16( ds, geMean ), \n            Convert.ToUInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, \n            Convert.ToUInt32( ds, null ), \n            Convert.ToUInt32( ds, geMean ), \n            Convert.ToUInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, \n            Convert.ToUInt64( ds, null ), \n            Convert.ToUInt64( ds, geMean ), \n            Convert.ToUInt64( ds, median ) );\n    }\n   \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods &quot; +\n            &quot;<br>generates the following output. The example &quot; +\n            &quot;displays the values <br>returned by the methods, &quot; +\n            &quot;using several IFormatProvider objects.<br>&quot; );\n          \n        DataSet ds1 = new DataSet( \n            10.5, 22.2, 45.9, 88.7, 156.05, 297.6 );\n        DisplayDataSet( ds1 );\n          \n        DataSet ds2 = new DataSet( \n            359999.95, 425000, 499999.5, 775000, 1695000 );\n        DisplayDataSet( ds2 );\n    }\n}\n\n/*\nThis example of the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:04:12 2003-05-13 15:03:28 2003-05-13 15:03:35\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 07:39:08 2003-05-20 22:28:45 2003-05-19 09:55:48\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert.ToXXX_Object_IFP#1\">using namespace System;\nusing namespace System::Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum class AverageType : short\n{\n   None = 0,\n   GeometricMean = 1,\n   ArithmeticMean = 2,\n   Median = 3\n};\n\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\nref class AverageInfo: public IFormatProvider\n{\nprotected:\n   AverageType AvgType;\n\npublic:\n\n   // Specify the type of averaging in the constructor.\n   AverageInfo( AverageType avgType )\n   {\n      this-&gt;AvgType = avgType;\n   }\n\n\n   // This method returns a reference to the containing object \n   // if an object of AverageInfo type is requested. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      if ( argType == AverageInfo::typeid)\n            return this;\n      else\n            return (Object^)0;\n   }\n\n\n   property AverageType TypeOfAverage \n   {\n\n      // Use this property to set or get the type of averaging.\n      AverageType get()\n      {\n         return this-&gt;AvgType;\n      }\n\n      void set( AverageType value )\n      {\n         this-&gt;AvgType = value;\n      }\n\n   }\n\n};\n\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \nref class DataSet: public IConvertible\n{\nprivate:\n   static Object^ null = nullptr;\n\nprotected:\n   ArrayList^ data;\n   AverageInfo^ defaultProvider;\n\n   // This method unboxes a boxed double.\n   double UnBoxDouble( Object^ obj )\n   {\n      return  *static_cast&lt;double^&gt;(obj);\n   }\n\n\npublic:\n\n   // Construct the object and add an initial list of values.\n   // Create a default format provider.\n   DataSet( ... array&lt;Double&gt;^values )\n   {\n      data = gcnew ArrayList( (Array^)values );\n      defaultProvider = gcnew AverageInfo( AverageType::ArithmeticMean );\n   }\n\n\n   // Add additional values with this method.\n   int Add( double value )\n   {\n      data-&gt;Add( value );\n      return data-&gt;Count;\n   }\n\n\n   property double Item[ int ]\n   {\n\n      // Get, set, and add values with this indexer property.\n      double get( int index )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  return UnBoxDouble( data[ index ] );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.get] Index out of range.&quot; );\n      }\n\n      void set( int index, double value )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  data[ index ] = value;\n         else\n         if ( index == data-&gt;Count )\n                  data-&gt;Add( value );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.set] Index out of range.&quot; );\n      }\n\n   }\n\n   property int Count \n   {\n\n      // This property returns the number of elements in the object.\n      int get()\n      {\n         return data-&gt;Count;\n      }\n\n   }\n\nprotected:\n\n   // This method calculates the average of the object&#39;s elements.\n   double Average( AverageType avgType )\n   {\n      double SumProd;\n      if ( data-&gt;Count == 0 )\n            return 0.0;\n\n      switch ( avgType )\n      {\n         case AverageType::GeometricMean:\n            SumProd = 1.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd *= UnBoxDouble( data[ Index ] );\n            \n            // This calculation will not fail with negative \n            // elements.\n            return Math::Sign( SumProd ) * Math::Pow( Math::Abs( SumProd ), 1.0 / data-&gt;Count );\n\n         case AverageType::ArithmeticMean:\n            SumProd = 0.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd += UnBoxDouble( data[ Index ] );\n            return SumProd / data-&gt;Count;\n\n         case AverageType::Median:\n            if ( data-&gt;Count % 2 == 0 )\n                        return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) + UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] )) / 2.0;\n            else\n                        return UnBoxDouble( data[ data-&gt;Count / 2 ] );\n\n         default:\n            return 0.0;\n      }\n   }\n\n\n   // Get the AverageInfo object from the caller&#39;s format provider,\n   // or use the local default.\n   AverageInfo^ GetAverageInfo( IFormatProvider^ provider )\n   {\n      AverageInfo^ avgInfo = nullptr;\n      if ( provider != nullptr )\n            avgInfo = static_cast&lt;AverageInfo^&gt;(provider-&gt;GetFormat( AverageInfo::typeid ));\n\n      if ( avgInfo == nullptr )\n            return defaultProvider;\n      else\n            return avgInfo;\n   }\n\n\n   // Calculate the average and limit the range.\n   double CalcNLimitAverage( double min, double max, IFormatProvider^ provider )\n   {\n      \n      // Get the format provider and calculate the average.\n      AverageInfo^ avgInfo = GetAverageInfo( provider );\n      double avg = Average( avgInfo-&gt;TypeOfAverage );\n      \n      // Limit the range, based on the minimum and maximum values \n      // for the type.\n      return avg &gt; max ? max : avg &lt; min ? min : avg;\n   }\n\n\npublic:\n\n   // The following elements are required by IConvertible.\n   // None of these conversion functions throw exceptions. When\n   // the data is out of range for the type, the appropriate\n   // MinValue or MaxValue is used.\n   virtual TypeCode GetTypeCode()\n   {\n      return TypeCode::Object;\n   }\n\n   virtual bool ToBoolean( IFormatProvider^ provider )\n   {\n      \n      // ToBoolean is false if the dataset is empty.\n      if ( data-&gt;Count &lt;= 0 )\n            return false;\n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      else\n      \n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      if ( AverageType::Median == GetAverageInfo( provider )-&gt;TypeOfAverage )\n      {\n         if ( data-&gt;Count % 2 == 0 )\n                  return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0 || UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] ) != 0.0);\n         else\n                  return UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0;\n      }\n      // For arithmetic or geometric mean averaging, ToBoolean is \n      // true if any element of the dataset is nonzero.  \n      else\n      {\n         for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n            if ( UnBoxDouble( data[ Index ] ) != 0.0 )\n                        return true;\n         return false;\n      }\n   }\n\n   virtual Byte ToByte( IFormatProvider^ provider )\n   {\n      return Convert::ToByte( CalcNLimitAverage( Byte::MinValue, Byte::MaxValue, provider ) );\n   }\n\n   virtual Char ToChar( IFormatProvider^ provider )\n   {\n      return Convert::ToChar( Convert::ToUInt16( CalcNLimitAverage( Char::MinValue, Char::MaxValue, provider ) ) );\n   }\n\n\n   // Convert to DateTime by adding the calculated average as \n   // seconds to the current date and time. A valid DateTime is \n   // always returned.\n   virtual DateTime ToDateTime( IFormatProvider^ provider )\n   {\n      double seconds = Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n      try\n      {\n         return DateTime::Now.AddSeconds( seconds );\n      }\n      catch ( ArgumentOutOfRangeException^ ) \n      {\n         return seconds &lt; 0.0 ? DateTime::MinValue : DateTime::MaxValue;\n      }\n\n   }\n\n   virtual Decimal ToDecimal( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Decimal.MinValue and \n      // Decimal.MaxValue to invalid Decimal values, so the \n      // following limits must be used.\n      return Convert::ToDecimal( CalcNLimitAverage(  -79228162514264330000000000000.0, 79228162514264330000000000000.0, provider ) );\n   }\n\n   virtual double ToDouble( IFormatProvider^ provider )\n   {\n      return Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n   }\n\n   virtual short ToInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToInt16( CalcNLimitAverage( Int16::MinValue, Int16::MaxValue, provider ) );\n   }\n\n   virtual int ToInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToInt32( CalcNLimitAverage( Int32::MinValue, Int32::MaxValue, provider ) );\n   }\n\n   virtual __int64 ToInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Int64.MinValue and \n      // Int64.MaxValue to invalid Int64 values, so the following \n      // limits must be used.\n      return Convert::ToInt64( CalcNLimitAverage(  -9223372036854775000, 9223372036854775000, provider ) );\n   }\n\n   virtual signed char ToSByte( IFormatProvider^ provider )\n   {\n      return Convert::ToSByte( CalcNLimitAverage( SByte::MinValue, SByte::MaxValue, provider ) );\n   }\n\n   virtual float ToSingle( IFormatProvider^ provider )\n   {\n      return Convert::ToSingle( CalcNLimitAverage( Single::MinValue, Single::MaxValue, provider ) );\n   }\n\n   virtual UInt16 ToUInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt16( CalcNLimitAverage( UInt16::MinValue, UInt16::MaxValue, provider ) );\n   }\n\n   virtual UInt32 ToUInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt32( CalcNLimitAverage( UInt32::MinValue, UInt32::MaxValue, provider ) );\n   }\n\n   virtual UInt64 ToUInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds UInt64.MaxValue to an invalid\n      // UInt64 value, so the following limit must be used.\n      return Convert::ToUInt64( CalcNLimitAverage( 0, 18446744073709550000.0, provider ) );\n   }\n\n   virtual Object^ ToType( Type^ conversionType, IFormatProvider^ provider )\n   {\n      return Convert::ChangeType( Average( GetAverageInfo( provider )-&gt;TypeOfAverage ), conversionType );\n   }\n\n   virtual String^ ToString( IFormatProvider^ provider )\n   {\n      AverageType avgType = GetAverageInfo( provider )-&gt;TypeOfAverage;\n      return String::Format( &quot;( {0}: {1:G10} )&quot;, avgType, Average( avgType ) );\n   }\n\n};\n\n\n// Display a DataSet with three different format providers.\nvoid DisplayDataSet( DataSet^ ds )\n{\n   IFormatProvider^ null = nullptr;\n   String^ fmt = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n   AverageInfo^ median = gcnew AverageInfo( AverageType::Median );\n   AverageInfo^ geMean = gcnew AverageInfo( AverageType::GeometricMean );\n   \n   // Display the dataset elements.\n   if ( ds-&gt;Count &gt; 0 )\n   {\n      Console::Write( &quot;<br>DataSet: [{0}&quot;, ds-&gt;Item[ 0 ] );\n      for ( int iX = 1; iX &lt; ds-&gt;Count; iX++ )\n         Console::Write( &quot;, {0}&quot;, ds-&gt;Item[ iX ] );\n      Console::WriteLine( &quot;]<br>&quot; );\n   }\n\n   Console::WriteLine( fmt, &quot;Convert::&quot;, &quot;Default&quot;, &quot;Geometric Mean&quot;, &quot;Median&quot; );\n   Console::WriteLine( fmt, &quot;---------&quot;, &quot;-------&quot;, &quot;--------------&quot;, &quot;------&quot; );\n   Console::WriteLine( fmt, &quot;ToBoolean&quot;, Convert::ToBoolean( ds, null ), Convert::ToBoolean( ds, geMean ), Convert::ToBoolean( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToByte&quot;, Convert::ToByte( ds, null ), Convert::ToByte( ds, geMean ), Convert::ToByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToChar&quot;, Convert::ToChar( ds, null ), Convert::ToChar( ds, geMean ), Convert::ToChar( ds, median ) );\n   Console::WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot;\n   &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, &quot;ToDateTime&quot;, Convert::ToDateTime( ds, null ), Convert::ToDateTime( ds, geMean ), Convert::ToDateTime( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDecimal&quot;, Convert::ToDecimal( ds, null ), Convert::ToDecimal( ds, geMean ), Convert::ToDecimal( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDouble&quot;, Convert::ToDouble( ds, null ), Convert::ToDouble( ds, geMean ), Convert::ToDouble( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt16&quot;, Convert::ToInt16( ds, null ), Convert::ToInt16( ds, geMean ), Convert::ToInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt32&quot;, Convert::ToInt32( ds, null ), Convert::ToInt32( ds, geMean ), Convert::ToInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt64&quot;, Convert::ToInt64( ds, null ), Convert::ToInt64( ds, geMean ), Convert::ToInt64( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSByte&quot;, Convert::ToSByte( ds, null ), Convert::ToSByte( ds, geMean ), Convert::ToSByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSingle&quot;, Convert::ToSingle( ds, null ), Convert::ToSingle( ds, geMean ), Convert::ToSingle( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt16&quot;, Convert::ToUInt16( ds, null ), Convert::ToUInt16( ds, geMean ), Convert::ToUInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt32&quot;, Convert::ToUInt32( ds, null ), Convert::ToUInt32( ds, geMean ), Convert::ToUInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt64&quot;, Convert::ToUInt64( ds, null ), Convert::ToUInt64( ds, geMean ), Convert::ToUInt64( ds, median ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods &quot;\n   &quot;<br>generates the following output. The example &quot;\n   &quot;displays the values <br>returned by the methods, &quot;\n   &quot;using several IFormatProvider objects.<br>&quot; );\n   \n   // To call a [ParamArray] method in C++, you cannot just\n   // list the parameters, you need to build an array.\n   array&lt;Double&gt;^dataElem = gcnew array&lt;Double&gt;(6);\n   dataElem[ 0 ] = 10.5;\n   dataElem[ 1 ] = 22.2;\n   dataElem[ 2 ] = 45.9;\n   dataElem[ 3 ] = 88.7;\n   dataElem[ 4 ] = 156.05;\n   dataElem[ 5 ] = 297.6;\n   DataSet^ ds1 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds1 );\n   dataElem = gcnew array&lt;Double&gt;(5);\n   dataElem[ 0 ] = 359999.95;\n   dataElem[ 1 ] = 425000;\n   dataElem[ 2 ] = 499999.5;\n   dataElem[ 3 ] = 775000;\n   dataElem[ 4 ] = 1695000;\n   DataSet^ ds2 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds2 );\n}\n\n/*\nThis example of the Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:30:23 2003-05-13 15:29:39 2003-05-13 15:29:47\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 08:05:19 2003-05-20 22:54:57 2003-05-19 10:21:59\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToXXX_Object_IFP#1\">Imports System.Collections\n\nModule IConvertibleProviderDemo\n\n    &#39; Define the types of averaging available in the class \n    &#39; implementing IConvertible.\n    Enum AverageType as Short\n        None = 0\n        GeometricMean = 1\n        ArithmeticMean = 2\n        Median = 3\n    End Enum\n\n    &#39; Pass an instance of this class to methods that require an \n    &#39; IFormatProvider. The class instance determines the type of \n    &#39; average to calculate.\n    Public Class AverageInfo\n        Implements IFormatProvider\n\n        Protected  AvgType      As AverageType\n\n        &#39; Specify the type of averaging in the constructor.\n        Public Sub New( avgType As AverageType )\n            Me.AvgType = avgType\n        End Sub\n\n        &#39; This method returns a reference to the containing object \n        &#39; if an object of AverageInfo type is requested. \n        Public Function GetFormat( argType As Type ) As Object _\n            Implements IFormatProvider.GetFormat\n\n            If argType Is GetType( AverageInfo ) Then\n                Return Me\n            Else\n                Return Nothing\n            End If\n        End Function \n\n        &#39; Use this property to set or get the type of averaging.\n        Public Property TypeOfAverage( ) As AverageType\n            Get\n                Return Me.AvgType\n            End Get\n            Set( ByVal value as AverageType )\n                Me.AvgType = value\n            End Set\n        End Property\n    End Class \n\n    &#39; This class encapsulates an array of Double values and implements \n    &#39; the IConvertible interface. Most of the IConvertible methods \n    &#39; return an average of the array elements in one of three types: \n    &#39; arithmetic mean, geometric mean, or median. \n    Public Class DataSet\n        Implements IConvertible\n\n        Protected data              As ArrayList\n        Protected defaultProvider   As AverageInfo\n           \n        &#39; Construct the object and add an initial list of values.\n        &#39; Create a default format provider.\n        Public Sub New( ParamArray values( ) As Double )\n            data = New ArrayList( values )\n            defaultProvider = New AverageInfo( _\n                AverageType.ArithmeticMean )  \n        End Sub\n           \n        &#39; Add additional values with this method.\n        Public Function Add( value As Double ) As Integer\n            data.Add( value )\n            Return data.Count\n        End Function\n           \n        &#39; Get, set, and add values with this indexer property.\n        Default Public Property Item(index As Integer) As Double\n            Get\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    Return System.Convert.ToDouble( data( index ) )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.get] Index out of range.&quot; )\n                End If\n            End Get\n            Set\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    data( index ) = value\n                 \n                ElseIf index = data.Count Then\n                    data.Add( value )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.set] Index out of range.&quot; )\n                End If\n            End Set\n        End Property\n          \n        &#39; This property returns the number of elements in the object.\n        Public ReadOnly Property Count( ) As Integer\n            Get\n                Return data.Count\n            End Get\n        End Property\n\n        &#39; This method calculates the average of the object&#39;s elements.\n        Protected Function Average( ByVal avgType As AverageType ) As Double\n\n            Dim SumProd As Double \n            Dim Index   As Integer\n\n            If data.Count = 0 Then Return 0.0\n\n            Select Case avgType\n                \n                Case AverageType.GeometricMean\n\n                    SumProd = 1.0\n                    For Index = 0 To data.Count - 1\n                        SumProd *= data( Index )\n                    Next Index\n                    \n                    &#39; This calculation will not fail with negative \n                    &#39; elements.\n                    Return Math.Sign( SumProd ) * Math.Pow( _\n                        Math.Abs( SumProd ), 1.0 / data.Count )\n\n                Case AverageType.ArithmeticMean\n\n                    SumProd = 0.0\n                    For Index = 0 To data.Count - 1\n                        SumProd += data( Index )\n                    Next Index\n\n                    Return SumProd / data.Count \n\n                Case AverageType.Median\n\n                    If data.Count Mod 2 = 0 Then\n                        Return ( data( data.Count \\ 2 ) + _\n                            data( data.Count \\ 2 - 1 ) ) / 2.0\n                    Else\n                        Return data( data.Count \\ 2 ) \n                    End If\n            End Select\n        End Function\n\n        &#39; Get the AverageInfo object from the caller&#39;s format \n        &#39; provider, or use the local default.\n        Protected Function GetAverageInfo( _\n            provider As IFormatProvider ) As AverageInfo\n\n            Dim avgInfo As AverageInfo = Nothing\n\n            If Not provider Is Nothing Then\n                avgInfo = provider.GetFormat( GetType( AverageInfo ) )\n            End If\n\n            Return IIf( avgInfo Is Nothing, defaultProvider, avgInfo )\n            \n        End Function           \n\n        &#39; Calculate the average and limit the range.\n        Protected Function CalcNLimitAverage( min As Double, _\n            max As Double, provider as IFormatProvider ) As Double\n\n            &#39; Get the format provider and calculate the average.\n            Dim avgInfo As AverageInfo = GetAverageInfo( provider )\n            Dim avg As Double = Average( avgInfo.TypeOfAverage )\n\n            &#39; Limit the range, based on the minimum and maximum values \n            &#39; for the type.\n            Return IIf( avg &gt; max, max, IIf( avg &lt; min, min, avg ) )\n\n        End Function\n\n        &#39; The following elements are required by IConvertible.\n\n        &#39; None of these conversion functions throw exceptions. When\n        &#39; the data is out of range for the type, the appropriate\n        &#39; MinValue or MaxValue is used.\n        Public Function GetTypeCode( ) As TypeCode _\n            Implements IConvertible.GetTypeCode\n            Return TypeCode.Object\n        End Function\n\n        Function ToBoolean( ByVal provider As IFormatProvider ) As _\n            Boolean Implements IConvertible.ToBoolean\n\n            &#39; ToBoolean is false if the dataset is empty.\n            If data.Count &lt;= 0 Then\n                Return False\n\n            &#39; For median averaging, ToBoolean is true if any \n            &#39; non-discarded elements are nonzero.\n            ElseIf AverageType.Median = _\n                GetAverageInfo( provider ).TypeOfAverage Then\n\n                If data.Count Mod 2 = 0 Then\n                    Return ( data( data.Count \\ 2 ) &lt;&gt; 0.0 Or _\n                        data( data.Count \\ 2 - 1 ) &lt;&gt; 0.0 )\n                Else\n                    Return data( data.Count \\ 2 ) &lt;&gt; 0.0\n                End If\n\n            &#39; For arithmetic or geometric mean averaging, ToBoolean is \n            &#39; true if any element of the dataset is nonzero.  \n            Else\n                Dim Index As Integer\n                For Index = 0 To data.Count - 1\n                    If data( Index ) &lt;&gt; 0.0 Then Return True\n                Next Index\n                Return False\n            End If\n        End Function\n\n        Function ToByte( ByVal provider As IFormatProvider ) As Byte _\n            Implements IConvertible.ToByte\n            Return Convert.ToByte( CalcNLimitAverage( _\n                Byte.MinValue, Byte.MaxValue, provider ) )\n        End Function\n\n        Function ToChar( ByVal provider As IFormatProvider ) As Char _\n            Implements IConvertible.ToChar\n            Return Convert.ToChar( Convert.ToUInt16( _\n                CalcNLimitAverage( 0.0, &amp;HFFFF, provider ) ) )\n        End Function\n\n        &#39; Convert to DateTime by adding the calculated average as \n        &#39; seconds to the current date and time. A valid DateTime is \n        &#39; always returned.\n        Function ToDateTime( ByVal provider As IFormatProvider ) As _\n            DateTime Implements IConvertible.ToDateTime\n            Dim seconds As Double = Average( _\n                GetAverageInfo( provider ).TypeOfAverage )\n            Try\n                Return DateTime.Now.AddSeconds( seconds )\n            Catch ex As ArgumentOutOfRangeException \n                Return IIf( seconds &lt; 0.0, DateTime.MinValue, _\n                    DateTime.MaxValue )\n            End Try\n        End Function\n\n        Function ToDecimal( ByVal provider As IFormatProvider ) As _\n            Decimal Implements IConvertible.ToDecimal\n\n            &#39; The Double conversion rounds Decimal.MinValue and\n            &#39; Decimal.MaxValue to invalid Decimal values, so the \n            &#39; following limits must be used.\n            Return Convert.ToDecimal( CalcNLimitAverage( _\n                -79228162514264330000000000000.0, _\n                79228162514264330000000000000.0, provider ) )\n        End Function\n\n        Function ToDouble( ByVal provider As IFormatProvider) As _\n            Double Implements IConvertible.ToDouble\n            Return Average( GetAverageInfo( provider ).TypeOfAverage )\n        End Function\n\n        Function ToInt16( ByVal provider As IFormatProvider ) As _\n            Short Implements IConvertible.ToInt16\n            Return Convert.ToInt16( CalcNLimitAverage( _\n                Int16.MinValue, Int16.MaxValue, provider ) )\n        End Function\n\n        Function ToInt32( ByVal provider As IFormatProvider ) As _\n            Integer Implements IConvertible.ToInt32\n            Return Convert.ToInt32( CalcNLimitAverage( _\n                Int32.MinValue, Int32.MaxValue, provider ) )\n        End Function\n\n        Function ToInt64( ByVal provider As IFormatProvider ) As Long _\n            Implements IConvertible.ToInt64\n\n            &#39; The Double conversion rounds Int64.MinValue and \n            &#39; Int64.MaxValue to invalid Long values, so the following \n            &#39; limits must be used.\n            Return Convert.ToInt64( CalcNLimitAverage( _\n                -9223372036854775000, 9223372036854775000, provider ) )\n        End Function\n\n        Function ToSByte( ByVal provider As IFormatProvider ) As _\n            SByte Implements IConvertible.ToSByte\n\n            &#39; SByte.MinValue and SByte.MaxValue are not defined in\n            &#39; Visual Basic.\n            Return Convert.ToSByte( CalcNLimitAverage( _\n                -128, 127, provider ) )\n        End Function\n\n        Function ToSingle( ByVal provider As IFormatProvider ) As _\n            Single Implements IConvertible.ToSingle\n            Return Convert.ToSingle( CalcNLimitAverage( _\n                Single.MinValue, Single.MaxValue, provider ) )\n        End Function\n\n        Function ToUInt16( ByVal provider As IFormatProvider ) As _\n            UInt16 Implements IConvertible.ToUInt16\n\n            &#39; UInt16.MinValue and UInt16.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt16( CalcNLimitAverage( _\n                0, &amp;HFFFF, provider ) )\n        End Function\n\n        Function ToUInt32( ByVal provider As IFormatProvider ) As _\n            UInt32 Implements IConvertible.ToUInt32\n\n            &#39; UInt32.MinValue and UInt32.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt32( CalcNLimitAverage( _\n                0, 4294967295, provider ) )\n        End Function\n\n        Function ToUInt64( ByVal provider As IFormatProvider ) As _\n            UInt64 Implements IConvertible.ToUInt64\n\n            &#39; UInt64.MinValue and UInt64.MaxValue are not defined in \n            &#39; Visual Basic. The Double conversion would have rounded \n            &#39; UInt64.MaxValue, so the following limit must be used.\n            Return Convert.ToUInt64( CalcNLimitAverage( _\n                0, 18446744073709550000.0, provider ) )\n        End Function\n\n        Function ToType( ByVal conversionType As Type, _\n            ByVal provider As IFormatProvider) As Object _\n            Implements IConvertible.ToType\n            Return Convert.ChangeType( Average( GetAverageInfo( _\n                provider ).TypeOfAverage ), conversionType )\n        End Function\n\n        Overloads Function ToString( ByVal provider As IFormatProvider _\n            ) As String Implements IConvertible.ToString\n            Dim avgType as AverageType = _\n                GetAverageInfo( provider ).TypeOfAverage\n            Return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, _\n                Average( avgType ) )\n        End Function\n    End Class\n   \n    &#39; Display a DataSet with three different format providers.\n    Sub DisplayDataSet( ds As DataSet )\n\n        Dim fmt    As String      = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;\n        Dim median As AverageInfo = New AverageInfo( AverageType.Median )\n        Dim geMean As AverageInfo = _\n            New AverageInfo( AverageType.GeometricMean )\n        Dim iX     As Integer\n\n        &#39; Display the dataset elements.\n        If ds.Count &gt; 0 Then\n            Console.Write( vbCrLf &amp; &quot;DataSet: [{0}&quot;, ds( 0 ) )\n            For iX = 1 To ds.Count - 1\n                Console.Write( &quot;, {0}&quot;, ds( iX ) )\n            Next iX\n            Console.WriteLine( &quot;]&quot; &amp; vbCrLf )\n        End If\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, _\n            &quot;Geometric Mean&quot;, &quot;Median&quot; )\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, _\n            &quot;--------------&quot;, &quot;------&quot; )\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, _\n            Convert.ToBoolean( ds, Nothing ), _\n            Convert.ToBoolean( ds, geMean ), _\n            Convert.ToBoolean( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToByte&quot;, _\n            Convert.ToByte( ds, Nothing ), _\n            Convert.ToByte( ds, geMean ), _\n            Convert.ToByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToChar&quot;, _\n            Convert.ToChar( ds, Nothing ), _\n            Convert.ToChar( ds, geMean ), _\n            Convert.ToChar( ds, median ) )\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; &amp; _\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, _\n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, Nothing ), _\n            Convert.ToDateTime( ds, geMean ), _\n            Convert.ToDateTime( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, _\n            Convert.ToDecimal( ds, Nothing ), _\n            Convert.ToDecimal( ds, geMean ), _\n            Convert.ToDecimal( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, _\n            Convert.ToDouble( ds, Nothing ), _\n            Convert.ToDouble( ds, geMean ), _\n            Convert.ToDouble( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, _\n            Convert.ToInt16( ds, Nothing ), _\n            Convert.ToInt16( ds, geMean ), _\n            Convert.ToInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, _\n            Convert.ToInt32( ds, Nothing ), _\n            Convert.ToInt32( ds, geMean ), _\n            Convert.ToInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, _\n            Convert.ToInt64( ds, Nothing ), _\n            Convert.ToInt64( ds, geMean ), _\n            Convert.ToInt64( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, _\n            Convert.ToSByte( ds, Nothing ), _\n            Convert.ToSByte( ds, geMean ), _\n            Convert.ToSByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, _\n            Convert.ToSingle( ds, Nothing ), _\n            Convert.ToSingle( ds, geMean ), _\n            Convert.ToSingle( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, _\n            Convert.ToUInt16( ds, Nothing ), _\n            Convert.ToUInt16( ds, geMean ), _\n            Convert.ToUInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, _\n            Convert.ToUInt32( ds, Nothing ), _\n            Convert.ToUInt32( ds, geMean ), _\n            Convert.ToUInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, _\n            Convert.ToUInt64( ds, Nothing ), _\n            Convert.ToUInt64( ds, geMean ), _\n            Convert.ToUInt64( ds, median ) )\n    End Sub\n   \n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Convert.To&lt;Type&gt;( Object, &quot; &amp; _\n            &quot;IFormatProvider ) methods &quot; &amp; vbCrLf &amp; &quot;generates &quot; &amp; _\n            &quot;the following output. The example displays the &quot; &amp; _\n            &quot;values &quot; &amp; vbCrLf &amp; &quot;returned by the methods, &quot; &amp; _\n            &quot;using several IFormatProvider objects.&quot; &amp; vbCrLf )\n          \n        Dim ds1 As New DataSet( 10.5, 22.2, 45.9, 88.7, 156.05, 297.6 )\n        DisplayDataSet( ds1 )\n          \n        Dim ds2 As New DataSet( _\n            359999.95, 425000, 499999.5, 775000, 1695000 )\n        DisplayDataSet( ds2 )\n    End Sub \nEnd Module \n\n&#39; This example of the Convert.To&lt;Type&gt;( Object, IFormatProvider ) methods\n&#39; generates the following output. The example displays the values\n&#39; returned by the methods, using several IFormatProvider objects.\n&#39; \n&#39; DataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       103                  59                  67\n&#39; ToChar                         g                   ;                   C\n&#39; ToDateTime   2003-05-13 14:52:53 2003-05-13 14:52:09 2003-05-13 14:52:17\n&#39; ToDecimal       103.491666666667    59.4332135445164                67.3\n&#39; ToDouble        103.491666666667    59.4332135445164                67.3\n&#39; ToInt16                      103                  59                  67\n&#39; ToInt32                      103                  59                  67\n&#39; ToInt64                      103                  59                  67\n&#39; ToSByte                      103                  59                  67\n&#39; ToSingle                103.4917            59.43321                67.3\n&#39; ToUInt16                     103                  59                  67\n&#39; ToUInt32                     103                  59                  67\n&#39; ToUInt64                     103                  59                  67\n&#39; \n&#39; DataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       255                 255                 255\n&#39; ToChar                         ?                   ?                   ?\n&#39; ToDateTime   2003-05-22 07:27:49 2003-05-20 22:17:27 2003-05-19 09:44:29\n&#39; ToDecimal              750999.89    631577.237188435            499999.5\n&#39; ToDouble               750999.89    631577.237188435            499999.5\n&#39; ToInt16                    32767               32767               32767\n&#39; ToInt32                   751000              631577              500000\n&#39; ToInt64                   751000              631577              500000\n&#39; ToSByte                      127                 127                 127\n&#39; ToSingle                750999.9            631577.3            499999.5\n&#39; ToUInt16                   65535               65535               65535\n&#39; ToUInt32                  751000              631577              500000\n&#39; ToUInt64                  751000              631577              500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.int16#System_Int16_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts string representations of 16-bit integers with the <code>ToInt16</code> method, using an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToSInts_String#3\">// Example of the Convert::ToInt16( String* ) and \n// Convert::ToInt16( String*, IFormatProvider* ) methods.\nusing namespace System;\nusing namespace System::Globalization;\nconst __wchar_t * protoFmt = L&quot;{0,-20}{1,-20}{2}&quot;;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\nvoid ConvertToInt16( String^ numericStr, IFormatProvider^ provider )\n{\n   Object^ defaultValue;\n   Object^ providerValue;\n   \n   // Convert numericStr to Int16 without a format provider.\n   try\n   {\n      defaultValue = Convert::ToInt16( numericStr );\n   }\n   catch ( Exception^ ex ) \n   {\n      defaultValue = GetExceptionType( ex );\n   }\n\n   \n   // Convert numericStr to Int16 with a format provider.\n   try\n   {\n      providerValue = Convert::ToInt16( numericStr, provider );\n   }\n   catch ( Exception^ ex ) \n   {\n      providerValue = GetExceptionType( ex );\n   }\n\n   Console::WriteLine( gcnew String( protoFmt ), numericStr, defaultValue, providerValue );\n}\n\nint main()\n{\n   \n   // Create a NumberFormatInfo object and set several of its\n   // properties that apply to numbers.\n   NumberFormatInfo^ provider = gcnew NumberFormatInfo;\n   \n   // These properties affect the conversion.\n   provider-&gt;NegativeSign = &quot;neg &quot;;\n   provider-&gt;PositiveSign = &quot;pos &quot;;\n   \n   // These properties do not affect the conversion.\n   // The input string cannot have decimal and group separators.\n   provider-&gt;NumberDecimalSeparator = &quot;.&quot;;\n   provider-&gt;NumberGroupSeparator = &quot;,&quot;;\n   array&lt;Int32&gt;^sizes = {3};\n   provider-&gt;NumberGroupSizes = sizes;\n   provider-&gt;NumberNegativePattern = 0;\n   Console::WriteLine( &quot;This example of<br>&quot;\n   &quot;  Convert::ToInt16( String* ) and <br>&quot;\n   &quot;  Convert::ToInt16( String*, IFormatProvider* ) &quot;\n   &quot;<br>generates the following output. It converts &quot;\n   &quot;several strings to <br>short values, using &quot;\n   &quot;default formatting or a NumberFormatInfo object.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;String to convert&quot;, &quot;Default/exception&quot;, &quot;Provider/exception&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;-----------------&quot;, &quot;-----------------&quot;, &quot;------------------&quot; );\n   \n   // Convert strings, with and without an IFormatProvider.\n   ConvertToInt16( &quot;12345&quot;, provider );\n   ConvertToInt16( &quot;+12345&quot;, provider );\n   ConvertToInt16( &quot;pos 12345&quot;, provider );\n   ConvertToInt16( &quot;-12345&quot;, provider );\n   ConvertToInt16( &quot;neg 12345&quot;, provider );\n   ConvertToInt16( &quot;12345.&quot;, provider );\n   ConvertToInt16( &quot;12,345&quot;, provider );\n   ConvertToInt16( &quot;(12345)&quot;, provider );\n   ConvertToInt16( &quot;32768&quot;, provider );\n   ConvertToInt16( &quot;-32769&quot;, provider );\n}\n\n/*\nThis example of\n  Convert::ToInt16( String* ) and\n  Convert::ToInt16( String*, IFormatProvider* )\ngenerates the following output. It converts several strings to\nshort values, using default formatting or a NumberFormatInfo object.\n\nString to convert   Default/exception   Provider/exception\n-----------------   -----------------   ------------------\n12345               12345               12345\n+12345              12345               FormatException\npos 12345           FormatException     12345\n-12345              -12345              FormatException\nneg 12345           FormatException     -12345\n12345.              FormatException     FormatException\n12,345              FormatException     FormatException\n(12345)             FormatException     FormatException\n32768               OverflowException   OverflowException\n-32769              OverflowException   FormatException\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToSInts_String#3\">// Example of the Convert.ToInt16( string ) and \n// Convert.ToInt16( string, IFormatProvider ) methods.\nusing System;\nusing System.Globalization;\n\nclass ToInt16ProviderDemo\n{\n    static string format = &quot;{0,-20}{1,-20}{2}&quot;;\n\n     // Get the exception type name; remove the namespace prefix.\n    static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    static void ConvertToInt16( string numericStr, \n        IFormatProvider provider )\n    {\n        object defaultValue;\n        object providerValue;\n\n        // Convert numericStr to Int16 without a format provider.\n        try\n        {\n            defaultValue = Convert.ToInt16( numericStr );\n        }\n        catch( Exception ex )\n        {\n            defaultValue = GetExceptionType( ex );\n        }\n\n        // Convert numericStr to Int16 with a format provider.\n        try\n        {\n            providerValue = Convert.ToInt16( numericStr, provider );\n        }\n        catch( Exception ex )\n        {\n            providerValue = GetExceptionType( ex );\n        }\n\n        Console.WriteLine( format, numericStr, \n            defaultValue, providerValue );\n    }\n\n    public static void Main( )\n    {\n        // Create a NumberFormatInfo object and set several of its\n        // properties that apply to numbers.\n        NumberFormatInfo provider = new NumberFormatInfo();\n\n        // These properties affect the conversion.\n        provider.NegativeSign = &quot;neg &quot;;\n        provider.PositiveSign = &quot;pos &quot;;\n\n        // These properties do not affect the conversion.\n        // The input string cannot have decimal and group separators.\n        provider.NumberDecimalSeparator = &quot;.&quot;;\n        provider.NumberGroupSeparator = &quot;,&quot;;\n        provider.NumberGroupSizes = new int[ ] { 3 };\n        provider.NumberNegativePattern = 0;\n\n        Console.WriteLine(&quot;This example of<br>&quot; +\n            &quot;  Convert.ToInt16( string ) and <br>&quot; +\n            &quot;  Convert.ToInt16( string, IFormatProvider ) &quot; +\n            &quot;<br>generates the following output. It converts &quot; +\n            &quot;several strings to <br>short values, using &quot; +\n            &quot;default formatting or a NumberFormatInfo object.<br>&quot; );\n        Console.WriteLine( format, &quot;String to convert&quot;, \n            &quot;Default/exception&quot;, &quot;Provider/exception&quot; );\n        Console.WriteLine( format, &quot;-----------------&quot;, \n            &quot;-----------------&quot;, &quot;------------------&quot; );\n\n        // Convert strings, with and without an IFormatProvider.\n        ConvertToInt16( &quot;12345&quot;, provider );\n        ConvertToInt16( &quot;+12345&quot;, provider );\n        ConvertToInt16( &quot;pos 12345&quot;, provider );\n        ConvertToInt16( &quot;-12345&quot;, provider );\n        ConvertToInt16( &quot;neg 12345&quot;, provider );\n        ConvertToInt16( &quot;12345.&quot;, provider );\n        ConvertToInt16( &quot;12,345&quot;, provider );\n        ConvertToInt16( &quot;(12345)&quot;, provider );\n        ConvertToInt16( &quot;32768&quot;, provider );\n        ConvertToInt16( &quot;-32769&quot;, provider );\n    }\n}\n\n/*\nThis example of\n  Convert.ToInt16( string ) and\n  Convert.ToInt16( string, IFormatProvider )\ngenerates the following output. It converts several strings to\nshort values, using default formatting or a NumberFormatInfo object.\n\nString to convert   Default/exception   Provider/exception\n-----------------   -----------------   ------------------\n12345               12345               12345\n+12345              12345               FormatException\npos 12345           FormatException     12345\n-12345              -12345              FormatException\nneg 12345           FormatException     -12345\n12345.              FormatException     FormatException\n12,345              FormatException     FormatException\n(12345)             FormatException     FormatException\n32768               OverflowException   OverflowException\n-32769              OverflowException   FormatException\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSInts_String#3\">&#39; Example of the Convert.ToInt16( String ) and \n&#39; Convert.ToInt16( String, IFormatProvider ) methods.\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nModule ToInt16ProviderDemo\n\n    Dim format As String = &quot;{0,-20}{1,-20}{2}&quot;\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    Sub ConvertToInt16( numericStr As String, _\n        provider As IFormatProvider )\n\n        Dim defaultValue    As Object\n        Dim providerValue   As Object\n\n        &#39; Convert numericStr to Int16 without a format provider.\n        Try\n            defaultValue = Convert.ToInt16( numericStr )\n        Catch ex As Exception\n            defaultValue = GetExceptionType( ex )\n        End Try\n\n        &#39; Convert numericStr to Int16 with a format provider.\n        Try\n            providerValue = Convert.ToInt16( numericStr, provider )\n        Catch ex As Exception\n            providerValue = GetExceptionType( ex )\n        End Try\n\n        Console.WriteLine( format, numericStr, _\n            defaultValue, providerValue )\n    End Sub\n\n    Sub Main( )\n\n        &#39; Create a NumberFormatInfo object and set several of its\n        &#39; properties that apply to numbers.\n        Dim provider  As NumberFormatInfo = new NumberFormatInfo( )\n\n        &#39; These properties affect the conversion.\n        provider.NegativeSign = &quot;neg &quot;\n        provider.PositiveSign = &quot;pos &quot;\n\n        &#39; These properties do not affect the conversion.\n        &#39; The input string cannot have decimal and group separators.\n        provider.NumberDecimalSeparator = &quot;.&quot;\n        provider.NumberGroupSeparator = &quot;,&quot;\n        provider.NumberGroupSizes = New Integer( ) { 3 }\n        provider.NumberNegativePattern = 0\n\n        Console.WriteLine( &quot;This example of&quot; &amp; vbCrLf &amp; _\n            &quot;  Convert.ToInt16( String ) and &quot; &amp; vbCrLf &amp; _\n            &quot;  Convert.ToInt16( String, IFormatProvider ) &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output. It &quot; &amp; _\n            &quot;converts several strings to &quot; &amp; vbCrLf &amp; &quot;Short &quot; &amp; _\n            &quot;values, using default formatting &quot; &amp; _\n            &quot;or a NumberFormatInfo object.&quot; &amp; vbCrLf )\n        Console.WriteLine( format, &quot;String to convert&quot;, _\n            &quot;Default/exception&quot;, &quot;Provider/exception&quot; )\n        Console.WriteLine( format, &quot;-----------------&quot;, _\n            &quot;-----------------&quot;, &quot;------------------&quot; )\n\n        &#39; Convert strings, with and without an IFormatProvider.\n        ConvertToInt16( &quot;12345&quot;, provider )\n        ConvertToInt16( &quot;+12345&quot;, provider )\n        ConvertToInt16( &quot;pos 12345&quot;, provider )\n        ConvertToInt16( &quot;-12345&quot;, provider )\n        ConvertToInt16( &quot;neg 12345&quot;, provider )\n        ConvertToInt16( &quot;12345.&quot;, provider )\n        ConvertToInt16( &quot;12,345&quot;, provider )\n        ConvertToInt16( &quot;(12345)&quot;, provider )\n        ConvertToInt16( &quot;32768&quot;, provider )\n        ConvertToInt16( &quot;-32769&quot;, provider )\n    End Sub \nEnd Module \n\n&#39; This example of\n&#39;   Convert.ToInt16( String ) and\n&#39;   Convert.ToInt16( String, IFormatProvider )\n&#39; generates the following output. It converts several strings to\n&#39; Short values, using default formatting or a NumberFormatInfo object.\n&#39; \n&#39; String to convert   Default/exception   Provider/exception\n&#39; -----------------   -----------------   ------------------\n&#39; 12345               12345               12345\n&#39; +12345              12345               FormatException\n&#39; pos 12345           FormatException     12345\n&#39; -12345              -12345              FormatException\n&#39; neg 12345           FormatException     -12345\n&#39; 12345.              FormatException     FormatException\n&#39; 12,345              FormatException     FormatException\n&#39; (12345)             FormatException     FormatException\n&#39; 32768               OverflowException   OverflowException\n&#39; -32769              OverflowException   FormatException\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt16_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (string value, int fromBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fromBase</code> is not 2, 8, 10, or 16.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  </p>\n<p> -or-  </p>\n<p> <code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>fromBase</code> is 16, you can prefix the number specified by the <code>value</code> parameter with &quot;0x&quot; or &quot;0X&quot;.  </p>\n<p> Because the negative sign is not supported for non-base 10 numeric representations, the ToInt16 method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> data type is converted to an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> value without the method throwing an exception. The following example increments <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">System.Int16.MaxValue</a> by one, converts the resulting number to its hexadecimal string representation, and then calls the ToInt16 method. Instead of throwing an exception, the method displays the message, &quot;0x8000 converts to -32768.&quot;  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#5\">     &#39; Create a hexadecimal value out of range of the Int16 type.\n     Dim value As String = Convert.ToString(CInt(Short.MaxValue) + 1, 16)\n     &#39; Convert it back to a number.\n     Try\n        Dim number As Short = Convert.ToInt16(value, 16)\n        Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number)\n     Catch e As OverflowException\n        Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a 16-bit integer.&quot;, value)\n     End Try   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#5\">     // Create a hexadecimal value out of range of the Int16 type.\n     string value = Convert.ToString((int) short.MaxValue + 1, 16);\n     // Convert it back to a number.\n     try\n     {\n        short number = Convert.ToInt16(value, 16);\n        Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number);\n     }\n     catch (OverflowException)\n     {\n        Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a 16-bit integer.&quot;, value);\n     }   \n</code></pre><p> When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#6\">      &#39; Create a hexadecimal value out of range of the Short type.\n      Dim sourceNumber As Integer = CInt(Short.MaxValue) + 1\n      Dim isNegative As Boolean = (Math.Sign(sourceNumber) = -1)\n      Dim value As String = Convert.ToString(sourceNumber, 16)\n      Dim targetNumber As Short\n      Try\n         targetNumber = Convert.ToInt16(value, 16)\n         If Not isNegative And ((targetNumber And &amp;H8000) &lt;&gt; 0) Then\n            Throw New OverflowException()\n         Else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber)\n         End If    \n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a 16-bit integer.&quot;, value)\n      End Try \n      &#39; Displays the following to the console:\n      &#39;    Unable to convert &#39;0x8000&#39; to a 16-bit integer.     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#6\">      // Create a hexadecimal value out of range of the Short type.\n      int sourceNumber = (int) short.MaxValue + 1;\n      bool isNegative = (Math.Sign(sourceNumber) == -1);\n      string value = Convert.ToString(sourceNumber, 16);\n      short targetNumber;\n      try\n      {\n         targetNumber = Convert.ToInt16(value, 16);\n         if (! isNegative &amp;&amp; ((targetNumber &amp; 0x8000) != 0))\n            throw new OverflowException();\n         else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a 16-bit integer.&quot;, value);\n      } \n      // Displays the following to the console:\n      //    Unable to convert &#39;0x8000&#39; to a 16-bit integer.     \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt16#14\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] hexStrings = { &quot;8000&quot;, &quot;0FFF&quot;, &quot;f000&quot;, &quot;00A30&quot;, &quot;D&quot;, &quot;-13&quot;, \n                              &quot;9AC61&quot;, &quot;GAD&quot; };\n      foreach (string hexString in hexStrings)\n      {\n         try {\n            short number = Convert.ToInt16(hexString, 16);\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1:N0}.&quot;, hexString, number);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the correct format for a hexadecimal number.&quot;, \n                              hexString);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of an Int16.&quot;, hexString);\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is invalid in base 16.&quot;, hexString);\n         }\n      }                                            \n   }\n}\n// The example displays the following output:\n//       Converted &#39;8000&#39; to -32,768.\n//       Converted &#39;0FFF&#39; to 4,095.\n//       Converted &#39;f000&#39; to -4,096.\n//       Converted &#39;00A30&#39; to 2,608.\n//       Converted &#39;D&#39; to 13.\n//       &#39;-13&#39; is invalid in base 16.\n//       &#39;9AC61&#39; is outside the range of an Int16.\n//       &#39;GAD&#39; is not in the correct format for a hexadecimal number.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt16#14\">Module Example\n   Public Sub Main()\n      Dim hexStrings() As String = { &quot;8000&quot;, &quot;0FFF&quot;, &quot;f000&quot;, &quot;00A30&quot;, &quot;D&quot;, _\n                                     &quot;-13&quot;, &quot;9AC61&quot;, &quot;GAD&quot; }\n      For Each hexString As String In hexStrings\n         Try\n            Dim number As Short = Convert.ToInt16(hexString, 16)\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1:N0}.&quot;, hexString, number)\n         Catch e As FormatException\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the correct format for a hexadecimal number.&quot;, _\n                              hexString)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of an Int16.&quot;, hexString)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;&#39;{0}&#39; is invalid in base 16.&quot;, hexString)\n         End Try\n      Next                                            \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;8000&#39; to -32,768.\n&#39;       Converted &#39;0FFF&#39; to 4,095.\n&#39;       Converted &#39;f000&#39; to -4,096.\n&#39;       Converted &#39;00A30&#39; to 2,608.\n&#39;       Converted &#39;D&#39; to 13.\n&#39;       &#39;-13&#39; is invalid in base 16.\n&#39;       &#39;9AC61&#39; is outside the range of an Int16.\n&#39;       &#39;GAD&#39; is not in the correct format for a hexadecimal number.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values <code>true</code> and <code>false</code> to integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag,\n                        Convert.ToInt32(falseFlag));\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag,\n                        Convert.ToInt32(trueFlag));\n      // The example displays the following output:\n      //       False converts to 0.\n      //       True converts to 1.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, _\n                        Convert.ToInt32(falseFlag))\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, _\n                        Convert.ToInt32(trueFlag))\n      &#39; The example displays the following output:\n      &#39;       False converts to 0.\n      &#39;       True converts to 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of bytes to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#2\">      byte[] bytes = { Byte.MinValue, 14, 122, Byte.MaxValue};\n      int result;\n      \n      foreach (byte byteValue in bytes)\n      {\n         result = Convert.ToInt32(byteValue);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           byteValue.GetType().Name, byteValue,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //       Converted the Byte value 0 to the Int32 value 0.\n      //       Converted the Byte value 14 to the Int32 value 14.\n      //       Converted the Byte value 122 to the Int32 value 122.\n      //       Converted the Byte value 255 to the Int32 value 255.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#2\">      Dim bytes() As Byte = { Byte.MinValue, 14, 122, Byte.MaxValue}\n      Dim result As Integer\n      \n      For Each byteValue As Byte In bytes\n         result = Convert.ToInt32(byteValue)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           byteValue.GetType().Name, byteValue, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the Byte value 0 to the Int32 value 0.\n      &#39;       Converted the Byte value 14 to the Int32 value 14.\n      &#39;       Converted the Byte value 122 to the Int32 value 122.\n      &#39;       Converted the Byte value 255 to the Int32 value 255.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToInt32 method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the <code>value</code> argument. If <code>value</code> is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#3\">      char[] chars = { &#39;a&#39;, &#39;z&#39;, &#39;\\u0007&#39;, &#39;\\u03FF&#39;,\n                       &#39;\\u7FFF&#39;, &#39;\\uFFFE&#39; };\n      int result;\n                              \n      foreach (char ch in chars)\n      {\n         try {\n            result = Convert.ToInt32(ch);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              ch.GetType().Name, ch,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;Unable to convert u+{0} to an Int32.&quot;,\n                              ((int)ch).ToString(&quot;X4&quot;));\n         }\n      }   \n      // The example displays the following output:\n      //       Converted the Char value &#39;a&#39; to the Int32 value 97.\n      //       Converted the Char value &#39;z&#39; to the Int32 value 122.\n      //       Converted the Char value &#39;&#39; to the Int32 value 7.\n      //       Converted the Char value &#39;?&#39; to the Int32 value 1023.\n      //       Converted the Char value &#39;?&#39; to the Int32 value 32767.\n      //       Converted the Char value &#39;?&#39; to the Int32 value 65534.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#3\">      Dim chars() As Char = { &quot;a&quot;c, &quot;z&quot;c, ChrW(7), ChrW(1023), _\n                              ChrW(Short.MaxValue), ChrW(&amp;hFFFE) }\n      Dim result As Integer\n                              \n      For Each ch As Char in chars\n         Try\n            result = Convert.ToInt32(ch)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              ch.GetType().Name, ch, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;Unable to convert u+{0} to an Int32.&quot;, _\n                              AscW(ch).ToString(&quot;X4&quot;))\n         End Try\n      Next   \n      &#39; The example displays the following output:\n      &#39;       Converted the Char value &#39;a&#39; to the Int32 value 97.\n      &#39;       Converted the Char value &#39;z&#39; to the Int32 value 122.\n      &#39;       Converted the Char value &#39;&#39; to the Int32 value 7.\n      &#39;       Converted the Char value &#39;?&#39; to the Int32 value 1023.\n      &#39;       Converted the Char value &#39;?&#39; to the Int32 value 32767.\n      &#39;       Converted the Char value &#39;?&#39; to the Int32 value 65534.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#4\">      decimal[] values= { Decimal.MinValue, -1034.23m, -12m, 0m, 147m,\n                          199.55m, 9214.16m, Decimal.MaxValue };\n      int result;\n      \n      foreach (decimal value in values)\n      {\n         try {\n            result = Convert.ToInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;,\n                              value);\n         }   \n      }                                  \n      // The example displays the following output:\n      //    -79228162514264337593543950335 is outside the range of the Int32 type.\n      //    Converted the Decimal value &#39;-1034.23&#39; to the Int32 value -1034.\n      //    Converted the Decimal value &#39;-12&#39; to the Int32 value -12.\n      //    Converted the Decimal value &#39;0&#39; to the Int32 value 0.\n      //    Converted the Decimal value &#39;147&#39; to the Int32 value 147.\n      //    Converted the Decimal value &#39;199.55&#39; to the Int32 value 200.\n      //    Converted the Decimal value &#39;9214.16&#39; to the Int32 value 9214.\n      //    79228162514264337593543950335 is outside the range of the Int32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#4\">      Dim values() As Decimal = { Decimal.MinValue, -1034.23d, -12d, 0d, 147d, _\n                                  199.55d, 9214.16d, Decimal.MaxValue }\n      Dim result As Integer\n      \n      For Each value As Decimal In values\n         Try\n            result = Convert.ToInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;, _\n                              value)\n         End Try   \n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    -79228162514264337593543950335 is outside the range of the Int32 type.\n      &#39;    Converted the Decimal value &#39;-1034.23&#39; to the Int32 value -1034.\n      &#39;    Converted the Decimal value &#39;-12&#39; to the Int32 value -12.\n      &#39;    Converted the Decimal value &#39;0&#39; to the Int32 value 0.\n      &#39;    Converted the Decimal value &#39;147&#39; to the Int32 value 147.\n      &#39;    Converted the Decimal value &#39;199.55&#39; to the Int32 value 200.\n      &#39;    Converted the Decimal value &#39;9214.16&#39; to the Int32 value 9214.\n      &#39;    79228162514264337593543950335 is outside the range of the Int32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to aninteger.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#5\">      double[] values= { Double.MinValue, -1.38e10, -1023.299, -12.98,\n                         0, 9.113e-16, 103.919, 17834.191, Double.MaxValue };\n      int result;\n      \n      foreach (double value in values)\n      {\n         try {\n            result = Convert.ToInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;, value);\n         }   \n      }                                 \n      //    -1.79769313486232E+308 is outside the range of the Int32 type.\n      //    -13800000000 is outside the range of the Int32 type.\n      //    Converted the Double value &#39;-1023.299&#39; to the Int32 value -1023.\n      //    Converted the Double value &#39;-12.98&#39; to the Int32 value -13.\n      //    Converted the Double value &#39;0&#39; to the Int32 value 0.\n      //    Converted the Double value &#39;9.113E-16&#39; to the Int32 value 0.\n      //    Converted the Double value &#39;103.919&#39; to the Int32 value 104.\n      //    Converted the Double value &#39;17834.191&#39; to the Int32 value 17834.\n      //    1.79769313486232E+308 is outside the range of the Int32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#5\">      Dim values() As Double = { Double.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Double.MaxValue }\n      Dim result As Integer\n      \n      For Each value As Double In values\n         Try\n            result = Convert.ToInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;, value)\n         End Try   \n      Next                                 \n      &#39;    -1.79769313486232E+308 is outside the range of the Int32 type.\n      &#39;    -13800000000 is outside the range of the Int32 type.\n      &#39;    Converted the Double value &#39;-1023.299&#39; to the Int32 value -1023.\n      &#39;    Converted the Double value &#39;-12.98&#39; to the Int32 value -13.\n      &#39;    Converted the Double value &#39;0&#39; to the Int32 value 0.\n      &#39;    Converted the Double value &#39;9.113E-16&#39; to the Int32 value 0.\n      &#39;    Converted the Double value &#39;103.919&#39; to the Int32 value 104.\n      &#39;    Converted the Double value &#39;17834.191&#39; to the Int32 value 17834.\n      &#39;    1.79769313486232E+308 is outside the range of the Int32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of 16-bit signed integers to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#6\">      short[] numbers= { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue };\n      int result;\n      \n      foreach (short number in numbers)\n      {\n         result = Convert.ToInt32(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the Int16 value -32768 to a Int32 value -32768.\n      //    Converted the Int16 value -1 to a Int32 value -1.\n      //    Converted the Int16 value 0 to a Int32 value 0.\n      //    Converted the Int16 value 121 to a Int32 value 121.\n      //    Converted the Int16 value 340 to a Int32 value 340.\n      //    Converted the Int16 value 32767 to a Int32 value 32767.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#6\">      Dim numbers() As Short = { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue }\n      Dim result As Integer\n      \n      For Each number As Short In numbers\n         result = Convert.ToInt32(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Int16 value -32768 to a Int32 value -32768.\n      &#39;    Converted the Int16 value -1 to a Int32 value -1.\n      &#39;    Converted the Int16 value 0 to a Int32 value 0.\n      &#39;    Converted the Int16 value 121 to a Int32 value 121.\n      &#39;    Converted the Int16 value 340 to a Int32 value 340.\n      &#39;    Converted the Int16 value 32767 to a Int32 value 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 32-bit signed integer; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of long integers to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#7\">      long[] numbers = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue };\n      int result;\n      foreach (long number in numbers)\n      {\n         try {\n            result = Convert.ToInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int64 value -9223372036854775808 is outside the range of the Int32 type.\n      //    Converted the Int64 value -1 to the Int32 value -1.\n      //    Converted the Int64 value 0 to the Int32 value 0.\n      //    Converted the Int64 value 121 to the Int32 value 121.\n      //    Converted the Int64 value 340 to the Int32 value 340.\n      //    The Int64 value 9223372036854775807 is outside the range of the Int32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#7\">      Dim numbers() As Long = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue }\n      Dim result As Integer\n      For Each number As Long In numbers\n         Try\n            result = Convert.ToInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int64 value -9223372036854775808 is outside the range of the Int32 type.\n      &#39;    Converted the Int64 value -1 to the Int32 value -1.\n      &#39;    Converted the Int64 value 0 to the Int32 value 0.\n      &#39;    Converted the Int64 value 121 to the Int32 value 121.\n      &#39;    Converted the Int64 value 340 to the Int32 value 340.\n      &#39;    The Int64 value 9223372036854775807 is outside the range of the Int32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the  <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If<code>value</code> is not <code>null</code>, this method wraps a call to the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a>implementation of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#8\">      object[] values = { true, -12, 163, 935, &#39;x&#39;, new DateTime(2009, 5, 12),\n                          &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;,\n                          &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2, 16.3e42};\n      int result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No conversion to an Int32 exists for the {0} value {1}.&quot;,\n                              value.GetType().Name, value);\n                              \n         }\n      }                           \n      // The example displays the following output:\n      //    Converted the Boolean value True to the Int32 value 1.\n      //    Converted the Int32 value -12 to the Int32 value -12.\n      //    Converted the Int32 value 163 to the Int32 value 163.\n      //    Converted the Int32 value 935 to the Int32 value 935.\n      //    Converted the Char value x to the Int32 value 120.\n      //    No conversion to an Int32 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      //    Converted the String value 104 to the Int32 value 104.\n      //    The String value 103.0 is not in a recognizable format.\n      //    Converted the String value -1 to the Int32 value -1.\n      //    The String value 1.00e2 is not in a recognizable format.\n      //    The String value One is not in a recognizable format.\n      //    Converted the Double value 100 to the Int32 value 100.\n      //    The Double value 1.63E+43 is outside the range of the Int32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#8\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, #5/12/2009#, _\n                                 &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2, 16.3e42}\n      Dim result As Integer\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to an Int32 exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to the Int32 value 1.\n      &#39;    Converted the Int32 value -12 to the Int32 value -12.\n      &#39;    Converted the Int32 value 163 to the Int32 value 163.\n      &#39;    Converted the Int32 value 935 to the Int32 value 935.\n      &#39;    Converted the Char value x to the Int32 value 120.\n      &#39;    No conversion to an Int32 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      &#39;    Converted the String value 104 to the Int32 value 104.\n      &#39;    The String value 103.0 is not in a recognizable format.\n      &#39;    Converted the String value -1 to the Int32 value -1.\n      &#39;    The String value 1.00e2 is not in a recognizable format.\n      &#39;    The String value One is not in a recognizable format.\n      &#39;    Converted the Double value 100 to the Int32 value 100.\n      &#39;    The Double value 1.63E+43 is outside the range of the Int32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of signed bytes to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#9\">      sbyte[] numbers = { SByte.MinValue, -1, 0, 10, SByte.MaxValue };\n      int result;\n      \n      foreach (sbyte number in numbers)\n      {\n         result = Convert.ToInt32(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           number.GetType().Name, number,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //       Converted the SByte value -128 to the Int32 value -128.\n      //       Converted the SByte value -1 to the Int32 value -1.\n      //       Converted the SByte value 0 to the Int32 value 0.\n      //       Converted the SByte value 10 to the Int32 value 10.\n      //       Converted the SByte value 127 to the Int32 value 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#9\">      Dim numbers() As SByte = { SByte.MinValue, -1, 0, 10, SByte.MaxValue }\n      Dim result As Integer\n      \n      For Each number As SByte In numbers\n         result = Convert.ToInt32(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the SByte value -128 to the Int32 value -128.\n      &#39;       Converted the SByte value -1 to the Int32 value -1.\n      &#39;       Converted the SByte value 0 to the Int32 value 0.\n      &#39;       Converted the SByte value 10 to the Int32 value 10.\n      &#39;       Converted the SByte value 127 to the Int32 value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 32-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#10\">      float[] values= { Single.MinValue, -1.38e10f, -1023.299f, -12.98f,\n                        0f, 9.113e-16f, 103.919f, 17834.191f, Single.MaxValue };\n      int result;\n      \n      foreach (float value in values)\n      {\n         try {\n            result = Convert.ToInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    -3.40282346638529E+38 is outside the range of the Int32 type.\n      //    -13799999488 is outside the range of the Int32 type.\n      //    Converted the Double value -1023.29901123047 to the Int32 value -1023.\n      //    Converted the Double value -12.9799995422363 to the Int32 value -13.\n      //    Converted the Double value 0 to the Int32 value 0.\n      //    Converted the Double value 9.11299983940444E-16 to the Int32 value 0.\n      //    Converted the Double value 103.918998718262 to the Int32 value 104.\n      //    Converted the Double value 17834.19140625 to the Int32 value 17834.\n      //    3.40282346638529E+38 is outside the range of the Int32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#10\">      Dim values() As Single = { Single.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Single.MaxValue }\n      Dim result As Integer\n      \n      For Each value As Single In values\n         Try\n            result = Convert.ToInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    -3.40282346638529E+38 is outside the range of the Int32 type.\n      &#39;    -13799999488 is outside the range of the Int32 type.\n      &#39;    Converted the Double value -1023.29901123047 to the Int32 value -1023.\n      &#39;    Converted the Double value -12.9799995422363 to the Int32 value -13.\n      &#39;    Converted the Double value 0 to the Int32 value 0.\n      &#39;    Converted the Double value 9.11299983940444E-16 to the Int32 value 0.\n      &#39;    Converted the Double value 103.918998718262 to the Int32 value 104.\n      &#39;    Converted the Double value 17834.19140625 to the Int32 value 17834.\n      &#39;    3.40282346638529E+38 is outside the range of the Int32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToInt32 method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_System_String_\" data-linktype=\"relative-path\">System.Int32.Parse(String)</a> method.<code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in a numeric string array to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#11\">      string[] values = { &quot;One&quot;, &quot;1.34e28&quot;, &quot;-26.87&quot;, &quot;-18&quot;, &quot;-6.00&quot;,\n                          &quot; 0&quot;, &quot;137&quot;, &quot;1601.9&quot;, Int32.MaxValue.ToString() };\n      int result;\n      \n      foreach (string value in values)\n      {\n         try {\n            result = Convert.ToInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;, value);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    The String value &#39;One&#39; is not in a recognizable format.\n      //    The String value &#39;1.34e28&#39; is not in a recognizable format.\n      //    The String value &#39;-26.87&#39; is not in a recognizable format.\n      //    Converted the String value &#39;-18&#39; to the Int32 value -18.\n      //    The String value &#39;-6.00&#39; is not in a recognizable format.\n      //    Converted the String value &#39; 0&#39; to the Int32 value 0.\n      //    Converted the String value &#39;137&#39; to the Int32 value 137.\n      //    The String value &#39;1601.9&#39; is not in a recognizable format.\n      //    Converted the String value &#39;2147483647&#39; to the Int32 value 2147483647.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#11\">      Dim values() As String = { &quot;One&quot;, &quot;1.34e28&quot;, &quot;-26.87&quot;, &quot;-18&quot;, &quot;-6.00&quot;, _\n                                 &quot; 0&quot;, &quot;137&quot;, &quot;1601.9&quot;, Int32.MaxValue.ToString() }\n      Dim result As Integer\n      \n      For Each value As String In values\n         Try\n            result = Convert.ToInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int32 type.&quot;, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    The String value &#39;One&#39; is not in a recognizable format.\n      &#39;    The String value &#39;1.34e28&#39; is not in a recognizable format.\n      &#39;    The String value &#39;-26.87&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39;-18&#39; to the Int32 value -18.\n      &#39;    The String value &#39;-6.00&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39; 0&#39; to the Int32 value 0.\n      &#39;    Converted the String value &#39;137&#39; to the Int32 value 137.\n      &#39;    The String value &#39;1601.9&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39;2147483647&#39; to the Int32 value 2147483647.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of 16-bit unsigned integers to an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#12\">      ushort[] numbers = { UInt16.MinValue, 121, 340, UInt16.MaxValue };\n      int result;\n      foreach (ushort number in numbers)\n      {\n         try {\n            result = Convert.ToInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt16 value 0 to the Int32 value 0.\n      //    Converted the UInt16 value 121 to the Int32 value 121.\n      //    Converted the UInt16 value 340 to the Int32 value 340.\n      //    Converted the UInt16 value 65535 to the Int32 value 65535.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#12\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 340, UInt16.MaxValue }\n      Dim result As Integer\n      For Each number As UShort In numbers\n         Try\n            result = Convert.ToInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt16 value 0 to the Int32 value 0.\n      &#39;    Converted the UInt16 value 121 to the Int32 value 121.\n      &#39;    Converted the UInt16 value 340 to the Int32 value 340.\n      &#39;    Converted the UInt16 value 65535 to the Int32 value 65535.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned integers to a signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#13\">      uint[] numbers = { UInt32.MinValue, 121, 340, UInt32.MaxValue };\n      int result;\n      foreach (uint number in numbers)\n      {\n         try {\n            result = Convert.ToInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt32 value 0 to the Int32 value 0.\n      //    Converted the UInt32 value 121 to the Int32 value 121.\n      //    Converted the UInt32 value 340 to the Int32 value 340.\n      //    The UInt32 value 4294967295 is outside the range of the Int32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#13\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 340, UInt32.MaxValue }\n      Dim result As Integer\n      For Each number As UInteger In numbers\n         Try\n            result = Convert.ToInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt32 value 0 to the Int32 value 0.\n      &#39;    Converted the UInt32 value 121 to the Int32 value 121.\n      &#39;    Converted the UInt32 value 340 to the Int32 value 340.\n      &#39;    The UInt32 value 4294967295 is outside the range of the Int32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned long integers to a signed integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#14\">      ulong[] numbers = { UInt64.MinValue, 121, 340, UInt64.MaxValue };\n      int result;\n      foreach (ulong number in numbers)\n      {\n         try {\n            result = Convert.ToInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt64 value 0 to a Int32 value 0.\n      //    Converted the UInt64 value 121 to a Int32 value 121.\n      //    Converted the UInt64 value 340 to a Int32 value 340.\n      //    The UInt64 value 18446744073709551615 is outside the range of the Int32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#14\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 340, UInt64.MaxValue }\n      Dim result As Integer\n      For Each number As ULong In numbers\n         Try\n            result = Convert.ToInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int32 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value 0 to a Int32 value 0.\n      &#39;    Converted the UInt64 value 121 to a Int32 value 121.\n      &#39;    Converted the UInt64 value 340 to a Int32 value 340.\n      &#39;    The UInt64 value 18446744073709551615 is outside the range of the Int32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> and a class that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Objects of the class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> hold an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. An object of each class is passed to the <code>ToInt32</code> method. This method returns an average of the array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values, using the object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> to determine how to calculate the average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToXXX_Object_IFP#1\">using System;\nusing System.Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum AverageType : short\n{\n    None = 0,\n    GeometricMean = 1,\n    ArithmeticMean = 2,\n    Median = 3\n};\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\npublic class AverageInfo : IFormatProvider\n{\n    protected AverageType AvgType;\n\n    // Specify the type of averaging in the constructor.\n    public AverageInfo( AverageType avgType )\n    {\n        this.AvgType = avgType;\n    }\n\n    // This method returns a reference to the containing object \n    // if an object of AverageInfo type is requested. \n    public object GetFormat( Type argType )\n    {\n        if ( argType == typeof( AverageInfo ) )\n            return this;\n        else\n            return null;\n    }\n\n    // Use this property to set or get the type of averaging.\n    public AverageType TypeOfAverage        \n    {\n        get { return this.AvgType; }\n        set { this.AvgType = value; }\n    }\n}\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \npublic class DataSet : IConvertible\n{\n    protected ArrayList     data;\n    protected AverageInfo   defaultProvider;\n        \n    // Construct the object and add an initial list of values.\n    // Create a default format provider.\n    public DataSet( params double[ ] values )\n    {\n        data = new ArrayList( values );\n        defaultProvider = \n            new AverageInfo( AverageType.ArithmeticMean );\n    }\n        \n    // Add additional values with this method.\n    public int Add( double value )\n    {\n        data.Add( value );\n        return data.Count;\n    }\n        \n    // Get, set, and add values with this indexer property.\n    public double this[ int index ]        \n    {\n        get\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                return (double)data[ index ];\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.get] Index out of range.&quot; );\n        }\n        set\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                data[ index ] = value;\n\n            else if( index == data.Count )\n                data.Add( value );\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.set] Index out of range.&quot; );\n        }\n    }\n        \n    // This property returns the number of elements in the object.\n    public int Count        \n    {\n        get { return data.Count; }\n    }\n\n    // This method calculates the average of the object&#39;s elements.\n    protected double Average( AverageType avgType )\n    {\n        double  SumProd;\n\n        if( data.Count == 0 ) \n            return 0.0;\n\n        switch( avgType )\n        {\n            case AverageType.GeometricMean:\n\n                SumProd = 1.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd *= (double)data[ Index ];\n                \n                // This calculation will not fail with negative \n                // elements.\n                return Math.Sign( SumProd ) * Math.Pow( \n                    Math.Abs( SumProd ), 1.0 / data.Count );\n\n            case AverageType.ArithmeticMean:\n\n                SumProd = 0.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd += (double)data[ Index ];\n\n                return SumProd / data.Count;\n\n            case AverageType.Median:\n\n                if( data.Count % 2 == 0 )\n                    return ( (double)data[ data.Count / 2 ] + \n                        (double)data[ data.Count / 2 - 1 ] ) / 2.0;\n                else\n                    return (double)data[ data.Count / 2 ];\n\n            default:\n                return 0.0;\n        }\n    }\n\n    // Get the AverageInfo object from the caller&#39;s format provider,\n    // or use the local default.\n    protected AverageInfo GetAverageInfo( IFormatProvider provider )\n    {\n        AverageInfo avgInfo = null;\n\n        if( provider != null )\n            avgInfo = (AverageInfo)provider.GetFormat( \n                typeof( AverageInfo ) );\n\n        if ( avgInfo == null )\n            return defaultProvider;\n        else\n            return avgInfo;\n    }\n\n    // Calculate the average and limit the range.\n    protected double CalcNLimitAverage( double min, double max, \n        IFormatProvider provider )\n    {\n        // Get the format provider and calculate the average.\n        AverageInfo avgInfo = GetAverageInfo( provider );\n        double avg = Average( avgInfo.TypeOfAverage );\n\n        // Limit the range, based on the minimum and maximum values \n        // for the type.\n        return avg &gt; max ? max : avg &lt; min ? min : avg;\n\n    }\n\n    // The following elements are required by IConvertible.\n\n    // None of these conversion functions throw exceptions. When\n    // the data is out of range for the type, the appropriate\n    // MinValue or MaxValue is used.\n    public TypeCode GetTypeCode( )\n    {\n        return TypeCode.Object;\n    }\n\n    public bool ToBoolean( IFormatProvider provider )\n    {\n        // ToBoolean is false if the dataset is empty.\n        if( data.Count &lt;= 0 )\n            return false;\n\n        // For median averaging, ToBoolean is true if any \n        // non-discarded elements are nonzero.\n        else if( AverageType.Median == \n            GetAverageInfo( provider ).TypeOfAverage )\n        {\n            if (data.Count % 2 == 0 )\n                return ( (double)data[ data.Count / 2 ] != 0.0 || \n                    (double)data[ data.Count / 2 - 1 ] != 0.0 );\n            else\n                return (double)data[ data.Count / 2 ] != 0.0;\n        }\n\n        // For arithmetic or geometric mean averaging, ToBoolean is \n        // true if any element of the dataset is nonzero.  \n        else\n        {\n            for( int Index = 0; Index &lt; data.Count; Index++ )\n                if( (double)data[ Index ] != 0.0 ) \n                    return true;\n            return false;\n        }\n    }\n\n    public byte ToByte( IFormatProvider provider )\n    {\n        return Convert.ToByte( CalcNLimitAverage( \n            Byte.MinValue, Byte.MaxValue, provider ) );\n    }\n\n    public char ToChar( IFormatProvider provider )\n    {\n        return Convert.ToChar( Convert.ToUInt16( CalcNLimitAverage( \n            Char.MinValue, Char.MaxValue, provider ) ) );\n    }\n\n    // Convert to DateTime by adding the calculated average as \n    // seconds to the current date and time. A valid DateTime is \n    // always returned.\n    public DateTime ToDateTime( IFormatProvider provider )\n    {\n        double seconds = \n            Average( GetAverageInfo( provider ).TypeOfAverage );\n        try\n        {\n            return DateTime.Now.AddSeconds( seconds );\n        }\n        catch( ArgumentOutOfRangeException )\n        {\n            return seconds &lt; 0.0 ? DateTime.MinValue : DateTime.MaxValue;\n        }\n    }\n\n    public decimal ToDecimal( IFormatProvider provider )\n    {\n        // The Double conversion rounds Decimal.MinValue and \n        // Decimal.MaxValue to invalid Decimal values, so the \n        // following limits must be used.\n        return Convert.ToDecimal( CalcNLimitAverage( \n            -79228162514264330000000000000.0, \n            79228162514264330000000000000.0, provider ) );\n    }\n\n    public double ToDouble( IFormatProvider provider )\n    {\n        return Average( GetAverageInfo(provider).TypeOfAverage );\n    }\n\n    public short ToInt16( IFormatProvider provider )\n    {\n        return Convert.ToInt16( CalcNLimitAverage( \n            Int16.MinValue, Int16.MaxValue, provider ) );\n    }\n\n    public int ToInt32( IFormatProvider provider )\n    {\n        return Convert.ToInt32( CalcNLimitAverage( \n            Int32.MinValue, Int32.MaxValue, provider ) );\n    }\n\n    public long ToInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds Int64.MinValue and \n        // Int64.MaxValue to invalid Int64 values, so the following \n        // limits must be used.\n        return Convert.ToInt64( CalcNLimitAverage( \n            -9223372036854775000, 9223372036854775000, provider ) );\n    }\n\n    public SByte ToSByte( IFormatProvider provider )\n    {\n        return Convert.ToSByte( CalcNLimitAverage( \n            SByte.MinValue, SByte.MaxValue, provider ) );\n    }\n\n    public float ToSingle( IFormatProvider provider )\n    {\n        return Convert.ToSingle( CalcNLimitAverage( \n            Single.MinValue, Single.MaxValue, provider ) );\n    }\n\n    public UInt16 ToUInt16( IFormatProvider provider )\n    {\n        return Convert.ToUInt16( CalcNLimitAverage( \n            UInt16.MinValue, UInt16.MaxValue, provider ) );\n    }\n\n    public UInt32 ToUInt32( IFormatProvider provider )\n    {\n        return Convert.ToUInt32( CalcNLimitAverage( \n            UInt32.MinValue, UInt32.MaxValue, provider ) );\n    }\n\n    public UInt64 ToUInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds UInt64.MaxValue to an invalid\n        // UInt64 value, so the following limit must be used.\n        return Convert.ToUInt64( CalcNLimitAverage( \n            0, 18446744073709550000.0, provider ) );\n    }\n\n    public object ToType( Type conversionType, \n        IFormatProvider provider )\n    {\n        return Convert.ChangeType( Average( \n            GetAverageInfo( provider ).TypeOfAverage ), \n            conversionType );\n    }\n\n    public string ToString( IFormatProvider provider )\n    {\n        AverageType avgType = GetAverageInfo( provider ).TypeOfAverage;\n        return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, \n            Average( avgType ) );\n    }\n}\n   \nclass IConvertibleProviderDemo\n{\n    // Display a DataSet with three different format providers.\n    public static void DisplayDataSet( DataSet ds )\n    {\n        string      fmt    = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n        AverageInfo median = new AverageInfo( AverageType.Median );\n        AverageInfo geMean = \n            new AverageInfo( AverageType.GeometricMean );\n\n         // Display the dataset elements.\n        if( ds.Count &gt; 0 )\n        {\n            Console.Write( &quot;<br>DataSet: [{0}&quot;, ds[ 0 ] );\n            for( int iX = 1; iX &lt; ds.Count; iX++ )\n                Console.Write( &quot;, {0}&quot;, ds[ iX ] );\n            Console.WriteLine( &quot;]<br>&quot; );\n        }\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, \n            &quot;Geometric Mean&quot;, &quot;Median&quot;);\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, \n            &quot;--------------&quot;, &quot;------&quot;);\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, \n            Convert.ToBoolean( ds, null ), \n            Convert.ToBoolean( ds, geMean ), \n            Convert.ToBoolean( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToByte&quot;, \n            Convert.ToByte( ds, null ), \n            Convert.ToByte( ds, geMean ), \n            Convert.ToByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToChar&quot;, \n            Convert.ToChar( ds, null ), \n            Convert.ToChar( ds, geMean ), \n            Convert.ToChar( ds, median ) );\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; +\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, \n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, null ), \n            Convert.ToDateTime( ds, geMean ), \n            Convert.ToDateTime( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, \n            Convert.ToDecimal( ds, null ), \n            Convert.ToDecimal( ds, geMean ), \n            Convert.ToDecimal( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, \n            Convert.ToDouble( ds, null ), \n            Convert.ToDouble( ds, geMean ), \n            Convert.ToDouble( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, \n            Convert.ToInt16( ds, null ), \n            Convert.ToInt16( ds, geMean ), \n            Convert.ToInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, \n            Convert.ToInt32( ds, null ), \n            Convert.ToInt32( ds, geMean ), \n            Convert.ToInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, \n            Convert.ToInt64( ds, null ), \n            Convert.ToInt64( ds, geMean ), \n            Convert.ToInt64( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, \n            Convert.ToSByte( ds, null ), \n            Convert.ToSByte( ds, geMean ), \n            Convert.ToSByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, \n            Convert.ToSingle( ds, null ), \n            Convert.ToSingle( ds, geMean ), \n            Convert.ToSingle( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, \n            Convert.ToUInt16( ds, null ), \n            Convert.ToUInt16( ds, geMean ), \n            Convert.ToUInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, \n            Convert.ToUInt32( ds, null ), \n            Convert.ToUInt32( ds, geMean ), \n            Convert.ToUInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, \n            Convert.ToUInt64( ds, null ), \n            Convert.ToUInt64( ds, geMean ), \n            Convert.ToUInt64( ds, median ) );\n    }\n   \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods &quot; +\n            &quot;<br>generates the following output. The example &quot; +\n            &quot;displays the values <br>returned by the methods, &quot; +\n            &quot;using several IFormatProvider objects.<br>&quot; );\n          \n        DataSet ds1 = new DataSet( \n            10.5, 22.2, 45.9, 88.7, 156.05, 297.6 );\n        DisplayDataSet( ds1 );\n          \n        DataSet ds2 = new DataSet( \n            359999.95, 425000, 499999.5, 775000, 1695000 );\n        DisplayDataSet( ds2 );\n    }\n}\n\n/*\nThis example of the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:04:12 2003-05-13 15:03:28 2003-05-13 15:03:35\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 07:39:08 2003-05-20 22:28:45 2003-05-19 09:55:48\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert.ToXXX_Object_IFP#1\">using namespace System;\nusing namespace System::Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum class AverageType : short\n{\n   None = 0,\n   GeometricMean = 1,\n   ArithmeticMean = 2,\n   Median = 3\n};\n\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\nref class AverageInfo: public IFormatProvider\n{\nprotected:\n   AverageType AvgType;\n\npublic:\n\n   // Specify the type of averaging in the constructor.\n   AverageInfo( AverageType avgType )\n   {\n      this-&gt;AvgType = avgType;\n   }\n\n\n   // This method returns a reference to the containing object \n   // if an object of AverageInfo type is requested. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      if ( argType == AverageInfo::typeid)\n            return this;\n      else\n            return (Object^)0;\n   }\n\n\n   property AverageType TypeOfAverage \n   {\n\n      // Use this property to set or get the type of averaging.\n      AverageType get()\n      {\n         return this-&gt;AvgType;\n      }\n\n      void set( AverageType value )\n      {\n         this-&gt;AvgType = value;\n      }\n\n   }\n\n};\n\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \nref class DataSet: public IConvertible\n{\nprivate:\n   static Object^ null = nullptr;\n\nprotected:\n   ArrayList^ data;\n   AverageInfo^ defaultProvider;\n\n   // This method unboxes a boxed double.\n   double UnBoxDouble( Object^ obj )\n   {\n      return  *static_cast&lt;double^&gt;(obj);\n   }\n\n\npublic:\n\n   // Construct the object and add an initial list of values.\n   // Create a default format provider.\n   DataSet( ... array&lt;Double&gt;^values )\n   {\n      data = gcnew ArrayList( (Array^)values );\n      defaultProvider = gcnew AverageInfo( AverageType::ArithmeticMean );\n   }\n\n\n   // Add additional values with this method.\n   int Add( double value )\n   {\n      data-&gt;Add( value );\n      return data-&gt;Count;\n   }\n\n\n   property double Item[ int ]\n   {\n\n      // Get, set, and add values with this indexer property.\n      double get( int index )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  return UnBoxDouble( data[ index ] );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.get] Index out of range.&quot; );\n      }\n\n      void set( int index, double value )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  data[ index ] = value;\n         else\n         if ( index == data-&gt;Count )\n                  data-&gt;Add( value );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.set] Index out of range.&quot; );\n      }\n\n   }\n\n   property int Count \n   {\n\n      // This property returns the number of elements in the object.\n      int get()\n      {\n         return data-&gt;Count;\n      }\n\n   }\n\nprotected:\n\n   // This method calculates the average of the object&#39;s elements.\n   double Average( AverageType avgType )\n   {\n      double SumProd;\n      if ( data-&gt;Count == 0 )\n            return 0.0;\n\n      switch ( avgType )\n      {\n         case AverageType::GeometricMean:\n            SumProd = 1.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd *= UnBoxDouble( data[ Index ] );\n            \n            // This calculation will not fail with negative \n            // elements.\n            return Math::Sign( SumProd ) * Math::Pow( Math::Abs( SumProd ), 1.0 / data-&gt;Count );\n\n         case AverageType::ArithmeticMean:\n            SumProd = 0.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd += UnBoxDouble( data[ Index ] );\n            return SumProd / data-&gt;Count;\n\n         case AverageType::Median:\n            if ( data-&gt;Count % 2 == 0 )\n                        return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) + UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] )) / 2.0;\n            else\n                        return UnBoxDouble( data[ data-&gt;Count / 2 ] );\n\n         default:\n            return 0.0;\n      }\n   }\n\n\n   // Get the AverageInfo object from the caller&#39;s format provider,\n   // or use the local default.\n   AverageInfo^ GetAverageInfo( IFormatProvider^ provider )\n   {\n      AverageInfo^ avgInfo = nullptr;\n      if ( provider != nullptr )\n            avgInfo = static_cast&lt;AverageInfo^&gt;(provider-&gt;GetFormat( AverageInfo::typeid ));\n\n      if ( avgInfo == nullptr )\n            return defaultProvider;\n      else\n            return avgInfo;\n   }\n\n\n   // Calculate the average and limit the range.\n   double CalcNLimitAverage( double min, double max, IFormatProvider^ provider )\n   {\n      \n      // Get the format provider and calculate the average.\n      AverageInfo^ avgInfo = GetAverageInfo( provider );\n      double avg = Average( avgInfo-&gt;TypeOfAverage );\n      \n      // Limit the range, based on the minimum and maximum values \n      // for the type.\n      return avg &gt; max ? max : avg &lt; min ? min : avg;\n   }\n\n\npublic:\n\n   // The following elements are required by IConvertible.\n   // None of these conversion functions throw exceptions. When\n   // the data is out of range for the type, the appropriate\n   // MinValue or MaxValue is used.\n   virtual TypeCode GetTypeCode()\n   {\n      return TypeCode::Object;\n   }\n\n   virtual bool ToBoolean( IFormatProvider^ provider )\n   {\n      \n      // ToBoolean is false if the dataset is empty.\n      if ( data-&gt;Count &lt;= 0 )\n            return false;\n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      else\n      \n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      if ( AverageType::Median == GetAverageInfo( provider )-&gt;TypeOfAverage )\n      {\n         if ( data-&gt;Count % 2 == 0 )\n                  return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0 || UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] ) != 0.0);\n         else\n                  return UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0;\n      }\n      // For arithmetic or geometric mean averaging, ToBoolean is \n      // true if any element of the dataset is nonzero.  \n      else\n      {\n         for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n            if ( UnBoxDouble( data[ Index ] ) != 0.0 )\n                        return true;\n         return false;\n      }\n   }\n\n   virtual Byte ToByte( IFormatProvider^ provider )\n   {\n      return Convert::ToByte( CalcNLimitAverage( Byte::MinValue, Byte::MaxValue, provider ) );\n   }\n\n   virtual Char ToChar( IFormatProvider^ provider )\n   {\n      return Convert::ToChar( Convert::ToUInt16( CalcNLimitAverage( Char::MinValue, Char::MaxValue, provider ) ) );\n   }\n\n\n   // Convert to DateTime by adding the calculated average as \n   // seconds to the current date and time. A valid DateTime is \n   // always returned.\n   virtual DateTime ToDateTime( IFormatProvider^ provider )\n   {\n      double seconds = Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n      try\n      {\n         return DateTime::Now.AddSeconds( seconds );\n      }\n      catch ( ArgumentOutOfRangeException^ ) \n      {\n         return seconds &lt; 0.0 ? DateTime::MinValue : DateTime::MaxValue;\n      }\n\n   }\n\n   virtual Decimal ToDecimal( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Decimal.MinValue and \n      // Decimal.MaxValue to invalid Decimal values, so the \n      // following limits must be used.\n      return Convert::ToDecimal( CalcNLimitAverage(  -79228162514264330000000000000.0, 79228162514264330000000000000.0, provider ) );\n   }\n\n   virtual double ToDouble( IFormatProvider^ provider )\n   {\n      return Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n   }\n\n   virtual short ToInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToInt16( CalcNLimitAverage( Int16::MinValue, Int16::MaxValue, provider ) );\n   }\n\n   virtual int ToInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToInt32( CalcNLimitAverage( Int32::MinValue, Int32::MaxValue, provider ) );\n   }\n\n   virtual __int64 ToInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Int64.MinValue and \n      // Int64.MaxValue to invalid Int64 values, so the following \n      // limits must be used.\n      return Convert::ToInt64( CalcNLimitAverage(  -9223372036854775000, 9223372036854775000, provider ) );\n   }\n\n   virtual signed char ToSByte( IFormatProvider^ provider )\n   {\n      return Convert::ToSByte( CalcNLimitAverage( SByte::MinValue, SByte::MaxValue, provider ) );\n   }\n\n   virtual float ToSingle( IFormatProvider^ provider )\n   {\n      return Convert::ToSingle( CalcNLimitAverage( Single::MinValue, Single::MaxValue, provider ) );\n   }\n\n   virtual UInt16 ToUInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt16( CalcNLimitAverage( UInt16::MinValue, UInt16::MaxValue, provider ) );\n   }\n\n   virtual UInt32 ToUInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt32( CalcNLimitAverage( UInt32::MinValue, UInt32::MaxValue, provider ) );\n   }\n\n   virtual UInt64 ToUInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds UInt64.MaxValue to an invalid\n      // UInt64 value, so the following limit must be used.\n      return Convert::ToUInt64( CalcNLimitAverage( 0, 18446744073709550000.0, provider ) );\n   }\n\n   virtual Object^ ToType( Type^ conversionType, IFormatProvider^ provider )\n   {\n      return Convert::ChangeType( Average( GetAverageInfo( provider )-&gt;TypeOfAverage ), conversionType );\n   }\n\n   virtual String^ ToString( IFormatProvider^ provider )\n   {\n      AverageType avgType = GetAverageInfo( provider )-&gt;TypeOfAverage;\n      return String::Format( &quot;( {0}: {1:G10} )&quot;, avgType, Average( avgType ) );\n   }\n\n};\n\n\n// Display a DataSet with three different format providers.\nvoid DisplayDataSet( DataSet^ ds )\n{\n   IFormatProvider^ null = nullptr;\n   String^ fmt = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n   AverageInfo^ median = gcnew AverageInfo( AverageType::Median );\n   AverageInfo^ geMean = gcnew AverageInfo( AverageType::GeometricMean );\n   \n   // Display the dataset elements.\n   if ( ds-&gt;Count &gt; 0 )\n   {\n      Console::Write( &quot;<br>DataSet: [{0}&quot;, ds-&gt;Item[ 0 ] );\n      for ( int iX = 1; iX &lt; ds-&gt;Count; iX++ )\n         Console::Write( &quot;, {0}&quot;, ds-&gt;Item[ iX ] );\n      Console::WriteLine( &quot;]<br>&quot; );\n   }\n\n   Console::WriteLine( fmt, &quot;Convert::&quot;, &quot;Default&quot;, &quot;Geometric Mean&quot;, &quot;Median&quot; );\n   Console::WriteLine( fmt, &quot;---------&quot;, &quot;-------&quot;, &quot;--------------&quot;, &quot;------&quot; );\n   Console::WriteLine( fmt, &quot;ToBoolean&quot;, Convert::ToBoolean( ds, null ), Convert::ToBoolean( ds, geMean ), Convert::ToBoolean( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToByte&quot;, Convert::ToByte( ds, null ), Convert::ToByte( ds, geMean ), Convert::ToByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToChar&quot;, Convert::ToChar( ds, null ), Convert::ToChar( ds, geMean ), Convert::ToChar( ds, median ) );\n   Console::WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot;\n   &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, &quot;ToDateTime&quot;, Convert::ToDateTime( ds, null ), Convert::ToDateTime( ds, geMean ), Convert::ToDateTime( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDecimal&quot;, Convert::ToDecimal( ds, null ), Convert::ToDecimal( ds, geMean ), Convert::ToDecimal( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDouble&quot;, Convert::ToDouble( ds, null ), Convert::ToDouble( ds, geMean ), Convert::ToDouble( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt16&quot;, Convert::ToInt16( ds, null ), Convert::ToInt16( ds, geMean ), Convert::ToInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt32&quot;, Convert::ToInt32( ds, null ), Convert::ToInt32( ds, geMean ), Convert::ToInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt64&quot;, Convert::ToInt64( ds, null ), Convert::ToInt64( ds, geMean ), Convert::ToInt64( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSByte&quot;, Convert::ToSByte( ds, null ), Convert::ToSByte( ds, geMean ), Convert::ToSByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSingle&quot;, Convert::ToSingle( ds, null ), Convert::ToSingle( ds, geMean ), Convert::ToSingle( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt16&quot;, Convert::ToUInt16( ds, null ), Convert::ToUInt16( ds, geMean ), Convert::ToUInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt32&quot;, Convert::ToUInt32( ds, null ), Convert::ToUInt32( ds, geMean ), Convert::ToUInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt64&quot;, Convert::ToUInt64( ds, null ), Convert::ToUInt64( ds, geMean ), Convert::ToUInt64( ds, median ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods &quot;\n   &quot;<br>generates the following output. The example &quot;\n   &quot;displays the values <br>returned by the methods, &quot;\n   &quot;using several IFormatProvider objects.<br>&quot; );\n   \n   // To call a [ParamArray] method in C++, you cannot just\n   // list the parameters, you need to build an array.\n   array&lt;Double&gt;^dataElem = gcnew array&lt;Double&gt;(6);\n   dataElem[ 0 ] = 10.5;\n   dataElem[ 1 ] = 22.2;\n   dataElem[ 2 ] = 45.9;\n   dataElem[ 3 ] = 88.7;\n   dataElem[ 4 ] = 156.05;\n   dataElem[ 5 ] = 297.6;\n   DataSet^ ds1 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds1 );\n   dataElem = gcnew array&lt;Double&gt;(5);\n   dataElem[ 0 ] = 359999.95;\n   dataElem[ 1 ] = 425000;\n   dataElem[ 2 ] = 499999.5;\n   dataElem[ 3 ] = 775000;\n   dataElem[ 4 ] = 1695000;\n   DataSet^ ds2 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds2 );\n}\n\n/*\nThis example of the Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:30:23 2003-05-13 15:29:39 2003-05-13 15:29:47\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 08:05:19 2003-05-20 22:54:57 2003-05-19 10:21:59\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToXXX_Object_IFP#1\">Imports System.Collections\n\nModule IConvertibleProviderDemo\n\n    &#39; Define the types of averaging available in the class \n    &#39; implementing IConvertible.\n    Enum AverageType as Short\n        None = 0\n        GeometricMean = 1\n        ArithmeticMean = 2\n        Median = 3\n    End Enum\n\n    &#39; Pass an instance of this class to methods that require an \n    &#39; IFormatProvider. The class instance determines the type of \n    &#39; average to calculate.\n    Public Class AverageInfo\n        Implements IFormatProvider\n\n        Protected  AvgType      As AverageType\n\n        &#39; Specify the type of averaging in the constructor.\n        Public Sub New( avgType As AverageType )\n            Me.AvgType = avgType\n        End Sub\n\n        &#39; This method returns a reference to the containing object \n        &#39; if an object of AverageInfo type is requested. \n        Public Function GetFormat( argType As Type ) As Object _\n            Implements IFormatProvider.GetFormat\n\n            If argType Is GetType( AverageInfo ) Then\n                Return Me\n            Else\n                Return Nothing\n            End If\n        End Function \n\n        &#39; Use this property to set or get the type of averaging.\n        Public Property TypeOfAverage( ) As AverageType\n            Get\n                Return Me.AvgType\n            End Get\n            Set( ByVal value as AverageType )\n                Me.AvgType = value\n            End Set\n        End Property\n    End Class \n\n    &#39; This class encapsulates an array of Double values and implements \n    &#39; the IConvertible interface. Most of the IConvertible methods \n    &#39; return an average of the array elements in one of three types: \n    &#39; arithmetic mean, geometric mean, or median. \n    Public Class DataSet\n        Implements IConvertible\n\n        Protected data              As ArrayList\n        Protected defaultProvider   As AverageInfo\n           \n        &#39; Construct the object and add an initial list of values.\n        &#39; Create a default format provider.\n        Public Sub New( ParamArray values( ) As Double )\n            data = New ArrayList( values )\n            defaultProvider = New AverageInfo( _\n                AverageType.ArithmeticMean )  \n        End Sub\n           \n        &#39; Add additional values with this method.\n        Public Function Add( value As Double ) As Integer\n            data.Add( value )\n            Return data.Count\n        End Function\n           \n        &#39; Get, set, and add values with this indexer property.\n        Default Public Property Item(index As Integer) As Double\n            Get\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    Return System.Convert.ToDouble( data( index ) )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.get] Index out of range.&quot; )\n                End If\n            End Get\n            Set\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    data( index ) = value\n                 \n                ElseIf index = data.Count Then\n                    data.Add( value )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.set] Index out of range.&quot; )\n                End If\n            End Set\n        End Property\n          \n        &#39; This property returns the number of elements in the object.\n        Public ReadOnly Property Count( ) As Integer\n            Get\n                Return data.Count\n            End Get\n        End Property\n\n        &#39; This method calculates the average of the object&#39;s elements.\n        Protected Function Average( ByVal avgType As AverageType ) As Double\n\n            Dim SumProd As Double \n            Dim Index   As Integer\n\n            If data.Count = 0 Then Return 0.0\n\n            Select Case avgType\n                \n                Case AverageType.GeometricMean\n\n                    SumProd = 1.0\n                    For Index = 0 To data.Count - 1\n                        SumProd *= data( Index )\n                    Next Index\n                    \n                    &#39; This calculation will not fail with negative \n                    &#39; elements.\n                    Return Math.Sign( SumProd ) * Math.Pow( _\n                        Math.Abs( SumProd ), 1.0 / data.Count )\n\n                Case AverageType.ArithmeticMean\n\n                    SumProd = 0.0\n                    For Index = 0 To data.Count - 1\n                        SumProd += data( Index )\n                    Next Index\n\n                    Return SumProd / data.Count \n\n                Case AverageType.Median\n\n                    If data.Count Mod 2 = 0 Then\n                        Return ( data( data.Count \\ 2 ) + _\n                            data( data.Count \\ 2 - 1 ) ) / 2.0\n                    Else\n                        Return data( data.Count \\ 2 ) \n                    End If\n            End Select\n        End Function\n\n        &#39; Get the AverageInfo object from the caller&#39;s format \n        &#39; provider, or use the local default.\n        Protected Function GetAverageInfo( _\n            provider As IFormatProvider ) As AverageInfo\n\n            Dim avgInfo As AverageInfo = Nothing\n\n            If Not provider Is Nothing Then\n                avgInfo = provider.GetFormat( GetType( AverageInfo ) )\n            End If\n\n            Return IIf( avgInfo Is Nothing, defaultProvider, avgInfo )\n            \n        End Function           \n\n        &#39; Calculate the average and limit the range.\n        Protected Function CalcNLimitAverage( min As Double, _\n            max As Double, provider as IFormatProvider ) As Double\n\n            &#39; Get the format provider and calculate the average.\n            Dim avgInfo As AverageInfo = GetAverageInfo( provider )\n            Dim avg As Double = Average( avgInfo.TypeOfAverage )\n\n            &#39; Limit the range, based on the minimum and maximum values \n            &#39; for the type.\n            Return IIf( avg &gt; max, max, IIf( avg &lt; min, min, avg ) )\n\n        End Function\n\n        &#39; The following elements are required by IConvertible.\n\n        &#39; None of these conversion functions throw exceptions. When\n        &#39; the data is out of range for the type, the appropriate\n        &#39; MinValue or MaxValue is used.\n        Public Function GetTypeCode( ) As TypeCode _\n            Implements IConvertible.GetTypeCode\n            Return TypeCode.Object\n        End Function\n\n        Function ToBoolean( ByVal provider As IFormatProvider ) As _\n            Boolean Implements IConvertible.ToBoolean\n\n            &#39; ToBoolean is false if the dataset is empty.\n            If data.Count &lt;= 0 Then\n                Return False\n\n            &#39; For median averaging, ToBoolean is true if any \n            &#39; non-discarded elements are nonzero.\n            ElseIf AverageType.Median = _\n                GetAverageInfo( provider ).TypeOfAverage Then\n\n                If data.Count Mod 2 = 0 Then\n                    Return ( data( data.Count \\ 2 ) &lt;&gt; 0.0 Or _\n                        data( data.Count \\ 2 - 1 ) &lt;&gt; 0.0 )\n                Else\n                    Return data( data.Count \\ 2 ) &lt;&gt; 0.0\n                End If\n\n            &#39; For arithmetic or geometric mean averaging, ToBoolean is \n            &#39; true if any element of the dataset is nonzero.  \n            Else\n                Dim Index As Integer\n                For Index = 0 To data.Count - 1\n                    If data( Index ) &lt;&gt; 0.0 Then Return True\n                Next Index\n                Return False\n            End If\n        End Function\n\n        Function ToByte( ByVal provider As IFormatProvider ) As Byte _\n            Implements IConvertible.ToByte\n            Return Convert.ToByte( CalcNLimitAverage( _\n                Byte.MinValue, Byte.MaxValue, provider ) )\n        End Function\n\n        Function ToChar( ByVal provider As IFormatProvider ) As Char _\n            Implements IConvertible.ToChar\n            Return Convert.ToChar( Convert.ToUInt16( _\n                CalcNLimitAverage( 0.0, &amp;HFFFF, provider ) ) )\n        End Function\n\n        &#39; Convert to DateTime by adding the calculated average as \n        &#39; seconds to the current date and time. A valid DateTime is \n        &#39; always returned.\n        Function ToDateTime( ByVal provider As IFormatProvider ) As _\n            DateTime Implements IConvertible.ToDateTime\n            Dim seconds As Double = Average( _\n                GetAverageInfo( provider ).TypeOfAverage )\n            Try\n                Return DateTime.Now.AddSeconds( seconds )\n            Catch ex As ArgumentOutOfRangeException \n                Return IIf( seconds &lt; 0.0, DateTime.MinValue, _\n                    DateTime.MaxValue )\n            End Try\n        End Function\n\n        Function ToDecimal( ByVal provider As IFormatProvider ) As _\n            Decimal Implements IConvertible.ToDecimal\n\n            &#39; The Double conversion rounds Decimal.MinValue and\n            &#39; Decimal.MaxValue to invalid Decimal values, so the \n            &#39; following limits must be used.\n            Return Convert.ToDecimal( CalcNLimitAverage( _\n                -79228162514264330000000000000.0, _\n                79228162514264330000000000000.0, provider ) )\n        End Function\n\n        Function ToDouble( ByVal provider As IFormatProvider) As _\n            Double Implements IConvertible.ToDouble\n            Return Average( GetAverageInfo( provider ).TypeOfAverage )\n        End Function\n\n        Function ToInt16( ByVal provider As IFormatProvider ) As _\n            Short Implements IConvertible.ToInt16\n            Return Convert.ToInt16( CalcNLimitAverage( _\n                Int16.MinValue, Int16.MaxValue, provider ) )\n        End Function\n\n        Function ToInt32( ByVal provider As IFormatProvider ) As _\n            Integer Implements IConvertible.ToInt32\n            Return Convert.ToInt32( CalcNLimitAverage( _\n                Int32.MinValue, Int32.MaxValue, provider ) )\n        End Function\n\n        Function ToInt64( ByVal provider As IFormatProvider ) As Long _\n            Implements IConvertible.ToInt64\n\n            &#39; The Double conversion rounds Int64.MinValue and \n            &#39; Int64.MaxValue to invalid Long values, so the following \n            &#39; limits must be used.\n            Return Convert.ToInt64( CalcNLimitAverage( _\n                -9223372036854775000, 9223372036854775000, provider ) )\n        End Function\n\n        Function ToSByte( ByVal provider As IFormatProvider ) As _\n            SByte Implements IConvertible.ToSByte\n\n            &#39; SByte.MinValue and SByte.MaxValue are not defined in\n            &#39; Visual Basic.\n            Return Convert.ToSByte( CalcNLimitAverage( _\n                -128, 127, provider ) )\n        End Function\n\n        Function ToSingle( ByVal provider As IFormatProvider ) As _\n            Single Implements IConvertible.ToSingle\n            Return Convert.ToSingle( CalcNLimitAverage( _\n                Single.MinValue, Single.MaxValue, provider ) )\n        End Function\n\n        Function ToUInt16( ByVal provider As IFormatProvider ) As _\n            UInt16 Implements IConvertible.ToUInt16\n\n            &#39; UInt16.MinValue and UInt16.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt16( CalcNLimitAverage( _\n                0, &amp;HFFFF, provider ) )\n        End Function\n\n        Function ToUInt32( ByVal provider As IFormatProvider ) As _\n            UInt32 Implements IConvertible.ToUInt32\n\n            &#39; UInt32.MinValue and UInt32.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt32( CalcNLimitAverage( _\n                0, 4294967295, provider ) )\n        End Function\n\n        Function ToUInt64( ByVal provider As IFormatProvider ) As _\n            UInt64 Implements IConvertible.ToUInt64\n\n            &#39; UInt64.MinValue and UInt64.MaxValue are not defined in \n            &#39; Visual Basic. The Double conversion would have rounded \n            &#39; UInt64.MaxValue, so the following limit must be used.\n            Return Convert.ToUInt64( CalcNLimitAverage( _\n                0, 18446744073709550000.0, provider ) )\n        End Function\n\n        Function ToType( ByVal conversionType As Type, _\n            ByVal provider As IFormatProvider) As Object _\n            Implements IConvertible.ToType\n            Return Convert.ChangeType( Average( GetAverageInfo( _\n                provider ).TypeOfAverage ), conversionType )\n        End Function\n\n        Overloads Function ToString( ByVal provider As IFormatProvider _\n            ) As String Implements IConvertible.ToString\n            Dim avgType as AverageType = _\n                GetAverageInfo( provider ).TypeOfAverage\n            Return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, _\n                Average( avgType ) )\n        End Function\n    End Class\n   \n    &#39; Display a DataSet with three different format providers.\n    Sub DisplayDataSet( ds As DataSet )\n\n        Dim fmt    As String      = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;\n        Dim median As AverageInfo = New AverageInfo( AverageType.Median )\n        Dim geMean As AverageInfo = _\n            New AverageInfo( AverageType.GeometricMean )\n        Dim iX     As Integer\n\n        &#39; Display the dataset elements.\n        If ds.Count &gt; 0 Then\n            Console.Write( vbCrLf &amp; &quot;DataSet: [{0}&quot;, ds( 0 ) )\n            For iX = 1 To ds.Count - 1\n                Console.Write( &quot;, {0}&quot;, ds( iX ) )\n            Next iX\n            Console.WriteLine( &quot;]&quot; &amp; vbCrLf )\n        End If\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, _\n            &quot;Geometric Mean&quot;, &quot;Median&quot; )\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, _\n            &quot;--------------&quot;, &quot;------&quot; )\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, _\n            Convert.ToBoolean( ds, Nothing ), _\n            Convert.ToBoolean( ds, geMean ), _\n            Convert.ToBoolean( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToByte&quot;, _\n            Convert.ToByte( ds, Nothing ), _\n            Convert.ToByte( ds, geMean ), _\n            Convert.ToByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToChar&quot;, _\n            Convert.ToChar( ds, Nothing ), _\n            Convert.ToChar( ds, geMean ), _\n            Convert.ToChar( ds, median ) )\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; &amp; _\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, _\n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, Nothing ), _\n            Convert.ToDateTime( ds, geMean ), _\n            Convert.ToDateTime( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, _\n            Convert.ToDecimal( ds, Nothing ), _\n            Convert.ToDecimal( ds, geMean ), _\n            Convert.ToDecimal( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, _\n            Convert.ToDouble( ds, Nothing ), _\n            Convert.ToDouble( ds, geMean ), _\n            Convert.ToDouble( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, _\n            Convert.ToInt16( ds, Nothing ), _\n            Convert.ToInt16( ds, geMean ), _\n            Convert.ToInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, _\n            Convert.ToInt32( ds, Nothing ), _\n            Convert.ToInt32( ds, geMean ), _\n            Convert.ToInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, _\n            Convert.ToInt64( ds, Nothing ), _\n            Convert.ToInt64( ds, geMean ), _\n            Convert.ToInt64( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, _\n            Convert.ToSByte( ds, Nothing ), _\n            Convert.ToSByte( ds, geMean ), _\n            Convert.ToSByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, _\n            Convert.ToSingle( ds, Nothing ), _\n            Convert.ToSingle( ds, geMean ), _\n            Convert.ToSingle( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, _\n            Convert.ToUInt16( ds, Nothing ), _\n            Convert.ToUInt16( ds, geMean ), _\n            Convert.ToUInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, _\n            Convert.ToUInt32( ds, Nothing ), _\n            Convert.ToUInt32( ds, geMean ), _\n            Convert.ToUInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, _\n            Convert.ToUInt64( ds, Nothing ), _\n            Convert.ToUInt64( ds, geMean ), _\n            Convert.ToUInt64( ds, median ) )\n    End Sub\n   \n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Convert.To&lt;Type&gt;( Object, &quot; &amp; _\n            &quot;IFormatProvider ) methods &quot; &amp; vbCrLf &amp; &quot;generates &quot; &amp; _\n            &quot;the following output. The example displays the &quot; &amp; _\n            &quot;values &quot; &amp; vbCrLf &amp; &quot;returned by the methods, &quot; &amp; _\n            &quot;using several IFormatProvider objects.&quot; &amp; vbCrLf )\n          \n        Dim ds1 As New DataSet( 10.5, 22.2, 45.9, 88.7, 156.05, 297.6 )\n        DisplayDataSet( ds1 )\n          \n        Dim ds2 As New DataSet( _\n            359999.95, 425000, 499999.5, 775000, 1695000 )\n        DisplayDataSet( ds2 )\n    End Sub \nEnd Module \n\n&#39; This example of the Convert.To&lt;Type&gt;( Object, IFormatProvider ) methods\n&#39; generates the following output. The example displays the values\n&#39; returned by the methods, using several IFormatProvider objects.\n&#39; \n&#39; DataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       103                  59                  67\n&#39; ToChar                         g                   ;                   C\n&#39; ToDateTime   2003-05-13 14:52:53 2003-05-13 14:52:09 2003-05-13 14:52:17\n&#39; ToDecimal       103.491666666667    59.4332135445164                67.3\n&#39; ToDouble        103.491666666667    59.4332135445164                67.3\n&#39; ToInt16                      103                  59                  67\n&#39; ToInt32                      103                  59                  67\n&#39; ToInt64                      103                  59                  67\n&#39; ToSByte                      103                  59                  67\n&#39; ToSingle                103.4917            59.43321                67.3\n&#39; ToUInt16                     103                  59                  67\n&#39; ToUInt32                     103                  59                  67\n&#39; ToUInt64                     103                  59                  67\n&#39; \n&#39; DataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       255                 255                 255\n&#39; ToChar                         ?                   ?                   ?\n&#39; ToDateTime   2003-05-22 07:27:49 2003-05-20 22:17:27 2003-05-19 09:44:29\n&#39; ToDecimal              750999.89    631577.237188435            499999.5\n&#39; ToDouble               750999.89    631577.237188435            499999.5\n&#39; ToInt16                    32767               32767               32767\n&#39; ToInt32                   751000              631577              500000\n&#39; ToInt64                   751000              631577              500000\n&#39; ToSByte                      127                 127                 127\n&#39; ToSingle                750999.9            631577.3            499999.5\n&#39; ToUInt16                   65535               65535               65535\n&#39; ToUInt32                  751000              631577              500000\n&#39; ToUInt64                  751000              631577              500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_\" data-linktype=\"relative-path\">Parse</a> method on <code>value</code>.  </p>\n<p> <code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that recognizes the string &quot;pos&quot; as the positive sign and the string &quot;neg&quot; as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> provider for the invariant culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt32#15\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a custom NumberFormatInfo object and set its two properties\n      // used by default in parsing numeric strings.\n      NumberFormatInfo customProvider = new NumberFormatInfo();\n      customProvider.NegativeSign = &quot;neg &quot;;\n      customProvider.PositiveSign = &quot;pos &quot;;\n\n      // Add custom and invariant provider to an array of providers.\n      NumberFormatInfo[] providers = { customProvider, NumberFormatInfo.InvariantInfo };\n      \n      // Define an array of strings to convert.\n      string[] numericStrings = { &quot;123456789&quot;, &quot;+123456789&quot;, &quot;pos 123456789&quot;,\n                                  &quot;-123456789&quot;, &quot;neg 123456789&quot;, &quot;123456789.&quot;,\n                                  &quot;123,456,789&quot;, &quot;(123456789)&quot;, &quot;2147483648&quot;,\n                                  &quot;-2147483649&quot; }; \n      \n      // Use each provider to parse all the numeric strings.\n      for (int ctr = 0; ctr &lt;= 1; ctr++)\n      {\n         IFormatProvider provider = providers[ctr];\n         Console.WriteLine(ctr == 0 ? &quot;Custom Provider:&quot; : &quot;Invariant Provider:&quot;);\n         foreach (string numericString in numericStrings)\n         {\n            Console.Write(&quot;{0,15}  --&gt; &quot;, numericString);\n            try {\n               Console.WriteLine(&quot;{0,20}&quot;, Convert.ToInt32(numericString, provider));\n            }\n            catch (FormatException) {\n               Console.WriteLine(&quot;{0,20}&quot;, &quot;FormatException&quot;);\n            }    \n            catch (OverflowException) {\n               Console.WriteLine(&quot;{0,20}&quot;, &quot;OverflowException&quot;);                 \n            }\n         }\n         Console.WriteLine();\n      }                  \n   }\n}\n// The example displays the following output:\n//       Custom Provider:\n//             123456789  --&gt;            123456789\n//            +123456789  --&gt;      FormatException\n//         pos 123456789  --&gt;            123456789\n//            -123456789  --&gt;      FormatException\n//         neg 123456789  --&gt;           -123456789\n//            123456789.  --&gt;      FormatException\n//           123,456,789  --&gt;      FormatException\n//           (123456789)  --&gt;      FormatException\n//            2147483648  --&gt;    OverflowException\n//           -2147483649  --&gt;      FormatException\n//       \n//       Invariant Provider:\n//             123456789  --&gt;            123456789\n//            +123456789  --&gt;            123456789\n//         pos 123456789  --&gt;      FormatException\n//            -123456789  --&gt;           -123456789\n//         neg 123456789  --&gt;      FormatException\n//            123456789.  --&gt;      FormatException\n//           123,456,789  --&gt;      FormatException\n//           (123456789)  --&gt;      FormatException\n//            2147483648  --&gt;    OverflowException\n//           -2147483649  --&gt;    OverflowException\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt32#15\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Create a custom NumberFormatInfo object and set its two properties\n      &#39; used by default in parsing numeric strings.\n      Dim customProvider As New NumberFormatInfo()\n      customProvider.NegativeSign = &quot;neg &quot;\n      customProvider.PositiveSign = &quot;pos &quot;\n\n      &#39; Add custom and invariant provider to an array of providers.\n      Dim providers() As NumberFormatInfo = { customProvider, NumberFormatInfo.InvariantInfo }\n      \n      &#39; Define an array of strings to convert.\n      Dim numericStrings() As String = { &quot;123456789&quot;, &quot;+123456789&quot;, &quot;pos 123456789&quot;, _\n                                         &quot;-123456789&quot;, &quot;neg 123456789&quot;, &quot;123456789.&quot;, _\n                                         &quot;123,456,789&quot;, &quot;(123456789)&quot;, &quot;2147483648&quot;, _\n                                         &quot;-2147483649&quot; } \n      \n      &#39; Use each provider to parse all the numeric strings.\n      For ctr As Integer = 0 To 1\n         Dim provider As IFormatPRovider = providers(ctr)\n         Console.WriteLine(IIf(ctr = 0, &quot;Custom Provider:&quot;, &quot;Invariant Provider:&quot;))\n         For Each numericString As String In numericStrings\n            Console.Write(&quot;{0,15}  --&gt; &quot;, numericString)\n            Try\n               Console.WriteLine(&quot;{0,20}&quot;, Convert.ToInt32(numericString, provider))\n            Catch e As FormatException\n               Console.WriteLine(&quot;{0,20}&quot;, &quot;FormatException&quot;) \n            Catch e As OverflowException\n               Console.WriteLine(&quot;{0,20}&quot;, &quot;OverflowException&quot;)                 \n            End Try\n         Next\n         Console.WriteLine()\n      Next                  \n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       Custom Provider:\n&#39;             123456789  --&gt;            123456789\n&#39;            +123456789  --&gt;      FormatException\n&#39;         pos 123456789  --&gt;            123456789\n&#39;            -123456789  --&gt;      FormatException\n&#39;         neg 123456789  --&gt;           -123456789\n&#39;            123456789.  --&gt;      FormatException\n&#39;           123,456,789  --&gt;      FormatException\n&#39;           (123456789)  --&gt;      FormatException\n&#39;            2147483648  --&gt;    OverflowException\n&#39;           -2147483649  --&gt;      FormatException\n&#39;       \n&#39;       Invariant Provider:\n&#39;             123456789  --&gt;            123456789\n&#39;            +123456789  --&gt;            123456789\n&#39;         pos 123456789  --&gt;      FormatException\n&#39;            -123456789  --&gt;           -123456789\n&#39;         neg 123456789  --&gt;      FormatException\n&#39;            123456789.  --&gt;      FormatException\n&#39;           123,456,789  --&gt;      FormatException\n&#39;           (123456789)  --&gt;      FormatException\n&#39;            2147483648  --&gt;    OverflowException\n&#39;           -2147483649  --&gt;    OverflowException\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt32_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (string value, int fromBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fromBase</code> is not 2, 8, 10, or 16.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  </p>\n<p> -or-  </p>\n<p> <code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>fromBase</code> is 16, you can prefix the number specified by the <code>value</code> parameter with &quot;0x&quot; or &quot;0X&quot;.  </p>\n<p> Because the negative sign is not supported for non-base 10 numeric representations, the ToInt32 method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> data type is converted to an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value without the method throwing an exception. The following example increments <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">System.Int32</a> by one, converts the resulting number to its hexadecimal string representation, and then calls the ToInt32 method. Instead of throwing an exception, the method displays the message, &quot;0x80000000 converts to -2147483648.&quot;  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.BaseConversion#1\">   // Create a hexadecimal value out of range of the integer type. \n   String^ value1 = Convert::ToString((static_cast&lt;__int64&gt;(int::MaxValue)) + 1, 16);\n   // Convert it back to a number.\n   try {\n      int number = Convert::ToInt32(value1, 16);\n      Console::WriteLine(&quot;0x{0} converts to {1}.&quot;, value1, number);\n   }\n   catch (OverflowException ^e) {\n      Console::WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an integer.&quot;, value1);\n   }\n   // The example displays the following output:\n   //      0x80000000 converts to -2147483648.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#1\">     &#39; Create a hexadecimal value out of range of the Integer type.\n     Dim value As String = Convert.ToString(CLng(Integer.MaxValue) + 1, 16)\n     &#39; Convert it back to a number.\n     Try\n        Dim number As Integer = Convert.ToInt32(value, 16)\n        Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number)\n     Catch e As OverflowException\n        Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an integer.&quot;, value)\n     End Try   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#1\">     // Create a hexadecimal value out of range of the Integer type.\n     string value = Convert.ToString((long) int.MaxValue + 1, 16);\n     // Convert it back to a number.\n     try\n     {\n        int number = Convert.ToInt32(value, 16);\n        Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number.ToString());\n     }\n     catch (OverflowException)\n     {\n        Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an integer.&quot;, value);\n     }   \n</code></pre><p> When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.BaseConversion#2\">   __int64 sourceNumber2 = (static_cast&lt;__int64&gt;(int::MaxValue)) + 1;\n   bool isNegative = Math::Sign(sourceNumber2) == -1;\n   String^ value2 = Convert::ToString(sourceNumber2, 16);\n   int targetNumber;\n   try {\n      targetNumber = Convert::ToInt32(value2, 16);\n      if (!(isNegative) &amp; (targetNumber &amp; 0x80000000) != 0)\n         throw gcnew OverflowException();\n      else\n         Console::WriteLine(&quot;0x{0} converts to {1}.&quot;, value2, targetNumber);\n   }\n   catch (OverflowException ^e) {\n      Console::WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an integer.&quot;, value2);\n   }\n   // The example displays the following output:\n   //       Unable to convert &#39;0x80000000&#39; to an integer.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#2\">      &#39; Create a hexadecimal value out of range of the Integer type.\n      Dim sourceNumber As Long = CLng(Integer.MaxValue) + 1\n      Dim isNegative As Boolean = (Math.Sign(sourceNumber) = -1)\n      Dim value As String = Convert.ToString(sourceNumber, 16)\n      Dim targetNumber As Integer\n      Try\n         targetNumber = Convert.ToInt32(value, 16)\n         If Not isNegative And ((targetNumber And &amp;H80000000) &lt;&gt; 0) Then\n            Throw New OverflowException()\n         Else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber)\n         End If    \n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an integer.&quot;, value)\n      End Try \n      &#39; Displays the following to the console:\n      &#39;    Unable to convert &#39;0x80000000&#39; to an integer.     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#2\">      // Create a hexadecimal value out of range of the Integer type.\n      long sourceNumber = (long) int.MaxValue + 1;\n      bool isNegative = Math.Sign(sourceNumber) == -1;\n      string value = Convert.ToString(sourceNumber, 16);\n      int targetNumber;\n      try\n      {\n         targetNumber = Convert.ToInt32(value, 16);\n         if (!(isNegative) &amp; (targetNumber &amp; 0x80000000) != 0) \n            throw new OverflowException();\n         else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an integer.&quot;, value);\n      } \n      // Displays the following to the console:\n      //    Unable to convert &#39;0x80000000&#39; to an integer.    \n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts the <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values <code>true</code> and <code>false</code> to long integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag,\n                        Convert.ToInt64(falseFlag));\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag,\n                        Convert.ToInt64(trueFlag));\n      // The example displays the following output:\n      //       False converts to 0.\n      //       True converts to 1.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, _\n                        Convert.ToInt64(falseFlag))\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, _\n                        Convert.ToInt64(trueFlag))\n      &#39; The example displays the following output:\n      &#39;       False converts to 0.\n      &#39;       True converts to 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of bytes to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#2\">      byte[] bytes = { Byte.MinValue, 14, 122, Byte.MaxValue};\n      long result;\n      \n      foreach (byte byteValue in bytes)\n      {\n         result = Convert.ToInt64(byteValue);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           byteValue.GetType().Name, byteValue,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //       Converted the Byte value 0 to the Int64 value 0.\n      //       Converted the Byte value 14 to the Int64 value 14.\n      //       Converted the Byte value 122 to the Int64 value 122.\n      //       Converted the Byte value 255 to the Int64 value 255.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#2\">      Dim bytes() As Byte = { Byte.MinValue, 14, 122, Byte.MaxValue}\n      Dim result As Long\n      \n      For Each byteValue As Byte In bytes\n         result = Convert.ToInt64(byteValue)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           byteValue.GetType().Name, byteValue, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Byte value 0 to the Int64 value 0.\n      &#39;    Converted the Byte value 14 to the Int64 value 14.\n      &#39;    Converted the Byte value 122 to the Int64 value 122.\n      &#39;    Converted the Byte value 255 to the Int64 value 255.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> array to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#3\">      char[] chars = { &#39;a&#39;, &#39;z&#39;, &#39;\\u0007&#39;, &#39;\\u03FF&#39;,\n                       &#39;\\u7FFF&#39;, &#39;\\uFFFE&#39; };\n      long result;\n                              \n      foreach (char ch in chars)\n      {\n         result = Convert.ToInt64(ch);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                           ch.GetType().Name, ch,\n                           result.GetType().Name, result);\n      }   \n      // The example displays the following output:\n      //       Converted the Char value &#39;a&#39; to the Int64 value 97.\n      //       Converted the Char value &#39;z&#39; to the Int64 value 122.\n      //       Converted the Char value &#39;&#39; to the Int64 value 7.\n      //       Converted the Char value &#39;?&#39; to the Int64 value 1023.\n      //       Converted the Char value &#39;?&#39; to the Int64 value 32767.\n      //       Converted the Char value &#39;?&#39; to the Int64 value 65534.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#3\">      Dim chars() As Char = { &quot;a&quot;c, &quot;z&quot;c, ChrW(7), ChrW(1023), _\n                              ChrW(Short.MaxValue), ChrW(&amp;hFFFE) }\n      Dim result As Long\n                              \n      For Each ch As Char in chars\n         result = Convert.ToInt64(ch)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           ch.GetType().Name, ch, _\n                           result.GetType().Name, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;       Converted the Char value &#39;a&#39; to the Int64 value 97.\n      &#39;       Converted the Char value &#39;z&#39; to the Int64 value 122.\n      &#39;       Converted the Char value &#39;&#39; to the Int64 value 7.\n      &#39;       Converted the Char value &#39;?&#39; to the Int64 value 1023.\n      &#39;       Converted the Char value &#39;?&#39; to the Int64 value 32767.\n      &#39;       Converted the Char value &#39;?&#39; to the Int64 value 65534.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or less than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#4\">      decimal[] values= { Decimal.MinValue, -1034.23m, -12m, 0m, 147m,\n                          199.55m, 9214.16m, Decimal.MaxValue };\n      long result;\n      \n      foreach (decimal value in values)\n      {\n         try {\n            result = Convert.ToInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int64 type.&quot;,\n                              value);\n         }   \n      }                                  \n      // The example displays the following output:\n      //    -79228162514264337593543950335 is outside the range of the Int64 type.\n      //    Converted the Decimal value &#39;-1034.23&#39; to the Int64 value -1034.\n      //    Converted the Decimal value &#39;-12&#39; to the Int64 value -12.\n      //    Converted the Decimal value &#39;0&#39; to the Int64 value 0.\n      //    Converted the Decimal value &#39;147&#39; to the Int64 value 147.\n      //    Converted the Decimal value &#39;199.55&#39; to the Int64 value 200.\n      //    Converted the Decimal value &#39;9214.16&#39; to the Int64 value 9214.\n      //    79228162514264337593543950335 is outside the range of the Int64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#4\">      Dim values() As Decimal = { Decimal.MinValue, -1034.23d, -12d, 0d, 147d, _\n                                  199.55d, 9214.16d, Decimal.MaxValue }\n      Dim result As Long\n      \n      For Each value As Decimal In values\n         Try\n            result = Convert.ToInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int64 type.&quot;, _\n                              value)\n         End Try   \n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    -79228162514264337593543950335 is outside the range of the Int64 type.\n      &#39;    Converted the Decimal value &#39;-1034.23&#39; to the Int64 value -1034.\n      &#39;    Converted the Decimal value &#39;-12&#39; to the Int64 value -12.\n      &#39;    Converted the Decimal value &#39;0&#39; to the Int64 value 0.\n      &#39;    Converted the Decimal value &#39;147&#39; to the Int64 value 147.\n      &#39;    Converted the Decimal value &#39;199.55&#39; to the Int64 value 200.\n      &#39;    Converted the Decimal value &#39;9214.16&#39; to the Int64 value 9214.\n      &#39;    79228162514264337593543950335 is outside the range of the Int64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or less than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#5\">      double[] values= { Double.MinValue, -1.38e10, -1023.299, -12.98,\n                         0, 9.113e-16, 103.919, 17834.191, Double.MaxValue };\n      long result;\n      \n      foreach (double value in values)\n      {\n         try {\n            result = Convert.ToInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int64 type.&quot;, value);\n         }   \n      }                                 \n      //    -1.79769313486232E+308 is outside the range of the Int64 type.\n      //    -13800000000 is outside the range of the Int16 type.\n      //    Converted the Double value &#39;-1023.299&#39; to the Int64 value -1023.\n      //    Converted the Double value &#39;-12.98&#39; to the Int64 value -13.\n      //    Converted the Double value &#39;0&#39; to the Int64 value 0.\n      //    Converted the Double value &#39;9.113E-16&#39; to the Int64 value 0.\n      //    Converted the Double value &#39;103.919&#39; to the Int64 value 104.\n      //    Converted the Double value &#39;17834.191&#39; to the Int64 value 17834.\n      //    1.79769313486232E+308 is outside the range of the Int64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#5\">      Dim values() As Double = { Double.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Double.MaxValue }\n      Dim result As Long\n      \n      For Each value As Double In values\n         Try\n            result = Convert.ToInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int64 type.&quot;, value)\n         End Try   \n      Next                                 \n      &#39;    -1.79769313486232E+308 is outside the range of the Int64 type.\n      &#39;    -13800000000 is outside the range of the Int16 type.\n      &#39;    Converted the Double value &#39;-1023.299&#39; to the Int64 value -1023.\n      &#39;    Converted the Double value &#39;-12.98&#39; to the Int64 value -13.\n      &#39;    Converted the Double value &#39;0&#39; to the Int64 value 0.\n      &#39;    Converted the Double value &#39;9.113E-16&#39; to the Int64 value 0.\n      &#39;    Converted the Double value &#39;103.919&#39; to the Int64 value 104.\n      &#39;    Converted the Double value &#39;17834.191&#39; to the Int64 value 17834.\n      &#39;    1.79769313486232E+308 is outside the range of the Int64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of 16-bit integers to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#6\">      short[] numbers= { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue };\n      long result;\n      \n      foreach (short number in numbers)\n      {\n         result = Convert.ToInt64(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the Int16 value -32768 to a Int32 value -32768.\n      //    Converted the Int16 value -1 to a Int32 value -1.\n      //    Converted the Int16 value 0 to a Int32 value 0.\n      //    Converted the Int16 value 121 to a Int32 value 121.\n      //    Converted the Int16 value 340 to a Int32 value 340.\n      //    Converted the Int16 value 32767 to a Int32 value 32767.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#6\">      Dim numbers() As Short = { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue }\n      Dim result As Long\n      \n      For Each number As Short In numbers\n         result = Convert.ToInt64(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Int16 value -32768 to the Int64 value -32768.\n      &#39;    Converted the Int16 value -1 to the Int64 value -1.\n      &#39;    Converted the Int16 value 0 to the Int64 value 0.\n      &#39;    Converted the Int16 value 121 to the Int64 value 121.\n      &#39;    Converted the Int16 value 340 to the Int64 value 340.\n      &#39;    Converted the Int16 value 32767 to the Int64 value 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 64-bit signed integer; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of integers to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#7\">      int[] numbers = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue };\n      long result;\n      foreach (int number in numbers)\n      {\n         result = Convert.ToInt64(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           number.GetType().Name, number,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the Int32 value -2147483648 to the Int64 value -2147483648.\n      //    Converted the Int32 value -1 to the Int64 value -1.\n      //    Converted the Int32 value 0 to the Int64 value 0.\n      //    Converted the Int32 value 121 to the Int64 value 121.\n      //    Converted the Int32 value 340 to the Int64 value 340.\n      //    Converted the Int32 value 2147483647 to the Int64 value 2147483647.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#7\">      Dim numbers() As Integer = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue }\n      Dim result As Long\n      For Each number As Integer In numbers\n         result = Convert.ToInt64(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Int32 value -2147483648 to the Int64 value -2147483648.\n      &#39;    Converted the Int32 value -1 to the Int64 value -1.\n      &#39;    Converted the Int32 value 0 to the Int64 value 0.\n      &#39;    Converted the Int32 value 121 to the Int64 value 121.\n      &#39;    Converted the Int32 value 340 to the Int64 value 340.\n      &#39;    Converted the Int32 value 2147483647 to the Int64 value 2147483647.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int64#System_Int64_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.int64#System_Int64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is not <code>null</code>, this method wraps a call to the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToInt64_\" data-linktype=\"relative-path\">ToInt64</a> implementation of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#8\">      object[] values = { true, -12, 163, 935, &#39;x&#39;, new DateTime(2009, 5, 12),\n                          &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;,\n                          &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2, 16.3e42};\n      long result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int64 type.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No conversion to an Int64 exists for the {0} value {1}.&quot;,\n                              value.GetType().Name, value);\n                              \n         }\n      }                           \n      // The example displays the following output:\n      //    Converted the Boolean value True to the Int64 value 1.\n      //    Converted the Int32 value -12 to the Int64 value -12.\n      //    Converted the Int32 value 163 to the Int64 value 163.\n      //    Converted the Int32 value 935 to the Int64 value 935.\n      //    Converted the Char value x to the Int64 value 120.\n      //    No conversion to an Int64 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      //    Converted the String value 104 to the Int64 value 104.\n      //    The String value 103.0 is not in a recognizable format.\n      //    Converted the String value -1 to the Int64 value -1.\n      //    The String value 1.00e2 is not in a recognizable format.\n      //    The String value One is not in a recognizable format.\n      //    Converted the Double value 100 to the Int64 value 100.\n      //    The Double value 1.63E+43 is outside the range of the Int64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#8\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, #5/12/2009#, _\n                                 &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2, 16.3e42}\n      Dim result As Long\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int64 type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to an Int64 exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to the Int64 value 1.\n      &#39;    Converted the Int64 value -12 to the Int64 value -12.\n      &#39;    Converted the Int64 value 163 to the Int64 value 163.\n      &#39;    Converted the Int64 value 935 to the Int64 value 935.\n      &#39;    Converted the Char value x to the Int64 value 120.\n      &#39;    No conversion to an Int64 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      &#39;    Converted the String value 104 to the Int64 value 104.\n      &#39;    The String value 103.0 is not in a recognizable format.\n      &#39;    Converted the String value -1 to the Int64 value -1.\n      &#39;    The String value 1.00e2 is not in a recognizable format.\n      &#39;    The String value One is not in a recognizable format.\n      &#39;    Converted the Double value 100 to the Int64 value 100.\n      &#39;    The Double value 1.63E+43 is outside the range of the Int64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a signed byte array to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#9\">      sbyte[] numbers = { SByte.MinValue, -1, 0, 10, SByte.MaxValue };\n      long result;\n      \n      foreach (sbyte number in numbers)\n      {\n         result = Convert.ToInt64(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           number.GetType().Name, number,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //       Converted the SByte value -128 to the Int64 value -128.\n      //       Converted the SByte value -1 to the Int64 value -1.\n      //       Converted the SByte value 0 to the Int64 value 0.\n      //       Converted the SByte value 10 to the Int64 value 10.\n      //       Converted the SByte value 127 to the Int64 value 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#9\">      Dim numbers() As SByte = { SByte.MinValue, -1, 0, 10, SByte.MaxValue }\n      Dim result As Long\n      \n      For Each number As SByte In numbers\n         result = Convert.ToInt64(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the SByte value -128 to the Int64 value -128.\n      &#39;       Converted the SByte value -1 to the Int64 value -1.\n      &#39;       Converted the SByte value 0 to the Int64 value 0.\n      &#39;       Converted the SByte value 10 to the Int64 value 10.\n      &#39;       Converted the SByte value 127 to the Int64 value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 64-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or less than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#10\">      float[] values= { Single.MinValue, -1.38e10f, -1023.299f, -12.98f,\n                        0f, 9.113e-16f, 103.919f, 17834.191f, Single.MaxValue };\n      long result;\n      \n      foreach (float value in values)\n      {\n         try {\n            result = Convert.ToInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int64 type.&quot;, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    -3.40282346638529E+38 is outside the range of the Int64 type.\n      //    -13799999488 is outside the range of the Int64 type.\n      //    Converted the Double value -1023.29901123047 to the Int64 value -1023.\n      //    Converted the Double value -12.9799995422363 to the Int64 value -13.\n      //    Converted the Double value 0 to the Int64 value 0.\n      //    Converted the Double value 9.11299983940444E-16 to the Int64 value 0.\n      //    Converted the Double value 103.918998718262 to the Int64 value 104.\n      //    Converted the Double value 17834.19140625 to the Int64 value 17834.\n      //    3.40282346638529E+38 is outside the range of the Int64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#10\">      Dim values() As Single = { Single.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Single.MaxValue }\n      Dim result As Long\n      \n      For Each value As Single In values\n         Try\n            result = Convert.ToInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int64 type.&quot;, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    -3.40282346638529E+38 is outside the range of the Int64 type.\n      &#39;    -13799999488 is outside the range of the Int64 type.\n      &#39;    Converted the Double value -1023.29901123047 to the Int64 value -1023.\n      &#39;    Converted the Double value -12.9799995422363 to the Int64 value -13.\n      &#39;    Converted the Double value 0 to the Int64 value 0.\n      &#39;    Converted the Double value 9.11299983940444E-16 to the Int64 value 0.\n      &#39;    Converted the Double value 103.918998718262 to the Int64 value 104.\n      &#39;    Converted the Double value 17834.19140625 to the Int64 value 17834.\n      &#39;    3.40282346638529E+38 is outside the range of the Int64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToInt64 method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.int64#System_Int64_Parse_System_String_\" data-linktype=\"relative-path\">System.Int64.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.int64#System_Int64_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of numeric strings to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#11\">      string[] values = { &quot;One&quot;, &quot;1.34e28&quot;, &quot;-26.87&quot;, &quot;-18&quot;, &quot;-6.00&quot;,\n                          &quot; 0&quot;, &quot;137&quot;, &quot;1601.9&quot;, Int32.MaxValue.ToString() };\n      long result;\n      \n      foreach (string value in values)\n      {\n         try {\n            result = Convert.ToInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the Int64 type.&quot;, value);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    The String value &#39;One&#39; is not in a recognizable format.\n      //    The String value &#39;1.34e28&#39; is not in a recognizable format.\n      //    The String value &#39;-26.87&#39; is not in a recognizable format.\n      //    Converted the String value &#39;-18&#39; to the Int64 value -18.\n      //    The String value &#39;-6.00&#39; is not in a recognizable format.\n      //    Converted the String value &#39; 0&#39; to the Int64 value 0.\n      //    Converted the String value &#39;137&#39; to the Int64 value 137.\n      //    The String value &#39;1601.9&#39; is not in a recognizable format.\n      //    Converted the String value &#39;2147483647&#39; to the Int64 value 2147483647.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#11\">      Dim values() As String = { &quot;One&quot;, &quot;1.34e28&quot;, &quot;-26.87&quot;, &quot;-18&quot;, &quot;-6.00&quot;, _\n                                 &quot; 0&quot;, &quot;137&quot;, &quot;1601.9&quot;, Int32.MaxValue.ToString() }\n      Dim result As Long\n      \n      For Each value As String In values\n         Try\n            result = Convert.ToInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the Int64 type.&quot;, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    The String value &#39;One&#39; is not in a recognizable format.\n      &#39;    The String value &#39;1.34e28&#39; is not in a recognizable format.\n      &#39;    The String value &#39;-26.87&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39;-18&#39; to the Int64 value -18.\n      &#39;    The String value &#39;-6.00&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39; 0&#39; to the Int64 value 0.\n      &#39;    Converted the String value &#39;137&#39; to the Int64 value 137.\n      &#39;    The String value &#39;1601.9&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39;2147483647&#39; to the Int64 value 2147483647.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of 16-bit unsigned integers to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#12\">      ushort[] numbers = { UInt16.MinValue, 121, 340, UInt16.MaxValue };\n      long result;\n      foreach (ushort number in numbers)\n      {\n         try {\n            result = Convert.ToInt64(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int64 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt16 value 0 to the Int64 value 0.\n      //    Converted the UInt16 value 121 to the Int64 value 121.\n      //    Converted the UInt16 value 340 to the Int64 value 340.\n      //    Converted the UInt16 value 65535 to the Int64 value 65535.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#12\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 340, UInt16.MaxValue }\n      Dim result As Long\n      For Each number As UShort In numbers\n         Try\n            result = Convert.ToInt64(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int64 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt16 value 0 to the Int64 value 0.\n      &#39;    Converted the UInt16 value 121 to the Int64 value 121.\n      &#39;    Converted the UInt16 value 340 to the Int64 value 340.\n      &#39;    Converted the UInt16 value 65535 to the Int64 value 65535.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned integers to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#13\">      uint[] numbers = { UInt32.MinValue, 121, 340, UInt32.MaxValue };\n      long result;\n      foreach (uint number in numbers)\n      {\n         result = Convert.ToInt64(number);\n         Console.WriteLine(&quot;Converted the {0} value {1:N0} to the {2} value {3:N0}.&quot;,\n                           number.GetType().Name, number,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the UInt32 value 0 to the Int64 value 0.\n      //    Converted the UInt32 value 121 to the Int64 value 121.\n      //    Converted the UInt32 value 340 to the Int64 value 340.\n      //    Converted the UInt32 value 4,294,967,295 to the Int64 value 4,294,967,295.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#13\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 340, UInt32.MaxValue }\n      Dim result As Long\n      For Each number As UInteger In numbers\n         result = Convert.ToInt64(number)\n         Console.WriteLine(&quot;Converted the {0} value {1:N0} to the {2} value {3:N0}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt32 value 0 to the Int64 value 0.\n      &#39;    Converted the UInt32 value 121 to the Int64 value 121.\n      &#39;    Converted the UInt32 value 340 to the Int64 value 340.\n      &#39;    Converted the UInt32 value 4,294,967,295 to the Int64 value 4,294,967,295.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned long integers to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#14\">      ulong[] numbers = { UInt64.MinValue, 121, 340, UInt64.MaxValue };\n      long result;\n      foreach (ulong number in numbers)\n      {\n         try {\n            result = Convert.ToInt64(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int64 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt64 value 0 to a Int32 value 0.\n      //    Converted the UInt64 value 121 to a Int32 value 121.\n      //    Converted the UInt64 value 340 to a Int32 value 340.\n      //    The UInt64 value 18446744073709551615 is outside the range of the Int64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#14\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 340, UInt64.MaxValue }\n      Dim result As Long\n      \n      For Each number As ULong In numbers\n         Try\n            result = Convert.ToInt64(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Int64 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value 0 to the Int64 value 0.\n      &#39;    Converted the UInt64 value 121 to the Int64 value 121.\n      &#39;    Converted the UInt64 value 340 to the Int64 value 340.\n      &#39;    The UInt64 value 18446744073709551615 is outside the range of the Int64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int64#System_Int64_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.int64#System_Int64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToInt64_\" data-linktype=\"relative-path\">ToInt64</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> and a class that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>. Objects of the class that implements <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> hold an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. An object of each class is passed to the <code>ToInt64</code> method. This method returns an average of the array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values, using the object that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> to determine how to calculate the average.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToXXX_Object_IFP#1\">using System;\nusing System.Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum AverageType : short\n{\n    None = 0,\n    GeometricMean = 1,\n    ArithmeticMean = 2,\n    Median = 3\n};\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\npublic class AverageInfo : IFormatProvider\n{\n    protected AverageType AvgType;\n\n    // Specify the type of averaging in the constructor.\n    public AverageInfo( AverageType avgType )\n    {\n        this.AvgType = avgType;\n    }\n\n    // This method returns a reference to the containing object \n    // if an object of AverageInfo type is requested. \n    public object GetFormat( Type argType )\n    {\n        if ( argType == typeof( AverageInfo ) )\n            return this;\n        else\n            return null;\n    }\n\n    // Use this property to set or get the type of averaging.\n    public AverageType TypeOfAverage        \n    {\n        get { return this.AvgType; }\n        set { this.AvgType = value; }\n    }\n}\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \npublic class DataSet : IConvertible\n{\n    protected ArrayList     data;\n    protected AverageInfo   defaultProvider;\n        \n    // Construct the object and add an initial list of values.\n    // Create a default format provider.\n    public DataSet( params double[ ] values )\n    {\n        data = new ArrayList( values );\n        defaultProvider = \n            new AverageInfo( AverageType.ArithmeticMean );\n    }\n        \n    // Add additional values with this method.\n    public int Add( double value )\n    {\n        data.Add( value );\n        return data.Count;\n    }\n        \n    // Get, set, and add values with this indexer property.\n    public double this[ int index ]        \n    {\n        get\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                return (double)data[ index ];\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.get] Index out of range.&quot; );\n        }\n        set\n        {\n            if( index &gt;= 0 &amp;&amp; index &lt; data.Count )\n                data[ index ] = value;\n\n            else if( index == data.Count )\n                data.Add( value );\n            else\n                throw new InvalidOperationException(\n                    &quot;[DataSet.set] Index out of range.&quot; );\n        }\n    }\n        \n    // This property returns the number of elements in the object.\n    public int Count        \n    {\n        get { return data.Count; }\n    }\n\n    // This method calculates the average of the object&#39;s elements.\n    protected double Average( AverageType avgType )\n    {\n        double  SumProd;\n\n        if( data.Count == 0 ) \n            return 0.0;\n\n        switch( avgType )\n        {\n            case AverageType.GeometricMean:\n\n                SumProd = 1.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd *= (double)data[ Index ];\n                \n                // This calculation will not fail with negative \n                // elements.\n                return Math.Sign( SumProd ) * Math.Pow( \n                    Math.Abs( SumProd ), 1.0 / data.Count );\n\n            case AverageType.ArithmeticMean:\n\n                SumProd = 0.0;\n                for( int Index = 0; Index &lt; data.Count; Index++ )\n                    SumProd += (double)data[ Index ];\n\n                return SumProd / data.Count;\n\n            case AverageType.Median:\n\n                if( data.Count % 2 == 0 )\n                    return ( (double)data[ data.Count / 2 ] + \n                        (double)data[ data.Count / 2 - 1 ] ) / 2.0;\n                else\n                    return (double)data[ data.Count / 2 ];\n\n            default:\n                return 0.0;\n        }\n    }\n\n    // Get the AverageInfo object from the caller&#39;s format provider,\n    // or use the local default.\n    protected AverageInfo GetAverageInfo( IFormatProvider provider )\n    {\n        AverageInfo avgInfo = null;\n\n        if( provider != null )\n            avgInfo = (AverageInfo)provider.GetFormat( \n                typeof( AverageInfo ) );\n\n        if ( avgInfo == null )\n            return defaultProvider;\n        else\n            return avgInfo;\n    }\n\n    // Calculate the average and limit the range.\n    protected double CalcNLimitAverage( double min, double max, \n        IFormatProvider provider )\n    {\n        // Get the format provider and calculate the average.\n        AverageInfo avgInfo = GetAverageInfo( provider );\n        double avg = Average( avgInfo.TypeOfAverage );\n\n        // Limit the range, based on the minimum and maximum values \n        // for the type.\n        return avg &gt; max ? max : avg &lt; min ? min : avg;\n\n    }\n\n    // The following elements are required by IConvertible.\n\n    // None of these conversion functions throw exceptions. When\n    // the data is out of range for the type, the appropriate\n    // MinValue or MaxValue is used.\n    public TypeCode GetTypeCode( )\n    {\n        return TypeCode.Object;\n    }\n\n    public bool ToBoolean( IFormatProvider provider )\n    {\n        // ToBoolean is false if the dataset is empty.\n        if( data.Count &lt;= 0 )\n            return false;\n\n        // For median averaging, ToBoolean is true if any \n        // non-discarded elements are nonzero.\n        else if( AverageType.Median == \n            GetAverageInfo( provider ).TypeOfAverage )\n        {\n            if (data.Count % 2 == 0 )\n                return ( (double)data[ data.Count / 2 ] != 0.0 || \n                    (double)data[ data.Count / 2 - 1 ] != 0.0 );\n            else\n                return (double)data[ data.Count / 2 ] != 0.0;\n        }\n\n        // For arithmetic or geometric mean averaging, ToBoolean is \n        // true if any element of the dataset is nonzero.  \n        else\n        {\n            for( int Index = 0; Index &lt; data.Count; Index++ )\n                if( (double)data[ Index ] != 0.0 ) \n                    return true;\n            return false;\n        }\n    }\n\n    public byte ToByte( IFormatProvider provider )\n    {\n        return Convert.ToByte( CalcNLimitAverage( \n            Byte.MinValue, Byte.MaxValue, provider ) );\n    }\n\n    public char ToChar( IFormatProvider provider )\n    {\n        return Convert.ToChar( Convert.ToUInt16( CalcNLimitAverage( \n            Char.MinValue, Char.MaxValue, provider ) ) );\n    }\n\n    // Convert to DateTime by adding the calculated average as \n    // seconds to the current date and time. A valid DateTime is \n    // always returned.\n    public DateTime ToDateTime( IFormatProvider provider )\n    {\n        double seconds = \n            Average( GetAverageInfo( provider ).TypeOfAverage );\n        try\n        {\n            return DateTime.Now.AddSeconds( seconds );\n        }\n        catch( ArgumentOutOfRangeException )\n        {\n            return seconds &lt; 0.0 ? DateTime.MinValue : DateTime.MaxValue;\n        }\n    }\n\n    public decimal ToDecimal( IFormatProvider provider )\n    {\n        // The Double conversion rounds Decimal.MinValue and \n        // Decimal.MaxValue to invalid Decimal values, so the \n        // following limits must be used.\n        return Convert.ToDecimal( CalcNLimitAverage( \n            -79228162514264330000000000000.0, \n            79228162514264330000000000000.0, provider ) );\n    }\n\n    public double ToDouble( IFormatProvider provider )\n    {\n        return Average( GetAverageInfo(provider).TypeOfAverage );\n    }\n\n    public short ToInt16( IFormatProvider provider )\n    {\n        return Convert.ToInt16( CalcNLimitAverage( \n            Int16.MinValue, Int16.MaxValue, provider ) );\n    }\n\n    public int ToInt32( IFormatProvider provider )\n    {\n        return Convert.ToInt32( CalcNLimitAverage( \n            Int32.MinValue, Int32.MaxValue, provider ) );\n    }\n\n    public long ToInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds Int64.MinValue and \n        // Int64.MaxValue to invalid Int64 values, so the following \n        // limits must be used.\n        return Convert.ToInt64( CalcNLimitAverage( \n            -9223372036854775000, 9223372036854775000, provider ) );\n    }\n\n    public SByte ToSByte( IFormatProvider provider )\n    {\n        return Convert.ToSByte( CalcNLimitAverage( \n            SByte.MinValue, SByte.MaxValue, provider ) );\n    }\n\n    public float ToSingle( IFormatProvider provider )\n    {\n        return Convert.ToSingle( CalcNLimitAverage( \n            Single.MinValue, Single.MaxValue, provider ) );\n    }\n\n    public UInt16 ToUInt16( IFormatProvider provider )\n    {\n        return Convert.ToUInt16( CalcNLimitAverage( \n            UInt16.MinValue, UInt16.MaxValue, provider ) );\n    }\n\n    public UInt32 ToUInt32( IFormatProvider provider )\n    {\n        return Convert.ToUInt32( CalcNLimitAverage( \n            UInt32.MinValue, UInt32.MaxValue, provider ) );\n    }\n\n    public UInt64 ToUInt64( IFormatProvider provider )\n    {\n        // The Double conversion rounds UInt64.MaxValue to an invalid\n        // UInt64 value, so the following limit must be used.\n        return Convert.ToUInt64( CalcNLimitAverage( \n            0, 18446744073709550000.0, provider ) );\n    }\n\n    public object ToType( Type conversionType, \n        IFormatProvider provider )\n    {\n        return Convert.ChangeType( Average( \n            GetAverageInfo( provider ).TypeOfAverage ), \n            conversionType );\n    }\n\n    public string ToString( IFormatProvider provider )\n    {\n        AverageType avgType = GetAverageInfo( provider ).TypeOfAverage;\n        return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, \n            Average( avgType ) );\n    }\n}\n   \nclass IConvertibleProviderDemo\n{\n    // Display a DataSet with three different format providers.\n    public static void DisplayDataSet( DataSet ds )\n    {\n        string      fmt    = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n        AverageInfo median = new AverageInfo( AverageType.Median );\n        AverageInfo geMean = \n            new AverageInfo( AverageType.GeometricMean );\n\n         // Display the dataset elements.\n        if( ds.Count &gt; 0 )\n        {\n            Console.Write( &quot;<br>DataSet: [{0}&quot;, ds[ 0 ] );\n            for( int iX = 1; iX &lt; ds.Count; iX++ )\n                Console.Write( &quot;, {0}&quot;, ds[ iX ] );\n            Console.WriteLine( &quot;]<br>&quot; );\n        }\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, \n            &quot;Geometric Mean&quot;, &quot;Median&quot;);\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, \n            &quot;--------------&quot;, &quot;------&quot;);\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, \n            Convert.ToBoolean( ds, null ), \n            Convert.ToBoolean( ds, geMean ), \n            Convert.ToBoolean( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToByte&quot;, \n            Convert.ToByte( ds, null ), \n            Convert.ToByte( ds, geMean ), \n            Convert.ToByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToChar&quot;, \n            Convert.ToChar( ds, null ), \n            Convert.ToChar( ds, geMean ), \n            Convert.ToChar( ds, median ) );\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; +\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, \n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, null ), \n            Convert.ToDateTime( ds, geMean ), \n            Convert.ToDateTime( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, \n            Convert.ToDecimal( ds, null ), \n            Convert.ToDecimal( ds, geMean ), \n            Convert.ToDecimal( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, \n            Convert.ToDouble( ds, null ), \n            Convert.ToDouble( ds, geMean ), \n            Convert.ToDouble( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, \n            Convert.ToInt16( ds, null ), \n            Convert.ToInt16( ds, geMean ), \n            Convert.ToInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, \n            Convert.ToInt32( ds, null ), \n            Convert.ToInt32( ds, geMean ), \n            Convert.ToInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, \n            Convert.ToInt64( ds, null ), \n            Convert.ToInt64( ds, geMean ), \n            Convert.ToInt64( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, \n            Convert.ToSByte( ds, null ), \n            Convert.ToSByte( ds, geMean ), \n            Convert.ToSByte( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, \n            Convert.ToSingle( ds, null ), \n            Convert.ToSingle( ds, geMean ), \n            Convert.ToSingle( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, \n            Convert.ToUInt16( ds, null ), \n            Convert.ToUInt16( ds, geMean ), \n            Convert.ToUInt16( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, \n            Convert.ToUInt32( ds, null ), \n            Convert.ToUInt32( ds, geMean ), \n            Convert.ToUInt32( ds, median ) );\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, \n            Convert.ToUInt64( ds, null ), \n            Convert.ToUInt64( ds, geMean ), \n            Convert.ToUInt64( ds, median ) );\n    }\n   \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods &quot; +\n            &quot;<br>generates the following output. The example &quot; +\n            &quot;displays the values <br>returned by the methods, &quot; +\n            &quot;using several IFormatProvider objects.<br>&quot; );\n          \n        DataSet ds1 = new DataSet( \n            10.5, 22.2, 45.9, 88.7, 156.05, 297.6 );\n        DisplayDataSet( ds1 );\n          \n        DataSet ds2 = new DataSet( \n            359999.95, 425000, 499999.5, 775000, 1695000 );\n        DisplayDataSet( ds2 );\n    }\n}\n\n/*\nThis example of the Convert.To&lt;Type&gt;( object, IFormatProvider ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:04:12 2003-05-13 15:03:28 2003-05-13 15:03:35\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert.                 Default      Geometric Mean              Median\n--------                 -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 07:39:08 2003-05-20 22:28:45 2003-05-19 09:55:48\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Convert.ToXXX_Object_IFP#1\">using namespace System;\nusing namespace System::Collections;\n\n// Define the types of averaging available in the class \n// implementing IConvertible.\npublic enum class AverageType : short\n{\n   None = 0,\n   GeometricMean = 1,\n   ArithmeticMean = 2,\n   Median = 3\n};\n\n\n// Pass an instance of this class to methods that require an \n// IFormatProvider. The class instance determines the type of \n// average to calculate.\nref class AverageInfo: public IFormatProvider\n{\nprotected:\n   AverageType AvgType;\n\npublic:\n\n   // Specify the type of averaging in the constructor.\n   AverageInfo( AverageType avgType )\n   {\n      this-&gt;AvgType = avgType;\n   }\n\n\n   // This method returns a reference to the containing object \n   // if an object of AverageInfo type is requested. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      if ( argType == AverageInfo::typeid)\n            return this;\n      else\n            return (Object^)0;\n   }\n\n\n   property AverageType TypeOfAverage \n   {\n\n      // Use this property to set or get the type of averaging.\n      AverageType get()\n      {\n         return this-&gt;AvgType;\n      }\n\n      void set( AverageType value )\n      {\n         this-&gt;AvgType = value;\n      }\n\n   }\n\n};\n\n\n// This class encapsulates an array of double values and implements \n// the IConvertible interface. Most of the IConvertible methods \n// return an average of the array elements in one of three types: \n// arithmetic mean, geometric mean, or median. \nref class DataSet: public IConvertible\n{\nprivate:\n   static Object^ null = nullptr;\n\nprotected:\n   ArrayList^ data;\n   AverageInfo^ defaultProvider;\n\n   // This method unboxes a boxed double.\n   double UnBoxDouble( Object^ obj )\n   {\n      return  *static_cast&lt;double^&gt;(obj);\n   }\n\n\npublic:\n\n   // Construct the object and add an initial list of values.\n   // Create a default format provider.\n   DataSet( ... array&lt;Double&gt;^values )\n   {\n      data = gcnew ArrayList( (Array^)values );\n      defaultProvider = gcnew AverageInfo( AverageType::ArithmeticMean );\n   }\n\n\n   // Add additional values with this method.\n   int Add( double value )\n   {\n      data-&gt;Add( value );\n      return data-&gt;Count;\n   }\n\n\n   property double Item[ int ]\n   {\n\n      // Get, set, and add values with this indexer property.\n      double get( int index )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  return UnBoxDouble( data[ index ] );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.get] Index out of range.&quot; );\n      }\n\n      void set( int index, double value )\n      {\n         if ( index &gt;= 0 &amp;&amp; index &lt; data-&gt;Count )\n                  data[ index ] = value;\n         else\n         if ( index == data-&gt;Count )\n                  data-&gt;Add( value );\n         else\n                  throw gcnew InvalidOperationException( &quot;[DataSet.set] Index out of range.&quot; );\n      }\n\n   }\n\n   property int Count \n   {\n\n      // This property returns the number of elements in the object.\n      int get()\n      {\n         return data-&gt;Count;\n      }\n\n   }\n\nprotected:\n\n   // This method calculates the average of the object&#39;s elements.\n   double Average( AverageType avgType )\n   {\n      double SumProd;\n      if ( data-&gt;Count == 0 )\n            return 0.0;\n\n      switch ( avgType )\n      {\n         case AverageType::GeometricMean:\n            SumProd = 1.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd *= UnBoxDouble( data[ Index ] );\n            \n            // This calculation will not fail with negative \n            // elements.\n            return Math::Sign( SumProd ) * Math::Pow( Math::Abs( SumProd ), 1.0 / data-&gt;Count );\n\n         case AverageType::ArithmeticMean:\n            SumProd = 0.0;\n            for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n               SumProd += UnBoxDouble( data[ Index ] );\n            return SumProd / data-&gt;Count;\n\n         case AverageType::Median:\n            if ( data-&gt;Count % 2 == 0 )\n                        return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) + UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] )) / 2.0;\n            else\n                        return UnBoxDouble( data[ data-&gt;Count / 2 ] );\n\n         default:\n            return 0.0;\n      }\n   }\n\n\n   // Get the AverageInfo object from the caller&#39;s format provider,\n   // or use the local default.\n   AverageInfo^ GetAverageInfo( IFormatProvider^ provider )\n   {\n      AverageInfo^ avgInfo = nullptr;\n      if ( provider != nullptr )\n            avgInfo = static_cast&lt;AverageInfo^&gt;(provider-&gt;GetFormat( AverageInfo::typeid ));\n\n      if ( avgInfo == nullptr )\n            return defaultProvider;\n      else\n            return avgInfo;\n   }\n\n\n   // Calculate the average and limit the range.\n   double CalcNLimitAverage( double min, double max, IFormatProvider^ provider )\n   {\n      \n      // Get the format provider and calculate the average.\n      AverageInfo^ avgInfo = GetAverageInfo( provider );\n      double avg = Average( avgInfo-&gt;TypeOfAverage );\n      \n      // Limit the range, based on the minimum and maximum values \n      // for the type.\n      return avg &gt; max ? max : avg &lt; min ? min : avg;\n   }\n\n\npublic:\n\n   // The following elements are required by IConvertible.\n   // None of these conversion functions throw exceptions. When\n   // the data is out of range for the type, the appropriate\n   // MinValue or MaxValue is used.\n   virtual TypeCode GetTypeCode()\n   {\n      return TypeCode::Object;\n   }\n\n   virtual bool ToBoolean( IFormatProvider^ provider )\n   {\n      \n      // ToBoolean is false if the dataset is empty.\n      if ( data-&gt;Count &lt;= 0 )\n            return false;\n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      else\n      \n      // For median averaging, ToBoolean is true if any \n      // non-discarded elements are nonzero.\n      if ( AverageType::Median == GetAverageInfo( provider )-&gt;TypeOfAverage )\n      {\n         if ( data-&gt;Count % 2 == 0 )\n                  return (UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0 || UnBoxDouble( data[ data-&gt;Count / 2 - 1 ] ) != 0.0);\n         else\n                  return UnBoxDouble( data[ data-&gt;Count / 2 ] ) != 0.0;\n      }\n      // For arithmetic or geometric mean averaging, ToBoolean is \n      // true if any element of the dataset is nonzero.  \n      else\n      {\n         for ( int Index = 0; Index &lt; data-&gt;Count; Index++ )\n            if ( UnBoxDouble( data[ Index ] ) != 0.0 )\n                        return true;\n         return false;\n      }\n   }\n\n   virtual Byte ToByte( IFormatProvider^ provider )\n   {\n      return Convert::ToByte( CalcNLimitAverage( Byte::MinValue, Byte::MaxValue, provider ) );\n   }\n\n   virtual Char ToChar( IFormatProvider^ provider )\n   {\n      return Convert::ToChar( Convert::ToUInt16( CalcNLimitAverage( Char::MinValue, Char::MaxValue, provider ) ) );\n   }\n\n\n   // Convert to DateTime by adding the calculated average as \n   // seconds to the current date and time. A valid DateTime is \n   // always returned.\n   virtual DateTime ToDateTime( IFormatProvider^ provider )\n   {\n      double seconds = Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n      try\n      {\n         return DateTime::Now.AddSeconds( seconds );\n      }\n      catch ( ArgumentOutOfRangeException^ ) \n      {\n         return seconds &lt; 0.0 ? DateTime::MinValue : DateTime::MaxValue;\n      }\n\n   }\n\n   virtual Decimal ToDecimal( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Decimal.MinValue and \n      // Decimal.MaxValue to invalid Decimal values, so the \n      // following limits must be used.\n      return Convert::ToDecimal( CalcNLimitAverage(  -79228162514264330000000000000.0, 79228162514264330000000000000.0, provider ) );\n   }\n\n   virtual double ToDouble( IFormatProvider^ provider )\n   {\n      return Average( GetAverageInfo( provider )-&gt;TypeOfAverage );\n   }\n\n   virtual short ToInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToInt16( CalcNLimitAverage( Int16::MinValue, Int16::MaxValue, provider ) );\n   }\n\n   virtual int ToInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToInt32( CalcNLimitAverage( Int32::MinValue, Int32::MaxValue, provider ) );\n   }\n\n   virtual __int64 ToInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds Int64.MinValue and \n      // Int64.MaxValue to invalid Int64 values, so the following \n      // limits must be used.\n      return Convert::ToInt64( CalcNLimitAverage(  -9223372036854775000, 9223372036854775000, provider ) );\n   }\n\n   virtual signed char ToSByte( IFormatProvider^ provider )\n   {\n      return Convert::ToSByte( CalcNLimitAverage( SByte::MinValue, SByte::MaxValue, provider ) );\n   }\n\n   virtual float ToSingle( IFormatProvider^ provider )\n   {\n      return Convert::ToSingle( CalcNLimitAverage( Single::MinValue, Single::MaxValue, provider ) );\n   }\n\n   virtual UInt16 ToUInt16( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt16( CalcNLimitAverage( UInt16::MinValue, UInt16::MaxValue, provider ) );\n   }\n\n   virtual UInt32 ToUInt32( IFormatProvider^ provider )\n   {\n      return Convert::ToUInt32( CalcNLimitAverage( UInt32::MinValue, UInt32::MaxValue, provider ) );\n   }\n\n   virtual UInt64 ToUInt64( IFormatProvider^ provider )\n   {\n      \n      // The Double conversion rounds UInt64.MaxValue to an invalid\n      // UInt64 value, so the following limit must be used.\n      return Convert::ToUInt64( CalcNLimitAverage( 0, 18446744073709550000.0, provider ) );\n   }\n\n   virtual Object^ ToType( Type^ conversionType, IFormatProvider^ provider )\n   {\n      return Convert::ChangeType( Average( GetAverageInfo( provider )-&gt;TypeOfAverage ), conversionType );\n   }\n\n   virtual String^ ToString( IFormatProvider^ provider )\n   {\n      AverageType avgType = GetAverageInfo( provider )-&gt;TypeOfAverage;\n      return String::Format( &quot;( {0}: {1:G10} )&quot;, avgType, Average( avgType ) );\n   }\n\n};\n\n\n// Display a DataSet with three different format providers.\nvoid DisplayDataSet( DataSet^ ds )\n{\n   IFormatProvider^ null = nullptr;\n   String^ fmt = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;;\n   AverageInfo^ median = gcnew AverageInfo( AverageType::Median );\n   AverageInfo^ geMean = gcnew AverageInfo( AverageType::GeometricMean );\n   \n   // Display the dataset elements.\n   if ( ds-&gt;Count &gt; 0 )\n   {\n      Console::Write( &quot;<br>DataSet: [{0}&quot;, ds-&gt;Item[ 0 ] );\n      for ( int iX = 1; iX &lt; ds-&gt;Count; iX++ )\n         Console::Write( &quot;, {0}&quot;, ds-&gt;Item[ iX ] );\n      Console::WriteLine( &quot;]<br>&quot; );\n   }\n\n   Console::WriteLine( fmt, &quot;Convert::&quot;, &quot;Default&quot;, &quot;Geometric Mean&quot;, &quot;Median&quot; );\n   Console::WriteLine( fmt, &quot;---------&quot;, &quot;-------&quot;, &quot;--------------&quot;, &quot;------&quot; );\n   Console::WriteLine( fmt, &quot;ToBoolean&quot;, Convert::ToBoolean( ds, null ), Convert::ToBoolean( ds, geMean ), Convert::ToBoolean( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToByte&quot;, Convert::ToByte( ds, null ), Convert::ToByte( ds, geMean ), Convert::ToByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToChar&quot;, Convert::ToChar( ds, null ), Convert::ToChar( ds, geMean ), Convert::ToChar( ds, median ) );\n   Console::WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot;\n   &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, &quot;ToDateTime&quot;, Convert::ToDateTime( ds, null ), Convert::ToDateTime( ds, geMean ), Convert::ToDateTime( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDecimal&quot;, Convert::ToDecimal( ds, null ), Convert::ToDecimal( ds, geMean ), Convert::ToDecimal( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToDouble&quot;, Convert::ToDouble( ds, null ), Convert::ToDouble( ds, geMean ), Convert::ToDouble( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt16&quot;, Convert::ToInt16( ds, null ), Convert::ToInt16( ds, geMean ), Convert::ToInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt32&quot;, Convert::ToInt32( ds, null ), Convert::ToInt32( ds, geMean ), Convert::ToInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToInt64&quot;, Convert::ToInt64( ds, null ), Convert::ToInt64( ds, geMean ), Convert::ToInt64( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSByte&quot;, Convert::ToSByte( ds, null ), Convert::ToSByte( ds, geMean ), Convert::ToSByte( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToSingle&quot;, Convert::ToSingle( ds, null ), Convert::ToSingle( ds, geMean ), Convert::ToSingle( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt16&quot;, Convert::ToUInt16( ds, null ), Convert::ToUInt16( ds, geMean ), Convert::ToUInt16( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt32&quot;, Convert::ToUInt32( ds, null ), Convert::ToUInt32( ds, geMean ), Convert::ToUInt32( ds, median ) );\n   Console::WriteLine( fmt, &quot;ToUInt64&quot;, Convert::ToUInt64( ds, null ), Convert::ToUInt64( ds, geMean ), Convert::ToUInt64( ds, median ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods &quot;\n   &quot;<br>generates the following output. The example &quot;\n   &quot;displays the values <br>returned by the methods, &quot;\n   &quot;using several IFormatProvider objects.<br>&quot; );\n   \n   // To call a [ParamArray] method in C++, you cannot just\n   // list the parameters, you need to build an array.\n   array&lt;Double&gt;^dataElem = gcnew array&lt;Double&gt;(6);\n   dataElem[ 0 ] = 10.5;\n   dataElem[ 1 ] = 22.2;\n   dataElem[ 2 ] = 45.9;\n   dataElem[ 3 ] = 88.7;\n   dataElem[ 4 ] = 156.05;\n   dataElem[ 5 ] = 297.6;\n   DataSet^ ds1 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds1 );\n   dataElem = gcnew array&lt;Double&gt;(5);\n   dataElem[ 0 ] = 359999.95;\n   dataElem[ 1 ] = 425000;\n   dataElem[ 2 ] = 499999.5;\n   dataElem[ 3 ] = 775000;\n   dataElem[ 4 ] = 1695000;\n   DataSet^ ds2 = gcnew DataSet( dataElem );\n   DisplayDataSet( ds2 );\n}\n\n/*\nThis example of the Convert::To&lt;Type&gt;( Object*, IFormatProvider* ) methods\ngenerates the following output. The example displays the values\nreturned by the methods, using several IFormatProvider objects.\n\nDataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       103                  59                  67\nToChar                         g                   ;                   C\nToDateTime   2003-05-13 15:30:23 2003-05-13 15:29:39 2003-05-13 15:29:47\nToDecimal       103.491666666667    59.4332135445164                67.3\nToDouble        103.491666666667    59.4332135445164                67.3\nToInt16                      103                  59                  67\nToInt32                      103                  59                  67\nToInt64                      103                  59                  67\nToSByte                      103                  59                  67\nToSingle                103.4917            59.43321                67.3\nToUInt16                     103                  59                  67\nToUInt32                     103                  59                  67\nToUInt64                     103                  59                  67\n\nDataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n\nConvert::                Default      Geometric Mean              Median\n---------                -------      --------------              ------\nToBoolean                   True                True                True\nToByte                       255                 255                 255\nToChar                         ?                   ?                   ?\nToDateTime   2003-05-22 08:05:19 2003-05-20 22:54:57 2003-05-19 10:21:59\nToDecimal              750999.89    631577.237188435            499999.5\nToDouble               750999.89    631577.237188435            499999.5\nToInt16                    32767               32767               32767\nToInt32                   751000              631577              500000\nToInt64                   751000              631577              500000\nToSByte                      127                 127                 127\nToSingle                750999.9            631577.3            499999.5\nToUInt16                   65535               65535               65535\nToUInt32                  751000              631577              500000\nToUInt64                  751000              631577              500000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToXXX_Object_IFP#1\">Imports System.Collections\n\nModule IConvertibleProviderDemo\n\n    &#39; Define the types of averaging available in the class \n    &#39; implementing IConvertible.\n    Enum AverageType as Short\n        None = 0\n        GeometricMean = 1\n        ArithmeticMean = 2\n        Median = 3\n    End Enum\n\n    &#39; Pass an instance of this class to methods that require an \n    &#39; IFormatProvider. The class instance determines the type of \n    &#39; average to calculate.\n    Public Class AverageInfo\n        Implements IFormatProvider\n\n        Protected  AvgType      As AverageType\n\n        &#39; Specify the type of averaging in the constructor.\n        Public Sub New( avgType As AverageType )\n            Me.AvgType = avgType\n        End Sub\n\n        &#39; This method returns a reference to the containing object \n        &#39; if an object of AverageInfo type is requested. \n        Public Function GetFormat( argType As Type ) As Object _\n            Implements IFormatProvider.GetFormat\n\n            If argType Is GetType( AverageInfo ) Then\n                Return Me\n            Else\n                Return Nothing\n            End If\n        End Function \n\n        &#39; Use this property to set or get the type of averaging.\n        Public Property TypeOfAverage( ) As AverageType\n            Get\n                Return Me.AvgType\n            End Get\n            Set( ByVal value as AverageType )\n                Me.AvgType = value\n            End Set\n        End Property\n    End Class \n\n    &#39; This class encapsulates an array of Double values and implements \n    &#39; the IConvertible interface. Most of the IConvertible methods \n    &#39; return an average of the array elements in one of three types: \n    &#39; arithmetic mean, geometric mean, or median. \n    Public Class DataSet\n        Implements IConvertible\n\n        Protected data              As ArrayList\n        Protected defaultProvider   As AverageInfo\n           \n        &#39; Construct the object and add an initial list of values.\n        &#39; Create a default format provider.\n        Public Sub New( ParamArray values( ) As Double )\n            data = New ArrayList( values )\n            defaultProvider = New AverageInfo( _\n                AverageType.ArithmeticMean )  \n        End Sub\n           \n        &#39; Add additional values with this method.\n        Public Function Add( value As Double ) As Integer\n            data.Add( value )\n            Return data.Count\n        End Function\n           \n        &#39; Get, set, and add values with this indexer property.\n        Default Public Property Item(index As Integer) As Double\n            Get\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    Return System.Convert.ToDouble( data( index ) )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.get] Index out of range.&quot; )\n                End If\n            End Get\n            Set\n                If index &gt;= 0 AndAlso index &lt; data.Count Then\n                    data( index ) = value\n                 \n                ElseIf index = data.Count Then\n                    data.Add( value )\n                Else\n                    Throw New InvalidOperationException( _\n                        &quot;[DataSet.set] Index out of range.&quot; )\n                End If\n            End Set\n        End Property\n          \n        &#39; This property returns the number of elements in the object.\n        Public ReadOnly Property Count( ) As Integer\n            Get\n                Return data.Count\n            End Get\n        End Property\n\n        &#39; This method calculates the average of the object&#39;s elements.\n        Protected Function Average( ByVal avgType As AverageType ) As Double\n\n            Dim SumProd As Double \n            Dim Index   As Integer\n\n            If data.Count = 0 Then Return 0.0\n\n            Select Case avgType\n                \n                Case AverageType.GeometricMean\n\n                    SumProd = 1.0\n                    For Index = 0 To data.Count - 1\n                        SumProd *= data( Index )\n                    Next Index\n                    \n                    &#39; This calculation will not fail with negative \n                    &#39; elements.\n                    Return Math.Sign( SumProd ) * Math.Pow( _\n                        Math.Abs( SumProd ), 1.0 / data.Count )\n\n                Case AverageType.ArithmeticMean\n\n                    SumProd = 0.0\n                    For Index = 0 To data.Count - 1\n                        SumProd += data( Index )\n                    Next Index\n\n                    Return SumProd / data.Count \n\n                Case AverageType.Median\n\n                    If data.Count Mod 2 = 0 Then\n                        Return ( data( data.Count \\ 2 ) + _\n                            data( data.Count \\ 2 - 1 ) ) / 2.0\n                    Else\n                        Return data( data.Count \\ 2 ) \n                    End If\n            End Select\n        End Function\n\n        &#39; Get the AverageInfo object from the caller&#39;s format \n        &#39; provider, or use the local default.\n        Protected Function GetAverageInfo( _\n            provider As IFormatProvider ) As AverageInfo\n\n            Dim avgInfo As AverageInfo = Nothing\n\n            If Not provider Is Nothing Then\n                avgInfo = provider.GetFormat( GetType( AverageInfo ) )\n            End If\n\n            Return IIf( avgInfo Is Nothing, defaultProvider, avgInfo )\n            \n        End Function           \n\n        &#39; Calculate the average and limit the range.\n        Protected Function CalcNLimitAverage( min As Double, _\n            max As Double, provider as IFormatProvider ) As Double\n\n            &#39; Get the format provider and calculate the average.\n            Dim avgInfo As AverageInfo = GetAverageInfo( provider )\n            Dim avg As Double = Average( avgInfo.TypeOfAverage )\n\n            &#39; Limit the range, based on the minimum and maximum values \n            &#39; for the type.\n            Return IIf( avg &gt; max, max, IIf( avg &lt; min, min, avg ) )\n\n        End Function\n\n        &#39; The following elements are required by IConvertible.\n\n        &#39; None of these conversion functions throw exceptions. When\n        &#39; the data is out of range for the type, the appropriate\n        &#39; MinValue or MaxValue is used.\n        Public Function GetTypeCode( ) As TypeCode _\n            Implements IConvertible.GetTypeCode\n            Return TypeCode.Object\n        End Function\n\n        Function ToBoolean( ByVal provider As IFormatProvider ) As _\n            Boolean Implements IConvertible.ToBoolean\n\n            &#39; ToBoolean is false if the dataset is empty.\n            If data.Count &lt;= 0 Then\n                Return False\n\n            &#39; For median averaging, ToBoolean is true if any \n            &#39; non-discarded elements are nonzero.\n            ElseIf AverageType.Median = _\n                GetAverageInfo( provider ).TypeOfAverage Then\n\n                If data.Count Mod 2 = 0 Then\n                    Return ( data( data.Count \\ 2 ) &lt;&gt; 0.0 Or _\n                        data( data.Count \\ 2 - 1 ) &lt;&gt; 0.0 )\n                Else\n                    Return data( data.Count \\ 2 ) &lt;&gt; 0.0\n                End If\n\n            &#39; For arithmetic or geometric mean averaging, ToBoolean is \n            &#39; true if any element of the dataset is nonzero.  \n            Else\n                Dim Index As Integer\n                For Index = 0 To data.Count - 1\n                    If data( Index ) &lt;&gt; 0.0 Then Return True\n                Next Index\n                Return False\n            End If\n        End Function\n\n        Function ToByte( ByVal provider As IFormatProvider ) As Byte _\n            Implements IConvertible.ToByte\n            Return Convert.ToByte( CalcNLimitAverage( _\n                Byte.MinValue, Byte.MaxValue, provider ) )\n        End Function\n\n        Function ToChar( ByVal provider As IFormatProvider ) As Char _\n            Implements IConvertible.ToChar\n            Return Convert.ToChar( Convert.ToUInt16( _\n                CalcNLimitAverage( 0.0, &amp;HFFFF, provider ) ) )\n        End Function\n\n        &#39; Convert to DateTime by adding the calculated average as \n        &#39; seconds to the current date and time. A valid DateTime is \n        &#39; always returned.\n        Function ToDateTime( ByVal provider As IFormatProvider ) As _\n            DateTime Implements IConvertible.ToDateTime\n            Dim seconds As Double = Average( _\n                GetAverageInfo( provider ).TypeOfAverage )\n            Try\n                Return DateTime.Now.AddSeconds( seconds )\n            Catch ex As ArgumentOutOfRangeException \n                Return IIf( seconds &lt; 0.0, DateTime.MinValue, _\n                    DateTime.MaxValue )\n            End Try\n        End Function\n\n        Function ToDecimal( ByVal provider As IFormatProvider ) As _\n            Decimal Implements IConvertible.ToDecimal\n\n            &#39; The Double conversion rounds Decimal.MinValue and\n            &#39; Decimal.MaxValue to invalid Decimal values, so the \n            &#39; following limits must be used.\n            Return Convert.ToDecimal( CalcNLimitAverage( _\n                -79228162514264330000000000000.0, _\n                79228162514264330000000000000.0, provider ) )\n        End Function\n\n        Function ToDouble( ByVal provider As IFormatProvider) As _\n            Double Implements IConvertible.ToDouble\n            Return Average( GetAverageInfo( provider ).TypeOfAverage )\n        End Function\n\n        Function ToInt16( ByVal provider As IFormatProvider ) As _\n            Short Implements IConvertible.ToInt16\n            Return Convert.ToInt16( CalcNLimitAverage( _\n                Int16.MinValue, Int16.MaxValue, provider ) )\n        End Function\n\n        Function ToInt32( ByVal provider As IFormatProvider ) As _\n            Integer Implements IConvertible.ToInt32\n            Return Convert.ToInt32( CalcNLimitAverage( _\n                Int32.MinValue, Int32.MaxValue, provider ) )\n        End Function\n\n        Function ToInt64( ByVal provider As IFormatProvider ) As Long _\n            Implements IConvertible.ToInt64\n\n            &#39; The Double conversion rounds Int64.MinValue and \n            &#39; Int64.MaxValue to invalid Long values, so the following \n            &#39; limits must be used.\n            Return Convert.ToInt64( CalcNLimitAverage( _\n                -9223372036854775000, 9223372036854775000, provider ) )\n        End Function\n\n        Function ToSByte( ByVal provider As IFormatProvider ) As _\n            SByte Implements IConvertible.ToSByte\n\n            &#39; SByte.MinValue and SByte.MaxValue are not defined in\n            &#39; Visual Basic.\n            Return Convert.ToSByte( CalcNLimitAverage( _\n                -128, 127, provider ) )\n        End Function\n\n        Function ToSingle( ByVal provider As IFormatProvider ) As _\n            Single Implements IConvertible.ToSingle\n            Return Convert.ToSingle( CalcNLimitAverage( _\n                Single.MinValue, Single.MaxValue, provider ) )\n        End Function\n\n        Function ToUInt16( ByVal provider As IFormatProvider ) As _\n            UInt16 Implements IConvertible.ToUInt16\n\n            &#39; UInt16.MinValue and UInt16.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt16( CalcNLimitAverage( _\n                0, &amp;HFFFF, provider ) )\n        End Function\n\n        Function ToUInt32( ByVal provider As IFormatProvider ) As _\n            UInt32 Implements IConvertible.ToUInt32\n\n            &#39; UInt32.MinValue and UInt32.MaxValue are not defined in \n            &#39; Visual Basic.\n            Return Convert.ToUInt32( CalcNLimitAverage( _\n                0, 4294967295, provider ) )\n        End Function\n\n        Function ToUInt64( ByVal provider As IFormatProvider ) As _\n            UInt64 Implements IConvertible.ToUInt64\n\n            &#39; UInt64.MinValue and UInt64.MaxValue are not defined in \n            &#39; Visual Basic. The Double conversion would have rounded \n            &#39; UInt64.MaxValue, so the following limit must be used.\n            Return Convert.ToUInt64( CalcNLimitAverage( _\n                0, 18446744073709550000.0, provider ) )\n        End Function\n\n        Function ToType( ByVal conversionType As Type, _\n            ByVal provider As IFormatProvider) As Object _\n            Implements IConvertible.ToType\n            Return Convert.ChangeType( Average( GetAverageInfo( _\n                provider ).TypeOfAverage ), conversionType )\n        End Function\n\n        Overloads Function ToString( ByVal provider As IFormatProvider _\n            ) As String Implements IConvertible.ToString\n            Dim avgType as AverageType = _\n                GetAverageInfo( provider ).TypeOfAverage\n            Return String.Format( &quot;( {0}: {1:G10} )&quot;, avgType, _\n                Average( avgType ) )\n        End Function\n    End Class\n   \n    &#39; Display a DataSet with three different format providers.\n    Sub DisplayDataSet( ds As DataSet )\n\n        Dim fmt    As String      = &quot;{0,-12}{1,20}{2,20}{3,20}&quot;\n        Dim median As AverageInfo = New AverageInfo( AverageType.Median )\n        Dim geMean As AverageInfo = _\n            New AverageInfo( AverageType.GeometricMean )\n        Dim iX     As Integer\n\n        &#39; Display the dataset elements.\n        If ds.Count &gt; 0 Then\n            Console.Write( vbCrLf &amp; &quot;DataSet: [{0}&quot;, ds( 0 ) )\n            For iX = 1 To ds.Count - 1\n                Console.Write( &quot;, {0}&quot;, ds( iX ) )\n            Next iX\n            Console.WriteLine( &quot;]&quot; &amp; vbCrLf )\n        End If\n\n        Console.WriteLine( fmt, &quot;Convert.&quot;, &quot;Default&quot;, _\n            &quot;Geometric Mean&quot;, &quot;Median&quot; )\n        Console.WriteLine( fmt, &quot;--------&quot;, &quot;-------&quot;, _\n            &quot;--------------&quot;, &quot;------&quot; )\n        Console.WriteLine( fmt, &quot;ToBoolean&quot;, _\n            Convert.ToBoolean( ds, Nothing ), _\n            Convert.ToBoolean( ds, geMean ), _\n            Convert.ToBoolean( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToByte&quot;, _\n            Convert.ToByte( ds, Nothing ), _\n            Convert.ToByte( ds, geMean ), _\n            Convert.ToByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToChar&quot;, _\n            Convert.ToChar( ds, Nothing ), _\n            Convert.ToChar( ds, geMean ), _\n            Convert.ToChar( ds, median ) )\n        Console.WriteLine( &quot;{0,-12}{1,20:yyyy-MM-dd HH:mm:ss}&quot; &amp; _\n            &quot;{2,20:yyyy-MM-dd HH:mm:ss}{3,20:yyyy-MM-dd HH:mm:ss}&quot;, _\n            &quot;ToDateTime&quot;, Convert.ToDateTime( ds, Nothing ), _\n            Convert.ToDateTime( ds, geMean ), _\n            Convert.ToDateTime( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDecimal&quot;, _\n            Convert.ToDecimal( ds, Nothing ), _\n            Convert.ToDecimal( ds, geMean ), _\n            Convert.ToDecimal( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToDouble&quot;, _\n            Convert.ToDouble( ds, Nothing ), _\n            Convert.ToDouble( ds, geMean ), _\n            Convert.ToDouble( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt16&quot;, _\n            Convert.ToInt16( ds, Nothing ), _\n            Convert.ToInt16( ds, geMean ), _\n            Convert.ToInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt32&quot;, _\n            Convert.ToInt32( ds, Nothing ), _\n            Convert.ToInt32( ds, geMean ), _\n            Convert.ToInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToInt64&quot;, _\n            Convert.ToInt64( ds, Nothing ), _\n            Convert.ToInt64( ds, geMean ), _\n            Convert.ToInt64( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSByte&quot;, _\n            Convert.ToSByte( ds, Nothing ), _\n            Convert.ToSByte( ds, geMean ), _\n            Convert.ToSByte( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToSingle&quot;, _\n            Convert.ToSingle( ds, Nothing ), _\n            Convert.ToSingle( ds, geMean ), _\n            Convert.ToSingle( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt16&quot;, _\n            Convert.ToUInt16( ds, Nothing ), _\n            Convert.ToUInt16( ds, geMean ), _\n            Convert.ToUInt16( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt32&quot;, _\n            Convert.ToUInt32( ds, Nothing ), _\n            Convert.ToUInt32( ds, geMean ), _\n            Convert.ToUInt32( ds, median ) )\n        Console.WriteLine( fmt, &quot;ToUInt64&quot;, _\n            Convert.ToUInt64( ds, Nothing ), _\n            Convert.ToUInt64( ds, geMean ), _\n            Convert.ToUInt64( ds, median ) )\n    End Sub\n   \n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Convert.To&lt;Type&gt;( Object, &quot; &amp; _\n            &quot;IFormatProvider ) methods &quot; &amp; vbCrLf &amp; &quot;generates &quot; &amp; _\n            &quot;the following output. The example displays the &quot; &amp; _\n            &quot;values &quot; &amp; vbCrLf &amp; &quot;returned by the methods, &quot; &amp; _\n            &quot;using several IFormatProvider objects.&quot; &amp; vbCrLf )\n          \n        Dim ds1 As New DataSet( 10.5, 22.2, 45.9, 88.7, 156.05, 297.6 )\n        DisplayDataSet( ds1 )\n          \n        Dim ds2 As New DataSet( _\n            359999.95, 425000, 499999.5, 775000, 1695000 )\n        DisplayDataSet( ds2 )\n    End Sub \nEnd Module \n\n&#39; This example of the Convert.To&lt;Type&gt;( Object, IFormatProvider ) methods\n&#39; generates the following output. The example displays the values\n&#39; returned by the methods, using several IFormatProvider objects.\n&#39; \n&#39; DataSet: [10.5, 22.2, 45.9, 88.7, 156.05, 297.6]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       103                  59                  67\n&#39; ToChar                         g                   ;                   C\n&#39; ToDateTime   2003-05-13 14:52:53 2003-05-13 14:52:09 2003-05-13 14:52:17\n&#39; ToDecimal       103.491666666667    59.4332135445164                67.3\n&#39; ToDouble        103.491666666667    59.4332135445164                67.3\n&#39; ToInt16                      103                  59                  67\n&#39; ToInt32                      103                  59                  67\n&#39; ToInt64                      103                  59                  67\n&#39; ToSByte                      103                  59                  67\n&#39; ToSingle                103.4917            59.43321                67.3\n&#39; ToUInt16                     103                  59                  67\n&#39; ToUInt32                     103                  59                  67\n&#39; ToUInt64                     103                  59                  67\n&#39; \n&#39; DataSet: [359999.95, 425000, 499999.5, 775000, 1695000]\n&#39; \n&#39; Convert.                 Default      Geometric Mean              Median\n&#39; --------                 -------      --------------              ------\n&#39; ToBoolean                   True                True                True\n&#39; ToByte                       255                 255                 255\n&#39; ToChar                         ?                   ?                   ?\n&#39; ToDateTime   2003-05-22 07:27:49 2003-05-20 22:17:27 2003-05-19 09:44:29\n&#39; ToDecimal              750999.89    631577.237188435            499999.5\n&#39; ToDouble               750999.89    631577.237188435            499999.5\n&#39; ToInt16                    32767               32767               32767\n&#39; ToInt32                   751000              631577              500000\n&#39; ToInt64                   751000              631577              500000\n&#39; ToSByte                      127                 127                 127\n&#39; ToSingle                750999.9            631577.3            499999.5\n&#39; ToUInt16                   65535               65535               65535\n&#39; ToUInt32                  751000              631577              500000\n&#39; ToUInt64                  751000              631577              500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.int64#System_Int64_Parse_\" data-linktype=\"relative-path\">Parse</a> method on <code>value</code>.  </p>\n<p> <code>provider</code> is an <code>IFormatProvider</code> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <code>NumberFormatInfo</code> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <code>NumberFormatInfo</code> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.int64#System_Int64_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that recognizes the string &quot;pos&quot; as the positive sign and the string &quot;neg&quot; as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> provider for the invariant culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#16\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a NumberFormatInfo object and set the properties that\n      // affect conversions using Convert.ToInt64(String, IFormatProvider).\n      NumberFormatInfo customProvider = new NumberFormatInfo();\n      customProvider.NegativeSign = &quot;neg &quot;;\n      customProvider.PositiveSign = &quot;pos &quot;;\n\n      // Create an array of providers with the custom provider and the\n      // NumberFormatInfo object for the invariant culture.\n      NumberFormatInfo[] providers = { customProvider,\n                                       NumberFormatInfo.InvariantInfo };\n      \n      // Define an array of strings to parse.\n      string[] numericStrings = { &quot;123456789&quot;, &quot;+123456789&quot;, &quot;pos 123456789&quot;, \n                                  &quot;-123456789&quot;, &quot;neg 123456789&quot;, &quot;123456789.&quot;,\n                                  &quot;123,456,789&quot;, &quot;(123456789)&quot;,\n                                  &quot;9223372036854775808&quot;, &quot;-9223372036854775809&quot; };\n\n      for (int ctr = 0; ctr &lt; 2; ctr++)\n      {\n         IFormatProvider provider = providers[ctr];\n         Console.WriteLine(ctr == 0 ? &quot;Custom Provider:&quot; : &quot;Invariant Culture:&quot;);\n         foreach (string numericString in numericStrings)\n         {\n            Console.Write(&quot;   {0,-22} --&gt;  &quot;, numericString);\n            try {\n               Console.WriteLine(&quot;{0,22}&quot;, Convert.ToInt32(numericString, provider));\n            }\n            catch (FormatException) {\n               Console.WriteLine(&quot;{0,22}&quot;, &quot;Unrecognized Format&quot;);\n            }   \n            catch (OverflowException) {\n               Console.WriteLine(&quot;{0,22}&quot;, &quot;Overflow&quot;);\n            }\n         }\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//       Custom Provider:\n//          123456789              --&gt;               123456789\n//          +123456789             --&gt;     Unrecognized Format\n//          pos 123456789          --&gt;               123456789\n//          -123456789             --&gt;     Unrecognized Format\n//          neg 123456789          --&gt;              -123456789\n//          123456789.             --&gt;     Unrecognized Format\n//          123,456,789            --&gt;     Unrecognized Format\n//          (123456789)            --&gt;     Unrecognized Format\n//          9223372036854775808    --&gt;                Overflow\n//          -9223372036854775809   --&gt;     Unrecognized Format\n//       \n//       Invariant Culture:\n//          123456789              --&gt;               123456789\n//          +123456789             --&gt;               123456789\n//          pos 123456789          --&gt;     Unrecognized Format\n//          -123456789             --&gt;              -123456789\n//          neg 123456789          --&gt;     Unrecognized Format\n//          123456789.             --&gt;     Unrecognized Format\n//          123,456,789            --&gt;     Unrecognized Format\n//          (123456789)            --&gt;     Unrecognized Format\n//          9223372036854775808    --&gt;                Overflow\n//          -9223372036854775809   --&gt;                Overflow\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#16\">Imports System.Globalization\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create a NumberFormatInfo object and set the properties that\n      &#39; affect conversions using Convert.ToInt64(String, IFormatProvider).\n      Dim customProvider As New NumberFormatInfo()\n      customProvider.NegativeSign = &quot;neg &quot;\n      customProvider.PositiveSign = &quot;pos &quot;\n\n      &#39; Create an array of providers with the custom provider and the\n      &#39; NumberFormatInfo object for the invariant culture.\n      Dim providers() As NumberFormatInfo = {customProvider, _\n                                             NumberFormatInfo.InvariantInfo }\n      \n      &#39; Define an array of strings to parse.\n      Dim numericStrings() As String = { &quot;123456789&quot;, &quot;+123456789&quot;, _\n                                         &quot;pos 123456789&quot;, &quot;-123456789&quot;, _\n                                         &quot;neg 123456789&quot;, &quot;123456789.&quot;, _\n                                         &quot;123,456,789&quot;, &quot;(123456789)&quot;, _\n                                         &quot;9223372036854775808&quot;, &quot;-9223372036854775809&quot; }\n\n      For ctr As Integer = 0 to 1\n         Dim provider As IFormatProvider = providers(ctr)\n         Console.WriteLine(IIf(ctr = 0, &quot;Custom Provider:&quot;, &quot;Invariant Culture:&quot;))\n         For Each numericString As String In numericStrings\n            Console.Write(&quot;   {0,-22} --&gt;  &quot;, numericString)\n            Try\n               Console.WriteLine(&quot;{0,22}&quot;, Convert.ToInt32(numericString, provider))\n            Catch e As FormatException\n               Console.WriteLine(&quot;{0,22}&quot;, &quot;Unrecognized Format&quot;)\n            Catch e As OverflowException\n               Console.WriteLine(&quot;{0,22}&quot;, &quot;Overflow&quot;)\n            End Try\n         Next\n         Console.WriteLine()\n      Next\n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       Custom Provider:\n&#39;          123456789              --&gt;               123456789\n&#39;          +123456789             --&gt;     Unrecognized Format\n&#39;          pos 123456789          --&gt;               123456789\n&#39;          -123456789             --&gt;     Unrecognized Format\n&#39;          neg 123456789          --&gt;              -123456789\n&#39;          123456789.             --&gt;     Unrecognized Format\n&#39;          123,456,789            --&gt;     Unrecognized Format\n&#39;          (123456789)            --&gt;     Unrecognized Format\n&#39;          9223372036854775808    --&gt;                Overflow\n&#39;          -9223372036854775809   --&gt;     Unrecognized Format\n&#39;       \n&#39;       Invariant Culture:\n&#39;          123456789              --&gt;               123456789\n&#39;          +123456789             --&gt;               123456789\n&#39;          pos 123456789          --&gt;     Unrecognized Format\n&#39;          -123456789             --&gt;              -123456789\n&#39;          neg 123456789          --&gt;     Unrecognized Format\n&#39;          123456789.             --&gt;     Unrecognized Format\n&#39;          123,456,789            --&gt;     Unrecognized Format\n&#39;          (123456789)            --&gt;     Unrecognized Format\n&#39;          9223372036854775808    --&gt;                Overflow\n&#39;          -9223372036854775809   --&gt;                Overflow\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToInt64_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (string value, int fromBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fromBase</code> is not 2, 8, 10, or 16.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  </p>\n<p> -or-  </p>\n<p> <code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>fromBase</code> is 16, you can prefix the number specified by the <code>value</code> parameter with &quot;0x&quot; or &quot;0X&quot;.  </p>\n<p> Because the negative sign is not supported for non-base 10 numeric representations, the ToInt64 method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> data type is converted to an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value without the method throwing an exception. The following example converts <a class=\"xref\" href=\"system.uint64#System_UInt64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> to its hexadecimal string representation, and then calls the ToInt64 method. Instead of throwing an exception, the method displays the message, &quot;0xFFFFFFFFFFFFFFFF converts to -1.&quot;  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#7\">      &#39; Create a hexadecimal value out of range of the Long type.\n      Dim value As String = ULong.MaxValue.ToString(&quot;X&quot;)\n      &#39; Call Convert.ToInt64 to convert it back to a number.\n      Try\n         Dim number As Long = Convert.ToInt64(value, 16)\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a long integer.&quot;, value)\n      End Try   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#7\">      // Create a hexadecimal value out of range of the long type.\n      string value = ulong.MaxValue.ToString(&quot;X&quot;);\n      // Use Convert.ToInt64 to convert it back to a number.\n      try\n      {\n         long number = Convert.ToInt64(value, 16);\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number);\n      }   \n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a long integer.&quot;, value);\n      }   \n</code></pre><p> When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#8\">      &#39; Create a negative hexadecimal value out of range of the Long type.\n      Dim sourceNumber As ULong = ULong.MaxValue\n      Dim isSigned As Boolean = Math.Sign(sourceNumber.MinValue) = -1\n      Dim value As String = sourceNumber.ToString(&quot;X&quot;)\n      Dim targetNumber As Long\n      Try\n         targetNumber = Convert.ToInt64(value, 16)\n         If Not isSigned And ((targetNumber And &amp;H8000000000) &lt;&gt; 0) Then\n            Throw New OverflowException()\n         Else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber)\n         End If    \n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a long integer.&quot;, value)\n      End Try \n      &#39; Displays the following to the console:\n      &#39;    Unable to convert &#39;0xFFFFFFFFFFFFFFFF&#39; to a long integer.     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#8\">      // Create a negative hexadecimal value out of range of the Byte type.\n      ulong sourceNumber = ulong.MaxValue;\n      bool isSigned = Math.Sign(Convert.ToDouble(sourceNumber.GetType().GetField(&quot;MinValue&quot;).GetValue(null))) == -1;\n      string value = sourceNumber.ToString(&quot;X&quot;);\n      long targetNumber;\n      try\n      {\n         targetNumber = Convert.ToInt64(value, 16);\n         if (! isSigned &amp;&amp; ((targetNumber &amp; 0x80000000) != 0))\n            throw new OverflowException();\n         else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a long integer.&quot;, value);\n      } \n      // Displays the following to the console:\n      //    Unable to convert &#39;0xFFFFFFFFFFFFFFFF&#39; to a long integer.     \n</code></pre><p> The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToInt64#15\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] hexStrings = { &quot;8000000000000000&quot;, &quot;0FFFFFFFFFFFFFFF&quot;, \n                              &quot;f0000000000001000&quot;, &quot;00A30&quot;, &quot;D&quot;, &quot;-13&quot;, &quot;GAD&quot; };\n      foreach (string hexString in hexStrings)\n      {\n         try {\n            long number = Convert.ToInt64(hexString, 16);\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1:N0}.&quot;, hexString, number);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the correct format for a hexadecimal number.&quot;,\n                              hexString);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of an Int64.&quot;, hexString);\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is invalid in base 16.&quot;, hexString);\n         }\n      }                                            \n   }\n}\n// The example displays the following output:\n//       Converted &#39;8000000000000000&#39; to -9,223,372,036,854,775,808.\n//       Converted &#39;0FFFFFFFFFFFFFFF&#39; to 1,152,921,504,606,846,975.\n//       &#39;f0000000000001000&#39; is outside the range of an Int64.\n//       Converted &#39;00A30&#39; to 2,608.\n//       Converted &#39;D&#39; to 13.\n//       &#39;-13&#39; is invalid in base 16.\n//       &#39;GAD&#39; is not in the correct format for a hexadecimal number.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToInt64#15\">Module Example\n   Public Sub Main()\n      Dim hexStrings() As String = { &quot;8000000000000000&quot;, &quot;0FFFFFFFFFFFFFFF&quot;, _\n                                     &quot;f0000000000001000&quot;, &quot;00A30&quot;, &quot;D&quot;, &quot;-13&quot;, &quot;GAD&quot; }\n      For Each hexString As String In hexStrings\n         Try\n            Dim number As Long = Convert.ToInt64(hexString, 16)\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1:N0}.&quot;, hexString, number)\n         Catch e As FormatException\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the correct format for a hexadecimal number.&quot;, _\n                              hexString)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of an Int64.&quot;, hexString)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;&#39;{0}&#39; is invalid in base 16.&quot;, hexString)\n         End Try\n      Next                                            \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;8000000000000000&#39; to -9,223,372,036,854,775,808.\n&#39;       Converted &#39;0FFFFFFFFFFFFFFF&#39; to 1,152,921,504,606,846,975.\n&#39;       &#39;f0000000000001000&#39; is outside the range of an Int64.\n&#39;       Converted &#39;00A30&#39; to 2,608.\n&#39;       Converted &#39;D&#39; to 13.\n&#39;       &#39;-13&#39; is invalid in base 16.\n&#39;       &#39;GAD&#39; is not in the correct format for a hexadecimal number.\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts the Boolean values <code>true</code> and <code>false</code> to signed byte values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag,\n                        Convert.ToSByte(falseFlag));\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag,\n                        Convert.ToSByte(trueFlag));\n      // The example displays the following output:\n      //       false converts to 0.\n      //       true converts to 1.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, _\n                        Convert.ToSByte(falseFlag))\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, _\n                        Convert.ToSByte(trueFlag))\n      &#39; The example displays the following output:\n      &#39;       False converts to 0.\n      &#39;       True converts to 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in a byte array to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#2\">      byte[] numbers = { Byte.MinValue, 10, 100, Byte.MaxValue };\n      sbyte result;\n      \n      foreach (byte number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }                           \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the Byte value 0 to the SByte value 0.\n      //    Converted the Byte value 10 to the SByte value 10.\n      //    Converted the Byte value 100 to the SByte value 100.\n      //    The Byte value 255 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#2\">      Dim numbers() As Byte = { Byte.MinValue, 10, 100, Byte.MaxValue }\n      Dim result As SByte\n      For Each number As Byte In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Byte value 0 to the SByte value 0.\n      &#39;    Converted the Byte value 10 to the SByte value 10.\n      &#39;    Converted the Byte value 100 to the SByte value 100.\n      &#39;    The Byte value 255 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#3\">      char[] chars = { &#39;a&#39;, &#39;z&#39;, &#39;\\u0007&#39;, &#39;\\u0200&#39;, &#39;\\u1023&#39; };\n      foreach (char ch in chars)\n      {\n         try {\n            sbyte result = Convert.ToSByte(ch);\n            Console.WriteLine(&quot;{0} is converted to {1}.&quot;, ch, result);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;Unable to convert u+{0} to a byte.&quot;,\n                              Convert.ToInt16(ch).ToString(&quot;X4&quot;));\n         }\n      }   \n      // The example displays the following output:\n      //    a is converted to 97.\n      //    z is converted to 122.\n      //     is converted to 7.\n      //    Unable to convert u+00C8 to a byte.\n      //    Unable to convert u+03FF to a byte.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#3\">      Dim chars() As Char = { &quot;a&quot;c, &quot;z&quot;c, ChrW(7), ChrW(200), ChrW(1023) }\n      For Each ch As Char in chars\n         Try\n            Dim result As SByte = Convert.ToSByte(ch)\n            Console.WriteLine(&quot;{0} is converted to {1}.&quot;, ch, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;Unable to convert u+{0} to a byte.&quot;, _\n                              AscW(ch).ToString(&quot;X4&quot;))\n         End Try\n      Next   \n      &#39; The example displays the following output:\n      &#39;    a is converted to 97.\n      &#39;    z is converted to 122.\n      &#39;     is converted to 7.\n      &#39;    Unable to convert u+00C8 to a byte.\n      &#39;    Unable to convert u+03FF to a byte.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#4\">      decimal[] numbers = { Decimal.MinValue, -129.5m, -12.7m, 0m, 16m,\n                            103.6m, 255.0m, Decimal.MaxValue };\n      sbyte result;\n      \n      foreach (decimal number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }                         \n      // The example displays the following output:\n      //    The Decimal value -79228162514264337593543950335 is outside the range of the SByte type.\n      //    The Decimal value -129.5 is outside the range of the SByte type.\n      //    Converted the Decimal value -12.7 to the SByte value -13.\n      //    Converted the Decimal value 0 to the SByte value 0.\n      //    Converted the Decimal value 16 to the SByte value 16.\n      //    Converted the Decimal value 103.6 to the SByte value 104.\n      //    The Decimal value 255 is outside the range of the SByte type.\n      //    The Decimal value 79228162514264337593543950335 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#4\">      Dim numbers() As Decimal = { Decimal.MinValue, -129.5d, -12.7d, 0d, 16d, _\n                                   103.6d, 255.0d, Decimal.MaxValue }\n      Dim result As SByte\n      \n      For Each number As Decimal In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next                         \n      &#39; The example displays the following output:\n      &#39;    The Decimal value -79228162514264337593543950335 is outside the range of the SByte type.\n      &#39;    The Decimal value -129.5 is outside the range of the SByte type.\n      &#39;    Converted the Decimal value -12.7 to the SByte value -13.\n      &#39;    Converted the Decimal value 0 to the SByte value 0.\n      &#39;    Converted the Decimal value 16 to the SByte value 16.\n      &#39;    Converted the Decimal value 103.6 to the SByte value 104.\n      &#39;    The Decimal value 255 is outside the range of the SByte type.\n      &#39;    The Decimal value 79228162514264337593543950335 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#5\">      double[] numbers = { Double.MinValue, -129.5, -12.7, 0, 16,\n                           103.6, 255.0, 1.63509e17, Double.MaxValue};\n      sbyte result;\n      \n      foreach (double number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }                                  \n      // The example displays the following output:\n      //    The Double value -1.79769313486232E+308 is outside the range of the SByte type.\n      //    The Double value -129.5 is outside the range of the SByte type.\n      //    Converted the Double value -12.7 to the SByte value -13.\n      //    Converted the Double value 0 to the SByte value 0.\n      //    Converted the Double value 16 to the SByte value 16.\n      //    Converted the Double value 103.6 to the SByte value 104.\n      //    The Double value 255 is outside the range of the SByte type.\n      //    The Double value 1.63509E+17 is outside the range of the SByte type.\n      //    The Double value 1.79769313486232E+308 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#5\">      Dim numbers() As Double = { Double.MinValue, -129.5, -12.7, 0, 16, _\n                                  103.6, 255.0, 1.63509e17, Double.MaxValue}\n      Dim result As SByte\n      \n      For Each number As Double In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    The Double value -1.79769313486232E+308 is outside the range of the SByte type.\n      &#39;    The Double value -129.5 is outside the range of the SByte type.\n      &#39;    Converted the Double value -12.7 to the SByte value -13.\n      &#39;    Converted the Double value 0 to the SByte value 0.\n      &#39;    Converted the Double value 16 to the SByte value 16.\n      &#39;    Converted the Double value 103.6 to the SByte value 104.\n      &#39;    The Double value 255 is outside the range of the SByte type.\n      &#39;    The Double value 1.63509E+17 is outside the range of the SByte type.\n      &#39;    The Double value 1.79769313486232E+308 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#6\">      short[] numbers = { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue };\n      sbyte result;\n      foreach (short number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int16 value -32768 is outside the range of the SByte type.\n      //    Converted the Int16 value -1 to the SByte value -1.\n      //    Converted the Int16 value 0 to the SByte value 0.\n      //    Converted the Int16 value 121 to the SByte value 121.\n      //    The Int16 value 340 is outside the range of the SByte type.\n      //    The Int16 value 32767 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#6\">      Dim numbers() As Short = { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue }\n      Dim result As SByte\n      For Each number As Short In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int16 value -32768 is outside the range of the SByte type.\n      &#39;    Converted the Int16 value -1 to the SByte value -1.\n      &#39;    Converted the Int16 value 0 to the SByte value 0.\n      &#39;    Converted the Int16 value 121 to the SByte value 121.\n      &#39;    The Int16 value 340 is outside the range of the SByte type.\n      &#39;    The Int16 value 32767 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of signed integers to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#7\">      int[] numbers = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue };\n      sbyte result;\n      \n      foreach (int number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int32 value -2147483648 is outside the range of the SByte type.\n      //    Converted the Int32 value -1 to the SByte value -1.\n      //    Converted the Int32 value 0 to the SByte value 0.\n      //    Converted the Int32 value 121 to the SByte value 121.\n      //    The Int32 value 340 is outside the range of the SByte type.\n      //    The Int32 value 2147483647 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#7\">      Dim numbers() As Integer = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue }\n      Dim result As SByte\n      For Each number As Integer In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int32 value -2147483648 is outside the range of the SByte type.\n      &#39;    Converted the Int32 value -1 to the SByte value -1.\n      &#39;    Converted the Int32 value 0 to the SByte value 0.\n      &#39;    Converted the Int32 value 121 to the SByte value 121.\n      &#39;    The Int32 value 340 is outside the range of the SByte type.\n      &#39;    The Int32 value 2147483647 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of long integers to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#8\">      long[] numbers = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue };\n      sbyte result;\n      foreach (long number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int64 value -9223372036854775808 is outside the range of the SByte type.\n      //    Converted the Int64 value -1 to the SByte value -1.\n      //    Converted the Int64 value 0 to the SByte value 0.\n      //    Converted the Int64 value 121 to the SByte value 121.\n      //    The Int64 value 340 is outside the range of the SByte type.\n      //    The Int64 value 9223372036854775807 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#8\">      Dim numbers() As Long = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue }\n      Dim result As SByte\n      For Each number As Long In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int64 value -9223372036854775808 is outside the range of the SByte type.\n      &#39;    Converted the Int64 value -1 to the SByte value -1.\n      &#39;    Converted the Int64 value 0 to the SByte value 0.\n      &#39;    Converted the Int64 value 121 to the SByte value 121.\n      &#39;    The Int64 value 340 is outside the range of the SByte type.\n      &#39;    The Int64 value 9223372036854775807 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.sbyte#System_SByte_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.sbyte#System_SByte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToSByte_\" data-linktype=\"relative-path\">ToSByte</a> method of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#9\">      object[] values = { true, -12, 163, 935, &#39;x&#39;, &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;,\n                          &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2};\n      sbyte result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToSByte(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No conversion to a Byte exists for the {0} value {1}.&quot;,\n                              value.GetType().Name, value);\n                              \n         }\n      }                           \n      // The example displays the following output:\n      //    Converted the Boolean value true to the SByte value 1.\n      //    Converted the Int32 value -12 to the SByte value -12.\n      //    The Int32 value 163 is outside the range of the SByte type.\n      //    The Int32 value 935 is outside the range of the SByte type.\n      //    Converted the Char value x to the SByte value 120.\n      //    Converted the String value 104 to the SByte value 104.\n      //    The String value 103.0 is not in a recognizable format.\n      //    Converted the String value -1 to the SByte value -1.\n      //    The String value 1.00e2 is not in a recognizable format.\n      //    The String value One is not in a recognizable format.\n      //    Converted the Double value 100 to the SByte value 100.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#9\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2}\n      Dim result As SByte\n      For Each value As Object In values\n         Try\n            result = Convert.ToSByte(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to a Byte exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to the SByte value 1.\n      &#39;    Converted the Int32 value -12 to the SByte value -12.\n      &#39;    The Int32 value 163 is outside the range of the SByte type.\n      &#39;    The Int32 value 935 is outside the range of the SByte type.\n      &#39;    Converted the Char value x to the SByte value 120.\n      &#39;    Converted the String value 104 to the SByte value 104.\n      &#39;    The String value 103.0 is not in a recognizable format.\n      &#39;    Converted the String value -1 to the SByte value -1.\n      &#39;    The String value 1.00e2 is not in a recognizable format.\n      &#39;    The String value One is not in a recognizable format.\n      &#39;    Converted the Double value 100 to the SByte value 100.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 8-bit signed integer; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 8-bit signed integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#9\">      object[] values = { true, -12, 163, 935, &#39;x&#39;, &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;,\n                          &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2};\n      sbyte result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToSByte(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No conversion to a Byte exists for the {0} value {1}.&quot;,\n                              value.GetType().Name, value);\n                              \n         }\n      }                           \n      // The example displays the following output:\n      //    Converted the Boolean value true to the SByte value 1.\n      //    Converted the Int32 value -12 to the SByte value -12.\n      //    The Int32 value 163 is outside the range of the SByte type.\n      //    The Int32 value 935 is outside the range of the SByte type.\n      //    Converted the Char value x to the SByte value 120.\n      //    Converted the String value 104 to the SByte value 104.\n      //    The String value 103.0 is not in a recognizable format.\n      //    Converted the String value -1 to the SByte value -1.\n      //    The String value 1.00e2 is not in a recognizable format.\n      //    The String value One is not in a recognizable format.\n      //    Converted the Double value 100 to the SByte value 100.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#9\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2}\n      Dim result As SByte\n      For Each value As Object In values\n         Try\n            result = Convert.ToSByte(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to a Byte exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to the SByte value 1.\n      &#39;    Converted the Int32 value -12 to the SByte value -12.\n      &#39;    The Int32 value 163 is outside the range of the SByte type.\n      &#39;    The Int32 value 935 is outside the range of the SByte type.\n      &#39;    Converted the Char value x to the SByte value 120.\n      &#39;    Converted the String value 104 to the SByte value 104.\n      &#39;    The String value 103.0 is not in a recognizable format.\n      &#39;    Converted the String value -1 to the SByte value -1.\n      &#39;    The String value 1.00e2 is not in a recognizable format.\n      &#39;    The String value One is not in a recognizable format.\n      &#39;    Converted the Double value 100 to the SByte value 100.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToSByte method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.sbyte#System_SByte_Parse_System_String_\" data-linktype=\"relative-path\">System.SByte.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.sbyte#System_SByte_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts string representations of <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> values with the <code>ToSByte</code> method, using default formatting.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToSInts_String#4\">// Example of the Convert::ToSByte( String* ) and \n// Convert::ToSByte( String*, IFormatProvider* ) methods.\nusing namespace System;\nusing namespace System::Globalization;\nconst __wchar_t * protoFmt = L&quot;{0,-20}{1,-20}{2}&quot;;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\nvoid ConvertToSByte( String^ numericStr, IFormatProvider^ provider )\n{\n   Object^ defaultValue;\n   Object^ providerValue;\n   \n   // Convert numericStr to SByte without a format provider.\n   try\n   {\n      defaultValue = Convert::ToSByte( numericStr );\n   }\n   catch ( Exception^ ex ) \n   {\n      defaultValue = GetExceptionType( ex );\n   }\n\n   \n   // Convert numericStr to SByte with a format provider.\n   try\n   {\n      providerValue = Convert::ToSByte( numericStr, provider );\n   }\n   catch ( Exception^ ex ) \n   {\n      providerValue = GetExceptionType( ex );\n   }\n\n   Console::WriteLine( gcnew String( protoFmt ), numericStr, defaultValue, providerValue );\n}\n\nint main()\n{\n   \n   // Create a NumberFormatInfo object and set several of its\n   // properties that apply to numbers.\n   NumberFormatInfo^ provider = gcnew NumberFormatInfo;\n   \n   // These properties affect the conversion.\n   provider-&gt;NegativeSign = &quot;neg &quot;;\n   provider-&gt;PositiveSign = &quot;pos &quot;;\n   \n   // These properties do not affect the conversion.\n   // The input string cannot have decimal and group separators.\n   provider-&gt;NumberDecimalSeparator = &quot;.&quot;;\n   provider-&gt;NumberNegativePattern = 0;\n   Console::WriteLine( &quot;This example of<br>&quot;\n   &quot;  Convert::ToSByte( String* ) and <br>&quot;\n   &quot;  Convert::ToSByte( String*, IFormatProvider* ) &quot;\n   &quot;<br>generates the following output. It converts &quot;\n   &quot;several strings to <br>SByte values, using &quot;\n   &quot;default formatting or a NumberFormatInfo object.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;String to convert&quot;, &quot;Default/exception&quot;, &quot;Provider/exception&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;-----------------&quot;, &quot;-----------------&quot;, &quot;------------------&quot; );\n   \n   // Convert strings, with and without an IFormatProvider.\n   ConvertToSByte( &quot;123&quot;, provider );\n   ConvertToSByte( &quot;+123&quot;, provider );\n   ConvertToSByte( &quot;pos 123&quot;, provider );\n   ConvertToSByte( &quot;-123&quot;, provider );\n   ConvertToSByte( &quot;neg 123&quot;, provider );\n   ConvertToSByte( &quot;123.&quot;, provider );\n   ConvertToSByte( &quot;(123)&quot;, provider );\n   ConvertToSByte( &quot;128&quot;, provider );\n   ConvertToSByte( &quot;-129&quot;, provider );\n}\n\n/*\nThis example of\n  Convert::ToSByte( String* ) and\n  Convert::ToSByte( String*, IFormatProvider* )\ngenerates the following output. It converts several strings to\nSByte values, using default formatting or a NumberFormatInfo object.\n\nString to convert   Default/exception   Provider/exception\n-----------------   -----------------   ------------------\n123                 123                 123\n+123                123                 FormatException\npos 123             FormatException     123\n-123                -123                FormatException\nneg 123             FormatException     -123\n123.                FormatException     FormatException\n(123)               FormatException     FormatException\n128                 OverflowException   OverflowException\n-129                OverflowException   FormatException\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToSInts_String#4\">// Example of the Convert.ToSByte( string ) and \n// Convert.ToSByte( string, IFormatProvider ) methods.\nusing System;\nusing System.Globalization;\n\nclass ToSByteProviderDemo\n{\n    static string format = &quot;{0,-20}{1,-20}{2}&quot;;\n\n     // Get the exception type name; remove the namespace prefix.\n    static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    static void ConvertToSByte( string numericStr, \n        IFormatProvider provider )\n    {\n        object defaultValue;\n        object providerValue;\n\n        // Convert numericStr to SByte without a format provider.\n        try\n        {\n            defaultValue = Convert.ToSByte( numericStr );\n        }\n        catch( Exception ex )\n        {\n            defaultValue = GetExceptionType( ex );\n        }\n\n        // Convert numericStr to SByte with a format provider.\n        try\n        {\n            providerValue = Convert.ToSByte( numericStr, provider );\n        }\n        catch( Exception ex )\n        {\n            providerValue = GetExceptionType( ex );\n        }\n\n        Console.WriteLine( format, numericStr, \n            defaultValue, providerValue );\n    }\n\n    public static void Main( )\n    {\n        // Create a NumberFormatInfo object and set several of its\n        // properties that apply to numbers.\n        NumberFormatInfo provider = new NumberFormatInfo();\n\n        // These properties affect the conversion.\n        provider.NegativeSign = &quot;neg &quot;;\n        provider.PositiveSign = &quot;pos &quot;;\n\n        // These properties do not affect the conversion.\n        // The input string cannot have decimal and group separators.\n        provider.NumberDecimalSeparator = &quot;.&quot;;\n        provider.NumberNegativePattern = 0;\n\n        Console.WriteLine(&quot;This example of<br>&quot; +\n            &quot;  Convert.ToSByte( string ) and <br>&quot; +\n            &quot;  Convert.ToSByte( string, IFormatProvider ) &quot; +\n            &quot;<br>generates the following output. It converts &quot; +\n            &quot;several strings to <br>SByte values, using &quot; +\n            &quot;default formatting or a NumberFormatInfo object.<br>&quot; );\n        Console.WriteLine( format, &quot;String to convert&quot;, \n            &quot;Default/exception&quot;, &quot;Provider/exception&quot; );\n        Console.WriteLine( format, &quot;-----------------&quot;, \n            &quot;-----------------&quot;, &quot;------------------&quot; );\n\n        // Convert strings, with and without an IFormatProvider.\n        ConvertToSByte( &quot;123&quot;, provider );\n        ConvertToSByte( &quot;+123&quot;, provider );\n        ConvertToSByte( &quot;pos 123&quot;, provider );\n        ConvertToSByte( &quot;-123&quot;, provider );\n        ConvertToSByte( &quot;neg 123&quot;, provider );\n        ConvertToSByte( &quot;123.&quot;, provider );\n        ConvertToSByte( &quot;(123)&quot;, provider );\n        ConvertToSByte( &quot;128&quot;, provider );\n        ConvertToSByte( &quot;-129&quot;, provider );\n    }\n}\n\n/*\nThis example of\n  Convert.ToSByte( string ) and\n  Convert.ToSByte( string, IFormatProvider )\ngenerates the following output. It converts several strings to\nSByte values, using default formatting or a NumberFormatInfo object.\n\nString to convert   Default/exception   Provider/exception\n-----------------   -----------------   ------------------\n123                 123                 123\n+123                123                 FormatException\npos 123             FormatException     123\n-123                -123                FormatException\nneg 123             FormatException     -123\n123.                FormatException     FormatException\n(123)               FormatException     FormatException\n128                 OverflowException   OverflowException\n-129                OverflowException   FormatException\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSInts_String#4\">&#39; Example of the Convert.ToSByte( String ) and \n&#39; Convert.ToSByte( String, IFormatProvider ) methods.\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nModule ToSByteProviderDemo\n\n    Dim format As String = &quot;{0,-20}{1,-20}{2}&quot;\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    Sub ConvertToSByte( numericStr As String, _\n        provider As IFormatProvider )\n\n        Dim defaultValue    As Object\n        Dim providerValue   As Object\n\n        &#39; Convert numericStr to SByte without a format provider.\n        Try\n            defaultValue = Convert.ToSByte( numericStr )\n        Catch ex As Exception\n            defaultValue = GetExceptionType( ex )\n        End Try\n\n        &#39; Convert numericStr to SByte with a format provider.\n        Try\n            providerValue = Convert.ToSByte( numericStr, provider )\n        Catch ex As Exception\n            providerValue = GetExceptionType( ex )\n        End Try\n\n        Console.WriteLine( format, numericStr, _\n            defaultValue, providerValue )\n    End Sub\n\n    Sub Main( )\n\n        &#39; Create a NumberFormatInfo object and set several of its\n        &#39; properties that apply to numbers.\n        Dim provider  As NumberFormatInfo = new NumberFormatInfo( )\n\n        &#39; These properties affect the conversion.\n        provider.NegativeSign = &quot;neg &quot;\n        provider.PositiveSign = &quot;pos &quot;\n\n        &#39; These properties do not affect the conversion.\n        &#39; The input string cannot have decimal and group separators.\n        provider.NumberDecimalSeparator = &quot;.&quot;\n        provider.NumberNegativePattern = 0\n\n        Console.WriteLine( &quot;This example of&quot; &amp; vbCrLf &amp; _\n            &quot;  Convert.ToSByte( String ) and &quot; &amp; vbCrLf &amp; _\n            &quot;  Convert.ToSByte( String, IFormatProvider ) &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output. It &quot; &amp; _\n            &quot;converts several strings to &quot; &amp; vbCrLf &amp; &quot;SByte &quot; &amp; _\n            &quot;values, using default formatting &quot; &amp; _\n            &quot;or a NumberFormatInfo object.&quot; &amp; vbCrLf )\n        Console.WriteLine( format, &quot;String to convert&quot;, _\n            &quot;Default/exception&quot;, &quot;Provider/exception&quot; )\n        Console.WriteLine( format, &quot;-----------------&quot;, _\n            &quot;-----------------&quot;, &quot;------------------&quot; )\n\n        &#39; Convert strings, with and without an IFormatProvider.\n        ConvertToSByte( &quot;123&quot;, provider )\n        ConvertToSByte( &quot;+123&quot;, provider )\n        ConvertToSByte( &quot;pos 123&quot;, provider )\n        ConvertToSByte( &quot;-123&quot;, provider )\n        ConvertToSByte( &quot;neg 123&quot;, provider )\n        ConvertToSByte( &quot;123.&quot;, provider )\n        ConvertToSByte( &quot;(123)&quot;, provider )\n        ConvertToSByte( &quot;128&quot;, provider )\n        ConvertToSByte( &quot;-129&quot;, provider )\n    End Sub \nEnd Module \n\n&#39; This example of\n&#39;   Convert.ToSByte( String ) and\n&#39;   Convert.ToSByte( String, IFormatProvider )\n&#39; generates the following output. It converts several strings to\n&#39; SByte values, using default formatting or a NumberFormatInfo object.\n&#39; \n&#39; String to convert   Default/exception   Provider/exception\n&#39; -----------------   -----------------   ------------------\n&#39; 123                 123                 123\n&#39; +123                123                 FormatException\n&#39; pos 123             FormatException     123\n&#39; -123                -123                FormatException\n&#39; neg 123             FormatException     -123\n&#39; 123.                FormatException     FormatException\n&#39; (123)               FormatException     FormatException\n&#39; 128                 OverflowException   OverflowException\n&#39; -129                OverflowException   FormatException\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#11\">      ushort[] numbers = { UInt16.MinValue, 121, 340, UInt16.MaxValue };\n      sbyte result;\n      \n      foreach (ushort number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt16 value 0 to the SByte value 0.\n      //    Converted the UInt16 value 121 to the SByte value 121.\n      //    The UInt16 value 340 is outside the range of the SByte type.\n      //    The UInt16 value 65535 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#11\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 340, UInt16.MaxValue }\n      Dim result As SByte\n      For Each number As UShort In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt16 value 0 to the SByte value 0.\n      &#39;    Converted the UInt16 value 121 to the SByte value 121.\n      &#39;    The UInt16 value 340 is outside the range of the SByte type.\n      &#39;    The UInt16 value 65535 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an integer array to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#12\">      uint[] numbers = { UInt32.MinValue, 121, 340, UInt32.MaxValue };\n      sbyte result;\n      \n      foreach (uint number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt32 value 0 to the SByte value 0.\n      //    Converted the UInt32 value 121 to the SByte value 121.\n      //    The UInt32 value 340 is outside the range of the SByte type.\n      //    The UInt32 value 4294967295 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#12\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 340, UInt32.MaxValue }\n      Dim result As SByte\n      For Each number As UInteger In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt32 value 0 to the SByte value 0.\n      &#39;    Converted the UInt32 value 121 to the SByte value 121.\n      &#39;    The UInt32 value 340 is outside the range of the SByte type.\n      &#39;    The UInt32 value 4294967295 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of long integers to a signed byte.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#13\">      ulong[] numbers = { UInt64.MinValue, 121, 340, UInt64.MaxValue };\n      sbyte result;\n      \n      foreach (ulong number in numbers)\n      {\n         try {\n            result = Convert.ToSByte(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt64 value 0 to the SByte value 0.\n      //    Converted the UInt64 value 121 to the SByte value 121.\n      //    The UInt64 value 340 is outside the range of the SByte type.\n      //    The UInt64 value 18446744073709551615 is outside the range of the SByte type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#13\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 340, UInt64.MaxValue }\n      Dim result As SByte\n      For Each number As ULong In numbers\n         Try\n            result = Convert.ToSByte(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the SByte type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value 0 to the SByte value 0.\n      &#39;    Converted the UInt64 value 121 to the SByte value 121.\n      &#39;    The UInt64 value 340 is outside the range of the SByte type.\n      &#39;    The UInt64 value 18446744073709551615 is outside the range of the SByte type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.sbyte#System_SByte_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.sbyte#System_SByte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>ByteString</code> class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte. The <code>ByteString</code> class implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. Its <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToSByte_\" data-linktype=\"relative-path\">ToSByte</a> method calls the <a class=\"xref\" href=\"system.sbyte#System_SByte_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,IFormatProvider)</a> method to perform the conversion. If it fails, it throws an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#14\">using System;\nusing System.Globalization;\n\npublic enum SignBit { Negative=-1, Zero=0, Positive=1 };\n\npublic struct ByteString : IConvertible\n{\n   private SignBit signBit;\n   private string byteString;\n   \n   public SignBit Sign\n   { \n      set { signBit = value; }\n      get { return signBit; }\n   }\n\n   public string Value\n   { \n      set {\n         if (value.Trim().Length &gt; 2)\n            throw new ArgumentException(&quot;The string representation of a byte cannot have more than two characters.&quot;);\n         else\n            byteString = value;\n      }\n      get { return byteString; }\n   }\n   \n   // IConvertible implementations.\n   public TypeCode GetTypeCode() {\n      return TypeCode.Object;\n   }\n   \n   public bool ToBoolean(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Zero)\n         return false;\n      else\n         return true;\n   } \n   \n   public byte ToByte(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToSByte(byteString, 16)));\n      else\n         return Byte.Parse(byteString, NumberStyles.HexNumber);\n   }\n   \n   public char ToChar(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative) { \n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToSByte(byteString, 16)));\n      }\n      else {\n         byte byteValue = Byte.Parse(this.byteString, NumberStyles.HexNumber);\n         return Convert.ToChar(byteValue);\n      }                \n   } \n   \n   public DateTime ToDateTime(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;ByteString to DateTime conversion is not supported.&quot;);\n   }\n   \n   public decimal ToDecimal(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative) \n      {\n         sbyte byteValue = SByte.Parse(byteString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(byteValue);\n      }\n      else \n      {\n         byte byteValue = Byte.Parse(byteString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(byteValue);\n      }\n   }\n   \n   public double ToDouble(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToDouble(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToDouble(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }   \n   \n   public short ToInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt16(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToInt16(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n   \n   public int ToInt32(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt32(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToInt32(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n   \n   public long ToInt64(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt64(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToInt64(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n   \n   public sbyte ToSByte(IFormatProvider provider)\n   {\n      try {\n         return SByte.Parse(byteString, NumberStyles.HexNumber);\n      }   \n      catch (OverflowException e) {\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, \n                                                   Byte.Parse(byteString, NumberStyles.HexNumber)), e);\n      } \n   }\n\n   public float ToSingle(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToSingle(SByte.Parse(byteString, NumberStyles.HexNumber));\n      else\n         return Convert.ToSingle(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n\n   public string ToString(IFormatProvider provider)\n   {\n      return &quot;0x&quot; + this.byteString;\n   }\n   \n   public object ToType(Type conversionType, IFormatProvider provider)\n   {\n      switch (Type.GetTypeCode(conversionType))\n      {\n         case TypeCode.Boolean: \n            return this.ToBoolean(null);\n         case TypeCode.Byte:\n            return this.ToByte(null);\n         case TypeCode.Char:\n            return this.ToChar(null);\n         case TypeCode.DateTime:\n            return this.ToDateTime(null);\n         case TypeCode.Decimal:\n            return this.ToDecimal(null);\n         case TypeCode.Double:\n            return this.ToDouble(null);\n         case TypeCode.Int16:\n            return this.ToInt16(null);\n         case TypeCode.Int32:\n            return this.ToInt32(null);\n         case TypeCode.Int64:\n            return this.ToInt64(null);\n         case TypeCode.Object:\n            if (typeof(ByteString).Equals(conversionType))\n               return this;\n            else\n               throw new InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name));\n         case TypeCode.SByte:\n            return this.ToSByte(null);\n         case TypeCode.Single:\n            return this.ToSingle(null);\n         case TypeCode.String:\n            return this.ToString(null);\n         case TypeCode.UInt16:\n            return this.ToUInt16(null);\n         case TypeCode.UInt32:\n            return this.ToUInt32(null);\n         case TypeCode.UInt64:\n            return this.ToUInt64(null);   \n         default:\n            throw new InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name));   \n      }\n   }\n   \n   public UInt16 ToUInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, \n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt16(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n\n   public UInt32 ToUInt32(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, \n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt32(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n   \n   public UInt64 ToUInt64(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, \n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt64(Byte.Parse(byteString, NumberStyles.HexNumber));\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#14\">Imports System.Globalization\n\nPublic Enum SignBit As Integer\n   Positive = 1\n   Zero = 0\n   Negative = -1\nEnd Enum\n\nPublic Structure ByteString : Implements IConvertible\n   Private signBit As SignBit\n   Private byteString As String\n   \n   Public Property Sign As SignBit\n      Set\n         signBit = value\n      End Set\n      Get\n         Return signBit\n      End Get\n   End Property\n   \n   Public Property Value As String\n      Set\n         If value.Trim().Length &gt; 2 Then\n            Throw New ArgumentException(&quot;The string representation of a byte cannot have more than two characters.&quot;)\n         Else\n            byteString = value\n         End If   \n      End Set\n      Get\n         Return byteString\n      End Get\n   End Property\n   \n   &#39; IConvertible implementations.\n   Public Function GetTypeCode() As TypeCode _\n                   Implements IConvertible.GetTypeCode\n      Return TypeCode.Object\n   End Function\n   \n   Public Function ToBoolean(provider As IFormatProvider) As Boolean _\n                   Implements IConvertible.ToBoolean\n      If signBit = SignBit.Zero Then\n         Return False\n      Else\n         Return True\n      End If\n   End Function \n   \n   Public Function ToByte(provider As IFormatProvider) As Byte _\n                   Implements IConvertible.ToByte\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToSByte(byteString, 16))) \n      Else\n         Return Byte.Parse(byteString, NumberStyles.HexNumber)\n      End If       \n   End Function\n   \n   Public Function ToChar(provider As IFormatProvider) As Char _\n                   Implements IConvertible.ToChar\n      If signBit = signBit.Negative Then \n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToSByte(byteString, 16)))\n      Else\n         Dim byteValue As Byte = Byte.Parse(Me.byteString, NumberStyles.HexNumber)\n         Return Convert.ToChar(byteValue)\n      End If                \n   End Function \n   \n   Public Function ToDateTime(provider As IFormatProvider) As Date _\n                   Implements IConvertible.ToDateTime\n      Throw New InvalidCastException(&quot;ByteString to DateTime conversion is not supported.&quot;)\n   End Function\n   \n   Public Function ToDecimal(provider As IFormatProvider) As Decimal _\n                   Implements IConvertible.ToDecimal\n      If signBit = signBit.Negative Then\n         Dim byteValue As SByte = SByte.Parse(byteString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(byteValue)\n      Else\n         Dim byteValue As Byte = Byte.Parse(byteString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(byteValue)\n      End If\n   End Function\n   \n   Public Function ToDouble(provider As IFormatProvider) As Double _\n                   Implements IConvertible.ToDouble\n      If signBit = signBit.Negative Then\n         Return Convert.ToDouble(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToDouble(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function   \n   \n   Public Function ToInt16(provider As IFormatProvider) As Int16 _\n                   Implements IConvertible.ToInt16\n      If signBit = signBit.Negative Then\n         Return Convert.ToInt16(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToInt16(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToInt32(provider As IFormatProvider) As Int32 _\n                   Implements IConvertible.ToInt32\n      If signBit = signBit.Negative Then\n         Return Convert.ToInt32(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToInt32(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToInt64(provider As IFormatProvider) As Int64 _\n                   Implements IConvertible.ToInt64\n      If signBit = signBit.Negative Then\n         Return Convert.ToInt64(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToInt64(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToSByte(provider As IFormatProvider) As SByte _\n                   Implements IConvertible.ToSByte\n      Try\n         Return SByte.Parse(byteString, NumberStyles.HexNumber)\n      Catch e As OverflowException\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, _\n                                                   Byte.Parse(byteString, NumberStyles.HexNumber)))\n      End Try   \n   End Function\n\n   Public Function ToSingle(provider As IFormatProvider) As Single _\n                   Implements IConvertible.ToSingle\n      If signBit = signBit.Negative Then\n         Return Convert.ToSingle(SByte.Parse(byteString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToSingle(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n\n   Public Overloads Function ToString(provider As IFormatProvider) As String _\n                   Implements IConvertible.ToString\n      Return Me.byteString\n   End Function\n   \n   Public Function ToType(conversionType As Type, provider As IFormatProvider) As Object _\n                   Implements IConvertible.ToType\n      Select Case Type.GetTypeCode(conversionType)\n         Case TypeCode.Boolean \n            Return Me.ToBoolean(Nothing)\n         Case TypeCode.Byte\n            Return Me.ToByte(Nothing)\n         Case TypeCode.Char\n            Return Me.ToChar(Nothing)\n         Case TypeCode.DateTime\n            Return Me.ToDateTime(Nothing)\n         Case TypeCode.Decimal\n            Return Me.ToDecimal(Nothing)\n         Case TypeCode.Double\n            Return Me.ToDouble(Nothing)\n         Case TypeCode.Int16\n            Return Me.ToInt16(Nothing)\n         Case TypeCode.Int32\n            Return Me.ToInt32(Nothing)\n         Case TypeCode.Int64\n            Return Me.ToInt64(Nothing)\n         Case TypeCode.Object\n            If GetType(ByteString).Equals(conversionType) Then\n               Return Me\n            Else\n               Throw New InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name))\n            End If \n         Case TypeCode.SByte\n            Return Me.ToSByte(Nothing)\n         Case TypeCode.Single\n            Return Me.ToSingle(Nothing)\n         Case TypeCode.String\n            Return Me.ToString(Nothing)\n         Case TypeCode.UInt16\n            Return Me.ToUInt16(Nothing)\n         Case TypeCode.UInt32\n            Return Me.ToUInt32(Nothing)\n         Case TypeCode.UInt64\n            Return Me.ToUInt64(Nothing)   \n         Case Else\n            Throw New InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name))   \n            \n      End Select\n   End Function\n   \n   Public Function ToUInt16(provider As IFormatProvider) As UInt16 _\n                   Implements IConvertible.ToUInt16\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, _\n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt16(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n\n   Public Function ToUInt32(provider As IFormatProvider) As UInt32 _\n                   Implements IConvertible.ToUInt32\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt32(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToUInt64(provider As IFormatProvider) As UInt64 _\n                   Implements IConvertible.ToUInt64\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, _\n                                                   SByte.Parse(byteString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt64(Byte.Parse(byteString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \nEnd Structure\n</code></pre><p> The following example shows how the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToSByte_\" data-linktype=\"relative-path\">ToSByte</a> implementation of the <code>ByteString</code> class is called by the ToSByte method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#15\">public class Class1\n{\n   public static void Main()\n   {\n      sbyte positiveByte = 120;\n      sbyte negativeByte = -101;\n      \n      \n      ByteString positiveString = new ByteString();\n      positiveString.Sign = (SignBit) Math.Sign(positiveByte);\n      positiveString.Value = positiveByte.ToString(&quot;X2&quot;);\n      \n      ByteString negativeString = new ByteString();\n      negativeString.Sign = (SignBit) Math.Sign(negativeByte);\n      negativeString.Value = negativeByte.ToString(&quot;X2&quot;);\n      \n      try {\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, positiveString.Value, Convert.ToSByte(positiveString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;0x{0} is outside the range of the Byte type.&quot;, positiveString.Value);\n      }\n\n      try {\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, negativeString.Value, Convert.ToSByte(negativeString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;0x{0} is outside the range of the Byte type.&quot;, negativeString.Value);\n      }   \n   }\n}\n// The example displays the following output:\n//       &#39;78&#39; converts to 120.\n//       &#39;9B&#39; converts to -101.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#15\">Module modMain\n   Public Sub Main()\n      Dim positiveByte As SByte = 120\n      Dim negativeByte As SByte = -101\n      \n      \n      Dim positiveString As New ByteString()\n      positiveString.Sign = CType(Math.Sign(positiveByte), SignBit)\n      positiveString.Value = positiveByte.ToString(&quot;X2&quot;)\n      \n      Dim negativeString As New ByteString()\n      negativeString.Sign = CType(Math.Sign(negativeByte), SignBit)\n      negativeString.Value = negativeByte.ToString(&quot;X2&quot;)\n      \n      Try\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, positiveString.Value, Convert.ToSByte(positiveString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;0x{0} is outside the range of the Byte type.&quot;, positiveString.Value)\n      End Try\n\n      Try\n         Console.WriteLine(&quot;&#39;{0}&#39; converts to {1}.&quot;, negativeString.Value, Convert.ToSByte(negativeString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;0x{0} is outside the range of the Byte type.&quot;, negativeString.Value)\n      End Try   \n   End Sub\nEnd Module\n&#39; The example dosplays the following output:\n&#39;       &#39;78&#39; converts to 120.\n&#39;       &#39;9B&#39; converts to -101.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.sbyte#System_SByte_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts string representations of <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> values with the <code>ToSByte</code> method, using an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToSInts_String#4\">// Example of the Convert::ToSByte( String* ) and \n// Convert::ToSByte( String*, IFormatProvider* ) methods.\nusing namespace System;\nusing namespace System::Globalization;\nconst __wchar_t * protoFmt = L&quot;{0,-20}{1,-20}{2}&quot;;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\nvoid ConvertToSByte( String^ numericStr, IFormatProvider^ provider )\n{\n   Object^ defaultValue;\n   Object^ providerValue;\n   \n   // Convert numericStr to SByte without a format provider.\n   try\n   {\n      defaultValue = Convert::ToSByte( numericStr );\n   }\n   catch ( Exception^ ex ) \n   {\n      defaultValue = GetExceptionType( ex );\n   }\n\n   \n   // Convert numericStr to SByte with a format provider.\n   try\n   {\n      providerValue = Convert::ToSByte( numericStr, provider );\n   }\n   catch ( Exception^ ex ) \n   {\n      providerValue = GetExceptionType( ex );\n   }\n\n   Console::WriteLine( gcnew String( protoFmt ), numericStr, defaultValue, providerValue );\n}\n\nint main()\n{\n   \n   // Create a NumberFormatInfo object and set several of its\n   // properties that apply to numbers.\n   NumberFormatInfo^ provider = gcnew NumberFormatInfo;\n   \n   // These properties affect the conversion.\n   provider-&gt;NegativeSign = &quot;neg &quot;;\n   provider-&gt;PositiveSign = &quot;pos &quot;;\n   \n   // These properties do not affect the conversion.\n   // The input string cannot have decimal and group separators.\n   provider-&gt;NumberDecimalSeparator = &quot;.&quot;;\n   provider-&gt;NumberNegativePattern = 0;\n   Console::WriteLine( &quot;This example of<br>&quot;\n   &quot;  Convert::ToSByte( String* ) and <br>&quot;\n   &quot;  Convert::ToSByte( String*, IFormatProvider* ) &quot;\n   &quot;<br>generates the following output. It converts &quot;\n   &quot;several strings to <br>SByte values, using &quot;\n   &quot;default formatting or a NumberFormatInfo object.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;String to convert&quot;, &quot;Default/exception&quot;, &quot;Provider/exception&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;-----------------&quot;, &quot;-----------------&quot;, &quot;------------------&quot; );\n   \n   // Convert strings, with and without an IFormatProvider.\n   ConvertToSByte( &quot;123&quot;, provider );\n   ConvertToSByte( &quot;+123&quot;, provider );\n   ConvertToSByte( &quot;pos 123&quot;, provider );\n   ConvertToSByte( &quot;-123&quot;, provider );\n   ConvertToSByte( &quot;neg 123&quot;, provider );\n   ConvertToSByte( &quot;123.&quot;, provider );\n   ConvertToSByte( &quot;(123)&quot;, provider );\n   ConvertToSByte( &quot;128&quot;, provider );\n   ConvertToSByte( &quot;-129&quot;, provider );\n}\n\n/*\nThis example of\n  Convert::ToSByte( String* ) and\n  Convert::ToSByte( String*, IFormatProvider* )\ngenerates the following output. It converts several strings to\nSByte values, using default formatting or a NumberFormatInfo object.\n\nString to convert   Default/exception   Provider/exception\n-----------------   -----------------   ------------------\n123                 123                 123\n+123                123                 FormatException\npos 123             FormatException     123\n-123                -123                FormatException\nneg 123             FormatException     -123\n123.                FormatException     FormatException\n(123)               FormatException     FormatException\n128                 OverflowException   OverflowException\n-129                OverflowException   FormatException\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToSInts_String#4\">// Example of the Convert.ToSByte( string ) and \n// Convert.ToSByte( string, IFormatProvider ) methods.\nusing System;\nusing System.Globalization;\n\nclass ToSByteProviderDemo\n{\n    static string format = &quot;{0,-20}{1,-20}{2}&quot;;\n\n     // Get the exception type name; remove the namespace prefix.\n    static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    static void ConvertToSByte( string numericStr, \n        IFormatProvider provider )\n    {\n        object defaultValue;\n        object providerValue;\n\n        // Convert numericStr to SByte without a format provider.\n        try\n        {\n            defaultValue = Convert.ToSByte( numericStr );\n        }\n        catch( Exception ex )\n        {\n            defaultValue = GetExceptionType( ex );\n        }\n\n        // Convert numericStr to SByte with a format provider.\n        try\n        {\n            providerValue = Convert.ToSByte( numericStr, provider );\n        }\n        catch( Exception ex )\n        {\n            providerValue = GetExceptionType( ex );\n        }\n\n        Console.WriteLine( format, numericStr, \n            defaultValue, providerValue );\n    }\n\n    public static void Main( )\n    {\n        // Create a NumberFormatInfo object and set several of its\n        // properties that apply to numbers.\n        NumberFormatInfo provider = new NumberFormatInfo();\n\n        // These properties affect the conversion.\n        provider.NegativeSign = &quot;neg &quot;;\n        provider.PositiveSign = &quot;pos &quot;;\n\n        // These properties do not affect the conversion.\n        // The input string cannot have decimal and group separators.\n        provider.NumberDecimalSeparator = &quot;.&quot;;\n        provider.NumberNegativePattern = 0;\n\n        Console.WriteLine(&quot;This example of<br>&quot; +\n            &quot;  Convert.ToSByte( string ) and <br>&quot; +\n            &quot;  Convert.ToSByte( string, IFormatProvider ) &quot; +\n            &quot;<br>generates the following output. It converts &quot; +\n            &quot;several strings to <br>SByte values, using &quot; +\n            &quot;default formatting or a NumberFormatInfo object.<br>&quot; );\n        Console.WriteLine( format, &quot;String to convert&quot;, \n            &quot;Default/exception&quot;, &quot;Provider/exception&quot; );\n        Console.WriteLine( format, &quot;-----------------&quot;, \n            &quot;-----------------&quot;, &quot;------------------&quot; );\n\n        // Convert strings, with and without an IFormatProvider.\n        ConvertToSByte( &quot;123&quot;, provider );\n        ConvertToSByte( &quot;+123&quot;, provider );\n        ConvertToSByte( &quot;pos 123&quot;, provider );\n        ConvertToSByte( &quot;-123&quot;, provider );\n        ConvertToSByte( &quot;neg 123&quot;, provider );\n        ConvertToSByte( &quot;123.&quot;, provider );\n        ConvertToSByte( &quot;(123)&quot;, provider );\n        ConvertToSByte( &quot;128&quot;, provider );\n        ConvertToSByte( &quot;-129&quot;, provider );\n    }\n}\n\n/*\nThis example of\n  Convert.ToSByte( string ) and\n  Convert.ToSByte( string, IFormatProvider )\ngenerates the following output. It converts several strings to\nSByte values, using default formatting or a NumberFormatInfo object.\n\nString to convert   Default/exception   Provider/exception\n-----------------   -----------------   ------------------\n123                 123                 123\n+123                123                 FormatException\npos 123             FormatException     123\n-123                -123                FormatException\nneg 123             FormatException     -123\n123.                FormatException     FormatException\n(123)               FormatException     FormatException\n128                 OverflowException   OverflowException\n-129                OverflowException   FormatException\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSInts_String#4\">&#39; Example of the Convert.ToSByte( String ) and \n&#39; Convert.ToSByte( String, IFormatProvider ) methods.\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nModule ToSByteProviderDemo\n\n    Dim format As String = &quot;{0,-20}{1,-20}{2}&quot;\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    Sub ConvertToSByte( numericStr As String, _\n        provider As IFormatProvider )\n\n        Dim defaultValue    As Object\n        Dim providerValue   As Object\n\n        &#39; Convert numericStr to SByte without a format provider.\n        Try\n            defaultValue = Convert.ToSByte( numericStr )\n        Catch ex As Exception\n            defaultValue = GetExceptionType( ex )\n        End Try\n\n        &#39; Convert numericStr to SByte with a format provider.\n        Try\n            providerValue = Convert.ToSByte( numericStr, provider )\n        Catch ex As Exception\n            providerValue = GetExceptionType( ex )\n        End Try\n\n        Console.WriteLine( format, numericStr, _\n            defaultValue, providerValue )\n    End Sub\n\n    Sub Main( )\n\n        &#39; Create a NumberFormatInfo object and set several of its\n        &#39; properties that apply to numbers.\n        Dim provider  As NumberFormatInfo = new NumberFormatInfo( )\n\n        &#39; These properties affect the conversion.\n        provider.NegativeSign = &quot;neg &quot;\n        provider.PositiveSign = &quot;pos &quot;\n\n        &#39; These properties do not affect the conversion.\n        &#39; The input string cannot have decimal and group separators.\n        provider.NumberDecimalSeparator = &quot;.&quot;\n        provider.NumberNegativePattern = 0\n\n        Console.WriteLine( &quot;This example of&quot; &amp; vbCrLf &amp; _\n            &quot;  Convert.ToSByte( String ) and &quot; &amp; vbCrLf &amp; _\n            &quot;  Convert.ToSByte( String, IFormatProvider ) &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output. It &quot; &amp; _\n            &quot;converts several strings to &quot; &amp; vbCrLf &amp; &quot;SByte &quot; &amp; _\n            &quot;values, using default formatting &quot; &amp; _\n            &quot;or a NumberFormatInfo object.&quot; &amp; vbCrLf )\n        Console.WriteLine( format, &quot;String to convert&quot;, _\n            &quot;Default/exception&quot;, &quot;Provider/exception&quot; )\n        Console.WriteLine( format, &quot;-----------------&quot;, _\n            &quot;-----------------&quot;, &quot;------------------&quot; )\n\n        &#39; Convert strings, with and without an IFormatProvider.\n        ConvertToSByte( &quot;123&quot;, provider )\n        ConvertToSByte( &quot;+123&quot;, provider )\n        ConvertToSByte( &quot;pos 123&quot;, provider )\n        ConvertToSByte( &quot;-123&quot;, provider )\n        ConvertToSByte( &quot;neg 123&quot;, provider )\n        ConvertToSByte( &quot;123.&quot;, provider )\n        ConvertToSByte( &quot;(123)&quot;, provider )\n        ConvertToSByte( &quot;128&quot;, provider )\n        ConvertToSByte( &quot;-129&quot;, provider )\n    End Sub \nEnd Module \n\n&#39; This example of\n&#39;   Convert.ToSByte( String ) and\n&#39;   Convert.ToSByte( String, IFormatProvider )\n&#39; generates the following output. It converts several strings to\n&#39; SByte values, using default formatting or a NumberFormatInfo object.\n&#39; \n&#39; String to convert   Default/exception   Provider/exception\n&#39; -----------------   -----------------   ------------------\n&#39; 123                 123                 123\n&#39; +123                123                 FormatException\n&#39; pos 123             FormatException     123\n&#39; -123                -123                FormatException\n&#39; neg 123             FormatException     -123\n&#39; 123.                FormatException     FormatException\n&#39; (123)               FormatException     FormatException\n&#39; 128                 OverflowException   OverflowException\n&#39; -129                OverflowException   FormatException\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSByte_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (string value, int fromBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fromBase</code> is not 2, 8, 10, or 16.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, which represents a non-base 10 signed number, is prefixed with a negative sign.  </p>\n<p> -or-  </p>\n<p> <code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>fromBase</code> is 16, you can prefix the number specified by the <code>value</code> parameter with &quot;0x&quot; or &quot;0X&quot;.  </p>\n<p> Because the negative sign is not supported for non-base 10 numeric representations, the ToSByte method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> data type is converted to an <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> value without the method throwing an exception. The following example converts <a class=\"xref\" href=\"system.byte#System_Byte_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> to its hexadecimal string representation, and then calls the ToSByte method. Instead of throwing an exception, the method displays the message, &quot;0xff converts to -1.&quot;  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#9\">      &#39; Create a hexadecimal value out of range of the SByte type.\n      Dim value As String = Convert.ToString(Byte.MaxValue, 16)\n      &#39; Convert it back to a number.\n      Try\n         Dim number As SByte = Convert.ToSByte(value, 16)\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a signed byte.&quot;, value)\n      End Try   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#9\">      // Create a hexadecimal value out of range of the SByte type.\n      string value = Convert.ToString(byte.MaxValue, 16);\n      // Convert it back to a number.\n      try\n      {\n         sbyte number = Convert.ToSByte(value, 16);\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number);\n      }   \n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a signed byte.&quot;, value);\n      }   \n</code></pre><p> When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#10\">      &#39; Create a negative hexadecimal value out of range of the Long type.\n      Dim sourceNumber As Byte = Byte.MaxValue\n      Dim isSigned As Boolean = Math.Sign(sourceNumber.MinValue) = -1\n      Dim value As String = Convert.ToString(sourceNumber, 16)\n      Dim targetNumber As SByte\n      Try\n         targetNumber = Convert.ToSByte(value, 16)\n         If Not isSigned And ((targetNumber And &amp;H80) &lt;&gt; 0) Then\n            Throw New OverflowException()\n         Else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber)\n         End If    \n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a signed byte.&quot;, value)\n      End Try \n      &#39; Displays the following to the console:\n      &#39;    Unable to convert &#39;0xff&#39; to a signed byte.     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#10\">      // Create a hexadecimal value out of range of the SByte type.\n      byte sourceNumber = byte.MaxValue;\n      bool isSigned = Math.Sign(Convert.ToDouble(sourceNumber.GetType().GetField(&quot;MinValue&quot;).GetValue(null))) == -1;\n      string value = Convert.ToString(sourceNumber, 16);\n      sbyte targetNumber;\n      try\n      {\n         targetNumber = Convert.ToSByte(value, 16);\n         if (! isSigned &amp;&amp; ((targetNumber &amp; 0x80) != 0))\n            throw new OverflowException();\n         else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to a signed byte.&quot;, value);\n      } \n      // Displays the following to the console:\n      //    Unable to convert &#39;0xff&#39; to a signed byte.     \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSByte#16\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] baseValues = { 2, 8, 16};\n      string[] values = { &quot;FF&quot;, &quot;81&quot;, &quot;03&quot;, &quot;11&quot;, &quot;8F&quot;, &quot;01&quot;, &quot;1C&quot;, &quot;111&quot;, \n                          &quot;123&quot;, &quot;18A&quot; }; \n   \n      // Convert to each supported base.\n      foreach (int baseValue in baseValues)\n      {\n         Console.WriteLine(&quot;Converting strings in base {0}:&quot;, baseValue);\n         foreach (string value in values)\n         {\n            Console.Write(&quot;   &#39;{0,-5}  --&gt;  &quot;, value + &quot;&#39;&quot;);\n            try {\n               Console.WriteLine(Convert.ToSByte(value, baseValue));\n            }   \n            catch (FormatException) {\n               Console.WriteLine(&quot;Bad Format&quot;);\n            }   \n            catch (OverflowException) {\n               Console.WriteLine(&quot;Out of Range&quot;);\n            }\n         }\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//       Converting strings in base 2:\n//          &#39;FF&#39;    --&gt;  Bad Format\n//          &#39;81&#39;    --&gt;  Bad Format\n//          &#39;03&#39;    --&gt;  Bad Format\n//          &#39;11&#39;    --&gt;  3\n//          &#39;8F&#39;    --&gt;  Bad Format\n//          &#39;01&#39;    --&gt;  1\n//          &#39;1C&#39;    --&gt;  Bad Format\n//          &#39;111&#39;   --&gt;  7\n//          &#39;123&#39;   --&gt;  Bad Format\n//          &#39;18A&#39;   --&gt;  Bad Format\n//       \n//       Converting strings in base 8:\n//          &#39;FF&#39;    --&gt;  Bad Format\n//          &#39;81&#39;    --&gt;  Bad Format\n//          &#39;03&#39;    --&gt;  3\n//          &#39;11&#39;    --&gt;  9\n//          &#39;8F&#39;    --&gt;  Bad Format\n//          &#39;01&#39;    --&gt;  1\n//          &#39;1C&#39;    --&gt;  Bad Format\n//          &#39;111&#39;   --&gt;  73\n//          &#39;123&#39;   --&gt;  83\n//          &#39;18A&#39;   --&gt;  Bad Format\n//       \n//       Converting strings in base 16:\n//          &#39;FF&#39;    --&gt;  -1\n//          &#39;81&#39;    --&gt;  -127\n//          &#39;03&#39;    --&gt;  3\n//          &#39;11&#39;    --&gt;  17\n//          &#39;8F&#39;    --&gt;  -113\n//          &#39;01&#39;    --&gt;  1\n//          &#39;1C&#39;    --&gt;  28\n//          &#39;111&#39;   --&gt;  Out of Range\n//          &#39;123&#39;   --&gt;  Out of Range\n//          &#39;18A&#39;   --&gt;  Out of Range\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSByte#16\">Module Example\n   Public Sub Main()\n      Dim bases() As Integer = { 2, 8, 16}\n      Dim values() As String = { &quot;FF&quot;, &quot;81&quot;, &quot;03&quot;, &quot;11&quot;, &quot;8F&quot;, &quot;01&quot;, &quot;1C&quot;, _ \n                                 &quot;111&quot;, &quot;123&quot;, &quot;18A&quot; } \n   \n      &#39; Convert to each supported base.\n      For Each base As Integer In bases\n         Console.WriteLine(&quot;Converting strings in base {0}:&quot;, base)\n         For Each value As String In values\n            Console.Write(&quot;   &#39;{0,-5}  --&gt;  &quot;, value + &quot;&#39;&quot;)\n            Try\n               Console.WriteLine(Convert.ToSByte(value, base))\n            Catch e As FormatException\n               Console.WriteLine(&quot;Bad Format&quot;)\n            Catch e As OverflowException\n               Console.WriteLine(&quot;Out of Range&quot;)\n            End Try   \n         Next\n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converting strings in base 2:\n&#39;          &#39;FF&#39;    --&gt;  Bad Format\n&#39;          &#39;81&#39;    --&gt;  Bad Format\n&#39;          &#39;03&#39;    --&gt;  Bad Format\n&#39;          &#39;11&#39;    --&gt;  3\n&#39;          &#39;8F&#39;    --&gt;  Bad Format\n&#39;          &#39;01&#39;    --&gt;  1\n&#39;          &#39;1C&#39;    --&gt;  Bad Format\n&#39;          &#39;111&#39;   --&gt;  7\n&#39;          &#39;123&#39;   --&gt;  Bad Format\n&#39;          &#39;18A&#39;   --&gt;  Bad Format\n&#39;       \n&#39;       Converting strings in base 8:\n&#39;          &#39;FF&#39;    --&gt;  Bad Format\n&#39;          &#39;81&#39;    --&gt;  Bad Format\n&#39;          &#39;03&#39;    --&gt;  3\n&#39;          &#39;11&#39;    --&gt;  9\n&#39;          &#39;8F&#39;    --&gt;  Bad Format\n&#39;          &#39;01&#39;    --&gt;  1\n&#39;          &#39;1C&#39;    --&gt;  Bad Format\n&#39;          &#39;111&#39;   --&gt;  73\n&#39;          &#39;123&#39;   --&gt;  83\n&#39;          &#39;18A&#39;   --&gt;  Bad Format\n&#39;       \n&#39;       Converting strings in base 16:\n&#39;          &#39;FF&#39;    --&gt;  -1\n&#39;          &#39;81&#39;    --&gt;  -127\n&#39;          &#39;03&#39;    --&gt;  3\n&#39;          &#39;11&#39;    --&gt;  17\n&#39;          &#39;8F&#39;    --&gt;  -113\n&#39;          &#39;01&#39;    --&gt;  1\n&#39;          &#39;1C&#39;    --&gt;  28\n&#39;          &#39;111&#39;   --&gt;  Out of Range\n&#39;          &#39;123&#39;   --&gt;  Out of Range\n&#39;          &#39;18A&#39;   --&gt;  Out of Range\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts the Boolean values <code>true</code> and <code>false</code> to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#1\">      bool[] flags = { true, false };\n      float result;\n      \n      foreach (bool flag in flags)\n      {\n         result = Convert.ToSingle(flag);\n         Console.WriteLine(&quot;Converted {0} to {1}.&quot;, flag, result);\n      }\n      // The example displays the following output:\n      //       Converted True to 1.\n      //       Converted False to 0.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#1\">      Dim flags() As Boolean = { True, False }\n      Dim result As Single\n      \n      For Each flag As Boolean In flags\n         result = Convert.ToSingle(flag)\n         Console.WriteLine(&quot;Converted {0} to {1}.&quot;, flag, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted True to 1.\n      &#39;       Converted False to 0.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of byte values to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#2\">      byte[] numbers = { Byte.MinValue, 10, 100, Byte.MaxValue };\n      float result;\n      \n      foreach (byte number in numbers)\n      {\n         result = Convert.ToSingle(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           number.GetType().Name, number,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //       Converted the Byte value 0 to the Single value 0.\n      //       Converted the Byte value 10 to the Single value 10.\n      //       Converted the Byte value 100 to the Single value 100.\n      //       Converted the Byte value 255 to the Single value 255.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#2\">      Dim numbers() As Byte = { Byte.MinValue, 10, 100, Byte.MaxValue }\n      Dim result As Single\n      \n      For Each number As Byte In numbers\n         result = Convert.ToSingle(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;       Converted the Byte value 0 to the Single value 0.\n      &#39;       Converted the Byte value 10 to the Single value 10.\n      &#39;       Converted the Byte value 100 to the Single value 100.\n      &#39;       Converted the Byte value 255 to the Single value 255.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.  </p>\n<p> <code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#3\">      decimal[] values = { Decimal.MinValue, -1034.23m, -12m, 0m, 147m, \n                                  199.55m, 9214.16m, Decimal.MaxValue };\n      float result;\n      \n      foreach (float value in values)\n      {\n         result = Convert.ToSingle(value);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                           value.GetType().Name, value,\n                           result.GetType().Name, result);\n      }                                  \n      // The example displays the following output:\n      //    Converted the Decimal value &#39;-79228162514264337593543950335&#39; to the Single value -7.922816E+28.\n      //    Converted the Decimal value &#39;-1034.23&#39; to the Single value -1034.23.\n      //    Converted the Decimal value &#39;-12&#39; to the Single value -12.\n      //    Converted the Decimal value &#39;0&#39; to the Single value 0.\n      //    Converted the Decimal value &#39;147&#39; to the Single value 147.\n      //    Converted the Decimal value &#39;199.55&#39; to the Single value 199.55.\n      //    Converted the Decimal value &#39;9214.16&#39; to the Single value 9214.16.\n      //    Converted the Decimal value &#39;79228162514264337593543950335&#39; to the Single value 7.922816E+28.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#3\">      Dim values() As Decimal = { Decimal.MinValue, -1034.23d, -12d, 0d, 147d, _\n                                  199.55d, 9214.16d, Decimal.MaxValue }\n      Dim result As Single\n      \n      For Each value As Decimal In values\n         result = Convert.ToSingle(value)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           value.GetType().Name, value, _\n                           result.GetType().Name, result)\n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    Converted the Decimal value &#39;-79228162514264337593543950335&#39; to the Single value -7.922816E+28.\n      &#39;    Converted the Decimal value &#39;-1034.23&#39; to the Single value -1034.23.\n      &#39;    Converted the Decimal value &#39;-12&#39; to the Single value -12.\n      &#39;    Converted the Decimal value &#39;0&#39; to the Single value 0.\n      &#39;    Converted the Decimal value &#39;147&#39; to the Single value 147.\n      &#39;    Converted the Decimal value &#39;199.55&#39; to the Single value 199.55.\n      &#39;    Converted the Decimal value &#39;9214.16&#39; to the Single value 9214.16.\n      &#39;    Converted the Decimal value &#39;79228162514264337593543950335&#39; to the Single value 7.922816E+28.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.  </p>\n<p> <code>value</code> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#4\">      double[] values = { Double.MinValue, -1.38e10, -1023.299, -12.98, \n                          0, 9.113e-16, 103.919, 17834.191, Double.MaxValue };\n      float result;\n      \n      foreach (double value in values)\n      {\n         result = Convert.ToSingle(value);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           value.GetType().Name, value, \n                           result.GetType().Name, result);\n      }                                 \n      // The example displays the following output:\n      //    Converted the Double value &#39;-1.79769313486232E+308&#39; to the Single value -Infinity.\n      //    Converted the Double value &#39;-13800000000&#39; to the Single value -1.38E+10.\n      //    Converted the Double value &#39;-1023.299&#39; to the Single value -1023.299.\n      //    Converted the Double value &#39;-12.98&#39; to the Single value -12.98.\n      //    Converted the Double value &#39;0&#39; to the Single value 0.\n      //   Converted the Double value &#39;9.113E-16&#39; to the Single value 9.113E-16.\n      //    Converted the Double value &#39;103.919&#39; to the Single value 103.919.\n      //    Converted the Double value &#39;17834.191&#39; to the Single value 17834.19.\n      //    Converted the Double value &#39;1.79769313486232E+308&#39; to the Single value Infinity.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#4\">      Dim values() As Double = { Double.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Double.MaxValue }\n      Dim result As Single\n      \n      For Each value As Double In values\n         result = Convert.ToSingle(value)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           value.GetType().Name, value, _\n                           result.GetType().Name, result)\n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    Converted the Double value &#39;-1.79769313486232E+308&#39; to the Single value -Infinity.\n      &#39;    Converted the Double value &#39;-13800000000&#39; to the Single value -1.38E+10.\n      &#39;    Converted the Double value &#39;-1023.299&#39; to the Single value -1023.299.\n      &#39;    Converted the Double value &#39;-12.98&#39; to the Single value -12.98.\n      &#39;    Converted the Double value &#39;0&#39; to the Single value 0.\n      &#39;    Converted the Double value &#39;9.113E-16&#39; to the Single value 9.113E-16.\n      &#39;    Converted the Double value &#39;103.919&#39; to the Single value 103.919.\n      &#39;    Converted the Double value &#39;17834.191&#39; to the Single value 17834.19.\n      &#39;    Converted the Double value &#39;1.79769313486232E+308&#39; to the Single value Infinity.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of 16-bit integers to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#5\">      short[] numbers = { Int16.MinValue, -1032, 0, 192, Int16.MaxValue };\n      float result;\n      \n      foreach (short number in numbers)\n      {\n         result = Convert.ToSingle(number);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           number.GetType().Name, number, \n                           result.GetType().Name, result);\n\n      }                     \n      // The example displays the following output:\n      //    Converted the Int16 value &#39;-32768&#39; to the Single value -32768.\n      //    Converted the Int16 value &#39;-1032&#39; to the Single value -1032.\n      //    Converted the Int16 value &#39;0&#39; to the Single value 0.\n      //    Converted the Int16 value &#39;192&#39; to the Single value 192.\n      //    Converted the Int16 value &#39;32767&#39; to the Single value 32767.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#5\">      Dim numbers() As Short = { Int16.MinValue, -1032, 0, 192, Int16.MaxValue }\n      Dim result As Single\n      \n      For Each number As Short In numbers\n         result = Convert.ToSingle(number)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next                     \n      &#39; The example displays the following output:\n      &#39;    Converted the Int16 value &#39;-32768&#39; to the Single value -32768.\n      &#39;    Converted the Int16 value &#39;-1032&#39; to the Single value -1032.\n      &#39;    Converted the Int16 value &#39;0&#39; to the Single value 0.\n      &#39;    Converted the Int16 value &#39;192&#39; to the Single value 192.\n      &#39;    Converted the Int16 value &#39;32767&#39; to the Single value 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an integer array to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#6\">      int[] numbers = { Int32.MinValue, -1000, 0, 1000, Int32.MaxValue };\n      float result;\n      \n      foreach (int number in numbers)\n      {\n         result = Convert.ToSingle(number);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           number.GetType().Name, number, \n                           result.GetType().Name, result);\n\n      }\n      // The example displays the following output:\n      //    Converted the Int32 value &#39;-2147483648&#39; to the Single value -2.147484E+09.\n      //    Converted the Int32 value &#39;-1000&#39; to the Single value -1000.\n      //    Converted the Int32 value &#39;0&#39; to the Single value 0.\n      //    Converted the Int32 value &#39;1000&#39; to the Single value 1000.\n      //    Converted the Int32 value &#39;2147483647&#39; to the Single value 2.147484E+09.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#6\">      Dim numbers() As Integer = { Int32.MinValue, -1000, 0, 1000, Int32.MaxValue }\n      Dim result As Single\n      \n      For Each number As Integer In numbers\n         result = Convert.ToSingle(number)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Int32 value &#39;-2147483648&#39; to the Single value -2.147484E+09.\n      &#39;    Converted the Int32 value &#39;-1000&#39; to the Single value -1000.\n      &#39;    Converted the Int32 value &#39;0&#39; to the Single value 0.\n      &#39;    Converted the Int32 value &#39;1000&#39; to the Single value 1000.\n      &#39;    Converted the Int32 value &#39;2147483647&#39; to the Single value 2.147484E+09.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of long integers to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#7\">      long[] numbers = { Int64.MinValue, -903, 0, 172, Int64.MaxValue};\n      double result;\n      \n      foreach (long number in numbers)\n      {\n         result = Convert.ToDouble(number);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           number.GetType().Name, number, \n                           result.GetType().Name, result);\n\n      }\n      // The example displays the following output:\n      //    Converted the Int64 value &#39;-9223372036854775808&#39; to the Single value -9.223372E+18.\n      //    Converted the Int64 value &#39;-903&#39; to the Single value -903.\n      //    Converted the Int64 value &#39;0&#39; to the Single value 0.\n      //    Converted the Int64 value &#39;172&#39; to the Single value 172.\n      //    Converted the Int64 value &#39;9223372036854775807&#39; to the Single value 9.223372E+18.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#7\">      Dim numbers() As Long = { Int64.MinValue, -903, 0, 172, Int64.MaxValue}\n      Dim result As Single\n      \n      For Each number As Long In numbers\n         result = Convert.ToSingle(number)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Int64 value &#39;-9223372036854775808&#39; to the Single value -9.223372E+18.\n      &#39;    Converted the Int64 value &#39;-903&#39; to the Single value -903.\n      &#39;    Converted the Int64 value &#39;0&#39; to the Single value 0.\n      &#39;    Converted the Int64 value &#39;172&#39; to the Single value 172.\n      &#39;    Converted the Int64 value &#39;9223372036854775807&#39; to the Single value 9.223372E+18.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.single#System_Single_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.single#System_Single_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToSingle_\" data-linktype=\"relative-path\">ToSingle</a> method of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#8\">      object[] values = { true, &#39;a&#39;, 123, 1.764e32, &quot;9.78&quot;, &quot;1e-02&quot;,\n                          1.67e03, &quot;A100&quot;, &quot;1,033.67&quot;, DateTime.Now,\n                          Decimal.MaxValue };   \n      float result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToSingle(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              value.GetType().Name, value, \n                              result.GetType().Name, result);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not recognized as a valid Single value.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Single type.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;Conversion of the {0} value {1} to a Single is not supported.&quot;,\n                              value.GetType().Name, value);\n         }                     \n      }\n      // The example displays the following output:\n      //    Converted the Boolean value &#39;True&#39; to the Single value 1.\n      //    Conversion of the Char value a to a Single is not supported.\n      //    Converted the Int32 value &#39;123&#39; to the Single value 123.\n      //    Converted the Double value &#39;1.764E+32&#39; to the Single value 1.764E+32.\n      //    Converted the String value &#39;9.78&#39; to the Single value 9.78.\n      //    Converted the String value &#39;1e-02&#39; to the Single value 0.01.\n      //    Converted the Double value &#39;1670&#39; to the Single value 1670.\n      //    The String value A100 is not recognized as a valid Single value.\n      //    Converted the String value &#39;1,033.67&#39; to the Single value 1033.67.\n      //    Conversion of the DateTime value 11/7/2008 08:02:35 AM to a Single is not supported.\n      //    Converted the Decimal value &#39;79228162514264337593543950335&#39; to the Single value 7.922816E+28.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#8\">      Dim values() As Object = { True, &quot;a&quot;c, 123, 1.764e32, &quot;9.78&quot;, &quot;1e-02&quot;, _\n                                 1.67e03, &quot;A100&quot;, &quot;1,033.67&quot;, Date.Now, _\n                                 Decimal.MaxValue }   \n      Dim result As Single\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToSingle(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not recognized as a valid Single value.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the Single type.&quot;, _\n                              value.GetType().Name, value)\n         \n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;Conversion of the {0} value {1} to a Single is not supported.&quot;, _\n                              value.GetType().Name, value)\n         End Try                     \n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value &#39;True&#39; to the Single value 1.\n      &#39;    Conversion of the Char value a to a Single is not supported.\n      &#39;    Converted the Int32 value &#39;123&#39; to the Single value 123.\n      &#39;    Converted the Double value &#39;1.764E+32&#39; to the Single value 1.764E+32.\n      &#39;    Converted the String value &#39;9.78&#39; to the Single value 9.78.\n      &#39;    Converted the String value &#39;1e-02&#39; to the Single value 0.01.\n      &#39;    Converted the Double value &#39;1670&#39; to the Single value 1670.\n      &#39;    The String value A100 is not recognized as a valid Single value.\n      &#39;    Converted the String value &#39;1,033.67&#39; to the Single value 1033.67.\n      &#39;    Conversion of the DateTime value 11/7/2008 07:56:24 AM to a Single is not supported.\n      &#39;    Converted the Decimal value &#39;79228162514264337593543950335&#39; to the Single value 7.922816E+28.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a signed byte array to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#9\">      sbyte[] numbers = { SByte.MinValue, -23, 0, 17, SByte.MaxValue };\n      float result;\n      \n      foreach (sbyte number in numbers)\n      {\n         result = Convert.ToSingle(number);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           number.GetType().Name, number, \n                           result.GetType().Name, result);\n\n      }\n      // The example displays the following output:\n      //    Converted the SByte value &#39;-128&#39; to the Single value -128.\n      //    Converted the SByte value &#39;-23&#39; to the Single value -23.\n      //    Converted the SByte value &#39;0&#39; to the Single value 0.\n      //    Converted the SByte value &#39;17&#39; to the Single value 17.\n      //    Converted the SByte value &#39;127&#39; to the Single value 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#9\">      Dim numbers() As SByte = { SByte.MinValue, -23, 0, 17, SByte.MaxValue }\n      Dim result As Single\n      \n      For Each number As SByte In numbers\n         result = Convert.ToSingle(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the SByte value &#39;-128&#39; to the Single value -128.\n      &#39;    Converted the SByte value &#39;-23&#39; to the Single value -23.\n      &#39;    Converted the SByte value &#39;0&#39; to the Single value 0.\n      &#39;    Converted the SByte value &#39;17&#39; to the Single value 17.\n      &#39;    Converted the SByte value &#39;127&#39; to the Single value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified single-precision floating-point number; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or greater than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToSingle method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.single#System_Single_Parse_System_String_\" data-linktype=\"relative-path\">System.Single.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.single#System_Single_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of numeric strings to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#10\">      string[] values= { &quot;-1,035.77219&quot;, &quot;1AFF&quot;, &quot;1e-35&quot;, &quot;1.63f&quot;,\n                         &quot;1,635,592,999,999,999,999,999,999&quot;, &quot;-17.455&quot;, \n                         &quot;190.34001&quot;, &quot;1.29e325&quot;};\n      float result;\n      \n      foreach (string value in values)\n      {\n         try {\n            result = Convert.ToSingle(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              value.GetType().Name, value, \n                              result.GetType().Name, result);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a Single.&quot;, value);\n         }               \n         catch (OverflowException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of a Single.&quot;, value);\n         }\n      }       \n      // The example displays the following output:\n      //    Converted the String value &#39;-1,035.77219&#39; to the Single value -1035.772.\n      //    Unable to convert &#39;1AFF&#39; to a Single.\n      //    Converted the String value &#39;1e-35&#39; to the Single value 1E-35.\n      //    Unable to convert &#39;1.63f&#39; to a Single.\n      //    Converted the String value &#39;1,635,592,999,999,999,999,999,999&#39; to the Single value 1.635593E+24.\n      //    Converted the String value &#39;-17.455&#39; to the Single value -17.455.\n      //    Converted the String value &#39;190.34001&#39; to the Single value 190.34.\n      //    1.29e325&#39; is outside the range of a Single.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#10\">      Dim values() As String = { &quot;-1,035.77219&quot;, &quot;1AFF&quot;, &quot;1e-35&quot;, &quot;1.63f&quot;,\n                                 &quot;1,635,592,999,999,999,999,999,999&quot;, &quot;-17.455&quot;,\n                                 &quot;190.34001&quot;, &quot;1.29e325&quot;}\n      Dim result As Single\n      \n      For Each value As String In values\n         Try\n            result = Convert.ToSingle(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As FormatException\n            Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a Single.&quot;, value)            \n         Catch e As OverflowException\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of a Single.&quot;, value)\n         End Try\n      Next       \n      &#39; The example displays the following output:\n      &#39;    Converted the String value &#39;-1,035.77219&#39; to the Single value -1035.772.\n      &#39;    Unable to convert &#39;1AFF&#39; to a Single.\n      &#39;    Converted the String value &#39;1e-35&#39; to the Single value 1E-35.\n      &#39;    Unable to convert &#39;1.63f&#39; to a Single.\n      &#39;    Converted the String value &#39;1,635,592,999,999,999,999,999,999&#39; to the Single value 1.635593E+24.\n      &#39;    Converted the String value &#39;-17.455&#39; to the Single value -17.455.\n      &#39;    Converted the String value &#39;190.34001&#39; to the Single value 190.34.\n      &#39;    &#39;1.29e325&#39; is outside the range of a Single.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned 16-bit integers to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#11\">      ushort[] numbers = { UInt16.MinValue, 121, 12345, UInt16.MaxValue };\n      float result;\n      \n      foreach (ushort number in numbers)\n      {\n         result = Convert.ToSingle(number);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           number.GetType().Name, number, \n                           result.GetType().Name, result);\n      }   \n      // The example displays the following output:\n      //    Converted the UInt16 value &#39;0&#39; to the Single value 0.\n      //    Converted the UInt16 value &#39;121&#39; to the Single value 121.\n      //    Converted the UInt16 value &#39;12345&#39; to the Single value 12345.\n      //    Converted the UInt16 value &#39;65535&#39; to the Single value 65535.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#11\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 12345, UInt16.MaxValue }\n      Dim result As Single\n      \n      For Each number As UShort In numbers\n         result = Convert.ToSingle(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;    Converted the UInt16 value &#39;0&#39; to the Single value 0.\n      &#39;    Converted the UInt16 value &#39;121&#39; to the Single value 121.\n      &#39;    Converted the UInt16 value &#39;12345&#39; to the Single value 12345.\n      &#39;    Converted the UInt16 value &#39;65535&#39; to the Single value 65535.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned integers to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#12\">      uint[] numbers = { UInt32.MinValue, 121, 12345, UInt32.MaxValue };\n      float result;\n      \n      foreach (uint number in numbers)\n      {\n         result = Convert.ToSingle(number);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           number.GetType().Name, number, \n                           result.GetType().Name, result);\n      }   \n      // The example displays the following output:\n      //    Converted the UInt32 value &#39;0&#39; to the Single value 0.\n      //    Converted the UInt32 value &#39;121&#39; to the Single value 121.\n      //    Converted the UInt32 value &#39;12345&#39; to the Single value 12345.\n      //    Converted the UInt32 value &#39;4294967295&#39; to the Single value 4.294967E+09.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#12\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 12345, UInt32.MaxValue }\n      Dim result As Single\n      \n      For Each number As UInteger In numbers\n         result = Convert.ToSingle(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next   \n      &#39; The example displays the following output:\n   &#39;    Converted the UInt32 value &#39;0&#39; to the Single value 0.\n   &#39;    Converted the UInt32 value &#39;121&#39; to the Single value 121.\n   &#39;    Converted the UInt32 value &#39;12345&#39; to the Single value 12345.\n   &#39;    Converted the UInt32 value &#39;4294967295&#39; to the Single value 4.294967E+09.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned long integers to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#13\">      ulong[] numbers = { UInt64.MinValue, 121, 12345, UInt64.MaxValue };\n      float result;\n      \n      foreach (ulong number in numbers)\n      {\n         result = Convert.ToSingle(number);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                           number.GetType().Name, number, \n                           result.GetType().Name, result);\n      }   \n      // The example displays the following output:\n      //    Converted the UInt64 value &#39;0&#39; to the Single value 0.\n      //    Converted the UInt64 value &#39;121&#39; to the Single value 121.\n      //    Converted the UInt64 value &#39;12345&#39; to the Single value 12345.\n      //    Converted the UInt64 value &#39;18446744073709551615&#39; to the Single value 1.844674E+19.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#13\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 12345, UInt64.MaxValue }\n      Dim result As Single\n      \n      For Each number As ULong In numbers\n         result = Convert.ToSingle(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value &#39;0&#39; to the Single value 0.\n      &#39;    Converted the UInt64 value &#39;121&#39; to the Single value 121.\n      &#39;    Converted the UInt64 value &#39;12345&#39; to the Single value 12345.\n      &#39;    Converted the UInt64 value &#39;18446744073709551615&#39; to the Single value 1.844674E+19.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.single#System_Single_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.single#System_Single_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToSingle_\" data-linktype=\"relative-path\">ToSingle</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Temperature</code> class that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. Its implementation of the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToSingle_\" data-linktype=\"relative-path\">ToSingle</a> method returns the internal value of a private <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> variable that represents the temperature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#14\">using System;\nusing System.Globalization;\n\npublic class Temperature : IConvertible\n{\n   private float m_Temp;\n\n   public Temperature(float temperature)\n   {\n      this.m_Temp = temperature;\n   }\n   \n   public float Celsius\n   {\n      get { return this.m_Temp; }   \n   }\n   \n   public float Kelvin\n   {\n      get { return this.m_Temp + 273.15f; }    \n   }\n   \n   public float Fahrenheit\n   {\n      get { return (float) Math.Round(this.m_Temp * 9 / 5 + 32, 2); }\n   }\n   \n   public override string ToString()\n   {\n      return m_Temp.ToString(&quot;N2&quot;) + &quot; &#176;C&quot;;\n   }\n\n   // IConvertible implementations.\n   public TypeCode GetTypeCode()\n   {\n      return TypeCode.Object;\n   }\n   \n   public bool ToBoolean(IFormatProvider provider) \n   {\n      if (m_Temp == 0)\n         return false;\n      else\n         return true;\n   } \n   \n   public byte ToByte(IFormatProvider provider)\n   {\n      if (m_Temp &lt; Byte.MinValue || m_Temp &gt; Byte.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, \n                                                   this.m_Temp));\n      else\n         return Convert.ToByte(this.m_Temp);\n   }\n   \n   public char ToChar(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Temperature to Char conversion is not supported.&quot;);\n   } \n   \n   public DateTime ToDateTime(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Temperature to DateTime conversion is not supported.&quot;);\n   }\n   \n   public decimal ToDecimal(IFormatProvider provider)\n   {\n      return Convert.ToDecimal(this.m_Temp);\n   }\n   \n   public double ToDouble(IFormatProvider provider)\n   {\n      return Convert.ToDouble(this.m_Temp);\n   }   \n   \n   public short ToInt16(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; Int16.MinValue || this.m_Temp &gt; Int16.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Convert.ToInt16(this.m_Temp);\n   }\n   \n   public int ToInt32(IFormatProvider provider)\n      {\n      if (this.m_Temp &lt; Int32.MinValue || this.m_Temp &gt; Int32.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Convert.ToInt32(this.m_Temp);\n   }\n   \n   public long ToInt64(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; Int64.MinValue || this.m_Temp &gt; Int64.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Int64 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Convert.ToInt64(this.m_Temp);\n   }\n   \n   public sbyte ToSByte(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; SByte.MinValue || this.m_Temp &gt; SByte.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the SByte type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Convert.ToSByte(this.m_Temp);\n   }\n\n   public float ToSingle(IFormatProvider provider)\n   {\n      return this.m_Temp;\n   }\n\n   public string ToString(IFormatProvider provider)\n   {\n      return m_Temp.ToString(&quot;N2&quot;, provider) + &quot; &#176;C&quot;;\n   }\n   \n   public object ToType(Type conversionType, IFormatProvider provider)\n   {\n      switch (Type.GetTypeCode(conversionType))\n      {\n         case TypeCode.Boolean: \n            return this.ToBoolean(null);\n         case TypeCode.Byte:\n            return this.ToByte(null);\n         case TypeCode.Char:\n            return this.ToChar(null);\n         case TypeCode.DateTime:\n            return this.ToDateTime(null);\n         case TypeCode.Decimal:\n            return this.ToDecimal(null);\n         case TypeCode.Double:\n            return this.ToDouble(null);\n         case TypeCode.Int16:\n            return this.ToInt16(null);\n         case TypeCode.Int32:\n            return this.ToInt32(null);\n         case TypeCode.Int64:\n            return this.ToInt64(null);\n         case TypeCode.Object:\n            if (typeof(Temperature).Equals(conversionType))\n               return this;\n            else\n               throw new InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;,\n                                                            conversionType.Name));\n         case TypeCode.SByte:\n            return this.ToSByte(null);\n         case TypeCode.Single:\n            return this.ToSingle(null);\n         case TypeCode.String:\n            return this.ToString(provider);\n         case TypeCode.UInt16:\n            return this.ToUInt16(null);\n         case TypeCode.UInt32:\n            return this.ToUInt32(null);\n         case TypeCode.UInt64:\n            return this.ToUInt64(null);   \n         default:\n            throw new InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name));   \n      }\n   }\n   \n   public ushort ToUInt16(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt16.MinValue || this.m_Temp &gt; UInt16.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Convert.ToUInt16(this.m_Temp);\n   }\n\n   public uint ToUInt32(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt32.MinValue || this.m_Temp &gt; UInt32.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt32 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Convert.ToUInt32(this.m_Temp);\n   }\n   \n   public ulong ToUInt64(IFormatProvider provider)\n   {\n      if (this.m_Temp &lt; UInt64.MinValue || this.m_Temp &gt; UInt64.MaxValue)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt64 type.&quot;,\n                                                   this.m_Temp));\n      else\n         return Convert.ToUInt64(this.m_Temp);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#14\">Imports System.Globalization\n\nPublic Class Temperature : Implements IConvertible\n   Private m_Temp As Single\n\n   Public Sub New(temperature As Single)\n      Me.m_Temp = temperature\n   End Sub\n   \n   Public ReadOnly Property Celsius() As Single\n      Get\n         Return Me.m_Temp\n      End Get   \n   End Property\n   \n   Public ReadOnly Property Kelvin() As Single\n      Get\n         Return Me.m_Temp + 273.15F\n      End Get\n   End Property\n   \n   Public ReadOnly Property Fahrenheit() As Single\n      Get\n         Return CSng(Math.Round(Me.m_Temp * 9 / 5 + 32, 2))\n      End Get      \n   End Property\n   \n   Public Overrides Function ToString() As String\n      Return m_Temp.ToString(&quot;N2&quot;) &amp; &quot; &#176;C&quot;\n   End Function\n\n   &#39; IConvertible implementations.\n   Public Function GetTypeCode() As TypeCode _\n                   Implements IConvertible.GetTypeCode\n      Return TypeCode.Object\n   End Function\n   \n   Public Function ToBoolean(provider As IFormatProvider) As Boolean _\n                   Implements IConvertible.ToBoolean\n      If m_Temp = 0 Then\n         Return False\n      Else\n         Return True\n      End If\n   End Function \n   \n   Public Function ToByte(provider As IFormatProvider) As Byte _\n                   Implements IConvertible.ToByte\n      If m_Temp &lt; Byte.MinValue Or m_Temp &gt; Byte.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, _ \n                                                   Me.m_Temp)) \n      Else\n         Return Convert.ToByte(Me.m_Temp)\n      End If       \n   End Function\n   \n   Public Function ToChar(provider As IFormatProvider) As Char _\n                   Implements IConvertible.ToChar\n      Throw New InvalidCastException(&quot;Temperature to Char conversion is not supported.&quot;)\n   End Function \n   \n   Public Function ToDateTime(provider As IFormatProvider) As Date _\n                   Implements IConvertible.ToDateTime\n      Throw New InvalidCastException(&quot;Temperature to DateTime conversion is not supported.&quot;)\n   End Function\n   \n   Public Function ToDecimal(provider As IFormatProvider) As Decimal _\n                   Implements IConvertible.ToDecimal\n      Return Convert.ToDecimal(Me.m_Temp)\n   End Function\n   \n   Public Function ToDouble(provider As IFormatProvider) As Double _\n                   Implements IConvertible.ToDouble\n      Return Convert.ToDouble(Me.m_Temp)\n   End Function   \n   \n   Public Function ToInt16(provider As IFormatProvider) As Int16 _\n                   Implements IConvertible.ToInt16\n      If Me.m_Temp &lt; Int16.MinValue Or Me.m_Temp &gt; Int16.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Convert.ToInt16(Me.m_Temp)   \n      End If\n   End Function\n   \n   Public Function ToInt32(provider As IFormatProvider) As Int32 _\n                   Implements IConvertible.ToInt32\n      If Me.m_Temp &lt; Int32.MinValue Or Me.m_Temp &gt; Int32.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Convert.ToInt32(Me.m_Temp)\n      End If      \n   End Function\n   \n   Public Function ToInt64(provider As IFormatProvider) As Int64 _\n                   Implements IConvertible.ToInt64\n      If Me.m_Temp &lt; Int64.MinValue Or Me.m_Temp &gt; Int64.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int64 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Convert.ToInt64(Me.m_Temp)\n      End If      \n   End Function\n   \n   Public Function ToSByte(provider As IFormatProvider) As SByte _\n                   Implements IConvertible.ToSByte\n      If Me.m_Temp &lt; SByte.MinValue Or Me.m_Temp &gt; SByte.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the SByte type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Convert.ToSByte(Me.m_Temp)\n      End If      \n   End Function\n\n   Public Function ToSingle(provider As IFormatProvider) As Single _\n                   Implements IConvertible.ToSingle\n      Return Me.m_Temp\n   End Function\n\n   Public Overloads Function ToString(provider As IFormatProvider) As String _\n                   Implements IConvertible.ToString\n      Return m_Temp.ToString(&quot;N2&quot;, provider) &amp; &quot; &#176;C&quot;\n   End Function\n   \n   Public Function ToType(conversionType As Type, provider As IFormatProvider) As Object _\n                   Implements IConvertible.ToType\n      Select Case Type.GetTypeCode(conversionType)\n         Case TypeCode.Boolean \n            Return Me.ToBoolean(Nothing)\n         Case TypeCode.Byte\n            Return Me.ToByte(Nothing)\n         Case TypeCode.Char\n            Return Me.ToChar(Nothing)\n         Case TypeCode.DateTime\n            Return Me.ToDateTime(Nothing)\n         Case TypeCode.Decimal\n            Return Me.ToDecimal(Nothing)\n         Case TypeCode.Double\n            Return Me.ToDouble(Nothing)\n         Case TypeCode.Int16\n            Return Me.ToInt16(Nothing)\n         Case TypeCode.Int32\n            Return Me.ToInt32(Nothing)\n         Case TypeCode.Int64\n            Return Me.ToInt64(Nothing)\n         Case TypeCode.Object\n            If GetType(Temperature).Equals(conversionType) Then\n               Return Me\n            Else\n               Throw New InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, _\n                                                            conversionType.Name))\n            End If \n         Case TypeCode.SByte\n            Return Me.ToSByte(Nothing)\n         Case TypeCode.Single\n            Return Me.ToSingle(Nothing)\n         Case TypeCode.String\n            Return Me.ToString(provider)\n         Case TypeCode.UInt16\n            Return Me.ToUInt16(Nothing)\n         Case TypeCode.UInt32\n            Return Me.ToUInt32(Nothing)\n         Case TypeCode.UInt64\n            Return Me.ToUInt64(Nothing)   \n         Case Else\n            Throw New InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name))   \n      End Select\n   End Function\n   \n   Public Function ToUInt16(provider As IFormatProvider) As UInt16 _\n                   Implements IConvertible.ToUInt16\n      If Me.m_Temp &lt; UInt16.MinValue Or Me.m_Temp &gt; UInt16.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Convert.ToUInt16(Me.m_Temp)\n      End If   \n   End Function\n\n   Public Function ToUInt32(provider As IFormatProvider) As UInt32 _\n                   Implements IConvertible.ToUInt32\n      If Me.m_Temp &lt; UInt32.MinValue Or Me.m_Temp &gt; UInt32.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt32 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Convert.ToUInt32(Me.m_Temp)\n      End If   \n   End Function\n   \n   Public Function ToUInt64(provider As IFormatProvider) As UInt64 _\n                   Implements IConvertible.ToUInt64\n      If Me.m_Temp &lt; UInt64.MinValue Or Me.m_Temp &gt; UInt64.MaxValue Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt64 type.&quot;, _\n                                                   Me.m_Temp))\n      Else\n         Return Convert.ToUInt64(Me.m_temp)\n      End If   \n   End Function\nEnd Class\n</code></pre><p> The following example illustrates how a call to the ToSingle method, in turn, calls the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToSingle_\" data-linktype=\"relative-path\">ToSingle</a> implementation of the <code>Temperature</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#15\">public class Example\n{\n   public static void Main()\n   {\n      Temperature cold = new Temperature(-40);\n      Temperature freezing = new Temperature(0);\n      Temperature boiling = new Temperature(100);\n      \n      Console.WriteLine(Convert.ToInt32(cold, null));\n      Console.WriteLine(Convert.ToInt32(freezing, null));\n      Console.WriteLine(Convert.ToDouble(boiling, null));\n   }\n}\n// The example dosplays the following output:\n//       -40\n//       0\n//       100\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#15\">Module Example\n   Public Sub Main()\n      Dim cold As New Temperature(-40)\n      Dim freezing As New Temperature(0)\n      Dim boiling As New Temperature(100)\n      \n      Console.WriteLine(Convert.ToInt32(cold, Nothing))\n      Console.WriteLine(Convert.ToInt32(freezing, Nothing))\n      Console.WriteLine(Convert.ToDouble(boiling, Nothing))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       -40\n&#39;       0\n&#39;       100\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToSingle_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a number in a valid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or greater than <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.single#System_Single_Parse_\" data-linktype=\"relative-path\">Parse</a> method on <code>value</code>.  </p>\n<p> <code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.single#System_Single_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToSingle#16\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim values() As String = { &quot;123456789&quot;, &quot;12345.6789&quot;, &quot;12 345,6789&quot;, _\n                                 &quot;123,456.789&quot;, &quot;123 456,789&quot;, &quot;123,456,789.0123&quot;, _\n                                 &quot;123 456 789,0123&quot;, &quot;1.235e12&quot;, &quot;1.03221e-05&quot;, _\n                                 Double.MaxValue.ToString() }\n      Dim cultures() As CultureInfo = { New CultureInfo(&quot;en-US&quot;), _\n                                        New CultureInfo(&quot;fr-FR&quot;) } \n\n      For Each culture As CultureInfo In cultures\n         Console.WriteLine(&quot;String -&gt; Single Conversion Using the {0} Culture&quot;, _\n                           culture.Name)\n         For Each value As String In values\n            Console.Write(&quot;{0,22}  -&gt;  &quot;, value)\n            Try\n               Console.WriteLine(Convert.ToSingle(value, culture))\n            Catch e As FormatException\n               Console.WriteLine(&quot;FormatException&quot;)\n            CAtch e As OverflowException\n               Console.WriteLine(&quot;Overflow&quot;)\n            End Try   \n         Next\n         Console.WriteLine()\n      Next                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    String -&gt; Single Conversion Using the en-US Culture\n&#39;                 123456789  -&gt;  1.234568E+08\n&#39;                12345.6789  -&gt;  12345.68\n&#39;               12 345,6789  -&gt;  FormatException\n&#39;               123,456.789  -&gt;  123456.8\n&#39;               123 456,789  -&gt;  FormatException\n&#39;          123,456,789.0123  -&gt;  1.234568E+08\n&#39;          123 456 789,0123  -&gt;  FormatException\n&#39;                  1.235e12  -&gt;  1.235E+12\n&#39;               1.03221e-05  -&gt;  1.03221E-05\n&#39;     1.79769313486232E+308  -&gt;  Overflow\n&#39;    \n&#39;    String -&gt; Single Conversion Using the fr-FR Culture\n&#39;                 123456789  -&gt;  1.234568E+08\n&#39;                12345.6789  -&gt;  FormatException\n&#39;               12 345,6789  -&gt;  12345.68\n&#39;               123,456.789  -&gt;  FormatException\n&#39;               123 456,789  -&gt;  123456.8\n&#39;          123,456,789.0123  -&gt;  FormatException\n&#39;          123 456 789,0123  -&gt;  1.234568E+08\n&#39;                  1.235e12  -&gt;  FormatException\n&#39;               1.03221e-05  -&gt;  FormatException\n&#39;     1.79769313486232E+308  -&gt;  FormatException\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToSingle#16\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { &quot;123456789&quot;, &quot;12345.6789&quot;, &quot;12 345,6789&quot;,\n                          &quot;123,456.789&quot;, &quot;123 456,789&quot;, &quot;123,456,789.0123&quot;,\n                          &quot;123 456 789,0123&quot;, &quot;1.235e12&quot;, &quot;1.03221e-05&quot;, \n                          Double.MaxValue.ToString() };\n      CultureInfo[] cultures = { new CultureInfo(&quot;en-US&quot;),\n                                 new CultureInfo(&quot;fr-FR&quot;) }; \n\n      foreach (CultureInfo culture in cultures)\n      {\n         Console.WriteLine(&quot;String -&gt; Single Conversion Using the {0} Culture&quot;,\n                           culture.Name);\n         foreach (string value in values)\n         {\n            Console.Write(&quot;{0,22}  -&gt;  &quot;, value);\n            try {\n               Console.WriteLine(Convert.ToSingle(value, culture));\n            }\n            catch (FormatException) {\n               Console.WriteLine(&quot;FormatException&quot;);\n            }\n            catch (OverflowException) {\n               Console.WriteLine(&quot;OverflowException&quot;);\n            }\n         }\n         Console.WriteLine();\n      }                     \n   }\n}\n// The example displays the following output:\n//    String -&gt; Single Conversion Using the en-US Culture\n//                 123456789  -&gt;  1.234568E+08\n//                12345.6789  -&gt;  12345.68\n//               12 345,6789  -&gt;  FormatException\n//               123,456.789  -&gt;  123456.8\n//               123 456,789  -&gt;  FormatException\n//          123,456,789.0123  -&gt;  1.234568E+08\n//          123 456 789,0123  -&gt;  FormatException\n//                  1.235e12  -&gt;  1.235E+12\n//               1.03221e-05  -&gt;  1.03221E-05\n//     1.79769313486232E+308  -&gt;  Overflow\n//    \n//    String -&gt; Single Conversion Using the fr-FR Culture\n//                 123456789  -&gt;  1.234568E+08\n//                12345.6789  -&gt;  FormatException\n//               12 345,6789  -&gt;  12345.68\n//               123,456.789  -&gt;  FormatException\n//               123 456,789  -&gt;  123456.8\n//          123,456,789.0123  -&gt;  FormatException\n//          123 456 789,0123  -&gt;  1.234568E+08\n//                  1.235e12  -&gt;  FormatException\n//               1.03221e-05  -&gt;  FormatException\n//     1.79769313486232E+308  -&gt;  FormatException\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a>. It returns <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">System.Boolean.TrueString</a> for <code>true</code> values and <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">System.Boolean.FalseString</a> for <code>false</code> values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the conversion of a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, using <code>ToString</code>. It also illustrates that the string returned by the conversion equals either <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">System.Boolean.TrueString</a> or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">System.Boolean.FalseString</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(Convert.ToString(falseFlag));\n      Console.WriteLine(Convert.ToString(falseFlag).Equals(Boolean.FalseString));\n      Console.WriteLine(Convert.ToString(trueFlag));\n      Console.WriteLine(Convert.ToString(trueFlag).Equals(Boolean.TrueString));\n      // The example displays the following output:\n      //       False\n      //       True\n      //       True\n      //       True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(Convert.ToString(falseFlag))\n      Console.WriteLine(Convert.ToString(falseFlag).Equals(Boolean.FalseString))\n      Console.WriteLine(Convert.ToString(trueFlag))\n      Console.WriteLine(Convert.ToString(trueFlag).Equals(Boolean.TrueString))\n      &#39; The example displays the following output:\n      &#39;       False\n      &#39;       True\n      &#39;       True\n      &#39;       True      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.byte#System_Byte_ToString\" data-linktype=\"relative-path\">System.Byte.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each value in a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array to a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      byte[] values = { Byte.MinValue, 12, 100, 179, Byte.MaxValue } ;\n\n      foreach (var value in values)\n         Console.WriteLine(&quot;{0,3} ({1}) --&gt; {2}&quot;, value, \n                           value.GetType().Name, \n                           Convert.ToString(value));      \n   }\n}\n// The example displays the following output:\n//       0 (Byte) --&gt; 0\n//      12 (Byte) --&gt; 12\n//     100 (Byte) --&gt; 100\n//     179 (Byte) --&gt; 179\n//     255 (Byte) --&gt; 255\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString#3\">Public Module Example\n   Public Sub Main()\n      Dim values() As Byte = { Byte.MinValue, 12, 100, 179, Byte.MaxValue }\n\n      For Each value In values\n         Console.WriteLine(&quot;{0,3} ({1}) --&gt; {2}&quot;, value, \n                           value.GetType().Name, \n                           Convert.ToString(value))\n      Next                           \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0 (Byte) --&gt; 0\n&#39;      12 (Byte) --&gt; 12\n&#39;     100 (Byte) --&gt; 100\n&#39;     179 (Byte) --&gt; 179\n&#39;     255 (Byte) --&gt; 255\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.char#System_Char_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#14\">public:\n   void ConvertStringChar( String^ stringVal )\n   {\n      Char charVal = &#39;a&#39;;\n      \n      // A String must be one character long to convert to char.\n      try\n      {\n         charVal = System::Convert::ToChar( stringVal );\n         System::Console::WriteLine( &quot; {0} as a char is {1}&quot;,\n            stringVal, charVal );\n      }\n      catch ( System::FormatException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;The String is longer than one character.&quot; );\n      }\n      catch ( System::ArgumentNullException^ ) \n      {\n         System::Console::WriteLine( &quot;The String is 0.&quot; );\n      }\n      \n      // A char to String conversion will always succeed.\n      stringVal = System::Convert::ToString( charVal );\n      System::Console::WriteLine( &quot;The character as a String is {0}&quot;,\n         stringVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#14\">\t\tpublic void ConvertStringChar(string stringVal) {\n\t\t\tchar charVal = &#39;a&#39;;\n\n\t\t\t// A string must be one character long to convert to char.\n\t\t\ttry {\n\t\t\t\tcharVal = System.Convert.ToChar(stringVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;{0} as a char is {1}&quot;,\n\t\t\t\t\tstringVal, charVal);\n\t\t\t}\n\t\t\tcatch (System.FormatException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string is longer than one character.&quot;);\n\t\t\t}\n\t\t\tcatch (System.ArgumentNullException) {\n\t\t\t\tSystem.Console.WriteLine(&quot;The string is null.&quot;);\n\t\t\t}\n\n\t\t\t// A char to string conversion will always succeed.\n\t\t\tstringVal = System.Convert.ToString(charVal);\n\t\t\tSystem.Console.WriteLine(&quot;The character as a string is {0}&quot;,\n\t\t\t\t\tstringVal);\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#14\">     Public Sub ConvertStringChar(ByVal stringVal As String)\n         Dim charVal As Char = &quot;a&quot;c\n\n         &#39; A string must be one character long to convert to char.\n         Try\n             charVal = System.Convert.ToChar(stringVal)\n             System.Console.WriteLine(&quot;{0} as a char is {1}&quot;, _\n                                       stringVal, charVal)\n         Catch exception As System.FormatException\n             System.Console.WriteLine( _\n              &quot;The string is longer than one character.&quot;)\n         Catch exception As System.ArgumentNullException\n             System.Console.WriteLine(&quot;The string is null.&quot;)\n         End Try\n\n         &#39; A char to string conversion will always succeed.\n         stringVal = System.Convert.ToString(charVal)\n         System.Console.WriteLine(&quot;The character as a string is {0}&quot;, _\n                                   stringVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString\" data-linktype=\"relative-path\">System.DateTime.ToString()</a>. It uses the formatting conventions of the current culture and the &quot;G&quot; format specifier to convert a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to its string representation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#1\">      DateTime[] dates = { new DateTime(2009, 7, 14), \n                           new DateTime(1, 1, 1, 18, 32, 0), \n                           new DateTime(2009, 2, 12, 7, 16, 0) };\n      string result;\n      \n      foreach (DateTime dateValue in dates)\n      {\n         result = Convert.ToString(dateValue);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              dateValue.GetType().Name, dateValue,\n                              result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the DateTime value 7/14/2009 12:00:00 AM to a String value 7/14/2009 12:00:00 AM.\n      //    Converted the DateTime value 1/1/0001 06:32:00 PM to a String value 1/1/0001 06:32:00 PM.\n      //    Converted the DateTime value 2/12/2009 07:16:00 AM to a String value 2/12/2009 07:16:00 AM.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#1\">      Dim dates() As Date = { #07/14/2009#, #6:32PM#, #02/12/2009 7:16AM#}\n      Dim result As String\n      \n      For Each dateValue As Date In dates\n         result = Convert.ToString(dateValue)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              dateValue.GetType().Name, dateValue, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the DateTime value 7/14/2009 12:00:00 AM to a String value 7/14/2009 12:00:00 AM.\n      &#39;    Converted the DateTime value 1/1/0001 06:32:00 PM to a String value 1/1/0001 06:32:00 PM.\n      &#39;    Converted the DateTime value 2/12/2009 07:16:00 AM to a String value 2/12/2009 07:16:00 AM.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString\" data-linktype=\"relative-path\">System.Decimal.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#15\">public:\n   void ConvertStringDecimal( String^ stringVal )\n   {\n      Decimal decimalVal = 0;\n\n      try\n      {\n         decimalVal = System::Convert::ToDecimal( stringVal );\n         System::Console::WriteLine( &quot;The String as a decimal is {0}.&quot;,\n         decimalVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;The conversion from String to decimal overflowed.&quot; );\n      }\n      catch ( System::FormatException^ ) \n      {\n         System::Console::WriteLine(\n            &quot;The String is not formatted as a decimal.&quot; );\n      }\n      catch ( System::ArgumentNullException^ ) \n      {\n         System::Console::WriteLine( &quot;The String is 0.&quot; );\n      }\n      \n      // Decimal to String conversion will not overflow.\n      stringVal = System::Convert::ToString( decimalVal );\n      System::Console::WriteLine(\n         &quot;The decimal as a String is {0}.&quot;, stringVal );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#15\">\t\tpublic void ConvertStringDecimal(string stringVal) {\n\t\t\tdecimal decimalVal = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tdecimalVal = System.Convert.ToDecimal(stringVal);\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string as a decimal is {0}.&quot;, decimalVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException){\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The conversion from string to decimal overflowed.&quot;);\n\t\t\t}\n\t\t\tcatch (System.FormatException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string is not formatted as a decimal.&quot;);\n\t\t\t}\n\t\t\tcatch (System.ArgumentNullException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string is null.&quot;);\n\t\t\t}\n\n\t\t\t// Decimal to string conversion will not overflow.\n\t\t\tstringVal = System.Convert.ToString(decimalVal);\n\t\t\tSystem.Console.WriteLine(\n\t\t\t\t&quot;The decimal as a string is {0}.&quot;, stringVal);\n\t\t}\t\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#15\">     Public Sub ConvertStringDecimal(ByVal stringVal As String)\n         Dim decimalVal As Decimal = 0\n\n         Try\n             decimalVal = System.Convert.ToDecimal(stringVal)\n             System.Console.WriteLine(&quot;The string as a decimal is {0}.&quot;, _\n                                       decimalVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in string-to-decimal conversion.&quot;)\n         Catch exception As System.FormatException\n             System.Console.WriteLine( _\n                 &quot;The string is not formatted as a decimal.&quot;)\n         Catch exception As System.ArgumentException\n             System.Console.WriteLine(&quot;The string is null.&quot;)\n         End Try\n\n         &#39; Decimal to string conversion will not overflow.\n         stringVal = System.Convert.ToString(decimalVal)\n         System.Console.WriteLine(&quot;The decimal as a string is {0}.&quot;, _\n                                   stringVal)\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.double#System_Double_ToString\" data-linktype=\"relative-path\">System.Double.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert Snippets#7\">public:\n   void ConvertDoubleString( double doubleVal )\n   {\n      String^ stringVal;\n      \n      // A conversion from Double to String cannot overflow.\n      stringVal = System::Convert::ToString( doubleVal );\n      System::Console::WriteLine( &quot; {0} as a String is: {1}&quot;,\n         doubleVal, stringVal );\n      try\n      {\n         doubleVal = System::Convert::ToDouble( stringVal );\n         System::Console::WriteLine( &quot; {0} as a double is: {1}&quot;,\n         stringVal, doubleVal );\n      }\n      catch ( System::OverflowException^ ) \n      {\n         System::Console::WriteLine( &quot;Conversion from String-to-double overflowed.&quot; );\n      }\n      catch ( System::FormatException^ ) \n      {\n         System::Console::WriteLine( &quot;The String was not formatted as a double.&quot; );\n      }\n      catch ( System::ArgumentException^ ) \n      {\n         System::Console::WriteLine( &quot;The String pointed to null.&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert Snippets#7\">\t\tpublic void ConvertDoubleString(double doubleVal) {\n\t\t\t\n\t\t\tstring\tstringVal;     \n\n\t\t\t// A conversion from Double to string cannot overflow.       \n\t\t\tstringVal = System.Convert.ToString(doubleVal);\n\t\t\tSystem.Console.WriteLine(&quot;{0} as a string is: {1}&quot;,\n\t\t\t\tdoubleVal, stringVal);\n\n\t\t\ttry {\n\t\t\t\tdoubleVal = System.Convert.ToDouble(stringVal);\n\t\t\t\tSystem.Console.WriteLine(&quot;{0} as a double is: {1}&quot;,\n\t\t\t\t\tstringVal, doubleVal);\n\t\t\t} \n\t\t\tcatch (System.OverflowException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;Conversion from string-to-double overflowed.&quot;);\n\t\t\t}\n\t\t\tcatch (System.FormatException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string was not formatted as a double.&quot;);\n\t\t\t}\n\t\t\tcatch (System.ArgumentException) {\n\t\t\t\tSystem.Console.WriteLine(\n\t\t\t\t\t&quot;The string pointed to null.&quot;);\n\t\t\t}\n\t\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert Snippets#7\">     Public Sub ConvertDoubleString(ByVal doubleVal As Double)\n\n         Dim stringVal As String\n\n         &#39; A conversion from Double to String cannot overflow.       \n         stringVal = System.Convert.ToString(doubleVal)\n         System.Console.WriteLine(&quot;{0} as a String is: {1}&quot;, _\n                                   doubleVal, stringVal)\n\n         Try\n             doubleVal = System.Convert.ToDouble(stringVal)\n             System.Console.WriteLine(&quot;{0} as a Double is: {1}&quot;, _\n                                       stringVal, doubleVal)\n         Catch exception As System.OverflowException\n             System.Console.WriteLine( _\n                 &quot;Overflow in String-to-Double conversion.&quot;)\n         Catch exception As System.FormatException\n             System.Console.WriteLine( _\n                 &quot;The string is not formatted as a Double.&quot;)\n         Catch exception As System.ArgumentException\n             System.Console.WriteLine(&quot;The string is null.&quot;)\n         End Try\n\n     End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.int16#System_Int16_ToString\" data-linktype=\"relative-path\">System.Int16.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of 16-bit integers to its equivalent string representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#2\">      short[] numbers = { Int16.MinValue, -138, 0, 19, Int16.MaxValue };\n      string result;\n      \n      foreach (short number in numbers)\n      {\n         result = Convert.ToString(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n      }     \n      // The example displays the following output:\n      //    Converted the Int16 value -32768 to the String value -32768.\n      //    Converted the Int16 value -138 to the String value -138.\n      //    Converted the Int16 value 0 to the String value 0.\n      //    Converted the Int16 value 19 to the String value 19.\n      //    Converted the Int16 value 32767 to the String value 32767.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#2\">      Dim numbers() As Short = { Int16.MinValue, -138, 0, 19, Int16.MaxValue }\n      Dim result As String\n      \n      For Each number As Short In numbers\n         result = Convert.ToString(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next     \n      &#39; The example displays the following output:\n      &#39;    Converted the Int16 value -32768 to the String value -32768.\n      &#39;    Converted the Int16 value -138 to the String value -138.\n      &#39;    Converted the Int16 value 0 to the String value 0.\n      &#39;    Converted the Int16 value 19 to the String value 19.\n      &#39;    Converted the Int16 value 32767 to the String value 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.int32#System_Int32_ToString\" data-linktype=\"relative-path\">System.Int32.ToString()</a>. It formats <code>value</code> by using the formatting conventions of the current thread culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares the ToString method with the <a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_UInt16_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(UInt16,IFormatProvider)</a> method. It defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that uses the sting &quot;minus&quot; to represent the negative sign. It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#27\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a NumberFormatInfo object and set its NegativeSigns\n      // property to use for integer formatting.\n      NumberFormatInfo provider = new NumberFormatInfo();\n      provider.NegativeSign = &quot;minus &quot;;\n\n      int[] values = { -20, 0, 100 };\n      \n      Console.WriteLine(&quot;{0,-8} --&gt; {1,10} {2,10}<br>&quot;, &quot;Value&quot;,\n                         CultureInfo.CurrentCulture.Name,\n                         &quot;Custom&quot;);\n      foreach (int value in values)\n         Console.WriteLine(&quot;{0,-8} --&gt; {1,10} {2,10}&quot;,\n                           value, Convert.ToString(value),\n                           Convert.ToString(value, provider));\n      // The example displays output like the following:\n      //       Value    --&gt;      en-US     Custom\n      //\n      //       -20      --&gt;        -20   minus 20\n      //       0        --&gt;          0          0\n      //       100      --&gt;        100        100\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#27\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Create a NumberFormatInfo object and set its NegativeSigns\n      &#39; property to use for integer formatting.\n      Dim provider As New NumberFormatInfo()\n      provider.NegativeSign = &quot;minus &quot;\n\n      Dim values() As Integer = { -20, 0, 100 }\n\n      Console.WriteLine(&quot;{0,-8} --&gt; {1,10} {2,10}&quot;, &quot;Value&quot;,\n                         CultureInfo.CurrentCulture.Name,\n                         &quot;Custom&quot;)\n      Console.WriteLine()\n      For Each value As Integer In values\n         Console.WriteLine(&quot;{0,-8} --&gt; {1,10} {2,10}&quot;,\n                           value, Convert.ToString(value),\n                           Convert.ToString(value, provider))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Value    --&gt;      en-US     Custom\n&#39;\n&#39;       -20      --&gt;        -20   minus 20\n&#39;       0        --&gt;          0          0\n&#39;       100      --&gt;        100        100\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.int64#System_Int64_ToString\" data-linktype=\"relative-path\">System.Int64.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a long integer array to its equivalent string representation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#28\">      &#39; Create a NumberFormatInfo object and set several of its\n      &#39; properties that control default integer formatting.\n      Dim provider As New System.Globalization.NumberFormatInfo()\n      provider.NegativeSign = &quot;minus &quot;\n\n      Dim values() As Long = { -200, 0, 1000 }\n      \n      For Each value As Long In values\n         Console.WriteLine(&quot;{0,-6}  --&gt;  {1,10}&quot;, _\n                           value, Convert.ToString(value, provider))\n      Next\n      &#39; The example displays the following output:\n      &#39;       -200    --&gt;   minus 200\n      &#39;       0       --&gt;           0\n      &#39;       1000    --&gt;        1000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#28\">      // Create a NumberFormatInfo object and set several of its\n      // properties that control default integer formatting.\n      System.Globalization.NumberFormatInfo provider = new System.Globalization.NumberFormatInfo();\n      provider.NegativeSign = &quot;minus &quot;;\n\n      long[] values = { -200, 0, 1000 };\n      \n      foreach (long value in values)\n         Console.WriteLine(&quot;{0,-6}  --&gt;  {1,10}&quot;, \n                           value, Convert.ToString(value, provider));\n      // The example displays the following output:\n      //       -200    --&gt;   minus 200\n      //       0       --&gt;           0\n      //       1000    --&gt;        1000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies the value to convert, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To convert <code>value</code> to its string representation, the method tries to call the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToString_\" data-linktype=\"relative-path\">ToString</a> implementation of <code>value</code>. If <code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, the method tries to call the <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a> implementation of <code>value</code>. If value does not implement the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, the method calls the <code>ToString</code> method of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an object array to its equivalent string representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#3\">      object[] values = { false, 12.63m, new DateTime(2009, 6, 1, 6, 32, 15), 16.09e-12,\n                          &#39;Z&#39;, 15.15322, SByte.MinValue, Int32.MaxValue };\n      string result;\n      \n      foreach (object value in values)\n      {\n         result = Convert.ToString(value);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the Boolean value False to the String value False.\n      //    Converted the Decimal value 12.63 to the String value 12.63.\n      //    Converted the DateTime value 6/1/2009 06:32:15 AM to the String value 6/1/2009 06:32:15 AM.\n      //    Converted the Double value 1.609E-11 to the String value 1.609E-11.\n      //    Converted the Char value Z to the String value Z.\n      //    Converted the Double value 15.15322 to the String value 15.15322.\n      //    Converted the SByte value -128 to the String value -128.\n      //    Converted the Int32 value 2147483647 to the String value 2147483647.      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#3\">      Dim values() As Object = { False, 12.63d, #06/01/2009 6:32:15#, 16.09e-12, _\n                                 &quot;Z&quot;c, 15.15322, SByte.MinValue, Int32.MaxValue}\n      Dim result As String\n      \n      For Each value As Object In values\n         result = Convert.ToString(value)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value False to the String value False.\n      &#39;    Converted the Decimal value 12.63 to the String value 12.63.\n      &#39;    Converted the DateTime value 6/1/2009 06:32:15 AM to the String value 6/1/2009 06:32:15 AM.\n      &#39;    Converted the Double value 1.609E-11 to the String value 1.609E-11.\n      &#39;    Converted the Char value Z to the String value Z.\n      &#39;    Converted the Double value 15.15322 to the String value 15.15322.\n      &#39;    Converted the SByte value -128 to the String value -128.\n      &#39;    Converted the Int32 value 2147483647 to the String value 2147483647.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.sbyte#System_SByte_ToString\" data-linktype=\"relative-path\">System.SByte.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a signed byte array to its equivalent string representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#4\">      sbyte[] numbers = { SByte.MinValue, -12, 0, 16, SByte.MaxValue };\n      string result;\n      \n      foreach (sbyte number in numbers)\n      {\n         result = Convert.ToString(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the SByte value -128 to the String value -128.\n      //    Converted the SByte value -12 to the String value -12.\n      //    Converted the SByte value 0 to the String value 0.\n      //    Converted the SByte value 16 to the String value 16.\n      //    Converted the SByte value 127 to the String value 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#4\">      Dim numbers() As SByte = { SByte.MinValue, -12, 0, 16, SByte.MaxValue }\n      Dim result As String\n      \n      For Each number As SByte In numbers\n         result = Convert.ToString(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the SByte value -128 to the String value -128.\n      &#39;    Converted the SByte value -12 to the String value -12.\n      &#39;    Converted the SByte value 0 to the String value 0.\n      &#39;    Converted the SByte value 16 to the String value 16.\n      &#39;    Converted the SByte value 127 to the String value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.single#System_Single_ToString\" data-linktype=\"relative-path\">System.Single.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to its equivalent string representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#5\">      float[] numbers = { Single.MinValue, -1011.351f, -17.45f, -3e-16f,\n                          0f, 4.56e-12f, 16.0001f, 10345.1221f, Single.MaxValue };\n      string result;\n      \n      foreach (float number in numbers)\n      {\n         result = Convert.ToString(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n      }                            \n      // The example displays the following output:\n      //    Converted the Single value -3.402823E+38 to the String value -3.402823E+38.\n      //    Converted the Single value -1011.351 to the String value -1011.351.\n      //    Converted the Single value -17.45 to the String value -17.45.\n      //    Converted the Single value -3E-16 to the String value -3E-16.\n      //    Converted the Single value 0 to the String value 0.\n      //    Converted the Single value 4.56E-12 to the String value 4.56E-12.\n      //    Converted the Single value 16.0001 to the String value 16.0001.\n      //    Converted the Single value 10345.12 to the String value 10345.12.\n      //    Converted the Single value 3.402823E+38 to the String value 3.402823E+38.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#5\">      Dim numbers() As Single = { Single.MinValue, -1011.351, -17.45, -3e-16, _\n                                  0, 4.56e-12, 16.0001, 10345.1221, Single.MaxValue }\n      Dim result As String\n      \n      For Each number As Single In numbers\n         result = Convert.ToString(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next                            \n      &#39; The example displays the following output:\n      &#39;    Converted the Single value -3.402823E+38 to the String value -3.402823E+38.\n      &#39;    Converted the Single value -1011.351 to the String value -1011.351.\n      &#39;    Converted the Single value -17.45 to the String value -17.45.\n      &#39;    Converted the Single value -3E-16 to the String value -3E-16.\n      &#39;    Converted the Single value 0 to the String value 0.\n      &#39;    Converted the Single value 4.56E-12 to the String value 4.56E-12.\n      &#39;    Converted the Single value 16.0001 to the String value 16.0001.\n      &#39;    Converted the Single value 10345.12 to the String value 10345.12.\n      &#39;    Converted the Single value 3.402823E+38 to the String value 3.402823E+38.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified string instance; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example passes a string to the ToString method and calls the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to confirm that the method returns the original string. The example also calls the <a class=\"xref\" href=\"system.string#System_String_IsInterned_\" data-linktype=\"relative-path\">IsInterned</a> method to ensure that the two strings are not identical because the original string is interned.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String article = &quot;An&quot;;\n      String noun = &quot;apple&quot;;\n      String str1 = String.Format(&quot;{0} {1}&quot;, article, noun);\n      String str2 = Convert.ToString(str1);\n\n      Console.WriteLine(&quot;str1 is interned: {0}&quot;,\n                        ! (String.IsInterned(str1) == null));\n      Console.WriteLine(&quot;str1 and str2 are the same reference: {0}&quot;,\n                        Object.ReferenceEquals(str1, str2));\n   }\n}\n// The example displays the following output:\n//       str1 is interned: False\n//       str1 and str2 are the same reference: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString#2\">Module Example\n   Public Sub Main()\n      Dim article As String = &quot;An&quot;\n      Dim noun As String = &quot;apple&quot;\n      Dim str1 As String = String.Format(&quot;{0} {1}&quot;, article, noun)\n      Dim str2 As String = Convert.ToString(str1)\n\n      Console.WriteLine(&quot;str1 is interned: {0}&quot;,\n                        Not String.IsInterned(str1) Is Nothing)\n      Console.WriteLine(&quot;str1 and str2 are the same reference: {0}&quot;,\n                        Object.ReferenceEquals(str1, str2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       str1 is interned: False\n&#39;       str1 and str2 are the same reference: True\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.uint16#System_UInt16_ToString\" data-linktype=\"relative-path\">System.UInt16.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#6\">      ushort[] numbers = { UInt16.MinValue, 103, 1045, UInt16.MaxValue };\n      string result;\n      \n      foreach (ushort number in numbers)\n      {\n         result = Convert.ToString(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the UInt16 value 0 to the String value 0.\n      //    Converted the UInt16 value 103 to the String value 103.\n      //    Converted the UInt16 value 1045 to the String value 1045.\n      //    Converted the UInt16 value 65535 to the String value 65535.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#6\">      Dim numbers() As UShort = { UInt16.MinValue, 103, 1045, UInt16.MaxValue }\n      Dim result As String\n      \n      For Each number As UShort In numbers\n         result = Convert.ToString(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt16 value 0 to the String value 0.\n      &#39;    Converted the UInt16 value 103 to the String value 103.\n      &#39;    Converted the UInt16 value 1045 to the String value 1045.\n      &#39;    Converted the UInt16 value 65535 to the String value 65535.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.uint32#System_UInt32_ToString\" data-linktype=\"relative-path\">System.UInt32.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an unsigned integer array to its equivalent string representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#7\">      uint[] numbers = { UInt32.MinValue, 103, 1045, 119543, UInt32.MaxValue };\n      string result;\n      \n      foreach (uint number in numbers)\n      {\n         result = Convert.ToString(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the UInt32 value 0 to the String value 0.\n      //    Converted the UInt32 value 103 to the String value 103.\n      //    Converted the UInt32 value 1045 to the String value 1045.\n      //    Converted the UInt32 value 119543 to the String value 119543.\n      //    Converted the UInt32 value 4294967295 to the String value 4294967295.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#7\">      Dim numbers() As UInteger = { UInt32.MinValue, 103, 1045, 119543, UInt32.MaxValue }\n      Dim result As String\n      \n      For Each number As UInteger In numbers\n         result = Convert.ToString(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt32 value 0 to the String value 0.\n      &#39;    Converted the UInt32 value 103 to the String value 103.\n      &#39;    Converted the UInt32 value 1045 to the String value 1045.\n      &#39;    Converted the UInt32 value 119543 to the String value 119543.\n      &#39;    Converted the UInt32 value 4294967295 to the String value 4294967295.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.uint64#System_UInt64_ToString\" data-linktype=\"relative-path\">System.UInt64.ToString()</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an unsigned long integer array to its equivalent string representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#8\">      ulong[] numbers = { UInt64.MinValue, 1031, 189045, UInt64.MaxValue };\n      string result;\n      \n      foreach (ulong number in numbers)\n      {\n         result = Convert.ToString(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the UInt64 value 0 to the String value 0.\n      //    Converted the UInt64 value 1031 to the String value 1031.\n      //    Converted the UInt64 value 189045 to the String value 189045.\n      //    Converted the UInt64 value 18446744073709551615 to the String value 18446744073709551615.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#8\">      Dim numbers() As ULong = { UInt64.MinValue, 1031, 189045, UInt64.MaxValue }\n      Dim result As String\n      \n      For Each number As ULong In numbers\n         result = Convert.ToString(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value 0 to the String value 0.\n      &#39;    Converted the UInt64 value 1031 to the String value 1031.\n      &#39;    Converted the UInt64 value 189045 to the String value 189045.\n      &#39;    Converted the UInt64 value 18446744073709551615 to the String value 18446744073709551615.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Boolean_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Boolean,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (bool value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of an object. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a>. It returns <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">System.Boolean.TrueString</a> for <code>true</code> values and <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">System.Boolean.FalseString</a> for <code>false</code> values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> with the <code>ToString</code> method, using an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object that displays the type of the format provider for which it is called. The example shows that the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object is not referenced.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToString.IFormatProvider#2\">// Example of Convert::ToString( non-numeric types, IFormatProvider ).\nusing namespace System;\nusing namespace System::Globalization;\n\n#define null (Object^)0\n\n// An instance of this class can be passed to methods that require \n// an IFormatProvider.\nref class DummyProvider: public IFormatProvider\n{\npublic:\n\n   // Normally, GetFormat returns an object of the requested type\n   // (usually itself) if it is able; otherwise, it returns Nothing. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      // Here, the type of argType is displayed, and GetFormat\n      // always returns Nothing.\n      Console::Write( &quot;{0,-40}&quot;, argType-&gt;ToString() );\n      return null;\n   }\n};\n\nint main()\n{\n   // Create an instance of the IFormatProvider.\n   DummyProvider^ provider = gcnew DummyProvider;\n   String^ converted;\n\n   // Convert these values using DummyProvider.\n   int Int32A = -252645135;\n   double DoubleA = 61680.3855;\n   Object^ ObjDouble =  -98765.4321;\n   DateTime DayTimeA = DateTime(2001,9,11,13,45,0);\n   bool BoolA = true;\n   String^ StringA = &quot;Qwerty&quot;;\n   Char CharA = &#39;$&#39;;\n   TimeSpan TSpanA = TimeSpan(0,18,0);\n   Object^ ObjOther = static_cast&lt;Object^&gt;(provider);\n   Console::WriteLine( &quot;This example of &quot;\n   &quot;Convert::ToString( non-numeric, IFormatProvider* ) <br>&quot;\n   &quot;generates the following output. The provider type, &quot;\n   &quot;argument type, <br>and argument value are displayed.&quot; );\n   Console::WriteLine( &quot;<br>Note: The IFormatProvider object is &quot;\n   &quot;not called for Boolean, String, <br>Char, TimeSpan, &quot;\n   &quot;and non-numeric Object.&quot; );\n\n   // The format provider is called for these conversions.\n   Console::WriteLine();\n   converted = Convert::ToString( Int32A, provider );\n   Console::WriteLine( &quot;int      {0}&quot;, converted );\n   converted = Convert::ToString( DoubleA, provider );\n   Console::WriteLine( &quot;double   {0}&quot;, converted );\n   converted = Convert::ToString( ObjDouble, provider );\n   Console::WriteLine( &quot;Object   {0}&quot;, converted );\n   converted = Convert::ToString( DayTimeA, provider );\n   Console::WriteLine( &quot;DateTime {0}&quot;, converted );\n\n   // The format provider is not called for these conversions.\n   Console::WriteLine();\n   converted = Convert::ToString( BoolA, provider );\n   Console::WriteLine( &quot;bool     {0}&quot;, converted );\n   converted = Convert::ToString( StringA, provider );\n   Console::WriteLine( &quot;String   {0}&quot;, converted );\n   converted = Convert::ToString( CharA, provider );\n   Console::WriteLine( &quot;Char     {0}&quot;, converted );\n   converted = Convert::ToString( TSpanA, provider );\n   Console::WriteLine( &quot;TimeSpan {0}&quot;, converted );\n   converted = Convert::ToString( ObjOther, provider );\n   Console::WriteLine( &quot;Object   {0}&quot;, converted );\n}\n\n/*\nThis example of Convert::ToString( non-numeric, IFormatProvider* )\ngenerates the following output. The provider type, argument type,\nand argument value are displayed.\n\nNote: The IFormatProvider object is not called for Boolean, String,\nChar, TimeSpan, and non-numeric Object.\n\nSystem.Globalization.NumberFormatInfo   int      -252645135\nSystem.Globalization.NumberFormatInfo   double   61680.3855\nSystem.Globalization.NumberFormatInfo   Object   -98765.4321\nSystem.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n\nbool     True\nString   Qwerty\nChar     $\nTimeSpan 00:18:00\nObject   DummyProvider\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString.IFormatProvider#2\">&#39; Example of Convert.ToString( non-numeric types, IFormatProvider ).\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\n&#39; An instance of this class can be passed to methods that require \n&#39; an IFormatProvider.\nPublic Class DummyProvider\n    Implements IFormatProvider\n\n    &#39; Normally, GetFormat returns an object of the requested type\n    &#39; (usually itself) if it is able; otherwise, it returns Nothing. \n    Public Function GetFormat( argType As Type ) As Object _\n        Implements IFormatProvider.GetFormat\n\n        &#39; Here, the type of argType is displayed, and GetFormat\n        &#39; always returns Nothing.\n        Console.Write( &quot;{0,-40}&quot;, argType.ToString( ) )\n        Return Nothing\n\n    End Function \nEnd Class\n\nModule ConvertNonNumericProviderDemo\n\n    Sub Main( )\n\n        &#39; Create an instance of the IFormatProvider.\n        Dim provider    As New DummyProvider( )\n        Dim converted   As String\n\n        &#39; Convert these values using DummyProvider.\n        Dim Int32A      As Integer  = -252645135   \n        Dim DoubleA     As Double   = 61680.3855\n        Dim ObjDouble   As Object   = CType( -98765.4321, Object )\n        Dim DayTimeA    As DateTime = _\n                            new DateTime( 2001, 9, 11, 13, 45, 0 )\n\n        Dim BoolA       As Boolean  = True\n        Dim StringA     As String   = &quot;Qwerty&quot;\n        Dim CharA       As Char     = &quot;$&quot;c\n        Dim TSpanA      As TimeSpan = New TimeSpan( 0, 18, 0 )\n        Dim ObjOther    As Object   = CType( provider, Object )\n\n        Console.WriteLine( &quot;This example of &quot; &amp; _\n            &quot;Convert.ToString( non-numeric, IFormatProvider ) &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output. The &quot; &amp; _\n            &quot;provider type, argument type, &quot; &amp; vbCrLf &amp; &quot;and &quot; &amp; _\n            &quot;argument value are displayed.&quot; )\n        Console.WriteLine( vbCrLf &amp; _\n            &quot;Note: The IFormatProvider object is not called for &quot; &amp; _\n            &quot;Boolean, String, &quot; &amp; vbCrLf &amp; &quot;Char, TimeSpan, &quot; &amp; _\n            &quot;and non-numeric Object.&quot; )\n\n        &#39; The format provider is called for these conversions.\n        Console.WriteLine( )\n        converted =  Convert.ToString( Int32A, provider )\n        Console.WriteLine( &quot;Int32    {0}&quot;, converted )\n        converted =  Convert.ToString( DoubleA, provider )\n        Console.WriteLine( &quot;Double   {0}&quot;, converted )\n        converted =  Convert.ToString( ObjDouble, provider )\n        Console.WriteLine( &quot;Object   {0}&quot;, converted )\n        converted =  Convert.ToString( DayTimeA, provider )\n        Console.WriteLine( &quot;DateTime {0}&quot;, converted )\n\n        &#39; The format provider is not called for these conversions.\n        Console.WriteLine( )\n        converted =  Convert.ToString( BoolA, provider )\n        Console.WriteLine( &quot;Boolean  {0}&quot;, converted )\n        converted =  Convert.ToString( StringA, provider )\n        Console.WriteLine( &quot;String   {0}&quot;, converted )\n        converted =  Convert.ToString( CharA, provider )\n        Console.WriteLine( &quot;Char     {0}&quot;, converted )\n        converted =  Convert.ToString( TSpanA, provider )\n        Console.WriteLine( &quot;TimeSpan {0}&quot;, converted )\n        converted =  Convert.ToString( ObjOther, provider )\n        Console.WriteLine( &quot;Object   {0}&quot;, converted )\n\n    End Sub\nEnd Module\n\n&#39; This example of Convert.ToString( non-numeric, IFormatProvider )\n&#39; generates the following output. The provider type, argument type,\n&#39; and argument value are displayed.\n&#39;\n&#39; Note: The IFormatProvider object is not called for Boolean, String,\n&#39; Char, TimeSpan, and non-numeric Object.\n&#39; \n&#39; System.Globalization.NumberFormatInfo   Int32    -252645135\n&#39; System.Globalization.NumberFormatInfo   Double   61680.3855\n&#39; System.Globalization.NumberFormatInfo   Object   -98765.4321\n&#39; System.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n&#39; \n&#39; Boolean  True\n&#39; String   Qwerty\n&#39; Char     $\n&#39; TimeSpan 00:18:00\n&#39; Object   DummyProvider\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToString.IFormatProvider#2\">// Example of Convert.ToString( non-numeric types, IFormatProvider ).\nusing System;\nusing System.Globalization;\n\n// An instance of this class can be passed to methods that require \n// an IFormatProvider.\npublic class DummyProvider : IFormatProvider\n{\n    // Normally, GetFormat returns an object of the requested type\n    // (usually itself) if it is able; otherwise, it returns Nothing. \n    public object GetFormat( Type argType )\n    {\n        // Here, the type of argType is displayed, and GetFormat\n        // always returns Nothing.\n        Console.Write( &quot;{0,-40}&quot;, argType.ToString( ) );\n        return null;\n    }\n}\n\nclass ConvertNonNumericProviderDemo\n{\n    static void Main( )\n    {\n        // Create an instance of the IFormatProvider.\n        DummyProvider provider = new DummyProvider( );\n        string converted;\n\n        // Convert these values using DummyProvider.\n        int      Int32A     = -252645135;\n        double   DoubleA    = 61680.3855;\n        object   ObjDouble  = (object)( -98765.4321 );\n        DateTime DayTimeA   = new DateTime( 2001, 9, 11, 13, 45, 0 );\n\n        bool     BoolA      = true;\n        string   StringA    = &quot;Qwerty&quot;;\n        char     CharA      = &#39;$&#39;;\n        TimeSpan TSpanA     = new TimeSpan( 0, 18, 0 );\n        object   ObjOther   = (object)provider;\n\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;Convert.ToString( non-numeric, IFormatProvider ) <br>&quot; +\n            &quot;generates the following output. The provider type, &quot; +\n            &quot;argument type, <br>and argument value are displayed.&quot; );\n        Console.WriteLine( &quot;<br>Note: The IFormatProvider object is &quot; +\n            &quot;not called for Boolean, String, <br>Char, TimeSpan, &quot; +\n            &quot;and non-numeric Object.&quot; );\n\n        // The format provider is called for these conversions.\n        Console.WriteLine( );\n        converted = Convert.ToString( Int32A, provider );\n        Console.WriteLine( &quot;int      {0}&quot;, converted );\n        converted = Convert.ToString( DoubleA, provider );\n        Console.WriteLine( &quot;double   {0}&quot;, converted );\n        converted = Convert.ToString( ObjDouble, provider );\n        Console.WriteLine( &quot;object   {0}&quot;, converted );\n        converted = Convert.ToString( DayTimeA, provider );\n        Console.WriteLine( &quot;DateTime {0}&quot;, converted );\n\n        // The format provider is not called for these conversions.\n        Console.WriteLine( );\n        converted = Convert.ToString( BoolA, provider );\n        Console.WriteLine( &quot;bool     {0}&quot;, converted );\n        converted = Convert.ToString( StringA, provider );\n        Console.WriteLine( &quot;string   {0}&quot;, converted );\n        converted = Convert.ToString( CharA, provider );\n        Console.WriteLine( &quot;char     {0}&quot;, converted );\n        converted = Convert.ToString( TSpanA, provider );\n        Console.WriteLine( &quot;TimeSpan {0}&quot;, converted );\n        converted = Convert.ToString( ObjOther, provider );\n        Console.WriteLine( &quot;object   {0}&quot;, converted );\n    }\n}\n\n/*\nThis example of Convert.ToString( non-numeric, IFormatProvider )\ngenerates the following output. The provider type, argument type,\nand argument value are displayed.\n\nNote: The IFormatProvider object is not called for Boolean, String,\nChar, TimeSpan, and non-numeric Object.\n\nSystem.Globalization.NumberFormatInfo   int      -252645135\nSystem.Globalization.NumberFormatInfo   double   61680.3855\nSystem.Globalization.NumberFormatInfo   object   -98765.4321\nSystem.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n\nbool     True\nstring   Qwerty\nchar     $\nTimeSpan 00:18:00\nobject   DummyProvider\n\n*/ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Byte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Byte,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (byte value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.byte#System_Byte_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures. Because the &quot;G&quot; specifier by default outputs only decimal digits in a byte value&#39;s string representation, the <code>provider</code> parameter does not affect the formatting of the returned string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#16\">      byte[] numbers = { 12, 100, Byte.MaxValue };\n      // Define the culture names used to display them.\n      string[] cultureNames = { &quot;en-US&quot;, &quot;fr-FR&quot; };\n      \n      foreach (byte number in numbers)\n      {\n         Console.WriteLine(&quot;{0}:&quot;, Convert.ToString(number,\n                                   System.Globalization.CultureInfo.InvariantCulture));\n         foreach (string cultureName in cultureNames)\n         {\n            System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo(cultureName);\n            Console.WriteLine(&quot;   {0}: {1,20}&quot;,\n                              culture.Name, Convert.ToString(number, culture));\n         }\n         Console.WriteLine();\n      }   \n      // The example displays the following output:\n      //       12:\n      //          en-US:                   12\n      //          fr-FR:                   12\n      //       \n      //       100:\n      //          en-US:                  100\n      //          fr-FR:                  100\n      //       \n      //       255:\n      //          en-US:                  255\n      //          fr-FR:                  255      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#16\">      &#39; Define an array of numbers to display.\n      Dim numbers() As Byte = { 12, 100, Byte.MaxValue }\n      &#39; Define the culture names used to display them.\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;fr-FR&quot; }\n      \n      For Each number As Byte In numbers\n         Console.WriteLine(&quot;{0}:&quot;, Convert.ToString(number, _\n                                   System.Globalization.CultureInfo.InvariantCulture))\n         For Each cultureName As String In cultureNames\n            Dim culture As New System.Globalization.CultureInfo(cultureName)\n            Console.WriteLine(&quot;   {0}: {1,20}&quot;, _\n                              culture.Name, Convert.ToString(number, culture))\n         Next\n         Console.WriteLine()\n      Next   \n      &#39; The example displays the following output:\n      &#39;       12:\n      &#39;          en-US:                   12\n      &#39;          fr-FR:                   12\n      &#39;       \n      &#39;       100:\n      &#39;          en-US:                  100\n      &#39;          fr-FR:                  100\n      &#39;       \n      &#39;       255:\n      &#39;          en-US:                  255\n      &#39;          fr-FR:                  255      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Byte_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Byte,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (byte value, int toBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the return value, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code> in base <code>toBase</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>toBase</code> is not 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>toBase</code> does not equal 10, the string that is returned by the ToString method represents <code>value</code> by its magnitude only. If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion. Such methods include <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToByte(String,Int32)</a> or <a class=\"xref\" href=\"system.byte#System_Byte_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">System.Byte.Parse(String,NumberStyles)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#9\">      int[] bases = { 2, 8, 10, 16};\n      byte[] numbers = { Byte.MinValue, 12, 103, Byte.MaxValue};\n      \n      foreach (int baseValue in bases)\n      {\n         Console.WriteLine(&quot;Base {0} conversion:&quot;, baseValue);\n         foreach (byte number in numbers)\n         {\n            Console.WriteLine(&quot;   {0,-5}  --&gt;  0x{1}&quot;, \n                              number, Convert.ToString(number, baseValue));\n         }\n      }\n      // The example displays the following output:\n      //       Base 2 conversion:\n      //          0      --&gt;  0x0\n      //          12     --&gt;  0x1100\n      //          103    --&gt;  0x1100111\n      //          255    --&gt;  0x11111111\n      //       Base 8 conversion:\n      //          0      --&gt;  0x0\n      //          12     --&gt;  0x14\n      //          103    --&gt;  0x147\n      //          255    --&gt;  0x377\n      //       Base 10 conversion:\n      //          0      --&gt;  0x0\n      //          12     --&gt;  0x12\n      //          103    --&gt;  0x103\n      //          255    --&gt;  0x255\n      //       Base 16 conversion:\n      //          0      --&gt;  0x0\n      //          12     --&gt;  0xc\n      //          103    --&gt;  0x67\n      //          255    --&gt;  0xff\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#9\">      Dim bases() As Integer = { 2, 8, 10, 16}\n      Dim numbers() As Byte = { Byte.MinValue, 12, 103, Byte.MaxValue}\n      \n      For Each base As Integer In bases\n         Console.WriteLine(&quot;Base {0} conversion:&quot;, base)\n         For Each number As Byte In numbers\n            Console.WriteLine(&quot;   {0,-5}  --&gt;  0x{1}&quot;, _\n                              number, Convert.ToString(number, base))\n         Next\n      Next\n      &#39; The example displays the following output:\n      &#39;       Base 2 conversion:\n      &#39;          0      --&gt;  0x0\n      &#39;          12     --&gt;  0x1100\n      &#39;          103    --&gt;  0x1100111\n      &#39;          255    --&gt;  0x11111111\n      &#39;       Base 8 conversion:\n      &#39;          0      --&gt;  0x0\n      &#39;          12     --&gt;  0x14\n      &#39;          103    --&gt;  0x147\n      &#39;          255    --&gt;  0x377\n      &#39;       Base 10 conversion:\n      &#39;          0      --&gt;  0x0\n      &#39;          12     --&gt;  0x12\n      &#39;          103    --&gt;  0x103\n      &#39;          255    --&gt;  0x255\n      &#39;       Base 16 conversion:\n      &#39;          0      --&gt;  0x0\n      &#39;          12     --&gt;  0xc\n      &#39;          103    --&gt;  0x67\n      &#39;          255    --&gt;  0xff\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Char_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Char,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (char value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.char#System_Char_ToString\" data-linktype=\"relative-path\">System.Char.ToString()</a>. The <code>provider</code> parameter is ignored.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> value to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> with the <code>ToString</code> method, using an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object that displays the type of the format provider for which it is called. The example shows that the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object is not referenced.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToString.IFormatProvider#2\">// Example of Convert::ToString( non-numeric types, IFormatProvider ).\nusing namespace System;\nusing namespace System::Globalization;\n\n#define null (Object^)0\n\n// An instance of this class can be passed to methods that require \n// an IFormatProvider.\nref class DummyProvider: public IFormatProvider\n{\npublic:\n\n   // Normally, GetFormat returns an object of the requested type\n   // (usually itself) if it is able; otherwise, it returns Nothing. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      // Here, the type of argType is displayed, and GetFormat\n      // always returns Nothing.\n      Console::Write( &quot;{0,-40}&quot;, argType-&gt;ToString() );\n      return null;\n   }\n};\n\nint main()\n{\n   // Create an instance of the IFormatProvider.\n   DummyProvider^ provider = gcnew DummyProvider;\n   String^ converted;\n\n   // Convert these values using DummyProvider.\n   int Int32A = -252645135;\n   double DoubleA = 61680.3855;\n   Object^ ObjDouble =  -98765.4321;\n   DateTime DayTimeA = DateTime(2001,9,11,13,45,0);\n   bool BoolA = true;\n   String^ StringA = &quot;Qwerty&quot;;\n   Char CharA = &#39;$&#39;;\n   TimeSpan TSpanA = TimeSpan(0,18,0);\n   Object^ ObjOther = static_cast&lt;Object^&gt;(provider);\n   Console::WriteLine( &quot;This example of &quot;\n   &quot;Convert::ToString( non-numeric, IFormatProvider* ) <br>&quot;\n   &quot;generates the following output. The provider type, &quot;\n   &quot;argument type, <br>and argument value are displayed.&quot; );\n   Console::WriteLine( &quot;<br>Note: The IFormatProvider object is &quot;\n   &quot;not called for Boolean, String, <br>Char, TimeSpan, &quot;\n   &quot;and non-numeric Object.&quot; );\n\n   // The format provider is called for these conversions.\n   Console::WriteLine();\n   converted = Convert::ToString( Int32A, provider );\n   Console::WriteLine( &quot;int      {0}&quot;, converted );\n   converted = Convert::ToString( DoubleA, provider );\n   Console::WriteLine( &quot;double   {0}&quot;, converted );\n   converted = Convert::ToString( ObjDouble, provider );\n   Console::WriteLine( &quot;Object   {0}&quot;, converted );\n   converted = Convert::ToString( DayTimeA, provider );\n   Console::WriteLine( &quot;DateTime {0}&quot;, converted );\n\n   // The format provider is not called for these conversions.\n   Console::WriteLine();\n   converted = Convert::ToString( BoolA, provider );\n   Console::WriteLine( &quot;bool     {0}&quot;, converted );\n   converted = Convert::ToString( StringA, provider );\n   Console::WriteLine( &quot;String   {0}&quot;, converted );\n   converted = Convert::ToString( CharA, provider );\n   Console::WriteLine( &quot;Char     {0}&quot;, converted );\n   converted = Convert::ToString( TSpanA, provider );\n   Console::WriteLine( &quot;TimeSpan {0}&quot;, converted );\n   converted = Convert::ToString( ObjOther, provider );\n   Console::WriteLine( &quot;Object   {0}&quot;, converted );\n}\n\n/*\nThis example of Convert::ToString( non-numeric, IFormatProvider* )\ngenerates the following output. The provider type, argument type,\nand argument value are displayed.\n\nNote: The IFormatProvider object is not called for Boolean, String,\nChar, TimeSpan, and non-numeric Object.\n\nSystem.Globalization.NumberFormatInfo   int      -252645135\nSystem.Globalization.NumberFormatInfo   double   61680.3855\nSystem.Globalization.NumberFormatInfo   Object   -98765.4321\nSystem.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n\nbool     True\nString   Qwerty\nChar     $\nTimeSpan 00:18:00\nObject   DummyProvider\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString.IFormatProvider#2\">&#39; Example of Convert.ToString( non-numeric types, IFormatProvider ).\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\n&#39; An instance of this class can be passed to methods that require \n&#39; an IFormatProvider.\nPublic Class DummyProvider\n    Implements IFormatProvider\n\n    &#39; Normally, GetFormat returns an object of the requested type\n    &#39; (usually itself) if it is able; otherwise, it returns Nothing. \n    Public Function GetFormat( argType As Type ) As Object _\n        Implements IFormatProvider.GetFormat\n\n        &#39; Here, the type of argType is displayed, and GetFormat\n        &#39; always returns Nothing.\n        Console.Write( &quot;{0,-40}&quot;, argType.ToString( ) )\n        Return Nothing\n\n    End Function \nEnd Class\n\nModule ConvertNonNumericProviderDemo\n\n    Sub Main( )\n\n        &#39; Create an instance of the IFormatProvider.\n        Dim provider    As New DummyProvider( )\n        Dim converted   As String\n\n        &#39; Convert these values using DummyProvider.\n        Dim Int32A      As Integer  = -252645135   \n        Dim DoubleA     As Double   = 61680.3855\n        Dim ObjDouble   As Object   = CType( -98765.4321, Object )\n        Dim DayTimeA    As DateTime = _\n                            new DateTime( 2001, 9, 11, 13, 45, 0 )\n\n        Dim BoolA       As Boolean  = True\n        Dim StringA     As String   = &quot;Qwerty&quot;\n        Dim CharA       As Char     = &quot;$&quot;c\n        Dim TSpanA      As TimeSpan = New TimeSpan( 0, 18, 0 )\n        Dim ObjOther    As Object   = CType( provider, Object )\n\n        Console.WriteLine( &quot;This example of &quot; &amp; _\n            &quot;Convert.ToString( non-numeric, IFormatProvider ) &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output. The &quot; &amp; _\n            &quot;provider type, argument type, &quot; &amp; vbCrLf &amp; &quot;and &quot; &amp; _\n            &quot;argument value are displayed.&quot; )\n        Console.WriteLine( vbCrLf &amp; _\n            &quot;Note: The IFormatProvider object is not called for &quot; &amp; _\n            &quot;Boolean, String, &quot; &amp; vbCrLf &amp; &quot;Char, TimeSpan, &quot; &amp; _\n            &quot;and non-numeric Object.&quot; )\n\n        &#39; The format provider is called for these conversions.\n        Console.WriteLine( )\n        converted =  Convert.ToString( Int32A, provider )\n        Console.WriteLine( &quot;Int32    {0}&quot;, converted )\n        converted =  Convert.ToString( DoubleA, provider )\n        Console.WriteLine( &quot;Double   {0}&quot;, converted )\n        converted =  Convert.ToString( ObjDouble, provider )\n        Console.WriteLine( &quot;Object   {0}&quot;, converted )\n        converted =  Convert.ToString( DayTimeA, provider )\n        Console.WriteLine( &quot;DateTime {0}&quot;, converted )\n\n        &#39; The format provider is not called for these conversions.\n        Console.WriteLine( )\n        converted =  Convert.ToString( BoolA, provider )\n        Console.WriteLine( &quot;Boolean  {0}&quot;, converted )\n        converted =  Convert.ToString( StringA, provider )\n        Console.WriteLine( &quot;String   {0}&quot;, converted )\n        converted =  Convert.ToString( CharA, provider )\n        Console.WriteLine( &quot;Char     {0}&quot;, converted )\n        converted =  Convert.ToString( TSpanA, provider )\n        Console.WriteLine( &quot;TimeSpan {0}&quot;, converted )\n        converted =  Convert.ToString( ObjOther, provider )\n        Console.WriteLine( &quot;Object   {0}&quot;, converted )\n\n    End Sub\nEnd Module\n\n&#39; This example of Convert.ToString( non-numeric, IFormatProvider )\n&#39; generates the following output. The provider type, argument type,\n&#39; and argument value are displayed.\n&#39;\n&#39; Note: The IFormatProvider object is not called for Boolean, String,\n&#39; Char, TimeSpan, and non-numeric Object.\n&#39; \n&#39; System.Globalization.NumberFormatInfo   Int32    -252645135\n&#39; System.Globalization.NumberFormatInfo   Double   61680.3855\n&#39; System.Globalization.NumberFormatInfo   Object   -98765.4321\n&#39; System.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n&#39; \n&#39; Boolean  True\n&#39; String   Qwerty\n&#39; Char     $\n&#39; TimeSpan 00:18:00\n&#39; Object   DummyProvider\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToString.IFormatProvider#2\">// Example of Convert.ToString( non-numeric types, IFormatProvider ).\nusing System;\nusing System.Globalization;\n\n// An instance of this class can be passed to methods that require \n// an IFormatProvider.\npublic class DummyProvider : IFormatProvider\n{\n    // Normally, GetFormat returns an object of the requested type\n    // (usually itself) if it is able; otherwise, it returns Nothing. \n    public object GetFormat( Type argType )\n    {\n        // Here, the type of argType is displayed, and GetFormat\n        // always returns Nothing.\n        Console.Write( &quot;{0,-40}&quot;, argType.ToString( ) );\n        return null;\n    }\n}\n\nclass ConvertNonNumericProviderDemo\n{\n    static void Main( )\n    {\n        // Create an instance of the IFormatProvider.\n        DummyProvider provider = new DummyProvider( );\n        string converted;\n\n        // Convert these values using DummyProvider.\n        int      Int32A     = -252645135;\n        double   DoubleA    = 61680.3855;\n        object   ObjDouble  = (object)( -98765.4321 );\n        DateTime DayTimeA   = new DateTime( 2001, 9, 11, 13, 45, 0 );\n\n        bool     BoolA      = true;\n        string   StringA    = &quot;Qwerty&quot;;\n        char     CharA      = &#39;$&#39;;\n        TimeSpan TSpanA     = new TimeSpan( 0, 18, 0 );\n        object   ObjOther   = (object)provider;\n\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;Convert.ToString( non-numeric, IFormatProvider ) <br>&quot; +\n            &quot;generates the following output. The provider type, &quot; +\n            &quot;argument type, <br>and argument value are displayed.&quot; );\n        Console.WriteLine( &quot;<br>Note: The IFormatProvider object is &quot; +\n            &quot;not called for Boolean, String, <br>Char, TimeSpan, &quot; +\n            &quot;and non-numeric Object.&quot; );\n\n        // The format provider is called for these conversions.\n        Console.WriteLine( );\n        converted = Convert.ToString( Int32A, provider );\n        Console.WriteLine( &quot;int      {0}&quot;, converted );\n        converted = Convert.ToString( DoubleA, provider );\n        Console.WriteLine( &quot;double   {0}&quot;, converted );\n        converted = Convert.ToString( ObjDouble, provider );\n        Console.WriteLine( &quot;object   {0}&quot;, converted );\n        converted = Convert.ToString( DayTimeA, provider );\n        Console.WriteLine( &quot;DateTime {0}&quot;, converted );\n\n        // The format provider is not called for these conversions.\n        Console.WriteLine( );\n        converted = Convert.ToString( BoolA, provider );\n        Console.WriteLine( &quot;bool     {0}&quot;, converted );\n        converted = Convert.ToString( StringA, provider );\n        Console.WriteLine( &quot;string   {0}&quot;, converted );\n        converted = Convert.ToString( CharA, provider );\n        Console.WriteLine( &quot;char     {0}&quot;, converted );\n        converted = Convert.ToString( TSpanA, provider );\n        Console.WriteLine( &quot;TimeSpan {0}&quot;, converted );\n        converted = Convert.ToString( ObjOther, provider );\n        Console.WriteLine( &quot;object   {0}&quot;, converted );\n    }\n}\n\n/*\nThis example of Convert.ToString( non-numeric, IFormatProvider )\ngenerates the following output. The provider type, argument type,\nand argument value are displayed.\n\nNote: The IFormatProvider object is not called for Boolean, String,\nChar, TimeSpan, and non-numeric Object.\n\nSystem.Globalization.NumberFormatInfo   int      -252645135\nSystem.Globalization.NumberFormatInfo   double   61680.3855\nSystem.Globalization.NumberFormatInfo   object   -98765.4321\nSystem.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n\nbool     True\nstring   Qwerty\nchar     $\nTimeSpan 00:18:00\nobject   DummyProvider\n\n*/ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_DateTime_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(DateTime,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (DateTime value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.DateTime.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to its equivalent string representation in eight different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#13\">      // Specify the date to be formatted using various cultures.\n      DateTime tDate = new DateTime(2010, 4, 15, 20, 30, 40, 333);\n      // Specify the cultures.\n      string[] cultureNames = { &quot;en-US&quot;, &quot;es-AR&quot;, &quot;fr-FR&quot;, &quot;hi-IN&quot;,\n                                &quot;ja-JP&quot;, &quot;nl-NL&quot;, &quot;ru-RU&quot;, &quot;ur-PK&quot; };\n      \n      Console.WriteLine(&quot;Converting the date {0}: &quot;, \n                        Convert.ToString(tDate, \n                                System.Globalization.CultureInfo.InvariantCulture));\n\n      foreach (string cultureName in cultureNames)\n      {\n         System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo(cultureName);\n         string dateString = Convert.ToString(tDate, culture);\n         Console.WriteLine(&quot;   {0}:  {1,-12}&quot;, \n                           culture.Name, dateString);\n      }             \n      // The example displays the following output:\n      //       Converting the date 04/15/2010 20:30:40:\n      //          en-US:  4/15/2010 8:30:40 PM\n      //          es-AR:  15/04/2010 08:30:40 p.m.\n      //          fr-FR:  15/04/2010 20:30:40\n      //          hi-IN:  15-04-2010 20:30:40\n      //          ja-JP:  2010/04/15 20:30:40\n      //          nl-NL:  15-4-2010 20:30:40\n      //          ru-RU:  15.04.2010 20:30:40\n      //          ur-PK:  15/04/2010 8:30:40 PM      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#13\">      &#39; Specify the date to be formatted using various cultures.\n      Dim tDate As New Date(2010, 4, 15, 20, 30, 40, 333)\n      &#39; Specify the cultures.\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;es-AR&quot;, &quot;fr-FR&quot;, &quot;hi-IN&quot;, _\n                                       &quot;ja-JP&quot;, &quot;nl-NL&quot;, &quot;ru-RU&quot;, &quot;ur-PK&quot; }\n      \n      Console.WriteLine(&quot;Converting the date {0}: &quot;, _\n                        Convert.ToString(tDate, _\n                                System.Globalization.CultureInfo.InvariantCulture))\n\n      For Each cultureName As String In CultureNames\n         Dim culture As New System.Globalization.CultureInfo(cultureName)\n         Dim dateString As String = Convert.ToString(tDate, culture)\n         Console.WriteLine(&quot;   {0}:  {1,-12}&quot;, _\n                           culture.Name, dateString)\n      Next             \n      &#39; The example displays the following output:\n      &#39;       Converting the date 04/15/2010 20:30:40:\n      &#39;          en-US:  4/15/2010 8:30:40 PM\n      &#39;          es-AR:  15/04/2010 08:30:40 p.m.\n      &#39;          fr-FR:  15/04/2010 20:30:40\n      &#39;          hi-IN:  15-04-2010 20:30:40\n      &#39;          ja-JP:  2010/04/15 20:30:40\n      &#39;          nl-NL:  15-4-2010 20:30:40\n      &#39;          ru-RU:  15.04.2010 20:30:40\n      &#39;          ur-PK:  15/04/2010 8:30:40 PM      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Decimal_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Decimal,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (decimal value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to its equivalent string representation in four different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#14\">      // Define an array of numbers to display.\n      decimal[] numbers = { 1734231911290.16m, -17394.32921m,\n                            3193.23m, 98012368321.684m };\n      // Define the culture names used to display them.\n      string[] cultureNames = { &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ja-JP&quot;, &quot;ru-RU&quot; };\n      \n      foreach (decimal number in numbers)\n      {\n         Console.WriteLine(&quot;{0}:&quot;, Convert.ToString(number,\n                                   System.Globalization.CultureInfo.InvariantCulture));\n         foreach (string cultureName in cultureNames)\n         {\n            System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo(cultureName);\n            Console.WriteLine(&quot;   {0}: {1,20}&quot;,\n                              culture.Name, Convert.ToString(number, culture));\n         }\n         Console.WriteLine();\n      }   \n      // The example displays the following output:\n      //    1734231911290.16:\n      //       en-US:     1734231911290.16\n      //       fr-FR:     1734231911290,16\n      //       ja-JP:     1734231911290.16\n      //       ru-RU:     1734231911290,16\n      //    \n      //    -17394.32921:\n      //       en-US:         -17394.32921\n      //       fr-FR:         -17394,32921\n      //       ja-JP:         -17394.32921\n      //       ru-RU:         -17394,32921\n      //    \n      //    3193.23:\n      //       en-US:              3193.23\n      //       fr-FR:              3193,23\n      //       ja-JP:              3193.23\n      //       ru-RU:              3193,23\n      //    \n      //    98012368321.684:\n      //       en-US:      98012368321.684\n      //       fr-FR:      98012368321,684\n      //       ja-JP:      98012368321.684\n      //       ru-RU:      98012368321,684\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#14\">      &#39; Define an array of numbers to display.\n      Dim numbers() As Decimal = { 1734231911290.16d, -17394.32921d, _\n                                   3193.23d, 98012368321.684d }\n      &#39; Define the culture names used to display them.\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ja-JP&quot;, &quot;ru-RU&quot; }\n      \n      For Each number As Decimal In numbers\n         Console.WriteLine(&quot;{0}:&quot;, Convert.ToString(number, _\n                                   System.Globalization.CultureInfo.InvariantCulture))\n         For Each cultureName As String In cultureNames\n            Dim culture As New System.Globalization.CultureInfo(cultureName)\n            Console.WriteLine(&quot;   {0}: {1,20}&quot;, _\n                              culture.Name, Convert.ToString(number, culture))\n         Next\n         Console.WriteLine()\n      Next   \n      &#39; The example displays the following output:\n      &#39;    1734231911290.16:\n      &#39;       en-US:     1734231911290.16\n      &#39;       fr-FR:     1734231911290,16\n      &#39;       ja-JP:     1734231911290.16\n      &#39;       ru-RU:     1734231911290,16\n      &#39;    \n      &#39;    -17394.32921:\n      &#39;       en-US:         -17394.32921\n      &#39;       fr-FR:         -17394,32921\n      &#39;       ja-JP:         -17394.32921\n      &#39;       ru-RU:         -17394,32921\n      &#39;    \n      &#39;    3193.23:\n      &#39;       en-US:              3193.23\n      &#39;       fr-FR:              3193,23\n      &#39;       ja-JP:              3193.23\n      &#39;       ru-RU:              3193,23\n      &#39;    \n      &#39;    98012368321.684:\n      &#39;       en-US:      98012368321.684\n      &#39;       fr-FR:      98012368321,684\n      &#39;       ja-JP:      98012368321.684\n      &#39;       ru-RU:      98012368321,684\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Double_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Double,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (double value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.double#System_Double_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Double.ToString(IFormatProvider)</a></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to its equivalent string representation in four different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#15\">      // Define an array of numbers to display.\n      double[] numbers = { -1.5345e16, -123.4321, 19092.123, 1.1734231911290e16 };\n      // Define the culture names used to display them.\n      string[] cultureNames = { &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ja-JP&quot;, &quot;ru-RU&quot; };\n      \n      foreach (double number in numbers)\n      {\n         Console.WriteLine(&quot;{0}:&quot;, Convert.ToString(number,\n                                   System.Globalization.CultureInfo.InvariantCulture));\n         foreach (string cultureName in cultureNames)\n         {\n            System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo(cultureName);\n            Console.WriteLine(&quot;   {0}: {1,20}&quot;,\n                              culture.Name, Convert.ToString(number, culture));\n         }\n         Console.WriteLine();\n      }   \n      // The example displays the following output:\n      //    -1.5345E+16:\n      //       en-US:          -1.5345E+16\n      //       fr-FR:          -1,5345E+16\n      //       ja-JP:          -1.5345E+16\n      //       ru-RU:          -1,5345E+16\n      //    \n      //    -123.4321:\n      //       en-US:            -123.4321\n      //       fr-FR:            -123,4321\n      //       ja-JP:            -123.4321\n      //       ru-RU:            -123,4321\n      //    \n      //    19092.123:\n      //       en-US:            19092.123\n      //       fr-FR:            19092,123\n      //       ja-JP:            19092.123\n      //       ru-RU:            19092,123\n      //    \n      //    1.173423191129E+16:\n      //       en-US:   1.173423191129E+16\n      //       fr-FR:   1,173423191129E+16\n      //       ja-JP:   1.173423191129E+16\n      //       ru-RU:   1,173423191129E+16\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#15\">      &#39; Define an array of numbers to display.\n      Dim numbers() As Double = { -1.5345e16, -123.4321, 19092.123, _\n                                  1.1734231911290e16 }\n      &#39; Define the culture names used to display them.\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ja-JP&quot;, &quot;ru-RU&quot; }\n      \n      For Each number As Double In numbers\n         Console.WriteLine(&quot;{0}:&quot;, Convert.ToString(number, _\n                                   System.Globalization.CultureInfo.InvariantCulture))\n         For Each cultureName As String In cultureNames\n            Dim culture As New System.Globalization.CultureInfo(cultureName)\n            Console.WriteLine(&quot;   {0}: {1,20}&quot;, _\n                              culture.Name, Convert.ToString(number, culture))\n         Next\n         Console.WriteLine()\n      Next   \n      &#39; The example displays the following output:\n      &#39;    -1.5345E+16:\n      &#39;       en-US:          -1.5345E+16\n      &#39;       fr-FR:          -1,5345E+16\n      &#39;       ja-JP:          -1.5345E+16\n      &#39;       ru-RU:          -1,5345E+16\n      &#39;    \n      &#39;    -123.4321:\n      &#39;       en-US:            -123.4321\n      &#39;       fr-FR:            -123,4321\n      &#39;       ja-JP:            -123.4321\n      &#39;       ru-RU:            -123,4321\n      &#39;    \n      &#39;    19092.123:\n      &#39;       en-US:            19092.123\n      &#39;       fr-FR:            19092,123\n      &#39;       ja-JP:            19092.123\n      &#39;       ru-RU:            19092,123\n      &#39;    \n      &#39;    1.173423191129E+16:\n      &#39;       en-US:   1.173423191129E+16\n      &#39;       fr-FR:   1,173423191129E+16\n      &#39;       ja-JP:   1.173423191129E+16\n      &#39;       ru-RU:   1,173423191129E+16\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int16,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (short value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.int16#System_Int16_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int16.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class that defines its negative sign as the string &quot;~&quot; and its positive sign as the string &quot;!&quot;. It then calls the ToString method to convert each element in an array of 16-bit integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#19\">      short[] numbers = { Int16.MinValue, Int16.MaxValue};\n      System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo();\n      nfi.NegativeSign = &quot;~&quot;;\n      nfi.PositiveSign = &quot;!&quot;;\n      \n      foreach (short number in numbers)\n         Console.WriteLine(&quot;{0,-8}  --&gt;  {1,8}&quot;, \n                           Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), \n                           Convert.ToString(number, nfi));\n      // The example displays the following output:\n      //       -32768    --&gt;    ~32768\n      //       32767     --&gt;     32767\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#19\">      Dim numbers() As Short = { Int16.MinValue, Int16.MaxValue}\n      Dim nfi As New System.Globalization.NumberFormatInfo()\n      nfi.NegativeSign = &quot;~&quot;\n      nfi.PositiveSign = &quot;!&quot;\n      \n      For Each number As Short In numbers\n         Console.WriteLine(&quot;{0,-8}  --&gt;  {1,8}&quot;, _\n                           Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), _\n                           Convert.ToString(number, nfi))\n      Next\n      &#39; The example displays the following output:\n      &#39;       -32768    --&gt;    ~32768\n      &#39;       32767     --&gt;     32767\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int16_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int16,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (short value, int toBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the return value, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code> in base <code>toBase</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>toBase</code> is not 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is positive and <code>toBase</code> is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If <code>value</code> is negative and <code>toBase</code> is 2, 8, or 16, the returned string uses two&#39;s complement representation. This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit. If the ToString method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToInt16(String,Int32)</a> and <a class=\"xref\" href=\"system.int16#System_Int16_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">System.Int16.Parse(String,NumberStyles)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#10\">      int[] bases = { 2, 8, 10, 16};\n      short[] numbers = { Int16.MinValue, -13621, -18, 12, 19142, Int16.MaxValue };\n      \n      foreach (int baseValue in bases)\n      {\n         Console.WriteLine(&quot;Base {0} conversion:&quot;, baseValue);\n         foreach (short number in numbers)\n         {\n            Console.WriteLine(&quot;   {0,-8}  --&gt;  0x{1}&quot;, \n                              number, Convert.ToString(number, baseValue));\n         }\n      }\n      // The example displays the following output:\n      //       Base 2 conversion:\n      //          -32768    --&gt;  0x1000000000000000\n      //          -13621    --&gt;  0x1100101011001011\n      //          -18       --&gt;  0x1111111111101110\n      //          12        --&gt;  0x1100\n      //          19142     --&gt;  0x100101011000110\n      //          32767     --&gt;  0x111111111111111\n      //       Base 8 conversion:\n      //          -32768    --&gt;  0x100000\n      //          -13621    --&gt;  0x145313\n      //          -18       --&gt;  0x177756\n      //          12        --&gt;  0x14\n      //          19142     --&gt;  0x45306\n      //          32767     --&gt;  0x77777\n      //       Base 10 conversion:\n      //          -32768    --&gt;  0x-32768\n      //          -13621    --&gt;  0x-13621\n      //          -18       --&gt;  0x-18\n      //          12        --&gt;  0x12\n      //          19142     --&gt;  0x19142\n      //          32767     --&gt;  0x32767\n      //       Base 16 conversion:\n      //          -32768    --&gt;  0x8000\n      //          -13621    --&gt;  0xcacb\n      //          -18       --&gt;  0xffee\n      //          12        --&gt;  0xc\n      //          19142     --&gt;  0x4ac6\n      //          32767     --&gt;  0x7fff\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#10\">      Dim bases() As Integer = { 2, 8, 10, 16}\n      Dim numbers() As Short = { Int16.MinValue, -13621, -18, 12, 19142, _\n                                 Int16.MaxValue }\n\n      For Each base As Integer In bases\n         Console.WriteLine(&quot;Base {0} conversion:&quot;, base)\n         For Each number As Short In numbers\n            Console.WriteLine(&quot;   {0,-8}  --&gt;  0x{1}&quot;, _\n                              number, Convert.ToString(number, base))\n         Next\n      Next\n      &#39; The example displays the following output:\n      &#39;       Base 2 conversion:\n      &#39;          -32768    --&gt;  0x1000000000000000\n      &#39;          -13621    --&gt;  0x1100101011001011\n      &#39;          -18       --&gt;  0x1111111111101110\n      &#39;          12        --&gt;  0x1100\n      &#39;          19142     --&gt;  0x100101011000110\n      &#39;          32767     --&gt;  0x111111111111111\n      &#39;       Base 8 conversion:\n      &#39;          -32768    --&gt;  0x100000\n      &#39;          -13621    --&gt;  0x145313\n      &#39;          -18       --&gt;  0x177756\n      &#39;          12        --&gt;  0x14\n      &#39;          19142     --&gt;  0x45306\n      &#39;          32767     --&gt;  0x77777\n      &#39;       Base 10 conversion:\n      &#39;          -32768    --&gt;  0x-32768\n      &#39;          -13621    --&gt;  0x-13621\n      &#39;          -18       --&gt;  0x-18\n      &#39;          12        --&gt;  0x12\n      &#39;          19142     --&gt;  0x19142\n      &#39;          32767     --&gt;  0x32767\n      &#39;       Base 16 conversion:\n      &#39;          -32768    --&gt;  0x8000\n      &#39;          -13621    --&gt;  0xcacb\n      &#39;          -18       --&gt;  0xffee\n      &#39;          12        --&gt;  0xc\n      &#39;          19142     --&gt;  0x4ac6\n      &#39;          32767     --&gt;  0x7fff\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int32,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (int value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class that defines its negative sign as the string &quot;~&quot; and its positive sign as the string &quot;!&quot;. It then calls the ToString method to convert each element in an array of integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#20\">      int[] numbers = { Int32.MinValue, Int32.MaxValue};\n      System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo();\n      nfi.NegativeSign = &quot;~&quot;;\n      nfi.PositiveSign = &quot;!&quot;;\n      \n      foreach (int number in numbers)\n         Console.WriteLine(&quot;{0,-12}  --&gt;  {1,12}&quot;, \n                           Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), \n                           Convert.ToString(number, nfi));\n      // The example displays the following output:\n      //       -2147483648  --&gt;  ~2147483648\n      //       2147483647  --&gt;  2147483647\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#20\">      Dim numbers() As Integer = { Int32.MinValue, Int32.MaxValue}\n      Dim nfi As New System.Globalization.NumberFormatInfo()\n      nfi.NegativeSign = &quot;~&quot;\n      nfi.PositiveSign = &quot;!&quot;\n      \n      For Each number As Integer In numbers\n         Console.WriteLine(&quot;{0,-12}  --&gt;  {1,12}&quot;, _\n                           Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), _\n                           Convert.ToString(number, nfi))\n      Next\n      &#39; The example displays the following output:\n      &#39;       -2147483648  --&gt;  ~2147483648\n      &#39;       2147483647   --&gt;  2147483647\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (int value, int toBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the return value, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code> in base <code>toBase</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>toBase</code> is not 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is positive and <code>toBase</code> is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If <code>value</code> is negative and <code>toBase</code> is 2, 8, or 16, the returned string uses two&#39;s complement representation. This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit. If the ToString method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToInt32(String,Int32)</a> and <a class=\"xref\" href=\"system.int32#System_Int32_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">System.Int32.Parse(String,NumberStyles)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#11\">      int[] bases = { 2, 8, 10, 16};\n      int[] numbers = { Int32.MinValue, -19327543, -13621, -18, 12, \n                                   19142, Int32.MaxValue };\n      \n      foreach (int baseValue in bases)\n      {\n         Console.WriteLine(&quot;Base {0} conversion:&quot;, baseValue);\n         foreach (int number in numbers)\n         {\n            Console.WriteLine(&quot;   {0,-15}  --&gt;  0x{1}&quot;, \n                              number, Convert.ToString(number, baseValue));\n         }\n      }\n      // The example displays the following output:\n      //    Base 2 conversion:\n      //       -2147483648      --&gt;  0x10000000000000000000000000000000\n      //       -19327543        --&gt;  0x11111110110110010001010111001001\n      //       -13621           --&gt;  0x11111111111111111100101011001011\n      //       -18              --&gt;  0x11111111111111111111111111101110\n      //       12               --&gt;  0x1100\n      //       19142            --&gt;  0x100101011000110\n      //       2147483647       --&gt;  0x1111111111111111111111111111111\n      //    Base 8 conversion:\n      //       -2147483648      --&gt;  0x20000000000\n      //       -19327543        --&gt;  0x37666212711\n      //       -13621           --&gt;  0x37777745313\n      //       -18              --&gt;  0x37777777756\n      //       12               --&gt;  0x14\n      //       19142            --&gt;  0x45306\n      //       2147483647       --&gt;  0x17777777777\n      //    Base 10 conversion:\n      //       -2147483648      --&gt;  0x-2147483648\n      //       -19327543        --&gt;  0x-19327543\n      //       -13621           --&gt;  0x-13621\n      //       -18              --&gt;  0x-18\n      //       12               --&gt;  0x12\n      //       19142            --&gt;  0x19142\n      //       2147483647       --&gt;  0x2147483647\n      //    Base 16 conversion:\n      //       -2147483648      --&gt;  0x80000000\n      //       -19327543        --&gt;  0xfed915c9\n      //       -13621           --&gt;  0xffffcacb\n      //       -18              --&gt;  0xffffffee\n      //       12               --&gt;  0xc\n      //       19142            --&gt;  0x4ac6\n      //       2147483647       --&gt;  0x7fffffff       \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#11\">      Dim bases() As Integer = { 2, 8, 10, 16}\n      Dim numbers() As Integer = { Int32.MinValue, -19327543, -13621, -18, 12, _\n                                   19142, Int32.MaxValue }\n\n      For Each base As Integer In bases\n         Console.WriteLine(&quot;Base {0} conversion:&quot;, base)\n         For Each number As Integer In numbers\n            Console.WriteLine(&quot;   {0,-15}  --&gt;  0x{1}&quot;, _\n                              number, Convert.ToString(number, base))\n         Next\n      Next\n      &#39; The example displays the following output:\n      &#39;    Base 2 conversion:\n      &#39;       -2147483648      --&gt;  0x10000000000000000000000000000000\n      &#39;       -19327543        --&gt;  0x11111110110110010001010111001001\n      &#39;       -13621           --&gt;  0x11111111111111111100101011001011\n      &#39;       -18              --&gt;  0x11111111111111111111111111101110\n      &#39;       12               --&gt;  0x1100\n      &#39;       19142            --&gt;  0x100101011000110\n      &#39;       2147483647       --&gt;  0x1111111111111111111111111111111\n      &#39;    Base 8 conversion:\n      &#39;       -2147483648      --&gt;  0x20000000000\n      &#39;       -19327543        --&gt;  0x37666212711\n      &#39;       -13621           --&gt;  0x37777745313\n      &#39;       -18              --&gt;  0x37777777756\n      &#39;       12               --&gt;  0x14\n      &#39;       19142            --&gt;  0x45306\n      &#39;       2147483647       --&gt;  0x17777777777\n      &#39;    Base 10 conversion:\n      &#39;       -2147483648      --&gt;  0x-2147483648\n      &#39;       -19327543        --&gt;  0x-19327543\n      &#39;       -13621           --&gt;  0x-13621\n      &#39;       -18              --&gt;  0x-18\n      &#39;       12               --&gt;  0x12\n      &#39;       19142            --&gt;  0x19142\n      &#39;       2147483647       --&gt;  0x2147483647\n      &#39;    Base 16 conversion:\n      &#39;       -2147483648      --&gt;  0x80000000\n      &#39;       -19327543        --&gt;  0xfed915c9\n      &#39;       -13621           --&gt;  0xffffcacb\n      &#39;       -18              --&gt;  0xffffffee\n      &#39;       12               --&gt;  0xc\n      &#39;       19142            --&gt;  0x4ac6\n      &#39;       2147483647       --&gt;  0x7fffffff\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int64,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (long value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.int64#System_Int64_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int64.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class that defines its negative sign as the string &quot;~&quot; and its positive sign as the string &quot;!&quot;. It then calls the ToString method to convert each element in a long integer array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#21\">      long[] numbers = { ((long) Int32.MinValue) * 2, ((long) Int32.MaxValue) * 2};\n      System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo();\n      nfi.NegativeSign = &quot;~&quot;;\n      nfi.PositiveSign = &quot;!&quot;;\n      \n      foreach (long number in numbers)\n         Console.WriteLine(&quot;{0,-12}  --&gt;  {1,12}&quot;, \n                           Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), \n                           Convert.ToString(number, nfi));\n      // The example displays the following output:\n      //       -4294967296  --&gt;  ~4294967296\n      //       4294967294  --&gt;  4294967294\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#21\">      Dim numbers() As Long = { CLng(Int32.MinValue) * 2, CLng(Int32.MaxValue) * 2 }\n      Dim nfi As New System.Globalization.NumberFormatInfo()\n      nfi.NegativeSign = &quot;~&quot;\n      nfi.PositiveSign = &quot;!&quot;\n      \n      For Each number As Long In numbers\n         Console.WriteLine(&quot;{0,-12}  --&gt;  {1,12}&quot;, _\n                           Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), _\n                           Convert.ToString(number, nfi))\n      Next\n      &#39; The example displays the following output:\n      &#39;       -4294967296  --&gt;  ~4294967296\n      &#39;       4294967294   --&gt;  4294967294\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Int64_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int64,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (long value, int toBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the return value, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code> in base <code>toBase</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>toBase</code> is not 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is positive and <code>toBase</code> is not 10, the returned string uses sign-and-magnitude representation. If <code>value</code> is negative and <code>toBase</code> is not 10, the returned string uses two&#39;s complement representation. This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit. If the ToString method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Convert.ToInt64(String,Int32)</a> and <a class=\"xref\" href=\"system.int64#System_Int64_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">System.Int64.Parse(String,NumberStyles)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#12\">      int[] bases = { 2, 8, 10, 16};\n      long[] numbers = { Int64.MinValue, -193275430, -13621, -18, 12, \n                         1914206117, Int64.MaxValue };\n\n      foreach (int baseValue in bases)\n      {\n         Console.WriteLine(&quot;Base {0} conversion:&quot;, baseValue);\n         foreach (long number in numbers)\n         {\n            Console.WriteLine(&quot;   {0,-23}  --&gt;  0x{1}&quot;, \n                              number, Convert.ToString(number, baseValue));\n         }\n      }\n      // The example displays the following output:\n      //    Base 2 conversion:\n      //       -9223372036854775808     --&gt;  0x1000000000000000000000000000000000000000000000000000000000000000\n      //       -193275430               --&gt;  0x1111111111111111111111111111111111110100011110101101100111011010\n      //       -13621                   --&gt;  0x1111111111111111111111111111111111111111111111111100101011001011\n      //       -18                      --&gt;  0x1111111111111111111111111111111111111111111111111111111111101110\n      //       12                       --&gt;  0x1100\n      //       1914206117               --&gt;  0x1110010000110000111011110100101\n      //       9223372036854775807      --&gt;  0x111111111111111111111111111111111111111111111111111111111111111\n      //    Base 8 conversion:\n      //       -9223372036854775808     --&gt;  0x1000000000000000000000\n      //       -193275430               --&gt;  0x1777777777776436554732\n      //       -13621                   --&gt;  0x1777777777777777745313\n      //       -18                      --&gt;  0x1777777777777777777756\n      //       12                       --&gt;  0x14\n      //       1914206117               --&gt;  0x16206073645\n      //       9223372036854775807      --&gt;  0x777777777777777777777\n      //    Base 10 conversion:\n      //       -9223372036854775808     --&gt;  0x-9223372036854775808\n      //       -193275430               --&gt;  0x-193275430\n      //       -13621                   --&gt;  0x-13621\n      //       -18                      --&gt;  0x-18\n      //       12                       --&gt;  0x12\n      //       1914206117               --&gt;  0x1914206117\n      //       9223372036854775807      --&gt;  0x9223372036854775807\n      //    Base 16 conversion:\n      //       -9223372036854775808     --&gt;  0x8000000000000000\n      //       -193275430               --&gt;  0xfffffffff47ad9da\n      //       -13621                   --&gt;  0xffffffffffffcacb\n      //       -18                      --&gt;  0xffffffffffffffee\n      //       12                       --&gt;  0xc\n      //       1914206117               --&gt;  0x721877a5\n      //       9223372036854775807      --&gt;  0x7fffffffffffffff\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#12\">      Dim bases() As Integer = { 2, 8, 10, 16}\n      Dim numbers() As Long = { Int64.MinValue, -193275430, -13621, -18, 12, _\n                                   1914206117, Int64.MaxValue }\n\n      For Each base As Integer In bases\n         Console.WriteLine(&quot;Base {0} conversion:&quot;, base)\n         For Each number As Long In numbers\n            Console.WriteLine(&quot;   {0,-23}  --&gt;  0x{1}&quot;, _\n                              number, Convert.ToString(number, base))\n         Next\n      Next\n      &#39; The example displays the following output:\n      &#39;    Base 2 conversion:\n      &#39;       -9223372036854775808     --&gt;  0x1000000000000000000000000000000000000000000000000000000000000000\n      &#39;       -193275430               --&gt;  0x1111111111111111111111111111111111110100011110101101100111011010\n      &#39;       -13621                   --&gt;  0x1111111111111111111111111111111111111111111111111100101011001011\n      &#39;       -18                      --&gt;  0x1111111111111111111111111111111111111111111111111111111111101110\n      &#39;       12                       --&gt;  0x1100\n      &#39;       1914206117               --&gt;  0x1110010000110000111011110100101\n      &#39;       9223372036854775807      --&gt;  0x111111111111111111111111111111111111111111111111111111111111111\n      &#39;    Base 8 conversion:\n      &#39;       -9223372036854775808     --&gt;  0x1000000000000000000000\n      &#39;       -193275430               --&gt;  0x1777777777776436554732\n      &#39;       -13621                   --&gt;  0x1777777777777777745313\n      &#39;       -18                      --&gt;  0x1777777777777777777756\n      &#39;       12                       --&gt;  0x14\n      &#39;       1914206117               --&gt;  0x16206073645\n      &#39;       9223372036854775807      --&gt;  0x777777777777777777777\n      &#39;    Base 10 conversion:\n      &#39;       -9223372036854775808     --&gt;  0x-9223372036854775808\n      &#39;       -193275430               --&gt;  0x-193275430\n      &#39;       -13621                   --&gt;  0x-13621\n      &#39;       -18                      --&gt;  0x-18\n      &#39;       12                       --&gt;  0x12\n      &#39;       1914206117               --&gt;  0x1914206117\n      &#39;       9223372036854775807      --&gt;  0x9223372036854775807\n      &#39;    Base 16 conversion:\n      &#39;       -9223372036854775808     --&gt;  0x8000000000000000\n      &#39;       -193275430               --&gt;  0xfffffffff47ad9da\n      &#39;       -13621                   --&gt;  0xffffffffffffcacb\n      &#39;       -18                      --&gt;  0xffffffffffffffee\n      &#39;       12                       --&gt;  0xc\n      &#39;       1914206117               --&gt;  0x721877a5\n      &#39;       9223372036854775807      --&gt;  0x7fffffffffffffff\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies the value to convert, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>value</code> is an object whose value is <code>null</code>. If <code>value</code> is <code>null</code>, the method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>value</code> parameter implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, the method calls the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.IConvertible.ToString(IFormatProvider)</a>implementation of <code>value</code>. Otherwise, if the <code>value</code> parameter implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, the method calls its <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.IFormattable.ToString(String,IFormatProvider)</a>implementation. If <code>value</code> implements neither interface, the method calls the <code>value</code> parameter&#39;s <code>ToString()</code> method, and the <code>provider</code> parameter is ignored.  </p>\n<p> The <code>provider</code> parameter is used if the <code>value</code> parameter implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> or <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface. The most common use of the <code>provider</code> parameter is to specify culture-specific information used in the conversion of <code>value</code>. For example, if the <code>value</code> parameter is a negative decimal number, the <code>provider</code> parameter can supply culture-specific information about the notation used for the negative sign and decimal separator. The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Temperature</code> class that overrides the <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> method but does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The example illustrates how calls to the ToString method, in turn, call the <code>Temperature.ToString</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#26\">using System;\n\npublic class Temperature\n{\n   private decimal m_Temp;\n\n   public Temperature(decimal temperature)\n   {\n      this.m_Temp = temperature;\n   }\n   \n   public decimal Celsius\n   {\n      get { return this.m_Temp; }   \n   }\n   \n   public decimal Kelvin\n   {\n      get { return this.m_Temp + 273.15m; }    \n   }\n   \n   public decimal Fahrenheit\n   {\n      get { return Math.Round((decimal) (this.m_Temp * 9 / 5 + 32), 2); }\n   }\n   \n   public override string ToString()\n   {\n      return m_Temp.ToString(&quot;N2&quot;) + &quot; &#176;C&quot;;\n   }\n\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Temperature cold = new Temperature(-40);\n      Temperature freezing = new Temperature(0);\n      Temperature boiling = new Temperature(100);\n      \n      Console.WriteLine(Convert.ToString(cold, null));\n      Console.WriteLine(Convert.ToString(freezing, null));\n      Console.WriteLine(Convert.ToString(boiling, null));\n   }\n}\n// The example dosplays the following output:\n//       -40.00 &#176;C\n//       0.00 &#176;C\n//       100.00 &#176;C\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#26\">Public Class Temperature \n   Private m_Temp As Decimal\n\n   Public Sub New(temperature As Decimal)\n      Me.m_Temp = temperature\n   End Sub\n   \n   Public ReadOnly Property Celsius() As Decimal\n      Get\n         Return Me.m_Temp\n      End Get   \n   End Property\n   \n   Public ReadOnly Property Kelvin() As Decimal\n      Get\n         Return Me.m_Temp + 273.15d   \n      End Get\n   End Property\n   \n   Public ReadOnly Property Fahrenheit() As Decimal\n      Get\n         Return Math.Round(CDec(Me.m_Temp * 9 / 5 + 32), 2)\n      End Get      \n   End Property\n   \n   Public Overrides Function ToString() As String\n      Return m_Temp.ToString(&quot;N2&quot;) &amp; &quot; &#176;C&quot;\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim cold As New Temperature(-40)\n      Dim freezing As New Temperature(0)\n      Dim boiling As New Temperature(100)\n      \n      Console.WriteLine(Convert.ToString(cold, Nothing))\n      Console.WriteLine(Convert.ToString(freezing, Nothing))\n      Console.WriteLine(Convert.ToString(boiling, Nothing))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       -40.00 &#176;C\n&#39;       0.00 &#176;C\n&#39;       100.00 &#176;C\n</code></pre><p> The following example defines a <code>Temperature</code> class that implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface but does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. Its <a class=\"xref\" href=\"system.iformattable#System_IFormattable_ToString_\" data-linktype=\"relative-path\">ToString</a>implementation represents the <code>Temperature</code> value in Celsius, Fahrenheit, or Kelvin, depending on the format  string. The example also defines a <code>TemperatureProvider</code> class that implements <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> and provides a randomly generated format string that is used by the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> implementation of the <code>Temperature</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#30\">using System;\n\npublic class Temperature : IFormattable \n{\n   private decimal m_Temp; \n\n   public Temperature(decimal temperature)\n   {\n      this.m_Temp = temperature;\n   } \n\n   public decimal Celsius \n   { get { return this.m_Temp; } } \n\n   public decimal Kelvin \n   { get { return this.m_Temp + 273.15m; } }   \n\n   public decimal Fahrenheit\n   {  get { return Math.Round(this.m_Temp * 9m / 5m + 32m, 2); } }\n\n   public override String ToString() \n   { \n      return ToString(&quot;G&quot;, null); \n   } \n   \n   public String ToString(String fmt, IFormatProvider provider) \n   {\n      TemperatureProvider formatter = null;\n      if (provider != null) \n         formatter = provider.GetFormat(typeof(TemperatureProvider)) \n                                       as TemperatureProvider;\n\n      if (String.IsNullOrWhiteSpace(fmt)) {\n         if (formatter != null) \n            fmt = formatter.Format;\n         else\n            fmt = &quot;G&quot;;\n      }\n\n      switch (fmt.ToUpper()) {\n         case &quot;G&quot;:\n         case &quot;C&quot;:\n            return m_Temp.ToString(&quot;N2&quot;) + &quot; &#176;C&quot;; \n         case &quot;F&quot;:\n            return Fahrenheit.ToString(&quot;N2&quot;) + &quot; &#176;F&quot;;\n         case &quot;K&quot;:\n            return Kelvin.ToString(&quot;N2&quot;) + &quot; K&quot;;\n         default:\n            throw new FormatException(String.Format(&quot;&#39;{0}&#39; is not a valid format specifier.&quot;, fmt));\n      }\n   }                             \n} \n\npublic class TemperatureProvider : IFormatProvider\n{\n   private String[] fmtStrings = { &quot;C&quot;, &quot;G&quot;, &quot;F&quot;, &quot;K&quot; };\n   private Random rnd = new Random();\n   \n   public Object GetFormat(Type formatType) \n   { \n      return this; \n   }\n   \n   public String Format\n   { get { return fmtStrings[rnd.Next(0, fmtStrings.Length)]; } }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Temperature cold = new Temperature (-40);\n      Temperature freezing = new Temperature (0);\n      Temperature boiling = new Temperature (100);\n\n      TemperatureProvider tp = new TemperatureProvider();\n      \n      Console.WriteLine(Convert.ToString(cold, tp));\n      Console.WriteLine(Convert.ToString(freezing, tp));\n      Console.WriteLine(Convert.ToString(boiling, tp));\n   }\n}\n// The example displays output like the following:\n//       -40.00 &#176;C\n//       273.15 K\n//       100.00 &#176;C\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#30\">Public Class Temperature : Implements IFormattable \n   Private m_Temp As Decimal \n\n   Public Sub New(temperature As Decimal)\n      Me.m_Temp = temperature\n   End Sub \n\n   Public ReadOnly Property Celsius As Decimal \n      Get \n         Return Me.m_Temp\n      End Get    \n   End Property \n\n   Public ReadOnly Property Kelvin As Decimal \n      Get \n         Return Me.m_Temp + 273.15d   \n      End Get \n   End Property \n\n   Public ReadOnly Property Fahrenheit As Decimal \n      Get \n         Return Math.Round(CDec(Me.m_Temp * 9 / 5 + 32), 2)\n      End Get       \n   End Property \n\n   Public Overrides Function ToString() As String \n      Return ToString(&quot;G&quot;, Nothing) \n   End Function \n   \n   Public Overloads Function ToString(fmt As String, \n                                      provider As IFormatProvider) As String _\n                             Implements IFormattable.ToString\n      Dim formatter As TemperatureProvider = Nothing\n      If provider IsNot Nothing Then formatter = TryCast(provider.GetFormat(GetType(TemperatureProvider)),\n                                                         TemperatureProvider)\n\n      If String.IsNullOrWhiteSpace(fmt) Then\n         If formatter IsNot Nothing Then\n            fmt = formatter.Format\n         Else\n            fmt = &quot;G&quot;\n         End If\n      End If\n\n      Select Case fmt.ToUpper()\n         Case &quot;G&quot;, &quot;C&quot;\n            Return m_Temp.ToString(&quot;N2&quot;) &amp; &quot; &#176;C&quot; \n         Case &quot;F&quot;\n            Return Fahrenheit.ToString(&quot;N2&quot;) + &quot; &#176;F&quot;\n         Case &quot;K&quot;\n            Return Kelvin.ToString(&quot;N2&quot;) + &quot; K&quot;\n         Case Else\n            Throw New FormatException(String.Format(&quot;&#39;{0}&#39; is not a valid format specifier.&quot;, fmt))\n      End Select\n   End Function                             \nEnd Class \n\nPublic Class TemperatureProvider : Implements IFormatProvider\n   Private fmtStrings() As String = { &quot;C&quot;, &quot;G&quot;, &quot;F&quot;, &quot;K&quot; }\n   Private rnd As New Random()\n   \n   Public Function GetFormat(formatType As Type) As Object _\n                   Implements IFormatProvider.GetFormat \n      Return Me \n   End Function\n   \n   Public ReadOnly Property Format As String\n      Get\n         Return fmtStrings(rnd.Next(0, fmtStrings.Length))\n      End Get\n   End Property\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim cold As New Temperature(-40)\n      Dim freezing As New Temperature(0)\n      Dim boiling As New Temperature(100)\n\n      Dim tp As New TemperatureProvider()\n      \n      Console.WriteLine(Convert.ToString(cold, tp))\n      Console.WriteLine(Convert.ToString(freezing, tp))\n      Console.WriteLine(Convert.ToString(boiling, tp))\n   End Sub \nEnd Module \n&#39; The example displays output like the following:\n&#39;       -40.00 &#176;C\n&#39;       273.15 K\n&#39;       100.00 &#176;C\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_SByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(SByte,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (sbyte value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.sbyte#System_SByte_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.SByte.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class that defines its negative sign as the string &quot;~&quot; and its positive sign as the string &quot;!&quot;. It then calls the ToString method to convert each element in signed byte array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#17\">      sbyte[] numbers = { SByte.MinValue, -12, 17, SByte.MaxValue};\n      System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo();\n      nfi.NegativeSign = &quot;~&quot;;\n      nfi.PositiveSign = &quot;!&quot;;\n      foreach (sbyte number in numbers)\n         Console.WriteLine(Convert.ToString(number, nfi));\n      // The example displays the following output:\n      //       ~128\n      //       ~12\n      //       17\n      //       127      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#17\">      Dim numbers() As SByte = { SByte.MinValue, -12, 17, SByte.MaxValue}\n      Dim nfi As New System.Globalization.NumberFormatInfo()\n      nfi.NegativeSign = &quot;~&quot;\n      nfi.PositiveSign = &quot;!&quot;\n      For Each number As SByte In numbers\n         Console.WriteLine(Convert.ToString(number, nfi))\n      Next\n      &#39; The example displays the following output:\n      &#39;       ~128\n      &#39;       ~12\n      &#39;       17\n      &#39;       127          \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_Single_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Single,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (float value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.single#System_Single_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Single.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to its equivalent string representation in four different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#18\">      // Define an array of numbers to display.\n      float[] numbers = { -1.5345e16f, -123.4321f, 19092.123f, 1.1734231911290e16f };\n      // Define the culture names used to display them.\n      string[] cultureNames = { &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ja-JP&quot;, &quot;ru-RU&quot; };\n      \n      foreach (float number in numbers)\n      {\n         Console.WriteLine(&quot;{0}:&quot;, Convert.ToString(number,\n                                   System.Globalization.CultureInfo.InvariantCulture));\n         foreach (string cultureName in cultureNames)\n         {\n            System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo(cultureName);\n            Console.WriteLine(&quot;   {0}: {1,20}&quot;,\n                              culture.Name, Convert.ToString(number, culture));\n         }\n         Console.WriteLine();\n      }   \n      // The example displays the following output:\n      //    -1.5345E+16:\n      //       en-US:          -1.5345E+16\n      //       fr-FR:          -1,5345E+16\n      //       ja-JP:          -1.5345E+16\n      //       ru-RU:          -1,5345E+16\n      //    \n      //    -123.4321:\n      //       en-US:            -123.4321\n      //       fr-FR:            -123,4321\n      //       ja-JP:            -123.4321\n      //       ru-RU:            -123,4321\n      //    \n      //    19092.123:\n      //       en-US:            19092.123\n      //       fr-FR:            19092,123\n      //       ja-JP:            19092.123\n      //       ru-RU:            19092,123\n      //    \n      //    1.173423191129E+16:\n      //       en-US:   1.173423191129E+16\n      //       fr-FR:   1,173423191129E+16\n      //       ja-JP:   1.173423191129E+16\n      //       ru-RU:   1,173423191129E+16\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#18\">      &#39; Define an array of numbers to display.\n      Dim numbers() As Single = { -1.5345e16, -123.4321, 19092.123, _\n                                  1.1734231911290e16 }\n      &#39; Define the culture names used to display them.\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ja-JP&quot;, &quot;ru-RU&quot; }\n      \n      For Each number As Single In numbers\n         Console.WriteLine(&quot;{0}:&quot;, Convert.ToString(number, _\n                                   System.Globalization.CultureInfo.InvariantCulture))\n         For Each cultureName As String In cultureNames\n            Dim culture As New System.Globalization.CultureInfo(cultureName)\n            Console.WriteLine(&quot;   {0}: {1,20}&quot;, _\n                              culture.Name, Convert.ToString(number, culture))\n         Next\n         Console.WriteLine()\n      Next   \n      &#39; The example displays the following output:\n      &#39;    -1.5345E+16:\n      &#39;       en-US:          -1.5345E+16\n      &#39;       fr-FR:          -1,5345E+16\n      &#39;       ja-JP:          -1.5345E+16\n      &#39;       ru-RU:          -1,5345E+16\n      &#39;    \n      &#39;    -123.4321:\n      &#39;       en-US:            -123.4321\n      &#39;       fr-FR:            -123,4321\n      &#39;       ja-JP:            -123.4321\n      &#39;       ru-RU:            -123,4321\n      &#39;    \n      &#39;    19092.123:\n      &#39;       en-US:            19092.123\n      &#39;       fr-FR:            19092,123\n      &#39;       ja-JP:            19092.123\n      &#39;       ru-RU:            19092,123\n      &#39;    \n      &#39;    1.173423191129E+16:\n      &#39;       en-US:   1.173423191129E+16\n      &#39;       fr-FR:   1,173423191129E+16\n      &#39;       ja-JP:   1.173423191129E+16\n      &#39;       ru-RU:   1,173423191129E+16\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified string instance; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the <code>ToString</code> method with a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> parameter. The method returns the unmodified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> without referencing the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Convert.ToString.IFormatProvider#2\">// Example of Convert::ToString( non-numeric types, IFormatProvider ).\nusing namespace System;\nusing namespace System::Globalization;\n\n#define null (Object^)0\n\n// An instance of this class can be passed to methods that require \n// an IFormatProvider.\nref class DummyProvider: public IFormatProvider\n{\npublic:\n\n   // Normally, GetFormat returns an object of the requested type\n   // (usually itself) if it is able; otherwise, it returns Nothing. \n   virtual Object^ GetFormat( Type^ argType )\n   {\n      // Here, the type of argType is displayed, and GetFormat\n      // always returns Nothing.\n      Console::Write( &quot;{0,-40}&quot;, argType-&gt;ToString() );\n      return null;\n   }\n};\n\nint main()\n{\n   // Create an instance of the IFormatProvider.\n   DummyProvider^ provider = gcnew DummyProvider;\n   String^ converted;\n\n   // Convert these values using DummyProvider.\n   int Int32A = -252645135;\n   double DoubleA = 61680.3855;\n   Object^ ObjDouble =  -98765.4321;\n   DateTime DayTimeA = DateTime(2001,9,11,13,45,0);\n   bool BoolA = true;\n   String^ StringA = &quot;Qwerty&quot;;\n   Char CharA = &#39;$&#39;;\n   TimeSpan TSpanA = TimeSpan(0,18,0);\n   Object^ ObjOther = static_cast&lt;Object^&gt;(provider);\n   Console::WriteLine( &quot;This example of &quot;\n   &quot;Convert::ToString( non-numeric, IFormatProvider* ) <br>&quot;\n   &quot;generates the following output. The provider type, &quot;\n   &quot;argument type, <br>and argument value are displayed.&quot; );\n   Console::WriteLine( &quot;<br>Note: The IFormatProvider object is &quot;\n   &quot;not called for Boolean, String, <br>Char, TimeSpan, &quot;\n   &quot;and non-numeric Object.&quot; );\n\n   // The format provider is called for these conversions.\n   Console::WriteLine();\n   converted = Convert::ToString( Int32A, provider );\n   Console::WriteLine( &quot;int      {0}&quot;, converted );\n   converted = Convert::ToString( DoubleA, provider );\n   Console::WriteLine( &quot;double   {0}&quot;, converted );\n   converted = Convert::ToString( ObjDouble, provider );\n   Console::WriteLine( &quot;Object   {0}&quot;, converted );\n   converted = Convert::ToString( DayTimeA, provider );\n   Console::WriteLine( &quot;DateTime {0}&quot;, converted );\n\n   // The format provider is not called for these conversions.\n   Console::WriteLine();\n   converted = Convert::ToString( BoolA, provider );\n   Console::WriteLine( &quot;bool     {0}&quot;, converted );\n   converted = Convert::ToString( StringA, provider );\n   Console::WriteLine( &quot;String   {0}&quot;, converted );\n   converted = Convert::ToString( CharA, provider );\n   Console::WriteLine( &quot;Char     {0}&quot;, converted );\n   converted = Convert::ToString( TSpanA, provider );\n   Console::WriteLine( &quot;TimeSpan {0}&quot;, converted );\n   converted = Convert::ToString( ObjOther, provider );\n   Console::WriteLine( &quot;Object   {0}&quot;, converted );\n}\n\n/*\nThis example of Convert::ToString( non-numeric, IFormatProvider* )\ngenerates the following output. The provider type, argument type,\nand argument value are displayed.\n\nNote: The IFormatProvider object is not called for Boolean, String,\nChar, TimeSpan, and non-numeric Object.\n\nSystem.Globalization.NumberFormatInfo   int      -252645135\nSystem.Globalization.NumberFormatInfo   double   61680.3855\nSystem.Globalization.NumberFormatInfo   Object   -98765.4321\nSystem.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n\nbool     True\nString   Qwerty\nChar     $\nTimeSpan 00:18:00\nObject   DummyProvider\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString.IFormatProvider#2\">&#39; Example of Convert.ToString( non-numeric types, IFormatProvider ).\nImports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\n&#39; An instance of this class can be passed to methods that require \n&#39; an IFormatProvider.\nPublic Class DummyProvider\n    Implements IFormatProvider\n\n    &#39; Normally, GetFormat returns an object of the requested type\n    &#39; (usually itself) if it is able; otherwise, it returns Nothing. \n    Public Function GetFormat( argType As Type ) As Object _\n        Implements IFormatProvider.GetFormat\n\n        &#39; Here, the type of argType is displayed, and GetFormat\n        &#39; always returns Nothing.\n        Console.Write( &quot;{0,-40}&quot;, argType.ToString( ) )\n        Return Nothing\n\n    End Function \nEnd Class\n\nModule ConvertNonNumericProviderDemo\n\n    Sub Main( )\n\n        &#39; Create an instance of the IFormatProvider.\n        Dim provider    As New DummyProvider( )\n        Dim converted   As String\n\n        &#39; Convert these values using DummyProvider.\n        Dim Int32A      As Integer  = -252645135   \n        Dim DoubleA     As Double   = 61680.3855\n        Dim ObjDouble   As Object   = CType( -98765.4321, Object )\n        Dim DayTimeA    As DateTime = _\n                            new DateTime( 2001, 9, 11, 13, 45, 0 )\n\n        Dim BoolA       As Boolean  = True\n        Dim StringA     As String   = &quot;Qwerty&quot;\n        Dim CharA       As Char     = &quot;$&quot;c\n        Dim TSpanA      As TimeSpan = New TimeSpan( 0, 18, 0 )\n        Dim ObjOther    As Object   = CType( provider, Object )\n\n        Console.WriteLine( &quot;This example of &quot; &amp; _\n            &quot;Convert.ToString( non-numeric, IFormatProvider ) &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output. The &quot; &amp; _\n            &quot;provider type, argument type, &quot; &amp; vbCrLf &amp; &quot;and &quot; &amp; _\n            &quot;argument value are displayed.&quot; )\n        Console.WriteLine( vbCrLf &amp; _\n            &quot;Note: The IFormatProvider object is not called for &quot; &amp; _\n            &quot;Boolean, String, &quot; &amp; vbCrLf &amp; &quot;Char, TimeSpan, &quot; &amp; _\n            &quot;and non-numeric Object.&quot; )\n\n        &#39; The format provider is called for these conversions.\n        Console.WriteLine( )\n        converted =  Convert.ToString( Int32A, provider )\n        Console.WriteLine( &quot;Int32    {0}&quot;, converted )\n        converted =  Convert.ToString( DoubleA, provider )\n        Console.WriteLine( &quot;Double   {0}&quot;, converted )\n        converted =  Convert.ToString( ObjDouble, provider )\n        Console.WriteLine( &quot;Object   {0}&quot;, converted )\n        converted =  Convert.ToString( DayTimeA, provider )\n        Console.WriteLine( &quot;DateTime {0}&quot;, converted )\n\n        &#39; The format provider is not called for these conversions.\n        Console.WriteLine( )\n        converted =  Convert.ToString( BoolA, provider )\n        Console.WriteLine( &quot;Boolean  {0}&quot;, converted )\n        converted =  Convert.ToString( StringA, provider )\n        Console.WriteLine( &quot;String   {0}&quot;, converted )\n        converted =  Convert.ToString( CharA, provider )\n        Console.WriteLine( &quot;Char     {0}&quot;, converted )\n        converted =  Convert.ToString( TSpanA, provider )\n        Console.WriteLine( &quot;TimeSpan {0}&quot;, converted )\n        converted =  Convert.ToString( ObjOther, provider )\n        Console.WriteLine( &quot;Object   {0}&quot;, converted )\n\n    End Sub\nEnd Module\n\n&#39; This example of Convert.ToString( non-numeric, IFormatProvider )\n&#39; generates the following output. The provider type, argument type,\n&#39; and argument value are displayed.\n&#39;\n&#39; Note: The IFormatProvider object is not called for Boolean, String,\n&#39; Char, TimeSpan, and non-numeric Object.\n&#39; \n&#39; System.Globalization.NumberFormatInfo   Int32    -252645135\n&#39; System.Globalization.NumberFormatInfo   Double   61680.3855\n&#39; System.Globalization.NumberFormatInfo   Object   -98765.4321\n&#39; System.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n&#39; \n&#39; Boolean  True\n&#39; String   Qwerty\n&#39; Char     $\n&#39; TimeSpan 00:18:00\n&#39; Object   DummyProvider\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToString.IFormatProvider#2\">// Example of Convert.ToString( non-numeric types, IFormatProvider ).\nusing System;\nusing System.Globalization;\n\n// An instance of this class can be passed to methods that require \n// an IFormatProvider.\npublic class DummyProvider : IFormatProvider\n{\n    // Normally, GetFormat returns an object of the requested type\n    // (usually itself) if it is able; otherwise, it returns Nothing. \n    public object GetFormat( Type argType )\n    {\n        // Here, the type of argType is displayed, and GetFormat\n        // always returns Nothing.\n        Console.Write( &quot;{0,-40}&quot;, argType.ToString( ) );\n        return null;\n    }\n}\n\nclass ConvertNonNumericProviderDemo\n{\n    static void Main( )\n    {\n        // Create an instance of the IFormatProvider.\n        DummyProvider provider = new DummyProvider( );\n        string converted;\n\n        // Convert these values using DummyProvider.\n        int      Int32A     = -252645135;\n        double   DoubleA    = 61680.3855;\n        object   ObjDouble  = (object)( -98765.4321 );\n        DateTime DayTimeA   = new DateTime( 2001, 9, 11, 13, 45, 0 );\n\n        bool     BoolA      = true;\n        string   StringA    = &quot;Qwerty&quot;;\n        char     CharA      = &#39;$&#39;;\n        TimeSpan TSpanA     = new TimeSpan( 0, 18, 0 );\n        object   ObjOther   = (object)provider;\n\n        Console.WriteLine( &quot;This example of &quot; +\n            &quot;Convert.ToString( non-numeric, IFormatProvider ) <br>&quot; +\n            &quot;generates the following output. The provider type, &quot; +\n            &quot;argument type, <br>and argument value are displayed.&quot; );\n        Console.WriteLine( &quot;<br>Note: The IFormatProvider object is &quot; +\n            &quot;not called for Boolean, String, <br>Char, TimeSpan, &quot; +\n            &quot;and non-numeric Object.&quot; );\n\n        // The format provider is called for these conversions.\n        Console.WriteLine( );\n        converted = Convert.ToString( Int32A, provider );\n        Console.WriteLine( &quot;int      {0}&quot;, converted );\n        converted = Convert.ToString( DoubleA, provider );\n        Console.WriteLine( &quot;double   {0}&quot;, converted );\n        converted = Convert.ToString( ObjDouble, provider );\n        Console.WriteLine( &quot;object   {0}&quot;, converted );\n        converted = Convert.ToString( DayTimeA, provider );\n        Console.WriteLine( &quot;DateTime {0}&quot;, converted );\n\n        // The format provider is not called for these conversions.\n        Console.WriteLine( );\n        converted = Convert.ToString( BoolA, provider );\n        Console.WriteLine( &quot;bool     {0}&quot;, converted );\n        converted = Convert.ToString( StringA, provider );\n        Console.WriteLine( &quot;string   {0}&quot;, converted );\n        converted = Convert.ToString( CharA, provider );\n        Console.WriteLine( &quot;char     {0}&quot;, converted );\n        converted = Convert.ToString( TSpanA, provider );\n        Console.WriteLine( &quot;TimeSpan {0}&quot;, converted );\n        converted = Convert.ToString( ObjOther, provider );\n        Console.WriteLine( &quot;object   {0}&quot;, converted );\n    }\n}\n\n/*\nThis example of Convert.ToString( non-numeric, IFormatProvider )\ngenerates the following output. The provider type, argument type,\nand argument value are displayed.\n\nNote: The IFormatProvider object is not called for Boolean, String,\nChar, TimeSpan, and non-numeric Object.\n\nSystem.Globalization.NumberFormatInfo   int      -252645135\nSystem.Globalization.NumberFormatInfo   double   61680.3855\nSystem.Globalization.NumberFormatInfo   object   -98765.4321\nSystem.Globalization.DateTimeFormatInfo DateTime 9/11/2001 1:45:00 PM\n\nbool     True\nstring   Qwerty\nchar     $\nTimeSpan 00:18:00\nobject   DummyProvider\n\n*/ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_UInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(UInt16,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (ushort value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.uint16#System_UInt16_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.UInt16.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class that defines its negative sign as the string &quot;~&quot; and its positive sign as the string &quot;!&quot;. It then calls the ToString method to convert a 16-bit unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The output indicates that this formatting information is not used, because by default the &quot;G&quot; format specifier does not include a positive sign with positive values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#22\">      ushort number = UInt16.MaxValue;\n      System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo();\n      nfi.NegativeSign = &quot;~&quot;;\n      nfi.PositiveSign = &quot;!&quot;;\n      \n      Console.WriteLine(&quot;{0,-6}  --&gt;  {1,6}&quot;,\n                        Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture),\n                        Convert.ToString(number, nfi));\n      // The example displays the following output:\n      //       65535   --&gt;   65535\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#22\">      Dim number As UShort = UInt16.MaxValue\n      Dim nfi As New System.Globalization.NumberFormatInfo()\n      nfi.NegativeSign = &quot;~&quot;\n      nfi.PositiveSign = &quot;!&quot;\n      \n      Console.WriteLine(&quot;{0,-6}  --&gt;  {1,6}&quot;, _\n                        Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), _\n                        Convert.ToString(number, nfi))\n      &#39; The example displays the following output:\n      &#39;       65535   --&gt;   65535\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_UInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(UInt32,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (uint value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.uint32#System_UInt32_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.UInt32.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class that defines its negative sign as the string &quot;~&quot; and its positive sign as the string &quot;!&quot;. It then calls the ToString method to convert an unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The output indicates that this formatting information is not used, because by default the &quot;G&quot; format specifier does not include a positive sign with positive values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#23\">      uint number = UInt32.MaxValue;\n      System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo();\n      nfi.NegativeSign = &quot;~&quot;;\n      nfi.PositiveSign = &quot;!&quot;;\n      \n      Console.WriteLine(&quot;{0,-8}  --&gt;  {1,8}&quot;,\n                        Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture),\n                        Convert.ToString(number, nfi));\n      // The example displays the following output:\n      //       4294967295  --&gt;  4294967295\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#23\">      Dim number As UInteger = UInt32.MaxValue\n      Dim nfi As New System.Globalization.NumberFormatInfo()\n      nfi.NegativeSign = &quot;~&quot;\n      nfi.PositiveSign = &quot;!&quot;\n      \n      Console.WriteLine(&quot;{0,-8}  --&gt;  {1,8}&quot;, _\n                        Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), _\n                        Convert.ToString(number, nfi))\n      &#39; The example displays the following output:\n      &#39;       4294967295  --&gt;  4294967295\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToString_System_UInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(UInt64,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (ulong value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation is identical to <a class=\"xref\" href=\"system.uint64#System_UInt64_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.UInt64.ToString(IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class that defines its negative sign as the string &quot;~&quot; and its positive sign as the string &quot;!&quot;. It then calls the ToString method to convert an unsigned long integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The output indicates that this formatting information is not used, because by default the &quot;G&quot; format specifier does not include a positive sign with positive values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToString2#24\">      ulong number = UInt64.MaxValue;\n      System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo();\n      nfi.NegativeSign = &quot;~&quot;;\n      nfi.PositiveSign = &quot;!&quot;;\n      \n      Console.WriteLine(&quot;{0,-12}  --&gt;  {1,12}&quot;,\n                        Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture),\n                        Convert.ToString(number, nfi));\n      // The example displays the following output:\n      //    18446744073709551615  --&gt;  18446744073709551615\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToString2#24\">      Dim number As ULong = UInt64.MaxValue\n      Dim nfi As New System.Globalization.NumberFormatInfo()\n      nfi.NegativeSign = &quot;~&quot;\n      nfi.PositiveSign = &quot;!&quot;\n      \n      Console.WriteLine(&quot;{0,-12}  --&gt;  {1,12}&quot;, _\n                        Convert.ToString(number, System.Globalization.CultureInfo.InvariantCulture), _\n                        Convert.ToString(number, nfi))\n      &#39; The example displays the following output:\n      &#39;    18446744073709551615  --&gt;  18446744073709551615\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts the Boolean values <code>true</code> and <code>false</code> to unsigned 16-bit integers.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, _\n                        Convert.ToUInt16(falseFlag))\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, _\n                        Convert.ToUInt16(trueFlag))\n      &#39; The example displays the following output:\n      &#39;       False converts to 0.\n      &#39;       True converts to 1.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag,\n                        Convert.ToInt16(falseFlag));\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag,\n                        Convert.ToUInt16(trueFlag));\n      // The example displays the following output:\n      //       False converts to 0.\n      //       True converts to 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a byte array to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#2\">      Dim bytes() As Byte = { Byte.MinValue, 14, 122, Byte.MaxValue}\n      Dim result As UShort\n      \n      For Each number As Byte In bytes\n         result = Convert.ToUInt16(number)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Byte value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the Byte value &#39;14&#39; to the UInt16 value 14.\n      &#39;    Converted the Byte value &#39;122&#39; to the UInt16 value 122.\n      &#39;    Converted the Byte value &#39;255&#39; to the UInt16 value 255.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#2\">      byte[] bytes = { Byte.MinValue, 14, 122, Byte.MaxValue};\n      ushort result;\n      \n      foreach (byte byteValue in bytes)\n      {\n         result = Convert.ToUInt16(byteValue);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                           byteValue.GetType().Name, byteValue, \n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //       Converted the Byte value &#39;0&#39; to the UInt16 value 0.\n      //       Converted the Byte value &#39;14&#39; to the UInt16 value 14.\n      //       Converted the Byte value &#39;122&#39; to the UInt16 value 122.\n      //       Converted the Byte value &#39;255&#39; to the UInt16 value 255.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The 16-bit unsigned integer equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a character array to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#3\">      Dim chars() As Char = { &quot;a&quot;c, &quot;z&quot;c, ChrW(7), ChrW(1023), _\n                              ChrW(Short.MaxValue), ChrW(&amp;hFFFE) }\n      Dim result As UShort\n                              \n      For Each ch As Char in chars\n         result = Convert.ToUInt16(ch)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           ch.GetType().Name, ch, _\n                           result.GetType().Name, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;    Converted the Char value &#39;a&#39; to the UInt16 value 97.\n      &#39;    Converted the Char value &#39;z&#39; to the UInt16 value 122.\n      &#39;    Converted the Char value &#39;&#39; to the UInt16 value 7.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt16 value 1023.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt16 value 32767.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt16 value 65534.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#3\">      char[] chars = { &#39;a&#39;, &#39;z&#39;, &#39;\\x0007&#39;, &#39;\\x03FF&#39;,\n                       &#39;\\x7FFF&#39;, &#39;\\xFFFE&#39; };\n      ushort result;\n      \n      foreach (char ch in chars)\n      {\n         try {\n            result = Convert.ToUInt16(ch);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              ch.GetType().Name, ch, \n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;Unable to convert u+{0} to a UInt16.&quot;,\n                              ((int)ch).ToString(&quot;X4&quot;));\n         }\n      }   \n      // The example displays the following output:\n      //    Converted the Char value &#39;a&#39; to the UInt16 value 97.\n      //    Converted the Char value &#39;z&#39; to the UInt16 value 122.\n      //    Converted the Char value &#39;&#39; to the UInt16 value 7.\n      //    Converted the Char value &#39;?&#39; to the UInt16 value 1023.\n      //    Converted the Char value &#39;?&#39; to the UInt16 value 32767.\n      //    Converted the Char value &#39;?&#39; to the UInt16 value 65534.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#4\">      Dim values() As Decimal = { Decimal.MinValue, -1034.23d, -12d, 0d, 147d, _\n                                  9214.16d, Decimal.MaxValue }\n      Dim result As UShort\n      \n      For Each value As Decimal In values\n         Try\n            result = Convert.ToUInt16(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, _\n                              value)\n         End Try   \n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    -79228162514264337593543950335 is outside the range of the UInt16 type.\n      &#39;    -1034.23 is outside the range of the UInt16 type.\n      &#39;    -12 is outside the range of the UInt16 type.\n      &#39;    Converted the Decimal value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the Decimal value &#39;147&#39; to the UInt16 value 147.\n      &#39;    Converted the Decimal value &#39;9214.16&#39; to the UInt16 value 9214.\n      &#39;    79228162514264337593543950335 is outside the range of the UInt16 type.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#4\">      decimal[] numbers = { Decimal.MinValue, -1034.23m, -12m, 0m, 147m,\n                                  9214.16m, Decimal.MaxValue };\n      ushort result;\n      \n      foreach (decimal number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }   \n         catch (OverflowException)\n         {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;,\n                              number);\n         }   \n      }                                  \n      // The example displays the following output:\n      //    -79228162514264337593543950335 is outside the range of the UInt16 type.\n      //    -1034.23 is outside the range of the UInt16 type.\n      //    -12 is outside the range of the UInt16 type.\n      //    Converted the Decimal value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the Decimal value &#39;147&#39; to the UInt16 value 147.\n      //    Converted the Decimal value &#39;9214.16&#39; to the UInt16 value 9214.\n      //    79228162514264337593543950335 is outside the range of the UInt16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#5\">      Dim values() As Double = { Double.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Double.MaxValue }\n      Dim result As UShort\n      \n      For Each value As Double In values\n         Try\n            result = Convert.ToUInt16(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    -1.79769313486232E+308 is outside the range of the UInt16 type.\n      &#39;    -13800000000 is outside the range of the UInt16 type.\n      &#39;    -1023.299 is outside the range of the UInt16 type.\n      &#39;    -12.98 is outside the range of the UInt16 type.\n      &#39;    Converted the Double value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the Double value &#39;9.113E-16&#39; to the UInt16 value 0.\n      &#39;    Converted the Double value &#39;103.919&#39; to the UInt16 value 104.\n      &#39;    Converted the Double value &#39;17834.191&#39; to the UInt16 value 17834.\n      &#39;    1.79769313486232E+308 is outside the range of the UInt16 type.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#5\">      double[] numbers = { Double.MinValue, -1.38e10, -1023.299, -12.98,\n                          0, 9.113e-16, 103.919, 17834.191, Double.MaxValue };\n      ushort result;\n      \n      foreach (double number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }   \n         catch (OverflowException)\n         {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, number);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    -1.79769313486232E+308 is outside the range of the UInt16 type.\n      //    -13800000000 is outside the range of the UInt16 type.\n      //    -1023.299 is outside the range of the UInt16 type.\n      //    -12.98 is outside the range of the UInt16 type.\n      //    Converted the Double value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the Double value &#39;9.113E-16&#39; to the UInt16 value 0.\n      //    Converted the Double value &#39;103.919&#39; to the UInt16 value 104.\n      //    Converted the Double value &#39;17834.191&#39; to the UInt16 value 17834.\n      //    1.79769313486232E+308 is outside the range of the UInt16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#6\">      Dim numbers() As Short = { Int16.MinValue, -132, 0, 121, 16103, Int16.MaxValue }\n      Dim result As UShort\n      \n      For Each number As Short In numbers\n         Try\n            result = Convert.ToUInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int16 value -32768 is outside the range of the UInt16 type.\n      &#39;    The Int16 value -132 is outside the range of the UInt16 type.\n      &#39;    Converted the Int16 value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the Int16 value &#39;121&#39; to the UInt16 value 121.\n      &#39;    Converted the Int16 value &#39;16103&#39; to the UInt16 value 16103.\n      &#39;    Converted the Int16 value &#39;32767&#39; to the UInt16 value 32767.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#6\">      short[] numbers = { Int16.MinValue, -132, 0, 121, 16103, Int16.MaxValue  };\n      ushort result;\n      \n      foreach (short number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int16 value -32768 is outside the range of the UInt16 type.\n      //    The Int16 value -132 is outside the range of the UInt16 type.\n      //    Converted the Int16 value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the Int16 value &#39;121&#39; to the UInt16 value 121.\n      //    Converted the Int16 value &#39;16103&#39; to the UInt16 value 16103.\n      //    Converted the Int16 value &#39;32767&#39; to the UInt16 value 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an integer array to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#7\">      Dim numbers() As Integer = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue }\n      Dim result As UShort\n      \n      For Each number As Integer In numbers\n         Try\n            result = Convert.ToUInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int32 value -2147483648 is outside the range of the UInt16 type.\n      &#39;    The Int32 value -1 is outside the range of the UInt16 type.\n      &#39;    Converted the Int32 value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the Int32 value &#39;121&#39; to the UInt16 value 121.\n      &#39;    Converted the Int32 value &#39;340&#39; to the UInt16 value 340.\n      &#39;    The Int32 value 2147483647 is outside the range of the UInt16 type.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#7\">      int[] numbers = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue };\n      ushort result;\n      \n      foreach (int number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int32 value -2147483648 is outside the range of the UInt16 type.\n      //    The Int32 value -1 is outside the range of the UInt16 type.\n      //    Converted the Int32 value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the Int32 value &#39;121&#39; to the UInt16 value 121.\n      //    Converted the Int32 value &#39;340&#39; to the UInt16 value 340.\n      //    The Int32 value 2147483647 is outside the range of the UInt16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a long integer array to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#8\">      Dim numbers() As Long = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue }\n      Dim result As UShort\n      For Each number As Long In numbers\n         Try\n            result = Convert.ToUInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int64 value -9223372036854775808 is outside the range of the UInt16 type.\n      &#39;    The Int64 value -1 is outside the range of the UInt16 type.\n      &#39;    Converted the Int64 value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the Int64 value &#39;121&#39; to the UInt16 value 121.\n      &#39;    Converted the Int64 value &#39;340&#39; to the UInt16 value 340.\n      &#39;    The Int64 value 9223372036854775807 is outside the range of the UInt16 type.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#8\">      long[] numbers = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue };\n      ushort result;\n      \n      foreach (long number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int64 value -9223372036854775808 is outside the range of the UInt16 type.\n      //    The Int64 value -1 is outside the range of the UInt16 type.\n      //    Converted the Int64 value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the Int64 value &#39;121&#39; to the UInt16 value 121.\n      //    Converted the Int64 value &#39;340&#39; to the UInt16 value 340.\n      //    The Int64 value 9223372036854775807 is outside the range of the UInt16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the  <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint16#System_UInt16_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.uint16#System_UInt16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt16_\" data-linktype=\"relative-path\">ToUInt16</a> method of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#9\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, #5/12/2009#, _\n                                 &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2}\n      Dim result As UShort\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToUInt16(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to an Int16 exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n   &#39;    Converted the Boolean value &#39;True&#39; to the UInt16 value 1.\n   &#39;    The Int32 value -12 is outside the range of the UInt16 type.\n   &#39;    Converted the Int32 value &#39;163&#39; to the UInt16 value 163.\n   &#39;    Converted the Int32 value &#39;935&#39; to the UInt16 value 935.\n   &#39;    Converted the Char value &#39;x&#39; to the UInt16 value 120.\n   &#39;    No conversion to an Int16 exists for the DateTime value 5/12/2009 12:00:00 AM.\n   &#39;    Converted the String value &#39;104&#39; to the UInt16 value 104.\n   &#39;    The String value 103.0 is not in a recognizable format.\n   &#39;    The String value -1 is outside the range of the UInt16 type.\n   &#39;    The String value 1.00e2 is not in a recognizable format.\n   &#39;    The String value One is not in a recognizable format.\n   &#39;    Converted the Double value &#39;100&#39; to the UInt16 value 100.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#9\">      object[] values= { true, -12, 163, 935, &#39;x&#39;, new DateTime(2009, 5, 12),\n                         &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2};\n      ushort result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToUInt16(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              value.GetType().Name, value, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No conversion to a UInt16 exists for the {0} value {1}.&quot;,\n                              value.GetType().Name, value);\n         }\n      }                           \n      // The example displays the following output:\n      //    Converted the Boolean value &#39;True&#39; to the UInt16 value 1.\n      //    The Int32 value -12 is outside the range of the UInt16 type.\n      //    Converted the Int32 value &#39;163&#39; to the UInt16 value 163.\n      //    Converted the Int32 value &#39;935&#39; to the UInt16 value 935.\n      //    Converted the Char value &#39;x&#39; to the UInt16 value 120.\n      //    No conversion to a UInt16 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      //    Converted the String value &#39;104&#39; to the UInt16 value 104.\n      //    The String value 103.0 is not in a recognizable format.\n      //    The String value -1 is outside the range of the UInt16 type.\n      //    The String value 1.00e2 is not in a recognizable format.\n      //    The String value One is not in a recognizable format.\n      //    Converted the Double value &#39;100&#39; to the UInt16 value 100.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a signed byte array to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#10\">      Dim numbers() As SByte = { SByte.MinValue, -1, 0, 10, SByte.MaxValue }\n      Dim result As UShort\n      \n      For Each number As SByte In numbers\n         Try\n            result = Convert.ToUInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    -128 is outside the range of the UInt16 type.\n      &#39;    -1 is outside the range of the UInt16 type.\n      &#39;    Converted the SByte value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the SByte value &#39;10&#39; to the UInt16 value 10.\n      &#39;    Converted the SByte value &#39;127&#39; to the UInt16 value 127.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#10\">      sbyte[] numbers = { SByte.MinValue, -1, 0, 10, SByte.MaxValue };\n      ushort result;\n      \n      foreach (sbyte number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, number);\n         }\n      }\n      // The example displays the following output:\n      //    -128 is outside the range of the UInt16 type.\n      //    -1 is outside the range of the UInt16 type.\n      //    Converted the SByte value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the SByte value &#39;10&#39; to the UInt16 value 10.\n      //    Converted the SByte value &#39;127&#39; to the UInt16 value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 16-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> values to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#11\">      Dim values() As Single = { Single.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Single.MaxValue }\n      Dim result As UShort\n      \n      For Each value As Single In values\n         Try\n            result = Convert.ToUInt16(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    -3.402823E+38 is outside the range of the UInt16 type.\n      &#39;    -1.38E+10 is outside the range of the UInt16 type.\n      &#39;    -1023.299 is outside the range of the UInt16 type.\n      &#39;    -12.98 is outside the range of the UInt16 type.\n      &#39;    Converted the Single value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the Single value &#39;9.113E-16&#39; to the UInt16 value 0.\n      &#39;    Converted the Single value &#39;103.919&#39; to the UInt16 value 104.\n      &#39;    Converted the Single value &#39;17834.19&#39; to the UInt16 value 17834.\n      &#39;    3.402823E+38 is outside the range of the UInt16 type.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#11\">      float[] numbers = { Single.MinValue, -1.38e10f, -1023.299f, -12.98f,\n                         0f, 9.113e-16f, 103.919f, 17834.191f, Single.MaxValue };\n      ushort result;\n      \n      foreach (float number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, number);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    -3.402823E+38 is outside the range of the UInt16 type.\n      //    -1.38E+10 is outside the range of the UInt16 type.\n      //    -1023.299 is outside the range of the UInt16 type.\n      //    -12.98 is outside the range of the UInt16 type.\n      //    Converted the Single value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the Single value &#39;9.113E-16&#39; to the UInt16 value 0.\n      //    Converted the Single value &#39;103.919&#39; to the UInt16 value 104.\n      //    Converted the Single value &#39;17834.19&#39; to the UInt16 value 17834.\n      //    3.402823E+38 is outside the range of the UInt16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToUInt16 method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.uint16#System_UInt16_Parse_System_String_\" data-linktype=\"relative-path\">System.UInt16.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.uint16#System_UInt16_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#12\">      Dim values() As String = { &quot;1603&quot;, &quot;1,603&quot;, &quot;one&quot;, &quot;1.6e03&quot;, &quot;1.2e-02&quot;, _\n                                 &quot;-1326&quot;, &quot;1074122&quot; }\n      Dim result As UShort\n      \n      For Each value As String In values\n         Try\n            result = Convert.ToUInt16(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, value)\n         End Try   \n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the String value &#39;1603&#39; to the UInt16 value 1603.\n      &#39;    The String value 1,603 is not in a recognizable format.\n      &#39;    The String value one is not in a recognizable format.\n      &#39;    The String value 1.6e03 is not in a recognizable format.\n      &#39;    The String value 1.2e-02 is not in a recognizable format.\n      &#39;    -1326 is outside the range of the UInt16 type.\n      &#39;    1074122 is outside the range of the UInt16 type.      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#12\">      string[] values = { &quot;1603&quot;, &quot;1,603&quot;, &quot;one&quot;, &quot;1.6e03&quot;, &quot;1.2e-02&quot;, \n                          &quot;-1326&quot;, &quot;1074122&quot; };\n      ushort result;\n      \n      foreach (string value in values)\n      {\n         try {\n            result = Convert.ToUInt16(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, value);\n         }   \n      }\n      // The example displays the following output:\n      //    Converted the String value &#39;1603&#39; to the UInt16 value 1603.\n      //    The String value 1,603 is not in a recognizable format.\n      //    The String value one is not in a recognizable format.\n      //    The String value 1.6e03 is not in a recognizable format.\n      //    The String value 1.2e-02 is not in a recognizable format.\n      //    -1326 is outside the range of the UInt16 type.\n      //    1074122 is outside the range of the UInt16 type.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#13\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 340, UInt32.MaxValue }\n      Dim result As UShort\n      For Each number As UInteger In numbers\n         Try\n            result = Convert.ToUInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt32 value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the UInt32 value &#39;121&#39; to the UInt16 value 121.\n      &#39;    Converted the UInt32 value &#39;340&#39; to the UInt16 value 340.\n      &#39;    The UInt32 value 4294967295 is outside the range of the UInt16 type.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#13\">      uint[] numbers = { UInt32.MinValue, 121, 340, UInt32.MaxValue };\n      ushort result;\n      \n      foreach (uint number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt32 value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the UInt32 value &#39;121&#39; to the UInt16 value 121.\n      //    Converted the UInt32 value &#39;340&#39; to the UInt16 value 340.\n      //    The UInt32 value 4294967295 is outside the range of the UInt16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#14\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 340, UInt64.MaxValue }\n      Dim result As UShort\n      For Each number As ULong In numbers\n         Try\n            result = Convert.ToUInt16(number)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value &#39;0&#39; to the UInt16 value 0.\n      &#39;    Converted the UInt64 value &#39;121&#39; to the UInt16 value 121.\n      &#39;    Converted the UInt64 value &#39;340&#39; to the UInt16 value 340.\n      &#39;    The UInt64 value 18446744073709551615 is outside the range of the UInt16 type.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#14\">      ulong[] numbers = { UInt64.MinValue, 121, 340, UInt64.MaxValue };\n      ushort result;\n      \n      foreach (ulong number in numbers)\n      {\n         try {\n            result = Convert.ToUInt16(number);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, \n                              number.GetType().Name, number, \n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt16 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt64 value &#39;0&#39; to the UInt16 value 0.\n      //    Converted the UInt64 value &#39;121&#39; to the UInt16 value 121.\n      //    Converted the UInt64 value &#39;340&#39; to the UInt16 value 340.\n      //    The UInt64 value 18446744073709551615 is outside the range of the UInt16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the  <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint16#System_UInt16_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.uint16#System_UInt16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt16_\" data-linktype=\"relative-path\">ToUInt16</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>HexString</code> class that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values. The class includes a <code>Sign</code> property that indicates the sign of its hexadecimal value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#16\">Imports System.Globalization\nImports System.Text.RegularExpressions\n\nPublic Enum SignBit As Integer\n   Positive = 1\n   Zero = 0\n   Negative = -1\nEnd Enum\n\nPublic Structure HexString : Implements IConvertible\n   Private signBit As SignBit\n   Private hexString As String\n   \n   Public Property Sign As SignBit\n      Set\n         signBit = value\n      End Set\n      Get\n         Return signBit\n      End Get\n   End Property\n   \n   Public Property Value As String\n      Set\n         If value.Trim().Length &gt; 4 Then\n            Throw New ArgumentException(&quot;The string representation of a 16-bit integer cannot have more than four characters.&quot;)\n         Else If Not Regex.IsMatch(value, &quot;([0-9,A-F]){1,4}&quot;, RegexOptions.IgnoreCase) Then\n            Throw New ArgumentException(&quot;The hexadecimal representation of a 16-bit integer contains invalid characters.&quot;)             \n         Else\n            hexString = value\n         End If   \n      End Set\n      Get\n         Return hexString\n      End Get\n   End Property\n   \n   &#39; IConvertible implementations.\n   Public Function GetTypeCode() As TypeCode _\n                   Implements IConvertible.GetTypeCode\n      Return TypeCode.Object\n   End Function\n   \n   Public Function ToBoolean(provider As IFormatProvider) As Boolean _\n                   Implements IConvertible.ToBoolean\n      Return signBit &lt;&gt; SignBit.Zero             \n   End Function \n   \n   Public Function ToByte(provider As IFormatProvider) As Byte _\n                   Implements IConvertible.ToByte\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToInt16(hexString, 16))) \n      Else\n         Try\n            Return Convert.ToByte(Int16.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, Convert.ToUInt16(hexString, 16)), e)\n         End Try   \n      End If       \n   End Function\n   \n   Public Function ToChar(provider As IFormatProvider) As Char _\n                   Implements IConvertible.ToChar\n      If signBit = signBit.Negative Then \n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToInt16(hexString, 16)))\n      End If\n      \n      Dim codePoint As UInt16 = UInt16.Parse(Me.hexString, NumberStyles.HexNumber)\n      Return Convert.ToChar(codePoint)\n   End Function \n   \n   Public Function ToDateTime(provider As IFormatProvider) As Date _\n                   Implements IConvertible.ToDateTime\n      Throw New InvalidCastException(&quot;Hexadecimal to DateTime conversion is not supported.&quot;)\n   End Function\n   \n   Public Function ToDecimal(provider As IFormatProvider) As Decimal _\n                   Implements IConvertible.ToDecimal\n      If signBit = signBit.Negative Then\n         Dim hexValue As Short = Int16.Parse(hexString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(hexValue)\n      Else\n         Dim hexValue As UShort = UInt16.Parse(hexString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(hexValue)\n      End If\n   End Function\n   \n   Public Function ToDouble(provider As IFormatProvider) As Double _\n                   Implements IConvertible.ToDouble\n      If signBit = signBit.Negative Then\n         Return Convert.ToDouble(Int16.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToDouble(UInt16.Parse(hexString, NumberStyles.HexNumber))\n      End If   \n   End Function   \n   \n   Public Function ToInt16(provider As IFormatProvider) As Int16 _\n                   Implements IConvertible.ToInt16\n      If signBit = SignBit.Negative Then\n         Return Int16.Parse(hexString, NumberStyles.HexNumber)\n      Else\n         Try\n            Return Convert.ToInt16(UInt16.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToUInt16(hexString, 16)), e)\n         End Try\n      End If   \n   End Function\n   \n   Public Function ToInt32(provider As IFormatProvider) As Int32 _\n                   Implements IConvertible.ToInt32\n      If signBit = SignBit.Negative Then\n         Return Convert.ToInt32(Int16.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToInt32(UInt16.Parse(hexString, NumberStyles.HexNumber))\n      End If   \n   End Function\n   \n   Public Function ToInt64(provider As IFormatProvider) As Int64 _\n                   Implements IConvertible.ToInt64\n      If signBit = signBit.Negative Then\n         Return Convert.ToInt64(Int16.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Int64.Parse(hexString, NumberStyles.HexNumber)\n      End If   \n   End Function\n   \n   Public Function ToSByte(provider As IFormatProvider) As SByte _\n                   Implements IConvertible.ToSByte\n      If signBit = signBit.Negative Then\n         Try\n            Return Convert.ToSByte(Int16.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, _\n                                                      Int16.Parse(hexString, NumberStyles.HexNumber), e))\n         End Try\n      Else\n         Try\n            Return Convert.ToSByte(UInt16.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, _\n                                                    UInt16.Parse(hexString, NumberStyles.HexNumber)), e)\n         End Try   \n      End If\n   End Function\n\n   Public Function ToSingle(provider As IFormatProvider) As Single _\n                   Implements IConvertible.ToSingle\n      If signBit = signBit.Negative Then\n         Return Convert.ToSingle(Int16.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToSingle(UInt16.Parse(hexString, NumberStyles.HexNumber))\n      End If   \n   End Function\n\n   Public Overloads Function ToString(provider As IFormatProvider) As String _\n                   Implements IConvertible.ToString\n      Return &quot;0x&quot; &amp; Me.hexString\n   End Function\n   \n   Public Function ToType(conversionType As Type, provider As IFormatProvider) As Object _\n                   Implements IConvertible.ToType\n      Select Case Type.GetTypeCode(conversionType)\n         Case TypeCode.Boolean \n            Return Me.ToBoolean(Nothing)\n         Case TypeCode.Byte\n            Return Me.ToByte(Nothing)\n         Case TypeCode.Char\n            Return Me.ToChar(Nothing)\n         Case TypeCode.DateTime\n            Return Me.ToDateTime(Nothing)\n         Case TypeCode.Decimal\n            Return Me.ToDecimal(Nothing)\n         Case TypeCode.Double\n            Return Me.ToDouble(Nothing)\n         Case TypeCode.Int16\n            Return Me.ToInt16(Nothing)\n         Case TypeCode.Int32\n            Return Me.ToInt32(Nothing)\n         Case TypeCode.Int64\n            Return Me.ToInt64(Nothing)\n         Case TypeCode.Object\n            If GetType(HexString).Equals(conversionType) Then\n               Return Me\n            Else\n               Throw New InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name))\n            End If \n         Case TypeCode.SByte\n            Return Me.ToSByte(Nothing)\n         Case TypeCode.Single\n            Return Me.ToSingle(Nothing)\n         Case TypeCode.String\n            Return Me.ToString(Nothing)\n         Case TypeCode.UInt16\n            Return Me.ToUInt16(Nothing)\n         Case TypeCode.UInt32\n            Return Me.ToUInt32(Nothing)\n         Case TypeCode.UInt64\n            Return Me.ToUInt64(Nothing)   \n         Case Else\n            Throw New InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name))   \n      End Select\n   End Function\n   \n   Public Function ToUInt16(provider As IFormatProvider) As UInt16 _\n                   Implements IConvertible.ToUInt16\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, _\n                                                   Int16.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt16(hexString, 16)\n      End If   \n   End Function\n\n   Public Function ToUInt32(provider As IFormatProvider) As UInt32 _\n                   Implements IConvertible.ToUInt32\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                                                   Int16.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt32(hexString, 16)\n      End If   \n   End Function\n   \n   Public Function ToUInt64(provider As IFormatProvider) As UInt64 _\n                   Implements IConvertible.ToUInt64\n      If signBit = signBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, _\n                                                   Int16.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt64(hexString, 16)\n      End If   \n   End Function\n   \nEnd Structure\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#16\">using System;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic enum SignBit { Negative=-1, Zero=0, Positive=1 };\n\npublic struct HexString : IConvertible\n{\n   private SignBit signBit;\n   private string hexString;\n   \n   public SignBit Sign\n   { \n      set { signBit = value; }\n      get { return signBit; }\n   }\n\n   public string Value\n   { \n      set {\n         if (value.Trim().Length &gt; 4)\n            throw new ArgumentException(&quot;The string representation of a 160bit integer cannot have more than four characters.&quot;);\n         else if (! Regex.IsMatch(value, &quot;([0-9,A-F]){1,4}&quot;, RegexOptions.IgnoreCase))\n            throw new ArgumentException(&quot;The hexadecimal representation of a 16-bit integer contains invalid characters.&quot;);\n         else\n            hexString = value;\n      }\n      get { return hexString; }\n   }\n   \n   // IConvertible implementations.\n   public TypeCode GetTypeCode() {\n      return TypeCode.Object;\n   }\n   \n   public bool ToBoolean(IFormatProvider provider)\n   {\n      return signBit != SignBit.Zero;\n   } \n   \n   public byte ToByte(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToInt16(hexString, 16)));\n      else\n         try {\n            return Convert.ToByte(UInt16.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, Convert.ToUInt16(hexString, 16)), e);\n         }\n   }\n   \n   public char ToChar(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative) { \n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToInt16(hexString, 16)));\n      }\n      \n      UInt16 codePoint = UInt16.Parse(this.hexString, NumberStyles.HexNumber);\n      return Convert.ToChar(codePoint);\n   } \n   \n   public DateTime ToDateTime(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Hexadecimal to DateTime conversion is not supported.&quot;);\n   }\n   \n   public decimal ToDecimal(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative) \n      {\n         short hexValue = Int16.Parse(hexString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(hexValue);\n      }\n      else \n      {\n         ushort hexValue = UInt16.Parse(hexString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(hexValue);\n      }\n   }\n   \n   public double ToDouble(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToDouble(Int16.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Convert.ToDouble(UInt16.Parse(hexString, NumberStyles.HexNumber));\n   }   \n   \n   public short ToInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Int16.Parse(hexString, NumberStyles.HexNumber);\n      else\n         try {\n            return Convert.ToInt16(UInt16.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, \n                                                      Convert.ToUInt16(hexString, 16)), e);\n         }\n   }\n   \n   public int ToInt32(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt32(Int16.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Convert.ToInt32(UInt16.Parse(hexString, NumberStyles.HexNumber));\n   }\n   \n   public long ToInt64(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt64(Int16.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Int64.Parse(hexString, NumberStyles.HexNumber);\n   }\n   \n   public sbyte ToSByte(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         try {\n            return Convert.ToSByte(Int16.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, \n                                                      Int16.Parse(hexString, NumberStyles.HexNumber), e));\n         }\n      else\n         try {\n            return Convert.ToSByte(UInt16.Parse(hexString, NumberStyles.HexNumber));\n         }   \n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, \n                                                   UInt16.Parse(hexString, NumberStyles.HexNumber)), e);\n         } \n   }\n\n   public float ToSingle(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToSingle(Int16.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Convert.ToSingle(UInt16.Parse(hexString, NumberStyles.HexNumber));\n   }\n\n   public string ToString(IFormatProvider provider)\n   {\n      return &quot;0x&quot; + this.hexString;\n   }\n   \n   public object ToType(Type conversionType, IFormatProvider provider)\n   {\n      switch (Type.GetTypeCode(conversionType))\n      {\n         case TypeCode.Boolean: \n            return this.ToBoolean(null);\n         case TypeCode.Byte:\n            return this.ToByte(null);\n         case TypeCode.Char:\n            return this.ToChar(null);\n         case TypeCode.DateTime:\n            return this.ToDateTime(null);\n         case TypeCode.Decimal:\n            return this.ToDecimal(null);\n         case TypeCode.Double:\n            return this.ToDouble(null);\n         case TypeCode.Int16:\n            return this.ToInt16(null);\n         case TypeCode.Int32:\n            return this.ToInt32(null);\n         case TypeCode.Int64:\n            return this.ToInt64(null);\n         case TypeCode.Object:\n            if (typeof(HexString).Equals(conversionType))\n               return this;\n            else\n               throw new InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name));\n         case TypeCode.SByte:\n            return this.ToSByte(null);\n         case TypeCode.Single:\n            return this.ToSingle(null);\n         case TypeCode.String:\n            return this.ToString(null);\n         case TypeCode.UInt16:\n            return this.ToUInt16(null);\n         case TypeCode.UInt32:\n            return this.ToUInt32(null);\n         case TypeCode.UInt64:\n            return this.ToUInt64(null);   \n         default:\n            throw new InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name));   \n      }\n   }\n   \n   public UInt16 ToUInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, \n                                                   Int16.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         return UInt16.Parse(hexString, NumberStyles.HexNumber);\n   }\n\n   public UInt32 ToUInt32(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, \n                                                   Int16.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt32(hexString, 16);\n   }\n   \n   public UInt64 ToUInt64(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, \n                                                   Int64.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt64(hexString, 16);\n   }\n}\n</code></pre><p> The following example shows that a call to the ToUInt16 method that passes a <code>HexString</code> object as a parameter, in turn, calls the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt16_\" data-linktype=\"relative-path\">ToUInt16</a> implementation of the <code>HexString</code> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#17\">Module Example\n   Public Sub Main()\n      Dim positiveValue As UInt16 = 32000\n      Dim negativeValue As Int16 = -1\n      \n      \n      Dim positiveString As New HexString()\n      positiveString.Sign = CType(Math.Sign(positiveValue), SignBit)\n      positiveString.Value = positiveValue.ToString(&quot;X4&quot;)\n      \n      Dim negativeString As New HexString()\n      negativeString.Sign = CType(Math.Sign(negativeValue), SignBit)\n      negativeString.Value = negativeValue.ToString(&quot;X4&quot;)\n      \n      Try\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, positiveString.Value, Convert.ToUInt16(positiveString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, _\n                           Int16.Parse(positiveString.Value, NumberStyles.HexNumber))\n      End Try\n\n      Try\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, negativeString.Value, Convert.ToUInt16(negativeString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, _\n                           Int16.Parse(negativeString.Value, NumberStyles.HexNumber))\n      End Try   \n   End Sub\nEnd Module\n&#39; The example dosplays the following output:\n&#39;       0x7D00 converts to 32000.\n&#39;       -1 is outside the range of the UInt16 type.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#17\">public class Example\n{\n   public static void Main()\n   {\n      ushort positiveValue = 32000;\n      short negativeValue = -1;\n      \n      HexString positiveString = new HexString();\n      positiveString.Sign = (SignBit) Math.Sign(positiveValue);\n      positiveString.Value = positiveValue.ToString(&quot;X2&quot;);\n      \n      HexString negativeString = new HexString();\n      negativeString.Sign = (SignBit) Math.Sign(negativeValue);\n      negativeString.Value = negativeValue.ToString(&quot;X2&quot;);\n      \n      try {\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, positiveString.Value, Convert.ToUInt16(positiveString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, \n                           Int16.Parse(negativeString.Value, NumberStyles.HexNumber));\n      }\n\n      try {\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, negativeString.Value, Convert.ToUInt16(negativeString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is outside the range of the UInt16 type.&quot;, \n                           Int16.Parse(negativeString.Value, NumberStyles.HexNumber));\n      }   \n   }\n}\n// The example displays the following output:\n//       0x7D00 converts to 32000.\n//       -1 is outside the range of the UInt16 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking <a class=\"xref\" href=\"system.uint16#System_UInt16_Parse_\" data-linktype=\"relative-path\">Parse</a> on <code>value</code>.  </p>\n<p> <code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.uint16#System_UInt16_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that recognizes the string &quot;pos&quot; as the positive sign and the string &quot;neg&quot; as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> provider for the invariant culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#18\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Create a NumberFormatInfo object and set several of its\n      &#39; properties that apply to numbers.\n      Dim provider As New NumberFormatInfo()\n      provider.PositiveSign = &quot;pos &quot;\n      provider.NegativeSign = &quot;neg &quot;\n\n      &#39; Define an array of strings to convert to UInt16 values.\n      Dim values() As String = { &quot;34567&quot;, &quot;+34567&quot;, &quot;pos 34567&quot;, _\n                                 &quot;34567.&quot;, &quot;34567.&quot;, &quot;65535&quot;, _\n                                 &quot;65535&quot;, &quot;65535&quot; }         \n\n      For Each value As String In values\n         Console.Write(&quot;{0,-12:}  --&gt;  &quot;, value)\n         Try\n            Console.WriteLine(&quot;{0,17}&quot;, Convert.ToUInt16(value, provider))\n         Catch e As FormatException       \n            Console.WriteLine(&quot;{0,17}&quot;, e.GetType().Name)\n         End Try     \n      Next\n    End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       34567         --&gt;              34567\n&#39;       +34567        --&gt;    FormatException\n&#39;       pos 34567     --&gt;              34567\n&#39;       34567.        --&gt;    FormatException\n&#39;       34567.        --&gt;    FormatException\n&#39;       65535         --&gt;              65535\n&#39;       65535         --&gt;              65535\n&#39;       65535         --&gt;              65535\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#18\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a NumberFormatInfo object and set several of its\n      // properties that apply to numbers.\n      NumberFormatInfo provider = new NumberFormatInfo();\n      provider.PositiveSign = &quot;pos &quot;;\n      provider.NegativeSign = &quot;neg &quot;;\n\n      // Define an array of strings to convert to UInt16 values.\n      string[] values= { &quot;34567&quot;, &quot;+34567&quot;, &quot;pos 34567&quot;, &quot;34567.&quot;, \n                         &quot;34567.&quot;, &quot;65535&quot;, &quot;65535&quot;, &quot;65535&quot; };         \n\n      foreach (string value in values)\n      {\n         Console.Write(&quot;{0,-12:}  --&gt;  &quot;, value);\n         try {\n            Console.WriteLine(&quot;{0,17}&quot;, Convert.ToUInt16(value, provider));\n         }\n         catch (FormatException e) {       \n            Console.WriteLine(&quot;{0,17}&quot;, e.GetType().Name);\n         }     \n      }\n   }\n}\n// The example displays the following output:\n//       34567         --&gt;              34567\n//       +34567        --&gt;    FormatException\n//       pos 34567     --&gt;              34567\n//       34567.        --&gt;    FormatException\n//       34567.        --&gt;    FormatException\n//       65535         --&gt;              65535\n//       65535         --&gt;              65535\n//       65535         --&gt;              65535\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt16_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (string value, int fromBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fromBase</code> is not 2, 8, 10, or 16.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  </p>\n<p> -or-  </p>\n<p> <code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>fromBase</code> is 16, you can prefix the number specified by the <code>value</code> parameter with &quot;0x&quot; or &quot;0X&quot;.  </p>\n<p> Because the <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> data type supports unsigned values only, the ToUInt16 method assumes that <code>value</code> is expressed using unsigned binary representation. In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> data type is converted to a <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> value without the method throwing an exception. The following example converts <a class=\"xref\" href=\"system.int16#System_Int16_MinValue\" data-linktype=\"relative-path\">System.Int16.MinValue</a> to its hexadecimal string representation, and then calls the ToUInt16 method. Instead of throwing an exception, the method displays the message, &quot;0x8000 converts to 32768.&quot;  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#11\">      &#39; Create a hexadecimal value out of range of the UInt16 type.\n      Dim value As String = Convert.ToString(Short.MinValue, 16)\n      &#39; Convert it back to a number.\n      Try\n         Dim number As UInt16 = Convert.ToUInt16(value, 16)\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned short integer.&quot;, _\n                           value)\n      End Try   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#11\">      // Create a hexadecimal value out of range of the UInt16 type.\n      string value = Convert.ToString(Int16.MinValue, 16);\n      // Convert it back to a number.\n      try\n      {\n         UInt16 number = Convert.ToUInt16(value, 16);\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number);\n      }   \n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned short integer.&quot;, \n                           value);\n      }   \n</code></pre><p> When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two&#39;s complement representation when converting a hexadecimal string to a <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#12\">      &#39; Create a negative hexadecimal value out of range of the UInt16 type.\n      Dim sourceNumber As Short = Short.MinValue\n      Dim isSigned As Boolean = Math.Sign(sourceNumber.MinValue) = -1\n      Dim value As String = Convert.ToString(sourceNumber, 16)\n      Dim targetNumber As UInt16\n      Try\n         targetNumber = Convert.ToUInt16(value, 16)\n         If isSigned And ((targetNumber And &amp;H8000) &lt;&gt; 0) Then\n            Throw New OverflowException()\n         Else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber)\n         End If    \n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned short integer.&quot;, _\n                           value)\n      End Try \n      &#39; Displays the following to the console:\n      &#39;    Unable to convert &#39;0x8000&#39; to an unsigned short integer.     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#12\">      // Create a negative hexadecimal value out of range of the UInt16 type.\n      short sourceNumber = Int16.MinValue;\n      bool isSigned = Math.Sign((short)sourceNumber.GetType().GetField(&quot;MinValue&quot;).GetValue(null)) == -1;\n      string value = Convert.ToString(sourceNumber, 16);\n      UInt16 targetNumber;\n      try\n      {\n         targetNumber = Convert.ToUInt16(value, 16);\n         if (isSigned &amp;&amp; ((targetNumber &amp; 0x8000) != 0))\n            throw new OverflowException();\n         else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned short integer.&quot;, value);\n      } \n      // Displays the following to the console:\n      //    Unable to convert &#39;0x8000&#39; to an unsigned short integer.     \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt16#15\">Module Example\n   Public Sub Main()\n      Dim hexStrings() As String = { &quot;8000&quot;, &quot;0FFF&quot;, &quot;f000&quot;, &quot;00A30&quot;, &quot;D&quot;, _\n                                     &quot;-13&quot;, &quot;9AC61&quot;, &quot;GAD&quot; }\n      For Each hexString As String In hexStrings\n         Try\n            Dim number As UShort = Convert.ToUInt16(hexString, 16)\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1:N0}.&quot;, hexString, number)\n         Catch e As FormatException\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the correct format for a hexadecimal number.&quot;, _\n                              hexString)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of an Int16.&quot;, hexString)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;&#39;{0}&#39; is invalid in base 16.&quot;, hexString)\n         End Try\n      Next                                            \n   End Sub\nEnd Module\n&#39;    &#39; The example displays the following output:\n&#39;    Converted &#39;8000&#39; to 32,768.\n&#39;    Converted &#39;0FFF&#39; to 4,095.\n&#39;    Converted &#39;f000&#39; to 61,440.\n&#39;    Converted &#39;00A30&#39; to 2,608.\n&#39;    Converted &#39;D&#39; to 13.\n&#39;    &#39;-13&#39; is invalid in base 16.\n&#39;    &#39;9AC61&#39; is outside the range of an Int16.\n&#39;    &#39;GAD&#39; is not in the correct format for a hexadecimal number.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt16#15\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] hexStrings = { &quot;8000&quot;, &quot;0FFF&quot;, &quot;f000&quot;, &quot;00A30&quot;, &quot;D&quot;, &quot;-13&quot;, \n                              &quot;9AC61&quot;, &quot;GAD&quot; };\n      foreach (string hexString in hexStrings)\n      {\n         try {\n            ushort number = Convert.ToUInt16(hexString, 16);\n            Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1:N0}.&quot;, hexString, number);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is not in the correct format for a hexadecimal number.&quot;, \n                              hexString);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of an Int16.&quot;, hexString);\n         }\n         catch (ArgumentException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is invalid in base 16.&quot;, hexString);\n         }\n      }                                            \n   }\n}\n// The example displays the following output:\n//    Converted &#39;8000&#39; to 32,768.\n//    Converted &#39;0FFF&#39; to 4,095.\n//    Converted &#39;f000&#39; to 61,440.\n//    Converted &#39;00A30&#39; to 2,608.\n//    Converted &#39;D&#39; to 13.\n//    &#39;-13&#39; is invalid in base 16.\n//    &#39;9AC61&#39; is outside the range of an Int16.\n//    &#39;GAD&#39; is not in the correct format for a hexadecimal number.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts the Boolean values <code>true</code> and <code>false</code> to unsigned integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag,\n                        Convert.ToUInt32(falseFlag));\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag,\n                        Convert.ToUInt32(trueFlag));\n      // The example displays the following output:\n      //       False converts to 0.\n      //       True converts to 1.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, _\n                        Convert.ToUInt32(falseFlag))\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, _\n                        Convert.ToUInt32(trueFlag))\n      &#39; The example displays the following output:\n      &#39;       False converts to 0.\n      &#39;       True converts to 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a byte array to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#2\">      byte[] bytes = { Byte.MinValue, 14, 122, Byte.MaxValue};\n      uint result;\n      \n      foreach (byte byteValue in bytes)\n      {\n         result = Convert.ToUInt32(byteValue);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           byteValue.GetType().Name, byteValue,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the Byte value 0 to the UInt32 value 0.\n      //    Converted the Byte value 14 to the UInt32 value 14.\n      //    Converted the Byte value 122 to the UInt32 value 122.\n      //    Converted the Byte value 255 to the UInt32 value 255.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#2\">      Dim bytes() As Byte = { Byte.MinValue, 14, 122, Byte.MaxValue}\n      Dim result As UInteger\n      \n      For Each byteValue As Byte In bytes\n         result = Convert.ToUInt32(byteValue)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           byteValue.GetType().Name, byteValue, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Byte value 0 to the UInt32 value 0.\n      &#39;    Converted the Byte value 14 to the UInt32 value 14.\n      &#39;    Converted the Byte value 122 to the UInt32 value 122.\n      &#39;    Converted the Byte value 255 to the UInt32 value 255.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a character array to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#3\">      char[] chars = { &#39;a&#39;, &#39;z&#39;, &#39;\\u0007&#39;, &#39;\\u03FF&#39;,\n                       &#39;\\u7FFF&#39;, &#39;\\uFFFE&#39; };\n      uint result;\n                              \n      foreach (char ch in chars)\n      {\n         result = Convert.ToUInt32(ch);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                           ch.GetType().Name, ch,\n                           result.GetType().Name, result);\n      }   \n      // The example displays the following output:\n      //    Converted the Char value &#39;a&#39; to the UInt32 value 97.\n      //    Converted the Char value &#39;z&#39; to the UInt32 value 122.\n      //    Converted the Char value &#39;&#39; to the UInt32 value 7.\n      //    Converted the Char value &#39;?&#39; to the UInt32 value 1023.\n      //    Converted the Char value &#39;?&#39; to the UInt32 value 32767.\n      //    Converted the Char value &#39;?&#39; to the UInt32 value 65534.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#3\">      Dim chars() As Char = { &quot;a&quot;c, &quot;z&quot;c, ChrW(7), ChrW(1023), _\n                              ChrW(Short.MaxValue), ChrW(&amp;hFFFE) }\n      Dim result As UInteger\n                              \n      For Each ch As Char in chars\n         result = Convert.ToUInt32(ch)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           ch.GetType().Name, ch, _\n                           result.GetType().Name, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;    Converted the Char value &#39;a&#39; to the UInt32 value 97.\n      &#39;    Converted the Char value &#39;z&#39; to the UInt32 value 122.\n      &#39;    Converted the Char value &#39;&#39; to the UInt32 value 7.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt32 value 1023.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt32 value 32767.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt32 value 65534.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#4\">      decimal[] values= { Decimal.MinValue, -1034.23m, -12m, 0m, 147m,\n                          199.55m, 9214.16m, Decimal.MaxValue };\n      uint result;\n      \n      foreach (decimal value in values)\n      {\n         try {\n            result = Convert.ToUInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;,\n                              value.GetType().Name, value);\n         }   \n      }                                  \n      // The example displays the following output:\n      //    The Decimal value -79228162514264337593543950335 is outside the range of the UInt32 type.\n      //    The Decimal value -1034.23 is outside the range of the UInt32 type.\n      //    The Decimal value -12 is outside the range of the UInt32 type.\n      //    Converted the Decimal value &#39;0&#39; to the UInt32 value 0.\n      //    Converted the Decimal value &#39;147&#39; to the UInt32 value 147.\n      //    Converted the Decimal value &#39;199.55&#39; to the UInt32 value 200.\n      //    Converted the Decimal value &#39;9214.16&#39; to the UInt32 value 9214.\n      //    The Decimal value 79228162514264337593543950335 is outside the range of the UInt32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#4\">      Dim values() As Decimal = { Decimal.MinValue, -1034.23d, -12d, 0d, 147d, _\n                                  199.55d, 9214.16d, Decimal.MaxValue }\n      Dim result As UInteger\n      \n      For Each value As Decimal In values\n         Try\n            result = Convert.ToUInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                              value)\n         End Try   \n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    -79228162514264337593543950335 is outside the range of the UInt32 type.\n      &#39;    -1034.23 is outside the range of the UInt32 type.\n      &#39;    -12 is outside the range of the UInt32 type.\n      &#39;    Converted the Decimal value &#39;0&#39; to the UInt32 value 0.\n      &#39;    Converted the Decimal value &#39;147&#39; to the UInt32 value 147.\n      &#39;    Converted the Decimal value &#39;199.55&#39; to the UInt32 value 200.\n      &#39;    Converted the Decimal value &#39;9214.16&#39; to the UInt32 value 9214.\n      &#39;    79228162514264337593543950335 is outside the range of the UInt32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#5\">      double[] values= { Double.MinValue, -1.38e10, -1023.299, -12.98,\n                         0, 9.113e-16, 103.919, 17834.191, Double.MaxValue };\n      uint result;\n      \n      foreach (double value in values)\n      {\n         try {\n            result = Convert.ToUInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;,\n                              value.GetType().Name, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    The Double value -1.79769313486232E+308 is outside the range of the UInt32 type.\n      //    The Double value -13800000000 is outside the range of the UInt32 type.\n      //    The Double value -1023.299 is outside the range of the UInt32 type.\n      //    The Double value -12.98 is outside the range of the UInt32 type.\n      //    Converted the Double value &#39;0&#39; to the UInt32 value 0.\n      //    Converted the Double value &#39;9.113E-16&#39; to the UInt32 value 0.\n      //    Converted the Double value &#39;103.919&#39; to the UInt32 value 104.\n      //    Converted the Double value &#39;17834.191&#39; to the UInt32 value 17834.\n      //    The Double value 1.79769313486232E+308 is outside the range of the UInt32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#5\">      Dim values() As Double = { Double.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Double.MaxValue }\n      Dim result As UInteger\n      \n      For Each value As Double In values\n         Try\n            result = Convert.ToUInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next         \n      &#39; The example displays the following output:                        \n      &#39;    The Double value -1.79769313486232E+308 is outside the range of the UInt32 type.\n      &#39;    The Double value -13800000000 is outside the range of the UInt32 type.\n      &#39;    The Double value -1023.299 is outside the range of the UInt32 type.\n      &#39;    The Double value -12.98 is outside the range of the UInt32 type.\n      &#39;    Converted the Double value &#39;0&#39; to the UInt32 value 0.\n      &#39;    Converted the Double value &#39;9.113E-16&#39; to the UInt32 value 0.\n      &#39;    Converted the Double value &#39;103.919&#39; to the UInt32 value 104.\n      &#39;    Converted the Double value &#39;17834.191&#39; to the UInt32 value 17834.\n      &#39;    The Double value 1.79769313486232E+308 is outside the range of the UInt32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#6\">      short[] numbers= { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue };\n      uint result;\n      \n      foreach (short number in numbers)\n      {\n         try {\n            result = Convert.ToUInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                                 number.GetType().Name, number,\n                                 result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int16 value -32768 is outside the range of the UInt32 type.\n      //    The Int16 value -1 is outside the range of the UInt32 type.\n      //    Converted the Int16 value 0 to the UInt32 value 0.\n      //    Converted the Int16 value 121 to the UInt32 value 121.\n      //    Converted the Int16 value 340 to the UInt32 value 340.\n      //    Converted the Int16 value 32767 to the UInt32 value 32767.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#6\">      Dim numbers() As Short = { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue }\n      Dim result As UInteger\n      \n      For Each number As Short In numbers\n         Try\n            result = Convert.ToUInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                                 number.GetType().Name, number, _\n                                 result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              number.GetType().Name, number) \n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int16 value -32768 is outside the range of the UInt32 type.\n      &#39;    The Int16 value -1 is outside the range of the UInt32 type.\n      &#39;    Converted the Int16 value 0 to the UInt32 value 0.\n      &#39;    Converted the Int16 value 121 to the UInt32 value 121.\n      &#39;    Converted the Int16 value 340 to the UInt32 value 340.\n      &#39;    Converted the Int16 value 32767 to the UInt32 value 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an integer array to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#7\">      int[] numbers = { Int32.MinValue, -1203, 0, 121, 1340, Int32.MaxValue };\n      uint result;\n      foreach (int number in numbers)\n      {\n         try {\n            result = Convert.ToUInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int32 value -2147483648 is outside the range of the UInt32 type.\n      //    The Int32 value -1203 is outside the range of the UInt32 type.\n      //    Converted the Int32 value 0 to the UInt32 value 0.\n      //    Converted the Int32 value 121 to the UInt32 value 121.\n      //    Converted the Int32 value 1340 to the UInt32 value 1340.\n      //    Converted the Int32 value 2147483647 to the UInt32 value 2147483647.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#7\">      Dim numbers() As Integer = { Int32.MinValue, -1203, 0, 121, 1340, Int32.MaxValue }\n      Dim result As UInteger\n      For Each number As Integer In numbers\n         Try\n            result = Convert.ToUInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int32 value -2147483648 is outside the range of the UInt32 type.\n      &#39;    The Int32 value -1203 is outside the range of the UInt32 type.\n      &#39;    Converted the Int32 value 0 to the UInt32 value 0.\n      &#39;    Converted the Int32 value 121 to the UInt32 value 121.\n      &#39;    Converted the Int32 value 1340 to the UInt32 value 1340.\n      &#39;    Converted the Int32 value 2147483647 to the UInt32 value 2147483647.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in a long integer array to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#8\">      long[] numbers = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue };\n      uint result;\n      foreach (long number in numbers)\n      {\n         try {\n            result = Convert.ToUInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int64 value -9223372036854775808 is outside the range of the UInt32 type.\n      //    The Int64 value -1 is outside the range of the UInt32 type.\n      //    Converted the Int64 value 0 to the UInt32 value 0.\n      //    Converted the Int64 value 121 to the UInt32 value 121.\n      //    Converted the Int64 value 340 to the UInt32 value 340.\n      //    The Int64 value 9223372036854775807 is outside the range of the UInt32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#8\">      Dim numbers() As Long = { Int64.MinValue, -1, 0, 121, 340, Int64.MaxValue }\n      Dim result As UInteger\n      For Each number As Long In numbers\n         Try\n            result = Convert.ToUInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int64 value -9223372036854775808 is outside the range of the UInt32 type.\n      &#39;    The Int64 value -1 is outside the range of the UInt32 type.\n      &#39;    Converted the Int64 value 0 to the UInt32 value 0.\n      &#39;    Converted the Int64 value 121 to the UInt32 value 121.\n      &#39;    Converted the Int64 value 340 to the UInt32 value 340.\n      &#39;    The Int64 value 9223372036854775807 is outside the range of the UInt32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint32#System_UInt32_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.uint32#System_UInt32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt32_\" data-linktype=\"relative-path\">ToUInt32</a> method of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#9\">      object[] values = { true, -12, 163, 935, &#39;x&#39;, new DateTime(2009, 5, 12),\n                          &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;,\n                          &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2, 16.3e42};\n      uint result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToUInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is outside the range of the UInt32 type.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No conversion to a UInt32 exists for the {0} value &#39;{1}&#39;.&quot;,\n                              value.GetType().Name, value);\n                              \n         }\n      }                           \n      // The example displays the following output:\n      //    Converted the Boolean value True to the UInt32 value 1.\n      //    The Int32 value &#39;-12&#39; is outside the range of the UInt32 type.\n      //    Converted the Int32 value 163 to the UInt32 value 163.\n      //    Converted the Int32 value 935 to the UInt32 value 935.\n      //    Converted the Char value x to the UInt32 value 120.\n      //    No conversion to a UInt32 exists for the DateTime value &#39;5/12/2009 12:00:00 AM&#39;.\n      //    Converted the String value 104 to the UInt32 value 104.\n      //    The String value 103.0 is not in a recognizable format.\n      //    The String value &#39;-1&#39; is outside the range of the UInt32 type.\n      //    The String value 1.00e2 is not in a recognizable format.\n      //    The String value One is not in a recognizable format.\n      //    Converted the Double value 100 to the UInt32 value 100.\n      //    The Double value &#39;1.63E+43&#39; is outside the range of the UInt32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#9\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, #5/12/2009#, _\n                                 &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2, 16.3e42}\n      Dim result As UInteger\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToUInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to a UInt32 exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to the UInt32 value 1.\n      &#39;    The Int32 value -12 is outside the range of the UInt32 type.\n      &#39;    Converted the Int32 value 163 to the UInt32 value 163.\n      &#39;    Converted the Int32 value 935 to the UInt32 value 935.\n      &#39;    Converted the Char value x to the UInt32 value 120.\n      &#39;    No conversion to a UInt32 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      &#39;    Converted the String value 104 to the UInt32 value 104.\n      &#39;    The String value 103.0 is not in a recognizable format.\n      &#39;    The String value -1 is outside the range of the UInt32 type.\n      &#39;    The String value 1.00e2 is not in a recognizable format.\n      &#39;    The String value One is not in a recognizable format.\n      &#39;    Converted the Double value 100 to the UInt32 value 100.\n      &#39;    The Double value 1.63E+43 is outside the range of the UInt32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in a signed byte array to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#10\">      sbyte[] numbers = { SByte.MinValue, -1, 0, 10, SByte.MaxValue };\n      uint result;\n      \n      foreach (sbyte number in numbers)\n      {\n         try {\n            result = Convert.ToUInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;,\n                              number.GetType().Name, number);\n         }                    \n      }\n      // The example displays the following output:\n      //    The SByte value -128 is outside the range of the UInt32 type.\n      //    The SByte value -1 is outside the range of the UInt32 type.\n      //    Converted the SByte value 0 to the UInt32 value 0.\n      //    Converted the SByte value 10 to the UInt32 value 10.\n      //    Converted the SByte value 127 to the UInt32 value 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#10\">      Dim numbers() As SByte = { SByte.MinValue, -1, 0, 10, SByte.MaxValue }\n      Dim result As UInteger\n      \n      For Each number As SByte In numbers\n         Try\n            result = Convert.ToUInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              number.GetType().Name, number)         \n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The SByte value -128 is outside the range of the UInt32 type.\n      &#39;    The SByte value -1 is outside the range of the UInt32 type.\n      &#39;    Converted the SByte value 0 to the UInt32 value 0.\n      &#39;    Converted the SByte value 10 to the UInt32 value 10.\n      &#39;    Converted the SByte value 127 to the UInt32 value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 32-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#11\">      float[] values= { Single.MinValue, -1.38e10f, -1023.299f, -12.98f,\n                        0f, 9.113e-16f, 103.919f, 17834.191f, Single.MaxValue };\n      uint result;\n      \n      foreach (float value in values)\n      {\n         try {\n            result = Convert.ToUInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, \n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;,\n                              value.GetType().Name, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    The Single value -3.402823E+38 is outside the range of the UInt32 type.\n      //    The Single value -1.38E+10 is outside the range of the UInt32 type.\n      //    The Single value -1023.299 is outside the range of the UInt32 type.\n      //    The Single value -12.98 is outside the range of the UInt32 type.\n      //    Converted the Single value 0 to the UInt32 value 0.\n      //    Converted the Single value 9.113E-16 to the UInt32 value 0.\n      //    Converted the Single value 103.919 to the UInt32 value 104.\n      //    Converted the Single value 17834.19 to the UInt32 value 17834.\n      //    The Single value 3.402823E+38 is outside the range of the UInt32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#11\">      Dim values() As Single = { Single.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Single.MaxValue }\n      Dim result As UInteger\n      \n      For Each value As Single In values\n         Try\n            result = Convert.ToUInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    The Single value -3.402823E+38 is outside the range of the UInt32 type.\n      &#39;    The Single value -1.38E+10 is outside the range of the UInt32 type.\n      &#39;    The Single value -1023.299 is outside the range of the UInt32 type.\n      &#39;    The Single value -12.98 is outside the range of the UInt32 type.\n      &#39;    Converted the Single value 0 to the UInt32 value 0.\n      &#39;    Converted the Single value 9.113E-16 to the UInt32 value 0.\n      &#39;    Converted the Single value 103.919 to the UInt32 value 104.\n      &#39;    Converted the Single value 17834.19 to the UInt32 value 17834.\n      &#39;    The Single value 3.402823E+38 is outside the range of the UInt32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the ToUInt32 method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.uint32#System_UInt32_Parse_System_String_\" data-linktype=\"relative-path\">System.UInt32.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.uint32#System_UInt32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#12\">      string[] values = { &quot;One&quot;, &quot;1.34e28&quot;, &quot;-26.87&quot;, &quot;-18&quot;, &quot;-6.00&quot;,\n                          &quot; 0&quot;, &quot;137&quot;, &quot;1601.9&quot;, Int32.MaxValue.ToString() };\n      uint result;\n      \n      foreach (string value in values)\n      {\n         try {\n            result = Convert.ToUInt32(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, \n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is outside the range of the UInt32 type.&quot;,\n                              value.GetType().Name, value);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    The String value &#39;One&#39; is not in a recognizable format.\n      //    The String value &#39;1.34e28&#39; is not in a recognizable format.\n      //    The String value &#39;-26.87&#39; is not in a recognizable format.\n      //    The String value &#39;-18&#39; is outside the range of the UInt32 type.\n      //    The String value &#39;-6.00&#39; is not in a recognizable format.\n      //    Converted the String value &#39; 0&#39; to the UInt32 value 0.\n      //    Converted the String value &#39;137&#39; to the UInt32 value 137.\n      //    The String value &#39;1601.9&#39; is not in a recognizable format.\n      //    Converted the String value &#39;2147483647&#39; to the UInt32 value 2147483647.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#12\">      Dim values() As String = { &quot;One&quot;, &quot;1.34e28&quot;, &quot;-26.87&quot;, &quot;-18&quot;, &quot;-6.00&quot;, _\n                                 &quot; 0&quot;, &quot;137&quot;, &quot;1601.9&quot;, Int32.MaxValue.ToString() }\n      Dim result As UInteger\n      \n      For Each value As String In values\n         Try\n            result = Convert.ToUInt32(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    The String value &#39;One&#39; is not in a recognizable format.\n      &#39;    The String value &#39;1.34e28&#39; is not in a recognizable format.\n      &#39;    The String value &#39;-26.87&#39; is not in a recognizable format.\n      &#39;    The String value -18 is outside the range of the UInt32 type.\n      &#39;    The String value &#39;-6.00&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39; 0&#39; to the UInt32 value 0.\n      &#39;    Converted the String value &#39;137&#39; to the UInt32 value 137.\n      &#39;    The String value &#39;1601.9&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39;2147483647&#39; to the UInt32 value 2147483647.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#13\">      ushort[] numbers = { UInt16.MinValue, 121, 340, UInt16.MaxValue };\n      uint result;\n      foreach (ushort number in numbers)\n      {\n         result = Convert.ToUInt32(number);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           number.GetType().Name, number,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the UInt16 value 0 to the UInt32 value 0.\n      //    Converted the UInt16 value 121 to the UInt32 value 121.\n      //    Converted the UInt16 value 340 to the UInt32 value 340.\n      //    Converted the UInt16 value 65535 to the UInt32 value 65535.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#13\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 340, UInt16.MaxValue }\n      Dim result As UInteger\n      \n      For Each number As UShort In numbers\n         result = Convert.ToUInt32(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt16 value 0 to the UInt32 value 0.\n      &#39;    Converted the UInt16 value 121 to the UInt32 value 121.\n      &#39;    Converted the UInt16 value 340 to the UInt32 value 340.\n      &#39;    Converted the UInt16 value 65535 to the UInt32 value 65535.      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#14\">      ulong[] numbers = { UInt64.MinValue, 121, 340, UInt64.MaxValue };\n      uint result;\n      foreach (ulong number in numbers)\n      {\n         try {\n            result = Convert.ToUInt32(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt64 value 0 to the UInt32 value 0.\n      //    Converted the UInt64 value 121 to the UInt32 value 121.\n      //    Converted the UInt64 value 340 to the UInt32 value 340.\n      //    The UInt64 value 18446744073709551615 is outside the range of the UInt32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#14\">      Dim numbers() As ULong = { UInt64.MinValue, 121, 340, UInt64.MaxValue }\n      Dim result As UInteger\n      \n      For Each number As ULong In numbers\n         Try\n            result = Convert.ToUInt32(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt32 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt64 value 0 to a UInt32 value 0.\n      &#39;    Converted the UInt64 value 121 to a UInt32 value 121.\n      &#39;    Converted the UInt64 value 340 to a UInt32 value 340.\n      &#39;    The UInt64 value 18446744073709551615 is outside the range of the UInt32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint32#System_UInt32_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.uint32#System_UInt32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt32_\" data-linktype=\"relative-path\">ToUInt32</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>HexString</code> class that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values. The class includes a <code>Sign</code> property that indicates the sign of its hexadecimal value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#17\">using System;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic enum SignBit { Negative=-1, Zero=0, Positive=1 };\n\npublic struct HexString : IConvertible\n{\n   private SignBit signBit;\n   private string hexString;\n   \n   public SignBit Sign\n   {\n      set { signBit = value; }\n      get { return signBit; } \n   }\n   \n   public string Value\n   {\n      set {\n         if (value.Trim().Length &gt; 8)\n            throw new ArgumentException(&quot;The string representation of a 32-bit integer cannot have more than 8 characters.&quot;);\n         else if (! Regex.IsMatch(value, &quot;([0-9,A-F]){1,8}&quot;, RegexOptions.IgnoreCase))\n            throw new ArgumentException(&quot;The hexadecimal representation of a 32-bit integer contains invalid characters.&quot;);             \n         else\n            hexString = value;\n      }\n      get { return hexString; }\n   }\n   \n   // IConvertible implementations.\n   public TypeCode GetTypeCode()\n   {\n      return TypeCode.Object;\n   }\n   \n   public bool ToBoolean(IFormatProvider provider)\n   {\n      return signBit != SignBit.Zero;\n   } \n   \n   public byte ToByte(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToInt32(hexString, 16))); \n      else\n         try {\n            return Byte.Parse(hexString, NumberStyles.HexNumber);\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToUInt32(hexString, 16)), e);\n         }   \n   }\n   \n   public char ToChar(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative) \n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToInt32(hexString, 16)));\n      \n      try {\n         ushort codePoint = UInt16.Parse(this.hexString, NumberStyles.HexNumber);\n         return Convert.ToChar(codePoint);\n      }\n      catch (OverflowException e) {\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToUInt32(hexString, 16)), e);\n      }      \n   } \n   \n   public DateTime ToDateTime(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Hexadecimal to DateTime conversion is not supported.&quot;);\n   }\n   \n   public decimal ToDecimal(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n      {\n         int hexValue = Int32.Parse(hexString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(hexValue);\n      }\n      else\n      {\n         uint hexValue = UInt32.Parse(hexString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(hexValue);\n      }\n   }\n   \n   public double ToDouble(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToDouble(Int32.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Convert.ToDouble(UInt32.Parse(hexString, NumberStyles.HexNumber));\n   }   \n   \n   public short ToInt16(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         try {\n            return Convert.ToInt16(Int32.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToInt32(hexString, 16)), e);\n         }\n      else\n         try {\n            return Convert.ToInt16(UInt32.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToUInt32(hexString, 16)), e);\n         }\n   }\n   \n   public int ToInt32(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Int32.Parse(hexString, NumberStyles.HexNumber);\n      else\n         try {\n            return Convert.ToInt32(UInt32.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, Convert.ToUInt32(hexString, 16)), e);\n         }   \n   }\n   \n   public long ToInt64(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToInt64(Int32.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Int64.Parse(hexString, NumberStyles.HexNumber);\n   }\n   \n   public sbyte ToSByte(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         try {\n            return Convert.ToSByte(Int32.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, \n                                                      Int32.Parse(hexString, NumberStyles.HexNumber), e));\n         }\n      else\n         try {\n            return Convert.ToSByte(UInt32.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, \n                                                    UInt32.Parse(hexString, NumberStyles.HexNumber)), e);\n         }   \n   }\n\n   public float ToSingle(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToSingle(Int32.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Convert.ToSingle(UInt32.Parse(hexString, NumberStyles.HexNumber));\n   }\n\n   public string ToString(IFormatProvider provider)\n   {\n      return &quot;0x&quot; + this.hexString;\n   }\n   \n   public object ToType(Type conversionType, IFormatProvider provider)\n   {\n      switch (Type.GetTypeCode(conversionType))\n      {\n         case TypeCode.Boolean: \n            return this.ToBoolean(null);\n         case TypeCode.Byte:\n            return this.ToByte(null);\n         case TypeCode.Char:\n            return this.ToChar(null);\n         case TypeCode.DateTime:\n            return this.ToDateTime(null);\n         case TypeCode.Decimal:\n            return this.ToDecimal(null);\n         case TypeCode.Double:\n            return this.ToDouble(null);\n         case TypeCode.Int16:\n            return this.ToInt16(null);\n         case TypeCode.Int32:\n            return this.ToInt32(null);\n         case TypeCode.Int64:\n            return this.ToInt64(null);\n         case TypeCode.Object:\n            if (typeof(HexString).Equals(conversionType))\n               return this;\n            else\n               throw new InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name));\n         case TypeCode.SByte:\n            return this.ToSByte(null);\n         case TypeCode.Single:\n            return this.ToSingle(null);\n         case TypeCode.String:\n            return this.ToString(null);\n         case TypeCode.UInt16:\n            return this.ToUInt16(null);\n         case TypeCode.UInt32:\n            return this.ToUInt32(null);\n         case TypeCode.UInt64:\n            return this.ToUInt64(null);   \n         default:\n            throw new InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name));   \n      }\n   }\n   \n   public ushort ToUInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;,\n                                                   Int32.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         try {\n            return Convert.ToUInt16(UInt32.Parse(hexString, NumberStyles.HexNumber));\n         }   \n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, Convert.ToUInt32(hexString, 16)), e);\n         }            \n   }\n\n   public uint ToUInt32(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, \n                                                   Int32.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt32(hexString, 16);\n   }\n   \n   public ulong ToUInt64(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, \n                                                   Int32.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt64(hexString, 16);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#17\">Imports System.Globalization\nImports System.Text.RegularExpressions\n\nPublic Enum SignBit As Integer\n   Positive = 1\n   Zero = 0\n   Negative = -1\nEnd Enum\n\nPublic Structure HexString : Implements IConvertible\n   Private signBit As SignBit\n   Private hexString As String\n   \n   Public Property Sign As SignBit\n      Set\n         signBit = value\n      End Set\n      Get\n         Return signBit\n      End Get\n   End Property\n   \n   Public Property Value As String\n      Set\n         If value.Trim().Length &gt; 8 Then\n            Throw New ArgumentException(&quot;The string representation of a 32-bit integer cannot have more than 8 characters.&quot;)\n         Else If Not Regex.IsMatch(value, &quot;([0-9,A-F]){1,8}&quot;, RegexOptions.IgnoreCase) Then\n            Throw New ArgumentException(&quot;The hexadecimal representation of a 32-bit integer contains invalid characters.&quot;)             \n         Else\n            hexString = value\n         End If   \n      End Set\n      Get\n         Return hexString\n      End Get\n   End Property\n   \n   &#39; IConvertible implementations.\n   Public Function GetTypeCode() As TypeCode _\n                   Implements IConvertible.GetTypeCode\n      Return TypeCode.Object\n   End Function\n   \n   Public Function ToBoolean(provider As IFormatProvider) As Boolean _\n                   Implements IConvertible.ToBoolean\n      Return signBit &lt;&gt; SignBit.Zero\n   End Function \n   \n   Public Function ToByte(provider As IFormatProvider) As Byte _\n                   Implements IConvertible.ToByte\n      If signBit = SignBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToInt32(hexString, 16))) \n      Else\n         Try\n            Return Byte.Parse(hexString, NumberStyles.HexNumber)\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToUInt32(hexString, 16)), e)\n         End Try   \n      End If       \n   End Function\n   \n   Public Function ToChar(provider As IFormatProvider) As Char _\n                   Implements IConvertible.ToChar\n      If signBit = SignBit.Negative Then \n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToInt32(hexString, 16)))\n      End If\n      \n      Try\n         Dim codePoint As UInt16 = UInt16.Parse(Me.hexString, NumberStyles.HexNumber)\n         Return Convert.ToChar(codePoint)\n      Catch e As OverflowException\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToUInt32(hexString, 16)))\n      End Try      \n   End Function \n   \n   Public Function ToDateTime(provider As IFormatProvider) As Date _\n                   Implements IConvertible.ToDateTime\n      Throw New InvalidCastException(&quot;Hexadecimal to DateTime conversion is not supported.&quot;)\n   End Function\n   \n   Public Function ToDecimal(provider As IFormatProvider) As Decimal _\n                   Implements IConvertible.ToDecimal\n      If signBit = SignBit.Negative Then\n         Dim hexValue As Integer = Int32.Parse(hexString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(hexValue)\n      Else\n         Dim hexValue As UInteger = UInt32.Parse(hexString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(hexValue)\n      End If\n   End Function\n   \n   Public Function ToDouble(provider As IFormatProvider) As Double _\n                   Implements IConvertible.ToDouble\n      If signBit = SignBit.Negative Then\n         Return Convert.ToDouble(Int32.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToDouble(UInt32.Parse(hexString, NumberStyles.HexNumber))\n      End If   \n   End Function   \n   \n   Public Function ToInt16(provider As IFormatProvider) As Int16 _\n                   Implements IConvertible.ToInt16\n      If signBit = SignBit.Negative Then\n         Try\n            Return Convert.ToInt16(Int32.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToInt32(hexString, 16)), e)\n         End Try\n      Else\n         Try\n            Return Convert.ToInt16(UInt32.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToUInt32(hexString, 16)), e)\n         End Try\n      End If   \n   End Function\n   \n   Public Function ToInt32(provider As IFormatProvider) As Int32 _\n                   Implements IConvertible.ToInt32\n      If signBit = SignBit.Negative Then\n         Return Int32.Parse(hexString, NumberStyles.HexNumber)\n      Else\n         Try\n            Return Convert.ToInt32(UInt32.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, Convert.ToUInt32(hexString, 16)), e)\n         End Try   \n      End If   \n   End Function\n   \n   Public Function ToInt64(provider As IFormatProvider) As Int64 _\n                   Implements IConvertible.ToInt64\n      If signBit = SignBit.Negative Then\n         Return Convert.ToInt64(Int32.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Int64.Parse(hexString, NumberStyles.HexNumber)\n      End If   \n   End Function\n   \n   Public Function ToSByte(provider As IFormatProvider) As SByte _\n                   Implements IConvertible.ToSByte\n      If signBit = SignBit.Negative Then\n         Try\n            Return Convert.ToSByte(Int32.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, _\n                                                      Int32.Parse(hexString, NumberStyles.HexNumber), e))\n         End Try\n      Else\n         Try\n            Return Convert.ToSByte(UInt32.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, _\n                                                    UInt32.Parse(hexString, NumberStyles.HexNumber)), e)\n         End Try   \n      End If\n   End Function\n\n   Public Function ToSingle(provider As IFormatProvider) As Single _\n                   Implements IConvertible.ToSingle\n      If signBit = SignBit.Negative Then\n         Return Convert.ToSingle(Int32.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToSingle(UInt32.Parse(hexString, NumberStyles.HexNumber))\n      End If   \n   End Function\n\n   Public Overloads Function ToString(provider As IFormatProvider) As String _\n                   Implements IConvertible.ToString\n      Return &quot;0x&quot; &amp; Me.hexString\n   End Function\n   \n   Public Function ToType(conversionType As Type, provider As IFormatProvider) As Object _\n                   Implements IConvertible.ToType\n      Select Case Type.GetTypeCode(conversionType)\n         Case TypeCode.Boolean \n            Return Me.ToBoolean(Nothing)\n         Case TypeCode.Byte\n            Return Me.ToByte(Nothing)\n         Case TypeCode.Char\n            Return Me.ToChar(Nothing)\n         Case TypeCode.DateTime\n            Return Me.ToDateTime(Nothing)\n         Case TypeCode.Decimal\n            Return Me.ToDecimal(Nothing)\n         Case TypeCode.Double\n            Return Me.ToDouble(Nothing)\n         Case TypeCode.Int16\n            Return Me.ToInt16(Nothing)\n         Case TypeCode.Int32\n            Return Me.ToInt32(Nothing)\n         Case TypeCode.Int64\n            Return Me.ToInt64(Nothing)\n         Case TypeCode.Object\n            If GetType(HexString).Equals(conversionType) Then\n               Return Me\n            Else\n               Throw New InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name))\n            End If \n         Case TypeCode.SByte\n            Return Me.ToSByte(Nothing)\n         Case TypeCode.Single\n            Return Me.ToSingle(Nothing)\n         Case TypeCode.String\n            Return Me.ToString(Nothing)\n         Case TypeCode.UInt16\n            Return Me.ToUInt16(Nothing)\n         Case TypeCode.UInt32\n            Return Me.ToUInt32(Nothing)\n         Case TypeCode.UInt64\n            Return Me.ToUInt64(Nothing)   \n         Case Else\n            Throw New InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name))   \n      End Select\n   End Function\n   \n   Public Function ToUInt16(provider As IFormatProvider) As UInt16 _\n                   Implements IConvertible.ToUInt16\n      If signBit = SignBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, _\n                                                   Int32.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Try\n            Return Convert.ToUInt16(UInt32.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, Convert.ToUInt32(hexString, 16)), e)\n         End Try            \n      End If   \n   End Function\n\n   Public Function ToUInt32(provider As IFormatProvider) As UInt32 _\n                   Implements IConvertible.ToUInt32\n      If signBit = SignBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                                                   Int32.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt32(hexString, 16)\n      End If   \n   End Function\n   \n   Public Function ToUInt64(provider As IFormatProvider) As UInt64 _\n                   Implements IConvertible.ToUInt64\n      If signBit = SignBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, _\n                                                   Int32.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt64(hexString, 16)\n      End If   \n   End Function\n   \nEnd Structure\n</code></pre><p> The following example shows that a call to the ToUInt32 method that passes a <code>HexString</code> object as a parameter, in turn, calls the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt32_\" data-linktype=\"relative-path\">ToUInt32</a> implementation of the <code>HexString</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#18\">public class Example\n{\n   public static void Main()\n   {\n      uint positiveValue = 320000000;\n      int negativeValue = -1;\n      \n      HexString positiveString = new HexString();\n      positiveString.Sign = (SignBit) Math.Sign(positiveValue);\n      positiveString.Value = positiveValue.ToString(&quot;X4&quot;);\n      \n      HexString negativeString = new HexString();\n      negativeString.Sign = (SignBit) Math.Sign(negativeValue);\n      negativeString.Value = negativeValue.ToString(&quot;X4&quot;);\n      \n      try {\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, positiveString.Value, Convert.ToUInt32(positiveString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is outside the range of the UInt32 type.&quot;, \n                           Int32.Parse(positiveString.Value, NumberStyles.HexNumber));\n      }\n\n      try {\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, negativeString.Value, Convert.ToUInt32(negativeString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is outside the range of the UInt32 type.&quot;,\n                           Int32.Parse(negativeString.Value, NumberStyles.HexNumber));\n      }   \n   }\n}\n// The example dosplays the following output:\n//       0x1312D000 converts to 320000000.\n//       -1 is outside the range of the UInt32 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#18\">Module Example\n   Public Sub Main()\n      Dim positiveValue As UInt32 = 320000000\n      Dim negativeValue As Int32 = -1\n      \n      \n      Dim positiveString As New HexString()\n      positiveString.Sign = CType(Math.Sign(positiveValue), SignBit)\n      positiveString.Value = positiveValue.ToString(&quot;X4&quot;)\n      \n      Dim negativeString As New HexString()\n      negativeString.Sign = CType(Math.Sign(negativeValue), SignBit)\n      negativeString.Value = negativeValue.ToString(&quot;X4&quot;)\n      \n      Try\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, positiveString.Value, Convert.ToUInt32(positiveString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                           Int32.Parse(positiveString.Value, NumberStyles.HexNumber))\n      End Try\n\n      Try\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, negativeString.Value, Convert.ToUInt32(negativeString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                           Int32.Parse(negativeString.Value, NumberStyles.HexNumber))\n      End Try   \n   End Sub\nEnd Module\n&#39; The example dosplays the following output:\n&#39;       0x1312D000 converts to 320000000.\n&#39;       -1 is outside the range of the UInt32 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking <a class=\"xref\" href=\"system.uint32#System_UInt32_Parse_\" data-linktype=\"relative-path\">Parse</a> on <code>value</code>.  </p>\n<p> <code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> instance that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.uint32#System_UInt32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that recognizes the string &quot;pos&quot; as the positive sign and the string &quot;neg&quot; as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> provider for the invariant culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#15\">using System;\nusing System.Globalization;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      // Create a NumberFormatInfo object and set several of its\n      // properties that apply to numbers.\n      NumberFormatInfo provider = new NumberFormatInfo(); \n      provider.PositiveSign = &quot;pos &quot;;\n      provider.NegativeSign = &quot;neg &quot;;\n\n      // Define an array of numeric strings.\n      string[] values = { &quot;123456789&quot;, &quot;+123456789&quot;, &quot;pos 123456789&quot;, \n                          &quot;123456789.&quot;, &quot;123,456,789&quot;,  &quot;4294967295&quot;, \n                          &quot;4294967296&quot;, &quot;-1&quot;, &quot;neg 1&quot; };\n\n      foreach (string value in values)\n      {\n         Console.Write(&quot;{0,-20} --&gt;&quot;, value);\n         try {\n            Console.WriteLine(&quot;{0,20}&quot;, Convert.ToUInt32(value, provider));\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;{0,20}&quot;, &quot;Bad Format&quot;);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0,20}&quot;, &quot;Numeric Overflow&quot;);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//       123456789            --&gt;           123456789\n//       +123456789           --&gt;          Bad Format\n//       pos 123456789        --&gt;           123456789\n//       123456789.           --&gt;          Bad Format\n//       123,456,789          --&gt;          Bad Format\n//       4294967295           --&gt;          4294967295\n//       4294967296           --&gt;    Numeric Overflow\n//       -1                   --&gt;          Bad Format\n//       neg 1                --&gt;    Numeric Overflow\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#15\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Create a NumberFormatInfo object and set several of its\n      &#39; properties that apply to numbers.\n      Dim provider As New NumberFormatInfo() \n      provider.PositiveSign = &quot;pos &quot;\n      provider.NegativeSign = &quot;neg &quot;\n\n      &#39; Define an array of numeric strings.\n      Dim values() As String = { &quot;123456789&quot;, &quot;+123456789&quot;, &quot;pos 123456789&quot;, _\n                                 &quot;123456789.&quot;, &quot;123,456,789&quot;,  &quot;4294967295&quot;, _\n                                 &quot;4294967296&quot;, &quot;-1&quot;, &quot;neg 1&quot; }\n\n      For Each value As String In values\n         Console.Write(&quot;{0,-20} --&gt;&quot;, value)\n         Try\n            Console.WriteLine(&quot;{0,20}&quot;, Convert.ToUInt32(value, provider))\n         Catch e As FormatException\n            Console.WriteLine(&quot;{0,20}&quot;, &quot;Bad Format&quot;)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0,20}&quot;, &quot;Numeric Overflow&quot;)\n         End Try   \n      Next\n    End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       123456789            --&gt;           123456789\n&#39;       +123456789           --&gt;          Bad Format\n&#39;       pos 123456789        --&gt;           123456789\n&#39;       123456789.           --&gt;          Bad Format\n&#39;       123,456,789          --&gt;          Bad Format\n&#39;       4294967295           --&gt;          4294967295\n&#39;       4294967296           --&gt;    Numeric Overflow\n&#39;       -1                   --&gt;          Bad Format\n&#39;       neg 1                --&gt;    Numeric Overflow\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt32_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (string value, int fromBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fromBase</code> is not 2, 8, 10, or 16.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  </p>\n<p> -or-  </p>\n<p> <code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>fromBase</code> is 16, you can prefix the number specified by the <code>value</code> parameter with &quot;0x&quot; or &quot;0X&quot;.  </p>\n<p> Because the <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> data type supports unsigned values only, the ToUInt32 method assumes that <code>value</code> is expressed using unsigned binary representation. In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> data type is converted to a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value without the method throwing an exception. The following example converts <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">MinValue</a> to its hexadecimal string representation, and then calls the ToUInt32 method. Instead of throwing an exception, the method displays the message, &quot;0x80000000 converts to 2147483648.&quot;  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#13\">      &#39; Create a hexadecimal value out of range of the UInt32 type.\n      Dim value As String = Convert.ToString(Integer.MinValue, 16)\n      &#39; Convert it back to a number.\n      Try\n         Dim number As UInt32 = Convert.ToUInt32(value, 16)\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned integer.&quot;, _\n                           value)\n      End Try   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#13\">      // Create a hexadecimal value out of range of the UInt32 type.\n      string value = Convert.ToString(Int32.MinValue, 16);\n      // Convert it back to a number.\n      try\n      {\n         UInt32 number = Convert.ToUInt32(value, 16);\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number);\n      }   \n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned integer.&quot;, \n                           value);\n      }   \n</code></pre><p> When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two&#39;s complement representation when converting a hexadecimal string to a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#14\">      &#39; Create a negative hexadecimal value out of range of the UInt32 type.\n      Dim sourceNumber As Integer = Integer.MinValue\n      Dim isSigned As Boolean = Math.Sign(sourceNumber.MinValue) = -1\n      Dim value As String = Convert.ToString(sourceNumber, 16)\n      Dim targetNumber As UInt32\n      Try\n         targetNumber = Convert.ToUInt32(value, 16)\n         If isSigned And ((targetNumber And &amp;H80000000) &lt;&gt; 0) Then\n            Throw New OverflowException()\n         Else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber)\n         End If    \n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned integer.&quot;, _\n                           value)\n      End Try \n      &#39; Displays the following to the console:\n      &#39;    Unable to convert &#39;0x80000000&#39; to an unsigned integer.    \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#14\">      // Create a negative hexadecimal value out of range of the UInt32 type.\n      int sourceNumber = Int32.MinValue;\n      bool isSigned = Math.Sign((int)sourceNumber.GetType().GetField(&quot;MinValue&quot;).GetValue(null)) == -1;\n      string value = Convert.ToString(sourceNumber, 16);\n      UInt32 targetNumber;\n      try\n      {\n         targetNumber = Convert.ToUInt32(value, 16);\n         if (isSigned &amp;&amp; ((targetNumber &amp; 0x80000000) != 0))\n            throw new OverflowException();\n         else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned integer.&quot;, \n                           value);\n      } \n      // Displays the following to the console:\n      //    Unable to convert &#39;0x80000000&#39; to an unsigned integer.     \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt32#16\">public class Example\n{\n   public static void Main()\n   {\n      string[] hexStrings = { &quot;80000000&quot;, &quot;0FFFFFFF&quot;, &quot;F0000000&quot;, &quot;00A3000&quot;, &quot;D&quot;, \n                              &quot;-13&quot;, &quot;9AC61&quot;, &quot;GAD&quot;, &quot;FFFFFFFFFF&quot; };\n      \n      foreach (string hexString in hexStrings)\n      {\n         Console.Write(&quot;{0,-12}  --&gt;  &quot;, hexString);\n         try {\n            uint number = Convert.ToUInt32(hexString, 16);\n            Console.WriteLine(&quot;{0,18:N0}&quot;, number);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;{0,18}&quot;, &quot;Bad Format&quot;);\n         }   \n         catch (OverflowException)\n         {\n            Console.WriteLine(&quot;{0,18}&quot;, &quot;Numeric Overflow&quot;);\n         }   \n         catch (ArgumentException) {\n            Console.WriteLine(&quot;{0,18}&quot;, &quot;Invalid in Base 16&quot;);\n         }\n      }                                            \n   }\n}\n// The example displays the following output:\n//       80000000      --&gt;       2,147,483,648\n//       0FFFFFFF      --&gt;         268,435,455\n//       F0000000      --&gt;       4,026,531,840\n//       00A3000       --&gt;             667,648\n//       D             --&gt;                  13\n//       -13           --&gt;  Invalid in Base 16\n//       9AC61         --&gt;             633,953\n//       GAD           --&gt;          Bad Format\n//       FFFFFFFFFF    --&gt;    Numeric Overflow\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt32#16\">Module Example\n   Public Sub Main()\n      Dim hexStrings() As String = { &quot;80000000&quot;, &quot;0FFFFFFF&quot;, &quot;F0000000&quot;, &quot;00A3000&quot;, &quot;D&quot;, _\n                                     &quot;-13&quot;, &quot;9AC61&quot;, &quot;GAD&quot;, &quot;FFFFFFFFFF&quot; }\n      For Each hexString As String In hexStrings\n         Console.Write(&quot;{0,-12}  --&gt;  &quot;, hexString)\n         Try\n            Dim number As UInteger = Convert.ToUInt32(hexString, 16)\n            Console.WriteLine(&quot;{0,18:N0}&quot;, number)\n         Catch e As FormatException\n            Console.WriteLine(&quot;{0,18}&quot;, &quot;Bad Format&quot;)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0,18}&quot;, &quot;Numeric Overflow&quot;)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;{0,18}&quot;, &quot;Invalid in Base 16&quot;)\n         End Try\n      Next                                            \n   End Sub\nEnd Module\n&#39;    &#39; The example displays the following output:\n&#39;    80000000      --&gt;       2,147,483,648\n&#39;    0FFFFFFF      --&gt;         268,435,455\n&#39;    F0000000      --&gt;       4,026,531,840\n&#39;    00A3000       --&gt;             667,648\n&#39;    D             --&gt;                  13\n&#39;    -13           --&gt;  Invalid in Base 16\n&#39;    9AC61         --&gt;             633,953\n&#39;    GAD           --&gt;          Bad Format\n&#39;    FFFFFFFFFF    --&gt;    Numeric Overflow\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Boolean_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>The number 1 if <code>value</code> is <code>true</code>; otherwise, 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts Boolean <code>true</code> and <code>false</code> values to unsigned long integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#1\">      bool falseFlag = false;\n      bool trueFlag = true;\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag,\n                        Convert.ToUInt64(falseFlag));\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag,\n                        Convert.ToUInt64(trueFlag));\n      // The example displays the following output:\n      //       False converts to 0.\n      //       True converts to 1.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#1\">      Dim falseFlag As Boolean = False\n      Dim trueFlag As Boolean = True\n      \n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, falseFlag, _\n                        Convert.ToUInt64(falseFlag))\n      Console.WriteLine(&quot;{0} converts to {1}.&quot;, trueFlag, _\n                        Convert.ToUInt64(trueFlag))\n      &#39; The example displays the following output:\n      &#39;       False converts to 0.\n      &#39;       True converts to 1.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Byte_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a byte array to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#2\">      byte[] bytes = { Byte.MinValue, 14, 122, Byte.MaxValue};\n      ulong result;\n      \n      foreach (byte byteValue in bytes)\n      {\n         result = Convert.ToUInt64(byteValue);\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                           byteValue.GetType().Name, byteValue,\n                           result.GetType().Name, result);\n      }\n      // The example displays the following output:\n      //    Converted the Byte value 0 to the UInt64 value 0.\n      //    Converted the Byte value 14 to the UInt64 value 14.\n      //    Converted the Byte value 122 to the UInt64 value 122.\n      //    Converted the Byte value 255 to the UInt64 value 255.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#2\">      Dim bytes() As Byte = { Byte.MinValue, 14, 122, Byte.MaxValue}\n      Dim result As ULong\n      \n      For Each byteValue As Byte In bytes\n         result = Convert.ToUInt64(byteValue)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           byteValue.GetType().Name, byteValue, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the Byte value 0 to the UInt64 value 0.\n      &#39;    Converted the Byte value 14 to the UInt64 value 14.\n      &#39;    Converted the Byte value 122 to the UInt64 value 122.\n      &#39;    Converted the Byte value 255 to the UInt64 value 255.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Char_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in a character array to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#3\">      char[] chars = { &#39;a&#39;, &#39;z&#39;, &#39;\\u0007&#39;, &#39;\\u03FF&#39;,\n                       &#39;\\u7FFF&#39;, &#39;\\uFFFE&#39; };\n      ulong result;\n                              \n      foreach (char ch in chars)\n      {\n         result = Convert.ToUInt64(ch);\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                           ch.GetType().Name, ch,\n                           result.GetType().Name, result);\n      }   \n      // The example displays the following output:\n      //    Converted the Char value &#39;a&#39; to the UInt64 value 97.\n      //    Converted the Char value &#39;z&#39; to the UInt64 value 122.\n      //    Converted the Char value &#39;&#39; to the UInt64 value 7.\n      //    Converted the Char value &#39;?&#39; to the UInt64 value 1023.\n      //    Converted the Char value &#39;?&#39; to the UInt64 value 32767.\n      //    Converted the Char value &#39;?&#39; to the UInt64 value 65534.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#3\">      Dim chars() As Char = { &quot;a&quot;c, &quot;z&quot;c, ChrW(7), ChrW(1023), _\n                              ChrW(Short.MaxValue), ChrW(&amp;hFFFE) }\n      Dim result As ULong\n                              \n      For Each ch As Char in chars\n         result = Convert.ToUInt64(ch)\n         Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                           ch.GetType().Name, ch, _\n                           result.GetType().Name, result)\n      Next   \n      &#39; The example displays the following output:\n      &#39;    Converted the Char value &#39;a&#39; to the UInt64 value 97.\n      &#39;    Converted the Char value &#39;z&#39; to the UInt64 value 122.\n      &#39;    Converted the Char value &#39;&#39; to the UInt64 value 7.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt64 value 1023.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt64 value 32767.\n      &#39;    Converted the Char value &#39;?&#39; to the UInt64 value 65534.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_DateTime_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (DateTime value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Decimal_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#4\">      decimal[] values= { Decimal.MinValue, -1034.23m, -12m, 0m, 147m,\n                          199.55m, 9214.16m, Decimal.MaxValue };\n      ulong result;\n      \n      foreach (decimal value in values)\n      {\n         try {\n            result = Convert.ToUInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;,\n                              value);\n         }   \n      }                                  \n      // The example displays the following output:\n      //    -79228162514264337593543950335 is outside the range of the UInt64 type.\n      //    -1034.23 is outside the range of the UInt64 type.\n      //    -12 is outside the range of the UInt64 type.\n      //    Converted the Decimal value &#39;0&#39; to the UInt64 value 0.\n      //    Converted the Decimal value &#39;147&#39; to the UInt64 value 147.\n      //    Converted the Decimal value &#39;199.55&#39; to the UInt64 value 200.\n      //    Converted the Decimal value &#39;9214.16&#39; to the UInt64 value 9214.\n      //    79228162514264337593543950335 is outside the range of the UInt64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#4\">      Dim values() As Decimal = { Decimal.MinValue, -1034.23d, -12d, 0d, 147d, _\n                                  199.55d, 9214.16d, Decimal.MaxValue }\n      Dim result As ULong\n      \n      For Each value As Decimal In values\n         Try\n            result = Convert.ToUInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next                                  \n      &#39; The example displays the following output:\n      &#39;    The Decimal value -79228162514264337593543950335 is outside the range of the UInt64 type.\n      &#39;    The Decimal value -1034.23 is outside the range of the UInt64 type.\n      &#39;    The Decimal value -12 is outside the range of the UInt64 type.\n      &#39;    Converted the Decimal value &#39;0&#39; to the UInt64 value 0.\n      &#39;    Converted the Decimal value &#39;147&#39; to the UInt64 value 147.\n      &#39;    Converted the Decimal value &#39;199.55&#39; to the UInt64 value 200.\n      &#39;    Converted the Decimal value &#39;9214.16&#39; to the UInt64 value 9214.\n      &#39;    The Decimal value 79228162514264337593543950335 is outside the range of the UInt64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Double_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The double-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#5\">      double[] values= { Double.MinValue, -1.38e10, -1023.299, -12.98,\n                         0, 9.113e-16, 103.919, 17834.191, Double.MaxValue };\n      ulong result;\n      \n      foreach (double value in values)\n      {\n         try {\n            result = Convert.ToUInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    -1.79769313486232E+308 is outside the range of the UInt64 type.\n      //    -13800000000 is outside the range of the UInt64 type.\n      //    -1023.299 is outside the range of the UInt64 type.\n      //    -12.98 is outside the range of the UInt64 type.\n      //    Converted the Double value &#39;0&#39; to the UInt64 value 0.\n      //    Converted the Double value &#39;9.113E-16&#39; to the UInt64 value 0.\n      //    Converted the Double value &#39;103.919&#39; to the UInt64 value 104.\n      //    Converted the Double value &#39;17834.191&#39; to the UInt64 value 17834.\n      //    1.79769313486232E+308 is outside the range of the UInt64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#5\">      Dim values() As Double = { Double.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Double.MaxValue }\n      Dim result As ULong\n      \n      For Each value As Double In values\n         Try\n            result = Convert.ToUInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    The Double value -1.79769313486232E+308 is outside the range of the UInt64 type.\n      &#39;    The Double value -13800000000 is outside the range of the UInt64 type.\n      &#39;    The Double value -1023.299 is outside the range of the UInt64 type.\n      &#39;    The Double value -12.98 is outside the range of the UInt64 type.\n      &#39;    Converted the Double value &#39;0&#39; to the UInt64 value 0.\n      &#39;    Converted the Double value &#39;9.113E-16&#39; to the UInt64 value 0.\n      &#39;    Converted the Double value &#39;103.919&#39; to the UInt64 value 104.\n      &#39;    Converted the Double value &#39;17834.191&#39; to the UInt64 value 17834.\n      &#39;    The Double value 1.79769313486232E+308 is outside the range of the UInt64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Int16_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#6\">      short[] numbers= { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue };\n      ulong result;\n      \n      foreach (short number in numbers)\n      {\n         try {\n            result = Convert.ToUInt64(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to a {2} value {3}.&quot;,\n                                 number.GetType().Name, number,\n                                 result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, number);\n         }   \n      \n      }\n      // The example displays the following output:\n      //    -32768 is outside the range of the UInt64 type.\n      //    -1 is outside the range of the UInt64 type.\n      //    Converted the Int16 value 0 to a UInt64 value 0.\n      //    Converted the Int16 value 121 to a UInt64 value 121.\n      //    Converted the Int16 value 340 to a UInt64 value 340.\n      //    Converted the Int16 value 32767 to a UInt64 value 32767.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#6\">      Dim numbers() As Short = { Int16.MinValue, -1, 0, 121, 340, Int16.MaxValue }\n      Dim result As ULong\n      \n      For Each number As Short In numbers\n         Try\n            result = Convert.ToUInt64(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                                 number.GetType().Name, number, _\n                                 result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try   \n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int16 value -32768 is outside the range of the UInt64 type.\n      &#39;    The Int16 value -1 is outside the range of the UInt64 type.\n      &#39;    Converted the Int16 value 0 to the UInt64 value 0.\n      &#39;    Converted the Int16 value 121 to the UInt64 value 121.\n      &#39;    Converted the Int16 value 340 to the UInt64 value 340.\n      &#39;    Converted the Int16 value 32767 to the UInt64 value 32767.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of integers to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#7\">      int[] numbers = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue };\n      ulong result;\n\n      foreach (int number in numbers)\n      {\n         try {\n            result = Convert.ToUInt64(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         } \n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;,\n                              number.GetType().Name, number);\n         }   \n      }\n      // The example displays the following output:\n      //    The Int32 value -2147483648 is outside the range of the UInt64 type.\n      //    The Int32 value -1 is outside the range of the UInt64 type.\n      //    Converted the Int32 value 0 to the UInt64 value 0.\n      //    Converted the Int32 value 121 to the UInt64 value 121.\n      //    Converted the Int32 value 340 to the UInt64 value 340.\n      //    Converted the Int32 value 2147483647 to the UInt64 value 2147483647.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#7\">      Dim numbers() As Integer = { Int32.MinValue, -1, 0, 121, 340, Int32.MaxValue }\n      Dim result As ULong\n\n      For Each number As Integer In numbers\n         Try\n            result = Convert.ToUInt64(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try   \n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int32 value -2147483648 is outside the range of the UInt64 type.\n      &#39;    The Int32 value -1 is outside the range of the UInt64 type.\n      &#39;    Converted the Int32 value 0 to the UInt64 value 0.\n      &#39;    Converted the Int32 value 121 to the UInt64 value 121.\n      &#39;    Converted the Int32 value 340 to the UInt64 value 340.\n      &#39;    Converted the Int32 value 2147483647 to the UInt64 value 2147483647.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Int64_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of long integers to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#8\">      long[] numbers = { Int64.MinValue, -19432, -18, 0, 121, 340, Int64.MaxValue };\n      ulong result;\n      foreach (long number in numbers)\n      {\n         try {\n            result = Convert.ToUInt64(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    The Int64 value -9223372036854775808 is outside the range of the UInt64 type.\n      //    The Int64 value -19432 is outside the range of the UInt64 type.\n      //    The Int64 value -18 is outside the range of the UInt64 type.\n      //    Converted the Int64 value 0 to the UInt64 value 0.\n      //    Converted the Int64 value 121 to the UInt64 value 121.\n      //    Converted the Int64 value 340 to the UInt64 value 340.\n      //    Converted the Int64 value 9223372036854775807 to a UInt64 value 9223372036854775807.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#8\">      Dim numbers() As Long = { Int64.MinValue, -19432, -18, 0, 121, 340, Int64.MaxValue }\n      Dim result As ULong\n      \n      For Each number As Long In numbers\n         Try\n            result = Convert.ToUInt64(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The Int64 value -9223372036854775808 is outside the range of the UInt64 type.\n      &#39;    The Int64 value -19432 is outside the range of the UInt64 type.\n      &#39;    The Int64 value -18 is outside the range of the UInt64 type.\n      &#39;    Converted the Int64 value 0 to the UInt64 value 0.\n      &#39;    Converted the Int64 value 121 to the UInt64 value 121.\n      &#39;    Converted the Int64 value 340 to the UInt64 value 340.\n      &#39;    Converted the Int64 value 9223372036854775807 to the UInt64 value 9223372036854775807.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Object_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint64#System_UInt64_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.uint64#System_UInt64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt64_\" data-linktype=\"relative-path\">ToUInt64</a> method of the underlying type of <code>value</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an object array to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#9\">      object[] values = { true, -12, 163, 935, &#39;x&#39;, new DateTime(2009, 5, 12),\n                          &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;,\n                          &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2, 16.3e42};\n      ulong result;\n      \n      foreach (object value in values)\n      {\n         try {\n            result = Convert.ToUInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;,\n                              value.GetType().Name, value);\n         }                     \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }\n         catch (InvalidCastException) {\n            Console.WriteLine(&quot;No conversion to a UInt64 exists for the {0} value {1}.&quot;,\n                              value.GetType().Name, value);\n                              \n         }\n      }                           \n      // The example displays the following output:\n      //    Converted the Boolean value True to the UInt64 value 1.\n      //    The Int32 value -12 is outside the range of the UInt64 type.\n      //    Converted the Int32 value 163 to the UInt64 value 163.\n      //    Converted the Int32 value 935 to the UInt64 value 935.\n      //    Converted the Char value x to the UInt64 value 120.\n      //    No conversion to a UInt64 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      //    Converted the String value 104 to the UInt64 value 104.\n      //    The String value 103.0 is not in a recognizable format.\n      //    The String value -1 is outside the range of the UInt64 type.\n      //    The String value 1.00e2 is not in a recognizable format.\n      //    The String value One is not in a recognizable format.\n      //    Converted the Double value 100 to the UInt64 value 100.\n      //    The Double value 1.63E+43 is outside the range of the UInt64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#9\">      Dim values() As Object = { True, -12, 163, 935, &quot;x&quot;c, #5/12/2009#, _\n                                 &quot;104&quot;, &quot;103.0&quot;, &quot;-1&quot;, _\n                                 &quot;1.00e2&quot;, &quot;One&quot;, 1.00e2, 16.3e42}\n      Dim result As ULong\n      \n      For Each value As Object In values\n         Try\n            result = Convert.ToUInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value {1} is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         Catch e As InvalidCastException\n            Console.WriteLine(&quot;No conversion to a UInt64 exists for the {0} value {1}.&quot;, _\n                              value.GetType().Name, value)\n                              \n         End Try\n      Next                           \n      &#39; The example displays the following output:\n      &#39;    Converted the Boolean value True to the UInt64 value 1.\n      &#39;    The Int32 value -12 is outside the range of the UInt64 type.\n      &#39;    Converted the Int32 value 163 to the UInt64 value 163.\n      &#39;    Converted the Int32 value 935 to the UInt64 value 935.\n      &#39;    Converted the Char value x to the UInt64 value 120.\n      &#39;    No conversion to a UInt64 exists for the DateTime value 5/12/2009 12:00:00 AM.\n      &#39;    Converted the String value 104 to the UInt64 value 104.\n      &#39;    The String value 103.0 is not in a recognizable format.\n      &#39;    The String value -1 is outside the range of the UInt64 type.\n      &#39;    The String value 1.00e2 is not in a recognizable format.\n      &#39;    The String value One is not in a recognizable format.\n      &#39;    Converted the Double value 100 to the UInt64 value 100.\n      &#39;    The Double value 1.63E+43 is outside the range of the UInt64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_SByte_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 8-bit signed integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in a signed byte array to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#10\">      sbyte[] numbers = { SByte.MinValue, -1, 0, 10, SByte.MaxValue };\n      ulong result;\n      \n      foreach (sbyte number in numbers)\n      {\n         try {\n            result = Convert.ToUInt64(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;,\n                              number.GetType().Name, number);\n         }   \n      }\n      // The example displays the following output:\n      //    The SByte value -128 is outside the range of the UInt64 type.\n      //    The SByte value -1 is outside the range of the UInt64 type.\n      //    Converted the SByte value 0 to the UInt64 value 0.\n      //    Converted the SByte value 10 to the UInt64 value 10.\n      //    Converted the SByte value 127 to the UInt64 value 127.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#10\">      Dim numbers() As SByte = { SByte.MinValue, -1, 0, 10, SByte.MaxValue }\n      Dim result As ULong\n      \n      For Each number As SByte In numbers\n         Try\n            result = Convert.ToUInt64(number)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              number.GetType().Name, number, _\n                              result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;, _\n                              number.GetType().Name, number)\n         End Try\n      Next\n      &#39; The example displays the following output:\n      &#39;    The SByte value -128 is outside the range of the UInt64 type.\n      &#39;    The SByte value -1 is outside the range of the UInt64 type.\n      &#39;    Converted the SByte value 0 to the UInt64 value 0.\n      &#39;    Converted the SByte value 10 to the UInt64 value 10.\n      &#39;    Converted the SByte value 127 to the UInt64 value 127.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Single_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The single-precision floating-point number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, rounded to the nearest 64-bit unsigned integer. If <code>value</code> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than zero or greater than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to convert each element in an array of <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values to an unsigned long integer. The output shows that fractional values are rounded before the conversion is performed.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#11\">      float[] values= { Single.MinValue, -1.38e10f, -1023.299f, -12.98f,\n                        0f, 9.113e-16f, 103.919f, 17834.191f, Single.MaxValue };\n      ulong result;\n      \n      foreach (float value in values)\n      {\n         try {\n            result = Convert.ToUInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    -3.402823E+38 is outside the range of the UInt64 type.\n      //    -1.38E+10 is outside the range of the UInt64 type.\n      //    -1023.299 is outside the range of the UInt64 type.\n      //    -12.98 is outside the range of the UInt64 type.\n      //    Converted the Single value 0 to the UInt64 value 0.\n      //    Converted the Single value 9.113E-16 to the UInt64 value 0.\n      //    Converted the Single value 103.919 to the UInt64 value 104.\n      //    Converted the Single value 17834.19 to the UInt64 value 17834.\n      //    3.402823E+38 is outside the range of the UInt64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#11\">      Dim values() As Single = { Single.MinValue, -1.38e10, -1023.299, -12.98, _\n                                 0, 9.113e-16, 103.919, 17834.191, Single.MaxValue }\n      Dim result As ULong\n      \n      For Each value As Single In values\n         Try\n            result = Convert.ToUInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n   &#39;    The Single value -3.402823E+38 is outside the range of the UInt64 type.\n   &#39;    The Single value -1.38E+10 is outside the range of the UInt64 type.\n   &#39;    The Single value -1023.299 is outside the range of the UInt64 type.\n   &#39;    The Single value -12.98 is outside the range of the UInt64 type.\n   &#39;    Converted the Single value 0 to the UInt64 value 0.\n   &#39;    Converted the Single value 9.113E-16 to the UInt64 value 0.\n   &#39;    Converted the Single value 103.919 to the UInt64 value 104.\n   &#39;    Converted the Single value 17834.19 to the UInt64 value 17834.\n   &#39;    The Single value 3.402823E+38 is outside the range of the UInt64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_String_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> or greater than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_String_\" data-linktype=\"relative-path\">ToInt64(String)</a> method is equivalent to passing <code>value</code> to the <a class=\"xref\" href=\"system.int64#System_Int64_Parse_System_String_\" data-linktype=\"relative-path\">System.Int64.Parse(String)</a> method. <code>value</code> is interpreted by using the formatting conventions of the current thread culture.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.uint64#System_UInt64_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#12\">      string[] values = { &quot;One&quot;, &quot;1.34e28&quot;, &quot;-26.87&quot;, &quot;-18&quot;, &quot;-6.00&quot;,\n                          &quot; 0&quot;, &quot;137&quot;, &quot;1601.9&quot;, Int32.MaxValue.ToString() };\n      ulong result;\n      \n      foreach (string value in values)\n      {\n         try {\n            result = Convert.ToUInt64(value);\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;,\n                              value.GetType().Name, value, result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, value);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is not in a recognizable format.&quot;,\n                              value.GetType().Name, value);\n         }   \n      }                                 \n      // The example displays the following output:\n      //    The String value &#39;One&#39; is not in a recognizable format.\n      //    The String value &#39;1.34e28&#39; is not in a recognizable format.\n      //    The String value &#39;-26.87&#39; is not in a recognizable format.\n      //    -18 is outside the range of the UInt64 type.\n      //    The String value &#39;-6.00&#39; is not in a recognizable format.\n      //    Converted the String value &#39; 0&#39; to the UInt64 value 0.\n      //    Converted the String value &#39;137&#39; to the UInt64 value 137.\n      //    The String value &#39;1601.9&#39; is not in a recognizable format.\n      //    Converted the String value &#39;2147483647&#39; to the UInt64 value 2147483647.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#12\">      Dim values() As String = { &quot;One&quot;, &quot;1.34e28&quot;, &quot;-26.87&quot;, &quot;-18&quot;, &quot;-6.00&quot;, _\n                                 &quot; 0&quot;, &quot;137&quot;, &quot;1601.9&quot;, Int32.MaxValue.ToString() }\n      Dim result As ULong\n      \n      For Each value As String In values\n         Try\n            result = Convert.ToUInt64(value)\n            Console.WriteLine(&quot;Converted the {0} value &#39;{1}&#39; to the {2} value {3}.&quot;, _\n                              value.GetType().Name, value, result.GetType().Name, result)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, value)\n         Catch e As FormatException\n            Console.WriteLine(&quot;The {0} value &#39;{1}&#39; is not in a recognizable format.&quot;, _\n                              value.GetType().Name, value)\n         End Try   \n      Next                                 \n      &#39; The example displays the following output:\n      &#39;    The String value &#39;One&#39; is not in a recognizable format.\n      &#39;    The String value &#39;1.34e28&#39; is not in a recognizable format.\n      &#39;    The String value &#39;-26.87&#39; is not in a recognizable format.\n      &#39;    -18 is outside the range of the UInt64 type.\n      &#39;    The String value &#39;-6.00&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39; 0&#39; to the UInt64 value 0.\n      &#39;    Converted the String value &#39;137&#39; to the UInt64 value 137.\n      &#39;    The String value &#39;1601.9&#39; is not in a recognizable format.\n      &#39;    Converted the String value &#39;2147483647&#39; to the UInt64 value 2147483647.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_UInt16_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 16-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#13\">      ushort[] numbers = { UInt16.MinValue, 121, 340, UInt16.MaxValue };\n      ulong result;\n      \n      foreach (ushort number in numbers)\n      {\n         try {\n            result = Convert.ToUInt64(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt16 value 0 to the UInt64 value 0.\n      //    Converted the UInt16 value 121 to the UInt64 value 121.\n      //    Converted the UInt16 value 340 to the UInt64 value 340.\n      //    Converted the UInt16 value 65535 to the UInt64 value 65535.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#13\">      Dim numbers() As UShort = { UInt16.MinValue, 121, 340, UInt16.MaxValue }\n      Dim result As ULong\n\n      For Each number As UShort In numbers\n         result = Convert.ToUInt64(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt16 value 0 to the UInt64 value 0.\n      &#39;    Converted the UInt16 value 121 to the UInt64 value 121.\n      &#39;    Converted the UInt16 value 340 to the UInt64 value 340.\n      &#39;    Converted the UInt16 value 65535 to the UInt64 value 65535.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_UInt32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 32-bit unsigned integer to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each element in an unsigned integer array to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#14\">      uint[] numbers = { UInt32.MinValue, 121, 340, UInt32.MaxValue };\n      ulong result;\n      \n      foreach (uint number in numbers)\n      {\n         try {\n            result = Convert.ToUInt64(number);\n            Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;,\n                              number.GetType().Name, number,\n                              result.GetType().Name, result);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;The {0} value {1} is outside the range of the UInt64 type.&quot;,\n                              number.GetType().Name, number);\n         }\n      }\n      // The example displays the following output:\n      //    Converted the UInt32 value 0 to the UInt64 value 0.\n      //    Converted the UInt32 value 121 to the UInt64 value 121.\n      //    Converted the UInt32 value 340 to the UInt64 value 340.\n      //    Converted the UInt32 value 4294967295 to the UInt64 value 4294967295.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#14\">      Dim numbers() As UInteger = { UInt32.MinValue, 121, 340, UInt32.MaxValue }\n      Dim result As ULong\n\n      For Each number As UInteger In numbers\n         result = Convert.ToUInt64(number)\n         Console.WriteLine(&quot;Converted the {0} value {1} to the {2} value {3}.&quot;, _\n                           number.GetType().Name, number, _\n                           result.GetType().Name, result)\n      Next\n      &#39; The example displays the following output:\n      &#39;    Converted the UInt32 value 0 to the UInt64 value 0.\n      &#39;    Converted the UInt32 value 121 to the UInt64 value 121.\n      &#39;    Converted the UInt32 value 340 to the UInt64 value 340.\n      &#39;    Converted the UInt32 value 4294967295 to the UInt64 value 4294967295.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_UInt64_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-bit unsigned integer to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_Object_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Object,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (object value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to <code>value</code>, or zero if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not in an appropriate format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.  </p>\n<p> -or-  </p>\n<p> The conversion is not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint64#System_UInt64_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.uint64#System_UInt64_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt64_\" data-linktype=\"relative-path\">ToUInt64</a> method of the underlying type of <code>value</code>.  </p>\n<p> <code>provider</code> enables the user to specify culture-specific conversion information about the contents of <code>value</code>. For example, if <code>value</code> is a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents a number, <code>provider</code> could supply culture-specific information about the notation used to represent that number.  </p>\n<p> The base types ignore <code>provider</code>; however, the parameter may be used if <code>value</code> is a user-defined type that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>HexString</code> class that implements the <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values. The class includes a <code>Sign</code> property that indicates the sign of its hexadecimal value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#17\">using System;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic enum SignBit { Negative=-1, Zero=0, Positive=1 };\n\npublic struct HexString : IConvertible\n{\n   private SignBit signBit;\n   private string hexString;\n   \n   public SignBit Sign\n   {\n      set { signBit = value; }\n      get { return signBit; }\n   }\n   \n   public string Value\n   {\n      set \n      { \n         if (value.Trim().Length &gt; 16)\n            throw new ArgumentException(&quot;The hexadecimal representation of a 64-bit integer cannot have more than 16 characters.&quot;);\n         else if (! Regex.IsMatch(value, &quot;([0-9,A-F]){1,8}&quot;, RegexOptions.IgnoreCase))\n            throw new ArgumentException(&quot;The hexadecimal representation of a 64-bit integer contains invalid characters.&quot;);             \n         else\n            hexString = value;\n      } \n      get { return hexString; }\n   }\n   \n   // IConvertible implementations.\n   public TypeCode GetTypeCode() \n   {\n      return TypeCode.Object;\n   }\n   \n   public bool ToBoolean(IFormatProvider provider)\n   {\n      return signBit != SignBit.Zero;\n   } \n   \n   public byte ToByte(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToInt64(hexString, 16))); \n      else\n         try {\n            return Byte.Parse(hexString, NumberStyles.HexNumber);\n         }   \n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToUInt64(hexString, 16)), e);\n         }   \n   }\n   \n   public char ToChar(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative) \n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToInt64(hexString, 16)));\n      \n      try {\n         ushort codePoint = UInt16.Parse(this.hexString, NumberStyles.HexNumber);\n         return Convert.ToChar(codePoint);\n      }   \n      catch (OverflowException) {\n         throw new OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToUInt64(hexString, 16)));\n      }      \n   } \n   \n   public DateTime ToDateTime(IFormatProvider provider)\n   {\n      throw new InvalidCastException(&quot;Hexadecimal to DateTime conversion is not supported.&quot;);\n   }\n   \n   public decimal ToDecimal(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n      {\n         long hexValue = Int64.Parse(hexString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(hexValue);\n      }   \n      else\n      {\n         ulong hexValue = UInt64.Parse(hexString, NumberStyles.HexNumber);\n         return Convert.ToDecimal(hexValue);\n      }\n   }\n   \n   public double ToDouble(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToDouble(Int64.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Convert.ToDouble(UInt64.Parse(hexString, NumberStyles.HexNumber));\n   }   \n   \n   public short ToInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         try {\n            return Convert.ToInt16(Int64.Parse(hexString, NumberStyles.HexNumber));\n         }   \n         catch (OverflowException e) { \n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToInt64(hexString, 16)), e);\n         }\n      else\n         try {\n            return Convert.ToInt16(UInt64.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToUInt64(hexString, 16)), e);\n         }\n   }\n   \n   public int ToInt32(IFormatProvider provider)\n   {\n      if (signBit == SignBit.Negative)\n         try {\n            return Convert.ToInt32(Int64.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, Convert.ToUInt64(hexString, 16)), e);\n         }   \n      else\n         try {\n            return Convert.ToInt32(UInt64.Parse(hexString, NumberStyles.HexNumber));\n         }   \n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, Convert.ToUInt64(hexString, 16)), e);\n         }   \n   }\n   \n   public long ToInt64(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Int64.Parse(hexString, NumberStyles.HexNumber);\n      else\n         try {\n            return Convert.ToInt64(UInt64.Parse(hexString, NumberStyles.HexNumber));\n         }   \n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the Int64 type.&quot;, Convert.ToUInt64(hexString, 16)), e);\n         }\n   }\n   \n   public sbyte ToSByte(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         try {\n            return Convert.ToSByte(Int64.Parse(hexString, NumberStyles.HexNumber));\n         }   \n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, \n                                                      Int64.Parse(hexString, NumberStyles.HexNumber), e));\n         }\n      else\n         try {\n            return Convert.ToSByte(UInt64.Parse(hexString, NumberStyles.HexNumber));\n         }   \n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, \n                                                    UInt64.Parse(hexString, NumberStyles.HexNumber)), e);\n         }   \n   }\n\n   public float ToSingle(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         return Convert.ToSingle(Int64.Parse(hexString, NumberStyles.HexNumber));\n      else\n         return Convert.ToSingle(UInt64.Parse(hexString, NumberStyles.HexNumber));\n   }\n\n   public string ToString(IFormatProvider provider)\n   {\n      return &quot;0x&quot; + this.hexString;\n   }\n   \n   public object ToType(Type conversionType, IFormatProvider provider)\n   {\n      switch (Type.GetTypeCode(conversionType))\n      {\n         case TypeCode.Boolean: \n            return this.ToBoolean(null);\n         case TypeCode.Byte:\n            return this.ToByte(null);\n         case TypeCode.Char:\n            return this.ToChar(null);\n         case TypeCode.DateTime:\n            return this.ToDateTime(null);\n         case TypeCode.Decimal:\n            return this.ToDecimal(null);\n         case TypeCode.Double:\n            return this.ToDouble(null);\n         case TypeCode.Int16:\n            return this.ToInt16(null);\n         case TypeCode.Int32:\n            return this.ToInt32(null);\n         case TypeCode.Int64:\n            return this.ToInt64(null);\n         case TypeCode.Object:\n            if (typeof(HexString).Equals(conversionType))\n               return this;\n            else\n               throw new InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name));\n         case TypeCode.SByte:\n            return this.ToSByte(null);\n         case TypeCode.Single:\n            return this.ToSingle(null);\n         case TypeCode.String:\n            return this.ToString(null);\n         case TypeCode.UInt16:\n            return this.ToUInt16(null);\n         case TypeCode.UInt32:\n            return this.ToUInt32(null);\n         case TypeCode.UInt64:\n            return this.ToUInt64(null);   \n         default:\n            throw new InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name));   \n      }\n   }\n   \n   public ushort ToUInt16(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, \n                                                   Int64.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         try {\n            return Convert.ToUInt16(UInt64.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException e) {\n            throw new OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, Convert.ToUInt64(hexString, 16)), e);\n         }            \n   }\n\n   public uint ToUInt32(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, \n                                                   Int64.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         try {\n            return Convert.ToUInt32(UInt64.Parse(hexString, NumberStyles.HexNumber));\n         }\n         catch (OverflowException) {\n            throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, \n                                                      UInt64.Parse(hexString, NumberStyles.HexNumber)));\n         }   \n   }\n   \n   public ulong ToUInt64(IFormatProvider provider) \n   {\n      if (signBit == SignBit.Negative)\n         throw new OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, \n                                                   Int64.Parse(hexString, NumberStyles.HexNumber)));\n      else\n         return Convert.ToUInt64(hexString, 16);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#17\">Imports System.Globalization\nImports System.Text.RegularExpressions\n\nPublic Enum SignBit As Integer\n   Positive = 1\n   Zero = 0\n   Negative = -1\nEnd Enum\n\nPublic Structure HexString : Implements IConvertible\n   Private signBit As SignBit\n   Private hexString As String\n   \n   Public Property Sign As SignBit\n      Set\n         signBit = value\n      End Set\n      Get\n         Return signBit\n      End Get\n   End Property\n   \n   Public Property Value As String\n      Set\n         If value.Trim().Length &gt; 16 Then\n            Throw New ArgumentException(&quot;The hexadecimal representation of a 64-bit integer cannot have more than 16 characters.&quot;)\n         ElseIf Not Regex.IsMatch(value, &quot;([0-9,A-F]){1,8}&quot;, RegexOptions.IgnoreCase) Then\n            Throw New ArgumentException(&quot;The hexadecimal representation of a 64-bit integer contains invalid characters.&quot;)             \n         Else\n            hexString = value\n         End If   \n      End Set\n      Get\n         Return hexString\n      End Get\n   End Property\n   \n   &#39; IConvertible implementations.\n   Public Function GetTypeCode() As TypeCode _\n                   Implements IConvertible.GetTypeCode\n      Return TypeCode.Object\n   End Function\n   \n   Public Function ToBoolean(provider As IFormatProvider) As Boolean _\n                   Implements IConvertible.ToBoolean\n      Return signBit &lt;&gt; SignBit.Zero\n   End Function \n   \n   Public Function ToByte(provider As IFormatProvider) As Byte _\n                   Implements IConvertible.ToByte\n      If signBit = SignBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToInt64(hexString, 16))) \n      Else\n         Try\n            Return Byte.Parse(hexString, NumberStyles.HexNumber)\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Byte type.&quot;, Convert.ToUInt64(hexString, 16)), e)\n         End Try   \n      End If       \n   End Function\n   \n   Public Function ToChar(provider As IFormatProvider) As Char _\n                   Implements IConvertible.ToChar\n      If signBit = SignBit.Negative Then \n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToInt64(hexString, 16)))\n      End If\n      \n      Try\n         Dim codePoint As UInt16 = UInt16.Parse(Me.hexString, NumberStyles.HexNumber)\n         Return Convert.ToChar(codePoint)\n      Catch e As OverflowException\n         Throw New OverflowException(String.Format(&quot;{0} is out of range of the Char type.&quot;, Convert.ToUInt64(hexString, 16)))\n      End Try      \n   End Function \n   \n   Public Function ToDateTime(provider As IFormatProvider) As Date _\n                   Implements IConvertible.ToDateTime\n      Throw New InvalidCastException(&quot;Hexadecimal to DateTime conversion is not supported.&quot;)\n   End Function\n   \n   Public Function ToDecimal(provider As IFormatProvider) As Decimal _\n                   Implements IConvertible.ToDecimal\n      If signBit = SignBit.Negative Then\n         Dim hexValue As Long = Int64.Parse(hexString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(hexValue)\n      Else\n         Dim hexValue As ULong = UInt64.Parse(hexString, NumberStyles.HexNumber)\n         Return Convert.ToDecimal(hexValue)\n      End If\n   End Function\n   \n   Public Function ToDouble(provider As IFormatProvider) As Double _\n                   Implements IConvertible.ToDouble\n      If signBit = SignBit.Negative Then\n         Return Convert.ToDouble(Int64.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToDouble(UInt64.Parse(hexString, NumberStyles.HexNumber))\n      End If   \n   End Function   \n   \n   Public Function ToInt16(provider As IFormatProvider) As Int16 _\n                   Implements IConvertible.ToInt16\n      If signBit = SignBit.Negative Then\n         Try\n            Return Convert.ToInt16(Int64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToInt64(hexString, 16)), e)\n         End Try\n      Else\n         Try\n            Return Convert.ToInt16(UInt64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int16 type.&quot;, Convert.ToUInt64(hexString, 16)), e)\n         End Try\n      End If   \n   End Function\n   \n   Public Function ToInt32(provider As IFormatProvider) As Int32 _\n                   Implements IConvertible.ToInt32\n      If signBit = SignBit.Negative Then\n         Try\n            Return Convert.ToInt32(Int64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, Convert.ToUInt64(hexString, 16)), e)\n         End Try\n      Else\n         Try\n            Return Convert.ToInt32(UInt64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int32 type.&quot;, Convert.ToUInt64(hexString, 16)), e)\n         End Try   \n      End If   \n   End Function\n   \n   Public Function ToInt64(provider As IFormatProvider) As Int64 _\n                   Implements IConvertible.ToInt64\n      If signBit = SignBit.Negative Then\n         Return Int64.Parse(hexString, NumberStyles.HexNumber)\n      Else\n         Try\n            Return Convert.ToInt64(UInt64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the Int64 type.&quot;, Convert.ToUInt64(hexString, 16)), e)\n         End Try\n      End If   \n   End Function\n   \n   Public Function ToSByte(provider As IFormatProvider) As SByte _\n                   Implements IConvertible.ToSByte\n      If signBit = SignBit.Negative Then\n         Try\n            Return Convert.ToSByte(Int64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, _\n                                                      Int64.Parse(hexString, NumberStyles.HexNumber), e))\n         End Try\n      Else\n         Try\n            Return Convert.ToSByte(UInt64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is outside the range of the SByte type.&quot;, _\n                                                    UInt64.Parse(hexString, NumberStyles.HexNumber)), e)\n         End Try   \n      End If\n   End Function\n\n   Public Function ToSingle(provider As IFormatProvider) As Single _\n                   Implements IConvertible.ToSingle\n      If signBit = SignBit.Negative Then\n         Return Convert.ToSingle(Int64.Parse(hexString, NumberStyles.HexNumber))\n      Else\n         Return Convert.ToSingle(UInt64.Parse(hexString, NumberStyles.HexNumber))\n      End If   \n   End Function\n\n   Public Overloads Function ToString(provider As IFormatProvider) As String _\n                   Implements IConvertible.ToString\n      Return &quot;0x&quot; &amp; Me.hexString\n   End Function\n   \n   Public Function ToType(conversionType As Type, provider As IFormatProvider) As Object _\n                   Implements IConvertible.ToType\n      Select Case Type.GetTypeCode(conversionType)\n         Case TypeCode.Boolean \n            Return Me.ToBoolean(Nothing)\n         Case TypeCode.Byte\n            Return Me.ToByte(Nothing)\n         Case TypeCode.Char\n            Return Me.ToChar(Nothing)\n         Case TypeCode.DateTime\n            Return Me.ToDateTime(Nothing)\n         Case TypeCode.Decimal\n            Return Me.ToDecimal(Nothing)\n         Case TypeCode.Double\n            Return Me.ToDouble(Nothing)\n         Case TypeCode.Int16\n            Return Me.ToInt16(Nothing)\n         Case TypeCode.Int32\n            Return Me.ToInt32(Nothing)\n         Case TypeCode.Int64\n            Return Me.ToInt64(Nothing)\n         Case TypeCode.Object\n            If GetType(HexString).Equals(conversionType) Then\n               Return Me\n            Else\n               Throw New InvalidCastException(String.Format(&quot;Conversion to a {0} is not supported.&quot;, conversionType.Name))\n            End If \n         Case TypeCode.SByte\n            Return Me.ToSByte(Nothing)\n         Case TypeCode.Single\n            Return Me.ToSingle(Nothing)\n         Case TypeCode.String\n            Return Me.ToString(Nothing)\n         Case TypeCode.UInt16\n            Return Me.ToUInt16(Nothing)\n         Case TypeCode.UInt32\n            Return Me.ToUInt32(Nothing)\n         Case TypeCode.UInt64\n            Return Me.ToUInt64(Nothing)   \n         Case Else\n            Throw New InvalidCastException(String.Format(&quot;Conversion to {0} is not supported.&quot;, conversionType.Name))   \n      End Select\n   End Function\n   \n   Public Function ToUInt16(provider As IFormatProvider) As UInt16 _\n                   Implements IConvertible.ToUInt16\n      If signBit = SignBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt16 type.&quot;, _\n                                                   Int64.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Try\n            Return Convert.ToUInt16(UInt64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n            Throw New OverflowException(String.Format(&quot;{0} is out of range of the UInt16 type.&quot;, Convert.ToUInt64(hexString, 16)), e)\n         End Try            \n      End If   \n   End Function\n\n   Public Function ToUInt32(provider As IFormatProvider) As UInt32 _\n                   Implements IConvertible.ToUInt32\n      If signBit = SignBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                                                   Int64.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Try\n            Return Convert.ToUInt32(UInt64.Parse(hexString, NumberStyles.HexNumber))\n         Catch e As OverflowException\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt32 type.&quot;, _\n                                                   UInt64.Parse(hexString, NumberStyles.HexNumber)))\n         End Try   \n      End If   \n   End Function\n   \n   Public Function ToUInt64(provider As IFormatProvider) As UInt64 _\n                   Implements IConvertible.ToUInt64\n      If signBit = SignBit.Negative Then\n         Throw New OverflowException(String.Format(&quot;{0} is outside the range of the UInt64 type.&quot;, _\n                                                   Int64.Parse(hexString, NumberStyles.HexNumber)))\n      Else\n         Return Convert.ToUInt64(hexString, 16)\n      End If   \n   End Function\nEnd Structure\n</code></pre><p> The following example shows that a call to the ToUInt64 method that passes a <code>HexString</code> object as a parameter, in turn, calls the <a class=\"xref\" href=\"system.iconvertible#System_IConvertible_ToUInt64_\" data-linktype=\"relative-path\">ToUInt64</a> implementation of the <code>HexString</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#18\">public class Example\n{\n   public static void Main()\n   {\n      ulong positiveValue = UInt64.MaxValue - 100000;\n      long negativeValue = -1;\n      \n      \n      HexString positiveString = new HexString();\n      positiveString.Sign = (SignBit) Math.Sign((decimal)positiveValue);\n      positiveString.Value = positiveValue.ToString(&quot;X&quot;);\n      \n      HexString negativeString = new HexString();\n      negativeString.Sign = (SignBit) Math.Sign(negativeValue);\n      negativeString.Value = negativeValue.ToString(&quot;X&quot;);\n      \n      try {\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, positiveString.Value, Convert.ToUInt64(positiveString));\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, \n                           Int64.Parse(positiveString.Value, NumberStyles.HexNumber));\n      }                     \n\n      try {\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, negativeString.Value, Convert.ToUInt64(negativeString));\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, \n                           Int64.Parse(negativeString.Value, NumberStyles.HexNumber));\n      }                           \n   }\n}\n// The example displays the following output:\n//       0xFFFFFFFFFFFE795F converts to 18446744073709451615.\n//       -1 is outside the range of the UInt64 type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#18\">Module Example\n   Public Sub Main()\n      Dim positiveValue As UInt64 = CULng(UInt64.MaxValue - 100000)\n      Dim negativeValue As Int64 = -1\n      \n      \n      Dim positiveString As New HexString()\n      positiveString.Sign = CType(Math.Sign(positiveValue), SignBit)\n      positiveString.Value = positiveValue.ToString(&quot;X&quot;)\n      \n      Dim negativeString As New HexString()\n      negativeString.Sign = CType(Math.Sign(negativeValue), SignBit)\n      negativeString.Value = negativeValue.ToString(&quot;X&quot;)\n      \n      Try\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, positiveString.Value, Convert.ToUInt64(positiveString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, _\n                           Int64.Parse(positiveString.Value, NumberStyles.HexNumber))\n      End Try\n\n      Try\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, negativeString.Value, Convert.ToUInt64(negativeString))\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0} is outside the range of the UInt64 type.&quot;, _\n                           Int64.Parse(negativeString.Value, NumberStyles.HexNumber))\n      End Try   \n   End Sub\nEnd Module\n&#39; The example dosplays the following output:\n&#39;       0xFFFFFFFFFFFE795F converts to 18446744073709451615.\n&#39;       -1 is outside the range of the UInt64 type.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (string value, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not consist of an optional sign followed by a sequence of digits (0 through 9).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> or greater than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the result of invoking <a class=\"xref\" href=\"system.uint64#System_UInt64_Parse_\" data-linktype=\"relative-path\">Parse</a> on <code>value</code>.  </p>\n<p> <code>provider</code> is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that obtains a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object provides culture-specific information about the format of <code>value</code>. If <code>provider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture is used.  </p>\n<p> If you prefer not to handle an exception if the conversion fails, you can call the <a class=\"xref\" href=\"system.uint64#System_UInt64_TryParse_\" data-linktype=\"relative-path\">TryParse</a> method instead. It returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a custom <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that recognizes the string &quot;pos&quot; as the positive sign and the string &quot;neg&quot; as the negative sign. It then attempts to convert each element of a numeric string array to an unsigned long integer. The conversion uses both the custom provider and the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> provider for the invariant culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#15\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a NumberFormatInfo object and set several properties.\n      NumberFormatInfo provider = new NumberFormatInfo();\n      provider.PositiveSign = &quot;pos &quot;;\n      provider.NegativeSign = &quot;neg &quot;;\n\n      // Define an array of numeric strings.\n      string[] values = { &quot;123456789012&quot;, &quot;+123456789012&quot;,\n                          &quot;pos 123456789012&quot;, &quot;123456789012.&quot;,\n                          &quot;123,456,789,012&quot;, &quot;18446744073709551615&quot;,\n                          &quot;18446744073709551616&quot;, &quot;neg 1&quot;, &quot;-1&quot; };\n      //  Convert the strings using the format provider.\n      foreach (string value in values)\n      {\n         Console.Write(&quot;{0,-20}  --&gt;  &quot;, value);\n         try {\n            Console.WriteLine(&quot;{0,20}&quot;, Convert.ToUInt64(value, provider));\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;{0,20}&quot;, &quot;Invalid Format&quot;);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0,20}&quot;, &quot;Numeric Overflow&quot;);\n         }               \n      }\n   }\n}\n// The example displays the following output:\n//    123456789012          --&gt;          123456789012\n//    +123456789012         --&gt;        Invalid Format\n//    pos 123456789012      --&gt;          123456789012\n//    123456789012.         --&gt;        Invalid Format\n//    123,456,789,012       --&gt;        Invalid Format\n//    18446744073709551615  --&gt;  18446744073709551615\n//    18446744073709551616  --&gt;      Numeric Overflow\n//    neg 1                 --&gt;      Numeric Overflow\n//    -1                    --&gt;        Invalid Format\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#15\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Create a NumberFormatInfo object and set several properties.\n      Dim provider As New NumberFormatInfo()\n      provider.PositiveSign = &quot;pos &quot;\n      provider.NegativeSign = &quot;neg &quot;\n\n      &#39; Define an array of numeric strings.\n      Dim values() As String = { &quot;123456789012&quot;, &quot;+123456789012&quot;, _\n                                 &quot;pos 123456789012&quot;, &quot;123456789012.&quot;, _\n                                 &quot;123,456,789,012&quot;, &quot;18446744073709551615&quot;, _\n                                 &quot;18446744073709551616&quot;, &quot;neg 1&quot;, &quot;-1&quot; }\n      &#39;  Convert the strings using the format provider.\n      For Each value As String In values\n         Console.Write(&quot;{0,-20}  --&gt;  &quot;, value)\n         Try\n            Console.WriteLine(&quot;{0,20}&quot;, Convert.ToUInt64(value, provider))\n         Catch e As FormatException\n            Console.WriteLine(&quot;{0,20}&quot;, &quot;Invalid Format&quot;)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0,20}&quot;, &quot;Numeric Overflow&quot;)\n         End Try               \n      Next\n    End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;    123456789012          --&gt;          123456789012\n&#39;    +123456789012         --&gt;        Invalid Format\n&#39;    pos 123456789012      --&gt;          123456789012\n&#39;    123456789012.         --&gt;        Invalid Format\n&#39;    123,456,789,012       --&gt;        Invalid Format\n&#39;    18446744073709551615  --&gt;  18446744073709551615\n&#39;    18446744073709551616  --&gt;      Numeric Overflow\n&#39;    neg 1                 --&gt;      Numeric Overflow\n&#39;    -1                    --&gt;        Invalid Format\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Convert_ToUInt64_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Convert_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (string value, int fromBase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromBase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base of the number in <code>value</code>, which must be 2, 8, 10, or 16.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer that is equivalent to the number in <code>value</code>, or 0 (zero) if <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>fromBase</code> is not 2, 8, 10, or 16.  </p>\n<p> -or-  </p>\n<p> <code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> contains a character that is not a valid digit in the base specified by <code>fromBase</code>. The exception message indicates that there are no digits to convert if the first character in <code>value</code> is invalid; otherwise, the message indicates that <code>value</code> contains invalid trailing characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  </p>\n<p> -or-  </p>\n<p> <code>value</code> represents a number that is less than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> or greater than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>fromBase</code> is 16, you can prefix the number specified by the <code>value</code> parameter with &quot;0x&quot; or &quot;0X&quot;.  </p>\n<p> Because the <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> data type supports unsigned values only, the ToUInt64 method assumes that <code>value</code> is expressed using unsigned binary representation. In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed long integer value that is out of the range of the <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> data type is converted to a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> value without the method throwing an exception. The following example converts <a class=\"xref\" href=\"system.int64#System_Int64_MinValue\" data-linktype=\"relative-path\">MinValue</a> to its hexadecimal string representation, and then calls the ToUInt64 method. Instead of throwing an exception, the method displays the message, &quot;0x8000000000000000 converts to 9223372036854775808.&quot;  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#15\">      &#39; Create a hexadecimal value out of range of the UInt64 type.\n      Dim value As String = Convert.ToString(Long.MinValue, 16)\n      &#39; Convert it back to a number.\n      Try\n         Dim number As UInt64 = Convert.ToUInt64(value, 16)\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned long integer.&quot;, _\n                           value)\n      End Try   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#15\">      // Create a hexadecimal value out of range of the UInt64 type.\n      string value = Convert.ToString(Int64.MinValue, 16);\n      // Convert it back to a number.\n      try\n      {\n         UInt64 number = Convert.ToUInt64(value, 16);\n         Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, number);\n      }   \n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned long integer.&quot;, \n                           value);\n      }   \n</code></pre><p> When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two&#39;s complement representation when converting a hexadecimal string to a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.BaseConversion#16\">      &#39; Create a negative hexadecimal value out of range of the UInt64 type.\n      Dim sourceNumber As Long = Long.MinValue\n      Dim isSigned As Boolean = Math.Sign(sourceNumber.MinValue) = -1\n      Dim value As String = Convert.ToString(sourceNumber, 16)\n      Dim targetNumber As UInt64\n      Try\n         targetNumber = Convert.ToUInt64(value, 16)\n         If isSigned And ((targetNumber And &amp;H8000000000000000ul) &lt;&gt; 0) Then\n            Throw New OverflowException()\n         Else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber)\n         End If    \n      Catch e As OverflowException\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned long integer.&quot;, _\n                           value)\n      End Try \n      &#39; Displays the following to the console:\n      &#39;    Unable to convert &#39;0x8000&#39; to an unsigned long integer.     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.BaseConversion#16\">      // Create a negative hexadecimal value out of range of the UInt64 type.\n      long sourceNumber = Int64.MinValue;\n      bool isSigned = Math.Sign((long)sourceNumber.GetType().GetField(&quot;MinValue&quot;).GetValue(null)) == -1;\n      string value = Convert.ToString(sourceNumber, 16);\n      UInt64 targetNumber;\n      try\n      {\n         targetNumber = Convert.ToUInt64(value, 16);\n         if (isSigned &amp;&amp; ((targetNumber &amp; 0x8000000000000000) != 0))\n            throw new OverflowException();\n         else \n            Console.WriteLine(&quot;0x{0} converts to {1}.&quot;, value, targetNumber);\n      }\n      catch (OverflowException)\n      {\n         Console.WriteLine(&quot;Unable to convert &#39;0x{0}&#39; to an unsigned long integer.&quot;, \n                           value);\n      } \n      // Displays the following to the console:\n      //    Unable to convert &#39;0x8000000000000000&#39; to an unsigned long integer.     \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Convert.ToUInt64#16\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] hexStrings = { &quot;8000000000000000&quot;, &quot;0FFFFFFFFFFFFFFF&quot;,\n                              &quot;F000000000000000&quot;, &quot;00A3000000000000&quot;,\n                              &quot;D&quot;, &quot;-13&quot;, &quot;9AC61&quot;, &quot;GAD&quot;,\n                              &quot;FFFFFFFFFFFFFFFFF&quot; };\n      \n      foreach (string hexString in hexStrings)\n      {\n         Console.Write(&quot;{0,-18}  --&gt;  &quot;, hexString);\n         try {\n            ulong number = Convert.ToUInt64(hexString, 16);\n            Console.WriteLine(&quot;{0,26:N0}&quot;, number);\n         }   \n         catch (FormatException) {\n            Console.WriteLine(&quot;{0,26}&quot;, &quot;Bad Format&quot;);\n         }   \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0,26}&quot;, &quot;Numeric Overflow&quot;);\n         }   \n         catch (ArgumentException) {\n            Console.WriteLine(&quot;{0,26}&quot;, &quot;Invalid in Base 16&quot;);\n         }\n      }                                            \n   }\n}\n// The example displays the following output:\n//    8000000000000000    --&gt;   9,223,372,036,854,775,808\n//    0FFFFFFFFFFFFFFF    --&gt;   1,152,921,504,606,846,975\n//    F000000000000000    --&gt;  17,293,822,569,102,704,640\n//    00A3000000000000    --&gt;      45,880,421,203,836,928\n//    D                   --&gt;                          13\n//    -13                 --&gt;          Invalid in Base 16\n//    9AC61               --&gt;                     633,953\n//    GAD                 --&gt;                  Bad Format\n//    FFFFFFFFFFFFFFFFF   --&gt;            Numeric Overflow\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Convert.ToUInt64#16\">Module Example\n   Public Sub Main()\n      Dim hexStrings() As String = { &quot;8000000000000000&quot;, &quot;0FFFFFFFFFFFFFFF&quot;, _\n                                     &quot;F000000000000000&quot;, &quot;00A3000000000000&quot;, _\n                                     &quot;D&quot;, &quot;-13&quot;, &quot;9AC61&quot;, &quot;GAD&quot;, _\n                                     &quot;FFFFFFFFFFFFFFFFF&quot; }\n      For Each hexString As String In hexStrings\n         Console.Write(&quot;{0,-18}  --&gt;  &quot;, hexString)\n         Try\n            Dim number As ULong = Convert.ToUInt64(hexString, 16)\n            Console.WriteLine(&quot;{0,26:N0}&quot;, number)\n         Catch e As FormatException\n            Console.WriteLine(&quot;{0,26}&quot;, &quot;Bad Format&quot;)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0,26}&quot;, &quot;Numeric Overflow&quot;)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;{0,26}&quot;, &quot;Invalid in Base 16&quot;)\n         End Try\n      Next                                            \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    8000000000000000    --&gt;   9,223,372,036,854,775,808\n&#39;    0FFFFFFFFFFFFFFF    --&gt;   1,152,921,504,606,846,975\n&#39;    F000000000000000    --&gt;  17,293,822,569,102,704,640\n&#39;    00A3000000000000    --&gt;      45,880,421,203,836,928\n&#39;    D                   --&gt;                          13\n&#39;    -13                 --&gt;          Invalid in Base 16\n&#39;    9AC61               --&gt;                     633,953\n&#39;    GAD                 --&gt;                  Bad Format\n&#39;    FFFFFFFFFFFFFFFFF   --&gt;            Numeric Overflow\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Convert.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Convert.yml\">\r\n<meta name=\"APIName\" content=\"System.Convert\">\r\n<meta name=\"APIName\" content=\"System.Convert.ChangeType\">\r\n<meta name=\"APIName\" content=\"System.Convert.DBNull\">\r\n<meta name=\"APIName\" content=\"System.Convert.FromBase64CharArray\">\r\n<meta name=\"APIName\" content=\"System.Convert.FromBase64String\">\r\n<meta name=\"APIName\" content=\"System.Convert.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.Convert.IsDBNull\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToBase64CharArray\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToBase64String\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToChar\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToString\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Convert.ToUInt64\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"74769327-9d1b-1d03-151d-509ecf36a43f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Converts a base data type to another base data type.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Convert\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Convert.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Convert.yml","open_to_public_contributors":true,"api_name":["System.Convert","System.Convert.ChangeType","System.Convert.DBNull","System.Convert.FromBase64CharArray","System.Convert.FromBase64String","System.Convert.GetTypeCode","System.Convert.IsDBNull","System.Convert.ToBase64CharArray","System.Convert.ToBase64String","System.Convert.ToBoolean","System.Convert.ToByte","System.Convert.ToChar","System.Convert.ToDateTime","System.Convert.ToDecimal","System.Convert.ToDouble","System.Convert.ToInt16","System.Convert.ToInt32","System.Convert.ToInt64","System.Convert.ToSByte","System.Convert.ToSingle","System.Convert.ToString","System.Convert.ToUInt16","System.Convert.ToUInt32","System.Convert.ToUInt64"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Convert","System::Convert","System.Convert.ChangeType","System::Convert::ChangeType","System.Convert.DBNull","System::Convert::DBNull","System.Convert.FromBase64CharArray","System::Convert::FromBase64CharArray","System.Convert.FromBase64String","System::Convert::FromBase64String","System.Convert.GetTypeCode","System::Convert::GetTypeCode","System.Convert.IsDBNull","System::Convert::IsDBNull","System.Convert.ToBase64CharArray","System::Convert::ToBase64CharArray","System.Convert.ToBase64String","System::Convert::ToBase64String","System.Convert.ToBoolean","System::Convert::ToBoolean","System.Convert.ToByte","System::Convert::ToByte","System.Convert.ToChar","System::Convert::ToChar","System.Convert.ToDateTime","System::Convert::ToDateTime","System.Convert.ToDecimal","System::Convert::ToDecimal","System.Convert.ToDouble","System::Convert::ToDouble","System.Convert.ToInt16","System::Convert::ToInt16","System.Convert.ToInt32","System::Convert::ToInt32","System.Convert.ToInt64","System::Convert::ToInt64","System.Convert.ToSByte","System::Convert::ToSByte","System.Convert.ToSingle","System::Convert::ToSingle","System.Convert.ToString","System::Convert::ToString","System.Convert.ToUInt16","System::Convert::ToUInt16","System.Convert.ToUInt32","System::Convert::ToUInt32","System.Convert.ToUInt64","System::Convert::ToUInt64"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"74769327-9d1b-1d03-151d-509ecf36a43f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Convert.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Convert class | Microsoft Docs","_op_ogTitle":"Convert class","description":"Converts a base data type to another base data type.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Convert","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.convert","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.convert","fileRelativePath":"System.Convert.html"},"themesRelativePathToOutputRoot":"_themes/"}