{"content":"    \r\n    <h1 id=\"System_Func_1\">\r\n      <span class=\"lang-csharp\">Func&lt;TResult&gt;</span>\r\n        Delegate\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Encapsulates a method that has no parameters and returns a value of the type specified by the <code>TResult</code> parameter.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic delegate TResult Func&lt;out TResult&gt;();</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTResult\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the return value of the method that this delegate encapsulates.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Func&lt;TResult&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and must return a value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has no parameters and returns <code>void</code> (or in Visual Basic, that is declared as a <code>Sub</code> rather than as a <code>Function</code>), use the <a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a> delegate instead.  </p>\n</div>\n<p> When you use the Func(TResult) delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method. For example, the following code explicitly declares a delegate named <code>WriteMethod</code> and assigns a reference to the <code>OutputTarget.SendToFile</code> instance method to its delegate instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#1\">using System;\nusing System.IO;\n\ndelegate bool WriteMethod();\n\npublic class TestDelegate\n{\n   public static void Main()\n   {\n      OutputTarget output = new OutputTarget();\n      WriteMethod methodCall = output.SendToFile;\n      if (methodCall())\n         Console.WriteLine(&quot;Success!&quot;); \n      else\n         Console.WriteLine(&quot;File write operation failed.&quot;);\n   }\n}\n\npublic class OutputTarget\n{\n   public bool SendToFile()\n   {\n      try\n      {\n         string fn = Path.GetTempFileName();\n         StreamWriter sw = new StreamWriter(fn);\n         sw.WriteLine(&quot;Hello, World!&quot;);\n         sw.Close();\n         return true;\n      }  \n      catch\n      {\n         return false;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~1#1\">Imports System.IO\n\nDelegate Function WriteMethod As Boolean\n\nModule TestDelegate\n   Public Sub Main()\n      Dim output As New OutputTarget()\n      Dim methodCall As WriteMethod = AddressOf output.SendToFile\n      If methodCall() Then \n         Console.WriteLine(&quot;Success!&quot;)\n      Else\n         Console.WriteLine(&quot;File write operation failed.&quot;)\n      End If      \n   End Sub\nEnd Module\n\nPublic Class OutputTarget\n   Public Function SendToFile() As Boolean\n      Try\n         Dim fn As String = Path.GetTempFileName\n         Dim sw As StreamWriter = New StreamWriter(fn)\n         sw.WriteLine(&quot;Hello, World!&quot;)\n         sw.Close      \n         Return True\n      Catch\n         Return False\n      End Try\n   End Function\nEnd Class\n</code></pre><p> The following example simplifies this code by instantiating the Func(TResult) delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#2\">using System;\nusing System.IO;\n\npublic class TestDelegate\n{\n   public static void Main()\n   {\n      OutputTarget output = new OutputTarget();\n      Func&lt;bool&gt; methodCall = output.SendToFile;\n      if (methodCall())\n         Console.WriteLine(&quot;Success!&quot;); \n      else\n         Console.WriteLine(&quot;File write operation failed.&quot;);\n   }\n}\n\npublic class OutputTarget\n{\n   public bool SendToFile()\n   {\n      try\n      {\n         string fn = Path.GetTempFileName();\n         StreamWriter sw = new StreamWriter(fn);\n         sw.WriteLine(&quot;Hello, World!&quot;);\n         sw.Close();\n         return true;\n      }  \n      catch\n      {\n         return false;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~1#2\">Imports System.IO\n\nModule TestDelegate\n   Public Sub Main()\n      Dim output As New OutputTarget()\n      Dim methodCall As Func(Of Boolean) = AddressOf output.SendToFile\n      If methodCall() Then \n         Console.WriteLine(&quot;Success!&quot;)\n      Else\n         Console.WriteLine(&quot;File write operation failed.&quot;)\n      End If      \n   End Sub\nEnd Module\n\nPublic Class OutputTarget\n   Public Function SendToFile() As Boolean\n      Try\n         Dim fn As String = Path.GetTempFileName\n         Dim sw As StreamWriter = New StreamWriter(fn)\n         sw.WriteLine(&quot;Hello, World!&quot;)\n         sw.Close      \n         Return True\n      Catch\n         Return False\n      End Try\n   End Function\nEnd Class\n</code></pre><p> You can use the Func(TResult) delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../Topic/Anonymous%20Methods%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#3\">using System;\nusing System.IO;\n\npublic class Anonymous\n{\n   public static void Main()\n   {\n      OutputTarget output = new OutputTarget();\n      Func&lt;bool&gt; methodCall = delegate() { return output.SendToFile(); };\n      if (methodCall())\n         Console.WriteLine(&quot;Success!&quot;); \n      else\n         Console.WriteLine(&quot;File write operation failed.&quot;);\n   }\n}\n\npublic class OutputTarget\n{\n   public bool SendToFile()\n   {\n      try\n      {\n         string fn = Path.GetTempFileName();\n         StreamWriter sw = new StreamWriter(fn);\n         sw.WriteLine(&quot;Hello, World!&quot;);\n         sw.Close();\n         return true;\n      }  \n      catch\n      {\n         return false;\n      }\n   }\n}\n</code></pre><p> You can also assign a lambda expression to a <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> delegate, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../Topic/Lambda%20Expressions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Lambda Expressions</a> and <a href=\"../Topic/Lambda%20Expressions%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#4\">using System;\nusing System.IO;\n\npublic class Anonymous\n{\n   public static void Main()\n   {\n      OutputTarget output = new OutputTarget();\n      Func&lt;bool&gt; methodCall = () =&gt; output.SendToFile(); \n      if (methodCall())\n         Console.WriteLine(&quot;Success!&quot;); \n      else\n         Console.WriteLine(&quot;File write operation failed.&quot;);\n   }\n}\n\npublic class OutputTarget\n{\n   public bool SendToFile()\n   {\n      try\n      {\n         string fn = Path.GetTempFileName();\n         StreamWriter sw = new StreamWriter(fn);\n         sw.WriteLine(&quot;Hello, World!&quot;);\n         sw.Close();\n         return true;\n      }  \n      catch\n      {\n         return false;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~1#4\">Imports System.IO\n\nModule TestDelegate\n   Public Sub Main()\n      Dim output As New OutputTarget()\n      Dim methodCall As Func(Of Boolean) = Function() output.SendToFile()\n      If methodCall() Then \n         Console.WriteLine(&quot;Success!&quot;)\n      Else\n         Console.WriteLine(&quot;File write operation failed.&quot;)\n      End If      \n   End Sub\nEnd Module\n\nPublic Class OutputTarget\n   Public Function SendToFile() As Boolean\n      Try\n         Dim fn As String = Path.GetTempFileName\n         Dim sw As StreamWriter = New StreamWriter(fn)\n         sw.WriteLine(&quot;Hello, World!&quot;)\n         sw.Close      \n         Return True\n      Catch\n         Return False\n      End Try\n   End Function\nEnd Class\n</code></pre><p> The underlying type of a lambda expression is one of the generic <code>Func</code> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <a class=\"xref\" href=\"system.linq\" data-linktype=\"relative-path\">System.Linq</a> namespace have <code>Func</code> parameters, you can pass these methods a lambda expression without explicitly instantiating a <code>Func</code> delegate.  </p>\n<p> If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a Func(TResult) delegate. The execution of the function can then be delayed until a property that accesses the value is used in an expression. The example in the next section demonstrates how to do this.</p>\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Func-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Func-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"71ac5b92-b3c2-7188-14a2-a75a94283c6b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has no parameters and returns a value of the type specified by the TResult parameter.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Func`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Func-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Func-1.yml","open_to_public_contributors":true,"api_name":["System.Func<TResult>","System.Func<TResult>..ctor","System.Func<TResult>.Invoke","System.Func<TResult>.BeginInvoke","System.Func<TResult>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Func`1","System::Func`1"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"71ac5b92-b3c2-7188-14a2-a75a94283c6b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Func`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Func<TResult> delegate | Microsoft Docs","_op_ogTitle":"Func<TResult> delegate","description":"Encapsulates a method that has no parameters and returns a value of the type specified by the TResult parameter.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Func`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.func-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.func-1","fileRelativePath":"System.Func-1.html"},"themesRelativePathToOutputRoot":"_themes/"}