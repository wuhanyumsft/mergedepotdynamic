{"content":"    \r\n    <h1 id=\"System_Object\">\r\n      <span class=\"lang-csharp\">Object</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/object.cs#d9262ceecc1719ab\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class Object</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/object.cs#d9262ceecc1719ab\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Languages typically do not require a class to declare inheritance from Object because the inheritance is implicit.  </p>\n<p> Because all classes in the .NET Framework are derived from Object, every method defined in the Object class is available in all objects in the system. Derived classes can and do override some of these methods, including:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> - Supports comparisons between objects.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> - Performs cleanup operations before an object is automatically reclaimed.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> - Generates a number corresponding to the value of the object to support the use of a hash table.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> - Manufactures a human-readable text string that describes an instance of the class.  </p>\n</li>\n</ul>\n<h2 id=\"performance-considerations\">Performance Considerations</h2>\n<p> If you are designing a class, such as a collection, that must handle any type of object, you can create class members that accept instances of the Object class. However, the process of boxing and unboxing a type carries a performance cost. If you know your new class will frequently handle certain value types you can use one of two tactics to minimize the cost of boxing.  </p>\n<ul>\n<li><p>Create a general method that accepts an Object type, and a set of type-specific method overloads that accept each value type you expect your class to frequently handle. If a type-specific method exists that accepts the calling parameter type, no boxing occurs and the type-specific method is invoked. If there is no method argument that matches the calling parameter type, the parameter is boxed and the general method is invoked.  </p>\n</li>\n<li><p>Design your type and its members to use generics. The common language runtime creates a closed generic type when you create an instance of your class and specify a generic type argument. The generic method is type-specific and can be invoked without boxing the calling parameter.  </p>\n<p>Although it is sometimes necessary to develop general purpose classes that accept and return Object types, you can improve performance by also providing a type-specific class to handle a frequently used type. For example, providing a class that is specific to setting and getting Boolean values eliminates the cost of boxing and unboxing Boolean values.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object__ctor\" data-linktype=\"self-bookmark\">Object()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object is equal to the current object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object instances are considered equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as the default hash function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object_GetType\" data-linktype=\"self-bookmark\">GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object_MemberwiseClone\" data-linktype=\"self-bookmark\">MemberwiseClone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"self-bookmark\">ReferenceEquals(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> instances are the same instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Object_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the current object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Object__ctor\">\r\n    \r\n            <a id=\"System_Object__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Object()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Object ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called by constructors in derived classes, but it can also be used to directly create an instance of the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Object_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Object_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object is equal to the current object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified object  is equal to the current object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The type of comparison between the current instance and the <code>obj</code> parameter depends on whether the current instance is a reference type or a value type.  </p>\n<ul>\n<li><p>If the current instance is a reference type, the Equals method tests for reference equality, and a call to the Equals method is equivalent to a call to the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method. Reference equality means that the object variables that are compared refer to the same object. The following example illustrates the result of such a comparison. It defines a <code>Person</code> class, which is a reference type, and calls the <code>Person</code> class constructor to instantiate two new <code>Person</code> objects, <code>person1a</code> and <code>person2</code>, which have the same value. It also assigns <code>person1a</code> to another object variable, <code>person1b</code>. As the output from the example shows, <code>person1a</code> and <code>person1b</code> are equal because they reference the same object. However, <code>person1a</code> and <code>person2</code> are not equal, although they have the same value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.Equals#2\">using System;\n\n// Define a reference type that does not override Equals.\npublic class Person\n{\n   private string personName;\n   \n   public Person(string name)\n   {\n      this.personName = name;\n   }\n   \n   public override string ToString()\n   {\n      return this.personName;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Person person1a = new Person(&quot;John&quot;);\n      Person person1b = person1a;\n      Person person2 = new Person(person1a.ToString());\n      \n      Console.WriteLine(&quot;Calling Equals:&quot;); \n      Console.WriteLine(&quot;person1a and person1b: {0}&quot;, person1a.Equals(person1b));               \n      Console.WriteLine(&quot;person1a and person2: {0}&quot;, person1a.Equals(person2));  \n      \n      Console.WriteLine(&quot;\\nCasting to an Object and calling Equals:&quot;);\n      Console.WriteLine(&quot;person1a and person1b: {0}&quot;, ((object) person1a).Equals((object) person1b));\n      Console.WriteLine(&quot;person1a and person2: {0}&quot;, ((object) person1a).Equals((object) person2)); \n   }\n}\n// The example displays the following output:\n//       person1a and person1b: True\n//       person1a and person2: False\n//       \n//       Casting to an Object and calling Equals:\n//       person1a and person1b: True\n//       person1a and person2: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.Equals#2\">&#39; Define a reference type that does not override Equals.\nPublic Class Person\n   Private personName As String\n   \n   Public Sub New(name As String)\n      Me.personName = name\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.personName\n   End Function \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim person1a As New Person(&quot;John&quot;)\n      Dim person1b As Person = person1a\n      Dim person2 As New Person(person1a.ToString())\n      \n      Console.WriteLine(&quot;Calling Equals:&quot;) \n      Console.WriteLine(&quot;person1a and person1b: {0}&quot;, person1a.Equals(person1b))               \n      Console.WriteLine(&quot;person1a and person2: {0}&quot;, person1a.Equals(person2))  \n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Casting to an Object and calling Equals:&quot;)\n      Console.WriteLine(&quot;person1a and person1b: {0}&quot;, CObj(person1a).Equals(CObj(person1b)))\n      Console.WriteLine(&quot;person1a and person2: {0}&quot;, CObj(person1a).Equals(CObj(person2))) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Calling Equals:\n&#39;       person1a and person1b: True\n&#39;       person1a and person2: False\n&#39;       \n&#39;       Casting to an Object and calling Equals:\n&#39;       person1a and person1b: True\n&#39;       person1a and person2: False\n</code></pre></li>\n<li><p>If the current instance is a value type, the Equals method tests for value equality. Value equality means the following:  </p>\n<ul>\n<li><p>The two objects are of the same type. As the following example shows, a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> object that has a value of 12 does not equal an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> object that has a value of 12, because the two objects have different run-time types.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Object.Equals#3\">Module Example\n   Public Sub Main()\n      Dim value1 As Byte = 12\n      Dim value2 As Integer = 12\n      \n      Dim object1 As Object = value1\n      Dim object2 As Object = value2\n      \n      Console.WriteLine(&quot;{0} ({1}) = {2} ({3}): {4}&quot;,\n                        object1, object1.GetType().Name,\n                        object2, object2.GetType().Name,\n                        object1.Equals(object2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       12 (Byte) = 12 (Int32): False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.Equals#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      byte value1 = 12;\n      int value2 = 12;\n      \n      object object1 = value1;\n      object object2 = value2;\n      \n      Console.WriteLine(&quot;{0} ({1}) = {2} ({3}): {4}&quot;,\n                        object1, object1.GetType().Name,\n                        object2, object2.GetType().Name,\n                        object1.Equals(object2));\n   }\n}\n// The example displays the following output:\n//        12 (Byte) = 12 (Int32): False\n</code></pre></li>\n<li><p>The values of the public and private fields of the two objects are equal. The following example tests for value equality. It defines a <code>Person</code> structure, which is a value type, and calls the <code>Person</code> class constructor to instantiate two new <code>Person</code> objects, <code>person1</code> and <code>person2</code>, which have the same value. As the output from the example shows, although the two object variables refer to different objects, <code>person1</code> and <code>person2</code> are equal because they have the same value for the private <code>personName</code> field.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Object.Equals#4\">&#39; Define a value type that does not override Equals.\nPublic Structure Person\n   Private personName As String\n   \n   Public Sub New(name As String)\n      Me.personName = name\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.personName\n   End Function \nEnd Structure\n\nModule Example\n   Public Sub Main()\n      Dim p1 As New Person(&quot;John&quot;)\n      Dim p2 As New Person(&quot;John&quot;)\n      \n      Console.WriteLine(&quot;Calling Equals:&quot;) \n      Console.WriteLine(p1.Equals(p2))\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Casting to an Object and calling Equals:&quot;)\n      Console.WriteLine(CObj(p1).Equals(p2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Calling Equals:\n&#39;       True\n&#39;       \n&#39;       Casting to an Object and calling Equals:\n&#39;       True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.Equals#4\">using System;\n\n// Define a value type that does not override Equals.\npublic struct Person\n{\n   private string personName;\n   \n   public Person(string name)\n   {\n      this.personName = name;\n   }\n   \n   public override string ToString()\n   {\n      return this.personName;\n   }\n}\n\npublic struct Example\n{\n   public static void Main()\n   {\n      Person person1 = new Person(&quot;John&quot;);\n      Person person2 = new Person(&quot;John&quot;);\n      \n      Console.WriteLine(&quot;Calling Equals:&quot;); \n      Console.WriteLine(person1.Equals(person2)); \n      \n      Console.WriteLine(&quot;\\nCasting to an Object and calling Equals:&quot;);\n      Console.WriteLine(((object) person1).Equals((object) person2));  \n   }\n}\n// The example displays the following output:\n//       Calling Equals:\n//       True\n//       \n//       Casting to an Object and calling Equals:\n//       True\n</code></pre></li>\n</ul>\n<p>Because the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> class is the base class for all types in the .NET Framework, the Equals method provides the default equality comparison for all other types. However, types often override the Equals method to implement value equality. For more information, see the Notes for Callers and Notes for Inheritors sections.  </p>\n</li>\n</ul>\n<h2 id=\"notes-for-the-includewrtaddincludeswrt-mdmd\">Notes for the Windows Runtime</h2>\n<p> When you call the Equals method overload on a class in the Windows Runtime, it provides the default behavior for classes that donâ€™t override Equals. This is part of the support that the .NET Framework provides for the Windows Runtime (see <a href=\"../Topic/.NET%20Framework%20Support%20for%20Windows%20Store%20Apps%20and%20Windows%20Runtime.md\" data-linktype=\"relative-path\">.NET Framework Support for Windows Store Apps and Windows Runtime</a>). Classes in the Windows Runtime donâ€™t inherit <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, and currently donâ€™t implement an Equalsmethod. However, they appear to have <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>, Equals, and <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Windows Runtime classes that are written in C# or Visual Basic can override the Equals method overload.  </p>\n</div>\n<h2 id=\"notes-for-callers\">Notes for Callers</h2>\n<p> Derived classes frequently override the Equals method to implement value equality. In addition, types also frequently provide an additional strongly typed overload to the <code>Equals</code> method, typically by implementing the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface. When you call the <code>Equals</code> method to test for equality, you should know whether the current instance overrides Equals and understand how a particular call to an <code>Equals</code> method is resolved. Otherwise, you may be performing a test for equality that is different from what you intended, and the method may return an unexpected value.  </p>\n<p> The following example provides an illustration. It instantiates three <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects with identical strings, and then makes four calls to <code>Equals</code> methods. The first method call returns <code>true</code>, and the remaining three return <code>false</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Object.Equals#5\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim sb1 As New StringBuilder(&quot;building a string...&quot;)\n      Dim sb2 As New StringBuilder(&quot;building a string...&quot;)\n      \n      Console.WriteLine(&quot;sb1.Equals(sb2): {0}&quot;, sb1.Equals(sb2))\n      Console.WriteLine(&quot;CObj(sb1).Equals(sb2): {0}&quot;, \n                        CObj(sb1).Equals(sb2))\n      Console.WriteLine(&quot;Object.Equals(sb1, sb2): {0}&quot;,\n                        Object.Equals(sb1, sb2))                  \n      \n      Console.WriteLine()\n      Dim sb3 As Object = New StringBuilder(&quot;building a string...&quot;)\n      Console.WriteLine(&quot;sb3.Equals(sb2): {0}&quot;, sb3.Equals(sb2))                              \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       sb1.Equals(sb2): True\n&#39;       CObj(sb1).Equals(sb2): False\n&#39;       Object.Equals(sb1, sb2): False\n&#39;\n&#39;       sb3.Equals(sb2): False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.Equals#5\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StringBuilder sb1 = new StringBuilder(&quot;building a string...&quot;);\n      StringBuilder sb2 = new StringBuilder(&quot;building a string...&quot;);\n      \n      Console.WriteLine(&quot;sb1.Equals(sb2): {0}&quot;, sb1.Equals(sb2));\n      Console.WriteLine(&quot;((Object) sb1).Equals(sb2): {0}&quot;, \n                        ((Object) sb1).Equals(sb2));\n      Console.WriteLine(&quot;Object.Equals(sb1, sb2): {0}&quot;,\n                        Object.Equals(sb1, sb2));      \n                        \n      Object sb3 = new StringBuilder(&quot;building a string...&quot;);\n      Console.WriteLine(&quot;\\nsb3.Equals(sb2): {0}&quot;, sb3.Equals(sb2));                              \n   }\n}\n// The example displays the following output:\n//       sb1.Equals(sb2): True\n//       ((Object) sb1).Equals(sb2): False\n//       Object.Equals(sb1, sb2): False\n//\n//       sb3.Equals(sb2): False\n</code></pre><p> In the first case, the strongly typed <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Equals_System_Text_StringBuilder_\" data-linktype=\"relative-path\">System.Text.StringBuilder.Equals(StringBuilder)</a> method overload, which tests for value equality, is called. Because the strings assigned to the two <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects are equal, the method returns <code>true</code>. However, <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> does not override Equals. Because of this, when the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is cast to an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, when a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance is assigned to a variable of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, and when the <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object,Object)</a> method is passed two <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects, the default Equals method is called. Because <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> is a reference type, this is equivalent to passing the two <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects to the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method. Although all three <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects contain identical strings, they refer to three distinct objects. As a result, these three method calls return <code>false</code>.  </p>\n<p> You can compare the current object to another object for reference equality by calling the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method. In Visual Basic, you can also use the <code>is</code> keyword (for example, <code>If Me Is otherObject Then ...</code>).  </p>\n<h2 id=\"notes-for-inheritors\">Notes for Inheritors</h2>\n<p> When you define your own type, that type inherits the functionality defined by the <code>Equals</code> method of its base type. The following table lists the default implementation of the <code>Equals</code> method for the major categories of types in the .NET Framework.  </p>\n<table>\n<thead>\n<tr>\n<th>Type category</th>\n<th>Equality defined by</th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class derived directly from <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></td>\n<td>Equals</td>\n<td>Reference equality; equivalent to calling <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a>.</td>\n</tr>\n<tr>\n<td>Structure</td>\n<td><a class=\"xref\" href=\"system.valuetype#System_ValueType_Equals_\" data-linktype=\"relative-path\">Equals</a></td>\n<td>Value equality; either direct byte-by-byte comparison or field-by-field comparison using reflection.</td>\n</tr>\n<tr>\n<td>Enumeration</td>\n<td><a class=\"xref\" href=\"system.enum#System_Enum_Equals_\" data-linktype=\"relative-path\">Equals</a></td>\n<td>Values must have the same enumeration type and the same underlying value.</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td><a class=\"xref\" href=\"system.multicastdelegate#System_MulticastDelegate_Equals_\" data-linktype=\"relative-path\">Equals</a></td>\n<td>Delegates must have the same type with identical invocation lists.</td>\n</tr>\n<tr>\n<td>Interface</td>\n<td>Equals</td>\n<td>Reference equality.</td>\n</tr>\n</tbody>\n</table>\n<p> For a value type, you should always override Equals, because tests for equality that rely on reflection offer poor performance. You can also override the default implementation of Equals for reference types to test for value equality instead of reference equality and to define the precise meaning of value equality. Such implementations of Equals return <code>true</code> if the two objects have the same value, even if they are not the same instance. The type&#39;s implementer decides what constitutes an object&#39;s value, but it is typically some or all the data stored in the instance variables of the object. For example, the value of a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is based on the characters of the string; the <a class=\"xref\" href=\"system.string#System_String_Equals_System_Object_\" data-linktype=\"relative-path\">System.String.Equals(Object)</a> method overrides the Equals method to return <code>true</code> for any two string instances that contain the same characters in the same order.  </p>\n<p> The following example shows how to override the Equals method to test for value equality. It overrides the Equals method for the <code>Person</code> class. If <code>Person</code> accepted its base class implementation of equality, two <code>Person</code> objects would be equal only if they referenced a single object. However, in this case, two <code>Person</code> objects are equal if they have the same value for the <code>Person.Id</code> property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Object.Equals#6\">Public Class Person\n   Private idNumber As String\n   Private personName As String\n   \n   Public Sub New(name As String, id As String)\n      Me.personName = name\n      Me.idNumber = id\n   End Sub\n   \n   Public Overrides Function Equals(obj As Object) As Boolean\n      Dim personObj As Person = TryCast(obj, Person) \n      If personObj Is Nothing Then\n         Return False\n      Else\n         Return idNumber.Equals(personObj.idNumber)\n      End If   \n   End Function\n   \n   Public Overrides Function GetHashCode() As Integer\n      Return Me.idNumber.GetHashCode() \n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim p1 As New Person(&quot;John&quot;, &quot;63412895&quot;)\n      Dim p2 As New Person(&quot;Jack&quot;, &quot;63412895&quot;)\n      Console.WriteLine(p1.Equals(p2))\n      Console.WriteLine(Object.Equals(p1, p2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       True\n&#39;       True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.Equals#6\">public class Person\n{\n   private string idNumber;\n   private string personName;\n   \n   public Person(string name, string id)\n   {\n      this.personName = name;\n      this.idNumber = id;\n   }\n   \n   public override bool Equals(Object obj)\n   {\n      Person personObj = obj as Person; \n      if (personObj == null)\n         return false;\n      else\n         return idNumber.Equals(personObj.idNumber);\n   }\n   \n   public override int GetHashCode()\n   {\n      return this.idNumber.GetHashCode(); \n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Person p1 = new Person(&quot;John&quot;, &quot;63412895&quot;);\n      Person p2 = new Person(&quot;Jack&quot;, &quot;63412895&quot;);\n      Console.WriteLine(p1.Equals(p2));\n      Console.WriteLine(Object.Equals(p1, p2));\n   }\n}\n// The example displays the following output:\n//       True\n//       True\n</code></pre><p> In addition to overriding Equals, you can implement the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface to provide a strongly typed test for equality.  </p>\n<p> The following statements must be true for all implementations of the Equals method. In the list, <code>x</code>, <code>y</code>, and <code>z</code> represent object references that are not <strong>null</strong>.  </p>\n<ul>\n<li><p><code>x.Equals(x)</code> returns <code>true</code>, except in cases that involve floating-point types. See ISO/IEC/IEEE 60559:2011, Information technology -- Microprocessor Systems -- Floating-Point arithmetic.  </p>\n</li>\n<li><p><code>x.Equals(y)</code> returns the same value as <code>y.Equals(x)</code>.  </p>\n</li>\n<li><p><code>x.Equals(y)</code> returns <code>true</code> if both <code>x</code> and <code>y</code> are <code>NaN</code>.  </p>\n</li>\n<li><p>If <code>(x.Equals(y) &amp;&amp; y.Equals(z))</code> returns <code>true</code>, then <code>x.Equals(z)</code> returns <code>true</code>.  </p>\n</li>\n<li><p>Successive calls to <code>x.Equals(y)</code> return the same value as long as the objects referenced by <code>x</code> and <code>y</code> are not modified.  </p>\n</li>\n<li><p><code>x.Equals(null)</code> returns <code>false</code>.  </p>\n<p>Implementations of Equals must not throw exceptions; they should always return a value. For example, if <code>obj</code> is <code>null</code>, the Equals method should return <code>false</code> instead of throwing an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a>.  </p>\n<p>Follow these guidelines when overriding Equals:  </p>\n</li>\n<li><p>Types that implement <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> must override Equals.  </p>\n</li>\n<li><p>Types that override Equals must also override <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>; otherwise, hash tables  might not work correctly.  </p>\n</li>\n<li><p>You should consider implementing the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface to support strongly typed tests for equality. Your <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation should return results that are consistent with Equals.  </p>\n</li>\n<li><p>If your programming language supports operator overloading and you overload the equality operator for a given type, you must also override the Equals method to return the same result as the equality operator. This  helps ensure that class library code that uses Equals (such as <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> and <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>) behaves in a manner that is consistent with the way the equality operator is used by application code.  </p>\n</li>\n</ul>\n<h3 id=\"guidelines-for-reference-types\">Guidelines for Reference Types</h3>\n<p> The following guidelines apply to overriding Equals for a reference type:  </p>\n<ul>\n<li><p>Consider overriding Equals if the semantics of the type are based on the fact that the type represents some value(s).  </p>\n</li>\n<li><p>Most reference types must not overload the equality operator, even if they override Equals. However, if you are implementing a reference type that is intended to have value semantics, such as a complex number type, you must override the equality operator.  </p>\n</li>\n<li><p>You should not override Equals on a mutable reference type. This is because overriding Equals requires that you also override the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method, as discussed in the previous section. This means that the hash code of an instance of a mutable reference type can change during its lifetime, which can cause the object to be lost in a hash table.  </p>\n</li>\n</ul>\n<h3 id=\"guidelines-for-value-types\">Guidelines for Value Types</h3>\n<p> The following guidelines apply to overriding Equals for a value type:  </p>\n<ul>\n<li><p>If you are defining a value type that includes one or more fields whose values are reference types, you should override Equals. The Equals implementation provided by <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a> performs a byte-by-byte comparison for value types whose fields are all value types, but it uses reflection to perform a field-by-field comparison of value types whose fields include reference types.  </p>\n</li>\n<li><p>If you override Equals and your development language supports operator overloading, you must overload the equality operator.  </p>\n</li>\n<li><p>You should implement the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface. Calling the strongly typed <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method avoids boxing the <code>obj</code> argument.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a <code>Point</code> class that overrides the Equals method to provide value equality, and a <code>Point3D</code> class that is derived from <code>Point</code>. Because <code>Point</code> overrides Equals to test for value equality, the Equals method is not called. However, <code>Point3D.Equals</code> calls <code>Point.Equals</code> because <code>Point</code> implements Equals in a manner that provides value equality.  </p>\n<pre><code class=\"lang-vb\" name=\"ECMA-System.Object.Equals2#1\">Class Point\n    Protected x, y As Integer\n    \n    Public Sub New() \n        Me.x = 0\n        Me.y = 0\n    End Sub\n    \n    Public Sub New(x As Integer, y As Integer) \n        Me.x = x\n        Me.y = y\n    End Sub \n\n    Public Overrides Function Equals(obj As Object) As Boolean \n        &#39; Check for null and compare run-time types.\n        If obj Is Nothing OrElse Not Me.GetType().Equals(obj.GetType()) Then\n           Return False\n        Else\n           Dim p As Point = DirectCast(obj, Point)\n           Return x = p.x AndAlso y = p.y\n        End If\n    End Function \n\n    Public Overrides Function GetHashCode() As Integer \n        Return (x &lt;&lt; 2) XOr y\n    End Function\n\n    Public Overrides Function ToString() As String\n        Return String.Format(&quot;Point({0}, {1})&quot;, x, y)\n    End Function\nEnd Class\n\nClass Point3D : Inherits Point\n    Private z As Integer\n    \n    Public Sub New(ByVal x As Integer, ByVal y As Integer, ByVal z As Integer) \n        MyBase.New(x, y) \n        Me.z = Z\n    End Sub\n\n    Public Overrides Function Equals(ByVal obj As Object) As Boolean \n        Dim pt3 As Point3D = TryCast(obj, Point3D)\n        If pt3 Is Nothing Then\n           Return False\n        Else\n           Return MyBase.Equals(CType(pt3, Point)) AndAlso z = pt3.Z  \n        End If\n    End Function\n    \n    Public Overrides Function GetHashCode() As Integer \n        Return (MyBase.GetHashCode() &lt;&lt; 2) XOr z\n    End Function \n    \n    Public Overrides Function ToString() As String\n        Return String.Format(&quot;Point({0}, {1}, {2})&quot;, x, y, z)\n    End Function\nEnd Class \n\nModule Example\n    Public Sub Main() \n        Dim point2D As New Point(5, 5)\n        Dim point3Da As New Point3D(5, 5, 2)\n        Dim point3Db As New Point3D(5, 5, 2)\n        Dim point3Dc As New Point3D(5, 5, -1)\n        \n        Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                          point2D, point3Da, point2D.Equals(point3Da))\n        Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                          point2D, point3Db, point2D.Equals(point3Db))        \n        Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                          point3Da, point3Db, point3Da.Equals(point3Db))\n        Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                          point3Da, point3Dc, point3Da.Equals(point3Dc))\n    End Sub  \nEnd Module \n&#39; The example displays the following output\n&#39;       Point(5, 5) = Point(5, 5, 2): False\n&#39;       Point(5, 5) = Point(5, 5, 2): False\n&#39;       Point(5, 5, 2) = Point(5, 5, 2): True\n&#39;       Point(5, 5, 2) = Point(5, 5, -1): False\n</code></pre><pre><code class=\"lang-cs\" name=\"ECMA-System.Object.Equals2#1\">using System;\n\nclass Point\n{\n   protected int x, y;\n\n   public Point() : this(0, 0) \n   { }\n\n   public Point(int x, int y) \n   {\n      this.x = x;\n      this.y = y;\n   }\n \n   public override bool Equals(Object obj) \n   {\n      //Check for null and compare run-time types.\n      if ((obj == null) || ! this.GetType().Equals(obj.GetType())) {\n         return false;\n      }\n      else { \n         Point p = (Point) obj; \n         return (x == p.x) &amp;&amp; (y == p.y);\n      }   \n   }\n\n   public override int GetHashCode() \n   {\n      return (x &lt;&lt; 2) ^ y;\n   }\n\n    public override string ToString()\n    {\n        return String.Format(&quot;Point({0}, {1})&quot;, x, y);\n    }\n}\n\nsealed class Point3D: Point \n{\n   int z;\n\n   public Point3D(int x, int y, int z) : base(x, y) \n   {\n      this.z = z; \n   }\n\n   public override bool Equals(Object obj) \n   {\n      Point3D pt3 = obj as Point3D;\n      if (pt3 == null)\n         return false;\n      else\n         return base.Equals((Point)obj) &amp;&amp; z == pt3.z;\n   }\n\n   public override int GetHashCode() \n   {\n      return (base.GetHashCode() &lt;&lt; 2) ^ z;\n   }\n\n   public override String ToString() \n   {\n        return String.Format(&quot;Point({0}, {1}, {2})&quot;, x, y, z);\n    }\n}\n\nclass Example \n{\n  public static void Main() \n  {\n     Point point2D = new Point(5, 5);\n     Point3D point3Da = new Point3D(5, 5, 2);\n     Point3D point3Db = new Point3D(5, 5, 2);\n     Point3D point3Dc = new Point3D(5, 5, -1);\n     \n     Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                       point2D, point3Da, point2D.Equals(point3Da));\n     Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                       point2D, point3Db, point2D.Equals(point3Db));        \n     Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                       point3Da, point3Db, point3Da.Equals(point3Db));\n     Console.WriteLine(&quot;{0} = {1}: {2}&quot;, \n                       point3Da, point3Dc, point3Da.Equals(point3Dc));\n  } \n}\n// The example displays the following output:\n//       Point(5, 5) = Point(5, 5, 2): False\n//       Point(5, 5) = Point(5, 5, 2): False\n//       Point(5, 5, 2) = Point(5, 5, 2): True\n//       Point(5, 5, 2) = Point(5, 5, -1): False\n</code></pre><p> The <code>Point.Equals</code> method checks to make sure that the <code>obj</code> argument is not <strong>null</strong> and that it references an instance of the same type as this object. If either check fails, the method returns <code>false</code>.  </p>\n<p> The <code>Point.Equals</code> method calls the <a class=\"xref\" href=\"system.object#System_Object_GetType_\" data-linktype=\"relative-path\">GetType</a> method to determine whether the run-time types of the two objects are identical. If the method used a check of the form <code>obj is Point</code> in C# or <code>TryCast(obj, Point)</code> in Visual Basic, the check would return <code>true</code> in cases where <code>obj</code> is an instance of a derived class of <code>Point</code>, even though <code>obj</code> and the current instance are not of the same run-time type. Having verified that both objects are of the same type, the method casts <code>obj</code> to type <code>Point</code> and returns the result of comparing the instance fields of the two objects.  </p>\n<p> In <code>Point3D.Equals</code>, the inherited <code>Point.Equals</code> method, which overrides Equals, is invoked before anything else is done. Because <code>Point3D</code> is a sealed class (<code>NotInheritable</code> in Visual Basic), a check in the form <code>obj is Point</code> in C# or <code>TryCast(obj, Point)</code> in Visual Basic is adequate to ensure that <code>obj</code> is a <code>Point3D</code> object. If it is a <code>Point3D</code> object, it is cast to a <code>Point</code> object and passed to the base class implementation of Equals. Only when the inherited <code>Point.Equals</code> method returns <code>true</code> does the method compare the <code>z</code> instance fields introduced in the derived class.  </p>\n<p> The following example defines a <code>Rectangle</code> class that internally implements a rectangle as two <code>Point</code> objects. The <code>Rectangle</code> class also overrides Equals to provide for value equality.  </p>\n<pre><code class=\"lang-vb\" name=\"ECMA-System.Object.Equals3#1\">Class Rectangle \n    Private a, b As Point\n    \n    Public Sub New(ByVal upLeftX As Integer, ByVal upLeftY As Integer, _\n                   ByVal downRightX As Integer, ByVal downRightY As Integer) \n        Me.a = New Point(upLeftX, upLeftY)\n        Me.b = New Point(downRightX, downRightY)\n    End Sub \n    \n    Public Overrides Function Equals(ByVal obj As [Object]) As Boolean \n        &#39; Performs an equality check on two rectangles (Point object pairs).\n        If obj Is Nothing OrElse Not [GetType]().Equals(obj.GetType()) Then\n            Return False\n        End If\n        Dim r As Rectangle = CType(obj, Rectangle)\n        Return a.Equals(r.a) AndAlso b.Equals(r.b)\n    End Function\n\n    Public Overrides Function GetHashCode() As Integer \n        Return Tuple.Create(a, b).GetHashCode()\n    End Function \n\n    Public Overrides Function ToString() As String\n       Return String.Format(&quot;Rectangle({0}, {1}, {2}, {3})&quot;,\n                            a.x, a.y, b.x, b.y) \n    End Function\nEnd Class \n\nClass Point\n    Friend x As Integer\n    Friend y As Integer\n    \n    Public Sub New(ByVal X As Integer, ByVal Y As Integer) \n        Me.x = X\n        Me.y = Y\n    End Sub \n\n    Public Overrides Function Equals(ByVal obj As [Object]) As Boolean \n        &#39; Performs an equality check on two points (integer pairs).\n        If obj Is Nothing OrElse Not [GetType]().Equals(obj.GetType()) Then\n            Return False\n        Else\n           Dim p As Point = CType(obj, Point)\n           Return x = p.x AndAlso y = p.y\n        End If\n    End Function \n    \n    Public Overrides Function GetHashCode() As Integer \n        Return Tuple.Create(x, y).GetHashCode()\n    End Function \nEnd Class  \n\nClass Example\n    Public Shared Sub Main() \n        Dim r1 As New Rectangle(0, 0, 100, 200)\n        Dim r2 As New Rectangle(0, 0, 100, 200)\n        Dim r3 As New Rectangle(0, 0, 150, 200)\n        \n        Console.WriteLine(&quot;{0} = {1}: {2}&quot;, r1, r2, r1.Equals(r2))\n        Console.WriteLine(&quot;{0} = {1}: {2}&quot;, r1, r3, r1.Equals(r3))\n        Console.WriteLine(&quot;{0} = {1}: {2}&quot;, r2, r3, r2.Equals(r3))\n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;    Rectangle(0, 0, 100, 200) = Rectangle(0, 0, 100, 200): True\n&#39;    Rectangle(0, 0, 100, 200) = Rectangle(0, 0, 150, 200): False\n&#39;    Rectangle(0, 0, 100, 200) = Rectangle(0, 0, 150, 200): False\n</code></pre><pre><code class=\"lang-cs\" name=\"ECMA-System.Object.Equals3#1\">using System;\n\nclass Rectangle \n{\n   private Point a, b;\n\n   public Rectangle(int upLeftX, int upLeftY, int downRightX, int downRightY) {\n      this.a = new Point(upLeftX, upLeftY);\n      this.b = new Point(downRightX, downRightY);\n   }\n\n   public override bool Equals(Object obj) {\n      // Perform an equality check on two rectangles (Point object pairs).\n      if (obj == null || GetType() != obj.GetType()) \n          return false;\n      Rectangle r = (Rectangle)obj;\n      return a.Equals(r.a) &amp;&amp; b.Equals(r.b);\n   }\n\n   public override int GetHashCode() {\n      return Tuple.Create(a, b).GetHashCode();\n   }\n\n    public override String ToString() \n    {\n       return String.Format(&quot;Rectangle({0}, {1}, {2}, {3})&quot;,\n                            a.x, a.y, b.x, b.y); \n    }\n}\n\nclass Point \n{\n  internal int x;\n  internal int y;\n\n  public Point(int X, int Y) {\n     this.x = X;\n     this.y = Y;\n  }\n\n  public override bool Equals (Object obj) {\n     // Performs an equality check on two points (integer pairs).\n     if (obj == null || GetType() != obj.GetType()) return false;\n     Point p = (Point)obj;\n     return (x == p.x) &amp;&amp; (y == p.y);\n  }\n\n  public override int GetHashCode() {\n     return Tuple.Create(x, y).GetHashCode();\n  }\n}\n\nclass Example \n{\n   public static void Main() \n   {\n      Rectangle r1 = new Rectangle(0, 0, 100, 200);\n      Rectangle r2 = new Rectangle(0, 0, 100, 200);\n      Rectangle r3 = new Rectangle(0, 0, 150, 200);\n\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, r1, r2, r1.Equals(r2));\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, r1, r3, r1.Equals(r3));\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, r2, r3, r2.Equals(r3));\n   }\n}\n// The example displays the following output:\n//    Rectangle(0, 0, 100, 200) = Rectangle(0, 0, 100, 200): True\n//    Rectangle(0, 0, 100, 200) = Rectangle(0, 0, 150, 200): False\n//    Rectangle(0, 0, 100, 200) = Rectangle(0, 0, 150, 200): False\n</code></pre><p> Some languages such as C# and Visual Basic support operator overloading. When a type overloads the equality operator, it must also override the Equals method to provide the same functionality. This is typically accomplished by writing the Equals method in terms of the overloaded equality operator, as in the following example.  </p>\n<pre><code class=\"lang-vb\" name=\"ECMA-System.Object.Equals4#1\">Public Structure Complex\n    Public re, im As Double\n    \n    Public Overrides Function Equals(ByVal obj As [Object]) As Boolean \n        Return TypeOf obj Is Complex AndAlso Me = CType(obj, Complex)\n    End Function \n    \n    Public Overrides Function GetHashCode() As Integer \n        Return Tuple.Create(re, im).GetHashCode()\n    End Function \n    \n    Public Shared Operator = (x As Complex, y As Complex) As Boolean\n       Return x.re = y.re AndAlso x.im = y.im\n    End Operator \n    \n    Public Shared Operator &lt;&gt; (x As Complex, y As Complex) As Boolean\n       Return Not (x = y)\n    End Operator \n    \n    Public Overrides Function ToString() As String\n       Return String.Format(&quot;({0}, {1})&quot;, re, im)\n    End Function \nEnd Structure\n\nClass Example\n   Public Shared Sub Main() \n      Dim cmplx1, cmplx2 As Complex\n        \n      cmplx1.re = 4.0\n      cmplx1.im = 1.0\n        \n      cmplx2.re = 2.0\n      cmplx2.im = 1.0\n\n      Console.WriteLine(&quot;{0} &lt;&gt; {1}: {2}&quot;, cmplx1, cmplx2, cmplx1 &lt;&gt; cmplx2)        \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, cmplx1, cmplx2, cmplx1.Equals(cmplx2))        \n      \n      cmplx2.re = 4.0\n        \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, cmplx1, cmplx2, cmplx1 = cmplx2)        \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, cmplx1, cmplx2, cmplx1.Equals(cmplx2))        \n   End Sub\nEnd Class \n&#39; The example displays the following output:\n&#39;       (4, 1) &lt;&gt; (2, 1): True\n&#39;       (4, 1) = (2, 1): False\n&#39;       (4, 1) = (4, 1): True\n&#39;       (4, 1) = (4, 1): True\n</code></pre><pre><code class=\"lang-cs\" name=\"ECMA-System.Object.Equals4#1\">using System;\n\npublic struct Complex {\n   public double re, im;\n\n   public override bool Equals(Object obj) {\n      return obj is Complex &amp;&amp; this == (Complex)obj;\n   }\n\n   public override int GetHashCode() {\n      return Tuple.Create(re, im).GetHashCode();\n   }\n\n   public static bool operator ==(Complex x, Complex y) {\n      return x.re == y.re &amp;&amp; x.im == y.im;\n   }\n\n   public static bool operator !=(Complex x, Complex y) {\n      return !(x == y);\n   }\n\n    public override String ToString()\n    {\n       return String.Format(&quot;({0}, {1})&quot;, re, im);\n    } \n}\n\nclass MyClass \n{\n  public static void Main() \n  {\n    Complex cmplx1, cmplx2;\n\n    cmplx1.re = 4.0;\n    cmplx1.im = 1.0;\n\n    cmplx2.re = 2.0;\n    cmplx2.im = 1.0;\n\n    Console.WriteLine(&quot;{0} &lt;&gt; {1}: {2}&quot;, cmplx1, cmplx2, cmplx1 != cmplx2);        \n    Console.WriteLine(&quot;{0} = {1}: {2}&quot;, cmplx1, cmplx2, cmplx1.Equals(cmplx2));        \n      \n    cmplx2.re = 4.0;\n      \n    Console.WriteLine(&quot;{0} = {1}: {2}&quot;, cmplx1, cmplx2, cmplx1 == cmplx2);        \n    Console.WriteLine(&quot;{0} = {1}: {2}&quot;, cmplx1, cmplx2, cmplx1.Equals(cmplx2));          \n  }\n}\n// The example displays the following output:\n//       (4, 1) &lt;&gt; (2, 1): True\n//       (4, 1) = (2, 1): False\n//       (4, 1) = (4, 1): True\n//       (4, 1) = (4, 1): True\n</code></pre><p> Because <code>Complex</code> is a value type, it cannot be derived from.  Therefore, the override to Equals method need not call <a class=\"xref\" href=\"system.object#System_Object_GetType_\" data-linktype=\"relative-path\">GetType</a> to determine the precise run-time type of each object, but can instead use the <code>is</code> operator in C# or the <code>TypeOf</code> operator in Visual Basic to check the type of the <code>obj</code> parameter.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Object_Equals_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Object_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object instances are considered equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Equals (object objA, object objB);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>objA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>objB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the objects are considered equal; otherwise, <code>false</code>. If both <code>objA</code> and <code>objB</code> are <strong>null</strong>, the method returns <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The static Equals method indicates whether two objects, <code>objA</code> and  <code>objB</code>, are equal. It also enables you to test objects whose value is <strong>null</strong> for equality. It compares <code>objA</code> and <code>objB</code> for equality as follows:  </p>\n<ul>\n<li><p>It determines whether the two objects represent the same object reference. If they do, the method returns <code>true</code>. This test is equivalent to calling the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method. In addition, if both <code>objA</code> and <code>objB</code>are <strong>null</strong>, the method returns <code>true</code>.  </p>\n</li>\n<li><p>It determines whether either <code>objA</code> or <code>objB</code> is <strong>null</strong>. If so, it returns <code>false</code>.  </p>\n</li>\n<li><p>If the two objects do not represent the same object reference and neither is <strong>null</strong>, it calls <code>objA</code>.<code>Equals</code>(<code>objB</code>) and returns the result. This means that if <code>objA</code> overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> method, this override is called.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Equals method and compares it with the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.Equals#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Dog m1 = new Dog(&quot;Alaskan Malamute&quot;);\n      Dog m2 = new Dog(&quot;Alaskan Malamute&quot;);\n      Dog g1 = new Dog(&quot;Great Pyrenees&quot;);\n      Dog g2 = g1;\n      Dog d1 = new Dog(&quot;Dalmation&quot;);\n      Dog n1 = null;\n      Dog n2 = null;\n      \n      Console.WriteLine(&quot;null = null: {0}&quot;, Object.Equals(n1, n2));\n      Console.WriteLine(&quot;null Reference Equals null: {0}<br>&quot;, Object.ReferenceEquals(n1, n2));\n      \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, g1, g2, Object.Equals(g1, g2));\n      Console.WriteLine(&quot;{0} Reference Equals {1}: {2}<br>&quot;, g1, g2, Object.ReferenceEquals(g1, g2));\n      \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, m1, m2, Object.Equals(m1, m2));\n      Console.WriteLine(&quot;{0} Reference Equals {1}: {2}<br>&quot;, m1, m2, Object.ReferenceEquals(m1, m2));\n      \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, m1, d1, Object.Equals(m1, d1));  \n      Console.WriteLine(&quot;{0} Reference Equals {1}: {2}&quot;, m1, d1, Object.ReferenceEquals(m1, d1));  \n   }\n}\n\npublic class Dog\n{\n   // Public field.\n   public string Breed;\n   \n   // Class constructor.\n   public Dog(string dogBreed)\n   {\n      this.Breed = dogBreed;\n   }\n\n   public override bool Equals(Object obj)\n   {\n      if (obj == null || !(obj is Dog))\n         return false;\n      else\n         return this.Breed == ((Dog) obj).Breed;\n   }\n   \n   public override int GetHashCode()\n   {\n      return this.Breed.GetHashCode();\n   }\n   \n   public override string ToString()\n   {\n      return this.Breed;\n   }\n}\n// The example displays the following output:\n//       null = null: True\n//       null Reference Equals null: True\n//       \n//       Great Pyrenees = Great Pyrenees: True\n//       Great Pyrenees Reference Equals Great Pyrenees: True\n//       \n//       Alaskan Malamute = Alaskan Malamute: True\n//       Alaskan Malamute Reference Equals Alaskan Malamute: False\n//       \n//       Alaskan Malamute = Dalmation: False\n//       Alaskan Malamute Reference Equals Dalmation: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.Equals#1\">Module Example\n   Public Sub Main()\n      Dim m1 As New Dog(&quot;Alaskan Malamute&quot;)\n      Dim m2 As New Dog(&quot;Alaskan Malamute&quot;)\n      Dim g1 As New Dog(&quot;Great Pyrenees&quot;)\n      Dim g2 As Dog = g1\n      Dim d1 As New Dog(&quot;Dalmation&quot;)\n      Dim n1 As Dog = Nothing\n      Dim n2 As Dog = Nothing\n      \n      Console.WriteLine(&quot;null = null: {0}&quot;, Object.Equals(n1, n2))\n      Console.WriteLine(&quot;null Reference Equals null: {0}&quot;, Object.ReferenceEquals(n1, n2))\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, g1, g2, Object.Equals(g1, g2))\n      Console.WriteLine(&quot;{0} Reference Equals {1}: {2}&quot;, g1, g2, Object.ReferenceEquals(g1, g2))\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, m1, m2, Object.Equals(m1, m2))\n      Console.WriteLine(&quot;{0} Reference Equals {1}: {2}&quot;, m1, m2, Object.ReferenceEquals(m1, m2))\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, m1, d1, Object.Equals(m1, d1))  \n      Console.WriteLine(&quot;{0} Reference Equals {1}: {2}&quot;, m1, d1, Object.ReferenceEquals(m1, d1))  \n   End Sub\nEnd Module\n\nPublic Class Dog\n   &#39; Public field.\n   Public Breed As String\n   \n   &#39; Class constructor.\n   Public Sub New(dogBreed As String)\n      Me.Breed = dogBreed\n   End Sub\n\n   Public Overrides Function Equals(obj As Object) As Boolean\n      If obj Is Nothing OrElse Not typeof obj Is Dog Then\n         Return False\n      Else\n         Return Me.Breed = CType(obj, Dog).Breed\n      End If   \n   End Function\n   \n   Public Overrides Function GetHashCode() As Integer\n      Return Me.Breed.GetHashCode()\n   End Function\n   \n   Public Overrides Function ToString() As String\n      Return Me.Breed\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;       null = null: True\n&#39;       null Reference Equals null: True\n&#39;       \n&#39;       Great Pyrenees = Great Pyrenees: True\n&#39;       Great Pyrenees Reference Equals Great Pyrenees: True\n&#39;       \n&#39;       Alaskan Malamute = Alaskan Malamute: True\n&#39;       Alaskan Malamute Reference Equals Alaskan Malamute: False\n&#39;       \n&#39;       Alaskan Malamute = Dalmation: False\n&#39;       Alaskan Malamute Reference Equals Dalmation: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Object_Finalize\">\r\n    \r\n            <a id=\"System_Object_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~Object ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Finalize method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed. The method is protected and therefore is accessible only through this class or through a derived class.  </p>\n<p> In this section:  </p>\n<ul>\n<li><p><a href=\"#How\" data-linktype=\"self-bookmark\">How finalization works</a>  </p>\n</li>\n<li><p><a href=\"#Notes\" data-linktype=\"self-bookmark\">Notes for implementers</a>  </p>\n</li>\n<li><p><a href=\"#SafeHandle\" data-linktype=\"self-bookmark\">The SafeHandle alternative</a>  </p>\n</li>\n</ul>\n<p><a name=\"How\"></a>   </p>\n<h2 id=\"how-finalization-works\">How finalization works</h2>\n<p> The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> class provides no implementation for the Finalize method, and the garbage collector does not mark types derived from <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> for finalization unless they override the Finalize method.  </p>\n<p> If a type does override the Finalize method, the garbage collector adds an entry for each instance of the type to an internal structure called the finalization queue. The finalization queue contains entries for all the objects in the managed heap whose finalization code must run before the garbage collector can reclaim their memory. The garbage collector then calls the Finalize method automatically under the following conditions:  </p>\n<ul>\n<li><p>After the garbage collector has discovered that an object is inaccessible, unless the object has been exempted from finalization by a call to the <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a> method.  </p>\n</li>\n<li><p>During shutdown of an application domain, unless the object is exempt from finalization. During shutdown, even objects that are still accessible are finalized.  </p>\n<p>Finalize is automatically called only once on a given instance, unless the object is re-registered by using a mechanism such as <a class=\"xref\" href=\"system.gc#System_GC_ReRegisterForFinalize_\" data-linktype=\"relative-path\">ReRegisterForFinalize</a> and the <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a> method has not been subsequently called.  </p>\n<p>Finalize operations have the following limitations:  </p>\n</li>\n<li><p>The exact time when the finalizer executes is undefined. To ensure deterministic release of resources for instances of your class, implement a <code>Close</code> method or provide a <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> implementation.  </p>\n</li>\n<li><p>The finalizers of two objects are not guaranteed to run in any specific order, even if one object refers to the other. That is, if Object A has a reference to Object B and both have finalizers, Object B might have already been finalized when the finalizer of Object A starts.  </p>\n</li>\n<li><p>The thread on which the finalizer runs is unspecified.  </p>\n<p>The Finalize method might not run to completion or might not run at all under the following exceptional circumstances:  </p>\n</li>\n<li><p>If another finalizer blocks indefinitely (goes into an infinite loop, tries to obtain a lock it can never obtain, and so on). Because the runtime tries to run finalizers to completion, other finalizers might not be called if a finalizer blocks indefinitely.  </p>\n</li>\n<li><p>If the process terminates without giving the runtime a chance to clean up. In this case, the runtime&#39;s first notification of process termination is a DLL_PROCESS_DETACH notification.  </p>\n<p>The runtime continues to finalize objects during shutdown only while the number of finalizable objects continues to decrease.  </p>\n<p>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process and no active <code>try</code>/<code>finally</code> blocks or finalizers are executed. This behavior ensures process integrity if the finalizer cannot free or destroy resources.  </p>\n</li>\n</ul>\n<p><a name=\"Notes\"></a>   </p>\n<h2 id=\"notes-for-implementers\">Notes for implementers</h2>\n<p> You should override Finalize for a class that uses unmanaged resources such as file handles or database connections that must be released when the managed object that uses them is discarded during garbage collection.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If a <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">SafeHandle</a> object is available that wraps your unmanaged resource, the recommended alternative is to implement the dispose pattern with a safe handle and not override Finalize. For more information, see <a href=\"#SafeHandle\" data-linktype=\"self-bookmark\">The SafeHandle alternative</a> section.  </p>\n</div>\n<p> The Finalize method does nothing by default, but you should override Finalize only if necessary, and only to release unmanaged resources. Reclaiming memory tends to take much longer if a finalization operation runs, because it requires at least two garbage collections. In addition, you should override the Finalize method for reference types only. The common language runtime only finalizes reference types. It ignores finalizers on value types.  </p>\n<p> Every implementation of Finalize in a derived type must call its base type&#39;s implementation of Finalize. This is the only case in which application code is allowed to call Finalize.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The C# compiler does not allow you to override the Finalize method. Instead, you provide a finalizer by implementing a <a href=\"../Topic/Destructors%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">destructor</a> for your class. A C# destructor automatically calls the destructor of its base class.  </p>\n<p> Visual C++ also provides its own syntax for implementing the Finalize method. For more information, see the &quot;Destructors and finalizers&quot; section of <a href=\"../Topic/How%20to:%20Define%20and%20Consume%20Classes%20and%20Structs%20(C++-CLI).md\" data-linktype=\"relative-path\">How to: Define and Consume Classes and Structs (C++/CLI)</a>.  </p>\n</div>\n<p> Because garbage collection is non-deterministic, you do not know precisely when the garbage collector performs finalization. To release resources immediately, you can also choose to implement the <a href=\"../Topic/Dispose%20Pattern.md\" data-linktype=\"relative-path\">dispose pattern</a> and the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. The <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> implementation can be called by consumers of your class to free unmanaged resources, and you can use the Finalize method to free unmanaged resources in the event that the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method is not called.  </p>\n<p> Finalize can take almost any action, including resurrecting an object (that is, making the object accessible again) after it has been cleaned up during garbage collection. However, the object can only be resurrected once; Finalize cannot be called on resurrected objects during garbage collection. There is one action that your implementation of Finalize should never take: it should never throw an exception.  </p>\n<p><a name=\"SafeHandle\"></a>   </p>\n<h2 id=\"the-safehandle-alternative\">The SafeHandle alternative</h2>\n<p> Creating reliable finalizers is often difficult, because you cannot make assumptions about the state of your application, and because unhandled system exceptions such as <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> and <a class=\"xref\" href=\"system.stackoverflowexception\" data-linktype=\"relative-path\">StackOverflowException</a> terminate the finalizer. Instead of implementing a finalizer for your class to release unmanaged resources, you can use an object that is derived from the <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">System.Runtime.InteropServices.SafeHandle</a> class to wrap your unmanaged resources, and then implement the dispose pattern without a finalizer. The .NET Framework provides the following classes in the <a class=\"xref\" href=\"microsoft.win32\" data-linktype=\"relative-path\">Microsoft.Win32</a> namespace that are derived from <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">System.Runtime.InteropServices.SafeHandle</a>:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"microsoft.win32.safehandles.safefilehandle\" data-linktype=\"relative-path\">SafeFileHandle</a> is a wrapper class for a file handle.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"microsoft.win32.safehandles.safememorymappedfilehandle\" data-linktype=\"relative-path\">SafeMemoryMappedFileHandle</a> is a wrapper class for memory-mapped file handles.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"microsoft.win32.safehandles.safememorymappedviewhandle\" data-linktype=\"relative-path\">SafeMemoryMappedViewHandle</a> is a wrapper class for a pointer to a block of unmanaged memory.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"microsoft.win32.safehandles.safencryptkeyhandle\" data-linktype=\"relative-path\">SafeNCryptKeyHandle</a>, <a class=\"xref\" href=\"microsoft.win32.safehandles.safencryptproviderhandle\" data-linktype=\"relative-path\">SafeNCryptProviderHandle</a>, and <a class=\"xref\" href=\"microsoft.win32.safehandles.safencryptsecrethandle\" data-linktype=\"relative-path\">SafeNCryptSecretHandle</a> are wrapper classes for cryptographic handles.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"microsoft.win32.safehandles.safepipehandle\" data-linktype=\"relative-path\">SafePipeHandle</a> is a wrapper class for pipe handles.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"microsoft.win32.safehandles.saferegistryhandle\" data-linktype=\"relative-path\">SafeRegistryHandle</a> is a wrapper class for a handle to a registry key.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"microsoft.win32.safehandles.safewaithandle\" data-linktype=\"relative-path\">SafeWaitHandle</a> is a wrapper class for a wait handle.  </p>\n<p>The following example uses the <a href=\"../Topic/Dispose%20Pattern.md\" data-linktype=\"relative-path\">dispose pattern</a> with safe handles instead of overriding the Finalize method. It defines a <code>FileAssociation</code> class that wraps registry information about the application that handles files with a particular file extension. The two registry handles returned as <code>out</code> parameters by Windows <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms724897.aspx\" data-linktype=\"external\">RegOpenKeyEx</a> function calls are passed to the <a class=\"xref\" href=\"microsoft.win32.safehandles.saferegistryhandle\" data-linktype=\"relative-path\">SafeRegistryHandle</a> constructor. The type&#39;s protected <code>Dispose</code> method then calls the <code>SafeRegistryHandle.Dispose</code> method  to free these two handles.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Object.Finalize#2\">Imports Microsoft.Win32.SafeHandles\nImports System\nImports System.ComponentModel\nImports System.IO\nImports System.Runtime.InteropServices\nImports System.Text\n\nPublic Class FileAssociationInfo : Implements IDisposable\n   &#39; Private variables.\n   Private ext As String\n   Private openCmd As String\n   Private args As String\n   Private hExtHandle, hAppIdHandle As SafeRegistryHandle\n\n   &#39; Windows API calls.\n   Private Declare Unicode Function RegOpenKeyEx Lib&quot;advapi32.dll&quot; _\n                   Alias &quot;RegOpenKeyExW&quot; (hKey As IntPtr, lpSubKey As String, _\n                   ulOptions As Integer, samDesired As Integer, _\n                   ByRef phkResult As IntPtr) As Integer\n   Private Declare Unicode Function RegQueryValueEx Lib &quot;advapi32.dll&quot; _\n                   Alias &quot;RegQueryValueExW&quot; (hKey As IntPtr, _\n                   lpValueName As String, lpReserved As Integer, _\n                   ByRef lpType As UInteger, lpData As String, _\n                   ByRef lpcbData As UInteger) As Integer   \n   Private Declare Function RegSetValueEx Lib &quot;advapi32.dll&quot; _\n                  (hKey As IntPtr, _\n                  &lt;MarshalAs(UnmanagedType.LPStr)&gt; lpValueName As String, _\n                  reserved As Integer, dwType As UInteger, _\n                  &lt;MarshalAs(UnmanagedType.LPStr)&gt; lpData As String, _\n                  cpData As Integer) As Integer \n   Private Declare Function RegCloseKey Lib &quot;advapi32.dll&quot; _\n                  (hKey As IntPtr) As Integer\n\n   &#39; Windows API constants.\n   Private Const HKEY_CLASSES_ROOT As Integer = &amp;h80000000\n   Private Const ERROR_SUCCESS As Integer = 0\n\n   Private Const KEY_QUERY_VALUE As Integer = 1\n   Private Const KEY_SET_VALUE As Integer = &amp;h2\n   \n   Private REG_SZ As UInteger = 1\n   \n   Private Const MAX_PATH As Integer  = 260\n   \n   Public Sub New(fileExtension As String)\n      Dim retVal As Integer = 0\n      Dim lpType As UInteger = 0\n                  \n      If Not fileExtension.StartsWith(&quot;.&quot;) Then \n         fileExtension = &quot;.&quot; + fileExtension\n      End If   \n      ext = fileExtension\n       \n      Dim hExtension As IntPtr = IntPtr.Zero\n      &#39; Get the file extension value.\n      retVal = RegOpenKeyEx(New IntPtr(HKEY_CLASSES_ROOT), fileExtension, 0, \n                            KEY_QUERY_VALUE, hExtension)\n      if retVal &lt;&gt; ERROR_SUCCESS Then \n         Throw New Win32Exception(retVal)\n      End If  \n      &#39; Instantiate the first SafeRegistryHandle.\n      hExtHandle = New SafeRegistryHandle(hExtension, True)\n      \n      Dim appId As New String(&quot; &quot;c, MAX_PATH)\n      Dim appIdLength As UInteger = CUInt(appId.Length)\n      retVal = RegQueryValueEx(hExtHandle.DangerousGetHandle(), String.Empty, _\n                               0, lpType, appId, appIdLength)\n      if retVal &lt;&gt; ERROR_SUCCESS Then\n         Throw New Win32Exception(retVal)\n      End If   \n      &#39; We no longer need the hExtension handle.\n      hExtHandle.Dispose()\n\n      &#39; Determine the number of characters without the terminating null.\n      appId = appId.Substring(0, CInt(appIdLength) \\ 2 - 1) + &quot;\\shell\\open\\Command&quot;\n\n      &#39; Open the application identifier key.\n      Dim exeName As New string(&quot; &quot;c, MAX_PATH)\n      Dim exeNameLength As UInteger = CUInt(exeName.Length)\n      Dim hAppId As IntPtr\n      retVal = RegOpenKeyEx(New IntPtr(HKEY_CLASSES_ROOT), appId, 0, \n                            KEY_QUERY_VALUE Or KEY_SET_VALUE, hAppId)\n      If retVal &lt;&gt; ERROR_SUCCESS Then \n         Throw New Win32Exception(retVal)\n      End If   \n\n      &#39; Instantiate the second SafeRegistryHandle.\n      hAppIdHandle = New SafeRegistryHandle(hAppId, True)\n\n      &#39; Get the executable name for this file type.\n      Dim exePath As New string(&quot; &quot;c, MAX_PATH)\n      Dim exePathLength As UInteger = CUInt(exePath.Length)\n      retVal = RegQueryValueEx(hAppIdHandle.DangerousGetHandle(), _\n                               String.Empty, 0, lpType, exePath, exePathLength)\n      If retVal &lt;&gt; ERROR_SUCCESS Then\n         Throw New Win32Exception(retVal)\n      End If     \n      &#39; Determine the number of characters without the terminating null.\n      exePath = exePath.Substring(0, CInt(exePathLength) \\ 2 - 1)\n  \n      exePath = Environment.ExpandEnvironmentVariables(exePath)\n      Dim position As Integer = exePath.IndexOf(&quot;%&quot;c)\n      If position &gt;= 0 Then\n         args = exePath.Substring(position)\n         &#39; Remove command line parameters (&#39;%0&#39;, etc.).\n         exePath = exePath.Substring(0, position).Trim()\n      End If   \n      openCmd = exePath\n   End Sub\n\n   Public ReadOnly Property Extension As String\n      Get\n         Return ext\n      End Get\n   End Property\n   \n   Public Property Open As String\n      Get\n         Return openCmd\n      End Get    \n      Set \n        If hAppIdHandle.IsInvalid Or hAppIdHandle.IsClosed Then\n           Throw New InvalidOperationException(&quot;Cannot write to registry key.&quot;)\n        End If    \n        If Not File.Exists(value) Then\n           Dim message As String = String.Format(&quot;&#39;{0}&#39; does not exist&quot;, value)\n           Throw New FileNotFoundException(message) \n        End If\n        Dim cmd As String = value + &quot; %1&quot;\n        Dim retVal As Integer = RegSetValueEx(hAppIdHandle.DangerousGetHandle(), String.Empty, 0, \n                                              REG_SZ, value, value.Length + 1)\n        If retVal &lt;&gt; ERROR_SUCCESS Then \n           Throw New Win32Exception(retVal)\n        End If                             \n      End Set\n   End Property   \n   \n   Public Sub Dispose() _\n      Implements IDisposable.Dispose \n      Dispose(true)\n      GC.SuppressFinalize(Me)\n   End Sub   \n   \n   Protected Sub Dispose(disposing As Boolean)\n      &#39; Ordinarily, we release unmanaged resources here \n      &#39; but all are wrapped by safe handles.\n      \n      &#39; Release disposable objects.\n      If disposing Then\n         If hExtHandle IsNot Nothing Then hExtHandle.Dispose()\n         If hAppIdHandle IsNot Nothing Then hAppIdHandle.Dispose()\n      End If\n   End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.Finalize#2\">using Microsoft.Win32.SafeHandles;\nusing System;\nusing System.ComponentModel;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\npublic class FileAssociationInfo : IDisposable\n{\n   // Private variables.\n   private String ext;\n   private String openCmd;\n   private String args;\n   private SafeRegistryHandle hExtHandle, hAppIdHandle;\n\n   // Windows API calls.\n   [DllImport(&quot;advapi32.dll&quot;, CharSet= CharSet.Auto, SetLastError=true)]\n   private static extern int RegOpenKeyEx(IntPtr hKey, \n                  String lpSubKey, int ulOptions, int samDesired,\n                  out IntPtr phkResult);\n   [DllImport(&quot;advapi32.dll&quot;, CharSet= CharSet.Unicode, EntryPoint = &quot;RegQueryValueExW&quot;,\n              SetLastError=true)]\n   private static extern int RegQueryValueEx(IntPtr hKey,\n                  string lpValueName, int lpReserved, out uint lpType, \n                  string lpData, ref uint lpcbData);   \n   [DllImport(&quot;advapi32.dll&quot;, SetLastError = true)]\n   private static extern int RegSetValueEx(IntPtr hKey, [MarshalAs(UnmanagedType.LPStr)] string lpValueName,\n                  int Reserved, uint dwType, [MarshalAs(UnmanagedType.LPStr)] string lpData,\n                  int cpData);\n   [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]\n   private static extern int RegCloseKey(UIntPtr hKey);\n\n   // Windows API constants.\n   private const int HKEY_CLASSES_ROOT = unchecked((int) 0x80000000);\n   private const int ERROR_SUCCESS = 0;\n\n    private const int KEY_QUERY_VALUE = 1;\n    private const int KEY_SET_VALUE = 0x2;\n   \n   private const uint REG_SZ = 1;\n   \n   private const int MAX_PATH = 260;\n   \n   public FileAssociationInfo(String fileExtension)\n   {\n      int retVal = 0;\n      uint lpType = 0;\n                  \n      if (!fileExtension.StartsWith(&quot;.&quot;))\n             fileExtension = &quot;.&quot; + fileExtension;\n      ext = fileExtension;\n       \n      IntPtr hExtension = IntPtr.Zero;\n      // Get the file extension value.\n      retVal = RegOpenKeyEx(new IntPtr(HKEY_CLASSES_ROOT), fileExtension, 0, KEY_QUERY_VALUE, out hExtension);\n      if (retVal != ERROR_SUCCESS) \n         throw new Win32Exception(retVal);\n      // Instantiate the first SafeRegistryHandle.\n      hExtHandle = new SafeRegistryHandle(hExtension, true);\n      \n      string appId = new string(&#39; &#39;, MAX_PATH);\n      uint appIdLength = (uint) appId.Length;\n      retVal = RegQueryValueEx(hExtHandle.DangerousGetHandle(), String.Empty, 0, out lpType, appId, ref appIdLength);\n      if (retVal != ERROR_SUCCESS)\n         throw new Win32Exception(retVal);\n      // We no longer need the hExtension handle.\n      hExtHandle.Dispose();\n\n      // Determine the number of characters without the terminating null.\n      appId = appId.Substring(0, (int) appIdLength / 2 - 1) + @&quot;\\shell\\open\\Command&quot;;\n\n      // Open the application identifier key.\n      string exeName = new string(&#39; &#39;, MAX_PATH);\n      uint exeNameLength = (uint) exeName.Length;\n      IntPtr hAppId;\n      retVal = RegOpenKeyEx(new IntPtr(HKEY_CLASSES_ROOT), appId, 0, KEY_QUERY_VALUE | KEY_SET_VALUE,\n                            out hAppId);\n       if (retVal != ERROR_SUCCESS) \n         throw new Win32Exception(retVal);\n\n      // Instantiate the second SafeRegistryHandle.\n      hAppIdHandle = new SafeRegistryHandle(hAppId, true);\n\n      // Get the executable name for this file type.\n      string exePath = new string(&#39; &#39;, MAX_PATH);\n      uint exePathLength = (uint) exePath.Length;\n      retVal = RegQueryValueEx(hAppIdHandle.DangerousGetHandle(), String.Empty, 0, out lpType, exePath, ref exePathLength);\n      if (retVal != ERROR_SUCCESS)\n         throw new Win32Exception(retVal);\n           \n      // Determine the number of characters without the terminating null.\n      exePath = exePath.Substring(0, (int) exePathLength / 2 - 1);\n      // Remove any environment strings.\n      exePath = Environment.ExpandEnvironmentVariables(exePath);\n\n      int position = exePath.IndexOf(&#39;%&#39;);\n      if (position &gt;= 0) {\n         args = exePath.Substring(position);\n         // Remove command line parameters (&#39;%0&#39;, etc.).\n         exePath = exePath.Substring(0, position).Trim();\n      }\n      openCmd = exePath;   \n   }\n\n   public String Extension\n   { get { return ext; } }\n   \n   public String Open\n   { get { return openCmd; } \n     set {\n        if (hAppIdHandle.IsInvalid | hAppIdHandle.IsClosed)\n           throw new InvalidOperationException(&quot;Cannot write to registry key.&quot;); \n        if (! File.Exists(value)) {\n           string message = String.Format(&quot;&#39;{0}&#39; does not exist&quot;, value);\n           throw new FileNotFoundException(message); \n        }\n        string cmd = value + &quot; %1&quot;;\n        int retVal = RegSetValueEx(hAppIdHandle.DangerousGetHandle(), String.Empty, 0, \n                                   REG_SZ, value, value.Length + 1);\n        if (retVal != ERROR_SUCCESS)\n           throw new Win32Exception(retVal);                          \n     } }\n   \n   public void Dispose() \n   {\n      Dispose(true);\n      GC.SuppressFinalize(this);\n   }   \n   \n   protected void Dispose(bool disposing)\n   {\n      // Ordinarily, we release unmanaged resources here; \n      // but all are wrapped by safe handles.\n      \n      // Release disposable objects.\n      if (disposing) {\n         if (hExtHandle != null) hExtHandle.Dispose();\n         if (hAppIdHandle != null) hAppIdHandle.Dispose();\n      }\n   }\n}\n</code></pre></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example verifies that the Finalize method is called when an object that overrides Finalize is destroyed. Note that, in a production application, the Finalize method would be overridden to release unmanaged resources held by the object. Also note that the C# example provides a destructor instead of overriding the Finalize method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.Finalize#1\">using System;\nusing System.Diagnostics;\n\npublic class ExampleClass\n{\n   Stopwatch sw;\n   \n   public ExampleClass()\n   {\n      sw = Stopwatch.StartNew();\n      Console.WriteLine(&quot;Instantiated object&quot;);\n   } \n\n   public void ShowDuration()\n   {\n      Console.WriteLine(&quot;This instance of {0} has been in existence for {1}&quot;,\n                        this, sw.Elapsed);\n   }\n   \n   ~ExampleClass()\n   {\n      Console.WriteLine(&quot;Finalizing object&quot;);\n      sw.Stop();\n      Console.WriteLine(&quot;This instance of {0} has been in existence for {1}&quot;,\n                        this, sw.Elapsed);\n   }\n}\n\npublic class Demo\n{\n   public static void Main()\n   {\n      ExampleClass ex = new ExampleClass();\n      ex.ShowDuration();\n   }\n}\n// The example displays output like the following:\n//    Instantiated object\n//    This instance of ExampleClass has been in existence for 00:00:00.0011060\n//    Finalizing object\n//    This instance of ExampleClass has been in existence for 00:00:00.0036294\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.Finalize#1\">Imports System.Diagnostics\n\nPublic Class ExampleClass\n   Dim sw As StopWatch\n   \n   Public Sub New()\n      sw = Stopwatch.StartNew()\n      Console.WriteLine(&quot;Instantiated object&quot;)\n   End Sub \n\n   Public Sub ShowDuration()\n      Console.WriteLine(&quot;This instance of {0} has been in existence for {1}&quot;,\n                        Me, sw.Elapsed)\n   End Sub\n   \n   Protected Overrides Sub Finalize()\n      Console.WriteLine(&quot;Finalizing object&quot;)\n      sw.Stop()\n      Console.WriteLine(&quot;This instance of {0} has been in existence for {1}&quot;,\n                        Me, sw.Elapsed)\n   End Sub\nEnd Class\n\nModule Demo\n   Public Sub Main()\n      Dim ex As New ExampleClass()\n      ex.ShowDuration()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Instantiated object\n&#39;    This instance of ExampleClass has been in existence for 00:00:00.0011060\n&#39;    Finalizing object\n&#39;    This instance of ExampleClass has been in existence for 00:00:00.0036294\n</code></pre><p> For an additional example that overrides the Finalize method, see the <a class=\"xref\" href=\"system.gc#System_GC_SuppressFinalize_\" data-linktype=\"relative-path\">SuppressFinalize</a> method.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Object_GetHashCode\">\r\n    \r\n            <a id=\"System_Object_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as the default hash function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A hash code is a numeric value that is used to insert and identify an object in a hash-based collection such as the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> class, the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class, or a type derived from the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class. The GetHashCode method provides this hash code for algorithms that need quick checks of object equality.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For information about how hash codes are used in hash tables and for some additional hash code algorithms, see the <a href=\"http://en.wikipedia.org/wiki/Hash_function\" data-linktype=\"external\">Hash Function</a> entry in Wikipedia.  </p>\n</div>\n<p> Two objects that are equal return hash codes that are equal. However, the reverse is not true: equal hash codes do not imply object equality, because different (unequal) objects can have identical hash codes. Furthermore, the .NET Framework does not guarantee the default implementation of the GetHashCode method, and the value this method returns may differ between .NET Framework versions and platforms, such as 32-bit and 64-bit platforms. For these reasons, do not use the default implementation of this method as a unique object identifier for hashing purposes. Two consequences follow from this:  </p>\n<ul>\n<li><p>You should not assume that equal hash codes imply object equality.  </p>\n</li>\n<li><p>You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash across application domains, processes, and platforms.  </p>\n</li>\n</ul>\n<div class=\"WARNING\"><h5>Warning</h5><p> A hash code is intended for efficient insertion and lookup in collections that are based on a hash table. A hash code is not a permanent value. For this reason:  </p>\n<ul>\n<li>Do not serialize hash code values or store them in databases.  <ul>\n<li>Do not use the hash code as the key to retrieve an object from a keyed collection.  </li>\n<li>Do not send hash codes across application domains or processes. In some cases, hash codes may be computed on a per-process or per-application domain basis.  </li>\n<li>Do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash. For cryptographic hashes, use a class derived from the <a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">System.Security.Cryptography.HashAlgorithm</a> or <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">System.Security.Cryptography.KeyedHashAlgorithm</a> class.  </li>\n<li>Do not test for equality of hash codes to determine whether two objects are equal. (Unequal objects can have identical hash codes.) To test for equality, call the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> or <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </li>\n</ul>\n</li>\n</ul>\n</div>\n<p> The GetHashCode method can be overridden by a derived type. If GetHashCode is not overridden, hash codes for reference types are computed by calling the GetHashCode method of the base class, which computes a hash code based on an object&#39;s reference; for more information, see <a class=\"xref\" href=\"system.runtime.compilerservices.runtimehelpers#System_Runtime_CompilerServices_RuntimeHelpers_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>. In other words, two objects for which the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method returns <code>true</code> have identical hash codes. If value types do not override GetHashCode, the <a class=\"xref\" href=\"system.valuetype#System_ValueType_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method of the base class uses reflection to compute the hash code based on the values of the type&#39;s fields. In other words, value types whose fields have equal values have equal hash codes. For more information about overriding GetHashCode, see the &quot;Notes to Inheritors&quot; section.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> If you override the GetHashCode method, you should also override <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>, and vice versa. If your overridden <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method returns <code>true</code> when two objects are tested for equality, your overridden GetHashCode method must return the same value for the two objects.  </p>\n</div>\n<p> If an object that is used as a key in a hash table does not provide a useful implementation of GetHashCode, you can specify a hash code provider by supplying an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> implementation to one of the overloads of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> class constructor.  </p>\n<h2 id=\"notes-for-the-includewrtaddincludeswrt-mdmd\">Notes for the Windows Runtime</h2>\n<p> When you call the GetHashCode method on a class in the Windows Runtime, it provides the default behavior for classes that donâ€™t override GetHashCode. This is part of the support that the .NET Framework provides for the Windows Runtime (see <a href=\"../Topic/.NET%20Framework%20Support%20for%20Windows%20Store%20Apps%20and%20Windows%20Runtime.md\" data-linktype=\"relative-path\">.NET Framework Support for Windows Store Apps and Windows Runtime</a>). Classes in the Windows Runtime donâ€™t inherit <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, and currently donâ€™t implement a GetHashCode. However, they appear to have <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>, <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>, and GetHashCode methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Windows Runtime classes that are written in C# or Visual Basic can override the GetHashCode method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>One of the simplest ways to compute a hash code for a numeric value that has the same or a smaller range than the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type is to simply return that value. The following example shows such an implementation for a <code>Number</code> structure.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Object.GetHashCode#1\">Public Structure Number\n   Private n As Integer\n\n   Public Sub New(value As Integer)\n      n = value\n   End Sub\n\n   Public ReadOnly Property Value As Integer\n      Get\n         Return n\n      End Get\n   End Property\n   \n   Public Overrides Function Equals(obj As Object) As Boolean\n      If obj Is Nothing OrElse Not TypeOf obj Is Number Then\n         Return False\n      Else\n         Return n = CType(obj, Number).n\n      End If\n   End Function      \n   \n   Public Overrides Function GetHashCode() As Integer\n      Return n\n   End Function\n   \n   Public Overrides Function ToString() As String\n      Return n.ToString()\n   End Function\nEnd Structure\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      For ctr As Integer = 0 To 9\n         Dim randomN As Integer = rnd.Next(Int32.MinValue, Int32.MaxValue)\n         Dim n As New Number(randomN)\n         Console.WriteLine(&quot;n = {0,12}, hash code = {1,12}&quot;, n, n.GetHashCode())\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       n =   -634398368, hash code =   -634398368\n&#39;       n =   2136747730, hash code =   2136747730\n&#39;       n =  -1973417279, hash code =  -1973417279\n&#39;       n =   1101478715, hash code =   1101478715\n&#39;       n =   2078057429, hash code =   2078057429\n&#39;       n =   -334489950, hash code =   -334489950\n&#39;       n =    -68958230, hash code =    -68958230\n&#39;       n =   -379951485, hash code =   -379951485\n&#39;       n =    -31553685, hash code =    -31553685\n&#39;       n =   2105429592, hash code =   2105429592\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.GetHashCode#1\">using System;\n\npublic struct Number\n{\n   private int n;\n\n   public Number(int value)\n   {\n      n = value;\n   }\n\n   public int Value\n   {\n      get { return n; }\n   }\n   \n   public override bool Equals(Object obj)\n   {\n      if (obj == null || ! (obj is Number)) \n         return false;\n      else\n         return n == ((Number) obj).n;\n   }      \n   \n   public override int GetHashCode()\n   {\n      return n;\n   }\n   \n   public override string ToString()\n   {\n      return n.ToString();\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      for (int ctr = 0; ctr &lt;= 9; ctr++) {\n         int randomN = rnd.Next(Int32.MinValue, Int32.MaxValue);\n         Number n = new Number(randomN);\n         Console.WriteLine(&quot;n = {0,12}, hash code = {1,12}&quot;, n, n.GetHashCode());\n      }   \n   }\n}\n// The example displays output like the following:\n//       n =   -634398368, hash code =   -634398368\n//       n =   2136747730, hash code =   2136747730\n//       n =  -1973417279, hash code =  -1973417279\n//       n =   1101478715, hash code =   1101478715\n//       n =   2078057429, hash code =   2078057429\n//       n =   -334489950, hash code =   -334489950\n//       n =    -68958230, hash code =    -68958230\n//       n =   -379951485, hash code =   -379951485\n//       n =    -31553685, hash code =    -31553685\n//       n =   2105429592, hash code =   2105429592\n</code></pre><p> Frequently, a type has multiple data fields that can participate in generating the hash code. One way to generate a hash code is to combine these fields using an <code>XOR (eXclusive OR)</code> operation, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.GetHashCode#2\">using System;\n\n// A type that represents a 2-D point.\npublic struct Point\n{\n    private int x;\n    private int y;\n\n    public Point(int x, int y)\n    {\n       this.x = x;\n       this.y = y;\n    }\n    \n    public override bool Equals(Object obj)\n    {\n       if (! (obj is Point)) return false;\n       \n       Point p = (Point) obj;\n       return x == p.x &amp; y == p.y;\n    }\n    \n    public override int GetHashCode()\n    { \n        return x ^ y;\n    } \n} \n\npublic class Example\n{\n   public static void Main()\n   {\n      Point pt = new Point(5, 8);\n      Console.WriteLine(pt.GetHashCode());\n        \n      pt = new Point(8, 5);\n      Console.WriteLine(pt.GetHashCode());\n   }\n}\n// The example displays the following output:\n//       13\n//       13\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.GetHashCode#2\">&#39; A type that represents a 2-D point.\nPublic Structure Point\n    Private x As Integer\n    Private y As Integer\n\n    Public Sub New(x As Integer, y As Integer)\n       Me.x = x\n       Me.y = y\n    End Sub\n    \n    Public Overrides Function Equals(obj As Object) As Boolean\n       If Not TypeOf obj Is Point Then Return False\n       \n       Dim p As Point = CType(obj, Point)\n       Return x = p.x And y = p.y\n    End Function\n    \n    Public Overrides Function GetHashCode() As Integer \n        Return x Xor y\n    End Function \nEnd Structure \n\nPublic Module Example\n   Public Sub Main() \n      Dim pt As New Point(5, 8)\n      Console.WriteLine(pt.GetHashCode())\n        \n      pt = New Point(8, 5)\n      Console.WriteLine(pt.GetHashCode())\n   End Sub \nEnd Module   \n</code></pre><p> The previous example returns the same hash code for (n1, n2) and (n2, n1), and so may generate more collisions than are desirable. A number of solutions are available so that hash codes in these cases are not identical. One is to return the hash code of a <code>Tuple</code> object that reflects the order of each field. The following example shows a possible implementation that uses the <a class=\"xref\" href=\"system.tuple-2\" data-linktype=\"relative-path\">Tuple&lt;T1,T2&gt;</a> class. Note, though, that the performance overhead of instantiating a <code>Tuple</code> object may significantly impact the overall performance of an application that stores large numbers of objects in hash tables.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.GetHashCode#3\">using System;\n\npublic struct Point\n{\n    private int x;\n    private int y;\n\n    public Point(int x, int y)\n    {\n       this.x = x;\n       this.y = y;\n    }\n    \n    public override bool Equals(Object obj)\n    {\n       if (!(obj is Point)) return false;\n       \n       Point p = (Point) obj;\n       return x == p.x &amp; y == p.y;\n    }\n    \n    public override int GetHashCode()\n    { \n        return Tuple.Create(x, y).GetHashCode();\n    } \n} \n\npublic class Example\n{\n   public static void Main()\n   {\n        Point pt = new Point(5, 8);\n        Console.WriteLine(pt.GetHashCode());\n        \n        pt = new Point(8, 5);\n        Console.WriteLine(pt.GetHashCode());\n   }\n}\n// The example displays the following output:\n//       173\n//       269\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.GetHashCode#3\">Public Structure Point\n    Private x As Integer\n    Private y As Integer\n\n    Public Sub New(x As Integer, y As Integer)\n       Me.x = x\n       Me.y = y\n    End Sub\n    \n    Public Overrides Function Equals(obj As Object) As Boolean\n       If Not TypeOf obj Is Point Then Return False\n       \n       Dim p As Point = CType(obj, Point)\n       Return x = p.x And y = p.y\n    End Function\n    \n    Public Overrides Function GetHashCode() As Integer \n        Return Tuple.Create(x, y).GetHashCode()\n    End Function \nEnd Structure \n\nPublic Module Example\n    Public Sub Main() \n        Dim pt As New Point(5, 8)\n        Console.WriteLine(pt.GetHashCode())\n        \n        pt = New Point(8, 5)\n        Console.WriteLine(pt.GetHashCode())\n    End Sub \nEnd Module         \n&#39; The example displays the following output:\n&#39;       173\n&#39;       269\n</code></pre><p> A second alternative solution involves weighting the individual hash codes by left-shifting the hash codes of successive fields by two or more bits. Optimally, instead of being discarded, bits shifted beyond bit 31 should wrap around rather than be discarded. Since bits are discarded by the left-shift operators in both C# and Visual Basic, this requires creating a left shift-and-wrap method like the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.GetHashCode#4\">    public int ShiftAndWrap(int value, int positions)\n    {\n        positions = positions &amp; 0x1F;\n      \n        // Save the existing bit pattern, but interpret it as an unsigned integer.\n        uint number = BitConverter.ToUInt32(BitConverter.GetBytes(value), 0);\n        // Preserve the bits to be discarded.\n        uint wrapped = number &gt;&gt; (32 - positions);\n        // Shift and wrap the discarded bits.\n        return BitConverter.ToInt32(BitConverter.GetBytes((number &lt;&lt; positions) | wrapped), 0);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.GetHashCode#4\">   Public Function ShiftAndWrap(value As Integer, positions As Integer) As Integer\n      positions = positions And &amp;h1F\n      \n      &#39; Save the existing bit pattern, but interpret it as an unsigned integer.\n      Dim number As UInteger = BitConverter.ToUInt32(BitConverter.GetBytes(value), 0)\n      &#39; Preserve the bits to be discarded.\n      Dim wrapped AS UInteger = number &gt;&gt; (32 - positions)\n      &#39; Shift and wrap the discarded bits.\n      Return BitConverter.ToInt32(BitConverter.GetBytes((number &lt;&lt; positions) Or wrapped), 0)\n   End Function\n</code></pre><p> The following example then uses this shift-and-wrap method to compute the hash code of the <code>Point</code> structure used in the previous examples.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.GetHashCode#5\">using System;\n\npublic struct Point\n{\n    private int x;\n    private int y;\n\n    public Point(int x, int y)\n    {\n       this.x = x;\n       this.y = y;\n    }\n    \n    public override bool Equals(Object obj)\n    {\n       if (!(obj is Point)) return false;\n       \n       Point p = (Point) obj;\n       return x == p.x &amp; y == p.y;\n    }\n    \n    public override int GetHashCode()\n    { \n        return ShiftAndWrap(x.GetHashCode(), 2) ^ y.GetHashCode();\n    } \n    \n    private int ShiftAndWrap(int value, int positions)\n    {\n        positions = positions &amp; 0x1F;\n      \n        // Save the existing bit pattern, but interpret it as an unsigned integer.\n        uint number = BitConverter.ToUInt32(BitConverter.GetBytes(value), 0);\n        // Preserve the bits to be discarded.\n        uint wrapped = number &gt;&gt; (32 - positions);\n        // Shift and wrap the discarded bits.\n        return BitConverter.ToInt32(BitConverter.GetBytes((number &lt;&lt; positions) | wrapped), 0);\n    }\n} \n\npublic class Example\n{\n   public static void Main()\n   {\n        Point pt = new Point(5, 8);\n        Console.WriteLine(pt.GetHashCode());\n        \n        pt = new Point(8, 5);\n        Console.WriteLine(pt.GetHashCode());\n   }\n}\n// The example displays the following output:\n//       28\n//       37 \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.GetHashCode#5\">Public Structure Point\n    Private x As Integer\n    Private y As Integer\n\n    Public Sub New(x As Integer, y As Integer)\n       Me.x = x\n       Me.y = y\n    End Sub\n    \n    Public Overrides Function Equals(obj As Object) As Boolean\n       If Not TypeOf obj Is Point Then Return False\n       \n       Dim p As Point = CType(obj, Point)\n       Return x = p.x And y = p.y\n    End Function\n    \n    Public Overrides Function GetHashCode() As Integer \n        Return ShiftAndWrap(x.GetHashCode(), 2) XOr y.GetHashCode()\n    End Function \n    \n    Private Function ShiftAndWrap(value As Integer, positions As Integer) As Integer\n        positions = positions And &amp;h1F\n      \n        &#39; Save the existing bit pattern, but interpret it as an unsigned integer.\n        Dim number As UInteger = BitConverter.ToUInt32(BitConverter.GetBytes(value), 0)\n        &#39; Preserve the bits to be discarded.\n        Dim wrapped AS UInteger = number &gt;&gt; (32 - positions)\n        &#39; Shift and wrap the discarded bits.\n        Return BitConverter.ToInt32(BitConverter.GetBytes((number &lt;&lt; positions) Or wrapped), 0)\n    End Function\nEnd Structure \n\nModule Example\n   Public Sub Main()\n        Dim pt As New Point(5, 8)\n        Console.WriteLine(pt.GetHashCode())\n        \n        pt = New Point(8, 5)\n        Console.WriteLine(pt.GetHashCode())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       28\n&#39;       37\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Object_GetType\">\r\n    \r\n            <a id=\"System_Object_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The exact runtime type of the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a> is the base class for all types in the .NET Framework type system, the GetType method can be used to return <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that represent all .NET Framework types. The .NET Framework recognizes the following five categories of types:  </p>\n<ul>\n<li><p>Classes, which are derived from <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>,  </p>\n</li>\n<li><p>Value types, which are derived from <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>.  </p>\n</li>\n<li><p>Interfaces, which are derived from <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a> starting with the .NET Framework 2.0.  </p>\n</li>\n<li><p>Enumerations, which are derived from <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a>.  </p>\n</li>\n<li><p>Delegates, which are derived from <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">System.MulticastDelegate</a>.  </p>\n<p>For two objects <code>x</code> and <code>y</code> that have identical runtime types, <code>Object.ReferenceEquals(x.GetType(),y.GetType())</code> returns <code>true</code>. The following example uses the GetType method with the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether one numeric value is the same type as two other numeric values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.GetType#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int n1 = 12;\n      int n2 = 82;\n      long n3 = 12;\n      \n      Console.WriteLine(&quot;n1 and n2 are the same type: {0}&quot;,\n                        Object.ReferenceEquals(n1.GetType(), n2.GetType()));\n      Console.WriteLine(&quot;n1 and n3 are the same type: {0}&quot;,\n                        Object.ReferenceEquals(n1.GetType(), n3.GetType()));\n   }\n}\n// The example displays the following output:\n//       n1 and n2 are the same type: True\n//       n1 and n3 are the same type: False      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.GetType#1\">Module Example\n   Public Sub Main()\n      Dim n1 As Integer = 12\n      Dim n2 As Integer = 82\n      Dim n3 As Long = 12\n      \n      Console.WriteLine(&quot;n1 and n2 are the same type: {0}&quot;,\n                        Object.ReferenceEquals(n1.GetType(), n2.GetType()))\n      Console.WriteLine(&quot;n1 and n3 are the same type: {0}&quot;,\n                        Object.ReferenceEquals(n1.GetType(), n3.GetType()))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       n1 and n2 are the same type: True\n&#39;       n1 and n3 are the same type: False      \n</code></pre></li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> To determine whether an object is a specific type, you can use your language&#39;s type comparison keyword or construct. For example, you can use the <code>TypeOfâ€¦Is</code> construct in Visual Basic or the <code>is</code> keyword in C#.  </p>\n</div>\n<p> The GetType method is inherited by all types that derive from <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. This means that, in addition to using your own language&#39;s comparison keyword, you can use the GetType method to determine the type of a particular object, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.GetType#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      object[] values = { (int) 12, (long) 10653, (byte) 12, (sbyte) -5,\n                         16.3, &quot;string&quot; }; \n      foreach (var value in values) {\n         Type t = value.GetType();\n         if (t.Equals(typeof(byte)))\n            Console.WriteLine(&quot;{0} is an unsigned byte.&quot;, value);\n         else if (t.Equals(typeof(sbyte)))\n            Console.WriteLine(&quot;{0} is a signed byte.&quot;, value);\n         else if (t.Equals(typeof(int)))   \n            Console.WriteLine(&quot;{0} is a 32-bit integer.&quot;, value);\n         else if (t.Equals(typeof(long)))   \n            Console.WriteLine(&quot;{0} is a 32-bit integer.&quot;, value);\n         else if (t.Equals(typeof(double)))\n            Console.WriteLine(&quot;{0} is a double-precision floating point.&quot;, \n                              value);\n         else\n            Console.WriteLine(&quot;&#39;{0}&#39; is another data type.&quot;, value);\n      }\n   }\n}\n// The example displays the following output:\n//    12 is a 32-bit integer.\n//    10653 is a 32-bit integer.\n//    12 is an unsigned byte.\n//    -5 is a signed byte.\n//    16.3 is a double-precision floating point.\n//    &#39;string&#39; is another data type.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.GetType#2\">Module Example\n   Public Sub Main()\n      Dim values() As Object = { 12, CLng(10653), CByte(12), \n                                 CSbyte(-5), 16.3, &quot;string&quot; } \n      For Each value In values\n         Dim t AS Type = value.GetType()\n         If t.Equals(GetType(Byte))\n            Console.WriteLine(&quot;{0} is an unsigned byte.&quot;, value)\n         ElseIf t.Equals(GetType(SByte))\n            Console.WriteLine(&quot;{0} is a signed byte.&quot;, value)\n         ElseIf t.Equals(GetType(Integer))   \n            Console.WriteLine(&quot;{0} is a 32-bit integer.&quot;, value)\n         ElseIf t.Equals(GetType(Long))   \n            Console.WriteLine(&quot;{0} is a 32-bit integer.&quot;, value)\n         ElseIf t.Equals(GetType(Double))\n            Console.WriteLine(&quot;{0} is a double-precision floating point.&quot;, \n                              value)\n         Else\n            Console.WriteLine(&quot;&#39;{0}&#39; is another data type.&quot;, value)\n         End If   \n      Next      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       12 is a 32-bit integer.\n&#39;       10653 is a 32-bit integer.\n&#39;       12 is an unsigned byte.\n&#39;       -5 is a signed byte.\n&#39;       16.3 is a double-precision floating point.\n&#39;       &#39;string&#39; is another data type.\n</code></pre><p> The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object exposes the metadata associated with the class of the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates that GetType returns the runtime type of the current instance.  </p>\n<pre><code class=\"lang-cs\" name=\"ECMA-System.Object.GetType#1\">using System;\n\npublic class MyBaseClass {\n}\n\npublic class MyDerivedClass: MyBaseClass {\n}\n\npublic class Test \n{\n   public static void Main() \n   {\n      MyBaseClass myBase = new MyBaseClass();\n      MyDerivedClass myDerived = new MyDerivedClass();\n      object o = myDerived;\n      MyBaseClass b = myDerived;\n\n      Console.WriteLine(&quot;mybase: Type is {0}&quot;, myBase.GetType());\n      Console.WriteLine(&quot;myDerived: Type is {0}&quot;, myDerived.GetType());\n      Console.WriteLine(&quot;object o = myDerived: Type is {0}&quot;, o.GetType());\n      Console.WriteLine(&quot;MyBaseClass b = myDerived: Type is {0}&quot;, b.GetType());\n   }\n}\n// The example displays the following output:\n//    mybase: Type is MyBaseClass\n//    myDerived: Type is MyDerivedClass\n//    object o = myDerived: Type is MyDerivedClass\n//    MyBaseClass b = myDerived: Type is MyDerivedClass \n</code></pre><pre><code class=\"lang-vb\" name=\"ECMA-System.Object.GetType#1\">&#39; Define a base and a derived class.\nPublic Class MyBaseClass\nEnd Class \n\nPublic Class MyDerivedClass : Inherits MyBaseClass\nEnd Class \n\nPublic Class Test\n    Public Shared Sub Main() \n        Dim base As New MyBaseClass()\n        Dim derived As New MyDerivedClass()\n        Dim o As Object = derived\n        Dim b As MyBaseClass = derived\n        \n        Console.WriteLine(&quot;base.GetType returns {0}&quot;, base.GetType())\n        Console.WriteLine(&quot;derived.GetType returns {0}&quot;, derived.GetType())\n        Console.WriteLine(&quot;Dim o As Object = derived; o.GetType returns {0}&quot;, o.GetType())\n        Console.WriteLine(&quot;Dim b As MyBaseClass = derived; b.Type returns {0}&quot;, b.GetType())\n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;    base.GetType returns MyBaseClass\n&#39;    derived.GetType returns MyDerivedClass\n&#39;    Dim o As Object = derived; o.GetType returns MyDerivedClass\n&#39;    Dim b As MyBaseClass = derived; b.Type returns MyDerivedClass\n</code></pre><pre><code class=\"lang-cpp\" name=\"ECMA-System.Object.GetType#1\">using namespace System;\n\npublic ref class MyBaseClass {};\n\npublic ref class MyDerivedClass: MyBaseClass{};\n\nint main()\n{\n   MyBaseClass^ myBase = gcnew MyBaseClass;\n   MyDerivedClass^ myDerived = gcnew MyDerivedClass;\n   Object^ o = myDerived;\n   MyBaseClass^ b = myDerived;\n   Console::WriteLine( &quot;mybase: Type is {0}&quot;, myBase-&gt;GetType() );\n   Console::WriteLine( &quot;myDerived: Type is {0}&quot;, myDerived-&gt;GetType() );\n   Console::WriteLine( &quot;object o = myDerived: Type is {0}&quot;, o-&gt;GetType() );\n   Console::WriteLine( &quot;MyBaseClass b = myDerived: Type is {0}&quot;, b-&gt;GetType() );\n}\n\n/*\n\nThis code produces the following output.\n\nmybase: Type is MyBaseClass\nmyDerived: Type is MyDerivedClass\nobject o = myDerived: Type is MyDerivedClass\nMyBaseClass b = myDerived: Type is MyDerivedClass \n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Object_MemberwiseClone\">\r\n    \r\n            <a id=\"System_Object_MemberwiseClone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberwiseClone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected object MemberwiseClone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>A shallow copy of the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MemberwiseClone method creates a shallow copy by creating a new object, and then copying the nonstatic fields of the current object to the new object. If a field is a value type, a bit-by-bit copy of the field is performed. If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.  </p>\n<p> For example, consider an object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy of C. The example illustrates the difference between a shallow and a deep copy operation.  </p>\n<p> There are numerous ways to implement a deep copy operation if the shallow copy operation performed by the MemberwiseClone method does not meet your needs. These include the following:  </p>\n<ul>\n<li><p>Call a class constructor of the object to be copied to create a second object with property values taken from the first object. This assumes that the values of an object are entirely defined by its class constructor.  </p>\n</li>\n<li><p>Call the MemberwiseClone method to create a shallow copy of an object, and then assign new objects whose values are the same as the original object to any properties or fields whose values are reference types. The <code>DeepCopy</code> method in the example illustrates this approach.  </p>\n</li>\n<li><p>Serialize the object to be deep copied, and then restore the serialized data to a different object variable.  </p>\n</li>\n<li><p>Use reflection with recursion to perform the deep copy operation.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the MemberwiseClone method. It defines a <code>ShallowCopy</code> method that calls the MemberwiseClone method to perform a shallow copy operation on a <code>Person</code> object. It also defines a <code>DeepCopy</code> method that performs a deep copy operation on a <code>Person</code> object.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Object.MemberwiseClone#1\">Public Class IdInfo\n    Public IdNumber As Integer\n    \n    Public Sub New(IdNumber As Integer)\n        Me.IdNumber = IdNumber\n    End Sub\nEnd Class\n\nPublic Class Person \n    Public Age As Integer\n    Public Name As String\n    Public IdInfo As IdInfo\n\n    Public Function ShallowCopy() As Person\n       Return DirectCast(Me.MemberwiseClone(), Person)\n    End Function\n\n    Public Function DeepCopy() As Person\n       Dim other As Person = DirectCast(Me.MemberwiseClone(), Person) \n       other.IdInfo = New IdInfo(IdInfo.IdNumber)\n       other.Name = String.Copy(Name)\n       Return other\n    End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n        &#39; Create an instance of Person and assign values to its fields.\n        Dim p1 As New Person()\n        p1.Age = 42\n        p1.Name = &quot;Sam&quot;\n        p1.IdInfo = New IdInfo(6565)\n\n        &#39; Perform a shallow copy of p1 and assign it to p2.\n        Dim p2 As Person = p1.ShallowCopy()\n\n        &#39; Display values of p1, p2\n        Console.WriteLine(&quot;Original values of p1 and p2:&quot;)\n        Console.WriteLine(&quot;   p1 instance values: &quot;)\n        DisplayValues(p1)\n        Console.WriteLine(&quot;   p2 instance values:&quot;)\n        DisplayValues(p2)\n        Console.WriteLine()\n                \n        &#39; Change the value of p1 properties and display the values of p1 and p2.\n        p1.Age = 32\n        p1.Name = &quot;Frank&quot;\n        p1.IdInfo.IdNumber = 7878\n        Console.WriteLine(&quot;Values of p1 and p2 after changes to p1:&quot;)\n        Console.WriteLine(&quot;   p1 instance values: &quot;)\n        DisplayValues(p1)\n        Console.WriteLine(&quot;   p2 instance values:&quot;)\n        DisplayValues(p2)\n        Console.WriteLine()\n        \n        &#39; Make a deep copy of p1 and assign it to p3.\n        Dim p3 As Person = p1.DeepCopy()\n        &#39; Change the members of the p1 class to new values to show the deep copy.\n        p1.Name = &quot;George&quot;\n        p1.Age = 39\n        p1.IdInfo.IdNumber = 8641\n        Console.WriteLine(&quot;Values of p1 and p3 after changes to p1:&quot;)\n        Console.WriteLine(&quot;   p1 instance values: &quot;)\n        DisplayValues(p1)\n        Console.WriteLine(&quot;   p3 instance values:&quot;)\n        DisplayValues(p3)\n   End Sub\n   \n    Public Sub DisplayValues(p As Person)\n        Console.WriteLine(&quot;      Name: {0:s}, Age: {1:d}&quot;, p.Name, p.Age)\n        Console.WriteLine(&quot;      Value: {0:d}&quot;, p.IdInfo.IdNumber)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Original values of m1 and m2:\n&#39;          m1 instance values:\n&#39;             Name: Sam, Age: 42\n&#39;             Value: 6565\n&#39;          m2 instance values:\n&#39;             Name: Sam, Age: 42\n&#39;             Value: 6565\n&#39;       \n&#39;       Values of m1 and m2 after changes to m1:\n&#39;          m1 instance values:\n&#39;             Name: Frank, Age: 32\n&#39;             Value: 7878\n&#39;          m2 instance values:\n&#39;             Name: Sam, Age: 42\n&#39;             Value: 7878\n&#39;       \n&#39;       Values of m1 and m3 after changes to m1:\n&#39;          m1 instance values:\n&#39;             Name: George, Age: 39\n&#39;             Value: 8641\n&#39;          m3 instance values:\n&#39;             Name: Frank, Age: 32\n&#39;             Value: 7878\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.MemberwiseClone#1\">using System;\n\npublic class IdInfo\n{\n    public int IdNumber;\n    \n    public IdInfo(int IdNumber)\n    {\n        this.IdNumber = IdNumber;\n    }\n}\n\npublic class Person \n{\n    public int Age;\n    public string Name;\n    public IdInfo IdInfo;\n\n    public Person ShallowCopy()\n    {\n       return (Person) this.MemberwiseClone();\n    }\n\n    public Person DeepCopy()\n    {\n       Person other = (Person) this.MemberwiseClone();\n       other.IdInfo = new IdInfo(IdInfo.IdNumber);\n       other.Name = String.Copy(Name);\n       return other;\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create an instance of Person and assign values to its fields.\n        Person p1 = new Person();\n        p1.Age = 42;\n        p1.Name = &quot;Sam&quot;;\n        p1.IdInfo = new IdInfo(6565);\n\n        // Perform a shallow copy of p1 and assign it to p2.\n        Person p2 = p1.ShallowCopy();\n\n        // Display values of p1, p2\n        Console.WriteLine(&quot;Original values of p1 and p2:&quot;);\n        Console.WriteLine(&quot;   p1 instance values: &quot;);\n        DisplayValues(p1);\n        Console.WriteLine(&quot;   p2 instance values:&quot;);\n        DisplayValues(p2);\n        \n        // Change the value of p1 properties and display the values of p1 and p2.\n        p1.Age = 32;\n        p1.Name = &quot;Frank&quot;;\n        p1.IdInfo.IdNumber = 7878;\n        Console.WriteLine(&quot;<br>Values of p1 and p2 after changes to p1:&quot;);\n        Console.WriteLine(&quot;   p1 instance values: &quot;);\n        DisplayValues(p1);\n        Console.WriteLine(&quot;   p2 instance values:&quot;);\n        DisplayValues(p2);\n\n        // Make a deep copy of p1 and assign it to p3.\n        Person p3 = p1.DeepCopy();\n        // Change the members of the p1 class to new values to show the deep copy.\n        p1.Name = &quot;George&quot;;\n        p1.Age = 39;\n        p1.IdInfo.IdNumber = 8641;\n        Console.WriteLine(&quot;<br>Values of p1 and p3 after changes to p1:&quot;);\n        Console.WriteLine(&quot;   p1 instance values: &quot;);\n        DisplayValues(p1);\n        Console.WriteLine(&quot;   p3 instance values:&quot;);\n        DisplayValues(p3);\n    }\n\n    public static void DisplayValues(Person p)\n    {\n        Console.WriteLine(&quot;      Name: {0:s}, Age: {1:d}&quot;, p.Name, p.Age);\n        Console.WriteLine(&quot;      Value: {0:d}&quot;, p.IdInfo.IdNumber);\n    }\n}\n// The example displays the following output:\n//       Original values of p1 and p2:\n//          p1 instance values:\n//             Name: Sam, Age: 42\n//             Value: 6565\n//          p2 instance values:\n//             Name: Sam, Age: 42\n//             Value: 6565\n//       \n//       Values of p1 and p2 after changes to p1:\n//          p1 instance values:\n//             Name: Frank, Age: 32\n//             Value: 7878\n//          p2 instance values:\n//             Name: Sam, Age: 42\n//             Value: 7878\n//       \n//       Values of p1 and p3 after changes to p1:\n//          p1 instance values:\n//             Name: George, Age: 39\n//             Value: 8641\n//          p3 instance values:\n//             Name: Frank, Age: 32\n//             Value: 7878\n</code></pre><p> In this example, the <code>Person.IdInfo</code> property returns an <code>IdInfo</code> object. As the output from the example shows, when a <code>Person</code> object is cloned by calling the MemberwiseClone method, the cloned <code>Person</code> object is an independent copy of the original object, except that they share the same <code>Person.IdInfo</code> object reference. As a result, modifying the clone&#39;s <code>Person.IdInfo</code> property changes the original object&#39;s <code>Person.IdInfo</code> property. On the other hand, when a deep copy operation is performed, the cloned <code>Person</code> object, including its <code>Person.IdInfo</code> property, can be modified without affecting the original object.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Object_ReferenceEquals_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Object_ReferenceEquals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReferenceEquals(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> instances are the same instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ReferenceEquals (object objA, object objB);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>objA</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>objB</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object  to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>objA</code> is the same instance as <code>objB</code> or if both are <strong>null</strong>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method and the equality operator, the ReferenceEquals method cannot be overridden. Because of this, if you want to test two object references for equality and you are unsure about the implementation of the <code>Equals</code> method, you can call the ReferenceEquals method.  </p>\n<p> However, the return value of the ReferenceEquals method may appear to be anomalous in these two scenarios:  </p>\n<ul>\n<li><p>When comparing value types. If <code>objA</code> and <code>objB</code> are value types, they are boxed before they are passed to the ReferenceEquals method. This means that if both <code>objA</code> and <code>objB</code> represent the same instance of a value type, the ReferenceEquals method nevertheless returns <code>false</code>, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Object.ReferenceEquals#1\">Public Module Example\n   Public Sub Main\n      Dim int1 As Integer = 3\n      Console.WriteLine(Object.ReferenceEquals(int1, int1))\n      Console.WriteLine(int1.GetType().IsValueType)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       False\n&#39;       True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.ReferenceEquals#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int int1 = 3;\n      Console.WriteLine(Object.ReferenceEquals(int1, int1));\n      Console.WriteLine(int1.GetType().IsValueType);\n   }\n}\n// The example displays the following output:\n//       False\n//       True\n</code></pre><p> For information on boxing value types, see <a href=\"../Topic/Boxing%20and%20Unboxing%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Boxing and Unboxing</a>.  </p>\n</li>\n<li><p>When comparing strings. If <code>objA</code> and <code>objB</code> are strings, the ReferenceEquals method returns <code>true</code> if the string is interned. It does not perform a test for value equality.  In the following example, <code>s1</code> and <code>s2</code> are equal because they are two instances of a single interned string. However, <code>s3</code> and <code>s4</code> are not equal, because although they are have identical string values, that string is not interned.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.ReferenceEquals#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String s1 = &quot;String1&quot;;\n      String s2 = &quot;String1&quot;;\n      Console.WriteLine(&quot;s1 = s2: {0}&quot;, Object.ReferenceEquals(s1, s2));\n      Console.WriteLine(&quot;{0} interned: {1}&quot;, s1, \n                        String.IsNullOrEmpty(String.IsInterned(s1)) ? &quot;No&quot; : &quot;Yes&quot;);\n\n      String suffix = &quot;A&quot;;\n      String s3 = &quot;String&quot; + suffix;\n      String s4 = &quot;String&quot; + suffix;\n      Console.WriteLine(&quot;s3 = s4: {0}&quot;, Object.ReferenceEquals(s3, s4));\n      Console.WriteLine(&quot;{0} interned: {1}&quot;, s3, \n                        String.IsNullOrEmpty(String.IsInterned(s3)) ? &quot;No&quot; : &quot;Yes&quot;);\n   }\n}\n// The example displays the following output:\n//       s1 = s2: True\n//       String1 interned: Yes\n//       s3 = s4: False\n//       StringA interned: No\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ReferenceEquals#2\">Module Example\n   Public Sub Main()\n      Dim s1 As String = &quot;String1&quot;\n      Dim s2 As String = &quot;String1&quot;\n      Console.WriteLine(&quot;s1 = s2: {0}&quot;, Object.ReferenceEquals(s1, s2))\n      Console.WriteLine(&quot;{0} interned: {1}&quot;, s1, \n                        If(String.IsNullOrEmpty(String.IsInterned(s1)), &quot;No&quot;, &quot;Yes&quot;))\n\n      Dim suffix As String = &quot;A&quot;\n      Dim s3 = &quot;String&quot; + suffix\n      Dim s4 = &quot;String&quot; + suffix\n      Console.WriteLine(&quot;s3 = s4: {0}&quot;, Object.ReferenceEquals(s3, s4))\n      Console.WriteLine(&quot;{0} interned: {1}&quot;, s3, \n                        If(String.IsNullOrEmpty(String.IsInterned(s3)), &quot;No&quot;, &quot;Yes&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       s1 = s2: True\n&#39;       String1 interned: Yes\n&#39;       s3 = s4: False\n&#39;       StringA interned: No\n</code></pre><p> For more information about string interning, see <a class=\"xref\" href=\"system.string#System_String_IsInterned_\" data-linktype=\"relative-path\">IsInterned</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses ReferenceEquals to determine if two objects are the same instance.  </p>\n<pre><code class=\"lang-cs\" name=\"ECMA-System.Object.ReferenceEquals#1\">using System;\n\nclass MyClass {\n\n   static void Main() {\n      object o = null;\n      object p = null;\n      object q = new Object();\n\n      Console.WriteLine(Object.ReferenceEquals(o, p));\n      p = q;\n      Console.WriteLine(Object.ReferenceEquals(p, q));\n      Console.WriteLine(Object.ReferenceEquals(o, p));\n   }\n}\n\n\n/*\n\nThis code produces the following output.\n\nTrue\nTrue\nFalse\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"ECMA-System.Object.ReferenceEquals#1\">using namespace System;\nint main()\n{\n   Object^ o = nullptr;\n   Object^ p = nullptr;\n   Object^ q = gcnew Object;\n   Console::WriteLine( Object::ReferenceEquals( o, p ) );\n   p = q;\n   Console::WriteLine( Object::ReferenceEquals( p, q ) );\n   Console::WriteLine( Object::ReferenceEquals( o, p ) );\n}\n\n/*\n\nThis code produces the following output.\n\nTrue\nTrue\nFalse\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"ECMA-System.Object.ReferenceEquals#1\">Imports System\n\nPublic Class App\n    Public Shared Sub Main() \n        Dim o As Object = Nothing\n        Dim p As Object = Nothing\n        Dim q As New Object\n        Console.WriteLine(Object.ReferenceEquals(o, p))\n        p = q\n        Console.WriteLine(Object.ReferenceEquals(p, q))\n        Console.WriteLine(Object.ReferenceEquals(o, p))\n    End Sub \nEnd Class \n&#39; This code produces the following output:\n&#39;\n&#39; True\n&#39; True\n&#39; False\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Object_ToString\">\r\n    \r\n            <a id=\"System_Object_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the current object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ToString is the major formatting method in the .NET Framework. It converts an object to its string representation so that it is suitable for display. (For information about formatting support in the .NET Framework, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.) Default implementations of the ToString method return the fully qualified name of the object&#39;s type.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You may have reached this page by following the link from the member list of another type. That is because that type does not override ToString. Instead, it inherits the functionality of the ToString method.  </p>\n</div>\n<p> Types frequently override the ToString method to provide a more suitable string representation of a particular type. Types also frequently overload the ToString method to provide support for format strings or culture-sensitive formatting.  </p>\n<p> In this section:  </p>\n<p> <a href=\"#Default\" data-linktype=\"self-bookmark\">The default Object.ToString() method</a><br> <a href=\"#Overriding\" data-linktype=\"self-bookmark\">Overriding the Object.ToString() method</a><br> <a href=\"#Overloading\" data-linktype=\"self-bookmark\">Overloading the ToString method</a><br> <a href=\"#Extending\" data-linktype=\"self-bookmark\">Extending the Object.ToString method</a><br> <a href=\"#WinRT\" data-linktype=\"self-bookmark\">Notes for the Windows Runtime</a>  </p>\n<p><a name=\"Default\"></a>   </p>\n<h2 id=\"the-default-objecttostring-method\">The default Object.ToString() method</h2>\n<p> The default implementation of the ToString method returns the fully qualified name of the type of the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, as the following example shows.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Object.ToString#1\">using namespace System;\n\nvoid main()\n{\n   Object^ obj = gcnew Object();\n   Console::WriteLine(obj-&gt;ToString());\n}\n// The example displays the following output:\n//      System.Object\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.ToString#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Object obj = new Object();\n      Console.WriteLine(obj.ToString());\n   }\n}\n// The example displays the following output:\n//      System.Object\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ToString#1\">Module Example\n   Public Sub Main()\n      Dim obj As New Object()\n      Console.WriteLine(obj.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      System.Object\n</code></pre><p> Because <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is the base class of all reference types in the .NET Framework, this behavior is inherited by reference types that do not override the ToString method. The following example illustrates this. It defines a class named <code>Object1</code> that accepts the default implementation of all <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> members. Its ToString method returns the object&#39;s fully qualified type name.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Object.ToString#2\">using namespace System;\n\nnamespace Examples\n{\n   ref class Object1\n   {\n   };\n}\n\nvoid main()\n{\n   Object^ obj1 = gcnew Examples::Object1();\n   Console::WriteLine(obj1-&gt;ToString());\n}\n// The example displays the following output:\n//   Examples.Object1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.ToString#2\">using System;\nusing Examples;\n\nnamespace Examples\n{\n   public class Object1\n   {\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      object obj1 = new Object1();\n      Console.WriteLine(obj1.ToString());\n   }\n}\n// The example displays the following output:\n//   Examples.Object1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ToString#2\">Imports Examples\n\nNamespace Examples\n   Public Class Object1\n   End Class\nEnd Namespace\n\nModule Example\n   Public Sub Main()\n      Dim obj1 As New Object1()\n      Console.WriteLine(obj1.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   Examples.Object1\n</code></pre><p><a name=\"Overriding\"></a>   </p>\n<h2 id=\"overriding-the-objecttostring-method\">Overriding the Object.ToString() method</h2>\n<p> Types commonly override the ToString method to return a string that represents the object instance. For example, the base types such as <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, and <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> provide ToString implementations that return the string form of the value that the object represents. The following example defines a class, <code>Object2</code>, that overrides the ToString method to return the type name along with its value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Object.ToString#3\">using namespace System;\n\nref class Object2\n{\n   private:\n      Object^ value;\n\n   public:\n      Object2(Object^ value)\n      {\n         this-&gt;value = value;\n      }\n\n      virtual String^ ToString() override\n      {\n         return Object::ToString() + &quot;: &quot; + value-&gt;ToString();\n      }\n};\n\nvoid main()\n{\n   Object2^ obj2 = gcnew Object2(L&#39;a&#39;);\n   Console::WriteLine(obj2-&gt;ToString());\n \n}\n// The example displays the following output:\n//       Object2: a\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Object.ToString#3\">using System;\n\npublic class Object2\n{\n   private object value;\n   \n   public Object2(object value)\n   {\n      this.value = value;\n   }\n   \n   public override string ToString()\n   {\n      return base.ToString() + &quot;: &quot; + value.ToString();\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Object2 obj2 = new Object2(&#39;a&#39;);\n      Console.WriteLine(obj2.ToString());\n   }\n}\n// The example displays the following output:\n//       Object2: a\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ToString#3\">Public Class Object2\n   Private value As Object\n   \n   Public Sub New(value As Object)\n      Me.value = value\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return MyBase.ToString + &quot;: &quot; + value.ToString()\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim obj2 As New Object2(&quot;a&quot;c)\n      Console.WriteLine(obj2.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Object2: a\n</code></pre><p> The following table lists the type categories in the .NET Framework and indicates whether or not they override the ToString method.  </p>\n<table>\n<thead>\n<tr>\n<th>Type category</th>\n<th>Overrides Object.ToString()</th>\n<th>Behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class</td>\n<td>n/a</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>Structure</td>\n<td>Yes (<a class=\"xref\" href=\"system.valuetype#System_ValueType_ToString_\" data-linktype=\"relative-path\">ToString</a>)</td>\n<td>Same as Object.ToString()</td>\n</tr>\n<tr>\n<td>Enumeration</td>\n<td>Yes (<a class=\"xref\" href=\"system.enum#System_Enum_ToString\" data-linktype=\"relative-path\">System.Enum.ToString()</a>)</td>\n<td>The member name</td>\n</tr>\n<tr>\n<td>Interface</td>\n<td>No</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>Delegate</td>\n<td>No</td>\n<td>n/a</td>\n</tr>\n</tbody>\n</table>\n<p> See the Notes to Inheritors section for additional information on overriding ToString.  </p>\n<p><a name=\"Overloading\"></a>   </p>\n<h2 id=\"overloading-the-tostring-method\">Overloading the ToString method</h2>\n<p> In addition to overriding the parameterless ToString method, many types overload the <code>ToString</code> method to provide versions of the method that accept parameters. Most commonly, this is done to provide support for variable formatting and culture-sensitive formatting.  </p>\n<p> The following example overloads the <code>ToString</code> method to return a result string that includes the value of various fields of an <code>Automobile</code> class. It defines four format strings: G, which returns the model name and year; D, which returns the model name, year, and number of doors; C, which returns the model name, year, and number of cylinders; and A, which returns a string with all four field values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.ToString#4\">using System;\n\npublic class Automobile\n{\n   private int _doors;\n   private String _cylinders;\n   private int _year;\n   private String _model;\n\n   public Automobile(String model, int year , int doors,\n                     String cylinders)\n   {\n      _model = model;\n      _year = year;\n      _doors = doors;\n      _cylinders = cylinders;\n   }\n\n   public int Doors\n   { get { return _doors; } }\n\n   public String Model\n   { get { return _model; } }\n\n   public int Year\n   { get { return _year; } }\n\n   public String Cylinders\n   { get { return _cylinders; } }\n\n   public override String ToString()\n   {\n      return ToString(&quot;G&quot;);\n   }\n\n   public String ToString(String fmt)\n   {\n      if (String.IsNullOrEmpty(fmt))\n         fmt = &quot;G&quot;;\n\n      switch (fmt.ToUpperInvariant())\n      {\n         case &quot;G&quot;:\n            return String.Format(&quot;{0} {1}&quot;, _year, _model);\n         case &quot;D&quot;:\n            return String.Format(&quot;{0} {1}, {2} dr.&quot;,\n                                 _year, _model, _doors);\n         case &quot;C&quot;:\n            return String.Format(&quot;{0} {1}, {2}&quot;,\n                                 _year, _model, _cylinders);\n         case &quot;A&quot;:\n            return String.Format(&quot;{0} {1}, {2} dr. {3}&quot;,\n                                 _year, _model, _doors, _cylinders);\n         default:\n            String msg = String.Format(&quot;&#39;{0}&#39; is an invalid format string&quot;,\n                                       fmt);\n            throw new ArgumentException(msg);\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var auto = new Automobile(&quot;Lynx&quot;, 2016, 4, &quot;V8&quot;);\n      Console.WriteLine(auto.ToString());\n      Console.WriteLine(auto.ToString(&quot;A&quot;));\n   }\n}\n// The example displays the following output:\n//       2016 Lynx\n//       2016 Lynx, 4 dr. V8\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ToString#4\">Public Class Automobile\n   Private _doors As Integer\n   Private _cylinders As String\n   Private _year As Integer\n   Private _model As String\n   \n   Public Sub New(model As String, year As Integer, doors As Integer,\n                  cylinders As String)\n      _model = model\n      _year = year\n      _doors = doors\n      _cylinders = cylinders\n   End Sub\n   \n   Public ReadOnly Property Doors As Integer\n      Get\n          Return _doors\n      End Get\n   End Property\n   \n   Public ReadOnly Property Model As String\n      Get\n         Return _model\n      End Get\n   End Property\n   \n   Public ReadOnly Property Year As Integer\n      Get\n         Return _year\n      End Get\n   End Property\n   \n   Public ReadOnly Property Cylinders As String\n      Get\n         Return _cylinders\n      End Get\n   End Property\n   \n   Public Overrides Function ToString() As String\n      Return ToString(&quot;G&quot;)\n   End Function\n   \n   Public Overloads Function ToString(fmt As String) As String\n      If String.IsNullOrEmpty(fmt) Then fmt = &quot;G&quot;\n      \n      Select Case fmt.ToUpperInvariant()\n         Case &quot;G&quot;\n            Return String.Format(&quot;{0} {1}&quot;, _year, _model)\n         Case &quot;D&quot;\n            Return String.Format(&quot;{0} {1}, {2} dr.&quot;,\n                                 _year, _model, _doors)\n         Case &quot;C&quot;\n            Return String.Format(&quot;{0} {1}, {2}&quot;,\n                                 _year, _model, _cylinders)\n         Case &quot;A&quot;\n            Return String.Format(&quot;{0} {1}, {2} dr. {3}&quot;,\n                                 _year, _model, _doors, _cylinders)\n         Case Else\n            Dim msg As String = String.Format(&quot;&#39;{0}&#39; is an invalid format string&quot;,\n                                              fmt)\n            Throw New ArgumentException(msg)\n      End Select\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim auto As New Automobile(&quot;Lynx&quot;, 2016, 4, &quot;V8&quot;)\n      Console.WriteLine(auto.ToString())\n      Console.WriteLine(auto.ToString(&quot;A&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       2016 Lynx\n&#39;       2016 Lynx, 4 dr. V8\n</code></pre><p> The following example calls the overloaded <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.ToString(String,IFormatProvider)</a> method to display culture-sensitive formatting of a currency value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.ToString#5\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] cultureNames = { &quot;en-US&quot;, &quot;en-GB&quot;, &quot;fr-FR&quot;,\n                                &quot;hr-HR&quot;, &quot;ja-JP&quot; };\n      Decimal value = 1603.49m;\n      foreach (var cultureName in cultureNames) {\n         CultureInfo culture = new CultureInfo(cultureName);\n         Console.WriteLine(&quot;{0}: {1}&quot;, culture.Name,\n                           value.ToString(&quot;C2&quot;, culture));\n      }\n   }\n}\n// The example displays the following output:\n//       en-US: $1,603.49\n//       en-GB: &#163;1,603.49\n//       fr-FR: 1&#160;603,49 â‚¬\n//       hr-HR: 1.603,49 kn\n//       ja-JP: &#165;1,603.49\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ToString#5\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;en-GB&quot;, &quot;fr-FR&quot;,\n                                       &quot;hr-HR&quot;, &quot;ja-JP&quot; }\n      Dim value As Decimal = 1603.49d\n      For Each cultureName In cultureNames\n         Dim culture As New CultureInfo(cultureName)\n         Console.WriteLine(&quot;{0}: {1}&quot;, culture.Name,\n                           value.ToString(&quot;C2&quot;, culture))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       en-US: $1,603.49\n&#39;       en-GB: &#163;1,603.49\n&#39;       fr-FR: 1&#160;603,49 â‚¬\n&#39;       hr-HR: 1.603,49 kn\n&#39;       ja-JP: &#165;1,603.49\n</code></pre><p> For more information on format strings and culture-sensitive formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>. For the format strings supported by numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the format strings supported by date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n<p><a name=\"Extending\"></a>   </p>\n<h2 id=\"extending-the-objecttostring-method\">Extending the Object.ToString method</h2>\n<p> Because a type inherits the default ToString method, you may find its behavior undesirable and want to change it. This is particularly true of arrays and collection classes. While you may expect the <code>ToString</code> method of an array or collection class to display the values of its members, it instead displays the type fully qualified type name, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.ToString#6\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] values = { 1, 2, 4, 8, 16, 32, 64, 128 };\n      Console.WriteLine(values.ToString());\n\n      List&lt;int&gt; list = new List&lt;int&gt;(values);\n      Console.WriteLine(list.ToString());\n   }\n}\n// The example displays the following output:\n//       System.Int32[]\n//       System.Collections.Generic.List`1[System.Int32]\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ToString#6\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      Dim values() As Integer = { 1, 2, 4, 8, 16, 32, 64, 128 }\n      Console.WriteLine(values.ToString())\n      \n      Dim list As New List(Of Integer)(values)\n      Console.WriteLine(list.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    System.Int32[]\n&#39;    System.Collections.Generic.List`1[System.Int32]\n</code></pre><p> You have several options to produce the result string that you&#39;d like.  </p>\n<ul>\n<li><p>If the type is an array, a collection object, or an object that implements the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> or <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interfaces, you can enumerate its elements by using the <code>foreach</code> statement in C# or the <code>For Each...Next</code> construct in Visual Basic.  </p>\n</li>\n<li><p>If the class is not <code>sealed</code> (in C#) or <code>NotInheritable</code> (in Visual Basic), you can develop a wrapper class that inherits from the base class whose ToString method you want to customize. At a minimum, this requires that you do the following:  </p>\n<ol>\n<li><p>Implement any necessary constructors. Derived classes do not inherit their base class constructors.  </p>\n</li>\n<li><p>Override the ToString method to return the result string that you&#39;d like.  </p>\n<p>The following example defines a wrapper class for the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class. It overrides the ToString method to display the value of each method of the collection rather than the fully qualified type name.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.ToString#7\">using System;\nusing System.Collections.Generic;\n\npublic class CList&lt;T&gt; : List&lt;T&gt;\n{\n   public CList(IEnumerable&lt;T&gt; collection) : base(collection)\n   { }\n\n   public CList() : base()\n   {}\n\n   public override String ToString()\n   {\n      String retVal = String.Empty;\n      foreach (T item in this) {\n         if (String.IsNullOrEmpty(retVal))\n            retVal += item.ToString();\n         else\n            retVal += String.Format(&quot;, {0}&quot;, item);\n      }\n      return retVal;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var list2 = new CList&lt;int&gt;();\n      list2.Add(1000);\n      list2.Add(2000);\n      Console.WriteLine(list2.ToString());\n   }\n}\n// The example displays the following output:\n//    1000, 2000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ToString#7\">Imports System.Collections.Generic\n\nPublic Class CList(Of T) : Inherits List(Of T)\n   Public Sub New(capacity As Integer)\n      MyBase.New(capacity)\n   End Sub\n\n   Public Sub New(collection As IEnumerable(Of T))\n      MyBase.New(collection)\n   End Sub\n\n   Public Sub New()\n      MyBase.New()\n   End Sub\n\n   Public Overrides Function ToString() As String\n      Dim retVal As String = String.Empty\n      For Each item As T In Me\n         If String.IsNullOrEmpty(retval) Then\n            retVal += item.ToString()\n         Else\n            retval += String.Format(&quot;, {0}&quot;, item)\n         End If\n      Next\n      Return retVal\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim list2 As New CList(Of Integer)\n      list2.Add(1000)\n      list2.Add(2000)\n      Console.WriteLine(list2.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1000, 2000\n</code></pre></li>\n</ol>\n</li>\n<li><p>Develop an <a href=\"../Topic/Extension%20Methods.md\" data-linktype=\"relative-path\">extension method</a> that returns the result string that you want. Note that you can&#39;t override the default ToString method in this way (that is, your extension class (in C#) or module (in Visual Basic) cannot have a parameterless method named <code>ToString</code> that is called in place of the original type&#39;s <code>ToString</code> method. You&#39;ll have to provide some other name for your parameterless <code>ToString</code> replacement.  </p>\n<p> The following example defines two methods that extend the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class: a parameterless <code>ToString2</code> method, and a <code>ToString</code> method with a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> parameter that represents a format string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Object.ToString#8\">using System;\nusing System.Collections.Generic;\n\npublic static class StringExtensions\n{\n   public static String ToString2&lt;T&gt;(this List&lt;T&gt; l)\n   {\n      String retVal = String.Empty;\n      foreach (T item in l)\n         retVal += String.Format(&quot;{0}{1}&quot;, String.IsNullOrEmpty(retVal) ?\n                                                     &quot;&quot; : &quot;, &quot;,\n                                  item);\n      return String.IsNullOrEmpty(retVal) ? &quot;{}&quot; : &quot;{ &quot; + retVal + &quot; }&quot;;\n   }\n\n   public static String ToString&lt;T&gt;(this List&lt;T&gt; l, String fmt)\n   {\n      String retVal = String.Empty;\n      foreach (T item in l) {\n         IFormattable ifmt = item as IFormattable;\n         if (ifmt != null)\n            retVal += String.Format(&quot;{0}{1}&quot;,\n                                    String.IsNullOrEmpty(retVal) ?\n                                       &quot;&quot; : &quot;, &quot;, ifmt.ToString(fmt, null));\n         else\n            retVal += ToString2(l);\n      }\n      return String.IsNullOrEmpty(retVal) ? &quot;{}&quot; : &quot;{ &quot; + retVal + &quot; }&quot;;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      List&lt;int&gt; list = new List&lt;int&gt;();\n      list.Add(1000);\n      list.Add(2000);\n      Console.WriteLine(list.ToString2());\n      Console.WriteLine(list.ToString(&quot;N0&quot;));\n   }\n}\n// The example displays the following output:\n//       { 1000, 2000 }\n//       { 1,000, 2,000 }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Object.ToString#8\">Imports System.Collections.Generic\nImports System.Runtime.CompilerServices\n\nPublic Module StringExtensions\n   &lt;Extension()&gt;\n   Public Function ToString2(Of T)(l As List(Of T)) As String\n      Dim retVal As String = &quot;&quot;\n      For Each item As T In l\n         retVal += String.Format(&quot;{0}{1}&quot;, If(String.IsNullOrEmpty(retVal),\n                                                     &quot;&quot;, &quot;, &quot;),\n                                  item)\n      Next\n      Return If(String.IsNullOrEmpty(retVal), &quot;{}&quot;, &quot;{ &quot; + retVal + &quot; }&quot;)\n   End Function\n\n   &lt;Extension()&gt;\n   Public Function ToString(Of T)(l As List(Of T), fmt As String) As String\n      Dim retVal As String = String.Empty\n      For Each item In l\n         Dim ifmt As IFormattable = TryCast(item, IFormattable)\n         If ifmt IsNot Nothing Then\n            retVal += String.Format(&quot;{0}{1}&quot;,\n                                    If(String.IsNullOrEmpty(retval),\n                                       &quot;&quot;, &quot;, &quot;), ifmt.ToString(fmt, Nothing))\n         Else\n            retVal += ToString2(l)\n         End If\n      Next\n      Return If(String.IsNullOrEmpty(retVal), &quot;{}&quot;, &quot;{ &quot; + retVal + &quot; }&quot;)\n   End Function\nEnd Module\n\nModule Example\n   Public Sub Main()\n      Dim list As New List(Of Integer)\n      list.Add(1000)\n      list.Add(2000)\n      Console.WriteLine(list.ToString2())\n      Console.WriteLine(list.ToString(&quot;N0&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       { 1000, 2000 }\n&#39;       { 1,000, 2,000 }\n</code></pre></li>\n</ul>\n<p><a name=\"WinRT\"></a>   </p>\n<h2 id=\"notes-for-the-includewrtaddincludeswrt-mdmd\">Notes for the Windows Runtime</h2>\n<p> When you call the ToString method on a class in the Windows Runtime, it provides the default behavior for classes that donâ€™t override ToString. This is part of the support that the .NET Framework provides for the Windows Runtime (see <a href=\"../Topic/.NET%20Framework%20Support%20for%20Windows%20Store%20Apps%20and%20Windows%20Runtime.md\" data-linktype=\"relative-path\">.NET Framework Support for Windows Store Apps and Windows Runtime</a>). Classes in the Windows Runtime donâ€™t inherit <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, and donâ€™t always implement a ToString. However, they always appear to have ToString, <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>, and <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides a default behavior for these methods.  </p>\n<p> Starting with the .NET Framework 4.5.1, the common language runtime will use <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx\" data-linktype=\"external\">IStringable.ToString</a> on a Windows Runtime object before falling back to the default implementation of ToString.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Windows Runtime classes that are written in C# or Visual Basic can override the ToString method.  </p>\n</div>\n<h3 id=\"the-includewrtaddincludeswrt-mdmd-and-the-istringable-interface\">The Windows Runtime and the IStringable Interface</h3>\n<p> Starting with Windows 8.1, the Windows Runtime includes an <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> interface whose single method, <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx\" data-linktype=\"external\">IStringable.ToString</a>, provides basic formatting support comparable to that provided by ToString. To prevent ambiguity, you should not implement <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> on managed types.  </p>\n<p> When managed objects are called by native code or by code written in languages such as JavaScript or C++/CX, they appear to implement <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a>. The common language runtime will automatically route calls from <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx\" data-linktype=\"external\">IStringable.ToString</a> to ToString in the event <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> is not implemented on the managed object.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> Because the common language runtime auto-implements <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> for all managed types in Windows Store apps, we recommend that you do not provide your own <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> implementation. Implementing <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> may result in unintended behavior when calling <code>ToString</code> from the Windows Runtime, C++/CX, or JavaScript.  </p>\n</div>\n<p> If you do choose to implement <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> in a public managed type that is exported in a Windows Runtime component, the following restrictions apply:  </p>\n<ul>\n<li>You can define the <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> interface only in a &quot;class implements&quot; relationship, such as  </li>\n</ul>\n<p><codecontentplaceholder>0</codecontentplaceholder><br>     in C#, or  </p>\n<p><codecontentplaceholder>1</codecontentplaceholder><br>     in Visual Basic.  </p>\n<ul>\n<li><p>You cannot implement <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> on an interface.  </p>\n</li>\n<li><p>You cannot declare a parameter to be of type <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a>.  </p>\n</li>\n<li><p><a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> cannot be the return type of a method, property, or field.  </p>\n</li>\n<li><p>You cannot hide your <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> implementation from base classes by using a method definition such as the following:  </p>\n</li>\n</ul>\n<p><codecontentplaceholder>2</codecontentplaceholder><br>     Instead, the <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx\" data-linktype=\"external\">IStringable.ToString</a> implementation must always override the base class implementation. You can hide a <code>ToString</code> implementation only by invoking it on a strongly typed class instance.  </p>\n<p> Note that under a variety of conditions, calls from native code to a managed type that implements <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx\" data-linktype=\"external\">IStringable</a> or hides its <a href=\"http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx\" data-linktype=\"external\">ToString</a> implementation can produce unexpected behavior.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Object.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Object.yml\">\r\n<meta name=\"APIName\" content=\"System.Object\">\r\n<meta name=\"APIName\" content=\"System.Object..ctor\">\r\n<meta name=\"APIName\" content=\"System.Object.Equals\">\r\n<meta name=\"APIName\" content=\"System.Object.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Object.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Object.GetType\">\r\n<meta name=\"APIName\" content=\"System.Object.MemberwiseClone\">\r\n<meta name=\"APIName\" content=\"System.Object.ReferenceEquals\">\r\n<meta name=\"APIName\" content=\"System.Object.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"1c331eb9-8975-2388-78bf-422efd5a6330\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root ofâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Object\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Object.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Object.yml","open_to_public_contributors":true,"api_name":["System.Object","System.Object..ctor","System.Object.Equals","System.Object.Finalize","System.Object.GetHashCode","System.Object.GetType","System.Object.MemberwiseClone","System.Object.ReferenceEquals","System.Object.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Object","System::Object","System.Object.#ctor","System::Object::#ctor","System.Object.Equals","System::Object::Equals","System.Object.Finalize","System::Object::Finalize","System.Object.GetHashCode","System::Object::GetHashCode","System.Object.GetType","System::Object::GetType","System.Object.MemberwiseClone","System::Object::MemberwiseClone","System.Object.ReferenceEquals","System::Object::ReferenceEquals","System.Object.ToString","System::Object::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"1c331eb9-8975-2388-78bf-422efd5a6330","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Object.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Object class | Microsoft Docs","_op_ogTitle":"Object class","description":"Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root ofâ€¦","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Object","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.object","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.object","fileRelativePath":"System.Object.html"},"themesRelativePathToOutputRoot":"_themes/"}