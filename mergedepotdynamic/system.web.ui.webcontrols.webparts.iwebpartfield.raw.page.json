{"content":"    \r\n    <h1 id=\"System_Web_UI_WebControls_WebParts_IWebPartField\">\r\n      <span class=\"lang-csharp\">IWebPartField</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines a provider interface for connecting two server controls using a single field of data.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IWebPartField</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This interface is designed to be used with Web Parts connections. In a Web Parts connection, two server controls that reside in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zone establish a connection and share data, with one control acting as the consumer and the other control acting as a provider. The mechanism for sharing data in a Web Parts connection is an interface instance, which the provider serves to the consumer by means of a callback method. To establish a connection, the consumer and provider must both work with the same interface type for sharing data. If the consumer does not recognize the interface type sent by the provider, it is still possible to connect the controls by means of a transformer (a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object) that translates the interface instance sent by the provider into a type that the consumer recognizes. For details on connections, see <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> and <a href=\"../Topic/Web%20Parts%20Connections%20Overview.md\" data-linktype=\"relative-path\">Web Parts Connections Overview</a>.  </p>\n<p> The IWebPartField interface is a provider interface included with the Web Parts control set as a standard interface for creating connections based on a data field. You can also create custom interfaces to use with Web Parts connections, but in many data-driven Web applications, it is useful to create connections based on a common row (for details, see the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartrow\" data-linktype=\"relative-path\">IWebPartRow</a> interface), table (for details, see the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebparttable\" data-linktype=\"relative-path\">IWebPartTable</a> interface), or field from the data source, using the IWebPartField interface. In a typical connection, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a provider would implement the IWebPartField interface and provide an instance of the interface to consumers in a special callback method. For example, the provider might implement an IWebPartField interface for a field in your user information table that contains a Web user&#39;s postal code data. Another <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a consumer would define a special method to receive the interface instance, and could then extract the postal code data, and look up and display weather information based on the postal code.  </p>\n<p> The IWebPartField interface has two exposed members. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield#System_Web_UI_WebControls_WebParts_IWebPartField_Schema_\" data-linktype=\"relative-path\">Schema</a> property returns schema information about the data field encapsulated in a <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> object. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield#System_Web_UI_WebControls_WebParts_IWebPartField_GetFieldValue_\" data-linktype=\"relative-path\">GetFieldValue</a> method declares a method that an implementer (such as a provider control) uses to retrieve the interface instance&#39;s field data when the callback method is invoked.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_IWebPartField_Schema\" data-linktype=\"self-bookmark\">Schema</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the schema information for a data field that is used to share data between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_IWebPartField_GetFieldValue_System_Web_UI_WebControls_WebParts_FieldCallback_\" data-linktype=\"self-bookmark\">GetFieldValue(FieldCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the value of the field that is being used by the interface as the basis of a connection between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_IWebPartField_Schema\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_IWebPartField_Schema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Schema</div>        \r\n          </div>\r\n    \r\n            <p>Gets the schema information for a data field that is used to share data between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.ComponentModel.PropertyDescriptor Schema { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> that describes the schema information for the data field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides property information for the data passed by the interface. Transformer and consumer controls can query this property to get information about the type, contents, and other details of the field contained in the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield\" data-linktype=\"relative-path\">IWebPartField</a> interface instance sent by a provider.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the implementation and use of the Schema property. The complete example is shown in the class overview for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield\" data-linktype=\"relative-path\">IWebPartField</a> interface. The provider control implements the Schema property. Then, in its <code>GetFieldValue</code> method, it uses the property to retrieve the field value.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_IWebPartField_Overview#2\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nnamespace Samples.AspNet.CS.Controls\n{\n  // This sample code creates a Web Parts control that acts as a provider \n  // of field data.\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public sealed class FieldProviderWebPart : WebPart, IWebPartField\n  {\n    private DataTable _table;\n\n    public FieldProviderWebPart() \n    {\n        _table = new DataTable();\n\n        DataColumn col = new DataColumn();\n        col.DataType = typeof(string);\n        col.ColumnName = &quot;Name&quot;;\n        _table.Columns.Add(col);\n\n        col = new DataColumn();\n        col.DataType = typeof(string);\n        col.ColumnName = &quot;Address&quot;;\n        _table.Columns.Add(col);\n\n        col = new DataColumn();\n        col.DataType = typeof(int);\n        col.ColumnName = &quot;ZIP Code&quot;;\n        _table.Columns.Add(col);\n\n        DataRow row = _table.NewRow();\n        row[&quot;Name&quot;] = &quot;John Q. Public&quot;;\n        row[&quot;Address&quot;] = &quot;123 Main Street&quot;;\n        row[&quot;ZIP Code&quot;] = 98000;\n        _table.Rows.Add(row);\n    }\n\n \t  [ConnectionProvider(&quot;FieldProvider&quot;)]\n\t  public IWebPartField GetConnectionInterface()\n    {\n        return new FieldProviderWebPart();\n    }\n\n    public PropertyDescriptor Schema \n    {\n        get \n        {\n            /* The two parameters are row and field. Zero is the first record. \n                0,2 returns the zip code field value.   */ \n            return TypeDescriptor.GetProperties(_table.DefaultView[0])[2];\n        }\n    }\n\n\t  void IWebPartField.GetFieldValue(FieldCallback callback) \n    {\n        callback(Schema.GetValue(_table.DefaultView[0]));\n    }\n\n  } // end FieldProviderWebPart\n\n  // This sample code creates a Web Parts control that acts as a consumer \n  // of an IWebPartField interface.\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class FieldConsumerWebPart : WebPart\n  {\n\n    private IWebPartField _provider;\n    private object _fieldValue;\n\n    private void GetFieldValue(object fieldValue)\n    {\n      _fieldValue = fieldValue;\n    }\n\n    public bool ConnectionPointEnabled\n    {\n      get\n      {\n        object o = ViewState[&quot;ConnectionPointEnabled&quot;];\n        return (o != null) ? (bool)o : true;\n      }\n      set\n      {\n        ViewState[&quot;ConnectionPointEnabled&quot;] = value;\n      }\n    }\n\n    protected override void OnPreRender(EventArgs e)\n    {\n      if (_provider != null)\n      {\n        _provider.GetFieldValue(new FieldCallback(GetFieldValue));\n      }\n      base.OnPreRender(e);\n    }\n\n    protected override void RenderContents(HtmlTextWriter writer)\n    {\n\n      if (_provider != null)\n      {\n        PropertyDescriptor prop = _provider.Schema;\n\n        if (prop != null &amp;&amp; _fieldValue != null)\n        {\n          writer.Write(prop.DisplayName + &quot;: &quot; + _fieldValue);\n        }\n        else\n        {\n          writer.Write(&quot;No data&quot;);\n        }\n      }\n      else\n      {\n        writer.Write(&quot;Not connected&quot;);\n      }\n    }\n\n    [ConnectionConsumer(&quot;FieldConsumer&quot;, &quot;Connpoint1&quot;, \n      typeof(FieldConsumerConnectionPoint), AllowsMultipleConnections = true)]\n    public void SetConnectionInterface(IWebPartField provider)\n    {\n      _provider = provider;\n    }\n\n    public class FieldConsumerConnectionPoint : ConsumerConnectionPoint\n    {\n      public FieldConsumerConnectionPoint(MethodInfo callbackMethod, \n        Type interfaceType, Type controlType, string name, string id, \n        bool allowsMultipleConnections)\n        : base(\n        callbackMethod, interfaceType, controlType,\n        name, id, allowsMultipleConnections)\n      {\n      }\n\n      public override bool GetEnabled(Control control)\n      {\n        return ((FieldConsumerWebPart)control).ConnectionPointEnabled;\n      }\n    } // end FieldConsumerConnectionPoint\n\n  } // end FieldConsumerWebPart\n\n} // end namespace Samples.AspNet.CS.Controls\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_IWebPartField_Overview#2\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Data\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &#39; This sample code creates a Web Parts control that acts as a \n  &#39; provider of field data.\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public NotInheritable Class FieldProviderWebPart\n    Inherits WebPart\n    Implements IWebPartField\n    Private _table As DataTable\n\n\n    Public Sub New()\n      _table = New DataTable()\n\n      Dim col As New DataColumn()\n      col.DataType = GetType(String)\n      col.ColumnName = &quot;Name&quot;\n      _table.Columns.Add(col)\n\n      col = New DataColumn()\n      col.DataType = GetType(String)\n      col.ColumnName = &quot;Address&quot;\n      _table.Columns.Add(col)\n\n      col = New DataColumn()\n      col.DataType = GetType(Integer)\n      col.ColumnName = &quot;ZIP Code&quot;\n      _table.Columns.Add(col)\n\n      Dim row As DataRow = _table.NewRow()\n      row(&quot;Name&quot;) = &quot;John Q. Public&quot;\n      row(&quot;Address&quot;) = &quot;123 Main Street&quot;\n      row(&quot;ZIP Code&quot;) = 98000\n      _table.Rows.Add(row)\n\n    End Sub\n\n\n    &lt;ConnectionProvider(&quot;FieldProvider&quot;)&gt; _\n    Public Function GetConnectionInterface() As IWebPartField\n      Return New FieldProviderWebPart()\n\n    End Function\n\n\n    Public ReadOnly Property Schema() As ComponentModel.PropertyDescriptor _\n      Implements IWebPartField.Schema\n      Get\n        &#39; The two parameters are row and field. Zero is the first record. \n        &#39; 0,2 returns the zip code field value.   \n        Return TypeDescriptor.GetProperties(_table.DefaultView(0))(2)\n      End Get\n    End Property\n\n\n    Sub GetFieldValue(ByVal callback As FieldCallback) _\n      Implements IWebPartField.GetFieldValue\n\n      callback(Schema.GetValue(_table.DefaultView(0)))\n\n    End Sub\n\n  End Class &#39;FieldProviderWebPart \n\n\n  &#39; This sample code creates a Web Parts control that acts as a \n  &#39; consumer of an IWebPartField interface.\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class FieldConsumerWebPart\n    Inherits WebPart\n\n    Private _provider As IWebPartField\n    Private _fieldValue As Object\n\n\n    Private Sub GetFieldValue(ByVal fieldValue As Object)\n      _fieldValue = fieldValue\n\n    End Sub\n\n\n    Public Property ConnectionPointEnabled() As Boolean\n      Get\n        Dim o As Object = ViewState(&quot;ConnectionPointEnabled&quot;)\n        Return IIf(Not (o Is Nothing), CBool(o), True)\n      End Get\n      Set(ByVal value As Boolean)\n        ViewState(&quot;ConnectionPointEnabled&quot;) = value\n      End Set\n    End Property\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      If Not (_provider Is Nothing) Then\n        _provider.GetFieldValue(New FieldCallback(AddressOf GetFieldValue))\n      End If\n      MyBase.OnPreRender(e)\n\n    End Sub\n\n\n    Protected Overrides Sub RenderContents(ByVal writer As _\n      HtmlTextWriter)\n\n      If Not (_provider Is Nothing) Then\n        Dim prop As PropertyDescriptor = _provider.Schema\n\n        If Not (prop Is Nothing) AndAlso Not (_fieldValue Is Nothing) Then\n          writer.Write(prop.DisplayName &amp; &quot;: &quot; &amp; _fieldValue)\n        Else\n          writer.Write(&quot;No data&quot;)\n        End If\n      Else\n        writer.Write(&quot;Not connected&quot;)\n      End If\n\n    End Sub\n\n    &lt;ConnectionConsumer(&quot;FieldConsumer&quot;, &quot;Connpoint1&quot;, _\n      GetType(FieldConsumerConnectionPoint), AllowsMultipleConnections:=True)&gt; _\n    Public Sub SetConnectionInterface(ByVal provider As IWebPartField)\n      _provider = provider\n\n    End Sub\n\n  End Class &#39;FieldConsumerWebPart\n\n  Public Class FieldConsumerConnectionPoint\n    Inherits ConsumerConnectionPoint\n\n    Public Sub New(ByVal callbackMethod As MethodInfo, _\n      ByVal interfaceType As Type, ByVal controlType As Type, _\n      ByVal name As String, ByVal id As String, _\n      ByVal allowsMultipleConnections As Boolean)\n      MyBase.New(callbackMethod, interfaceType, controlType, _\n        name, id, allowsMultipleConnections)\n\n    End Sub\n\n\n    Public Overrides Function GetEnabled(ByVal control As Control) _\n      As Boolean\n\n      Return CType(control, FieldConsumerWebPart).ConnectionPointEnabled\n\n    End Function\n\n  End Class &#39;FieldConsumerConnectionPoint\n\nEnd Namespace  &#39; Samples.AspNet.VB.Controls\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_IWebPartField_GetFieldValue_System_Web_UI_WebControls_WebParts_FieldCallback_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_IWebPartField_GetFieldValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFieldValue(FieldCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the value of the field that is being used by the interface as the basis of a connection between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void GetFieldValue (System.Web.UI.WebControls.WebParts.FieldCallback callback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.fieldcallback\" data-linktype=\"relative-path\">FieldCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.fieldcallback\" data-linktype=\"relative-path\">FieldCallback</a> delegate that contains the address of a method that receives the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to retrieve the data field values passed by the interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the implementation and use of the GetFieldValue method. The complete example is shown in the class overview for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield\" data-linktype=\"relative-path\">IWebPartField</a> interface. The provider control implements the GetFieldValue method, returning the value of a particular field in the data table. The consumer control calls the GetFieldValue method in its <code>OnPreRender</code> method, so that the value of the data can be written to the page.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_IWebPartField_Overview#2\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Reflection;\nusing System.Security.Permissions;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nnamespace Samples.AspNet.CS.Controls\n{\n  // This sample code creates a Web Parts control that acts as a provider \n  // of field data.\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public sealed class FieldProviderWebPart : WebPart, IWebPartField\n  {\n    private DataTable _table;\n\n    public FieldProviderWebPart() \n    {\n        _table = new DataTable();\n\n        DataColumn col = new DataColumn();\n        col.DataType = typeof(string);\n        col.ColumnName = &quot;Name&quot;;\n        _table.Columns.Add(col);\n\n        col = new DataColumn();\n        col.DataType = typeof(string);\n        col.ColumnName = &quot;Address&quot;;\n        _table.Columns.Add(col);\n\n        col = new DataColumn();\n        col.DataType = typeof(int);\n        col.ColumnName = &quot;ZIP Code&quot;;\n        _table.Columns.Add(col);\n\n        DataRow row = _table.NewRow();\n        row[&quot;Name&quot;] = &quot;John Q. Public&quot;;\n        row[&quot;Address&quot;] = &quot;123 Main Street&quot;;\n        row[&quot;ZIP Code&quot;] = 98000;\n        _table.Rows.Add(row);\n    }\n\n \t  [ConnectionProvider(&quot;FieldProvider&quot;)]\n\t  public IWebPartField GetConnectionInterface()\n    {\n        return new FieldProviderWebPart();\n    }\n\n    public PropertyDescriptor Schema \n    {\n        get \n        {\n            /* The two parameters are row and field. Zero is the first record. \n                0,2 returns the zip code field value.   */ \n            return TypeDescriptor.GetProperties(_table.DefaultView[0])[2];\n        }\n    }\n\n\t  void IWebPartField.GetFieldValue(FieldCallback callback) \n    {\n        callback(Schema.GetValue(_table.DefaultView[0]));\n    }\n\n  } // end FieldProviderWebPart\n\n  // This sample code creates a Web Parts control that acts as a consumer \n  // of an IWebPartField interface.\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class FieldConsumerWebPart : WebPart\n  {\n\n    private IWebPartField _provider;\n    private object _fieldValue;\n\n    private void GetFieldValue(object fieldValue)\n    {\n      _fieldValue = fieldValue;\n    }\n\n    public bool ConnectionPointEnabled\n    {\n      get\n      {\n        object o = ViewState[&quot;ConnectionPointEnabled&quot;];\n        return (o != null) ? (bool)o : true;\n      }\n      set\n      {\n        ViewState[&quot;ConnectionPointEnabled&quot;] = value;\n      }\n    }\n\n    protected override void OnPreRender(EventArgs e)\n    {\n      if (_provider != null)\n      {\n        _provider.GetFieldValue(new FieldCallback(GetFieldValue));\n      }\n      base.OnPreRender(e);\n    }\n\n    protected override void RenderContents(HtmlTextWriter writer)\n    {\n\n      if (_provider != null)\n      {\n        PropertyDescriptor prop = _provider.Schema;\n\n        if (prop != null &amp;&amp; _fieldValue != null)\n        {\n          writer.Write(prop.DisplayName + &quot;: &quot; + _fieldValue);\n        }\n        else\n        {\n          writer.Write(&quot;No data&quot;);\n        }\n      }\n      else\n      {\n        writer.Write(&quot;Not connected&quot;);\n      }\n    }\n\n    [ConnectionConsumer(&quot;FieldConsumer&quot;, &quot;Connpoint1&quot;, \n      typeof(FieldConsumerConnectionPoint), AllowsMultipleConnections = true)]\n    public void SetConnectionInterface(IWebPartField provider)\n    {\n      _provider = provider;\n    }\n\n    public class FieldConsumerConnectionPoint : ConsumerConnectionPoint\n    {\n      public FieldConsumerConnectionPoint(MethodInfo callbackMethod, \n        Type interfaceType, Type controlType, string name, string id, \n        bool allowsMultipleConnections)\n        : base(\n        callbackMethod, interfaceType, controlType,\n        name, id, allowsMultipleConnections)\n      {\n      }\n\n      public override bool GetEnabled(Control control)\n      {\n        return ((FieldConsumerWebPart)control).ConnectionPointEnabled;\n      }\n    } // end FieldConsumerConnectionPoint\n\n  } // end FieldConsumerWebPart\n\n} // end namespace Samples.AspNet.CS.Controls\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_IWebPartField_Overview#2\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Data\nImports System.Reflection\nImports System.Security.Permissions\nImports System.Web\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &#39; This sample code creates a Web Parts control that acts as a \n  &#39; provider of field data.\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public NotInheritable Class FieldProviderWebPart\n    Inherits WebPart\n    Implements IWebPartField\n    Private _table As DataTable\n\n\n    Public Sub New()\n      _table = New DataTable()\n\n      Dim col As New DataColumn()\n      col.DataType = GetType(String)\n      col.ColumnName = &quot;Name&quot;\n      _table.Columns.Add(col)\n\n      col = New DataColumn()\n      col.DataType = GetType(String)\n      col.ColumnName = &quot;Address&quot;\n      _table.Columns.Add(col)\n\n      col = New DataColumn()\n      col.DataType = GetType(Integer)\n      col.ColumnName = &quot;ZIP Code&quot;\n      _table.Columns.Add(col)\n\n      Dim row As DataRow = _table.NewRow()\n      row(&quot;Name&quot;) = &quot;John Q. Public&quot;\n      row(&quot;Address&quot;) = &quot;123 Main Street&quot;\n      row(&quot;ZIP Code&quot;) = 98000\n      _table.Rows.Add(row)\n\n    End Sub\n\n\n    &lt;ConnectionProvider(&quot;FieldProvider&quot;)&gt; _\n    Public Function GetConnectionInterface() As IWebPartField\n      Return New FieldProviderWebPart()\n\n    End Function\n\n\n    Public ReadOnly Property Schema() As ComponentModel.PropertyDescriptor _\n      Implements IWebPartField.Schema\n      Get\n        &#39; The two parameters are row and field. Zero is the first record. \n        &#39; 0,2 returns the zip code field value.   \n        Return TypeDescriptor.GetProperties(_table.DefaultView(0))(2)\n      End Get\n    End Property\n\n\n    Sub GetFieldValue(ByVal callback As FieldCallback) _\n      Implements IWebPartField.GetFieldValue\n\n      callback(Schema.GetValue(_table.DefaultView(0)))\n\n    End Sub\n\n  End Class &#39;FieldProviderWebPart \n\n\n  &#39; This sample code creates a Web Parts control that acts as a \n  &#39; consumer of an IWebPartField interface.\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class FieldConsumerWebPart\n    Inherits WebPart\n\n    Private _provider As IWebPartField\n    Private _fieldValue As Object\n\n\n    Private Sub GetFieldValue(ByVal fieldValue As Object)\n      _fieldValue = fieldValue\n\n    End Sub\n\n\n    Public Property ConnectionPointEnabled() As Boolean\n      Get\n        Dim o As Object = ViewState(&quot;ConnectionPointEnabled&quot;)\n        Return IIf(Not (o Is Nothing), CBool(o), True)\n      End Get\n      Set(ByVal value As Boolean)\n        ViewState(&quot;ConnectionPointEnabled&quot;) = value\n      End Set\n    End Property\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      If Not (_provider Is Nothing) Then\n        _provider.GetFieldValue(New FieldCallback(AddressOf GetFieldValue))\n      End If\n      MyBase.OnPreRender(e)\n\n    End Sub\n\n\n    Protected Overrides Sub RenderContents(ByVal writer As _\n      HtmlTextWriter)\n\n      If Not (_provider Is Nothing) Then\n        Dim prop As PropertyDescriptor = _provider.Schema\n\n        If Not (prop Is Nothing) AndAlso Not (_fieldValue Is Nothing) Then\n          writer.Write(prop.DisplayName &amp; &quot;: &quot; &amp; _fieldValue)\n        Else\n          writer.Write(&quot;No data&quot;)\n        End If\n      Else\n        writer.Write(&quot;Not connected&quot;)\n      End If\n\n    End Sub\n\n    &lt;ConnectionConsumer(&quot;FieldConsumer&quot;, &quot;Connpoint1&quot;, _\n      GetType(FieldConsumerConnectionPoint), AllowsMultipleConnections:=True)&gt; _\n    Public Sub SetConnectionInterface(ByVal provider As IWebPartField)\n      _provider = provider\n\n    End Sub\n\n  End Class &#39;FieldConsumerWebPart\n\n  Public Class FieldConsumerConnectionPoint\n    Inherits ConsumerConnectionPoint\n\n    Public Sub New(ByVal callbackMethod As MethodInfo, _\n      ByVal interfaceType As Type, ByVal controlType As Type, _\n      ByVal name As String, ByVal id As String, _\n      ByVal allowsMultipleConnections As Boolean)\n      MyBase.New(callbackMethod, interfaceType, controlType, _\n        name, id, allowsMultipleConnections)\n\n    End Sub\n\n\n    Public Overrides Function GetEnabled(ByVal control As Control) _\n      As Boolean\n\n      Return CType(control, FieldConsumerWebPart).ConnectionPointEnabled\n\n    End Function\n\n  End Class &#39;FieldConsumerConnectionPoint\n\nEnd Namespace  &#39; Samples.AspNet.VB.Controls\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.WebParts.IWebPartField.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.WebParts.IWebPartField.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebPartField\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebPartField.Schema\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"f0e77d94-cfb9-f499-3247-69099e0fcea1\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Web.UI.WebControls.WebParts\\IWebPartField.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a provider interface for connecting two server controls using a single field of data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI.WebControls.WebParts/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.WebParts.IWebPartField\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.WebParts.IWebPartField.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.WebParts.IWebPartField.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.WebControls.WebParts.IWebPartField","System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue","System.Web.UI.WebControls.WebParts.IWebPartField.Schema"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.WebParts.IWebPartField","System::Web::UI::WebControls::WebParts::IWebPartField","System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue","System::Web::UI::WebControls::WebParts::IWebPartField::GetFieldValue","System.Web.UI.WebControls.WebParts.IWebPartField.Schema","System::Web::UI::WebControls::WebParts::IWebPartField::Schema"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"f0e77d94-cfb9-f499-3247-69099e0fcea1","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Web.UI.WebControls.WebParts\\IWebPartField.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI.WebControls.WebParts/IWebPartField.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IWebPartField interface | Microsoft Docs","_op_ogTitle":"IWebPartField interface","description":"Defines a provider interface for connecting two server controls using a single field of data.\n","toc_asset_id":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.WebParts.IWebPartField","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.webparts.iwebpartfield","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.webparts.iwebpartfield","fileRelativePath":"System.Web.UI.WebControls.WebParts.IWebPartField.html"},"themesRelativePathToOutputRoot":"_themes/"}