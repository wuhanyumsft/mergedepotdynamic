{"content":"    \r\n    <h1 id=\"System_ConsoleKeyInfo\">\r\n      <span class=\"lang-csharp\">ConsoleKeyInfo</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Describes the console key that was pressed, including the character represented by the console key and the state of the SHIFT, ALT, and CTRL modifier keys.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public struct ConsoleKeyInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ConsoleKeyInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The ConsoleKeyInfo type is not intended to be created by users. Instead, it is returned to the user in response to calling the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method.  </p>\n<p> The ConsoleKeyInfo object describes the <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> constant and Unicode character, if any, that correspond to the pressed console key. The ConsoleKeyInfo object also describes, in a bitwise combination of <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> values, whether one or more SHIFT, ALT, or CTRL modifier keys was pressed simultaneously with the console key.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo__ctor_System_Char_System_ConsoleKey_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">ConsoleKeyInfo(Char,ConsoleKey,Boolean,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> structure using the specified character, console key, and modifier keys.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo_Key\" data-linktype=\"self-bookmark\">Key</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the console key represented by the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo_KeyChar\" data-linktype=\"self-bookmark\">KeyChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Unicode character represented by the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo_Modifiers\" data-linktype=\"self-bookmark\">Modifiers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a bitwise combination of <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> values that specifies one or more modifier keys pressed simultaneously with the console key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo_Equals_System_ConsoleKeyInfo_\" data-linktype=\"self-bookmark\">Equals(ConsoleKeyInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the specified <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object is equal to the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the specified object is equal to the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo_op_Equality_System_ConsoleKeyInfo_System_ConsoleKeyInfo_\" data-linktype=\"self-bookmark\">op_Equality(ConsoleKeyInfo,ConsoleKeyInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ConsoleKeyInfo_op_Inequality_System_ConsoleKeyInfo_System_ConsoleKeyInfo_\" data-linktype=\"self-bookmark\">op_Inequality(ConsoleKeyInfo,ConsoleKeyInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo__ctor_System_Char_System_ConsoleKey_System_Boolean_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConsoleKeyInfo(Char,ConsoleKey,Boolean,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> structure using the specified character, console key, and modifier keys.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ConsoleKeyInfo (char keyChar, ConsoleKey key, bool shift, bool alt, bool control);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character that corresponds to the <code>key</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The console key that corresponds to the <code>keyChar</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>shift</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate that a SHIFT key was pressed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>alt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate that an ALT key was pressed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate that a CTRL key was pressed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The numeric value of the <code>key</code> parameter is less than 0 or greater than 255.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This type is not intended to be created by users. Instead, it is returned to the user in response to calling the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> type does not specify whether the left or right SHIFT, ALT, or CTRL modifier key was pressed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo_Key\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo_Key_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Key</div>        \r\n          </div>\r\n    \r\n            <p>Gets the console key represented by the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ConsoleKey Key { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a></div>\r\n                  </div>\r\n                  <p>A value that identifies the console key that was pressed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates using a Key property in a read operation.  </p>\n<pre><code class=\"lang-cs\" name=\"console.readkey1#1\">using System;\n\nclass Example \n{\n   public static void Main() \n   {\n      ConsoleKeyInfo cki;\n      // Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = true;\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n      do \n      {\n         cki = Console.ReadKey();\n         Console.Write(&quot; --- You pressed &quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Alt) != 0) Console.Write(&quot;ALT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Shift) != 0) Console.Write(&quot;SHIFT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Control) != 0) Console.Write(&quot;CTL+&quot;);\n         Console.WriteLine(cki.Key.ToString());\n       } while (cki.Key != ConsoleKey.Escape);\n    }\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U \n</code></pre><pre><code class=\"lang-cpp\" name=\"console.readkey1#1\">using namespace System;\n\nvoid main()\n{\n   ConsoleKeyInfo cki;\n   // Prevent example from ending if CTL+C is pressed.\n   Console::TreatControlCAsInput = true;\n\n   Console::WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n   Console::WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n   do \n   {\n      cki = Console::ReadKey();\n      Console::Write(&quot; --- You pressed &quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Alt) != ConsoleModifiers()) Console::Write(&quot;ALT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Shift) != ConsoleModifiers()) Console::Write(&quot;SHIFT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Control) != ConsoleModifiers()) Console::Write(&quot;CTL+&quot;);\n      Console::WriteLine(cki.Key.ToString());\n   } while (cki.Key != ConsoleKey::Escape);\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U }\n</code></pre><pre><code class=\"lang-vb\" name=\"console.readkey1#1\">Class Example\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      &#39; Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = True\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;)\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: &quot; + vbCrLf)\n      Do\n         cki = Console.ReadKey()\n         Console.Write(&quot; --- You pressed &quot;)\n         If (cki.Modifiers And ConsoleModifiers.Alt) &lt;&gt; 0 Then Console.Write(&quot;ALT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Shift) &lt;&gt; 0 Then Console.Write(&quot;SHIFT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Control) &lt;&gt; 0 Then Console.Write(&quot;CTL+&quot;)\n         Console.WriteLine(cki.Key.ToString)\n      Loop While cki.Key &lt;&gt; ConsoleKey.Escape\n   End Sub \nEnd Class \n&#39; This example displays output similar to the following:\n&#39;       Press any combination of CTL, ALT, and SHIFT, and a console key.\n&#39;       Press the Escape (Esc) key to quit:\n&#39;       \n&#39;       a --- You pressed A \n&#39;       k --- You pressed ALT+K \n&#39;       â–º --- You pressed CTL+P \n&#39;         --- You pressed RightArrow \n&#39;       R --- You pressed SHIFT+R \n&#39;                --- You pressed CTL+I \n&#39;       j --- You pressed ALT+J \n&#39;       O --- You pressed SHIFT+O \n&#39;       &#167; --- You pressed CTL+U \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo_KeyChar\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo_KeyChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyChar</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Unicode character represented by the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public char KeyChar { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>An object that corresponds to the console key represented by the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the key pressed does not map to a Unicode character (for example, if the user presses the <strong>F1</strong> key or the <strong>Home</strong> key), the value of the KeyChar property is \\U0000.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the KeyChar property to add the characters input by the user into a string. The example ignores special keys other than <strong>ENTER</strong>, <strong>ESC</strong>, and <strong>BACKSPACE</strong>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ConsoleKeyInfo.KeyChar#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Configure console.\n      Console.BufferWidth = 80;\n      Console.WindowWidth = Console.BufferWidth;\n      Console.TreatControlCAsInput = true;\n      \n      string inputString = String.Empty;\n      ConsoleKeyInfo keyInfo;\n\n      Console.WriteLine(&quot;Enter a string. Press &lt;Enter&gt; or Esc to exit.&quot;);\n      do {\n         keyInfo = Console.ReadKey(true);\n         // Ignore if Alt or Ctrl is pressed.\n         if ((keyInfo.Modifiers &amp; ConsoleModifiers.Alt) == ConsoleModifiers.Alt) \n            continue;\n         if ((keyInfo.Modifiers &amp; ConsoleModifiers.Control) == ConsoleModifiers.Control)\n            continue; \n         // Ignore if KeyChar value is \\u0000.\n         if (keyInfo.KeyChar == &#39;\\u0000&#39;) continue;\n         // Ignore tab key.\n         if (keyInfo.Key == ConsoleKey.Tab) continue;\n         // Handle backspace.\n         if (keyInfo.Key == ConsoleKey.Backspace) {\n            // Are there any characters to erase?\n            if (inputString.Length &gt;= 1) { \n               // Determine where we are in the console buffer.\n               int cursorCol = Console.CursorLeft - 1;\n               int oldLength = inputString.Length;\n               int extraRows = oldLength / 80;\n\n               inputString = inputString.Substring(0, oldLength - 1);\n               Console.CursorLeft = 0;\n               Console.CursorTop = Console.CursorTop - extraRows;\n               Console.Write(inputString + new String(&#39; &#39;, oldLength - inputString.Length));\n               Console.CursorLeft = cursorCol;\n            }\n            continue;\n         }\n         // Handle Escape key.\n         if (keyInfo.Key == ConsoleKey.Escape) break;\n         // Handle key by adding it to input string.\n         Console.Write(keyInfo.KeyChar);\n         inputString += keyInfo.KeyChar;\n      } while (keyInfo.Key != ConsoleKey.Enter);\n      Console.WriteLine(&quot;<br><br>You entered:<br>    {0}&quot;, \n                        String.IsNullOrEmpty(inputString) ? &quot;&lt;nothing&gt;&quot; : inputString);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ConsoleKeyInfo.KeyChar#1\">Module Example\n   Public Sub Main()\n      &#39; Configure console.\n      Console.BufferWidth = 80\n      Console.WindowWidth = Console.BufferWidth\n      Console.TreatControlCAsInput = True\n      \n      Dim inputString As String = String.Empty\n      Dim keyInfo As ConsoleKeyInfo\n\n      Console.WriteLine(&quot;Enter a string. Press &lt;Enter&gt; or Esc to exit.&quot;)\n      Do\n         keyInfo = Console.ReadKey(True)\n         &#39; Ignore if Alt or Ctrl is pressed.\n         If (keyInfo.Modifiers And ConsoleModifiers.Alt) = ConsoleModifiers.Alt _\n                              Then Continue Do \n         If (keyInfo.Modifiers And ConsoleModifiers.Control) = ConsoleModifiers.Control _\n                              Then Continue Do \n         &#39; Ignore if KeyChar value is \\u0000.\n         If keyInfo.KeyChar = ChrW(0) Then Continue Do\n         &#39; Ignore tab, clear key.\n         If keyInfo.Key = ConsoleKey.Tab Then Continue Do\n         &#39; Handle backspace.\n         If keyInfo.Key = ConsoleKey.Backspace Then\n            &#39; Are there any characters to erase?\n            If inputString.Length &gt;= 1 Then\n               &#39; Determine where we are in the console buffer.\n               Dim cursorCol As Integer = Console.CursorLeft - 1\n               Dim oldLength As Integer = inputString.Length\n               Dim extraRows As Integer = oldLength \\ 80\n\n               inputString = inputString.Substring(0, oldLength - 1)\n               Console.CursorLeft = 0\n               Console.CursorTop = Console.CursorTop - extraRows\n               Console.Write(inputString + New String(&quot; &quot;c, oldLength - inputString.Length))\n               Console.CursorLeft = cursorCol\n            End If\n            Continue Do\n         End If   \n         &#39; Handle Escape key.\n         If keyInfo.Key = ConsoleKey.Escape Then Exit Do\n         &#39; Handle key by adding it to input string.\n         Console.Write(keyInfo.KeyChar)\n         inputString += keyInfo.KeyChar \n      Loop While keyInfo.Key &lt;&gt; ConsoleKey.Enter\n      Console.WriteLine(&quot;{0}{0}You entered:{0}    {1}&quot;, vbCrLf, _\n                        IIf(String.IsNullOrEmpty(inputString), &quot;&lt;nothing&gt;&quot;, inputString))\n   End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo_Modifiers\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo_Modifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Modifiers</div>        \r\n          </div>\r\n    \r\n            <p>Gets a bitwise combination of <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> values that specifies one or more modifier keys pressed simultaneously with the console key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ConsoleModifiers Modifiers { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of the enumeration values. There is no default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates using a Modifiers property in a read operation.  </p>\n<pre><code class=\"lang-cs\" name=\"console.readkey1#1\">using System;\n\nclass Example \n{\n   public static void Main() \n   {\n      ConsoleKeyInfo cki;\n      // Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = true;\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n      do \n      {\n         cki = Console.ReadKey();\n         Console.Write(&quot; --- You pressed &quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Alt) != 0) Console.Write(&quot;ALT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Shift) != 0) Console.Write(&quot;SHIFT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Control) != 0) Console.Write(&quot;CTL+&quot;);\n         Console.WriteLine(cki.Key.ToString());\n       } while (cki.Key != ConsoleKey.Escape);\n    }\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U \n</code></pre><pre><code class=\"lang-cpp\" name=\"console.readkey1#1\">using namespace System;\n\nvoid main()\n{\n   ConsoleKeyInfo cki;\n   // Prevent example from ending if CTL+C is pressed.\n   Console::TreatControlCAsInput = true;\n\n   Console::WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n   Console::WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n   do \n   {\n      cki = Console::ReadKey();\n      Console::Write(&quot; --- You pressed &quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Alt) != ConsoleModifiers()) Console::Write(&quot;ALT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Shift) != ConsoleModifiers()) Console::Write(&quot;SHIFT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Control) != ConsoleModifiers()) Console::Write(&quot;CTL+&quot;);\n      Console::WriteLine(cki.Key.ToString());\n   } while (cki.Key != ConsoleKey::Escape);\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U }\n</code></pre><pre><code class=\"lang-vb\" name=\"console.readkey1#1\">Class Example\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      &#39; Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = True\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;)\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: &quot; + vbCrLf)\n      Do\n         cki = Console.ReadKey()\n         Console.Write(&quot; --- You pressed &quot;)\n         If (cki.Modifiers And ConsoleModifiers.Alt) &lt;&gt; 0 Then Console.Write(&quot;ALT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Shift) &lt;&gt; 0 Then Console.Write(&quot;SHIFT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Control) &lt;&gt; 0 Then Console.Write(&quot;CTL+&quot;)\n         Console.WriteLine(cki.Key.ToString)\n      Loop While cki.Key &lt;&gt; ConsoleKey.Escape\n   End Sub \nEnd Class \n&#39; This example displays output similar to the following:\n&#39;       Press any combination of CTL, ALT, and SHIFT, and a console key.\n&#39;       Press the Escape (Esc) key to quit:\n&#39;       \n&#39;       a --- You pressed A \n&#39;       k --- You pressed ALT+K \n&#39;       â–º --- You pressed CTL+P \n&#39;         --- You pressed RightArrow \n&#39;       R --- You pressed SHIFT+R \n&#39;                --- You pressed CTL+I \n&#39;       j --- You pressed ALT+J \n&#39;       O --- You pressed SHIFT+O \n&#39;       &#167; --- You pressed CTL+U \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo_Equals_System_ConsoleKeyInfo_\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(ConsoleKeyInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the specified <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object is equal to the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (ConsoleKeyInfo obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is equal to the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> objects are equal if their corresponding <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_KeyChar_\" data-linktype=\"relative-path\">KeyChar</a>, <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Key_\" data-linktype=\"relative-path\">Key</a>, and <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Modifiers_\" data-linktype=\"relative-path\">Modifiers</a> properties are equal.  </p>\n<p> The Equals method performs slightly better than the <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Equals_System_Object_\" data-linktype=\"relative-path\">System.ConsoleKeyInfo.Equals(Object)</a> method because it does not have to convert <code>obj</code> to an object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the specified object is equal to the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is a <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object and is equal to the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> objects are equal if their corresponding <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_KeyChar_\" data-linktype=\"relative-path\">KeyChar</a>, <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Key_\" data-linktype=\"relative-path\">Key</a>, and <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Modifiers_\" data-linktype=\"relative-path\">Modifiers</a> properties are equal.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Equals method.  </p>\n<pre><code class=\"lang-cpp\" name=\"system.ConsoleKeyInfo.Equals#1\">using namespace System;\nusing namespace System::Text;\n\nstatic String^ KeyCombination(ConsoleKeyInfo sourceCki);\n\nvoid main()\n{\n   String^ k1 = &quot;<br>Enter a key ......... &quot;;\n   String^ k2 = &quot;<br>Enter another key ... &quot;;\n   String^ key1 = &quot;&quot;;\n   String^ key2 = &quot;&quot;;\n   String^ areKeysEqual = &quot;The {0} and {1} keys are {2}equal.&quot;;\n   String^ equalValue = &quot;&quot;;\n   String^ prompt = &quot;Press the escape key (ESC) to quit, &quot; + \n                    &quot;or any other key to continue.&quot;;\n   ConsoleKeyInfo cki1;\n   ConsoleKeyInfo cki2;\n   //\n   // The Console.TreatControlCAsInput property prevents this example from\n   // ending if you press CTL+C, however all other operating system keys and \n   // shortcuts, such as ALT+TAB or the Windows Logo key, are still in effect. \n   //\n    Console::TreatControlCAsInput = true;\n\n   // Request that the user enter two key presses. A key press and any \n   // combination shift, CTRL, and ALT modifier keys is permitted.\n   do \n   {\n      Console::Write(k1);\n      cki1 = Console::ReadKey(false);\n      Console::Write(k2);\n      cki2 = Console::ReadKey(false);\n      Console::WriteLine();\n\n      key1 = KeyCombination(cki1);\n      key2 = KeyCombination(cki2);\n      if (cki1.Equals(cki2))\n         equalValue = &quot;&quot;;\n      else\n         equalValue = &quot;not &quot;;\n      \n      Console::WriteLine(areKeysEqual, key1, key2, equalValue);\n\n      Console::WriteLine(prompt);\n      cki1 = Console::ReadKey(true);\n   } while (cki1.Key != ConsoleKey::Escape);\n// Note: This example requires the Escape (Esc) key.\n}\n\n// The KeyCombination() method creates a string that specifies what \n// key and what combination of shift, CTRL, and ALT modifier keys \n// were pressed simultaneously.\n\nstatic String^ KeyCombination(ConsoleKeyInfo sourceCki)\n{\n   StringBuilder^ sb = gcnew StringBuilder();\n   sb-&gt;Length = 0;\n   String^ keyCombo;\n   if (sourceCki.Modifiers != ConsoleModifiers())\n   {\n   if ((sourceCki.Modifiers &amp; ConsoleModifiers::Alt) != ConsoleModifiers())\n      sb-&gt;Append(&quot;ALT+&quot;);\n   if ((sourceCki.Modifiers &amp; ConsoleModifiers::Shift) != ConsoleModifiers())\n      sb-&gt;Append(&quot;SHIFT+&quot;);\n   if ((sourceCki.Modifiers &amp; ConsoleModifiers::Control) != ConsoleModifiers())\n      sb-&gt;Append(&quot;CTL+&quot;);\n   }\n   sb-&gt;Append(sourceCki.Key.ToString());\n   keyCombo = sb-&gt;ToString();\n   return keyCombo;\n}\n/*\nThis example produces results similar to the following output:\n\nEnter a key ......... a\nEnter another key ... a\nThe A and A keys are equal.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key ......... a\nEnter another key ... A\nThe A and SHIFT+A keys are not equal.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key ......... S\nEnter another key ...\nThe ALT+SHIFT+S and ALT+CTL+F keys are not equal.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key .........\nEnter another key ...\nThe UpArrow and UpArrow keys are equal.\nPress the escape key (ESC) to quit, or any other key to continue.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"system.ConsoleKeyInfo.Equals#1\">// This example demonstrates the ConsoleKeyInfo.Equals() method.\n\nusing System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string k1 = &quot;<br>Enter a key ......... &quot;;\n    string k2 = &quot;<br>Enter another key ... &quot;;\n    string key1 = &quot;&quot;;\n    string key2 = &quot;&quot;;\n    string areKeysEqual = &quot;The {0} and {1} keys are {2}equal.&quot;;\n    string equalValue = &quot;&quot;;\n    string prompt = &quot;Press the escape key (ESC) to quit, &quot; + \n                    &quot;or any other key to continue.&quot;;\n    ConsoleKeyInfo cki1;\n    ConsoleKeyInfo cki2;\n\n\n//\n// The Console.TreatControlCAsInput property prevents this example from\n// ending if you press CTL+C, however all other operating system keys and \n// shortcuts, such as ALT+TAB or the Windows Logo key, are still in effect. \n//\n    Console.TreatControlCAsInput = true;\n\n// Request that the user enter two key presses. A key press and any \n// combination shift, CTRL, and ALT modifier keys is permitted.\n    do \n    {\n        Console.Write(k1);\n        cki1 = Console.ReadKey(false);\n        Console.Write(k2);\n        cki2 = Console.ReadKey(false);\n        Console.WriteLine();\n//\n        key1 = KeyCombination(cki1);\n        key2 = KeyCombination(cki2);\n        if (cki1.Equals(cki2))\n            equalValue = &quot;&quot;;\n        else\n            equalValue = &quot;not &quot;;\n        Console.WriteLine(areKeysEqual, key1, key2, equalValue);\n//\n        Console.WriteLine(prompt);\n        cki1 = Console.ReadKey(true);\n    } while (cki1.Key != ConsoleKey.Escape);\n// Note: This example requires the Escape (Esc) key.\n    }\n\n// The KeyCombination() method creates a string that specifies what \n// key and what combination of shift, CTRL, and ALT modifier keys \n// were pressed simultaneously.\n\n    protected static string KeyCombination(ConsoleKeyInfo sourceCki)\n    {\n    StringBuilder sb = new StringBuilder();\n    sb.Length = 0;\n    string keyCombo;\n    if (sourceCki.Modifiers != 0)\n        {\n        if ((sourceCki.Modifiers &amp; ConsoleModifiers.Alt) != 0)\n            sb.Append(&quot;ALT+&quot;);\n        if ((sourceCki.Modifiers &amp; ConsoleModifiers.Shift) != 0)\n            sb.Append(&quot;SHIFT+&quot;);\n        if ((sourceCki.Modifiers &amp; ConsoleModifiers.Control) != 0)\n            sb.Append(&quot;CTL+&quot;);\n        }\n    sb.Append(sourceCki.Key.ToString());\n    keyCombo = sb.ToString();\n    return keyCombo;\n    }\n}\n\n/*\nThis example produces results similar to the following output:\n\nEnter a key ......... a\nEnter another key ... a\nThe A and A keys are equal.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key ......... a\nEnter another key ... A\nThe A and SHIFT+A keys are not equal.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key ......... S\nEnter another key ...\nThe ALT+SHIFT+S and ALT+CTL+F keys are not equal.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key .........\nEnter another key ...\nThe UpArrow and UpArrow keys are equal.\nPress the escape key (ESC) to quit, or any other key to continue.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.ConsoleKeyInfo.Equals#1\">&#39; This example demonstrates the ConsoleKeyInfo.Equals() method.\nImports System\nImports System.Text\n\nClass Sample\n    Public Shared Sub Main() \n        Dim k1 As String = vbCrLf &amp; &quot;Enter a key ......... &quot;\n        Dim k2 As String = vbCrLf &amp; &quot;Enter another key ... &quot;\n        Dim key1 As String = &quot;&quot;\n        Dim key2 As String = &quot;&quot;\n        Dim areKeysEqual As String = &quot;The {0} and {1} keys are {2}equal.&quot;\n        Dim equalValue As String = &quot;&quot;\n        Dim prompt As String = &quot;Press the escape key (ESC) to quit, &quot; &amp; _\n                               &quot;or any other key to continue.&quot;\n        Dim cki1 As ConsoleKeyInfo\n        Dim cki2 As ConsoleKeyInfo\n        \n        &#39;\n        &#39; The Console.TreatControlCAsInput property prevents this example from\n        &#39; ending if you press CTL+C, however all other operating system keys and \n        &#39; shortcuts, such as ALT+TAB or the Windows Logo key, are still in effect. \n        &#39;\n        Console.TreatControlCAsInput = True\n        \n        &#39; Request that the user enter two key presses. A key press and any \n        &#39; combination shift, CTRL, and ALT modifier keys is permitted.\n        Do\n            Console.Write(k1)\n            cki1 = Console.ReadKey(False)\n            Console.Write(k2)\n            cki2 = Console.ReadKey(False)\n            Console.WriteLine()\n            &#39;\n            key1 = KeyCombination(cki1)\n            key2 = KeyCombination(cki2)\n            If cki1.Equals(cki2) Then\n                equalValue = &quot;&quot;\n            Else\n                equalValue = &quot;not &quot;\n            End If\n            Console.WriteLine(areKeysEqual, key1, key2, equalValue)\n            &#39;\n            Console.WriteLine(prompt)\n            cki1 = Console.ReadKey(True)\n        Loop While cki1.Key &lt;&gt; ConsoleKey.Escape\n    \n    End Sub &#39;Main\n    &#39; Note: This example requires the Escape (Esc) key.\n    \n    &#39; The KeyCombination() method creates a string that specifies what \n    &#39; key and what combination of shift, CTRL, and ALT modifier keys \n    &#39; were pressed simultaneously.\n    Protected Shared Function KeyCombination(ByVal sourceCki As ConsoleKeyInfo) As String \n        Dim sb As New StringBuilder()\n        sb.Length = 0\n        Dim keyCombo As String\n        If sourceCki.Modifiers &lt;&gt; 0 Then\n            If(sourceCki.Modifiers And ConsoleModifiers.Alt) &lt;&gt; 0 Then\n                sb.Append(&quot;ALT+&quot;)\n            End If\n            If(sourceCki.Modifiers And ConsoleModifiers.Shift) &lt;&gt; 0 Then\n                sb.Append(&quot;SHIFT+&quot;)\n            End If\n            If(sourceCki.Modifiers And ConsoleModifiers.Control) &lt;&gt; 0 Then\n                sb.Append(&quot;CTL+&quot;)\n            End If\n        End If\n        sb.Append(sourceCki.Key.ToString())\n        keyCombo = sb.ToString()\n        Return keyCombo\n    \n    End Function &#39;KeyCombination\nEnd Class &#39;Sample\n\n&#39;\n&#39;This example produces results similar to the following output:\n&#39;\n&#39;Enter a key ......... a\n&#39;Enter another key ... a\n&#39;The A and A keys are equal.\n&#39;Press the escape key (ESC) to quit, or any other key to continue.\n&#39;\n&#39;Enter a key ......... a\n&#39;Enter another key ... A\n&#39;The A and SHIFT+A keys are not equal.\n&#39;Press the escape key (ESC) to quit, or any other key to continue.\n&#39;\n&#39;Enter a key ......... S\n&#39;Enter another key ...\n&#39;The ALT+SHIFT+S and ALT+CTL+F keys are not equal.\n&#39;Press the escape key (ESC) to quit, or any other key to continue.\n&#39;\n&#39;Enter a key .........\n&#39;Enter another key ...\n&#39;The UpArrow and UpArrow keys are equal.\n&#39;Press the escape key (ESC) to quit, or any other key to continue.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for the current <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value returned by the GetHashCode method is not suitable for distinguishing one <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object from another. If your application needs a unique hash code, override the GetHashCode method with your own method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the GetHashCode method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.ConsoleKeyInfo.GetHashCode#1\">using namespace System;\nusing namespace System::Text;\n\nString^ KeyCombination(ConsoleKeyInfo sourceCki);\n\nvoid main()\n{\n   String^ k1 = &quot;<br>Enter a key ......... &quot;;\n   String^ key1 = &quot;&quot;;\n   String^ hashCodeFmt = &quot;The hash code for the {0} key is {1}.&quot;;\n   String^ prompt = &quot;Press the escape key (ESC) to quit, &quot; + \n                    &quot;or any other key to continue.&quot;;\n   ConsoleKeyInfo cki1;\n   int hashCode = 0;\n\n   // The Console.TreatControlCAsInput property prevents this example from\n   // ending if you press CTL+C, however all other operating system keys and \n   // shortcuts, such as ALT+TAB or the Windows Logo key, are still in effect. \n   //\n   Console::TreatControlCAsInput = true;\n\n   // Request that the user enter two key presses. A key press and any \n   // combination shift, CTRL, and ALT modifier keys is permitted.\n   do \n   {\n      Console::Write(k1);\n      cki1 = Console::ReadKey(false);\n      Console::WriteLine();\n\n      key1 = KeyCombination(cki1);\n      hashCode = cki1.GetHashCode();\n      Console::WriteLine(hashCodeFmt, key1, hashCode);\n\n      Console::WriteLine(prompt);\n      cki1 = Console::ReadKey(true);\n   } while (cki1.Key != ConsoleKey::Escape);\n   // Note: This example requires the Escape (Esc) key.\n}\n\n// The KeyCombination() method creates a string that specifies what \n// key and what combination of shift, CTRL, and ALT modifier keys \n// were pressed simultaneously.\n\nstatic String^ KeyCombination(ConsoleKeyInfo sourceCki)\n{\n   StringBuilder^ sb = gcnew StringBuilder();\n   sb-&gt;Length = 0;\n   String^ keyCombo;\n   if (sourceCki.Modifiers != (ConsoleModifiers) 0)\n      {\n      if ((sourceCki.Modifiers &amp; ConsoleModifiers::Alt) != (ConsoleModifiers) 0)\n         sb-&gt;Append(&quot;ALT+&quot;);\n      if ((sourceCki.Modifiers &amp; ConsoleModifiers::Shift) != (ConsoleModifiers) 0)\n         sb-&gt;Append(&quot;SHIFT+&quot;);\n      if ((sourceCki.Modifiers &amp; ConsoleModifiers::Control) != (ConsoleModifiers) 0)\n         sb-&gt;Append(&quot;CTL+&quot;);\n      }\n   sb-&gt;Append(sourceCki.Key.ToString());\n   keyCombo = sb-&gt;ToString();\n   return keyCombo;\n}\n\n\n/*\nThis example produces results similar to the following output:\n\nEnter a key ......... a\nThe hash code for the A key is 97.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key ......... S\nThe hash code for the SHIFT+S key is 83.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key .........\nThe hash code for the ALT+SHIFT+CTL+J key is 7.\nPress the escape key (ESC) to quit, or any other key to continue.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ConsoleKeyInfo.GetHashCode#1\">&#39; This example demonstrates the ConsoleKeyInfo.GetHashCode() method.\nImports System\nImports System.Text\n\nClass Sample\n    Public Shared Sub Main() \n        Dim k1 As String = vbCrLf &amp; &quot;Enter a key ......... &quot;\n        Dim key1 As String = &quot;&quot;\n        Dim hashCodeFmt As String = &quot;The hash code for the {0} key is {1}.&quot;\n        Dim prompt As String = &quot;Press the escape key (ESC) to quit, &quot; &amp; _\n                               &quot;or any other key to continue.&quot;\n        Dim cki1 As ConsoleKeyInfo\n        Dim hashCode As Integer = 0\n        \n        &#39;\n        &#39; The Console.TreatControlCAsInput property prevents this example from\n        &#39; ending if you press CTL+C, however all other operating system keys and \n        &#39; shortcuts, such as ALT+TAB or the Windows Logo key, are still in effect. \n        &#39;\n        Console.TreatControlCAsInput = True\n        \n        &#39; Request that the user enter two key presses. A key press and any \n        &#39; combination shift, CTRL, and ALT modifier keys is permitted.\n        Do\n            Console.Write(k1)\n            cki1 = Console.ReadKey(False)\n            Console.WriteLine()\n            &#39;\n            key1 = KeyCombination(cki1)\n            hashCode = cki1.GetHashCode()\n            Console.WriteLine(hashCodeFmt, key1, hashCode)\n            &#39;\n            Console.WriteLine(prompt)\n            cki1 = Console.ReadKey(True)\n        Loop While cki1.Key &lt;&gt; ConsoleKey.Escape\n    \n    End Sub &#39;Main\n     &#39; Note: This example requires the Escape (Esc) key.\n    \n    &#39; The KeyCombination() method creates a string that specifies what \n    &#39; key and what combination of shift, CTRL, and ALT modifier keys \n    &#39; were pressed simultaneously.\n    Protected Shared Function KeyCombination(ByVal sourceCki As ConsoleKeyInfo) As String \n        Dim sb As New StringBuilder()\n        sb.Length = 0\n        Dim keyCombo As String\n        If sourceCki.Modifiers &lt;&gt; 0 Then\n            If(sourceCki.Modifiers And ConsoleModifiers.Alt) &lt;&gt; 0 Then\n                sb.Append(&quot;ALT+&quot;)\n            End If\n            If(sourceCki.Modifiers And ConsoleModifiers.Shift) &lt;&gt; 0 Then\n                sb.Append(&quot;SHIFT+&quot;)\n            End If\n            If(sourceCki.Modifiers And ConsoleModifiers.Control) &lt;&gt; 0 Then\n                sb.Append(&quot;CTL+&quot;)\n            End If\n        End If\n        sb.Append(sourceCki.Key.ToString())\n        keyCombo = sb.ToString()\n        Return keyCombo\n    \n    End Function &#39;KeyCombination\nEnd Class &#39;Sample\n\n&#39;\n&#39;This example produces results similar to the following output:\n&#39;\n&#39;Enter a key ......... a\n&#39;The hash code for the A key is 97.\n&#39;Press the escape key (ESC) to quit, or any other key to continue.\n&#39;\n&#39;Enter a key ......... S\n&#39;The hash code for the SHIFT+S key is 83.\n&#39;Press the escape key (ESC) to quit, or any other key to continue.\n&#39;\n&#39;Enter a key .........\n&#39;The hash code for the ALT+SHIFT+CTL+J key is 7.\n&#39;Press the escape key (ESC) to quit, or any other key to continue.\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ConsoleKeyInfo.GetHashCode#1\">// This example demonstrates the ConsoleKeyInfo.GetHashCode() method.\n\nusing System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string k1 = &quot;<br>Enter a key ......... &quot;;\n    string key1 = &quot;&quot;;\n    string hashCodeFmt = &quot;The hash code for the {0} key is {1}.&quot;;\n    string prompt = &quot;Press the escape key (ESC) to quit, &quot; + \n                    &quot;or any other key to continue.&quot;;\n    ConsoleKeyInfo cki1;\n    int hashCode = 0;\n\n//\n// The Console.TreatControlCAsInput property prevents this example from\n// ending if you press CTL+C, however all other operating system keys and \n// shortcuts, such as ALT+TAB or the Windows Logo key, are still in effect. \n//\n    Console.TreatControlCAsInput = true;\n\n// Request that the user enter two key presses. A key press and any \n// combination shift, CTRL, and ALT modifier keys is permitted.\n    do \n    {\n        Console.Write(k1);\n        cki1 = Console.ReadKey(false);\n        Console.WriteLine();\n//\n        key1 = KeyCombination(cki1);\n        hashCode = cki1.GetHashCode();\n        Console.WriteLine(hashCodeFmt, key1, hashCode);\n//\n        Console.WriteLine(prompt);\n        cki1 = Console.ReadKey(true);\n    } while (cki1.Key != ConsoleKey.Escape);\n// Note: This example requires the Escape (Esc) key.\n    }\n\n// The KeyCombination() method creates a string that specifies what \n// key and what combination of shift, CTRL, and ALT modifier keys \n// were pressed simultaneously.\n\n    protected static string KeyCombination(ConsoleKeyInfo sourceCki)\n    {\n    StringBuilder sb = new StringBuilder();\n    sb.Length = 0;\n    string keyCombo;\n    if (sourceCki.Modifiers != 0)\n        {\n        if ((sourceCki.Modifiers &amp; ConsoleModifiers.Alt) != 0)\n            sb.Append(&quot;ALT+&quot;);\n        if ((sourceCki.Modifiers &amp; ConsoleModifiers.Shift) != 0)\n            sb.Append(&quot;SHIFT+&quot;);\n        if ((sourceCki.Modifiers &amp; ConsoleModifiers.Control) != 0)\n            sb.Append(&quot;CTL+&quot;);\n        }\n    sb.Append(sourceCki.Key.ToString());\n    keyCombo = sb.ToString();\n    return keyCombo;\n    }\n}\n\n/*\nThis example produces results similar to the following output:\n\nEnter a key ......... a\nThe hash code for the A key is 97.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key ......... S\nThe hash code for the SHIFT+S key is 83.\nPress the escape key (ESC) to quit, or any other key to continue.\n\nEnter a key .........\nThe hash code for the ALT+SHIFT+CTL+J key is 7.\nPress the escape key (ESC) to quit, or any other key to continue.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo_op_Equality_System_ConsoleKeyInfo_System_ConsoleKeyInfo_\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(ConsoleKeyInfo,ConsoleKeyInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (ConsoleKeyInfo a, ConsoleKeyInfo b);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>a</code> is equal to <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> objects are equal if their corresponding <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_KeyChar_\" data-linktype=\"relative-path\">KeyChar</a>, <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Key_\" data-linktype=\"relative-path\">Key</a>, and <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Modifiers_\" data-linktype=\"relative-path\">Modifiers</a> properties are equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ConsoleKeyInfo_op_Inequality_System_ConsoleKeyInfo_System_ConsoleKeyInfo_\">\r\n    \r\n            <a id=\"System_ConsoleKeyInfo_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(ConsoleKeyInfo,ConsoleKeyInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (ConsoleKeyInfo a, ConsoleKeyInfo b);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>a</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>b</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>a</code> is not equal to <code>b</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> objects are equal if their corresponding <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_KeyChar_\" data-linktype=\"relative-path\">KeyChar</a>, <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Key_\" data-linktype=\"relative-path\">Key</a>, and <a class=\"xref\" href=\"system.consolekeyinfo#System_ConsoleKeyInfo_Modifiers_\" data-linktype=\"relative-path\">Modifiers</a> properties are equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ConsoleKeyInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ConsoleKeyInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.Key\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.KeyChar\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.Modifiers\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.ConsoleKeyInfo.op_op_Inequality\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6f7dc1de-f453-d0e2-a8a0-8c43dac0c410\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\ConsoleKeyInfo.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes the console key that was pressed, including the character represented by the console key and the state of the SHIFT, ALT, and CTRL modifier keys.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ConsoleKeyInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ConsoleKeyInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ConsoleKeyInfo.yml","open_to_public_contributors":true,"api_name":["System.ConsoleKeyInfo","System.ConsoleKeyInfo..ctor","System.ConsoleKeyInfo.Equals","System.ConsoleKeyInfo.GetHashCode","System.ConsoleKeyInfo.Key","System.ConsoleKeyInfo.KeyChar","System.ConsoleKeyInfo.Modifiers","System.ConsoleKeyInfo.op_Equality","System.ConsoleKeyInfo.op_op_Equality","System.ConsoleKeyInfo.op_Inequality","System.ConsoleKeyInfo.op_op_Inequality"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ConsoleKeyInfo","System::ConsoleKeyInfo","System.ConsoleKeyInfo.#ctor","System::ConsoleKeyInfo::#ctor","System.ConsoleKeyInfo.Equals","System::ConsoleKeyInfo::Equals","System.ConsoleKeyInfo.GetHashCode","System::ConsoleKeyInfo::GetHashCode","System.ConsoleKeyInfo.Key","System::ConsoleKeyInfo::Key","System.ConsoleKeyInfo.KeyChar","System::ConsoleKeyInfo::KeyChar","System.ConsoleKeyInfo.Modifiers","System::ConsoleKeyInfo::Modifiers","System.ConsoleKeyInfo.op_Equality","System::ConsoleKeyInfo::op_Equality","System.ConsoleKeyInfo.op_Inequality","System::ConsoleKeyInfo::op_Inequality"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6f7dc1de-f453-d0e2-a8a0-8c43dac0c410","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\ConsoleKeyInfo.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/ConsoleKeyInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConsoleKeyInfo struct | Microsoft Docs","_op_ogTitle":"ConsoleKeyInfo struct","description":"Describes the console key that was pressed, including the character represented by the console key and the state of the SHIFT, ALT, and CTRL modifier keys.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.ConsoleKeyInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.consolekeyinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.consolekeyinfo","fileRelativePath":"System.ConsoleKeyInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}