{"content":"    \r\n    <h1 id=\"System_Globalization_JapaneseCalendar\">\r\n      <span class=\"lang-csharp\">JapaneseCalendar</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the Japanese calendar.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class JapaneseCalendar : System.Globalization.Calendar</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">System.Globalization.Calendar</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">JapaneseCalendar</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddDays_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddDays(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddHours_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddHours(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddMilliseconds_System_DateTime_System_Double_\" data-linktype=\"relative-path\">AddMilliseconds(DateTime,Double)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddMinutes_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddMinutes(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddSeconds_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddSeconds(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddWeeks_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddWeeks(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_Clone\" data-linktype=\"relative-path\">Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_CurrentEra\" data-linktype=\"relative-path\">CurrentEra</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_DaysInYearBeforeMinSupportedYear\" data-linktype=\"relative-path\">DaysInYearBeforeMinSupportedYear</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInMonth_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetDaysInMonth(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInYear_System_Int32_\" data-linktype=\"relative-path\">GetDaysInYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetHour_System_DateTime_\" data-linktype=\"relative-path\">GetHour(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetLeapMonth_System_Int32_\" data-linktype=\"relative-path\">GetLeapMonth(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMilliseconds_System_DateTime_\" data-linktype=\"relative-path\">GetMilliseconds(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMinute_System_DateTime_\" data-linktype=\"relative-path\">GetMinute(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMonthsInYear_System_Int32_\" data-linktype=\"relative-path\">GetMonthsInYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetSecond_System_DateTime_\" data-linktype=\"relative-path\">GetSecond(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapDay_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IsLeapDay(Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapMonth_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IsLeapMonth(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapYear_System_Int32_\" data-linktype=\"relative-path\">IsLeapYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsReadOnly\" data-linktype=\"relative-path\">IsReadOnly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ReadOnly_System_Globalization_Calendar_\" data-linktype=\"relative-path\">ReadOnly(Calendar)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Japanese calendar, which is also known as the Wareki calendar, works exactly like the Gregorian calendar, except that the year and era are different.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For information about using the JapaneseCalendar class and the other calendar classes in the .NET Framework, see <a href=\"../Topic/Working%20with%20Calendars.md\" data-linktype=\"relative-path\">Working with Calendars</a>.  </p>\n</div>\n<p> The Japanese calendar recognizes one era for every emperor&#39;s reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called &quot;Gannen.&quot; Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.  </p>\n<p> This class assigns numbers to the eras as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>GetEra value</th>\n<th>Era Name</th>\n<th>Era Abbreviation</th>\n<th>Gregorian Dates</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>平成 (Heisei)</td>\n<td>平 (H, h)</td>\n<td>January 8, 1989 to present</td>\n</tr>\n<tr>\n<td>3</td>\n<td>昭和 (Showa)</td>\n<td>昭 (S, s)</td>\n<td>December 25, 1926 to January 7, 1989</td>\n</tr>\n<tr>\n<td>2</td>\n<td>大正 (Taisho)</td>\n<td>大 (T, t)</td>\n<td>July 30, 1912 to December 24, 1926</td>\n</tr>\n<tr>\n<td>1</td>\n<td>明治 (Meiji)</td>\n<td>明 (M, m)</td>\n<td>September 8, 1868 to July 29, 1912</td>\n</tr>\n</tbody>\n</table>\n<p> This class handles dates from September 8 in the year Meiji 1 (in the Gregorian calendar, September 8, 1868). Although the Japanese calendar was switched from a lunar calendar to a solar calendar in the year Meiji 6 (1873 of the Gregorian calendar), this implementation is based on the solar calendar only.  </p>\n<p> Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  </p>\n<p> The Japanese calendar has 12 months with 28 to 31 days each:  </p>\n<table>\n<thead>\n<tr>\n<th>GetMonth value</th>\n<th>Month</th>\n<th>English</th>\n<th>Days in common years</th>\n<th>Days in leap years</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1月 (Ichigatsu)</td>\n<td>January</td>\n<td>31</td>\n<td>31</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2月 (Nigatsu)</td>\n<td>February</td>\n<td>28</td>\n<td>29</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3月 (Sangatsu)</td>\n<td>March</td>\n<td>31</td>\n<td>31</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4月 (Shigatsu)</td>\n<td>April</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5月 (Gogatsu)</td>\n<td>May</td>\n<td>31</td>\n<td>31</td>\n</tr>\n<tr>\n<td>6</td>\n<td>6月 (Rokugatsu)</td>\n<td>June</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>7</td>\n<td>7月 (Shichigatsu)</td>\n<td>July</td>\n<td>31</td>\n<td>31</td>\n</tr>\n<tr>\n<td>8</td>\n<td>8月 (Hachigatsu)</td>\n<td>August</td>\n<td>31</td>\n<td>31</td>\n</tr>\n<tr>\n<td>9</td>\n<td>9月 (Kugatsu)</td>\n<td>September</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>10</td>\n<td>10月 (Juugatsu)</td>\n<td>October</td>\n<td>31</td>\n<td>31</td>\n</tr>\n<tr>\n<td>11</td>\n<td>11月 (Juuichigatsu)</td>\n<td>November</td>\n<td>30</td>\n<td>30</td>\n</tr>\n<tr>\n<td>12</td>\n<td>12月 (Juunigatsu)</td>\n<td>December</td>\n<td>31</td>\n<td>31</td>\n</tr>\n</tbody>\n</table>\n<p> Nigatsu, which is equivalent to the Gregorian calendar month of February, has 29 days during leap years and 28 during common years.  </p>\n<p> The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the first day of Ichigatsu in the year Heisei 13 in the Japanese calendar.  </p>\n<p> If the application is using the JapaneseCalendar class, <a class=\"xref\" href=\"system.datetime#System_DateTime_Parse_\" data-linktype=\"relative-path\">Parse</a> recognizes the era abbreviations in front of the year. The abbreviation is either the single-character case-insensitive Latin alphabet abbreviation or the single-character Kanji abbreviation.  </p>\n<p> Each <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object supports a set of calendars. The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property returns the default calendar for the culture, and the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, the application should set the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> to a new <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar__ctor\" data-linktype=\"self-bookmark\">JapaneseCalendar()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_AlgorithmType\" data-linktype=\"self-bookmark\">AlgorithmType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_Eras\" data-linktype=\"self-bookmark\">Eras</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of eras in the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_MaxSupportedDateTime\" data-linktype=\"self-bookmark\">MaxSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the latest date and time supported by the current <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_MinSupportedDateTime\" data-linktype=\"self-bookmark\">MinSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the earliest date and time supported by the current <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_TwoDigitYearMax\" data-linktype=\"self-bookmark\">TwoDigitYearMax</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_AddMonths_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddMonths(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of months away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_AddYears_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddYears(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of years away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetDayOfMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetDayOfWeek_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfWeek(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetDayOfYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of days in the specified month in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetDaysInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of days in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetEra_System_DateTime_\" data-linktype=\"self-bookmark\">GetEra(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetLeapMonth_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetLeapMonth(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetMonthsInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetMonthsInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of months in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetWeekOfYear_System_DateTime_System_Globalization_CalendarWeekRule_System_DayOfWeek_\" data-linktype=\"self-bookmark\">GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the week of the year that includes the date in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_GetYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapDay(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified date in the specified era is a leap day.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_IsLeapYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified year in the specified era is a leap year.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_JapaneseCalendar_ToFourDigitYear_System_Int32_\" data-linktype=\"self-bookmark\">ToFourDigitYear(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified year to a four-digit year by using the <span class=\"xref\">stem.Globalization.JapaneseCalendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar__ctor\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">JapaneseCalendar()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public JapaneseCalendar ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeinitializationexception\" data-linktype=\"relative-path\">TypeInitializationException</a></div>\r\n                  </div>\r\n                  <p>Unable to initialize a <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> object because of missing culture information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_AlgorithmType\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_AlgorithmType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlgorithmType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a></div>\r\n                  </div>\r\n                  <p>Always returns <a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses reflection to instantiate each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> type found in the .NET Framework and displays the value of its <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AlgorithmType_\" data-linktype=\"relative-path\">AlgorithmType</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AlgorithmType#1\">using System;\nusing System.Collections;\nusing System.Globalization;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = Assembly.GetAssembly(typeof(Calendar));\n      Type[] types = assem.GetExportedTypes();\n      Type[] calendars = Array.FindAll(types, IsValidCalendar);\n      Array.Sort(calendars, new CalendarComparer());\n\n      Console.WriteLine(&quot;{0,-30} {1}<br>&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;);\n      foreach (var cal in calendars) {\n         // Instantiate a calendar object.\n         ConstructorInfo ctor = cal.GetConstructor( new Type[] {} );\n         Calendar calObj = (Calendar) ctor.Invoke( new Type[] {} ); \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty,\n                                           null, calObj, null));\n      }\n   }\n\n   private static bool IsValidCalendar(Type t)\n   {\n        if (t.IsSubclassOf(typeof(Calendar)))\n            if (t.IsAbstract)\n                return false;\n            else\n                return true;\n        else\n            return false;\n   }\n}\n\npublic class CalendarComparer : IComparer\n{\n   public int Compare(object x, object y)\n   {\n      Type tX = (Type) x;\n      Type tY = (Type) y;\n\n      return tX.Name.CompareTo(tY.Name);\n   }\n}\n// The example displays the following output:\n//       Calendar                       Algorithm Type\n//       \n//       ChineseLunisolarCalendar       LunisolarCalendar\n//       GregorianCalendar              SolarCalendar\n//       HebrewCalendar                 LunisolarCalendar\n//       HijriCalendar                  LunarCalendar\n//       JapaneseCalendar               SolarCalendar\n//       JapaneseLunisolarCalendar      LunisolarCalendar\n//       JulianCalendar                 SolarCalendar\n//       KoreanCalendar                 SolarCalendar\n//       KoreanLunisolarCalendar        LunisolarCalendar\n//       PersianCalendar                SolarCalendar\n//       TaiwanCalendar                 SolarCalendar\n//       TaiwanLunisolarCalendar        LunisolarCalendar\n//       ThaiBuddhistCalendar           SolarCalendar\n//       UmAlQuraCalendar               LunarCalendar\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AlgorithmType#1\">Imports System.Collections\nImports System.Globalization\nImports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = Assembly.GetAssembly(GetType(Calendar))\n      Dim types() As Type = assem.GetExportedTypes()\n      Dim calendars() As Type = Array.FindAll(types, AddressOf IsValidCalendar)\n      Array.Sort(calendars, New CalendarComparer())\n\n      Console.WriteLine(&quot;{0,-30} {1}&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;)\n      Console.WriteLine()\n      For Each cal In calendars\n         &#39; Instantiate a calendar object.\n         Dim ctor As ConstructorInfo = cal.GetConstructor( {} )\n         Dim calObj As Calendar = CType(ctor.Invoke( {} ), Calendar) \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.GetProperty,\n                                           Nothing, calObj, Nothing))\n      Next\n   End Sub\n   \n   Private Function IsValidCalendar(ByVal t As Type) As Boolean\n        If t.IsSubClassOf(GetType(Calendar)) Then\n            If t.IsAbstract Then\n                Return False\n            Else\n                Return True\n            End If\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n\nPublic Class CalendarComparer : Implements IComparer\n   Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer _\n                  Implements IComparer.Compare\n      Dim tX As Type = DirectCast(x, Type)\n      Dim tY As Type = DirectCast(y, Type)\n\n      Return tX.Name.CompareTo(tY.Name)\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;       Calendar                       Algorithm Type\n&#39;       \n&#39;       ChineseLunisolarCalendar       LunisolarCalendar\n&#39;       GregorianCalendar              SolarCalendar\n&#39;       HebrewCalendar                 LunisolarCalendar\n&#39;       HijriCalendar                  LunarCalendar\n&#39;       JapaneseCalendar               SolarCalendar\n&#39;       JapaneseLunisolarCalendar      LunisolarCalendar\n&#39;       JulianCalendar                 SolarCalendar\n&#39;       KoreanCalendar                 SolarCalendar\n&#39;       KoreanLunisolarCalendar        LunisolarCalendar\n&#39;       PersianCalendar                SolarCalendar\n&#39;       TaiwanCalendar                 SolarCalendar\n&#39;       TaiwanLunisolarCalendar        LunisolarCalendar\n&#39;       ThaiBuddhistCalendar           SolarCalendar\n&#39;       UmAlQuraCalendar               LunarCalendar\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_Eras\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_Eras_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Eras</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of eras in the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int[] Eras { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </div>\r\n                  <p>An array of integers that represents the eras in the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Japanese calendar recognizes one era for every emperor&#39;s reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called &quot;Gannen.&quot; Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.  </p>\n<p> This class assigns numbers to the eras as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>GetEra value</th>\n<th>Era Name</th>\n<th>Era Abbreviation</th>\n<th>Gregorian Dates</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>平成 (Heisei)</td>\n<td>平 (H, h)</td>\n<td>January 8, 1989 to present</td>\n</tr>\n<tr>\n<td>3</td>\n<td>昭和 (Showa)</td>\n<td>昭 (S, s)</td>\n<td>December 25, 1926 to January 7, 1989</td>\n</tr>\n<tr>\n<td>2</td>\n<td>大正 (Taisho)</td>\n<td>大 (T, t)</td>\n<td>July 30, 1912 to December 24, 1926</td>\n</tr>\n<tr>\n<td>1</td>\n<td>明治 (Meiji)</td>\n<td>明 (M, m)</td>\n<td>September 8, 1868 to July 29, 1912</td>\n</tr>\n</tbody>\n</table>\n<p> This class handles dates from September 8 in the year Meiji 1 (January 1, 1868 of the Gregorian calendar). Although the Japanese calendar was switched from a lunar calendar to a solar calendar in the year Meiji 6 (1873 of the Gregorian calendar), this implementation is based on the solar calendar only.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Should additional eras be added in the future, applications may encounter more than the expected four eras for the Japanese calendar. Applications should be tested to ensure that they continue to work in such an event; see <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=239618\" data-linktype=\"external\">Era Handling for the Japanese Calendar</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the values contained in the Eras property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar.Eras#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.WriteLine( &quot;Eras[{0}] = {1}&quot;, i, myCal.Eras[i] );\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nEras[0] = 4\nEras[1] = 3\nEras[2] = 2\nEras[3] = 1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar.Eras#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesJapaneseCalendar\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.WriteLine(&quot;Eras[{0}] = {1}&quot;, i, myCal.Eras(i))\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesJapaneseCalendar\n\n&#39;This code produces the following output.\n&#39;\n&#39;Eras[0] = 4\n&#39;Eras[1] = 3\n&#39;Eras[2] = 2\n&#39;Eras[3] = 1\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar.Eras#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;Eras[ {0}] = {1}&quot;, i, myCal-&gt;Eras[ i ] );\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nEras-&gt;Item[0] = 4\nEras-&gt;Item[1] = 3\nEras-&gt;Item[2] = 2\nEras-&gt;Item[3] = 1\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_MaxSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_MaxSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the latest date and time supported by the current <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime MaxSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The latest date and time supported by the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets the minimum value and the maximum value of the calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_MinMax#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Create an instance of the calendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n      Console.WriteLine( myCal.ToString() );\n\n      // Create an instance of the GregorianCalendar.\n      GregorianCalendar myGre = new GregorianCalendar();\n\n      // Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n      DateTime myMin = myCal.MinSupportedDateTime;\n      Console.Write( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin) );\n      Console.WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMin), myGre.GetDayOfMonth(myMin), myGre.GetYear(myMin) );\n\n      // Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n      DateTime myMax = myCal.MaxSupportedDateTime;\n      Console.Write( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax) );\n      Console.WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMax), myGre.GetDayOfMonth(myMax), myGre.GetYear(myMax) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.JapaneseCalendar\nMinSupportedDateTime: 09/08/0001 (in Gregorian, 09/08/1868)\nMaxSupportedDateTime: 12/31/8011 (in Gregorian, 12/31/9999)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_MinMax#1\">using namespace System;\nusing namespace System::Globalization;\n\nint main()\n{\n   // Create an instance of the calendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   Console::WriteLine( myCal );\n   \n   // Create an instance of the GregorianCalendar.\n   GregorianCalendar^ myGre = gcnew GregorianCalendar;\n   \n   // Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n   DateTime myMin = myCal-&gt;MinSupportedDateTime;\n   Console::Write( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMin ), myCal-&gt;GetDayOfMonth( myMin ), myCal-&gt;GetYear( myMin ) );\n   Console::WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre-&gt;GetMonth( myMin ), myGre-&gt;GetDayOfMonth( myMin ), myGre-&gt;GetYear( myMin ) );\n   \n   // Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n   DateTime myMax = myCal-&gt;MaxSupportedDateTime;\n   Console::Write( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMax ), myCal-&gt;GetDayOfMonth( myMax ), myCal-&gt;GetYear( myMax ) );\n   Console::WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre-&gt;GetMonth( myMax ), myGre-&gt;GetDayOfMonth( myMax ), myGre-&gt;GetYear( myMax ) );\n}\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.JapaneseCalendar\nMinSupportedDateTime: 09/08/0001 (in Gregorian, 09/08/1868)\nMaxSupportedDateTime: 12/31/8011 (in Gregorian, 12/31/9999)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_MinMax#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Create an instance of the calendar.\n      Dim myCal As New JapaneseCalendar()\n      Console.WriteLine(myCal.ToString())\n\n      &#39; Create an instance of the GregorianCalendar.\n      Dim myGre As New GregorianCalendar()\n\n      &#39; Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n      Dim myMin As DateTime = myCal.MinSupportedDateTime\n      Console.Write(&quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin))\n      Console.WriteLine(&quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMin), myGre.GetDayOfMonth(myMin), myGre.GetYear(myMin))\n\n      &#39; Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n      Dim myMax As DateTime = myCal.MaxSupportedDateTime\n      Console.Write(&quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax))\n      Console.WriteLine(&quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMax), myGre.GetDayOfMonth(myMax), myGre.GetYear(myMax))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCalendar\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Globalization.JapaneseCalendar\n&#39;MinSupportedDateTime: 09/08/0001 (in Gregorian, 09/08/1868)\n&#39;MaxSupportedDateTime: 12/31/8011 (in Gregorian, 12/31/9999)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_MinSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_MinSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the earliest date and time supported by the current <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime MinSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The earliest date and time supported by the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> type, which is equivalent to the first moment of September 8, 1868 C.E. in the Gregorian calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The earliest date supported by the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> class is September 8, 1868 C.E., in the first year of the Meiji era. Ordinarily, date and time operations that use the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> class throw an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> exception for dates before this date. However, some members, such as the <a class=\"xref\" href=\"system.globalization.japanesecalendar#System_Globalization_JapaneseCalendar_GetEra_\" data-linktype=\"relative-path\">GetEra</a> method, support dates from January 1, 1868 through September 7 in the year Meiji 1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the earliest and latest dates supported by the calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_MinMax#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Create an instance of the calendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n      Console.WriteLine( myCal.ToString() );\n\n      // Create an instance of the GregorianCalendar.\n      GregorianCalendar myGre = new GregorianCalendar();\n\n      // Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n      DateTime myMin = myCal.MinSupportedDateTime;\n      Console.Write( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin) );\n      Console.WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMin), myGre.GetDayOfMonth(myMin), myGre.GetYear(myMin) );\n\n      // Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n      DateTime myMax = myCal.MaxSupportedDateTime;\n      Console.Write( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax) );\n      Console.WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMax), myGre.GetDayOfMonth(myMax), myGre.GetYear(myMax) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.JapaneseCalendar\nMinSupportedDateTime: 09/08/0001 (in Gregorian, 09/08/1868)\nMaxSupportedDateTime: 12/31/8011 (in Gregorian, 12/31/9999)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_MinMax#1\">using namespace System;\nusing namespace System::Globalization;\n\nint main()\n{\n   // Create an instance of the calendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   Console::WriteLine( myCal );\n   \n   // Create an instance of the GregorianCalendar.\n   GregorianCalendar^ myGre = gcnew GregorianCalendar;\n   \n   // Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n   DateTime myMin = myCal-&gt;MinSupportedDateTime;\n   Console::Write( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMin ), myCal-&gt;GetDayOfMonth( myMin ), myCal-&gt;GetYear( myMin ) );\n   Console::WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre-&gt;GetMonth( myMin ), myGre-&gt;GetDayOfMonth( myMin ), myGre-&gt;GetYear( myMin ) );\n   \n   // Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n   DateTime myMax = myCal-&gt;MaxSupportedDateTime;\n   Console::Write( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMax ), myCal-&gt;GetDayOfMonth( myMax ), myCal-&gt;GetYear( myMax ) );\n   Console::WriteLine( &quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre-&gt;GetMonth( myMax ), myGre-&gt;GetDayOfMonth( myMax ), myGre-&gt;GetYear( myMax ) );\n}\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.JapaneseCalendar\nMinSupportedDateTime: 09/08/0001 (in Gregorian, 09/08/1868)\nMaxSupportedDateTime: 12/31/8011 (in Gregorian, 12/31/9999)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_MinMax#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Create an instance of the calendar.\n      Dim myCal As New JapaneseCalendar()\n      Console.WriteLine(myCal.ToString())\n\n      &#39; Create an instance of the GregorianCalendar.\n      Dim myGre As New GregorianCalendar()\n\n      &#39; Display the MinSupportedDateTime and its equivalent in the GregorianCalendar.\n      Dim myMin As DateTime = myCal.MinSupportedDateTime\n      Console.Write(&quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin))\n      Console.WriteLine(&quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMin), myGre.GetDayOfMonth(myMin), myGre.GetYear(myMin))\n\n      &#39; Display the MaxSupportedDateTime and its equivalent in the GregorianCalendar.\n      Dim myMax As DateTime = myCal.MaxSupportedDateTime\n      Console.Write(&quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax))\n      Console.WriteLine(&quot; (in Gregorian, {0:D2}/{1:D2}/{2:D4})&quot;, myGre.GetMonth(myMax), myGre.GetDayOfMonth(myMax), myGre.GetYear(myMax))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCalendar\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Globalization.JapaneseCalendar\n&#39;MinSupportedDateTime: 09/08/0001 (in Gregorian, 09/08/1868)\n&#39;MaxSupportedDateTime: 12/31/8011 (in Gregorian, 12/31/9999)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_TwoDigitYearMax\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_TwoDigitYearMax_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TwoDigitYearMax</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int TwoDigitYearMax { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified in a set operation is less than 99.  </p>\n<p> -or-  </p>\n<p> The value specified in a set operation is greater than 8011 (or <code>MaxSupportedDateTime.Year</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the current instance is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property implements <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a>.  </p>\n<p> Because the year in the Japanese calendar is typically less than four digits long, this implementation returns 99 by default and does not affect the return value of <a class=\"xref\" href=\"system.globalization.japanesecalendar#System_Globalization_JapaneseCalendar_ToFourDigitYear_\" data-linktype=\"relative-path\">ToFourDigitYear</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_AddMonths_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_AddMonths_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMonths(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of months away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime AddMonths (DateTime time, int months);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add months.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>months</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of months to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of months to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>months</code> is less than -120000.  </p>\n<p> -or-  </p>\n<p> <code>months</code> is greater than 120000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, if the specified month is Juugatsu (October), which has 31 days, the specified day is the 31st day of that month, and <code>months</code> is 6, the resulting year is one more than the specified year, the resulting month is Shigatsu (April), and the resulting day is the 30th day, which is the last day in Shigatsu (April).  </p>\n<p> If <code>months</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Japanese calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesJapaneseCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesJapaneseCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n&#39;   Era:        4\n&#39;   Year:       14\n&#39;   Month:      4\n&#39;   DayOfYear:  93\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Wednesday\n&#39;\n&#39;After adding two years and ten months:\n&#39;   Era:        4\n&#39;   Year:       17\n&#39;   Month:      2\n&#39;   DayOfYear:  34\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Thursday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_AddYears_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_AddYears_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddYears(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of years away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime AddYears (DateTime time, int years);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add years.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>years</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of years to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of years to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is outside the supported range of the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> type.  </p>\n<p> -or-  </p>\n<p> <code>years</code> is less than -10,000 or greater than 10,000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The era part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, Nigatsu (February) has 28 days except during leap years when it has 29 days. If the specified date is the 29th day of Nigatsu (February) in a leap year and the value of <code>years</code> is 1, the resulting date will be the 28th day of Nigatsu (February) in the following year.  </p>\n<p> If <code>years</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Japanese calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesJapaneseCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesJapaneseCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n&#39;   Era:        4\n&#39;   Year:       14\n&#39;   Month:      4\n&#39;   DayOfYear:  93\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Wednesday\n&#39;\n&#39;After adding two years and ten months:\n&#39;   Era:        4\n&#39;   Year:       17\n&#39;   Month:      2\n&#39;   DayOfYear:  34\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Thursday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetDayOfMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetDayOfMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDayOfMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 31 that represents the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Japanese calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesJapaneseCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesJapaneseCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n&#39;   Era:        4\n&#39;   Year:       14\n&#39;   Month:      4\n&#39;   DayOfYear:  93\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Wednesday\n&#39;\n&#39;After adding two years and ten months:\n&#39;   Era:        4\n&#39;   Year:       17\n&#39;   Month:      2\n&#39;   DayOfYear:  34\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Thursday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetDayOfWeek_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetDayOfWeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfWeek(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DayOfWeek GetDayOfWeek (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value that represents the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> values are as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>DayOfWeek value</th>\n<th>which indicates</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sunday</td>\n<td>日曜日 (Nichiyoubi)</td>\n</tr>\n<tr>\n<td>Monday</td>\n<td>月曜日 (Getsuyoubi)</td>\n</tr>\n<tr>\n<td>Tuesday</td>\n<td>火曜日 (Kayoubi)</td>\n</tr>\n<tr>\n<td>Wednesday</td>\n<td>水曜日 (Suiyoubi)</td>\n</tr>\n<tr>\n<td>Thursday</td>\n<td>木曜日 (Mokuyoubi)</td>\n</tr>\n<tr>\n<td>Friday</td>\n<td>金曜日 (Kinyoubi)</td>\n</tr>\n<tr>\n<td>Saturday</td>\n<td>土曜日 (Doyoubi)</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Japanese calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesJapaneseCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesJapaneseCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n&#39;   Era:        4\n&#39;   Year:       14\n&#39;   Month:      4\n&#39;   DayOfYear:  93\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Wednesday\n&#39;\n&#39;After adding two years and ten months:\n&#39;   Era:        4\n&#39;   Year:       17\n&#39;   Month:      2\n&#39;   DayOfYear:  34\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Thursday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetDayOfYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetDayOfYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDayOfYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 366 that represents the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value as that returned by <a class=\"xref\" href=\"system.globalization.japanesecalendar#System_Globalization_JapaneseCalendar_GetDaysInYear_\" data-linktype=\"relative-path\">GetDaysInYear</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Japanese calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesJapaneseCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesJapaneseCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n&#39;   Era:        4\n&#39;   Year:       14\n&#39;   Month:      4\n&#39;   DayOfYear:  93\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Wednesday\n&#39;\n&#39;After adding two years and ten months:\n&#39;   Era:        4\n&#39;   Year:       17\n&#39;   Month:      2\n&#39;   DayOfYear:  34\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Thursday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetDaysInMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of days in the specified month in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDaysInMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 12 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified month in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, this method returns 28 or 29 for Nigatsu (February, <code>month</code> = 2), depending on whether <code>year</code> is a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls GetDaysInMonth for the second month in each of five years in each era.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar.GetDaysInMonth#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesJapaneseCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInMonth(y, 2, JapaneseCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 1 To 5\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInMonth(y, 2, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesJapaneseCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            1       2       3       4       5\n\n&#39;CurrentEra:     28      28      28      29      28\n\n&#39;Era 4:          28      28      28      29      28\n\n&#39;Era 3:          28      28      29      28      28\n\n&#39;Era 2:          29      28      28      28      29\n\n&#39;Era 1:          29      28      28      28      29\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar.GetDaysInMonth#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInMonth( y, 2, JapaneseCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInMonth( y, 2, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     28      28      28      29      28\nEra 4:          28      28      28      29      28\nEra 3:          28      28      29      28      28\nEra 2:          29      28      28      28      29\nEra 1:          29      28      28      28      29\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar.GetDaysInMonth#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInMonth( y, 2, JapaneseCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 1; y &lt;= 5; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInMonth( y, 2, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     28      28      28      29      28\nEra 4:          28      28      28      29      28\nEra 3:          28      28      29      28      28\nEra 2:          29      28      28      28      29\nEra 1:          29      28      28      28      29\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetDaysInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetDaysInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of days in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDaysInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, this method returns 365 or 366, depending on whether <code>year</code> is a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls GetDaysInYear for five years in each era.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar.GetDaysInYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInYear( y, JapaneseCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 1; y &lt;= 5; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     365     365     365     366     365\nEra 4:          365     365     365     366     365\nEra 3:          365     365     366     365     365\nEra 2:          366     365     365     365     366\nEra 1:          366     365     365     365     366\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar.GetDaysInYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInYear( y, JapaneseCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     365     365     365     366     365\nEra 4:          365     365     365     366     365\nEra 3:          365     365     366     365     365\nEra 2:          366     365     365     365     366\nEra 1:          366     365     365     365     366\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar.GetDaysInYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesJapaneseCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInYear(y, JapaneseCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 1 To 5\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesJapaneseCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            1       2       3       4       5\n\n&#39;CurrentEra:     365     365     365     366     365\n\n&#39;Era 4:          365     365     365     366     365\n\n&#39;Era 3:          365     365     366     365     365\n\n&#39;Era 2:          366     365     365     365     366\n\n&#39;Era 1:          366     365     365     365     366\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetEra_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetEra_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEra(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetEra (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Japanese calendar recognizes one era for every emperor&#39;s reign. The current era is the Heisei era, which began in the Gregorian calendar year 1989. The era name is typically displayed before the year. For example, the Gregorian calendar year 2001 is the Japanese calendar year Heisei 13. Note that the first year of an era is called &quot;Gannen.&quot; Therefore, the Gregorian calendar year 1989 was the Japanese calendar year Heisei Gannen.  </p>\n<p> This class assigns numbers to the eras as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>GetEra value</th>\n<th>Era Name</th>\n<th>Era Abbreviation</th>\n<th>Gregorian Dates</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>平成 (Heisei)</td>\n<td>平 (H, h)</td>\n<td>January 8, 1989 to present</td>\n</tr>\n<tr>\n<td>3</td>\n<td>昭和 (Showa)</td>\n<td>昭 (S, s)</td>\n<td>December 25, 1926 to January 7, 1989</td>\n</tr>\n<tr>\n<td>2</td>\n<td>大正 (Taisho)</td>\n<td>大 (T, t)</td>\n<td>July 30, 1912 to December 24, 1926</td>\n</tr>\n<tr>\n<td>1</td>\n<td>明治 (Meiji)</td>\n<td>明 (M, m)</td>\n<td>September 8, 1868 to July 29, 1912</td>\n</tr>\n</tbody>\n</table>\n<p> Ordinarily, the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> class supports dates from September 8 in the year Meiji 1 (September 8, 1868 of the Gregorian calendar), which is the value of the <a class=\"xref\" href=\"system.globalization.japanesecalendar#System_Globalization_JapaneseCalendar_MinSupportedDateTime_\" data-linktype=\"relative-path\">MinSupportedDateTime</a> property. However, the GetEra method successfully returns the era for dates from January 1 through September 7 in the year Meiji 1 (January 1, 1868 through September 7, 1868 in the Gregorian calendar). For dates earlier than January 1, 1868 in the Gregorian calendar, the method throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Japanese calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesJapaneseCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesJapaneseCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n&#39;   Era:        4\n&#39;   Year:       14\n&#39;   Month:      4\n&#39;   DayOfYear:  93\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Wednesday\n&#39;\n&#39;After adding two years and ten months:\n&#39;   Era:        4\n&#39;   Year:       17\n&#39;   Month:      2\n&#39;   DayOfYear:  34\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Thursday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetLeapMonth_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLeapMonth(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetLeapMonth (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The return value is always 0 because the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> type does not support the notion of a leap month.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> or <code>era</code> is outside the range supported by the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_\" data-linktype=\"relative-path\">GetMonth</a> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_\" data-linktype=\"relative-path\">GetMonth</a> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 12 that represents the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Japanese calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesJapaneseCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesJapaneseCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n&#39;   Era:        4\n&#39;   Year:       14\n&#39;   Month:      4\n&#39;   DayOfYear:  93\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Wednesday\n&#39;\n&#39;After adding two years and ten months:\n&#39;   Era:        4\n&#39;   Year:       17\n&#39;   Month:      2\n&#39;   DayOfYear:  34\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Thursday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetMonthsInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetMonthsInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonthsInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of months in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMonthsInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The return value is always 12.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls GetMonthsInYear for five years in each era.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar.GetMonthsInYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetMonthsInYear( y, JapaneseCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 1; y &lt;= 5; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetMonthsInYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     12      12      12      12      12\nEra 4:          12      12      12      12      12\nEra 3:          12      12      12      12      12\nEra 2:          12      12      12      12      12\nEra 1:          12      12      12      12      12\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar.GetMonthsInYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesJapaneseCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetMonthsInYear(y, JapaneseCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 1 To 5\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetMonthsInYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesJapaneseCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            1       2       3       4       5\n\n&#39;CurrentEra:     12      12      12      12      12\n\n&#39;Era 4:          12      12      12      12      12\n\n&#39;Era 3:          12      12      12      12      12\n\n&#39;Era 2:          12      12      12      12      12\n\n&#39;Era 1:          12      12      12      12      12\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar.GetMonthsInYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetMonthsInYear( y, JapaneseCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetMonthsInYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     12      12      12      12      12\nEra 4:          12      12      12      12      12\nEra 3:          12      12      12      12      12\nEra 2:          12      12      12      12      12\nEra 1:          12      12      12      12      12\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetWeekOfYear_System_DateTime_System_Globalization_CalendarWeekRule_System_DayOfWeek_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetWeekOfYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the week of the year that includes the date in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a> values that defines a calendar week.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>firstDayOfWeek</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> values that represents the first day of the week.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 1-based integer that represents the week of the year that includes the date in the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> or <code>firstDayOfWeek</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>rule</code> is not a valid <a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to determine the number of weeks in the year by setting the <code>time</code> parameter to the last day of the year.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property contains culture-specific values that can be used for the <code>rule</code> and <code>firstDayOfWeek</code> parameters.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_\" data-linktype=\"relative-path\">FirstDayOfWeek</a> property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> contains the default <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value that represents the first day of the week for a specific culture, using the calendar specified in the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_CalendarWeekRule_\" data-linktype=\"relative-path\">CalendarWeekRule</a> property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> contains the default <a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a> value that defines a calendar week for a specific culture, using the calendar specified in the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>.  </p>\n<p> For example, in <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>, the <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetWeekOfYear_\" data-linktype=\"relative-path\">GetWeekOfYear</a> method for January 1 returns 1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how the result of <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetWeekOfYear_\" data-linktype=\"relative-path\">GetWeekOfYear</a> varies depending on the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_\" data-linktype=\"relative-path\">FirstDayOfWeek</a> and <a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a> values used. If the specified date is the last day of the year, <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetWeekOfYear_\" data-linktype=\"relative-path\">GetWeekOfYear</a> returns the total number of weeks in that year.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.GetWeekOfYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Gets the Calendar instance associated with a CultureInfo.\n      CultureInfo myCI = new CultureInfo(&quot;en-US&quot;);\n      Calendar myCal = myCI.Calendar;\n\n      // Gets the DTFI properties required by GetWeekOfYear.\n      CalendarWeekRule myCWR = myCI.DateTimeFormat.CalendarWeekRule;\n      DayOfWeek myFirstDOW = myCI.DateTimeFormat.FirstDayOfWeek;\n\n      // Displays the number of the current week relative to the beginning of the year.\n      Console.WriteLine( &quot;The CalendarWeekRule used for the en-US culture is {0}.&quot;, myCWR );\n      Console.WriteLine( &quot;The FirstDayOfWeek used for the en-US culture is {0}.&quot;, myFirstDOW );\n      Console.WriteLine( &quot;Therefore, the current week is Week {0} of the current year.&quot;, myCal.GetWeekOfYear( DateTime.Now, myCWR, myFirstDOW ));\n\n      // Displays the total number of weeks in the current year.\n      DateTime LastDay = new System.DateTime( DateTime.Now.Year, 12, 31 );\n      Console.WriteLine( &quot;There are {0} weeks in the current year ({1}).&quot;, myCal.GetWeekOfYear( LastDay, myCWR, myFirstDOW ), LastDay.Year );\n\n   }\n\n}\n\n/*\nThis code produces the following output.  Results vary depending on the system date.\n\nThe CalendarWeekRule used for the en-US culture is FirstDay.\nThe FirstDayOfWeek used for the en-US culture is Sunday.\nTherefore, the current week is Week 1 of the current year.\nThere are 53 weeks in the current year (2001).\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.GetWeekOfYear#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCalendar\n\n   Public Shared Sub Main()\n      \n      &#39; Gets the Calendar instance associated with a CultureInfo.\n      Dim myCI As New CultureInfo(&quot;en-US&quot;)\n      Dim myCal As Calendar = myCI.Calendar\n      \n      &#39; Gets the DTFI properties required by GetWeekOfYear.\n      Dim myCWR As CalendarWeekRule = myCI.DateTimeFormat.CalendarWeekRule\n      Dim myFirstDOW As DayOfWeek = myCI.DateTimeFormat.FirstDayOfWeek\n      \n      &#39; Displays the number of the current week relative to the beginning of the year.\n      Console.WriteLine(&quot;The CalendarWeekRule used for the en-US culture is {0}.&quot;, myCWR)\n      Console.WriteLine(&quot;The FirstDayOfWeek used for the en-US culture is {0}.&quot;, myFirstDOW)\n      Console.WriteLine(&quot;Therefore, the current week is Week {0} of the current year.&quot;, myCal.GetWeekOfYear(DateTime.Now, myCWR, myFirstDOW))\n      \n      &#39; Displays the total number of weeks in the current year.\n      Dim LastDay = New System.DateTime(DateTime.Now.Year, 12, 31)\n      Console.WriteLine(&quot;There are {0} weeks in the current year ({1}).&quot;, myCal.GetWeekOfYear(LastDay, myCWR, myFirstDOW), LastDay.Year)\n   End Sub &#39;Main \nEnd Class &#39;SamplesCalendar\n\n\n&#39;This code produces the following output.  Results vary depending on the system date.\n&#39;\n&#39;The CalendarWeekRule used for the en-US culture is FirstDay.\n&#39;The FirstDayOfWeek used for the en-US culture is Sunday.\n&#39;Therefore, the current week is Week 1 of the current year.\n&#39;There are 53 weeks in the current year (2001).\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.Calendar.GetWeekOfYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Gets the Calendar instance associated with a CultureInfo.\n   CultureInfo^ myCI = gcnew CultureInfo( &quot;en-US&quot; );\n   Calendar^ myCal = myCI-&gt;Calendar;\n   \n   // Gets the DTFI properties required by GetWeekOfYear.\n   CalendarWeekRule myCWR = myCI-&gt;DateTimeFormat-&gt;CalendarWeekRule;\n   DayOfWeek myFirstDOW = myCI-&gt;DateTimeFormat-&gt;FirstDayOfWeek;\n   \n   // Displays the number of the current week relative to the beginning of the year.\n   Console::WriteLine( &quot;The CalendarWeekRule used for the en-US culture is {0}.&quot;, myCWR );\n   Console::WriteLine( &quot;The FirstDayOfWeek used for the en-US culture is {0}.&quot;, myFirstDOW );\n   Console::WriteLine( &quot;Therefore, the current week is Week {0} of the current year.&quot;, myCal-&gt;GetWeekOfYear( DateTime::Now, myCWR, myFirstDOW ) );\n   \n   // Displays the total number of weeks in the current year.\n   DateTime LastDay = System::DateTime( DateTime::Now.Year, 12, 31 );\n   Console::WriteLine( &quot;There are {0} weeks in the current year ( {1}).&quot;, myCal-&gt;GetWeekOfYear( LastDay, myCWR, myFirstDOW ), LastDay.Year );\n}\n\n/*\nThis code produces the following output.  Results vary depending on the system date.\n\nThe CalendarWeekRule used for the en-US culture is FirstDay.\nThe FirstDayOfWeek used for the en-US culture is Sunday.\nTherefore, the current week is Week 1 of the current year.\nThere are 53 weeks in the current year (2001).\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_GetYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_GetYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Japanese calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n   Era:        4\n   Year:       14\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        4\n   Year:       17\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesJapaneseCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesJapaneseCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar equals the following in the Japanese calendar:\n&#39;   Era:        4\n&#39;   Year:       14\n&#39;   Month:      4\n&#39;   DayOfYear:  93\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Wednesday\n&#39;\n&#39;After adding two years and ten months:\n&#39;   Era:        4\n&#39;   Year:       17\n&#39;   Month:      2\n&#39;   DayOfYear:  34\n&#39;   DayOfMonth: 3\n&#39;   DayOfWeek:  Thursday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_IsLeapDay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapDay(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified date in the specified era is a leap day.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapDay (int year, int month, int day, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 12 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 31 that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code>, if the specified day is a leap day; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>day</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  </p>\n<p> A leap day is a day that occurs only in a leap year. For example, the 29th day of Nigatsu (February) is the only leap day.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar.IsLeapDay#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Creates a holder for the last day of the second month (February).\n      int iLastDay;\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Checks five years in the current era.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )  {\n         iLastDay = myCal.GetDaysInMonth( y, 2, JapaneseCalendar.CurrentEra );\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapDay( y, 2, iLastDay, JapaneseCalendar.CurrentEra ) );\n      }\n      Console.WriteLine();\n\n      // Checks five years in each of the eras.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 1; y &lt;= 5; y++ )  {\n            iLastDay = myCal.GetDaysInMonth( y, 2, myCal.Eras[i] );\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapDay( y, 2, iLastDay, myCal.Eras[i] ) );\n         }\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     False   False   False   True    False\nEra 4:          False   False   False   True    False\nEra 3:          False   False   True    False   False\nEra 2:          True    False   False   False   True\nEra 1:          True    False   False   False   True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar.IsLeapDay#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesJapaneseCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Creates a holder for the last day of the second month (February).\n      Dim iLastDay As Integer\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in the current era.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 1 To 5\n         iLastDay = myCal.GetDaysInMonth(y, 2, JapaneseCalendar.CurrentEra)\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapDay(y, 2, iLastDay, JapaneseCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in each of the eras.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 1 To 5\n            iLastDay = myCal.GetDaysInMonth(y, 2, myCal.Eras(i))\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapDay(y, 2, iLastDay, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesJapaneseCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            1       2       3       4       5\n\n&#39;CurrentEra:     False   False   False   True    False\n\n&#39;Era 4:          False   False   False   True    False\n\n&#39;Era 3:          False   False   True    False   False\n\n&#39;Era 2:          True    False   False   False   True\n\n&#39;Era 1:          True    False   False   False   True\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar.IsLeapDay#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Creates a holder for the last day of the second month (February)-&gt;\n   int iLastDay;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Checks five years in the current era.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n   {\n      iLastDay = myCal-&gt;GetDaysInMonth( y, 2, JapaneseCalendar::CurrentEra );\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapDay( y, 2, iLastDay, JapaneseCalendar::CurrentEra ) );\n\n   }\n   Console::WriteLine();\n   \n   // Checks five years in each of the eras.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 1; y &lt;= 5; y++ )\n      {\n         iLastDay = myCal-&gt;GetDaysInMonth( y, 2, myCal-&gt;Eras[ i ] );\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapDay( y, 2, iLastDay, myCal-&gt;Eras[ i ] ) );\n\n      }\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     False   False   False   True    False\nEra 4:          False   False   False   True    False\nEra 3:          False   False   True    False   False\nEra 2:          True    False   False   False   True\nEra 1:          True    False   False   False   True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_IsLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 12 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This method always returns <code>false</code>, unless overridden by a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  </p>\n<p> A leap month is an entire month that occurs only in a leap year. The Japanese calendar does not have any leap months.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls IsLeapMonth for all the months in five years in the current era.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar.IsLeapMonth#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Checks all the months in five years in the current era.\n   int iMonthsInYear;\n   for ( int y = 1; y &lt;= 5; y++ )\n   {\n      Console::Write( &quot; {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, y );\n      iMonthsInYear = myCal-&gt;GetMonthsInYear( y, JapaneseCalendar::CurrentEra );\n      for ( int m = 1; m &lt;= iMonthsInYear; m++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapMonth( y, m, JapaneseCalendar::CurrentEra ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\n1:              False   False   False   False   False   False   False   False   False   False   False   False\n2:              False   False   False   False   False   False   False   False   False   False   False   False\n3:              False   False   False   False   False   False   False   False   False   False   False   False\n4:              False   False   False   False   False   False   False   False   False   False   False   False\n5:              False   False   False   False   False   False   False   False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar.IsLeapMonth#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Checks all the months in five years in the current era.\n      int iMonthsInYear;\n      for ( int y = 1; y &lt;= 5; y++ )  {\n         Console.Write( &quot;{0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, y );\n         iMonthsInYear = myCal.GetMonthsInYear( y, JapaneseCalendar.CurrentEra );\n         for ( int m = 1; m &lt;= iMonthsInYear; m++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapMonth( y, m, JapaneseCalendar.CurrentEra ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n1:              False   False   False   False   False   False   False   False   False   False   False   False\n2:              False   False   False   False   False   False   False   False   False   False   False   False\n3:              False   False   False   False   False   False   False   False   False   False   False   False\n4:              False   False   False   False   False   False   False   False   False   False   False   False\n5:              False   False   False   False   False   False   False   False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar.IsLeapMonth#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesJapaneseCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Checks all the months in five years in the current era.\n      Dim iMonthsInYear As Integer\n      Dim y As Integer\n      For y = 1 To 5\n         Console.Write(&quot;{0}:&quot; + ControlChars.Tab, y)\n         iMonthsInYear = myCal.GetMonthsInYear(y, JapaneseCalendar.CurrentEra)\n         Dim m As Integer\n         For m = 1 To iMonthsInYear\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapMonth(y, m, JapaneseCalendar.CurrentEra))\n         Next m\n         Console.WriteLine()\n      Next y\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesJapaneseCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;1:              False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;2:              False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;3:              False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;4:              False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;5:              False   False   False   False   False   False   False   False   False   False   False   False\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_IsLeapYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_IsLeapYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified year in the specified era is a leap year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code>, if the specified year is a leap year; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Leap years in the Japanese calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls IsLeapYear for five years in each of the eras.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.JapaneseCalendar.IsLeapYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesJapaneseCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a JapaneseCalendar.\n      JapaneseCalendar myCal = new JapaneseCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Checks five years in the current era.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapYear( y, JapaneseCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Checks five years in each of the eras.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 1; y &lt;= 5; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     False   False   False   True    False\nEra 4:          False   False   False   True    False\nEra 3:          False   False   True    False   False\nEra 2:          True    False   False   False   True\nEra 1:          True    False   False   False   True\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.JapaneseCalendar.IsLeapYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a JapaneseCalendar.\n   JapaneseCalendar^ myCal = gcnew JapaneseCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Checks five years in the current era.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 1; y &lt;= 5; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapYear( y, JapaneseCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Checks five years in each of the eras.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 1; y &lt;= 5; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1       2       3       4       5\nCurrentEra:     False   False   False   True    False\nEra 4:          False   False   False   True    False\nEra 3:          False   False   True    False   False\nEra 2:          True    False   False   False   True\nEra 1:          True    False   False   False   True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.JapaneseCalendar.IsLeapYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesJapaneseCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a JapaneseCalendar.\n      Dim myCal As New JapaneseCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in the current era.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 1 To 5\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapYear(y, JapaneseCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in each of the eras.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 1 To 5\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesJapaneseCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            1       2       3       4       5\n\n&#39;CurrentEra:     False   False   False   True    False\n\n&#39;Era 4:          False   False   False   True    False\n\n&#39;Era 3:          False   False   True    False   False\n\n&#39;Era 2:          True    False   False   False   True\n\n&#39;Era 1:          True    False   False   False   True\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 12 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 31 that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hour</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 23 that represents the hour.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the minute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the second.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecond</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 999 that represents the millisecond.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>day</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>hour</code> is less than zero or greater than 23.  </p>\n<p> -or-  </p>\n<p> <code>minute</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>second</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>millisecond</code> is less than zero or greater than 999.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToDateTime method is useful because it can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_JapaneseCalendar_ToFourDigitYear_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_JapaneseCalendar_ToFourDigitYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToFourDigitYear(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified year to a four-digit year by using the <span class=\"xref\">stem.Globalization.JapaneseCalendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ToFourDigitYear (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer (usually two digits) that represents the year to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that contains the four-digit representation of <code>year</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ToFourDigitYear_\" data-linktype=\"relative-path\">ToFourDigitYear</a>.  </p>\n<p> Because the year in the Japanese calendar is typically less than four digits long, this implementation always returns the value of the <code>year</code> parameter.  </p>\n<p> ToFourDigitYear supports either a two-digit year or a four-digit year. However, a valid year is generally represented as two digits (less than 100). Passing a two-digit year value causes the method to convert the value to a four-digit value according to the <a class=\"xref\" href=\"system.globalization.japanesecalendar#System_Globalization_JapaneseCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> value representing the appropriate century. If the application supplies a four-digit value, or if it supplies zero or a negative value, ToFourDigitYear throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.JapaneseCalendar.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.JapaneseCalendar.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.AddMonths\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.AddYears\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.AlgorithmType\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.Eras\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetDayOfMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetDayOfWeek\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetDayOfYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetDaysInMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetDaysInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetMonthsInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetWeekOfYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.GetYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.IsLeapDay\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.IsLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.IsLeapYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.MaxSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.MinSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.ToFourDigitYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.JapaneseCalendar.TwoDigitYearMax\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"fa5957c9-35dc-a19e-9d64-cf72c8534c8a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the Japanese calendar.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.JapaneseCalendar\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.JapaneseCalendar.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.JapaneseCalendar.yml","open_to_public_contributors":true,"api_name":["System.Globalization.JapaneseCalendar","System.Globalization.JapaneseCalendar..ctor","System.Globalization.JapaneseCalendar.AddMonths","System.Globalization.JapaneseCalendar.AddYears","System.Globalization.JapaneseCalendar.AlgorithmType","System.Globalization.JapaneseCalendar.Eras","System.Globalization.JapaneseCalendar.GetDayOfMonth","System.Globalization.JapaneseCalendar.GetDayOfWeek","System.Globalization.JapaneseCalendar.GetDayOfYear","System.Globalization.JapaneseCalendar.GetDaysInMonth","System.Globalization.JapaneseCalendar.GetDaysInYear","System.Globalization.JapaneseCalendar.GetEra","System.Globalization.JapaneseCalendar.GetLeapMonth","System.Globalization.JapaneseCalendar.GetMonth","System.Globalization.JapaneseCalendar.GetMonthsInYear","System.Globalization.JapaneseCalendar.GetWeekOfYear","System.Globalization.JapaneseCalendar.GetYear","System.Globalization.JapaneseCalendar.IsLeapDay","System.Globalization.JapaneseCalendar.IsLeapMonth","System.Globalization.JapaneseCalendar.IsLeapYear","System.Globalization.JapaneseCalendar.MaxSupportedDateTime","System.Globalization.JapaneseCalendar.MinSupportedDateTime","System.Globalization.JapaneseCalendar.ToDateTime","System.Globalization.JapaneseCalendar.ToFourDigitYear","System.Globalization.JapaneseCalendar.TwoDigitYearMax"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.JapaneseCalendar","System::Globalization::JapaneseCalendar","System.Globalization.JapaneseCalendar.#ctor","System::Globalization::JapaneseCalendar::#ctor","System.Globalization.JapaneseCalendar.AddMonths","System::Globalization::JapaneseCalendar::AddMonths","System.Globalization.JapaneseCalendar.AddYears","System::Globalization::JapaneseCalendar::AddYears","System.Globalization.JapaneseCalendar.AlgorithmType","System::Globalization::JapaneseCalendar::AlgorithmType","System.Globalization.JapaneseCalendar.Eras","System::Globalization::JapaneseCalendar::Eras","System.Globalization.JapaneseCalendar.GetDayOfMonth","System::Globalization::JapaneseCalendar::GetDayOfMonth","System.Globalization.JapaneseCalendar.GetDayOfWeek","System::Globalization::JapaneseCalendar::GetDayOfWeek","System.Globalization.JapaneseCalendar.GetDayOfYear","System::Globalization::JapaneseCalendar::GetDayOfYear","System.Globalization.JapaneseCalendar.GetDaysInMonth","System::Globalization::JapaneseCalendar::GetDaysInMonth","System.Globalization.JapaneseCalendar.GetDaysInYear","System::Globalization::JapaneseCalendar::GetDaysInYear","System.Globalization.JapaneseCalendar.GetEra","System::Globalization::JapaneseCalendar::GetEra","System.Globalization.JapaneseCalendar.GetLeapMonth","System::Globalization::JapaneseCalendar::GetLeapMonth","System.Globalization.JapaneseCalendar.GetMonth","System::Globalization::JapaneseCalendar::GetMonth","System.Globalization.JapaneseCalendar.GetMonthsInYear","System::Globalization::JapaneseCalendar::GetMonthsInYear","System.Globalization.JapaneseCalendar.GetWeekOfYear","System::Globalization::JapaneseCalendar::GetWeekOfYear","System.Globalization.JapaneseCalendar.GetYear","System::Globalization::JapaneseCalendar::GetYear","System.Globalization.JapaneseCalendar.IsLeapDay","System::Globalization::JapaneseCalendar::IsLeapDay","System.Globalization.JapaneseCalendar.IsLeapMonth","System::Globalization::JapaneseCalendar::IsLeapMonth","System.Globalization.JapaneseCalendar.IsLeapYear","System::Globalization::JapaneseCalendar::IsLeapYear","System.Globalization.JapaneseCalendar.MaxSupportedDateTime","System::Globalization::JapaneseCalendar::MaxSupportedDateTime","System.Globalization.JapaneseCalendar.MinSupportedDateTime","System::Globalization::JapaneseCalendar::MinSupportedDateTime","System.Globalization.JapaneseCalendar.ToDateTime","System::Globalization::JapaneseCalendar::ToDateTime","System.Globalization.JapaneseCalendar.ToFourDigitYear","System::Globalization::JapaneseCalendar::ToFourDigitYear","System.Globalization.JapaneseCalendar.TwoDigitYearMax","System::Globalization::JapaneseCalendar::TwoDigitYearMax"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"fa5957c9-35dc-a19e-9d64-cf72c8534c8a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/JapaneseCalendar.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"JapaneseCalendar class | Microsoft Docs","_op_ogTitle":"JapaneseCalendar class","description":"Represents the Japanese calendar.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.JapaneseCalendar","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.japanesecalendar","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.japanesecalendar","fileRelativePath":"System.Globalization.JapaneseCalendar.html"},"themesRelativePathToOutputRoot":"_themes/"}