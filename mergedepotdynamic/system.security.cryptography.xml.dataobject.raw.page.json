{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_Xml_DataObject\">\r\n      <span class=\"lang-csharp\">DataObject</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the object element of an XML signature that holds data to be signed.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class DataObject</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataObject</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the DataObject class to store information or metadata directly in an XML signature.  For example, you can store the signature generation date or the signer&#39;s identity.  The DataObject class may or may not be covered by the XML signature.  </p>\n<p> The class corresponds to the <code>&lt;Object&gt;</code> element in the World Wide Web Consortium (W3C) specification for XML Signatures. For more information about the W3C specification, see <a href=\"http://www.w3.org/TR/xmldsig-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmldsig-core/</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_DataObject__ctor\" data-linktype=\"self-bookmark\">DataObject()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_DataObject__ctor_System_String_System_String_System_String_System_Xml_XmlElement_\" data-linktype=\"self-bookmark\">DataObject(String,String,String,XmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> class with the specified identification, MIME type, encoding, and data.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_DataObject_Data\" data-linktype=\"self-bookmark\">Data</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the data value of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_DataObject_Encoding\" data-linktype=\"self-bookmark\">Encoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the encoding of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_DataObject_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the identification of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_DataObject_MimeType\" data-linktype=\"self-bookmark\">MimeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the MIME type of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_DataObject_GetXml\" data-linktype=\"self-bookmark\">GetXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_DataObject_LoadXml_System_Xml_XmlElement_\" data-linktype=\"self-bookmark\">LoadXml(XmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> state from an XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_DataObject__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_DataObject__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataObject()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataObject ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> class is used with XML signatures. After you have initialized the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a>, you can assign the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject#System_Security_Cryptography_Xml_DataObject_Data_\" data-linktype=\"relative-path\">Data</a> and <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject#System_Security_Cryptography_Xml_DataObject_Id_\" data-linktype=\"relative-path\">Id</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to generate an enveloping XML signature.  </p>\n<pre><code class=\"lang-cs\" name=\"XMLDSIG Signing#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Xml;\n\n\npublic class XMLdsigsample1 {\n\nstatic void Main(String[] args)\n{\n     // Create example data to sign.\n     XmlDocument document = new XmlDocument();\n     XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n     node.InnerText = &quot;This is some text&quot;;\n     document.AppendChild(node);\n     Console.Error.WriteLine(&quot;Data to sign:<br>&quot; + document.OuterXml + &quot;<br>&quot;);\n \n     // Create the SignedXml message.\n     SignedXml signedXml = new SignedXml();\n     RSA key = RSA.Create();\n     signedXml.SigningKey = key;\n \n     // Create a data object to hold the data to sign.\n     DataObject dataObject = new DataObject();\n     dataObject.Data = document.ChildNodes;\n     dataObject.Id = &quot;MyObjectId&quot;;\n\n     // Add the data object to the signature.\n     signedXml.AddObject(dataObject);\n \n     // Create a reference to be able to package everything into the\n     // message.\n     Reference reference = new Reference();\n     reference.Uri = &quot;#MyObjectId&quot;;\n \n     // Add it to the message.\n     signedXml.AddReference(reference);\n\n     // Add a KeyInfo.\n     KeyInfo keyInfo = new KeyInfo();\n     keyInfo.AddClause(new RSAKeyValue(key));\n     signedXml.KeyInfo = keyInfo;\n\n     // Compute the signature.\n     signedXml.ComputeSignature();\n\n     // Get the XML representation of the signature.\n     XmlElement xmlSignature = signedXml.GetXml();\n     Console.WriteLine(xmlSignature.OuterXml);\n}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG Signing#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Xml\n\n _\n\n\nPublic Class XMLdsigsample1\n\n   Shared Sub Main(args() As [String])\n      &#39; Create example data to sign.\n      Dim document As New XmlDocument()\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      node.InnerText = &quot;This is some text&quot;\n      document.AppendChild(node)\n      Console.Error.WriteLine(&quot;Data to sign:&quot;)\n      Console.Error.WriteLine()\n      Console.Error.WriteLine(document.OuterXml)\n      Console.Error.WriteLine()\n      \n      &#39; Create the SignedXml message.\n      Dim signedXml As New SignedXml()\n      Dim key As RSA = RSA.Create()\n      signedXml.SigningKey = key\n      \n      &#39; Create a data object to hold the data to sign.\n      Dim dataObject As New DataObject()\n      dataObject.Data = document.ChildNodes\n      dataObject.Id = &quot;MyObjectId&quot;\n      \n      &#39; Add the data object to the signature.\n      signedXml.AddObject(dataObject)\n      \n      &#39; Create a reference to be able to package everything into the\n      &#39; message.\n      Dim reference As New Reference()\n      reference.Uri = &quot;#MyObjectId&quot;\n      \n      &#39; Add it to the message.\n      signedXml.AddReference(reference)\n      \n      &#39; Add a KeyInfo.\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(key))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature.\n      Dim xmlSignature As XmlElement = signedXml.GetXml()\n      Console.WriteLine(xmlSignature.OuterXml)\n   End Sub &#39;Main\nEnd Class &#39;XMLdsigsample1 \n</code></pre><pre><code class=\"lang-cpp\" name=\"XMLDSIG Signing#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create example data to sign.\n   XmlDocument^ document = gcnew XmlDocument;\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   node-&gt;InnerText = &quot;This is some text&quot;;\n   document-&gt;AppendChild( node );\n   Console::Error-&gt;WriteLine( &quot;Data to sign:<br>{0}<br>&quot;, document-&gt;OuterXml );\n   \n   // Create the SignedXml message.\n   SignedXml^ signedXml = gcnew SignedXml;\n   RSA^ key = RSA::Create();\n   signedXml-&gt;SigningKey = key;\n   \n   // Create a data object to hold the data to sign.\n   DataObject^ dataObject = gcnew DataObject;\n   dataObject-&gt;Data = document-&gt;ChildNodes;\n   dataObject-&gt;Id = &quot;MyObjectId&quot;;\n   \n   // Add the data object to the signature.\n   signedXml-&gt;AddObject( dataObject );\n   \n   // Create a reference to be able to package everything into the\n   // message.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;#MyObjectId&quot;;\n   \n   // Add it to the message.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add a KeyInfo.\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( key ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature.\n   XmlElement^ xmlSignature = signedXml-&gt;GetXml();\n   Console::WriteLine( xmlSignature-&gt;OuterXml );\n}\n</code></pre><p> The following code example demonstrates how to check an XML signature.  </p>\n<pre><code class=\"lang-cs\" name=\"XMLDSIG Verification#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.IO;\nusing System.Xml;\n\npublic class Verify {\n\n    public static void Main(String[] args) \n    {\n\n        Console.WriteLine(&quot;Verifying &quot; + args[0] + &quot;...&quot;);\n\n    \t// Create a SignedXml.\n        SignedXml signedXml = new SignedXml();\n\n        // Load the XML.\n        XmlDocument xmlDocument = new XmlDocument();\n        xmlDocument.PreserveWhitespace = true;\n        xmlDocument.Load(new XmlTextReader(args[0]));\n\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        if (signedXml.CheckSignature()) {\n            Console.WriteLine(&quot;Signature check OK&quot;);\n        } else {\n            Console.WriteLine(&quot;Signature check FAILED&quot;);\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG Verification#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.IO\nImports System.Xml\n\n _\n\nPublic Class Verify\n   \n   Public Shared Sub Main(args() As [String])\n      \n      Console.WriteLine((&quot;Verifying &quot; + args(0) + &quot;...&quot;))\n      \n      &#39; Create a SignedXml.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Load the XML.\n      Dim xmlDocument As New XmlDocument()\n      xmlDocument.PreserveWhitespace = True\n      xmlDocument.Load(New XmlTextReader(args(0)))\n      \n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      If signedXml.CheckSignature() Then\n         Console.WriteLine(&quot;Signature check OK&quot;)\n      Else\n         Console.WriteLine(&quot;Signature check FAILED&quot;)\n      End If\n   End Sub &#39;Main \nEnd Class &#39;Verify\n</code></pre><pre><code class=\"lang-cpp\" name=\"XMLDSIG Verification#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   array&lt;String^&gt;^args = System::Environment::GetCommandLineArgs();\n   Console::WriteLine( &quot;Verifying {0}...&quot;, args[ 1 ] );\n\n   // Create a SignedXml.\n   SignedXml^ signedXml = gcnew SignedXml;\n\n   // Load the XML.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   xmlDocument-&gt;PreserveWhitespace = true;\n   xmlDocument-&gt;Load( gcnew XmlTextReader( args[ 1 ] ) );\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList[ 0 ]) );\n   if ( signedXml-&gt;CheckSignature() )\n   {\n      Console::WriteLine( &quot;Signature check OK&quot; );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Signature check FAILED&quot; );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_DataObject__ctor_System_String_System_String_System_String_System_Xml_XmlElement_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_DataObject__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataObject(String,String,String,XmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> class with the specified identification, MIME type, encoding, and data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataObject (string id, string mimeType, string encoding, System.Xml.XmlElement data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The identification to initialize the new instance of <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> with.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mimeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The MIME type of the data used to initialize the new instance of <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding of the data used to initialize the new instance of <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to initialize the new instance of <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> with.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>data</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> class is used with XML signatures. The <code>id</code> parameter refers to the name of the element that contains the data to be used. The <code>data</code> parameter refers to the XML node list that contains the <code>id</code> parameter element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_DataObject_Data\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_DataObject_Data_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Data</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the data value of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlNodeList Data { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></div>\r\n                  </div>\r\n                  <p>The data of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value used to set the property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is the XML node list that contains the element described in the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject#System_Security_Cryptography_Xml_DataObject_Id_\" data-linktype=\"relative-path\">Id</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to generate an enveloping XML signature.  </p>\n<pre><code class=\"lang-cs\" name=\"XMLDSIG Signing#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Xml;\n\n\npublic class XMLdsigsample1 {\n\nstatic void Main(String[] args)\n{\n     // Create example data to sign.\n     XmlDocument document = new XmlDocument();\n     XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n     node.InnerText = &quot;This is some text&quot;;\n     document.AppendChild(node);\n     Console.Error.WriteLine(&quot;Data to sign:<br>&quot; + document.OuterXml + &quot;<br>&quot;);\n \n     // Create the SignedXml message.\n     SignedXml signedXml = new SignedXml();\n     RSA key = RSA.Create();\n     signedXml.SigningKey = key;\n \n     // Create a data object to hold the data to sign.\n     DataObject dataObject = new DataObject();\n     dataObject.Data = document.ChildNodes;\n     dataObject.Id = &quot;MyObjectId&quot;;\n\n     // Add the data object to the signature.\n     signedXml.AddObject(dataObject);\n \n     // Create a reference to be able to package everything into the\n     // message.\n     Reference reference = new Reference();\n     reference.Uri = &quot;#MyObjectId&quot;;\n \n     // Add it to the message.\n     signedXml.AddReference(reference);\n\n     // Add a KeyInfo.\n     KeyInfo keyInfo = new KeyInfo();\n     keyInfo.AddClause(new RSAKeyValue(key));\n     signedXml.KeyInfo = keyInfo;\n\n     // Compute the signature.\n     signedXml.ComputeSignature();\n\n     // Get the XML representation of the signature.\n     XmlElement xmlSignature = signedXml.GetXml();\n     Console.WriteLine(xmlSignature.OuterXml);\n}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG Signing#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Xml\n\n _\n\n\nPublic Class XMLdsigsample1\n\n   Shared Sub Main(args() As [String])\n      &#39; Create example data to sign.\n      Dim document As New XmlDocument()\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      node.InnerText = &quot;This is some text&quot;\n      document.AppendChild(node)\n      Console.Error.WriteLine(&quot;Data to sign:&quot;)\n      Console.Error.WriteLine()\n      Console.Error.WriteLine(document.OuterXml)\n      Console.Error.WriteLine()\n      \n      &#39; Create the SignedXml message.\n      Dim signedXml As New SignedXml()\n      Dim key As RSA = RSA.Create()\n      signedXml.SigningKey = key\n      \n      &#39; Create a data object to hold the data to sign.\n      Dim dataObject As New DataObject()\n      dataObject.Data = document.ChildNodes\n      dataObject.Id = &quot;MyObjectId&quot;\n      \n      &#39; Add the data object to the signature.\n      signedXml.AddObject(dataObject)\n      \n      &#39; Create a reference to be able to package everything into the\n      &#39; message.\n      Dim reference As New Reference()\n      reference.Uri = &quot;#MyObjectId&quot;\n      \n      &#39; Add it to the message.\n      signedXml.AddReference(reference)\n      \n      &#39; Add a KeyInfo.\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(key))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature.\n      Dim xmlSignature As XmlElement = signedXml.GetXml()\n      Console.WriteLine(xmlSignature.OuterXml)\n   End Sub &#39;Main\nEnd Class &#39;XMLdsigsample1 \n</code></pre><pre><code class=\"lang-cpp\" name=\"XMLDSIG Signing#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create example data to sign.\n   XmlDocument^ document = gcnew XmlDocument;\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   node-&gt;InnerText = &quot;This is some text&quot;;\n   document-&gt;AppendChild( node );\n   Console::Error-&gt;WriteLine( &quot;Data to sign:<br>{0}<br>&quot;, document-&gt;OuterXml );\n   \n   // Create the SignedXml message.\n   SignedXml^ signedXml = gcnew SignedXml;\n   RSA^ key = RSA::Create();\n   signedXml-&gt;SigningKey = key;\n   \n   // Create a data object to hold the data to sign.\n   DataObject^ dataObject = gcnew DataObject;\n   dataObject-&gt;Data = document-&gt;ChildNodes;\n   dataObject-&gt;Id = &quot;MyObjectId&quot;;\n   \n   // Add the data object to the signature.\n   signedXml-&gt;AddObject( dataObject );\n   \n   // Create a reference to be able to package everything into the\n   // message.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;#MyObjectId&quot;;\n   \n   // Add it to the message.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add a KeyInfo.\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( key ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature.\n   XmlElement^ xmlSignature = signedXml-&gt;GetXml();\n   Console::WriteLine( xmlSignature-&gt;OuterXml );\n}\n</code></pre><p> The following code example demonstrates how to check an XML signature.  </p>\n<pre><code class=\"lang-cs\" name=\"XMLDSIG Verification#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.IO;\nusing System.Xml;\n\npublic class Verify {\n\n    public static void Main(String[] args) \n    {\n\n        Console.WriteLine(&quot;Verifying &quot; + args[0] + &quot;...&quot;);\n\n    \t// Create a SignedXml.\n        SignedXml signedXml = new SignedXml();\n\n        // Load the XML.\n        XmlDocument xmlDocument = new XmlDocument();\n        xmlDocument.PreserveWhitespace = true;\n        xmlDocument.Load(new XmlTextReader(args[0]));\n\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        if (signedXml.CheckSignature()) {\n            Console.WriteLine(&quot;Signature check OK&quot;);\n        } else {\n            Console.WriteLine(&quot;Signature check FAILED&quot;);\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG Verification#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.IO\nImports System.Xml\n\n _\n\nPublic Class Verify\n   \n   Public Shared Sub Main(args() As [String])\n      \n      Console.WriteLine((&quot;Verifying &quot; + args(0) + &quot;...&quot;))\n      \n      &#39; Create a SignedXml.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Load the XML.\n      Dim xmlDocument As New XmlDocument()\n      xmlDocument.PreserveWhitespace = True\n      xmlDocument.Load(New XmlTextReader(args(0)))\n      \n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      If signedXml.CheckSignature() Then\n         Console.WriteLine(&quot;Signature check OK&quot;)\n      Else\n         Console.WriteLine(&quot;Signature check FAILED&quot;)\n      End If\n   End Sub &#39;Main \nEnd Class &#39;Verify\n</code></pre><pre><code class=\"lang-cpp\" name=\"XMLDSIG Verification#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   array&lt;String^&gt;^args = System::Environment::GetCommandLineArgs();\n   Console::WriteLine( &quot;Verifying {0}...&quot;, args[ 1 ] );\n\n   // Create a SignedXml.\n   SignedXml^ signedXml = gcnew SignedXml;\n\n   // Load the XML.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   xmlDocument-&gt;PreserveWhitespace = true;\n   xmlDocument-&gt;Load( gcnew XmlTextReader( args[ 1 ] ) );\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList[ 0 ]) );\n   if ( signedXml-&gt;CheckSignature() )\n   {\n      Console::WriteLine( &quot;Signature check OK&quot; );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Signature check FAILED&quot; );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_DataObject_Encoding\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_DataObject_Encoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the encoding of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Encoding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The type of encoding of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value of this property is <code>null</code>, which indicates that no encoding is present.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_DataObject_Id\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_DataObject_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the identification of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Id { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the element that contains data to be used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The identification is used to reference the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> from another location. The default value of this property is <code>null</code>, which implies that no identification is present. This property is commonly referenced by the <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_SignedInfo_\" data-linktype=\"relative-path\">SignedInfo</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to generate an enveloping XML signature.  </p>\n<pre><code class=\"lang-cs\" name=\"XMLDSIG Signing#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Xml;\n\n\npublic class XMLdsigsample1 {\n\nstatic void Main(String[] args)\n{\n     // Create example data to sign.\n     XmlDocument document = new XmlDocument();\n     XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n     node.InnerText = &quot;This is some text&quot;;\n     document.AppendChild(node);\n     Console.Error.WriteLine(&quot;Data to sign:<br>&quot; + document.OuterXml + &quot;<br>&quot;);\n \n     // Create the SignedXml message.\n     SignedXml signedXml = new SignedXml();\n     RSA key = RSA.Create();\n     signedXml.SigningKey = key;\n \n     // Create a data object to hold the data to sign.\n     DataObject dataObject = new DataObject();\n     dataObject.Data = document.ChildNodes;\n     dataObject.Id = &quot;MyObjectId&quot;;\n\n     // Add the data object to the signature.\n     signedXml.AddObject(dataObject);\n \n     // Create a reference to be able to package everything into the\n     // message.\n     Reference reference = new Reference();\n     reference.Uri = &quot;#MyObjectId&quot;;\n \n     // Add it to the message.\n     signedXml.AddReference(reference);\n\n     // Add a KeyInfo.\n     KeyInfo keyInfo = new KeyInfo();\n     keyInfo.AddClause(new RSAKeyValue(key));\n     signedXml.KeyInfo = keyInfo;\n\n     // Compute the signature.\n     signedXml.ComputeSignature();\n\n     // Get the XML representation of the signature.\n     XmlElement xmlSignature = signedXml.GetXml();\n     Console.WriteLine(xmlSignature.OuterXml);\n}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG Signing#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Xml\n\n _\n\n\nPublic Class XMLdsigsample1\n\n   Shared Sub Main(args() As [String])\n      &#39; Create example data to sign.\n      Dim document As New XmlDocument()\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      node.InnerText = &quot;This is some text&quot;\n      document.AppendChild(node)\n      Console.Error.WriteLine(&quot;Data to sign:&quot;)\n      Console.Error.WriteLine()\n      Console.Error.WriteLine(document.OuterXml)\n      Console.Error.WriteLine()\n      \n      &#39; Create the SignedXml message.\n      Dim signedXml As New SignedXml()\n      Dim key As RSA = RSA.Create()\n      signedXml.SigningKey = key\n      \n      &#39; Create a data object to hold the data to sign.\n      Dim dataObject As New DataObject()\n      dataObject.Data = document.ChildNodes\n      dataObject.Id = &quot;MyObjectId&quot;\n      \n      &#39; Add the data object to the signature.\n      signedXml.AddObject(dataObject)\n      \n      &#39; Create a reference to be able to package everything into the\n      &#39; message.\n      Dim reference As New Reference()\n      reference.Uri = &quot;#MyObjectId&quot;\n      \n      &#39; Add it to the message.\n      signedXml.AddReference(reference)\n      \n      &#39; Add a KeyInfo.\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(key))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature.\n      Dim xmlSignature As XmlElement = signedXml.GetXml()\n      Console.WriteLine(xmlSignature.OuterXml)\n   End Sub &#39;Main\nEnd Class &#39;XMLdsigsample1 \n</code></pre><pre><code class=\"lang-cpp\" name=\"XMLDSIG Signing#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create example data to sign.\n   XmlDocument^ document = gcnew XmlDocument;\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   node-&gt;InnerText = &quot;This is some text&quot;;\n   document-&gt;AppendChild( node );\n   Console::Error-&gt;WriteLine( &quot;Data to sign:<br>{0}<br>&quot;, document-&gt;OuterXml );\n   \n   // Create the SignedXml message.\n   SignedXml^ signedXml = gcnew SignedXml;\n   RSA^ key = RSA::Create();\n   signedXml-&gt;SigningKey = key;\n   \n   // Create a data object to hold the data to sign.\n   DataObject^ dataObject = gcnew DataObject;\n   dataObject-&gt;Data = document-&gt;ChildNodes;\n   dataObject-&gt;Id = &quot;MyObjectId&quot;;\n   \n   // Add the data object to the signature.\n   signedXml-&gt;AddObject( dataObject );\n   \n   // Create a reference to be able to package everything into the\n   // message.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;#MyObjectId&quot;;\n   \n   // Add it to the message.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add a KeyInfo.\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( key ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature.\n   XmlElement^ xmlSignature = signedXml-&gt;GetXml();\n   Console::WriteLine( xmlSignature-&gt;OuterXml );\n}\n</code></pre><p> The following code example demonstrates how to check an XML signature.  </p>\n<pre><code class=\"lang-cs\" name=\"XMLDSIG Verification#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.IO;\nusing System.Xml;\n\npublic class Verify {\n\n    public static void Main(String[] args) \n    {\n\n        Console.WriteLine(&quot;Verifying &quot; + args[0] + &quot;...&quot;);\n\n    \t// Create a SignedXml.\n        SignedXml signedXml = new SignedXml();\n\n        // Load the XML.\n        XmlDocument xmlDocument = new XmlDocument();\n        xmlDocument.PreserveWhitespace = true;\n        xmlDocument.Load(new XmlTextReader(args[0]));\n\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        if (signedXml.CheckSignature()) {\n            Console.WriteLine(&quot;Signature check OK&quot;);\n        } else {\n            Console.WriteLine(&quot;Signature check FAILED&quot;);\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG Verification#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.IO\nImports System.Xml\n\n _\n\nPublic Class Verify\n   \n   Public Shared Sub Main(args() As [String])\n      \n      Console.WriteLine((&quot;Verifying &quot; + args(0) + &quot;...&quot;))\n      \n      &#39; Create a SignedXml.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Load the XML.\n      Dim xmlDocument As New XmlDocument()\n      xmlDocument.PreserveWhitespace = True\n      xmlDocument.Load(New XmlTextReader(args(0)))\n      \n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      If signedXml.CheckSignature() Then\n         Console.WriteLine(&quot;Signature check OK&quot;)\n      Else\n         Console.WriteLine(&quot;Signature check FAILED&quot;)\n      End If\n   End Sub &#39;Main \nEnd Class &#39;Verify\n</code></pre><pre><code class=\"lang-cpp\" name=\"XMLDSIG Verification#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   array&lt;String^&gt;^args = System::Environment::GetCommandLineArgs();\n   Console::WriteLine( &quot;Verifying {0}...&quot;, args[ 1 ] );\n\n   // Create a SignedXml.\n   SignedXml^ signedXml = gcnew SignedXml;\n\n   // Load the XML.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   xmlDocument-&gt;PreserveWhitespace = true;\n   xmlDocument-&gt;Load( gcnew XmlTextReader( args[ 1 ] ) );\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList[ 0 ]) );\n   if ( signedXml-&gt;CheckSignature() )\n   {\n      Console::WriteLine( &quot;Signature check OK&quot; );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Signature check FAILED&quot; );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_DataObject_MimeType\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_DataObject_MimeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MimeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the MIME type of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MimeType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The MIME type of the current <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MIME type describes the data within the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_DataObject_GetXml\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_DataObject_GetXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetXml()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlElement GetXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>The XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to output XML for a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_DataObject_LoadXml_System_Xml_XmlElement_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_DataObject_LoadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadXml(XmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Loads a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> state from an XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void LoadXml (System.Xml.XmlElement value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML element to load the <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> state from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value from the XML element is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to add additional XML elements to a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.DataObject.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.DataObject.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DataObject\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DataObject..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DataObject.Data\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DataObject.Encoding\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DataObject.GetXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DataObject.Id\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DataObject.LoadXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.DataObject.MimeType\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bb10068b-c4ed-0dac-b28f-5dece204994b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the object element of an XML signature that holds data to be signed.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography.Xml/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.DataObject\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.DataObject.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.DataObject.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.Xml.DataObject","System.Security.Cryptography.Xml.DataObject..ctor","System.Security.Cryptography.Xml.DataObject.Data","System.Security.Cryptography.Xml.DataObject.Encoding","System.Security.Cryptography.Xml.DataObject.GetXml","System.Security.Cryptography.Xml.DataObject.Id","System.Security.Cryptography.Xml.DataObject.LoadXml","System.Security.Cryptography.Xml.DataObject.MimeType"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.DataObject","System::Security::Cryptography::Xml::DataObject","System.Security.Cryptography.Xml.DataObject.#ctor","System::Security::Cryptography::Xml::DataObject::#ctor","System.Security.Cryptography.Xml.DataObject.Data","System::Security::Cryptography::Xml::DataObject::Data","System.Security.Cryptography.Xml.DataObject.Encoding","System::Security::Cryptography::Xml::DataObject::Encoding","System.Security.Cryptography.Xml.DataObject.GetXml","System::Security::Cryptography::Xml::DataObject::GetXml","System.Security.Cryptography.Xml.DataObject.Id","System::Security::Cryptography::Xml::DataObject::Id","System.Security.Cryptography.Xml.DataObject.LoadXml","System::Security::Cryptography::Xml::DataObject::LoadXml","System.Security.Cryptography.Xml.DataObject.MimeType","System::Security::Cryptography::Xml::DataObject::MimeType"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bb10068b-c4ed-0dac-b28f-5dece204994b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography.Xml/DataObject.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataObject class | Microsoft Docs","_op_ogTitle":"DataObject class","description":"Represents the object element of an XML signature that holds data to be signed.\n","toc_asset_id":"_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.DataObject","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.dataobject","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.dataobject","fileRelativePath":"System.Security.Cryptography.Xml.DataObject.html"},"themesRelativePathToOutputRoot":"_themes/"}