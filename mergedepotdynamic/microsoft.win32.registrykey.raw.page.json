{"content":"    \r\n    <h1 id=\"Microsoft_Win32_RegistryKey\">\r\n      <span class=\"lang-csharp\">RegistryKey</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a key-level node in the Windows registry. This class is a registry encapsulation.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class RegistryKey : MarshalByRefObject, IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RegistryKey</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To get an instance of RegistryKey, use one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.  </p>\n<p> The registry acts as a central repository of information for the operating system and the applications on a computer. The registry is organized in a hierarchical format, based on a logical ordering of the elements stored within it (please see <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> for the base-level items in this hierarchy). When storing information in the registry, select the appropriate location based on the type of information being stored. Be sure to avoid destroying information created by other applications, because this can cause those applications to exhibit unexpected behavior, and can also have an adverse effect upon your own application.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> Registry keys are the base unit of organization in the registry, and can be compared to folders in File Explorer. A particular key can have subkeys, just as a folder can have subfolders. Each key can be deleted, as long as the user has the appropriate permissions to do so, and the key is not a base key or at the level directly under the base keys. Each key can also have multiple values associated with it (a value can be compared to a file), which are used to store the information â€” for example, information about an application installed on the computer. Each value holds one particular piece of information, which can be retrieved or updated when required. For instance, you can create a RegistryKey for your company, under the key HKEY_LOCAL_MACHINE\\Software, and then a subkey for each application that your company creates. Each subkey holds the information specific to that application, such as color settings, screen location and size, or recognized file extensions.  </p>\n<p> Note that information stored in the registry is available to other applications and users, and therefore should not be used to store security data or critical application information.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not expose RegistryKey objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.  </p>\n</div>\n<p> Starting in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the length of a registry key is no longer limited to 255 characters.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_Handle\" data-linktype=\"self-bookmark\">Handle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"microsoft.win32.safehandles.saferegistryhandle\" data-linktype=\"relative-path\">SafeRegistryHandle</a> object that represents the registry key that the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object encapsulates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the name of the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_SubKeyCount\" data-linktype=\"self-bookmark\">SubKeyCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the count of subkeys of the current key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_ValueCount\" data-linktype=\"self-bookmark\">ValueCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the count of values in the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_View\" data-linktype=\"self-bookmark\">View</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the view that was used to create the registry key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the key and flushes it to disk if its contents have been modified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_CreateSubKey_System_String_\" data-linktype=\"self-bookmark\">CreateSubKey(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new subkey or opens an existing subkey for write access.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_CreateSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_\" data-linktype=\"self-bookmark\">CreateSubKey(String,RegistryKeyPermissionCheck)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new subkey or opens an existing subkey for write access, using the specified permission check option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_CreateSubKey_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">CreateSubKey(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new subkey or opens an existing subkey with the specified access.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v46-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_CreateSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_Microsoft_Win32_RegistryOptions_\" data-linktype=\"self-bookmark\">CreateSubKey(String,RegistryKeyPermissionCheck,RegistryOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a subkey or opens a subkey for write access, using the specified permission check and registry options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_CreateSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_System_Security_AccessControl_RegistrySecurity_\" data-linktype=\"self-bookmark\">CreateSubKey(String,RegistryKeyPermissionCheck,RegistrySecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new subkey or opens an existing subkey for write access, using the specified permission check option and registry security.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_CreateSubKey_System_String_System_Boolean_Microsoft_Win32_RegistryOptions_\" data-linktype=\"self-bookmark\">CreateSubKey(String,Boolean,RegistryOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new subkey or opens an existing subkey with the specified access.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v46-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_CreateSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_Microsoft_Win32_RegistryOptions_System_Security_AccessControl_RegistrySecurity_\" data-linktype=\"self-bookmark\">CreateSubKey(String,RegistryKeyPermissionCheck,RegistryOptions,RegistrySecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a subkey or opens a subkey for write access, using the specified permission check option, registry option, and registry security.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_DeleteSubKey_System_String_\" data-linktype=\"self-bookmark\">DeleteSubKey(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the specified subkey.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_DeleteSubKey_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">DeleteSubKey(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the specified subkey, and specifies whether an exception is raised if the subkey is not found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_DeleteSubKeyTree_System_String_\" data-linktype=\"self-bookmark\">DeleteSubKeyTree(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes a subkey and any child subkeys recursively.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_DeleteSubKeyTree_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">DeleteSubKeyTree(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the specified subkey and any child subkeys recursively, and specifies whether an exception is raised if the subkey is not found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_DeleteValue_System_String_\" data-linktype=\"self-bookmark\">DeleteValue(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the specified value from this key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_DeleteValue_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">DeleteValue(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the specified value from this key, and specifies whether an exception is raised if the value is not found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes all the attributes of the specified open registry key into the registry.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_FromHandle_Microsoft_Win32_SafeHandles_SafeRegistryHandle_\" data-linktype=\"self-bookmark\">FromHandle(SafeRegistryHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a registry key from a specified handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_FromHandle_Microsoft_Win32_SafeHandles_SafeRegistryHandle_Microsoft_Win32_RegistryView_\" data-linktype=\"self-bookmark\">FromHandle(SafeRegistryHandle,RegistryView)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a registry key from a specified handle and registry view setting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_GetAccessControl\" data-linktype=\"self-bookmark\">GetAccessControl()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the access control security for the current registry key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_GetAccessControl_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"self-bookmark\">GetAccessControl(AccessControlSections)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified sections of the access control security for the current registry key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_GetSubKeyNames\" data-linktype=\"self-bookmark\">GetSubKeyNames()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of strings that contains all the subkey names.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_GetValue_System_String_\" data-linktype=\"self-bookmark\">GetValue(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the value associated with the specified name. Returns <code>null</code> if the name/value pair does not exist in the registry.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_GetValue_System_String_System_Object_\" data-linktype=\"self-bookmark\">GetValue(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the value associated with the specified name. If the name is not found, returns the default value that you provide.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_GetValue_System_String_System_Object_Microsoft_Win32_RegistryValueOptions_\" data-linktype=\"self-bookmark\">GetValue(String,Object,RegistryValueOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the value associated with the specified name and retrieval options. If the name is not found, returns the default value that you provide.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_GetValueKind_System_String_\" data-linktype=\"self-bookmark\">GetValueKind(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the registry data type of the value associated with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_GetValueNames\" data-linktype=\"self-bookmark\">GetValueNames()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of strings that contains all the value names associated with this key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_OpenBaseKey_Microsoft_Win32_RegistryHive_Microsoft_Win32_RegistryView_\" data-linktype=\"self-bookmark\">OpenBaseKey(RegistryHive,RegistryView)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a new <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that represents the requested key on the local machine with the specified view.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_OpenRemoteBaseKey_Microsoft_Win32_RegistryHive_System_String_\" data-linktype=\"self-bookmark\">OpenRemoteBaseKey(RegistryHive,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a new <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that represents the requested key on a remote machine.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_OpenRemoteBaseKey_Microsoft_Win32_RegistryHive_System_String_Microsoft_Win32_RegistryView_\" data-linktype=\"self-bookmark\">OpenRemoteBaseKey(RegistryHive,String,RegistryView)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a new registry key that represents the requested key on a remote machine with the specified view.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_OpenSubKey_System_String_\" data-linktype=\"self-bookmark\">OpenSubKey(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a subkey as read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_OpenSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_\" data-linktype=\"self-bookmark\">OpenSubKey(String,RegistryKeyPermissionCheck)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the specified subkey for read or read/write access.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_OpenSubKey_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">OpenSubKey(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a specified subkey, and specifies whether write access is to be applied to the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_OpenSubKey_System_String_System_Security_AccessControl_RegistryRights_\" data-linktype=\"self-bookmark\">OpenSubKey(String,RegistryRights)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a subkey with the specified name and .  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-2015-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_OpenSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_System_Security_AccessControl_RegistryRights_\" data-linktype=\"self-bookmark\">OpenSubKey(String,RegistryKeyPermissionCheck,RegistryRights)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the specified subkey for read or read/write access, requesting the specified access rights.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_SetAccessControl_System_Security_AccessControl_RegistrySecurity_\" data-linktype=\"self-bookmark\">SetAccessControl(RegistrySecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies Windows access control security to an existing registry key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_SetValue_System_String_System_Object_\" data-linktype=\"self-bookmark\">SetValue(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the specified name/value pair.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_SetValue_System_String_System_Object_Microsoft_Win32_RegistryValueKind_\" data-linktype=\"self-bookmark\">SetValue(String,Object,RegistryValueKind)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of a name/value pair in the registry key, using the specified registry data type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_Win32_RegistryKey_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a string representation of this key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_Handle\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_Handle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Handle</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"microsoft.win32.safehandles.saferegistryhandle\" data-linktype=\"relative-path\">SafeRegistryHandle</a> object that represents the registry key that the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object encapsulates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.SafeHandles.SafeRegistryHandle Handle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.saferegistryhandle\" data-linktype=\"relative-path\">SafeRegistryHandle</a></div>\r\n                  </div>\r\n                  <p>The handle to the registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The registry key is closed. Closed keys cannot be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>A system error occurred, such as deletion of the current key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_Name\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the name of the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The absolute (qualified) name of the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The name of the key includes the absolute path of this key in the registry, always starting at a base key, for example, HKEY_LOCAL_MACHINE.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#4\">   // Delete or close the new subkey.\n   Console::Write( &quot;<br>Delete newly created registry key? (Y/N) &quot; );\n   if ( Char::ToUpper( Convert::ToChar( Console::Read() ) ) == &#39;Y&#39; )\n   {\n      Registry::CurrentUser-&gt;DeleteSubKeyTree( &quot;Test9999&quot; );\n      Console::WriteLine( &quot;<br>Registry key {0} deleted.&quot;, test9999-&gt;Name );\n   }\n   else\n   {\n      Console::WriteLine( &quot;<br>Registry key {0} closed.&quot;, test9999-&gt;ToString() );\n      test9999-&gt;Close();\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#4\">        // Delete or close the new subkey.\n        Console.Write(&quot;<br>Delete newly created registry key? (Y/N) &quot;);\n        if(Char.ToUpper(Convert.ToChar(Console.Read())) == &#39;Y&#39;)\n        {\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;);\n            Console.WriteLine(&quot;<br>Registry key {0} deleted.&quot;, \n                test9999.Name);\n        }\n        else\n        {\n            Console.WriteLine(&quot;<br>Registry key {0} closed.&quot;, \n                test9999.ToString());\n            test9999.Close();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#4\">        &#39; Delete or close the new subkey.\n        Console.Write(vbCrLf &amp; &quot;Delete newly created &quot; &amp; _\n            &quot;registry key? (Y/N) &quot;)\n        If Char.ToUpper(Convert.ToChar(Console.Read())) = &quot;Y&quot;C Then\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} deleted.&quot;, _\n                test9999.Name)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} closed.&quot;, _\n                test9999.ToString())\n            test9999.Close()\n        End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_SubKeyCount\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_SubKeyCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubKeyCount</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the count of subkeys of the current key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int SubKeyCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of subkeys of the current key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have read permission for the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>A system error occurred, for example the current key has been deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property does not recursively count names. It only returns the count of names on the base level from which it was called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#2\">   // Print the information from the Test9999 subkey.\n   Console::WriteLine( &quot;There are {0} subkeys under Test9999.&quot;, test9999-&gt;SubKeyCount.ToString() );\n   array&lt;String^&gt;^subKeyNames = test9999-&gt;GetSubKeyNames();\n   for ( int i = 0; i &lt; subKeyNames-&gt;Length; i++ )\n   {\n      RegistryKey ^ tempKey = test9999-&gt;OpenSubKey( subKeyNames[ i ] );\n      Console::WriteLine( &quot;<br>There are {0} values for {1}.&quot;, tempKey-&gt;ValueCount.ToString(), tempKey-&gt;Name );\n      array&lt;String^&gt;^valueNames = tempKey-&gt;GetValueNames();\n      for ( int j = 0; j &lt; valueNames-&gt;Length; j++ )\n      {\n         Console::WriteLine( &quot;{0,-8}: {1}&quot;, valueNames[ j ], tempKey-&gt;GetValue( valueNames[ j ] )-&gt;ToString() );\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#2\">        // Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under {1}.&quot;, \n            test9999.SubKeyCount.ToString(), test9999.Name);\n        foreach(string subKeyName in test9999.GetSubKeyNames())\n        {\n            using(RegistryKey \n                tempKey = test9999.OpenSubKey(subKeyName))\n            {\n                Console.WriteLine(&quot;<br>There are {0} values for {1}.&quot;, \n                    tempKey.ValueCount.ToString(), tempKey.Name);\n                foreach(string valueName in tempKey.GetValueNames())\n                {\n                    Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, \n                        tempKey.GetValue(valueName).ToString());\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#2\">        &#39; Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under Test9999.&quot;, _\n            test9999.SubKeyCount.ToString())\n        For Each subKeyName As String In test9999.GetSubKeyNames()\n            Dim tempKey As RegistryKey = _\n                test9999.OpenSubKey(subKeyName)\n            Console.WriteLine(vbCrLf &amp; &quot;There are {0} values for &quot; &amp; _\n                &quot;{1}.&quot;, tempKey.ValueCount.ToString(), tempKey.Name)\n            For Each valueName As String In tempKey.GetValueNames()\n                Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, _\n                    tempKey.GetValue(valueName).ToString())\n            Next\n        Next\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_ValueCount\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_ValueCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ValueCount</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the count of values in the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ValueCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of name/value pairs in the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have read permission for the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>A system error occurred, for example the current key has been deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each registry key has a default value that is not associated with any name. This unnamed value can be set by using the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method and specifying either <code>null</code> or the empty string (&quot;&quot;) for <code>name</code>. If the default value has never been set, it does not contribute to the total count returned by the ValueCount property; once it has been set, however, it is always counted.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#2\">   // Print the information from the Test9999 subkey.\n   Console::WriteLine( &quot;There are {0} subkeys under Test9999.&quot;, test9999-&gt;SubKeyCount.ToString() );\n   array&lt;String^&gt;^subKeyNames = test9999-&gt;GetSubKeyNames();\n   for ( int i = 0; i &lt; subKeyNames-&gt;Length; i++ )\n   {\n      RegistryKey ^ tempKey = test9999-&gt;OpenSubKey( subKeyNames[ i ] );\n      Console::WriteLine( &quot;<br>There are {0} values for {1}.&quot;, tempKey-&gt;ValueCount.ToString(), tempKey-&gt;Name );\n      array&lt;String^&gt;^valueNames = tempKey-&gt;GetValueNames();\n      for ( int j = 0; j &lt; valueNames-&gt;Length; j++ )\n      {\n         Console::WriteLine( &quot;{0,-8}: {1}&quot;, valueNames[ j ], tempKey-&gt;GetValue( valueNames[ j ] )-&gt;ToString() );\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#2\">        // Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under {1}.&quot;, \n            test9999.SubKeyCount.ToString(), test9999.Name);\n        foreach(string subKeyName in test9999.GetSubKeyNames())\n        {\n            using(RegistryKey \n                tempKey = test9999.OpenSubKey(subKeyName))\n            {\n                Console.WriteLine(&quot;<br>There are {0} values for {1}.&quot;, \n                    tempKey.ValueCount.ToString(), tempKey.Name);\n                foreach(string valueName in tempKey.GetValueNames())\n                {\n                    Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, \n                        tempKey.GetValue(valueName).ToString());\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#2\">        &#39; Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under Test9999.&quot;, _\n            test9999.SubKeyCount.ToString())\n        For Each subKeyName As String In test9999.GetSubKeyNames()\n            Dim tempKey As RegistryKey = _\n                test9999.OpenSubKey(subKeyName)\n            Console.WriteLine(vbCrLf &amp; &quot;There are {0} values for &quot; &amp; _\n                &quot;{1}.&quot;, tempKey.ValueCount.ToString(), tempKey.Name)\n            For Each valueName As String In tempKey.GetValueNames()\n                Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, _\n                    tempKey.GetValue(valueName).ToString())\n            Next\n        Next\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_View\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_View_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">View</div>        \r\n          </div>\r\n    \r\n            <p>Gets the view that was used to create the registry key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryView View { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a></div>\r\n                  </div>\r\n                  <p>The view that was used to create the registry key.  </p>\n<p> -or-  </p>\n<p> <a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a>, if no view was used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>On the 64-bit versions of Windows, portions of the registry are stored separately for 32-bit and 64-bit applications. There is a 32-bit view for 32-bit applications and a 64-bit view for 64-bit applications.  </p>\n<p> Do not assume that the view always corresponds to the actual view of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_Close\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the key and flushes it to disk if its contents have been modified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method on system keys will have no effect, because system keys are never closed.  </p>\n<p> This method does nothing if you call it on an instance of <code>RegistryKey</code> that is already closed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#4\">   // Delete or close the new subkey.\n   Console::Write( &quot;<br>Delete newly created registry key? (Y/N) &quot; );\n   if ( Char::ToUpper( Convert::ToChar( Console::Read() ) ) == &#39;Y&#39; )\n   {\n      Registry::CurrentUser-&gt;DeleteSubKeyTree( &quot;Test9999&quot; );\n      Console::WriteLine( &quot;<br>Registry key {0} deleted.&quot;, test9999-&gt;Name );\n   }\n   else\n   {\n      Console::WriteLine( &quot;<br>Registry key {0} closed.&quot;, test9999-&gt;ToString() );\n      test9999-&gt;Close();\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#4\">        // Delete or close the new subkey.\n        Console.Write(&quot;<br>Delete newly created registry key? (Y/N) &quot;);\n        if(Char.ToUpper(Convert.ToChar(Console.Read())) == &#39;Y&#39;)\n        {\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;);\n            Console.WriteLine(&quot;<br>Registry key {0} deleted.&quot;, \n                test9999.Name);\n        }\n        else\n        {\n            Console.WriteLine(&quot;<br>Registry key {0} closed.&quot;, \n                test9999.ToString());\n            test9999.Close();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#4\">        &#39; Delete or close the new subkey.\n        Console.Write(vbCrLf &amp; &quot;Delete newly created &quot; &amp; _\n            &quot;registry key? (Y/N) &quot;)\n        If Char.ToUpper(Convert.ToChar(Console.Read())) = &quot;Y&quot;C Then\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} deleted.&quot;, _\n                test9999.Name)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} closed.&quot;, _\n                test9999.ToString())\n            test9999.Close()\n        End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_CreateSubKey_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_CreateSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubKey(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new subkey or opens an existing subkey for write access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey CreateSubKey (string subkey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The newly created subkey, or <code>null</code> if the operation failed. If a zero-length string is specified for <code>subkey</code>, the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or open the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> on which this method is being invoked is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> cannot be written to; for example, it was not opened as a writable key , or the user does not have the necessary access rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The nesting level exceeds 510.  </p>\n<p> -or-  </p>\n<p> A system error occurred, such as deletion of the key, or an attempt to create a key in the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_LocalMachine\" data-linktype=\"relative-path\">LocalMachine</a> root.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order to perform this action, the user must have permission at this level and below in the registry hierarchy.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not expose <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a subkey under HKEY_CURRENT_USER, manipulate its contents, and then delete the subkey.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#1\">using namespace System;\nusing namespace System::Security::Permissions;\nusing namespace Microsoft::Win32;\n\nint main()\n{\n   // Create a subkey named Test9999 under HKEY_CURRENT_USER.\n   RegistryKey ^ test9999 = Registry::CurrentUser-&gt;CreateSubKey( &quot;Test9999&quot; );\n\n   // Create two subkeys under HKEY_CURRENT_USER&nbsp;&nbsp;&nbsp;&nbsp;est9999.\n   test9999-&gt;CreateSubKey( &quot;TestName&quot; )-&gt;Close();\n   RegistryKey ^ testSettings = test9999-&gt;CreateSubKey( &quot;TestSettings&quot; );\n\n   // Create data for the TestSettings subkey.\n   testSettings-&gt;SetValue( &quot;Language&quot;, &quot;French&quot; );\n   testSettings-&gt;SetValue( &quot;Level&quot;, &quot;Intermediate&quot; );\n   testSettings-&gt;SetValue( &quot;ID&quot;, 123 );\n   testSettings-&gt;Close();\n\n   // Print the information from the Test9999 subkey.\n   Console::WriteLine( &quot;There are {0} subkeys under Test9999.&quot;, test9999-&gt;SubKeyCount.ToString() );\n   array&lt;String^&gt;^subKeyNames = test9999-&gt;GetSubKeyNames();\n   for ( int i = 0; i &lt; subKeyNames-&gt;Length; i++ )\n   {\n      RegistryKey ^ tempKey = test9999-&gt;OpenSubKey( subKeyNames[ i ] );\n      Console::WriteLine( &quot;<br>There are {0} values for {1}.&quot;, tempKey-&gt;ValueCount.ToString(), tempKey-&gt;Name );\n      array&lt;String^&gt;^valueNames = tempKey-&gt;GetValueNames();\n      for ( int j = 0; j &lt; valueNames-&gt;Length; j++ )\n      {\n         Console::WriteLine( &quot;{0,-8}: {1}&quot;, valueNames[ j ], tempKey-&gt;GetValue( valueNames[ j ] )-&gt;ToString() );\n\n      }\n   }\n   \n   // Delete the ID value.\n   testSettings = test9999-&gt;OpenSubKey( &quot;TestSettings&quot;, true );\n   testSettings-&gt;DeleteValue( &quot;id&quot; );\n\n   // Verify the deletion.\n   Console::WriteLine( dynamic_cast&lt;String^&gt;(testSettings-&gt;GetValue(  &quot;id&quot;, &quot;ID not found.&quot; )) );\n   testSettings-&gt;Close();\n\n   // Delete or close the new subkey.\n   Console::Write( &quot;<br>Delete newly created registry key? (Y/N) &quot; );\n   if ( Char::ToUpper( Convert::ToChar( Console::Read() ) ) == &#39;Y&#39; )\n   {\n      Registry::CurrentUser-&gt;DeleteSubKeyTree( &quot;Test9999&quot; );\n      Console::WriteLine( &quot;<br>Registry key {0} deleted.&quot;, test9999-&gt;Name );\n   }\n   else\n   {\n      Console::WriteLine( &quot;<br>Registry key {0} closed.&quot;, test9999-&gt;ToString() );\n      test9999-&gt;Close();\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#1\">using System;\nusing System.Security.Permissions;\nusing Microsoft.Win32;\n\nclass RegKey\n{\n    static void Main()\n    {\n        // Create a subkey named Test9999 under HKEY_CURRENT_USER.\n        RegistryKey test9999 = \n            Registry.CurrentUser.CreateSubKey(&quot;Test9999&quot;);\n        // Create two subkeys under HKEY_CURRENT_USER&nbsp;&nbsp;&nbsp;&nbsp;est9999. The\n        // keys are disposed when execution exits the using statement.\n        using(RegistryKey \n            testName = test9999.CreateSubKey(&quot;TestName&quot;),\n            testSettings = test9999.CreateSubKey(&quot;TestSettings&quot;))\n        {\n            // Create data for the TestSettings subkey.\n            testSettings.SetValue(&quot;Language&quot;, &quot;French&quot;);\n            testSettings.SetValue(&quot;Level&quot;, &quot;Intermediate&quot;);\n            testSettings.SetValue(&quot;ID&quot;, 123);\n        }\n\n        // Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under {1}.&quot;, \n            test9999.SubKeyCount.ToString(), test9999.Name);\n        foreach(string subKeyName in test9999.GetSubKeyNames())\n        {\n            using(RegistryKey \n                tempKey = test9999.OpenSubKey(subKeyName))\n            {\n                Console.WriteLine(&quot;<br>There are {0} values for {1}.&quot;, \n                    tempKey.ValueCount.ToString(), tempKey.Name);\n                foreach(string valueName in tempKey.GetValueNames())\n                {\n                    Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, \n                        tempKey.GetValue(valueName).ToString());\n                }\n            }\n        }\n\n        using(RegistryKey \n            testSettings = test9999.OpenSubKey(&quot;TestSettings&quot;, true))\n        {\n            // Delete the ID value.\n            testSettings.DeleteValue(&quot;id&quot;);\n\n            // Verify the deletion.\n            Console.WriteLine((string)testSettings.GetValue(\n                &quot;id&quot;, &quot;ID not found.&quot;));\n        }\n\n        // Delete or close the new subkey.\n        Console.Write(&quot;<br>Delete newly created registry key? (Y/N) &quot;);\n        if(Char.ToUpper(Convert.ToChar(Console.Read())) == &#39;Y&#39;)\n        {\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;);\n            Console.WriteLine(&quot;<br>Registry key {0} deleted.&quot;, \n                test9999.Name);\n        }\n        else\n        {\n            Console.WriteLine(&quot;<br>Registry key {0} closed.&quot;, \n                test9999.ToString());\n            test9999.Close();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Security.Permissions\nImports Microsoft.Win32\n\nPublic Class RegKey\n    Shared Sub Main()\n\n        &#39; Create a subkey named Test9999 under HKEY_CURRENT_USER.\n        Dim test9999 As RegistryKey = _\n            Registry.CurrentUser.CreateSubKey(&quot;Test9999&quot;)\n\n        &#39; Create two subkeys under HKEY_CURRENT_USER&nbsp;&nbsp;&nbsp;&nbsp;est9999.\n        test9999.CreateSubKey(&quot;TestName&quot;).Close()\n        Dim testSettings As RegistryKey = _\n            test9999.CreateSubKey(&quot;TestSettings&quot;)\n\n        &#39; Create data for the TestSettings subkey.\n        testSettings.SetValue(&quot;Language&quot;, &quot;French&quot;)\n        testSettings.SetValue(&quot;Level&quot;, &quot;Intermediate&quot;)\n        testSettings.SetValue(&quot;ID&quot;, 123)\n        testSettings.Close()\n\n        &#39; Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under Test9999.&quot;, _\n            test9999.SubKeyCount.ToString())\n        For Each subKeyName As String In test9999.GetSubKeyNames()\n            Dim tempKey As RegistryKey = _\n                test9999.OpenSubKey(subKeyName)\n            Console.WriteLine(vbCrLf &amp; &quot;There are {0} values for &quot; &amp; _\n                &quot;{1}.&quot;, tempKey.ValueCount.ToString(), tempKey.Name)\n            For Each valueName As String In tempKey.GetValueNames()\n                Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, _\n                    tempKey.GetValue(valueName).ToString())\n            Next\n        Next\n\n        &#39; Delete the ID value.\n        testSettings = test9999.OpenSubKey(&quot;TestSettings&quot;, True)\n        testSettings.DeleteValue(&quot;id&quot;)\n\n        &#39; Verify the deletion.\n        Console.WriteLine(CType(testSettings.GetValue( _\n            &quot;id&quot;, &quot;ID not found.&quot;), String))\n        testSettings.Close()\n\n        &#39; Delete or close the new subkey.\n        Console.Write(vbCrLf &amp; &quot;Delete newly created &quot; &amp; _\n            &quot;registry key? (Y/N) &quot;)\n        If Char.ToUpper(Convert.ToChar(Console.Read())) = &quot;Y&quot;C Then\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} deleted.&quot;, _\n                test9999.Name)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} closed.&quot;, _\n                test9999.ToString())\n            test9999.Close()\n        End If\n   \n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_CreateSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_CreateSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubKey(String,RegistryKeyPermissionCheck)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new subkey or opens an existing subkey for write access, using the specified permission check option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey CreateSubKey (string subkey, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>permissionCheck</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">RegistryKeyPermissionCheck</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the key is opened for read or read/write access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The newly created subkey, or <code>null</code> if the operation failed. If a zero-length string is specified for <code>subkey</code>, the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or open the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>permissionCheck</code> contains an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> on which this method is being invoked is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The nesting level exceeds 510.  </p>\n<p> -or-  </p>\n<p> A system error occurred, such as deletion of the key, or an attempt to create a key in the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_LocalMachine\" data-linktype=\"relative-path\">LocalMachine</a> root.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order to perform this action, the user must have permission at this level and below in the registry hierarchy.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not expose <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.  </p>\n</div>\n<p> In order to use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method, you must have an instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class. To get an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>, use one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_CreateSubKey_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_CreateSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubKey(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new subkey or opens an existing subkey with the specified access.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v46-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey CreateSubKey (string subkey, bool writable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate the new subkey is writable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The newly created subkey, or <code>null</code> if the operation failed. If a zero-length string is specified for <code>subkey</code>, the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or open the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The nesting level exceeds 510.  </p>\n<p> -or-  </p>\n<p> A system error occurred, such as deletion of the key, or an attempt to create a key in the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_LocalMachine\" data-linktype=\"relative-path\">LocalMachine</a> root.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order to perform this action, the user must have permission at this level and below in the registry hierarchy.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not expose <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.  </p>\n</div>\n<p> In order to use the CreateSubKey method, you must have an instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class. To get an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>, use one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_CreateSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_Microsoft_Win32_RegistryOptions_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_CreateSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubKey(String,RegistryKeyPermissionCheck,RegistryOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a subkey or opens a subkey for write access, using the specified permission check and registry options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey CreateSubKey (string subkey, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck, Microsoft.Win32.RegistryOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>permissionCheck</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">RegistryKeyPermissionCheck</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the key is opened for read or read/write access.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryoptions\" data-linktype=\"relative-path\">RegistryOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The registry option to use; for example, that creates a volatile key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The newly created subkey, or <code>null</code> if the operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey </code>is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object cannot be written to; for example, it was not opened as a writable key, or the user does not have the required access rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The nesting level exceeds 510.  </p>\n<p> -or-  </p>\n<p> A system error occurred, such as deletion of the key or an attempt to create a key in the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_LocalMachine\" data-linktype=\"relative-path\">LocalMachine</a> root.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or open the registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To obtain the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object, specify an empty string (&quot;&quot;) for <code>subkey</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_CreateSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_System_Security_AccessControl_RegistrySecurity_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_CreateSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubKey(String,RegistryKeyPermissionCheck,RegistrySecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new subkey or opens an existing subkey for write access, using the specified permission check option and registry security.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey CreateSubKey (string subkey, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck, System.Security.AccessControl.RegistrySecurity registrySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>permissionCheck</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">RegistryKeyPermissionCheck</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the key is opened for read or read/write access.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>registrySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access control security for the new key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The newly created subkey, or <code>null</code> if the operation failed. If a zero-length string is specified for <code>subkey</code>, the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or open the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>permissionCheck</code> contains an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> on which this method is being invoked is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The nesting level exceeds 510.  </p>\n<p> -or-  </p>\n<p> A system error occurred, such as deletion of the key, or an attempt to create a key in the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_LocalMachine\" data-linktype=\"relative-path\">LocalMachine</a> root.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateSubKey method creates a registry key that has the access control specified by the <code>registrySecurity</code> parameter. The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object that is returned represents the registry key, but that object is not restricted by the access control specified in the <code>registrySecurity</code> parameter.  </p>\n<p> If <code>permissionCheck</code> is <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>, the key is opened for read/write access. If <code>permissionCheck</code> is <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>, the key is opened for read access.  </p>\n<p> For backward compatibility, the key is opened for reading and writing if <code>permissionCheck</code> is <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a> and the parent key also has <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>. If the parent key has any other setting, read/write status is controlled by the parent key&#39;s setting.  </p>\n<p> In order to perform this action, the user must have permissions at this level and below in the registry hierarchy.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not expose <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.  </p>\n</div>\n<p> In order to use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method, you must have an instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class. To get an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>, use one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_CreateSubKey_System_String_System_Boolean_Microsoft_Win32_RegistryOptions_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_CreateSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubKey(String,Boolean,RegistryOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new subkey or opens an existing subkey with the specified access.  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v46-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey CreateSubKey (string subkey, bool writable, Microsoft.Win32.RegistryOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate the new subkey is writable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryoptions\" data-linktype=\"relative-path\">RegistryOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The registry option to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The newly created subkey, or <code>null</code> if the operation failed. If a zero-length string is specified for <code>subkey</code>, the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> does not specify a valid Option</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or open the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The nesting level exceeds 510.  </p>\n<p> -or-  </p>\n<p> A system error occurred, such as deletion of the key, or an attempt to create a key in the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_LocalMachine\" data-linktype=\"relative-path\">LocalMachine</a> root.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order to perform this action, the user must have permission at this level and below in the registry hierarchy.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not expose <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.  </p>\n</div>\n<p> In order to use the CreateSubKey method, you must have an instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class. To get an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>, use one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_CreateSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_Microsoft_Win32_RegistryOptions_System_Security_AccessControl_RegistrySecurity_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_CreateSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSubKey(String,RegistryKeyPermissionCheck,RegistryOptions,RegistrySecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a subkey or opens a subkey for write access, using the specified permission check option, registry option, and registry security.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey CreateSubKey (string subkey, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck, Microsoft.Win32.RegistryOptions registryOptions, System.Security.AccessControl.RegistrySecurity registrySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>permissionCheck</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">RegistryKeyPermissionCheck</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the key is opened for read or read/write access.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>registryOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryoptions\" data-linktype=\"relative-path\">RegistryOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The registry option to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>registrySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access control security for the new subkey.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The newly created subkey, or <code>null</code> if the operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey </code>is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object is closed. Closed keys cannot be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object cannot be written to; for example, it was not opened as a writable key, or the user does not have the required access rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The nesting level exceeds 510.  </p>\n<p> -or-  </p>\n<p> A system error occurred, such as deletion of the key or an attempt to create a key in the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_LocalMachine\" data-linktype=\"relative-path\">LocalMachine</a> root.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or open the registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To obtain the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object, specify an empty string (&quot;&quot;) for <code>subkey</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_DeleteSubKey_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_DeleteSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteSubKey(String)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the specified subkey.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DeleteSubKey (string subkey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the subkey to delete. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>subkey</code> has child subkeys</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>subkey</code> parameter does not specify a valid registry key</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to delete the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To delete child subkeys, use <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_DeleteSubKeyTree_\" data-linktype=\"relative-path\">DeleteSubKeyTree</a>.  </p>\n<p> Use caution when deleting registry keys.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use DeleteSubKey.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#5\">using namespace System;\nusing namespace Microsoft::Win32;\n\npublic ref class RegKeyDel\n{\npublic:\n    static void Main()\n    {\n        // Create a subkey named Test9999 under HKEY_CURRENT_USER.\n        RegistryKey^ test9999 =\n            Registry::CurrentUser-&gt;CreateSubKey(&quot;Test9999&quot;);\n        // Create two subkeys under HKEY_CURRENT_USER&nbsp;&nbsp;&nbsp;&nbsp;est9999. The\n        // keys are disposed when execution exits the using statement.\n        RegistryKey^ testName = test9999-&gt;CreateSubKey(&quot;TestName&quot;);\n        RegistryKey^ testSettings = test9999-&gt;CreateSubKey(&quot;TestSettings&quot;);\n\n        // Create data for the TestSettings subkey.\n        testSettings-&gt;SetValue(&quot;Language&quot;, &quot;French&quot;);\n        testSettings-&gt;SetValue(&quot;Level&quot;, &quot;Intermediate&quot;);\n        testSettings-&gt;SetValue(&quot;ID&quot;, 123);\n\n        // delete the subkey &quot;TestName&quot;\n        test9999-&gt;DeleteSubKey(&quot;TestName&quot;);\n        // delete everything under and including &quot;Test9999&quot;\n        Registry::CurrentUser-&gt;DeleteSubKeyTree(&quot;Test9999&quot;);\n    }\n};\n\nint main()\n{\n    RegKeyDel::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#5\">using System;\nusing Microsoft.Win32;\n\nclass RegKeyDel\n{\n    static void Main()\n    {\n        // Create a subkey named Test9999 under HKEY_CURRENT_USER.\n        RegistryKey test9999 =\n            Registry.CurrentUser.CreateSubKey(&quot;Test9999&quot;);\n        // Create two subkeys under HKEY_CURRENT_USER&nbsp;&nbsp;&nbsp;&nbsp;est9999. The\n        // keys are disposed when execution exits the using statement.\n        RegistryKey testName = test9999.CreateSubKey(&quot;TestName&quot;);\n        RegistryKey testSettings = test9999.CreateSubKey(&quot;TestSettings&quot;);\n\n        // Create data for the TestSettings subkey.\n        testSettings.SetValue(&quot;Language&quot;, &quot;French&quot;);\n        testSettings.SetValue(&quot;Level&quot;, &quot;Intermediate&quot;);\n        testSettings.SetValue(&quot;ID&quot;, 123);\n\n        // delete the subkey &quot;TestName&quot;\n        test9999.DeleteSubKey(&quot;TestName&quot;);\n        // delete everything under and including &quot;Test9999&quot;\n        Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#5\">Imports System\nImports Microsoft.Win32\n\nPublic Class RegKeyDel\n    Public Shared Sub Main()\n        &#39; Create a subkey named Test9999 under HKEY_CURRENT_USER.\n        Dim test9999 As RegistryKey = _\n            Registry.CurrentUser.CreateSubKey(&quot;Test9999&quot;)\n        &#39; Create two subkeys under HKEY_CURRENT_USER&nbsp;&nbsp;&nbsp;&nbsp;est9999. The\n        &#39; keys are disposed when execution exits the using statement.\n        Dim testName As RegistryKey = test9999.CreateSubKey(&quot;TestName&quot;)\n        Dim testSettings As RegistryKey = test9999.CreateSubKey(&quot;TestSettings&quot;)\n\n        &#39; Create data for the TestSettings subkey.\n        testSettings.SetValue(&quot;Language&quot;, &quot;French&quot;)\n        testSettings.SetValue(&quot;Level&quot;, &quot;Intermediate&quot;)\n        testSettings.SetValue(&quot;ID&quot;, 123)\n\n        &#39; delete the subkey &quot;TestName&quot;\n        test9999.DeleteSubKey(&quot;TestName&quot;)\n        &#39; delete everything under and including &quot;Test9999&quot;\n        Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_DeleteSubKey_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_DeleteSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteSubKey(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the specified subkey, and specifies whether an exception is raised if the subkey is not found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DeleteSubKey (string subkey, bool throwOnMissingSubKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the subkey to delete. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnMissingSubKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is <code>true</code> and the specified subkey does not exist, an exception is raised. If this argument is <code>false</code> and the specified subkey does not exist, no action is taken.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> has child subkeys.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> does not specify a valid registry key, and <code>throwOnMissingSubKey</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to delete the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To delete child subkeys, use <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_DeleteSubKeyTree_\" data-linktype=\"relative-path\">DeleteSubKeyTree</a>.  </p>\n<p> Use caution when deleting registry keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_DeleteSubKeyTree_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_DeleteSubKeyTree_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteSubKeyTree(String)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes a subkey and any child subkeys recursively.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DeleteSubKeyTree (string subkey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The subkey to delete. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Deletion of a root hive is attempted.  </p>\n<p> -or-  </p>\n<p> <code>subkey</code> does not specify a valid registry subkey.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error has occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to delete the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must have appropriate permissions to delete the subkey and its tree.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Deleting a particular key will remove all entries below the key in the tree. No warning will be provided. If you want to delete a subkey only when it has no child subkeys, use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_DeleteSubKey_\" data-linktype=\"relative-path\">DeleteSubKey</a> method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#4\">   // Delete or close the new subkey.\n   Console::Write( &quot;<br>Delete newly created registry key? (Y/N) &quot; );\n   if ( Char::ToUpper( Convert::ToChar( Console::Read() ) ) == &#39;Y&#39; )\n   {\n      Registry::CurrentUser-&gt;DeleteSubKeyTree( &quot;Test9999&quot; );\n      Console::WriteLine( &quot;<br>Registry key {0} deleted.&quot;, test9999-&gt;Name );\n   }\n   else\n   {\n      Console::WriteLine( &quot;<br>Registry key {0} closed.&quot;, test9999-&gt;ToString() );\n      test9999-&gt;Close();\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#4\">        // Delete or close the new subkey.\n        Console.Write(&quot;<br>Delete newly created registry key? (Y/N) &quot;);\n        if(Char.ToUpper(Convert.ToChar(Console.Read())) == &#39;Y&#39;)\n        {\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;);\n            Console.WriteLine(&quot;<br>Registry key {0} deleted.&quot;, \n                test9999.Name);\n        }\n        else\n        {\n            Console.WriteLine(&quot;<br>Registry key {0} closed.&quot;, \n                test9999.ToString());\n            test9999.Close();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#4\">        &#39; Delete or close the new subkey.\n        Console.Write(vbCrLf &amp; &quot;Delete newly created &quot; &amp; _\n            &quot;registry key? (Y/N) &quot;)\n        If Char.ToUpper(Convert.ToChar(Console.Read())) = &quot;Y&quot;C Then\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} deleted.&quot;, _\n                test9999.Name)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} closed.&quot;, _\n                test9999.ToString())\n            test9999.Close()\n        End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_DeleteSubKeyTree_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_DeleteSubKeyTree_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteSubKeyTree(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the specified subkey and any child subkeys recursively, and specifies whether an exception is raised if the subkey is not found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DeleteSubKeyTree (string subkey, bool throwOnMissingSubKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>subkey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the subkey to delete. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnMissingSubKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is <code>true</code> and the specified subkey does not exist, an exception is raised. If this argument is <code>false</code> and the specified subkey does not exist, no action is taken.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to delete the root hive of the tree.  </p>\n<p> -or-  </p>\n<p> <code>subkey</code> does not specify a valid registry subkey, and <code>throwOnMissingSubKey</code> is <code>true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>subkey</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to delete the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_DeleteValue_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_DeleteValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteValue(String)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the specified value from this key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DeleteValue (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the value to delete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid reference to a value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to delete the value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>On Windows 95, Windows 98, Windows 98 Second Edition, and Windows Millennium Edition, specifying an empty string for the <code>name</code> parameter does not delete the default value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#3\">   // Delete the ID value.\n   testSettings = test9999-&gt;OpenSubKey( &quot;TestSettings&quot;, true );\n   testSettings-&gt;DeleteValue( &quot;id&quot; );\n\n   // Verify the deletion.\n   Console::WriteLine( dynamic_cast&lt;String^&gt;(testSettings-&gt;GetValue(  &quot;id&quot;, &quot;ID not found.&quot; )) );\n   testSettings-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#3\">        using(RegistryKey \n            testSettings = test9999.OpenSubKey(&quot;TestSettings&quot;, true))\n        {\n            // Delete the ID value.\n            testSettings.DeleteValue(&quot;id&quot;);\n\n            // Verify the deletion.\n            Console.WriteLine((string)testSettings.GetValue(\n                &quot;id&quot;, &quot;ID not found.&quot;));\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#3\">        &#39; Delete the ID value.\n        testSettings = test9999.OpenSubKey(&quot;TestSettings&quot;, True)\n        testSettings.DeleteValue(&quot;id&quot;)\n\n        &#39; Verify the deletion.\n        Console.WriteLine(CType(testSettings.GetValue( _\n            &quot;id&quot;, &quot;ID not found.&quot;), String))\n        testSettings.Close()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_DeleteValue_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_DeleteValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteValue(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the specified value from this key, and specifies whether an exception is raised if the value is not found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DeleteValue (string name, bool throwOnMissingValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the value to delete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnMissingValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Indicates whether an exception should be raised if the specified value cannot be found. If this argument is <code>true</code> and the specified value does not exist, an exception is raised. If this argument is <code>false</code> and the specified value does not exist, no action is taken.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid reference to a value and <code>throwOnMissingValue</code> is <code>true</code>.  </p>\n<p> -or-  </p>\n<p> <code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to delete the value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>throwOnMissingValue</code> is <code>false</code>, there is no way to tell if the deletion was successful, without subsequently trying to access the value just deleted. Therefore, use caution when deleting values from the registry in this manner.  </p>\n<p> On Windows 95, Windows 98, Windows 98 Second Edition, and Windows Millennium Edition, specifying an empty string for the <code>name</code> parameter does not delete the default value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_Dispose\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_Flush\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>Writes all the attributes of the specified open registry key into the registry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is not necessary to call <code>Flush</code> to write out changes to a key. Registry changes are flushed to disk when the registry uses its lazy flusher. Lazy flushing occurs automatically and regularly after a system-specified time interval. Registry changes are also flushed to disk at system shutdown.  </p>\n<p> Unlike <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_Close_\" data-linktype=\"relative-path\">Close</a>, the <code>Flush</code> function returns only when all the data has been written to the registry.  </p>\n<p> The <code>Flush</code> function might also write out parts of or all of the other keys. Calling this function excessively can have a negative effect on an application&#39;s performance.  </p>\n<p> An application should only call <code>Flush</code> if it must be absolute certain that registry changes are recorded to disk. In general, <code>Flush</code> rarely, if ever, need be used.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_FromHandle_Microsoft_Win32_SafeHandles_SafeRegistryHandle_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_FromHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromHandle(SafeRegistryHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a registry key from a specified handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Microsoft.Win32.RegistryKey FromHandle (Microsoft.Win32.SafeHandles.SafeRegistryHandle handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.saferegistryhandle\" data-linktype=\"relative-path\">SafeRegistryHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handle to the registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>A registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>handle</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to perform this action.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_FromHandle_Microsoft_Win32_SafeHandles_SafeRegistryHandle_Microsoft_Win32_RegistryView_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_FromHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromHandle(SafeRegistryHandle,RegistryView)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a registry key from a specified handle and registry view setting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Microsoft.Win32.RegistryKey FromHandle (Microsoft.Win32.SafeHandles.SafeRegistryHandle handle, Microsoft.Win32.RegistryView view);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.saferegistryhandle\" data-linktype=\"relative-path\">SafeRegistryHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The handle to the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>view</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The registry view to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>A registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>view</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>handle</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to perform this action.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>view</code> parameter for this method is used in subsequent operations, such as opening subkeys.  </p>\n<p> If <code>view</code> is <a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a> but the machine is running a 32-bit operating system, the returned key will use the <a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a> view.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_GetAccessControl\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the access control security for the current registry key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.AccessControl.RegistrySecurity GetAccessControl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a></div>\r\n                  </div>\r\n                  <p>An object that describes the access control permissions on the registry key represented by the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary permissions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current key has been deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overload is equivalent to calling the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">GetAccessControl(AccessControlSections)</a> method overload with the bitwise combination of the following flags: <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a>, <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a>, and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a>. You can use that overload to search for other permissions.  </p>\n<p> The user must have <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">System.Security.AccessControl.RegistryRights</a> rights to call this method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_GetAccessControl_System_Security_AccessControl_AccessControlSections_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl(AccessControlSections)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified sections of the access control security for the current registry key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.AccessControl.RegistrySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeSections</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that specifies the type of security information to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a></div>\r\n                  </div>\r\n                  <p>An object that describes the access control permissions on the registry key represented by the current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary permissions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The current key has been deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To request the access permissions currently granted to users, specify the bitwise combination of the following flags: <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a>, <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a>, and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlSections</a>. Alternatively, you can use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl\" data-linktype=\"relative-path\">GetAccessControl()</a> method overload, which specifies exactly that combination of values.  </p>\n<p> The user must have <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">System.Security.AccessControl.RegistryRights</a> rights to call this method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_GetSubKeyNames\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_GetSubKeyNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSubKeyNames()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of strings that contains all the subkey names.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] GetSubKeyNames ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of strings that contains the names of the subkeys for the current key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read from the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>A system error occurred, for example the current key has been deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not recursively find names. It returns the names on the base level from which it was called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#2\">   // Print the information from the Test9999 subkey.\n   Console::WriteLine( &quot;There are {0} subkeys under Test9999.&quot;, test9999-&gt;SubKeyCount.ToString() );\n   array&lt;String^&gt;^subKeyNames = test9999-&gt;GetSubKeyNames();\n   for ( int i = 0; i &lt; subKeyNames-&gt;Length; i++ )\n   {\n      RegistryKey ^ tempKey = test9999-&gt;OpenSubKey( subKeyNames[ i ] );\n      Console::WriteLine( &quot;<br>There are {0} values for {1}.&quot;, tempKey-&gt;ValueCount.ToString(), tempKey-&gt;Name );\n      array&lt;String^&gt;^valueNames = tempKey-&gt;GetValueNames();\n      for ( int j = 0; j &lt; valueNames-&gt;Length; j++ )\n      {\n         Console::WriteLine( &quot;{0,-8}: {1}&quot;, valueNames[ j ], tempKey-&gt;GetValue( valueNames[ j ] )-&gt;ToString() );\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#2\">        // Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under {1}.&quot;, \n            test9999.SubKeyCount.ToString(), test9999.Name);\n        foreach(string subKeyName in test9999.GetSubKeyNames())\n        {\n            using(RegistryKey \n                tempKey = test9999.OpenSubKey(subKeyName))\n            {\n                Console.WriteLine(&quot;<br>There are {0} values for {1}.&quot;, \n                    tempKey.ValueCount.ToString(), tempKey.Name);\n                foreach(string valueName in tempKey.GetValueNames())\n                {\n                    Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, \n                        tempKey.GetValue(valueName).ToString());\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#2\">        &#39; Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under Test9999.&quot;, _\n            test9999.SubKeyCount.ToString())\n        For Each subKeyName As String In test9999.GetSubKeyNames()\n            Dim tempKey As RegistryKey = _\n                test9999.OpenSubKey(subKeyName)\n            Console.WriteLine(vbCrLf &amp; &quot;There are {0} values for &quot; &amp; _\n                &quot;{1}.&quot;, tempKey.ValueCount.ToString(), tempKey.Name)\n            For Each valueName As String In tempKey.GetValueNames()\n                Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, _\n                    tempKey.GetValue(valueName).ToString())\n            Next\n        Next\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_GetValue_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the value associated with the specified name. Returns <code>null</code> if the name/value pair does not exist in the registry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the value to retrieve. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value associated with <code>name</code>, or <code>null</code> if <code>name</code> is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read from the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value has been marked for deletion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string &quot;(Default)&quot; appears instead of a name. To retrieve this unnamed value, specify either <code>null</code> or the empty string (&quot;&quot;) for <code>name</code>.  </p>\n</div>\n<p> When the GetValue method retrieves expandable string values (<a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>), it expands environment strings using data from the local environment. To retrieve expandable string values from the registry on a remote computer, use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValue_System_String_System_Object_Microsoft_Win32_RegistryValueOptions_\" data-linktype=\"relative-path\">GetValue(String,Object,RegistryValueOptions)</a> method overload to specify that you do not want environment strings expanded.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a value containing expandable references to environment variables has been stored as a string (<a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>), rather than as an expandable string (<a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>), GetValue does not expand it. You can expand such a string after it has been retrieved by calling the <a class=\"xref\" href=\"system.environment#System_Environment_ExpandEnvironmentVariables_\" data-linktype=\"relative-path\">ExpandEnvironmentVariables</a> method.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The recommended way to retrieve data from the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_PerformanceData\" data-linktype=\"relative-path\">PerformanceData</a> key is to use the <a class=\"xref\" href=\"system.diagnostics.performancecounter\" data-linktype=\"relative-path\">PerformanceCounter</a> class rather than the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method.  </p>\n<p> GetValue does not support reading values of type REG_NONE or REG_LINK.  In both cases, the default value (<code>null</code>) is returned instead of the actual value.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a test key and adds values of different data types to the key. The example then reads the name/value pairs and displays them to the console, using the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValueKind_\" data-linktype=\"relative-path\">GetValueKind</a> method to retrieve the corresponding registry data types.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryValueKind#1\">using namespace System;\nusing namespace Microsoft::Win32;\nint main()\n{\n   \n   // Delete and recreate the test key.\n   Registry::CurrentUser-&gt;DeleteSubKey( &quot;RegistryValueKindExample&quot;, false );\n   RegistryKey ^ rk = Registry::CurrentUser-&gt;CreateSubKey( &quot;RegistryValueKindExample&quot; );\n   \n   // Create name/value pairs.\n   // This overload supports QWord (long) values. \n   rk-&gt;SetValue( &quot;QuadWordValue&quot;, 42, RegistryValueKind::QWord );\n   \n   // The following SetValue calls have the same effect as using the\n   // SetValue overload that does not specify RegistryValueKind.\n   //\n   rk-&gt;SetValue( &quot;DWordValue&quot;, 42, RegistryValueKind::DWord );\n   rk-&gt;SetValue( &quot;MultipleStringValue&quot;, gcnew array&lt;String^&gt;{\n      &quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;\n   }, RegistryValueKind::MultiString );\n   rk-&gt;SetValue( &quot;BinaryValue&quot;, gcnew array&lt;Byte&gt;{\n      10,43,44,45,14,255\n   }, RegistryValueKind::Binary );\n   rk-&gt;SetValue( &quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind::String );\n   \n   // This overload supports setting expandable string values. Compare\n   // the output from this value with the previous string value.\n   rk-&gt;SetValue( &quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind::ExpandString );\n   \n   // Display all the name/value pairs stored in the test key, with the\n   // registry data type in parentheses.\n   //\n   array&lt;String^&gt;^valueNames = rk-&gt;GetValueNames();\n   System::Collections::IEnumerator^ myEnum = valueNames-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      RegistryValueKind rvk = rk-&gt;GetValueKind( s );\n      switch ( rvk )\n      {\n         case RegistryValueKind::MultiString:\n         {\n            array&lt;String^&gt;^values = (array&lt;String^&gt;^)rk-&gt;GetValue( s );\n            Console::Write( &quot;\\r<br> {0} ({1}) =&quot;, s, rvk );\n            for ( int i = 0; i &lt; values-&gt;Length; i++ )\n            {\n               if (i != 0) Console::Write(&quot;,&quot;);\n               Console::Write( &quot; \\&quot;{0}\\&quot;&quot;, values[ i ] );\n\n            }\n            Console::WriteLine();\n            break;\n         }\n         case RegistryValueKind::Binary:\n         {\n            array&lt;Byte&gt;^bytes = (array&lt;Byte&gt;^)rk-&gt;GetValue( s );\n            Console::Write( &quot;\\r<br> {0} ({1}) =&quot;, s, rvk );\n            for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n            {\n               \n               // Display each byte as two hexadecimal digits.\n               Console::Write( &quot; {0:X2}&quot;, bytes[ i ] );\n\n            }\n            Console::WriteLine();\n            break;\n         }\n         default:\n            Console::WriteLine( &quot;\\r<br> {0} ({1}) = {2}&quot;, s, rvk, rk-&gt;GetValue( s ) );\n            break;\n      }\n   }\n}\n/*\n\nThis code example produces the following output:\n QuadWordValue (QWord) = 42\n\n DWordValue (DWord) = 42\n\n MultipleStringValue (MultiString) =, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n\n BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n\n StringValue (String) = The path is %PATH%\n\n ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n [***The remainder of this output is omitted.***]\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryValueKind#1\">using System;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryValueKindExample&quot;, false);\n        RegistryKey rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryValueKindExample&quot;);\n\n        // Create name/value pairs.\n\n        // This overload supports QWord (long) values. \n        rk.SetValue(&quot;QuadWordValue&quot;, 42, RegistryValueKind.QWord);\n\n        // The following SetValue calls have the same effect as using the\n        // SetValue overload that does not specify RegistryValueKind.\n        //\n        rk.SetValue(&quot;DWordValue&quot;, 42, RegistryValueKind.DWord);\n        rk.SetValue(&quot;MultipleStringValue&quot;, new string[] {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;}, RegistryValueKind.MultiString);\n        rk.SetValue(&quot;BinaryValue&quot;, new byte[] {10, 43, 44, 45, 14, 255}, RegistryValueKind.Binary);\n        rk.SetValue(&quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.String);\n\n        // This overload supports setting expandable string values. Compare\n        // the output from this value with the previous string value.\n        rk.SetValue(&quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.ExpandString);\n\n\n        // Display all name/value pairs stored in the test key, with each\n        // registry data type in parentheses.\n        //\n        string[] valueNames = rk.GetValueNames();\n        foreach (string s in valueNames)\n        {\n            RegistryValueKind rvk = rk.GetValueKind(s);\n            switch (rvk)\n            {\n                case RegistryValueKind.MultiString :\n                    string[] values = (string[]) rk.GetValue(s);\n                    Console.Write(&quot;\\r<br> {0} ({1}) =&quot;, s, rvk);\n                    for (int i = 0; i &lt; values.Length; i++)\n                    {\n                        if (i != 0) Console.Write(&quot;,&quot;);\n                        Console.Write(&quot; \\&quot;{0}\\&quot;&quot;, values[i]);\n                    }\n                    Console.WriteLine();\n                    break;\n                \n                case RegistryValueKind.Binary :\n                    byte[] bytes = (byte[]) rk.GetValue(s);\n                    Console.Write(&quot;\\r<br> {0} ({1}) =&quot;, s, rvk);\n                    for (int i = 0; i &lt; bytes.Length; i++)\n                    {\n                        // Display each byte as two hexadecimal digits.\n                        Console.Write(&quot; {0:X2}&quot;, bytes[i]);\n                    }\n                    Console.WriteLine();\n                    break;\n                \n                default :\n                    Console.WriteLine(&quot;\\r<br> {0} ({1}) = {2}&quot;, s, rvk, rk.GetValue(s));\n                    break;\n            }\n        }\n    }\n}\n/*\n\nThis code example produces the following output:\n QuadWordValue (QWord) = 42\n\n DWordValue (DWord) = 42\n\n MultipleStringValue (MultiString) =, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n\n BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n\n StringValue (String) = The path is %PATH%\n\n ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n [***The remainder of this output is omitted.***]\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryValueKind#1\">Imports System\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryValueKindExample&quot;, False)\n        Dim rk As RegistryKey = Registry.CurrentUser.CreateSubKey(&quot;RegistryValueKindExample&quot;)\n        \n        &#39; Create name/value pairs.\n        &#39; This overload supports QWord (long) values. \n        rk.SetValue(&quot;QuadWordValue&quot;, 42, RegistryValueKind.QWord)\n        \n        &#39; The following SetValue calls have the same effect as using the\n        &#39; SetValue overload that does not specify RegistryValueKind.\n        &#39;\n        rk.SetValue(&quot;DWordValue&quot;, 42, RegistryValueKind.DWord)\n        rk.SetValue(&quot;MultipleStringValue&quot;, New String() {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;}, RegistryValueKind.MultiString)\n        rk.SetValue(&quot;BinaryValue&quot;, New Byte() {10, 43, 44, 45, 14, 255}, RegistryValueKind.Binary)\n        rk.SetValue(&quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.String) \n        \n        &#39; This overload supports setting expandable string values. Compare\n        &#39; the output from this value with the previous string value.\n        rk.SetValue(&quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.ExpandString)\n        \n        \n        &#39; Display all name/value pairs stored in the test key, with each\n        &#39; registry data type in parentheses.\n        &#39;\n        Dim valueNames As String() = rk.GetValueNames()\n        Dim s As String\n        For Each s In  valueNames\n            Dim rvk As RegistryValueKind = rk.GetValueKind(s)\n            Select Case rvk\n                Case RegistryValueKind.MultiString\n                    Dim values As String() = CType(rk.GetValue(s), String())\n                    Console.Write(vbCrLf &amp; &quot; {0} ({1}) =&quot;, s, rvk)\n                    For i As Integer = 0 To values.Length - 1\n                        If i &lt;&gt; 0 Then Console.Write(&quot;,&quot;)\n                        Console.Write(&quot; &quot;&quot;{0}&quot;&quot;&quot;, values(i))\n                    Next i\n                    Console.WriteLine()\n                \n                Case RegistryValueKind.Binary\n                    Dim bytes As Byte() = CType(rk.GetValue(s), Byte())\n                    Console.Write(vbCrLf &amp; &quot; {0} ({1}) =&quot;, s, rvk)\n                    For i As Integer = 0 To bytes.Length - 1\n                        &#39; Display each byte as two hexadecimal digits.\n                        Console.Write(&quot; {0:X2}&quot;, bytes(i))\n                    Next i\n                    Console.WriteLine()\n                \n                Case Else\n                    Console.WriteLine(vbCrLf &amp; &quot; {0} ({1}) = {2}&quot;, s, rvk, rk.GetValue(s))\n            End Select\n        Next s\n    End Sub &#39;Main\nEnd Class &#39;Example\n\n&#39;\n&#39;This code example produces the following output (some output is omitted):\n&#39;\n&#39; QuadWordValue (QWord) = 42\n&#39;\n&#39; DWordValue (DWord) = 42\n&#39;\n&#39; MultipleStringValue (MultiString) = &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n&#39;\n&#39; BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n&#39;\n&#39; StringValue (String) = The path is %PATH%\n&#39;\n&#39; ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n&#39; [***The remainder of this output is omitted.***]\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_GetValue_System_String_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the value associated with the specified name. If the name is not found, returns the default value that you provide.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (string name, object defaultValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the value to retrieve. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to return if <code>name</code> does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value associated with <code>name</code>, with any embedded environment variables left unexpanded, or <code>defaultValue</code> if <code>name</code> is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read from the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value has been marked for deletion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload of <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValue_\" data-linktype=\"relative-path\">GetValue</a> to handle the case where a name does not exist yet â€” for example, the first time your application is run. Whenever you call this overload, use the <code>defaultValue</code> parameter to specify the value to return if <code>name</code> does not exist.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string &quot;(Default)&quot; appears instead of a name. To retrieve this unnamed value, specify either <code>null</code> or the empty string (&quot;&quot;) for <code>name</code>.  </p>\n</div>\n<p> When the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method retrieves expandable string values (<a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>), it expands environment strings using data from the local environment. To retrieve expandable string values from the registry on a remote computer, use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValue_\" data-linktype=\"relative-path\">GetValue</a> overload to specify that you do not want environment strings expanded.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a value containing expandable references to environment variables has been stored as a string (<a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>), rather than as an expandable string (<a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>), the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method does not expand it. You can expand such a string after it has been retrieved by calling the <a class=\"xref\" href=\"system.environment#System_Environment_ExpandEnvironmentVariables_\" data-linktype=\"relative-path\">ExpandEnvironmentVariables</a> method.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The recommended way to retrieve data from the <a class=\"xref\" href=\"microsoft.win32.registry#Microsoft_Win32_Registry_PerformanceData\" data-linktype=\"relative-path\">PerformanceData</a> key is to use the <a class=\"xref\" href=\"system.diagnostics.performancecounter\" data-linktype=\"relative-path\">PerformanceCounter</a> class rather than the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method.  </p>\n<p> GetValue does not support reading values of type REG_NONE or REG_LINK.  In both cases, the default value (<code>null</code>) is returned instead of the actual value.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a test key with a value and retrieves that value. The example then attempts to retrieve a nonexistent value from the key; in this case the GetValue method returns the specified default value.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic RegistryKey.GetValue Example#1\">using System;\nusing Microsoft.Win32;\n\nclass RegGetDef\n{\n    public static void Main()\n    {\n        // Create a reference to a valid key.  In order for this code to\n        // work, the indicated key must have been created previously.\n        // The key name is not case-sensitive.\n        RegistryKey rk = Registry.LocalMachine.OpenSubKey(&quot;Software\\\\myTestKey&quot;, false);\n        // Get the value from the specified name/value pair in the key.\n\n        string valueName = &quot;myTestValue&quot;;\n\n        Console.WriteLine(&quot;Retrieving registry value ...&quot;);\n        Console.WriteLine();\n        object o = rk.GetValue(valueName);\n        Console.WriteLine(&quot;Object Type = &quot; + o.GetType().FullName);\n        Console.WriteLine();\n        switch (rk.GetValueKind(valueName))\n        {\n            case RegistryValueKind.String:\n            case RegistryValueKind.ExpandString:\n                Console.WriteLine(&quot;Value = &quot; + o);\n                break;\n            case RegistryValueKind.Binary:\n                foreach (byte b in (byte[])o)\n                {\n                    Console.Write(&quot;{0:x2} &quot;, b);\n                }\n                Console.WriteLine();\n                break;\n            case RegistryValueKind.DWord:\n                Console.WriteLine(&quot;Value = &quot; + Convert.ToString((Int32)o));\n                break;\n            case RegistryValueKind.QWord:\n                Console.WriteLine(&quot;Value = &quot; + Convert.ToString((Int64)o));\n                break;\n            case RegistryValueKind.MultiString:\n                foreach (string s in (string[])o)\n                {\n                    Console.Write(&quot;[{0:s}], &quot;, s);\n                }\n                Console.WriteLine();\n                break;\n            default:\n                Console.WriteLine(&quot;Value = (Unknown)&quot;);\n                break;\n        }\n\n\n        // Attempt to retrieve a value that does not exist; the specified\n        // default value is returned.\n        string def = (string)rk.GetValue(&quot;notavalue&quot;, &quot;The default to return&quot;);\n        Console.WriteLine();\n        Console.WriteLine(def);\n        \n        rk.Close();\n    }\n}\n/*\nOutput:\nRetrieving registry value ...\n\nObject Type = System.String\n\nValue = testData\n\nThe default to return\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic RegistryKey.GetValue Example#1\">using namespace System;\nusing namespace Microsoft::Win32;\n\npublic ref class RegGetDef\n{\npublic:\n    static void Main()\n    {\n        // Create a reference to a valid key.  In order for this code to\n        // work, the indicated key must have been created previously.\n        // The key name is not case-sensitive.\n        RegistryKey^ rk = Registry::LocalMachine-&gt;OpenSubKey(&quot;Software\\\\myTestKey&quot;, false);\n        // Get the value from the specified name/value pair in the key.\n        String^ valueName = &quot;myTestValue&quot;;\n\n        Console::WriteLine(&quot;Retrieving registry value ...&quot;);\n        Console::WriteLine();\n        Object^ o = rk-&gt;GetValue(valueName);\n        Console::WriteLine(&quot;Object Type = &quot; + o-&gt;GetType()-&gt;FullName);\n        Console::WriteLine();\n        switch (rk-&gt;GetValueKind(valueName))\n        {\n            case RegistryValueKind::String:\n            case RegistryValueKind::ExpandString:\n                Console::WriteLine(&quot;Value = &quot; + o);\n                break;\n            case RegistryValueKind::Binary:\n                for each (Byte^ b in (array&lt;Byte^&gt;^)o)\n                {\n                    Console::Write(&quot;{0:x2} &quot;, b);\n                }\n                Console::WriteLine();\n                break;\n            case RegistryValueKind::DWord:\n                Console::WriteLine(&quot;Value = &quot; + Convert::ToString((Int32^)o));\n                break;\n            case RegistryValueKind::QWord:\n                Console::WriteLine(&quot;Value = &quot; + Convert::ToString((Int64^)o));\n                break;\n            case RegistryValueKind::MultiString:\n                for each (String^ s in (array&lt;String^&gt;^)o)\n                {\n                    Console::Write(&quot;[{0:s}], &quot;, s);\n                }\n                Console::WriteLine();\n                break;\n            default:\n                Console::WriteLine(&quot;Value = (Unknown)&quot;);\n                break;\n        }\n\n        // Attempt to retrieve a value that does not exist; the specified\n        // default value is returned.\n        String^ def = (String^)rk-&gt;GetValue(&quot;notavalue&quot;, &quot;The default to return&quot;);\n        Console::WriteLine();\n        Console::WriteLine(def);\n        \n        rk-&gt;Close();\n    }\n};\n\nint main()\n{\n    RegGetDef::Main();\n}\n/*\nOutput:\nRetrieving registry value ...\n\nObject Type = System.String\n\nValue = testData\n\nThe default to return\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic RegistryKey.GetValue Example#1\">Imports System\nImports Microsoft.Win32\n\nPublic Class RegGetDef\n    Public Shared Sub Main()\n        &#39; Create a reference to a valid key.  In order for this code to\n        &#39; work, the indicated key must have been created previously.\n        &#39; The key name is not case-sensitive.\n        Dim rk As RegistryKey = Registry.LocalMachine.OpenSubKey(&quot;Software\\myTestKey&quot;, false)\n\n        &#39; Get the value from the specified name/value pair in the key.\n        Dim valueName As String = &quot;myTestValue&quot;\n\n        Console.WriteLine(&quot;Retrieving registry value ...&quot;)\n        Console.WriteLine()\n        Dim o As Object = rk.GetValue(valueName)\n        Console.WriteLine(&quot;Object Type = &quot; + o.GetType().FullName)\n        Console.WriteLine()\n        Select Case rk.GetValueKind(valueName)\n            Case RegistryValueKind.String\n            Case RegistryValueKind.ExpandString\n                Console.WriteLine(&quot;Value = &quot; + o)\n            Case RegistryValueKind.Binary\n                For Each b As Byte In CType(o,Byte())\n                    Console.Write(&quot;{0:x2} &quot;, b)\n                Next b\n                Console.WriteLine()\n            Case RegistryValueKind.DWord\n                Console.WriteLine(&quot;Value = &quot; + Convert.ToString(CType(o,Int32)))\n            Case RegistryValueKind.QWord\n                Console.WriteLine(&quot;Value = &quot; + Convert.ToString(CType(o,Int64)))\n            Case RegistryValueKind.MultiString\n                For Each s As String In CType(o,String())\n                    Console.Write(&quot;[{0:s}], &quot;, s)\n                Next s\n                Console.WriteLine()\n            Case Else\n                Console.WriteLine(&quot;Value = (Unknown)&quot;)\n        End Select\n\n        &#39; Attempt to retrieve a value that does not exist; the specified\n        &#39; default value is returned.\n        Dim Def As String = rk.GetValue(&quot;notavalue&quot;, &quot;The default to return&quot;)\n        Console.WriteLine()\n        Console.WriteLine(def)\n        \n        rk.Close()\n    End Sub\nEnd Class\n&#39;\n&#39; Output:\n&#39; Retrieving registry value ...\n&#39;\n&#39; Object Type = System.String\n&#39;\n&#39; Value = testData\n&#39;\n&#39;The default to return\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_GetValue_System_String_System_Object_Microsoft_Win32_RegistryValueOptions_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(String,Object,RegistryValueOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the value associated with the specified name and retrieval options. If the name is not found, returns the default value that you provide.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (string name, object defaultValue, Microsoft.Win32.RegistryValueOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the value to retrieve. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to return if <code>name</code> does not exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryvalueoptions\" data-linktype=\"relative-path\">RegistryValueOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies optional processing of the retrieved value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value associated with <code>name</code>, processed according to the specified <code>options</code>, or <code>defaultValue</code> if <code>name</code> is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read from the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value has been marked for deletion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>options</code> is not a valid <a class=\"xref\" href=\"microsoft.win32.registryvalueoptions\" data-linktype=\"relative-path\">RegistryValueOptions</a> value; for example, an invalid value is cast to <a class=\"xref\" href=\"microsoft.win32.registryvalueoptions\" data-linktype=\"relative-path\">RegistryValueOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to specify special processing of the retrieved value. For example, you can specify <a class=\"xref\" href=\"microsoft.win32.registryvalueoptions\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueOptions</a> when retrieving a registry value of type <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a> to retrieve the string without expanding embedded environment variables.  </p>\n<p> Use the <code>defaultValue</code> parameter to specify the value to return if <code>name</code> does not exist.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string &quot;(Default)&quot; appears instead of a name. To retrieve this unnamed value, specify either <code>null</code> or the empty string (&quot;&quot;) for <code>name</code>.  </p>\n<p> GetValue does not support reading values of type REG_NONE or REG_LINK.  In both cases, the default value (<code>null</code>) is returned instead of the actual value.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample creates a test key, adds a value with an embedded environment variable, and retrieves the value in both expanded and unexpanded forms.  </p>\n<pre><code class=\"lang-cs\" name=\"RegistryValueOptions#1\">using System;\nusing Microsoft.Win32;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryValueOptionsExample&quot;, false);\n        RegistryKey rk = \n            Registry.CurrentUser.CreateSubKey(&quot;RegistryValueOptionsExample&quot;);\n\n        // Add a value that contains an environment variable.\n        rk.SetValue(&quot;ExpandValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.ExpandString);\n\n        // Retrieve the value, first without expanding the environment \n        // variable and then expanding it.\n        Console.WriteLine(&quot;Unexpanded: \\&quot;{0}\\&quot;&quot;, \n            rk.GetValue(&quot;ExpandValue&quot;, &quot;No Value&quot;, \n            RegistryValueOptions.DoNotExpandEnvironmentNames));\n        Console.WriteLine(&quot;Expanded: \\&quot;{0}\\&quot;&quot;, rk.GetValue(&quot;ExpandValue&quot;));\n    } //Main\n} //Example\n</code></pre><pre><code class=\"lang-cpp\" name=\"RegistryValueOptions#1\">#using &lt;Microsoft.VisualBasic.dll&gt;\n\nusing namespace System;\nusing namespace Microsoft::Win32;\nusing namespace Microsoft::VisualBasic;\n\nint main()\n{\n    // Delete and recreate the test key.\n    Registry::CurrentUser-&gt;DeleteSubKey( L&quot;RegistryValueOptionsExample&quot;, false );\n    RegistryKey ^ rk = \n        Registry::CurrentUser-&gt;CreateSubKey( L&quot;RegistryValueOptionsExample&quot; );\n   \n    // Add a value that contains an environment variable.\n    rk-&gt;SetValue( L&quot;ExpandValue&quot;, L&quot;The path is %PATH%&quot;, \n        RegistryValueKind::ExpandString );\n   \n    // Retrieve the value, first without expanding the environment\n    // variable and then expanding it.\n    Console::WriteLine( L&quot;Unexpanded: \\&quot;{0}\\&quot;&quot;, \n                        rk-&gt;GetValue( L&quot;ExpandValue&quot;, \n                        L&quot;No Value&quot;, \n                        RegistryValueOptions::DoNotExpandEnvironmentNames ) );\n    Console::WriteLine( L&quot;Expanded: \\&quot;{0}\\&quot;&quot;, rk-&gt;GetValue( L&quot;ExpandValue&quot; ) );\n \n    return 0;\n} //Main\n</code></pre><pre><code class=\"lang-vb\" name=\"RegistryValueOptions#1\">Imports System\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryValueOptionsExample&quot;, False)\n        Dim rk As RegistryKey = _\n            Registry.CurrentUser.CreateSubKey(&quot;RegistryValueOptionsExample&quot;)\n\n        &#39; Add a value that contains an environment variable.\n        rk.SetValue(&quot;ExpandValue&quot;, &quot;The path is %PATH%&quot;, _\n            RegistryValueKind.ExpandString)\n\n        &#39; Retrieve the value, first without expanding the environment \n        &#39; variable and then expanding it.\n        Console.WriteLine(&quot;Unexpanded: &quot;&quot;{0}&quot;&quot;&quot;, _\n            rk.GetValue(&quot;ExpandValue&quot;, &quot;No Value&quot;, _\n            RegistryValueOptions.DoNotExpandEnvironmentNames))\n        Console.WriteLine(&quot;Expanded: &quot;&quot;{0}&quot;&quot;&quot;, rk.GetValue(&quot;ExpandValue&quot;))\n    End Sub &#39;Main\nEnd Class &#39;Example\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_GetValueKind_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_GetValueKind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValueKind(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the registry data type of the value associated with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryValueKind GetValueKind (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the value whose registry data type is to be retrieved. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">RegistryValueKind</a></div>\r\n                  </div>\r\n                  <p>The registry data type of the value associated with <code>name</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read from the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The subkey that contains the specified value does not exist.  </p>\n<p> -or-  </p>\n<p> The name/value pair specified by <code>name</code> does not exist.  </p>\n<p> This exception is not thrown on Windows 95, Windows 98, or Windows Millennium Edition.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string &quot;(Default)&quot; appears instead of a name. To retrieve the registry data type of this unnamed value, specify either <code>null</code> or the empty string (&quot;&quot;) for <code>name</code>.  </p>\n</div>\n<p> For a description of supported registry data types, please see the <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">RegistryValueKind</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a test key and adds values of different data types to the key. The example then reads the name/value pairs and displays them to the console, using the GetValueKind method to retrieve the corresponding registry data types.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryValueKind#1\">using namespace System;\nusing namespace Microsoft::Win32;\nint main()\n{\n   \n   // Delete and recreate the test key.\n   Registry::CurrentUser-&gt;DeleteSubKey( &quot;RegistryValueKindExample&quot;, false );\n   RegistryKey ^ rk = Registry::CurrentUser-&gt;CreateSubKey( &quot;RegistryValueKindExample&quot; );\n   \n   // Create name/value pairs.\n   // This overload supports QWord (long) values. \n   rk-&gt;SetValue( &quot;QuadWordValue&quot;, 42, RegistryValueKind::QWord );\n   \n   // The following SetValue calls have the same effect as using the\n   // SetValue overload that does not specify RegistryValueKind.\n   //\n   rk-&gt;SetValue( &quot;DWordValue&quot;, 42, RegistryValueKind::DWord );\n   rk-&gt;SetValue( &quot;MultipleStringValue&quot;, gcnew array&lt;String^&gt;{\n      &quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;\n   }, RegistryValueKind::MultiString );\n   rk-&gt;SetValue( &quot;BinaryValue&quot;, gcnew array&lt;Byte&gt;{\n      10,43,44,45,14,255\n   }, RegistryValueKind::Binary );\n   rk-&gt;SetValue( &quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind::String );\n   \n   // This overload supports setting expandable string values. Compare\n   // the output from this value with the previous string value.\n   rk-&gt;SetValue( &quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind::ExpandString );\n   \n   // Display all the name/value pairs stored in the test key, with the\n   // registry data type in parentheses.\n   //\n   array&lt;String^&gt;^valueNames = rk-&gt;GetValueNames();\n   System::Collections::IEnumerator^ myEnum = valueNames-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      RegistryValueKind rvk = rk-&gt;GetValueKind( s );\n      switch ( rvk )\n      {\n         case RegistryValueKind::MultiString:\n         {\n            array&lt;String^&gt;^values = (array&lt;String^&gt;^)rk-&gt;GetValue( s );\n            Console::Write( &quot;\\r<br> {0} ({1}) =&quot;, s, rvk );\n            for ( int i = 0; i &lt; values-&gt;Length; i++ )\n            {\n               if (i != 0) Console::Write(&quot;,&quot;);\n               Console::Write( &quot; \\&quot;{0}\\&quot;&quot;, values[ i ] );\n\n            }\n            Console::WriteLine();\n            break;\n         }\n         case RegistryValueKind::Binary:\n         {\n            array&lt;Byte&gt;^bytes = (array&lt;Byte&gt;^)rk-&gt;GetValue( s );\n            Console::Write( &quot;\\r<br> {0} ({1}) =&quot;, s, rvk );\n            for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n            {\n               \n               // Display each byte as two hexadecimal digits.\n               Console::Write( &quot; {0:X2}&quot;, bytes[ i ] );\n\n            }\n            Console::WriteLine();\n            break;\n         }\n         default:\n            Console::WriteLine( &quot;\\r<br> {0} ({1}) = {2}&quot;, s, rvk, rk-&gt;GetValue( s ) );\n            break;\n      }\n   }\n}\n/*\n\nThis code example produces the following output:\n QuadWordValue (QWord) = 42\n\n DWordValue (DWord) = 42\n\n MultipleStringValue (MultiString) =, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n\n BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n\n StringValue (String) = The path is %PATH%\n\n ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n [***The remainder of this output is omitted.***]\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryValueKind#1\">using System;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryValueKindExample&quot;, false);\n        RegistryKey rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryValueKindExample&quot;);\n\n        // Create name/value pairs.\n\n        // This overload supports QWord (long) values. \n        rk.SetValue(&quot;QuadWordValue&quot;, 42, RegistryValueKind.QWord);\n\n        // The following SetValue calls have the same effect as using the\n        // SetValue overload that does not specify RegistryValueKind.\n        //\n        rk.SetValue(&quot;DWordValue&quot;, 42, RegistryValueKind.DWord);\n        rk.SetValue(&quot;MultipleStringValue&quot;, new string[] {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;}, RegistryValueKind.MultiString);\n        rk.SetValue(&quot;BinaryValue&quot;, new byte[] {10, 43, 44, 45, 14, 255}, RegistryValueKind.Binary);\n        rk.SetValue(&quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.String);\n\n        // This overload supports setting expandable string values. Compare\n        // the output from this value with the previous string value.\n        rk.SetValue(&quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.ExpandString);\n\n\n        // Display all name/value pairs stored in the test key, with each\n        // registry data type in parentheses.\n        //\n        string[] valueNames = rk.GetValueNames();\n        foreach (string s in valueNames)\n        {\n            RegistryValueKind rvk = rk.GetValueKind(s);\n            switch (rvk)\n            {\n                case RegistryValueKind.MultiString :\n                    string[] values = (string[]) rk.GetValue(s);\n                    Console.Write(&quot;\\r<br> {0} ({1}) =&quot;, s, rvk);\n                    for (int i = 0; i &lt; values.Length; i++)\n                    {\n                        if (i != 0) Console.Write(&quot;,&quot;);\n                        Console.Write(&quot; \\&quot;{0}\\&quot;&quot;, values[i]);\n                    }\n                    Console.WriteLine();\n                    break;\n                \n                case RegistryValueKind.Binary :\n                    byte[] bytes = (byte[]) rk.GetValue(s);\n                    Console.Write(&quot;\\r<br> {0} ({1}) =&quot;, s, rvk);\n                    for (int i = 0; i &lt; bytes.Length; i++)\n                    {\n                        // Display each byte as two hexadecimal digits.\n                        Console.Write(&quot; {0:X2}&quot;, bytes[i]);\n                    }\n                    Console.WriteLine();\n                    break;\n                \n                default :\n                    Console.WriteLine(&quot;\\r<br> {0} ({1}) = {2}&quot;, s, rvk, rk.GetValue(s));\n                    break;\n            }\n        }\n    }\n}\n/*\n\nThis code example produces the following output:\n QuadWordValue (QWord) = 42\n\n DWordValue (DWord) = 42\n\n MultipleStringValue (MultiString) =, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n\n BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n\n StringValue (String) = The path is %PATH%\n\n ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n [***The remainder of this output is omitted.***]\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryValueKind#1\">Imports System\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryValueKindExample&quot;, False)\n        Dim rk As RegistryKey = Registry.CurrentUser.CreateSubKey(&quot;RegistryValueKindExample&quot;)\n        \n        &#39; Create name/value pairs.\n        &#39; This overload supports QWord (long) values. \n        rk.SetValue(&quot;QuadWordValue&quot;, 42, RegistryValueKind.QWord)\n        \n        &#39; The following SetValue calls have the same effect as using the\n        &#39; SetValue overload that does not specify RegistryValueKind.\n        &#39;\n        rk.SetValue(&quot;DWordValue&quot;, 42, RegistryValueKind.DWord)\n        rk.SetValue(&quot;MultipleStringValue&quot;, New String() {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;}, RegistryValueKind.MultiString)\n        rk.SetValue(&quot;BinaryValue&quot;, New Byte() {10, 43, 44, 45, 14, 255}, RegistryValueKind.Binary)\n        rk.SetValue(&quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.String) \n        \n        &#39; This overload supports setting expandable string values. Compare\n        &#39; the output from this value with the previous string value.\n        rk.SetValue(&quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.ExpandString)\n        \n        \n        &#39; Display all name/value pairs stored in the test key, with each\n        &#39; registry data type in parentheses.\n        &#39;\n        Dim valueNames As String() = rk.GetValueNames()\n        Dim s As String\n        For Each s In  valueNames\n            Dim rvk As RegistryValueKind = rk.GetValueKind(s)\n            Select Case rvk\n                Case RegistryValueKind.MultiString\n                    Dim values As String() = CType(rk.GetValue(s), String())\n                    Console.Write(vbCrLf &amp; &quot; {0} ({1}) =&quot;, s, rvk)\n                    For i As Integer = 0 To values.Length - 1\n                        If i &lt;&gt; 0 Then Console.Write(&quot;,&quot;)\n                        Console.Write(&quot; &quot;&quot;{0}&quot;&quot;&quot;, values(i))\n                    Next i\n                    Console.WriteLine()\n                \n                Case RegistryValueKind.Binary\n                    Dim bytes As Byte() = CType(rk.GetValue(s), Byte())\n                    Console.Write(vbCrLf &amp; &quot; {0} ({1}) =&quot;, s, rvk)\n                    For i As Integer = 0 To bytes.Length - 1\n                        &#39; Display each byte as two hexadecimal digits.\n                        Console.Write(&quot; {0:X2}&quot;, bytes(i))\n                    Next i\n                    Console.WriteLine()\n                \n                Case Else\n                    Console.WriteLine(vbCrLf &amp; &quot; {0} ({1}) = {2}&quot;, s, rvk, rk.GetValue(s))\n            End Select\n        Next s\n    End Sub &#39;Main\nEnd Class &#39;Example\n\n&#39;\n&#39;This code example produces the following output (some output is omitted):\n&#39;\n&#39; QuadWordValue (QWord) = 42\n&#39;\n&#39; DWordValue (DWord) = 42\n&#39;\n&#39; MultipleStringValue (MultiString) = &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n&#39;\n&#39; BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n&#39;\n&#39; StringValue (String) = The path is %PATH%\n&#39;\n&#39; ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n&#39; [***The remainder of this output is omitted.***]\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_GetValueNames\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_GetValueNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValueNames()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of strings that contains all the value names associated with this key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] GetValueNames ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of strings that contains the value names for the current key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read from the registry key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>A system error occurred; for example, the current key has been deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no value names for the key are found, an empty array is returned.  </p>\n<p> A registry key can have a default value â€” that is, a name/value pair in which the name is the empty string (&quot;&quot;). If a default value has been set for a registry key, the array returned by the GetValueNames method includes the empty string.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#2\">   // Print the information from the Test9999 subkey.\n   Console::WriteLine( &quot;There are {0} subkeys under Test9999.&quot;, test9999-&gt;SubKeyCount.ToString() );\n   array&lt;String^&gt;^subKeyNames = test9999-&gt;GetSubKeyNames();\n   for ( int i = 0; i &lt; subKeyNames-&gt;Length; i++ )\n   {\n      RegistryKey ^ tempKey = test9999-&gt;OpenSubKey( subKeyNames[ i ] );\n      Console::WriteLine( &quot;<br>There are {0} values for {1}.&quot;, tempKey-&gt;ValueCount.ToString(), tempKey-&gt;Name );\n      array&lt;String^&gt;^valueNames = tempKey-&gt;GetValueNames();\n      for ( int j = 0; j &lt; valueNames-&gt;Length; j++ )\n      {\n         Console::WriteLine( &quot;{0,-8}: {1}&quot;, valueNames[ j ], tempKey-&gt;GetValue( valueNames[ j ] )-&gt;ToString() );\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#2\">        // Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under {1}.&quot;, \n            test9999.SubKeyCount.ToString(), test9999.Name);\n        foreach(string subKeyName in test9999.GetSubKeyNames())\n        {\n            using(RegistryKey \n                tempKey = test9999.OpenSubKey(subKeyName))\n            {\n                Console.WriteLine(&quot;<br>There are {0} values for {1}.&quot;, \n                    tempKey.ValueCount.ToString(), tempKey.Name);\n                foreach(string valueName in tempKey.GetValueNames())\n                {\n                    Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, \n                        tempKey.GetValue(valueName).ToString());\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#2\">        &#39; Print the information from the Test9999 subkey.\n        Console.WriteLine(&quot;There are {0} subkeys under Test9999.&quot;, _\n            test9999.SubKeyCount.ToString())\n        For Each subKeyName As String In test9999.GetSubKeyNames()\n            Dim tempKey As RegistryKey = _\n                test9999.OpenSubKey(subKeyName)\n            Console.WriteLine(vbCrLf &amp; &quot;There are {0} values for &quot; &amp; _\n                &quot;{1}.&quot;, tempKey.ValueCount.ToString(), tempKey.Name)\n            For Each valueName As String In tempKey.GetValueNames()\n                Console.WriteLine(&quot;{0,-8}: {1}&quot;, valueName, _\n                    tempKey.GetValue(valueName).ToString())\n            Next\n        Next\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_OpenBaseKey_Microsoft_Win32_RegistryHive_Microsoft_Win32_RegistryView_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_OpenBaseKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenBaseKey(RegistryHive,RegistryView)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a new <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that represents the requested key on the local machine with the specified view.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Microsoft.Win32.RegistryKey OpenBaseKey (Microsoft.Win32.RegistryHive hKey, Microsoft.Win32.RegistryView view);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryhive\" data-linktype=\"relative-path\">RegistryHive</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The HKEY to open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>view</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The registry view to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The requested registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hKey</code> or <code>view</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to perform this action.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_OpenRemoteBaseKey_Microsoft_Win32_RegistryHive_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_OpenRemoteBaseKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenRemoteBaseKey(RegistryHive,String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a new <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that represents the requested key on a remote machine.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Microsoft.Win32.RegistryKey OpenRemoteBaseKey (Microsoft.Win32.RegistryHive hKey, string machineName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryhive\" data-linktype=\"relative-path\">RegistryHive</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The HKEY to open, from the <a class=\"xref\" href=\"microsoft.win32.registryhive\" data-linktype=\"relative-path\">RegistryHive</a> enumeration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>machineName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The remote machine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The requested registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hKey</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>machineName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>machineName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the proper permissions to perform this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The local machine registry is opened if <code>machineName</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>. The requested key must be a root key on the remote machine, and is identified by the appropriate <a class=\"xref\" href=\"microsoft.win32.registryhive\" data-linktype=\"relative-path\">RegistryHive</a> value.  </p>\n<p> In order for a key to be opened remotely, both the server and client machines must be running the remote registry service, and have remote administration enabled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to open a registry key on a remote computer and enumerate the values of the key. The remote computer must be running the remote registry service. Specify the name of the remote computer as a command-line argument when invoking the program.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey.OpenRemoteBaseKey#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Permissions;\nusing namespace Microsoft::Win32;\n\n\nint main( int argc, char *argv[] )\n{\n   RegistryKey ^ environmentKey;\n   \n   // Check that an argument was specified when the \n   // program was invoked.\n   if ( argc == 1 )\n   {\n      Console::WriteLine( &quot;Error: The name of the remote computer &quot;\n      &quot;must be specified as input on the command line.&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      \n      // Open HKEY_CURRENT_USER\\Environment on a remote computer.\n      environmentKey = RegistryKey::OpenRemoteBaseKey( RegistryHive::CurrentUser, gcnew String(argv[ 1 ]) )-&gt;OpenSubKey( &quot;Environment&quot; );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine(  &quot;{0}: {1}&quot;, e-&gt;GetType()-&gt;Name, e-&gt;Message );\n      return  -1;\n   }\n\n   \n   // Print the values.\n   Console::WriteLine( &quot;<br>There are {0} values for {1}.&quot;, environmentKey-&gt;ValueCount.ToString(), environmentKey-&gt;Name );\n   array&lt;String^&gt;^valueNames = environmentKey-&gt;GetValueNames();\n   for ( int i = 0; i &lt; environmentKey-&gt;ValueCount; i++ )\n   {\n      Console::WriteLine(  &quot;{0,-20}: {1}&quot;, valueNames[ i ], environmentKey-&gt;GetValue( valueNames[ i ] )-&gt;ToString() );\n\n   }\n   \n   // Close the registry key.\n   environmentKey-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey.OpenRemoteBaseKey#1\">using System;\nusing System.IO;\nusing System.Security.Permissions;\nusing Microsoft.Win32;\n\n\nclass RemoteKey\n{\n    static void Main(string[] args)\n    {\n        RegistryKey environmentKey;\n        string remoteName;\n\n        // Check that an argument was specified when the \n        // program was invoked.\n        if(args.Length == 0)\n        {\n            Console.WriteLine(&quot;Error: The name of the remote &quot; +\n                &quot;computer must be specified when the program is &quot; +\n                &quot;invoked.&quot;);\n            return;\n        }\n        else\n        {\n            remoteName = args[0];\n        }\n\n        try\n        {\n            // Open HKEY_CURRENT_USER\\Environment \n            // on a remote computer.\n            environmentKey = RegistryKey.OpenRemoteBaseKey(\n                RegistryHive.CurrentUser, remoteName).OpenSubKey(\n                &quot;Environment&quot;);\n        }\n        catch(IOException e)\n        {\n            Console.WriteLine(&quot;{0}: {1}&quot;, \n                e.GetType().Name, e.Message);\n            return;\n        }\n\n        // Print the values.\n        Console.WriteLine(&quot;<br>There are {0} values for {1}.&quot;, \n            environmentKey.ValueCount.ToString(), \n            environmentKey.Name);\n        foreach(string valueName in environmentKey.GetValueNames())\n        {\n            Console.WriteLine(&quot;{0,-20}: {1}&quot;, valueName, \n                environmentKey.GetValue(valueName).ToString());\n        }\n\n        // Close the registry key.\n        environmentKey.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey.OpenRemoteBaseKey#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.IO\nImports System.Security.Permissions\nImports Microsoft.Win32\n\n\nPublic Class RemoteKey\n\n    Shared Sub Main(commandLineArgs As String())\n    \n        Dim environmentKey As RegistryKey\n\n        &#39; Check that an argument was specified when the \n        &#39; program was invoked.\n        If commandLineArgs.Length = 0 Then\n            Console.WriteLine(&quot;Error: The name of the remote &quot; &amp; _\n                &quot;computer must be specified as input on the &quot; &amp; _\n                &quot;command line.&quot;)\n            Return\n        End If\n\n        Try\n            &#39; Open HKEY_CURRENT_USER\\Environment on a remote computer.\n            environmentKey = RegistryKey.OpenRemoteBaseKey( _\n                RegistryHive.CurrentUser, _\n                commandLineArgs(0)).OpenSubKey(&quot;Environment&quot;)\n        Catch ex As IOException\n            Console.WriteLine(&quot;{0}: {1}&quot;, _\n                ex.GetType().Name, ex.Message)\n            Return\n        End Try\n\n        &#39; Print the values.\n        Console.WriteLine(&quot;<br>There are {0} values For {1}.&quot;, _\n            environmentKey.ValueCount.ToString(), environmentKey.Name)\n\n        For Each valueName As String In environmentKey.GetValueNames()\n            Console.WriteLine(&quot;{0,-20}: {1}&quot;, valueName, _\n                environmentKey.GetValue(valueName).ToString())\n        Next\n\n        &#39; Close the registry key.\n        environmentKey.Close()\n    \n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_OpenRemoteBaseKey_Microsoft_Win32_RegistryHive_System_String_Microsoft_Win32_RegistryView_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_OpenRemoteBaseKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenRemoteBaseKey(RegistryHive,String,RegistryView)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a new registry key that represents the requested key on a remote machine with the specified view.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Microsoft.Win32.RegistryKey OpenRemoteBaseKey (Microsoft.Win32.RegistryHive hKey, string machineName, Microsoft.Win32.RegistryView view);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryhive\" data-linktype=\"relative-path\">RegistryHive</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The HKEY to open from the <a class=\"xref\" href=\"microsoft.win32.registryhive\" data-linktype=\"relative-path\">RegistryHive</a> enumeration..</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>machineName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The remote machine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>view</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The registry view to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The requested registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>hKey</code> or <code>view</code> is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>machineName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>machineName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the necessary registry rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the required permissions to perform this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The local machine registry is opened if <code>machineName</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>. The requested key must be a root key on the remote machine, and is identified by the appropriate <a class=\"xref\" href=\"microsoft.win32.registryhive\" data-linktype=\"relative-path\">RegistryHive</a> value.  </p>\n<p> In order for a key to be opened remotely, both the server and client machines must be running the remote registry service, and have remote administration enabled.  </p>\n<p> On the 64-bit versions of Windows, portions of the registry are stored separately for 32-bit and 64-bit applications. There is a 32-bit view for 32-bit applications and a 64-bit view for 64-bit applications. If <code>view</code> is <a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a> but the remote machine is running a 32-bit operating system, the returned key will use the <a class=\"xref\" href=\"microsoft.win32.registryview\" data-linktype=\"relative-path\">RegistryView</a> view.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_OpenSubKey_System_String_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_OpenSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenSubKey(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a subkey as read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey OpenSubKey (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to open as read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The subkey requested, or <code>null</code> if the operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read the registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must open a key before it can be manipulated with other methods and properties. To modify a key, you must open it with an overload of the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method that allows you to specify write access, such as the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_\" data-linktype=\"relative-path\">OpenSubKey(String,RegistryKeyPermissionCheck)</a> overload or the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_System_String_System_Boolean_\" data-linktype=\"relative-path\">OpenSubKey(String,Boolean)</a> overload.  </p>\n<p> If the specified subkey cannot be found, then <code>null</code> is returned.  </p>\n<p> In order to use the OpenSubKey method, you must have an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>. To get an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>, use the one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a test key and uses the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method to open it, demonstrating both overloads of the method.  </p>\n<pre><code class=\"lang-cs\" name=\"RegistryKey.OpenSubKey#1\">using System;\nusing Microsoft.Win32;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryOpenSubKeyExample&quot;, false);\n        RegistryKey rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryOpenSubKeyExample&quot;);\n        rk.Close();\n\n        // Obtain an instance of RegistryKey for the CurrentUser registry \n        // root. \n        RegistryKey rkCurrentUser = Registry.CurrentUser;\n\n        // Obtain the test key (read-only) and display it.\n        RegistryKey rkTest = rkCurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;);\n        Console.WriteLine(&quot;Test key: {0}&quot;, rkTest);\n        rkTest.Close();\n        rkCurrentUser.Close();\n\n        // Obtain the test key in one step, using the CurrentUser registry \n        // root.\n        rkTest = Registry.CurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;);\n        Console.WriteLine(&quot;Test key: {0}&quot;, rkTest);\n        rkTest.Close();\n\n        // Open the test key in read/write mode.\n        rkTest = Registry.CurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;, true);\n        rkTest.SetValue(&quot;TestName&quot;, &quot;TestValue&quot;);\n        Console.WriteLine(&quot;Test value for TestName: {0}&quot;, rkTest.GetValue(&quot;TestName&quot;));\n        rkTest.Close();\n    } //Main\n} //Example\n</code></pre><pre><code class=\"lang-vb\" name=\"RegistryKey.OpenSubKey#1\">Imports System\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryOpenSubKeyExample&quot;, False)\n        Dim rk As RegistryKey = Registry.CurrentUser.CreateSubKey(&quot;RegistryOpenSubKeyExample&quot;)\n        rk.Close\n\n        &#39; Obtain an instance of RegistryKey for the CurrentUser registry \n        &#39; root. \n        Dim rkCurrentUser As RegistryKey = Registry.CurrentUser\n\n        &#39; Obtain the test key (read-only) and display it.\n        Dim rkTest As RegistryKey = rkCurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;)\n        Console.WriteLine(&quot;Test key: {0}&quot;, rkTest)\n        rkTest.Close\n        rkCurrentUser.Close\n\n        &#39; Obtain the test key in one step, using the CurrentUser registry \n        &#39; root.\n        rkTest = Registry.CurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;)\n        Console.WriteLine(&quot;Test key: {0}&quot;, rkTest)\n        rkTest.Close\n\n        &#39; Obtain the test key in read/write mode.\n        rkTest = Registry.CurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;, True)\n        rkTest.SetValue(&quot;TestName&quot;, &quot;TestValue&quot;)\n        Console.WriteLine(&quot;Test value for TestName: {0}&quot;, rkTest.GetValue(&quot;TestName&quot;))\n        rkTest.Close\n    End Sub &#39;Main\nEnd Class &#39;Example\n</code></pre><pre><code class=\"lang-cpp\" name=\"RegistryKey.OpenSubKey#1\">#using &lt;Microsoft.VisualBasic.dll&gt;\n\nusing namespace System;\nusing namespace Microsoft::Win32;\nusing namespace Microsoft::VisualBasic;\n\nint main()\n{\n    // Delete and recreate the test key.\n    Registry::CurrentUser-&gt;DeleteSubKey( L&quot;RegistryOpenSubKeyExample&quot;, false );\n    RegistryKey ^ rk = Registry::CurrentUser-&gt;CreateSubKey( L&quot;RegistryOpenSubKeyExample&quot; );\n    rk-&gt;Close();\n\n    // Obtain an instance of RegistryKey for the CurrentUser registry\n    // root.\n    RegistryKey ^ rkCurrentUser = Registry::CurrentUser;\n\n    // Obtain the test key (read-only) and display it.\n    RegistryKey ^ rkTest = rkCurrentUser-&gt;OpenSubKey( L&quot;RegistryOpenSubKeyExample&quot; );\n    Console::WriteLine( L&quot;Test key: {0}&quot;, rkTest );\n    rkTest-&gt;Close();\n    rkCurrentUser-&gt;Close();\n\n    // Obtain the test key in one step, using the CurrentUser registry\n    // root.\n    rkTest = Registry::CurrentUser-&gt;OpenSubKey( L&quot;RegistryOpenSubKeyExample&quot; );\n    Console::WriteLine( L&quot;Test key: {0}&quot;, rkTest );\n    rkTest-&gt;Close();\n\n    // Open the test key in read/write mode.\n    rkTest = Registry::CurrentUser-&gt;OpenSubKey( L&quot;RegistryOpenSubKeyExample&quot;, true );\n    rkTest-&gt;SetValue( L&quot;TestName&quot;, L&quot;TestValue&quot; );\n    Console::WriteLine( L&quot;Test value for TestName: {0}&quot;, rkTest-&gt;GetValue( L&quot;TestName&quot; ) );\n    rkTest-&gt;Close();\n\n    return 0;\n} //Main\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_OpenSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_OpenSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenSubKey(String,RegistryKeyPermissionCheck)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the specified subkey for read or read/write access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey OpenSubKey (string name, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>permissionCheck</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">RegistryKeyPermissionCheck</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the key is opened for read or read/write access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The subkey requested, or <code>null</code> if the operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>permissionCheck</code> contains an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to read the registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than throwing an exception, this method returns <code>null</code> if the requested key does not exist.  </p>\n<p> If <code>permissionCheck</code> is <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>, the key is opened for reading and writing; if <code>permissionCheck</code> is <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a> or <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>, the key is opened for reading unless the parent key was opened with <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>.  </p>\n<p> In order to use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method, you must have an instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class. To get an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>, use one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a subkey containing 100 key/value pairs and closes it. The example opens the subkey with <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">RegistryKeyPermissionCheck</a>, records the time it takes to read all the values, and closes the subkey. The example opens the subkey with <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">RegistryKeyPermissionCheck</a> and records the time it takes to read all the values. Finally, the example computes and displays the percentage improvement.  </p>\n<pre><code class=\"lang-cs\" name=\"RegistryKey.OpenSubKey_PermCheck#1\">using System;\nusing Microsoft.Win32;\nusing System.Diagnostics;\n\npublic class Example\n{\n    public static void Main()\n    {\n        const int LIMIT = 100;\n        RegistryKey cu = Registry.CurrentUser;\n        const string testKey = &quot;RegistryKeyPermissionCheckExample&quot;;\n\n        Console.WriteLine(&quot;Generating {0} key/value pairs.&quot;, LIMIT);\n        RegistryKey rk = cu.CreateSubKey(testKey);\n        for (int i = 0; i &lt; LIMIT; i++)\n        {\n            rk.SetValue(&quot;Key&quot; + i, i);\n        }\n\n        rk.Close();\n\n        Stopwatch s = new Stopwatch();\n\n        // On the default setting, security is checked every time\n        // a key/value pair is read.\n        rk = cu.OpenSubKey(testKey, RegistryKeyPermissionCheck.Default);\n        \n        s.Start();\n        for (int i = 0; i &lt; LIMIT; i++)\n        {\n            rk.GetValue(&quot;Key&quot; + i, i);\n        }\n        s.Stop();\n        rk.Close();\n        long delta1 = s.ElapsedTicks;\n\n        s.Reset();\n\n        // When the key is opened with ReadSubTree, security is \n        // not checked when the values are read.\n        rk = cu.OpenSubKey(testKey, RegistryKeyPermissionCheck.ReadSubTree);\n        \n        s.Start();\n        for (int i = 0; i &lt; LIMIT; i++)\n        {\n            rk.GetValue(&quot;Key&quot; + i, i);\n        }\n        s.Stop();\n        rk.Close();\n        long delta2 = s.ElapsedTicks;\n\n        double faster = (double) (delta1 - delta2) / (double) delta1;\n        Console.WriteLine(&quot;ReadSubTree is {0}% faster for {1} values.&quot;,\n            (faster * 100).ToString(&quot;0.0&quot;), LIMIT);\n\n        cu.DeleteSubKey(testKey);\n    }\n}\n\n/* This code example produces output similar to the following:\n\nGenerating 100 key/value pairs.\nReadSubTree is 23.4% faster for 100 values.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"RegistryKey.OpenSubKey_PermCheck#1\">Imports System\nImports Microsoft.Win32\nImports System.Diagnostics\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        Const LIMIT As Integer = 100\n        Dim cu As RegistryKey = Registry.CurrentUser\n        Const testKey As String = &quot;RegistryKeyPermissionCheckExample&quot;\n        \n        Console.WriteLine(&quot;Generating {0} key/value pairs.&quot;, LIMIT)\n        Dim rk As RegistryKey = cu.CreateSubKey(testKey)\n\n        For i As Integer = 0 To LIMIT\n            rk.SetValue(&quot;Key&quot; &amp; i, i)\n        Next i\n        \n        rk.Close()\n        \n        Dim s As New Stopwatch()\n        \n        &#39; On the default setting, security is checked every time\n        &#39; a key/value pair is read.\n        rk = cu.OpenSubKey(testKey, _\n            RegistryKeyPermissionCheck.Default)\n        \n        s.Start()\n        For i As Integer = 0 To LIMIT\n            rk.GetValue(&quot;Key&quot; &amp; i, i)\n        Next i\n        s.Stop()\n        rk.Close()\n        Dim delta1 As Long = s.ElapsedTicks\n        \n        s.Reset()\n        \n        &#39; When the key is opened with ReadSubTree, security is \n        &#39; not checked when the values are read.\n        rk = cu.OpenSubKey(testKey, _\n            RegistryKeyPermissionCheck.ReadSubTree)\n        \n        s.Start()\n        For i As Integer = 0 To LIMIT\n            rk.GetValue(&quot;Key&quot; &amp; i, i)\n        Next i\n        s.Stop()\n        rk.Close()\n        Dim delta2 As Long = s.ElapsedTicks\n        \n        Dim faster As Double = _\n            CDbl(delta1 - delta2) * 100.0 / CDbl(delta1)\n        Console.WriteLine(&quot;ReadSubTree is {0}% faster for {1} values.&quot;, _\n            faster.ToString(&quot;0.0&quot;), LIMIT)\n        \n        cu.DeleteSubKey(testKey)\n    \n    End Sub \nEnd Class \n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Generating 100 key/value pairs.\n&#39;ReadSubTree is 23.4% faster for 100 values.\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_OpenSubKey_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_OpenSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenSubKey(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a specified subkey, and specifies whether write access is to be applied to the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey OpenSubKey (string name, bool writable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Name or path of the subkey to open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Set to <code>true</code> if you need write access to the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The subkey requested, or <code>null</code> if the operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to access the registry key in the specified mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the requested key does not exist, this method returns <code>null</code> instead of throwing an exception.  </p>\n<p> If <code>writable</code> is <code>true</code>, the key will be opened for reading and writing, otherwise, the key will be opened as read-only.  </p>\n<p> In order to use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method, you must have an instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> method. To get an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>, use one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a test key and uses the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method to open it, demonstrating both overloads of the method.  </p>\n<pre><code class=\"lang-cs\" name=\"RegistryKey.OpenSubKey#1\">using System;\nusing Microsoft.Win32;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryOpenSubKeyExample&quot;, false);\n        RegistryKey rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryOpenSubKeyExample&quot;);\n        rk.Close();\n\n        // Obtain an instance of RegistryKey for the CurrentUser registry \n        // root. \n        RegistryKey rkCurrentUser = Registry.CurrentUser;\n\n        // Obtain the test key (read-only) and display it.\n        RegistryKey rkTest = rkCurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;);\n        Console.WriteLine(&quot;Test key: {0}&quot;, rkTest);\n        rkTest.Close();\n        rkCurrentUser.Close();\n\n        // Obtain the test key in one step, using the CurrentUser registry \n        // root.\n        rkTest = Registry.CurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;);\n        Console.WriteLine(&quot;Test key: {0}&quot;, rkTest);\n        rkTest.Close();\n\n        // Open the test key in read/write mode.\n        rkTest = Registry.CurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;, true);\n        rkTest.SetValue(&quot;TestName&quot;, &quot;TestValue&quot;);\n        Console.WriteLine(&quot;Test value for TestName: {0}&quot;, rkTest.GetValue(&quot;TestName&quot;));\n        rkTest.Close();\n    } //Main\n} //Example\n</code></pre><pre><code class=\"lang-vb\" name=\"RegistryKey.OpenSubKey#1\">Imports System\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryOpenSubKeyExample&quot;, False)\n        Dim rk As RegistryKey = Registry.CurrentUser.CreateSubKey(&quot;RegistryOpenSubKeyExample&quot;)\n        rk.Close\n\n        &#39; Obtain an instance of RegistryKey for the CurrentUser registry \n        &#39; root. \n        Dim rkCurrentUser As RegistryKey = Registry.CurrentUser\n\n        &#39; Obtain the test key (read-only) and display it.\n        Dim rkTest As RegistryKey = rkCurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;)\n        Console.WriteLine(&quot;Test key: {0}&quot;, rkTest)\n        rkTest.Close\n        rkCurrentUser.Close\n\n        &#39; Obtain the test key in one step, using the CurrentUser registry \n        &#39; root.\n        rkTest = Registry.CurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;)\n        Console.WriteLine(&quot;Test key: {0}&quot;, rkTest)\n        rkTest.Close\n\n        &#39; Obtain the test key in read/write mode.\n        rkTest = Registry.CurrentUser.OpenSubKey(&quot;RegistryOpenSubKeyExample&quot;, True)\n        rkTest.SetValue(&quot;TestName&quot;, &quot;TestValue&quot;)\n        Console.WriteLine(&quot;Test value for TestName: {0}&quot;, rkTest.GetValue(&quot;TestName&quot;))\n        rkTest.Close\n    End Sub &#39;Main\nEnd Class &#39;Example\n</code></pre><pre><code class=\"lang-cpp\" name=\"RegistryKey.OpenSubKey#1\">#using &lt;Microsoft.VisualBasic.dll&gt;\n\nusing namespace System;\nusing namespace Microsoft::Win32;\nusing namespace Microsoft::VisualBasic;\n\nint main()\n{\n    // Delete and recreate the test key.\n    Registry::CurrentUser-&gt;DeleteSubKey( L&quot;RegistryOpenSubKeyExample&quot;, false );\n    RegistryKey ^ rk = Registry::CurrentUser-&gt;CreateSubKey( L&quot;RegistryOpenSubKeyExample&quot; );\n    rk-&gt;Close();\n\n    // Obtain an instance of RegistryKey for the CurrentUser registry\n    // root.\n    RegistryKey ^ rkCurrentUser = Registry::CurrentUser;\n\n    // Obtain the test key (read-only) and display it.\n    RegistryKey ^ rkTest = rkCurrentUser-&gt;OpenSubKey( L&quot;RegistryOpenSubKeyExample&quot; );\n    Console::WriteLine( L&quot;Test key: {0}&quot;, rkTest );\n    rkTest-&gt;Close();\n    rkCurrentUser-&gt;Close();\n\n    // Obtain the test key in one step, using the CurrentUser registry\n    // root.\n    rkTest = Registry::CurrentUser-&gt;OpenSubKey( L&quot;RegistryOpenSubKeyExample&quot; );\n    Console::WriteLine( L&quot;Test key: {0}&quot;, rkTest );\n    rkTest-&gt;Close();\n\n    // Open the test key in read/write mode.\n    rkTest = Registry::CurrentUser-&gt;OpenSubKey( L&quot;RegistryOpenSubKeyExample&quot;, true );\n    rkTest-&gt;SetValue( L&quot;TestName&quot;, L&quot;TestValue&quot; );\n    Console::WriteLine( L&quot;Test value for TestName: {0}&quot;, rkTest-&gt;GetValue( L&quot;TestName&quot; ) );\n    rkTest-&gt;Close();\n\n    return 0;\n} //Main\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_OpenSubKey_System_String_System_Security_AccessControl_RegistryRights_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_OpenSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenSubKey(String,RegistryRights)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a subkey with the specified name and .  </p>\n<p> Available starting in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-2015-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE --></p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey OpenSubKey (string name, System.Security.AccessControl.RegistryRights rights);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rights</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rights for the registry key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The subkey requested, or <code>null</code> if the operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to access the registry key in the specified mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must open a key before it can be manipulated with other methods and properties. To modify a key, you must open it with an overload of the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method that allows you to specify write access.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_OpenSubKey_System_String_Microsoft_Win32_RegistryKeyPermissionCheck_System_Security_AccessControl_RegistryRights_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_OpenSubKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenSubKey(String,RegistryKeyPermissionCheck,RegistryRights)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the specified subkey for read or read/write access, requesting the specified access rights.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Microsoft.Win32.RegistryKey OpenSubKey (string name, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck, System.Security.AccessControl.RegistryRights rights);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name or path of the subkey to create or open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>permissionCheck</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">RegistryKeyPermissionCheck</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the key is opened for read or read/write access.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rights</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that specifies the desired security access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a></div>\r\n                  </div>\r\n                  <p>The subkey requested, or <code>null</code> if the operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>permissionCheck</code> contains an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p><code>rights</code> includes invalid registry rights values.  </p>\n<p> -or-  </p>\n<p> The user does not have the requested permissions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than throwing an exception, this method returns <code>null</code> if the requested key does not exist.  </p>\n<p> If <code>permissionCheck</code> is <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>, the key is opened for reading and writing; if <code>permissionCheck</code> is <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a> or <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>, the key is opened for reading unless the parent key was opened with <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a>.  </p>\n<p> The access specified for <code>permissionCheck</code> takes precedence over the access specified for <code>rights</code>. For example, if you specify <a class=\"xref\" href=\"microsoft.win32.registrykeypermissioncheck\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryKeyPermissionCheck</a> for <code>permissionCheck</code> and <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">System.Security.AccessControl.RegistryRights</a> for <code>rights</code>, an attempt to write to the subkey throws an exception.  </p>\n<p> In order to use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> method, you must have an instance of the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class. To get an instance of <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a>, use one of the static members of the <a class=\"xref\" href=\"microsoft.win32.registry\" data-linktype=\"relative-path\">Registry</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_SetAccessControl_System_Security_AccessControl_RegistrySecurity_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_SetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAccessControl(RegistrySecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Applies Windows access control security to an existing registry key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAccessControl (System.Security.AccessControl.RegistrySecurity registrySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>registrySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access control security to apply to the current subkey.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object represents a key with access control security, and the caller does not have <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>registrySecurity</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being manipulated is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To modify permissions for a registry key, use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to obtain a <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object representing the existing Windows access control security, modify that <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object, and then use the SetAccessControl method to update security for the key.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object specified for <code>registrySecurity</code> replaces the existing security for the registry key. To add permissions for a new user, use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to obtain the existing access control security, and then modify it.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a test key. The current user is allowed <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights but denied <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights. Subsequent attempts to manipulate the key succeed or fail depending on these permissions.  </p>\n<p> Before the key is deleted, the code pauses. You can switch to the registry editor and verify that the same access rights apply when the key is accessed using the registry editor. (This works best if you use <strong>RunAs</strong> from the command line to run the registry editor and the sample code as a local user without administrator rights. The registry editor always allows an administrator to change permissions, even if the particular administrator has been denied those rights. If you have defined a local user named TestUser, the command <code>runas /user:TestUser cmd</code> opens a command window from which you can run the registry editor and then the sample code.)  </p>\n<pre><code class=\"lang-cpp\" name=\"RegistrySecurity101#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace Microsoft::Win32;\nusing namespace System::Security::AccessControl;\nusing namespace System::Security;\n\nint main()\n{\n    // Delete the example key if it exists.\n    try\n    {\n        Registry::CurrentUser-&gt;DeleteSubKey(&quot;RegistryRightsExample&quot;);\n        Console::WriteLine(&quot;Example key has been deleted.&quot;);\n    }\n    catch (ArgumentException^)\n    {\n        // ArgumentException is thrown if the key does not exist. In\n        // this case, there is no reason to display a message.\n    }\n    catch (InvalidOperationException^ ex)\n    {\n        Console::WriteLine(\n            &quot;{0}Unable to delete key: it appears to have child subkeys:{0}{1}&quot;, \n            Environment::NewLine, ex);\n        return 0;\n    }\n    catch (SecurityException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You do not have the permissions required &quot; +\n            &quot;to delete this key:{0}{1}&quot;, Environment::NewLine, ex);\n        return 0;\n    }\n\n    String^ user = Environment::UserDomainName + &quot;\\\\&quot; + Environment::UserName;\n\n    RegistrySecurity^ regSecurity = gcnew RegistrySecurity();\n\n    // Allow the current user to read and delete the key.\n    //\n    regSecurity-&gt;AddAccessRule(gcnew RegistryAccessRule(user,\n        RegistryRights::ReadKey | RegistryRights::Delete,\n        InheritanceFlags::None,\n        PropagationFlags::None,\n        AccessControlType::Allow));\n\n    // Prevent the current user from writing or changing the\n    // permission set of the key. Note that if Delete permission\n    // were not allowed in the previous access rule, denying\n    // WriteKey permission would prevent the user from deleting the\n    // key.\n    regSecurity-&gt;AddAccessRule(gcnew RegistryAccessRule(user,\n        RegistryRights::WriteKey | RegistryRights::ChangePermissions,\n        InheritanceFlags::None,\n        PropagationFlags::None,\n        AccessControlType::Deny));\n\n    // Create the example key with registry security.\n    RegistryKey^ createdKey = nullptr;\n    try\n    {\n        createdKey = Registry::CurrentUser-&gt;CreateSubKey(\n            &quot;RegistryRightsExample&quot;, RegistryKeyPermissionCheck::Default,\n            regSecurity);\n        Console::WriteLine(&quot;{0}Example key created.&quot;, Environment::NewLine);\n        createdKey-&gt;SetValue(&quot;ValueName&quot;, &quot;StringValue&quot;);\n    }\n    catch (SecurityException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You do not have the permissions required &quot; +\n            &quot;to create the example key:{0}{1}&quot;, Environment::NewLine, ex);\n        return 0;\n    }\n    if (createdKey != nullptr)\n    {\n        createdKey-&gt;Close();\n    }\n\n    RegistryKey^ openedKey;\n\n    // Open the key with read access.\n    openedKey = Registry::CurrentUser-&gt;OpenSubKey(&quot;RegistryRightsExample&quot;,\n        false);\n    Console::WriteLine(&quot;{0}Retrieved value: {1}&quot;,\n        Environment::NewLine, openedKey-&gt;GetValue(&quot;ValueName&quot;));\n    openedKey-&gt;Close();\n\n    // Attempt to open the key with write access.\n    try\n    {\n        openedKey = Registry::CurrentUser-&gt;OpenSubKey(&quot;RegistryRightsExample&quot;,\n            true);\n    }\n    catch (SecurityException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You do not have the permissions required &quot; +\n            &quot;to write to the example key:{0}{1}&quot;, Environment::NewLine, ex);\n    }\n    if (openedKey != nullptr)\n    {\n        openedKey-&gt;Close();\n    }\n\n    // Attempt to change permissions for the key.\n    try\n    {\n        regSecurity = gcnew RegistrySecurity();\n        regSecurity-&gt;AddAccessRule(gcnew RegistryAccessRule(user,\n            RegistryRights::WriteKey,\n            InheritanceFlags::None,\n            PropagationFlags::None,\n            AccessControlType::Allow));\n        openedKey = Registry::CurrentUser-&gt;OpenSubKey(&quot;RegistryRightsExample&quot;,\n            false);\n        openedKey-&gt;SetAccessControl(regSecurity);\n        Console::WriteLine(&quot;{0}Example key permissions were changed.&quot;, \n            Environment::NewLine);\n    }\n    catch (UnauthorizedAccessException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You are not authorized to change &quot; +\n            &quot;permissions for the example key:{0}{1}&quot;, Environment::NewLine, ex);\n    }\n    if (openedKey != nullptr)\n    {\n        openedKey-&gt;Close();\n    }\n\n    Console::WriteLine(&quot;{0}Press Enter to delete the example key.&quot;, \n        Environment::NewLine);\n    Console::ReadLine();\n\n    try\n    {\n        Registry::CurrentUser-&gt;DeleteSubKey(&quot;RegistryRightsExample&quot;);\n        Console::WriteLine(&quot;Example key was deleted.&quot;);\n    }\n    catch(SecurityException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You do not have the permissions required to &quot;\n            + &quot;delete the example key:{0}{1}&quot;, Environment::NewLine, ex);\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"RegistrySecurity101#1\">using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Security.AccessControl;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete the example key if it exists.\n        try\n        {\n            Registry.CurrentUser.DeleteSubKey(&quot;RegistryRightsExample&quot;);\n            Console.WriteLine(&quot;Example key has been deleted.&quot;);\n        }\n        catch (ArgumentException)\n        {\n            // ArgumentException is thrown if the key does not exist. In\n            // this case, there is no reason to display a message.\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;Unable to delete the example key: {0}&quot;, ex);\n            return;\n        }\n\n        string user = Environment.UserDomainName + &quot;\\\\&quot; + Environment.UserName;\n\n        RegistrySecurity rs = new RegistrySecurity();\n\n        // Allow the current user to read and delete the key.\n        //\n        rs.AddAccessRule(new RegistryAccessRule(user, \n            RegistryRights.ReadKey | RegistryRights.Delete, \n            InheritanceFlags.None, \n            PropagationFlags.None, \n            AccessControlType.Allow));\n\n        // Prevent the current user from writing or changing the\n        // permission set of the key. Note that if Delete permission\n        // were not allowed in the previous access rule, denying\n        // WriteKey permission would prevent the user from deleting the \n        // key.\n        rs.AddAccessRule(new RegistryAccessRule(user, \n            RegistryRights.WriteKey | RegistryRights.ChangePermissions, \n            InheritanceFlags.None, \n            PropagationFlags.None, \n            AccessControlType.Deny));\n\n        // Create the example key with registry security.\n        RegistryKey rk = null;\n        try\n        {\n            rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryRightsExample&quot;, \n                RegistryKeyPermissionCheck.Default, rs);\n            Console.WriteLine(&quot;\\r<br>Example key created.&quot;);\n            rk.SetValue(&quot;ValueName&quot;, &quot;StringValue&quot;);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;\\r<br>Unable to create the example key: {0}&quot;, ex);\n        }\n        if (rk != null) rk.Close();\n\n        rk = Registry.CurrentUser;\n\n        RegistryKey rk2;\n        \n        // Open the key with read access.\n        rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, false);\n        Console.WriteLine(&quot;\\r<br>Retrieved value: {0}&quot;, rk2.GetValue(&quot;ValueName&quot;));\n        rk2.Close();\n\n        // Attempt to open the key with write access.\n        try\n        {\n            rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, true);\n        }\n        catch (SecurityException ex)\n        {\n            Console.WriteLine(&quot;<br>Unable to write to the example key.&quot; +\n                &quot; Caught SecurityException: {0}&quot;, ex.Message);\n        }\n        if (rk2 != null) rk2.Close();\n\n        // Attempt to change permissions for the key.\n        try\n        {\n            rs = new RegistrySecurity();\n            rs.AddAccessRule(new RegistryAccessRule(user, \n                RegistryRights.WriteKey, \n                InheritanceFlags.None, \n                PropagationFlags.None, \n                AccessControlType.Allow));\n            rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, false);\n            rk2.SetAccessControl(rs);\n            Console.WriteLine(&quot;\\r<br>Example key permissions were changed.&quot;);\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            Console.WriteLine(&quot;<br>Unable to change permissions for the example key.&quot; +\n                &quot; Caught UnauthorizedAccessException: {0}&quot;, ex.Message);\n        }\n        if (rk2 != null) rk2.Close();\n\n        Console.WriteLine(&quot;\\r<br>Press Enter to delete the example key.&quot;);\n        Console.ReadLine();\n\n        try\n        {\n            rk.DeleteSubKey(&quot;RegistryRightsExample&quot;);\n            Console.WriteLine(&quot;Example key was deleted.&quot;);\n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;Unable to delete the example key: {0}&quot;, ex);\n        }\n\n        rk.Close();\n    }\n}\n\n/* This code example produces the following output:\n\nExample key created.\n\nRetrieved value: StringValue\n\nUnable to write to the example key. Caught SecurityException: Requested registry access is not allowed.\n\nUnable to change permissions for the example key. Caught UnauthorizedAccessException: Cannot write to the registry key.\n\nPress Enter to delete the example key.\n\nExample key was deleted.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"RegistrySecurity101#1\">Imports System\nImports System.Reflection\nImports System.Security\nImports System.Security.AccessControl\nImports Microsoft.Win32\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete the example key if it exists.\n        Try\n            Registry.CurrentUser.DeleteSubKey(&quot;RegistryRightsExample&quot;)\n            Console.WriteLine(&quot;Example key has been deleted.&quot;)\n        Catch ex As ArgumentException\n            &#39; ArgumentException is thrown if the key does not exist. In\n            &#39; this case, there is no reason to display a message.\n        Catch ex As Exception\n            Console.WriteLine(&quot;Unable to delete the example key: {0}&quot;, ex)\n            Return\n        End Try\n\n        Dim user As String = Environment.UserDomainName &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        Dim rs As New RegistrySecurity()\n\n        &#39; Allow the current user to read and delete the key.\n        &#39;\n        rs.AddAccessRule(new RegistryAccessRule(user, _\n            RegistryRights.ReadKey Or RegistryRights.Delete, _\n            InheritanceFlags.None, _\n            PropagationFlags.None, _\n            AccessControlType.Allow))\n\n        &#39; Prevent the current user from writing or changing the\n        &#39; permission set of the key. Note that if Delete permission\n        &#39; were not allowed in the previous access rule, denying\n        &#39; WriteKey permission would prevent the user from deleting the \n        &#39; key.\n        rs.AddAccessRule(new RegistryAccessRule(user, _\n            RegistryRights.WriteKey Or RegistryRights.ChangePermissions, _\n            InheritanceFlags.None, _\n            PropagationFlags.None, _\n            AccessControlType.Deny))\n\n        &#39; Create the example key with registry security.\n        Dim rk As RegistryKey = Nothing\n        Try\n            rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryRightsExample&quot;, _\n                RegistryKeyPermissionCheck.Default, rs)\n            Console.WriteLine(vbCrLf &amp; &quot;Example key created.&quot;)\n            rk.SetValue(&quot;ValueName&quot;, &quot;StringValue&quot;)\n        Catch ex As Exception\n            Console.WriteLine(vbCrLf &amp; &quot;Unable to create the example key: {0}&quot;, ex)\n        End Try\n\n        If rk IsNot Nothing Then rk.Close()\n\n        rk = Registry.CurrentUser\n\n        Dim rk2 As RegistryKey\n        \n        &#39; Open the key with read access.\n        rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, False)\n        Console.WriteLine(vbCrLf &amp; &quot;Retrieved value: {0}&quot;, rk2.GetValue(&quot;ValueName&quot;))\n        rk2.Close()\n\n        &#39; Attempt to open the key with write access.\n        Try\n            rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, True)\n        Catch ex As SecurityException\n            Console.WriteLine(vbCrLf &amp; &quot;Unable to write to the example key.&quot; _\n                &amp; &quot; Caught SecurityException: {0}&quot;, ex.Message)\n        End Try\n        If rk2 IsNot Nothing Then rk2.Close()\n\n        &#39; Attempt to change permissions for the key.\n        Try\n            rs = New RegistrySecurity()\n            rs.AddAccessRule(new RegistryAccessRule(user, _\n                RegistryRights.WriteKey, _\n                InheritanceFlags.None, _\n                PropagationFlags.None, _\n                AccessControlType.Allow))\n            rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, False)\n            rk2.SetAccessControl(rs)\n            Console.WriteLine(vbCrLf &amp; &quot;Example key permissions were changed.&quot;)\n        Catch ex As UnauthorizedAccessException\n            Console.WriteLine(vbCrLf &amp; &quot;Unable to change permissions for the example key.&quot; _\n                &amp; &quot; Caught UnauthorizedAccessException: {0}&quot;, ex.Message)\n        End Try\n        If rk2 IsNot Nothing Then rk2.Close()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Press Enter to delete the example key.&quot;)\n        Console.ReadLine()\n\n        Try\n            rk.DeleteSubKey(&quot;RegistryRightsExample&quot;)\n            Console.WriteLine(&quot;Example key was deleted.&quot;)\n        Catch ex As Exception\n            Console.WriteLine(&quot;Unable to delete the example key: {0}&quot;, ex)\n        End Try\n\n        rk.Close()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output:\n&#39;\n&#39;Example key created.\n&#39;\n&#39;Retrieved value: StringValue\n&#39;\n&#39;Unable to write to the example key. Caught SecurityException: Requested registry access is not allowed.\n&#39;\n&#39;Unable to change permissions for the example key. Caught UnauthorizedAccessException: Cannot write to the registry key.\n&#39;\n&#39;Press Enter to delete the example key.\n&#39;\n&#39;Example key was deleted.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_SetValue_System_String_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the specified name/value pair.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (string name, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the value to store.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to be stored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is an unsupported data type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is read-only, and cannot be written to; for example, the key has not been opened with write access.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or modify registry keys.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because many values can be stored in each key in the registry, you must use the <code>name</code> parameter to specify the particular value you want to set.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string &quot;(Default)&quot; appears instead of a name. To set this unnamed value, specify either <code>null</code> or the empty string (&quot;&quot;) for <code>name</code>.  </p>\n</div>\n<p> In order to set values in a key, you must open the key with write access. After you have opened a key with write access, you can change any of the name/value pairs in that key.  </p>\n<p> If the specified <code>name</code> does not exist in the key, it is created and the associated value is set to <code>value</code>.  </p>\n<p> This overload of <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetValue_\" data-linktype=\"relative-path\">SetValue</a> stores 64-bit integers as strings (<a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>). To store 64-bit numbers as <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a> values, use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetValue_System_String_System_Object_Microsoft_Win32_RegistryValueKind_\" data-linktype=\"relative-path\">SetValue(String,Object,RegistryValueKind)</a> overload that specifies <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">RegistryValueKind</a>.  </p>\n<p> This overload of <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetValue_\" data-linktype=\"relative-path\">SetValue</a> stores all string values as <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>, even if they contain expandable references to environment variables. To save string values as expandable strings (<a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>), use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetValue_System_String_System_Object_Microsoft_Win32_RegistryValueKind_\" data-linktype=\"relative-path\">SetValue(String,Object,RegistryValueKind)</a> overload that specifies <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">RegistryValueKind</a>.  </p>\n<p> Numeric types other than 32-bit integers are stored as strings by this method overload. Enumeration elements are stored as strings containing the element names.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not expose <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> On Windows 98 and Windows Millennium Edition the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how the SetValue method determines the registry data type when it sets values. The example creates a test key and adds values of different data types to the key. The example then reads the name/value pairs and displays them to the console, using the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValueKind_\" data-linktype=\"relative-path\">GetValueKind</a> method to display the corresponding registry data types.  </p>\n<pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey.SetValue1#1\">Imports System\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistrySetValueExample&quot;, False)\n        Dim rk As RegistryKey = Registry.CurrentUser.CreateSubKey(&quot;RegistrySetValueExample&quot;)\n        \n        &#39; Create name/value pairs.\n        &#39; Numeric values that cannot be interpreted as DWord (int) values\n        &#39; are stored as strings.\n        rk.SetValue(&quot;LargeNumberValue1&quot;, CType(42, Long))\n        rk.SetValue(&quot;LargeNumberValue2&quot;, 42000000000)\n        \n        rk.SetValue(&quot;DWordValue&quot;, 42)\n        rk.SetValue(&quot;MultipleStringValue&quot;, New String() {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;})\n        rk.SetValue(&quot;BinaryValue&quot;, New Byte() {10, 43, 44, 45, 14, 255})\n        \n        &#39; This overload of SetValue does not support expanding strings. Use\n        &#39; the overload that allows you to specify RegistryValueKind.\n        rk.SetValue(&quot;StringValue&quot;, &quot;The path is %PATH%&quot;)\n        \n        &#39; Display all name/value pairs stored in the test key, with each\n        &#39; registry data type in parentheses.\n        &#39;\n        Dim valueNames As String() = rk.GetValueNames()\n        Dim s As String\n        For Each s In  valueNames\n            Dim rvk As RegistryValueKind = rk.GetValueKind(s)\n            Select Case rvk\n                Case RegistryValueKind.MultiString\n                    Dim values As String() = CType(rk.GetValue(s), String())\n                    Console.Write(vbCrLf + &quot; {0} ({1}) = &quot;&quot;{2}&quot;&quot;&quot;, s, rvk, values(0))\n                    Dim i As Integer\n                    For i = 1 To values.Length - 1\n                        Console.Write(&quot;, &quot;&quot;{0}&quot;&quot;&quot;, values(i))\n                    Next i\n                    Console.WriteLine()\n                \n                Case RegistryValueKind.Binary\n                    Dim bytes As Byte() = CType(rk.GetValue(s), Byte())\n                    Console.Write(vbCrLf + &quot; {0} ({1}) = {2:X2}&quot;, s, rvk, bytes(0))\n                    Dim i As Integer\n                    For i = 1 To bytes.Length - 1\n                        &#39; Display each byte as two hexadecimal digits.\n                        Console.Write(&quot; {0:X2}&quot;, bytes(i))\n                    Next i\n                    Console.WriteLine()\n                \n                Case Else\n                    Console.WriteLine(vbCrLf + &quot; {0} ({1}) = {2}&quot;, s, rvk, rk.GetValue(s))\n            End Select\n        Next s\n    End Sub &#39;Main\nEnd Class &#39;Example\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey.SetValue1#1\">using System;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistrySetValueExample&quot;, false);\n        RegistryKey rk = Registry.CurrentUser.CreateSubKey(&quot;RegistrySetValueExample&quot;);\n\n        // Create name/value pairs.\n\n        // Numeric values that cannot be interpreted as DWord (int) values\n        // are stored as strings.\n        rk.SetValue(&quot;LargeNumberValue1&quot;, (long) 42);\n        rk.SetValue(&quot;LargeNumberValue2&quot;, 42000000000);\n\n        rk.SetValue(&quot;DWordValue&quot;, 42);\n        rk.SetValue(&quot;MultipleStringValue&quot;, new string[] {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;});\n        rk.SetValue(&quot;BinaryValue&quot;, new byte[] {10, 43, 44, 45, 14, 255});\n\n        // This overload of SetValue does not support expanding strings. Use\n        // the overload that allows you to specify RegistryValueKind.\n        rk.SetValue(&quot;StringValue&quot;, &quot;The path is %PATH%&quot;);\n\n\n        // Display all name/value pairs stored in the test key, with each\n        // registry data type in parentheses.\n        //\n        string[] valueNames = rk.GetValueNames();\n        foreach (string s in valueNames)\n        {\n            RegistryValueKind rvk = rk.GetValueKind(s);\n            switch (rvk)\n            {\n                case RegistryValueKind.MultiString :\n                    string[] values = (string[]) rk.GetValue(s);\n                    Console.Write(&quot;\\r<br> {0} ({1}) = \\&quot;{2}\\&quot;&quot;, s, rvk, values[0]);\n                    for (int i = 1; i &lt; values.Length; i++)\n                    {\n                        Console.Write(&quot;, \\&quot;{0}\\&quot;&quot;, values[i]);\n                    }\n                    Console.WriteLine();\n                    break;\n                \n                case RegistryValueKind.Binary :\n                    byte[] bytes = (byte[]) rk.GetValue(s);\n                    Console.Write(&quot;\\r<br> {0} ({1}) = {2:X2}&quot;, s, rvk, bytes[0]);\n                    for (int i = 1; i &lt; bytes.Length; i++)\n                    {\n                        // Display each byte as two hexadecimal digits.\n                        Console.Write(&quot; {0:X2}&quot;, bytes[i]);\n                    }\n                    Console.WriteLine();\n                    break;\n                \n                default :\n                    Console.WriteLine(&quot;\\r<br> {0} ({1}) = {2}&quot;, s, rvk, rk.GetValue(s));\n                    break;\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey.SetValue1#1\">using namespace System;\nusing namespace Microsoft::Win32;\nint main()\n{\n   \n   // Delete and recreate the test key.\n   Registry::CurrentUser-&gt;DeleteSubKey( &quot;RegistrySetValueExample&quot;, false );\n   RegistryKey ^ rk = Registry::CurrentUser-&gt;CreateSubKey( &quot;RegistrySetValueExample&quot; );\n   \n   // Create name/value pairs.\n   // Numeric values that cannot be interpreted as DWord (int) values\n   // are stored as strings.\n   rk-&gt;SetValue( &quot;LargeNumberValue1&quot;, (long)42 );\n   rk-&gt;SetValue( &quot;LargeNumberValue2&quot;, 42000000000 );\n   rk-&gt;SetValue( &quot;DWordValue&quot;, 42 );\n   array&lt;String^&gt;^temp0 = {&quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;};\n   rk-&gt;SetValue( &quot;MultipleStringValue&quot;, temp0 );\n   array&lt;Byte&gt;^temp1 = {10,43,44,45,14,255};\n   rk-&gt;SetValue( &quot;BinaryValue&quot;, temp1 );\n   \n   // This overload of SetValue does not support expanding strings. Use\n   // the overload that allows you to specify RegistryValueKind.\n   rk-&gt;SetValue( &quot;StringValue&quot;, &quot;The path is %PATH%&quot; );\n   \n   // Display all the name/value pairs stored in the test key, with\n   // the registry data type in parentheses.\n   //\n   array&lt;String^&gt;^valueNames = rk-&gt;GetValueNames();\n   System::Collections::IEnumerator^ myEnum = valueNames-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      RegistryValueKind rvk = rk-&gt;GetValueKind( s );\n      switch ( rvk )\n      {\n         case RegistryValueKind::MultiString:\n         {\n            array&lt;String^&gt;^values = (array&lt;String^&gt;^)rk-&gt;GetValue( s );\n            Console::Write( &quot;\\r<br> {0} ({1}) = \\&quot;{2}\\&quot;&quot;, s, rvk, values[ 0 ] );\n            for ( int i = 1; i &lt; values-&gt;Length; i++ )\n            {\n               Console::Write( &quot;, \\&quot;{0}\\&quot;&quot;, values[ i ] );\n\n            }\n            Console::WriteLine();\n            break;\n         }\n         case RegistryValueKind::Binary:\n         {\n            array&lt;Byte&gt;^bytes = (array&lt;Byte&gt;^)rk-&gt;GetValue( s );\n            Console::Write( &quot;\\r<br> {0} ({1}) = {2:X2}&quot;, s, rvk, bytes[ 0 ] );\n            for ( int i = 1; i &lt; bytes-&gt;Length; i++ )\n            {\n               \n               // Display each byte as two hexadecimal digits.\n               Console::Write( &quot; {0:X2}&quot;, bytes[ i ] );\n\n            }\n            Console::WriteLine();\n            break;\n         }\n         default:\n            Console::WriteLine( &quot;\\r<br> {0} ({1}) = {2}&quot;, s, rvk, rk-&gt;GetValue( s ) );\n            break;\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_SetValue_System_String_System_Object_Microsoft_Win32_RegistryValueKind_\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(String,Object,RegistryValueKind)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of a name/value pair in the registry key, using the specified registry data type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (string name, object value, Microsoft.Win32.RegistryValueKind valueKind);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the value to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>valueKind</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">RegistryValueKind</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The registry data type to use when storing the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The type of <code>value</code> did not match the registry data type specified by <code>valueKind</code>, therefore the data could not be converted properly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> that contains the specified value is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> is read-only, and cannot be written to; for example, the key has not been opened with write access.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have the permissions required to create or modify registry keys.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because many values can be stored in each key in the registry, you must use the <code>name</code> parameter to specify the particular value you want to set.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string &quot;(Default)&quot; appears instead of a name. To set this unnamed value, specify either <code>null</code> or the empty string (&quot;&quot;) for <code>name</code>.  </p>\n</div>\n<p> In order to set values in a key, you must open the key with write access. After you have opened a key with write access, you can change any of the name/value pairs in that key.  </p>\n<p> If the specified <code>name</code> does not exist in the key, it is created, and the associated value is set to <code>value</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Specifying the registry data type <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">RegistryValueKind</a> is the same as using the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetValue_\" data-linktype=\"relative-path\">SetValue</a> overload.  </p>\n</div>\n<p> If the type of the specified <code>value</code> does not match the specified <code>valueKind</code>, and the data cannot be converted, <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown. For example, you can store a <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">System.Int64</a> as a <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>, but only if its value is less than the maximum value of a <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">System.Int32</a>. You cannot store a single string value as a <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If boxed values are passed for <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a> or <a class=\"xref\" href=\"microsoft.win32.registryvaluekind\" data-linktype=\"relative-path\">Microsoft.Win32.RegistryValueKind</a>, the conversion is done using the invariant culture.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not expose <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> On Windows 98 and Windows Millennium Edition the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a test key and uses the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method to store several values, specifying the registry data type for each value. The example then reads the name/value pairs and displays them to the console, using the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetValueKind_\" data-linktype=\"relative-path\">GetValueKind</a> method to display the corresponding registry data types.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryValueKind#1\">using namespace System;\nusing namespace Microsoft::Win32;\nint main()\n{\n   \n   // Delete and recreate the test key.\n   Registry::CurrentUser-&gt;DeleteSubKey( &quot;RegistryValueKindExample&quot;, false );\n   RegistryKey ^ rk = Registry::CurrentUser-&gt;CreateSubKey( &quot;RegistryValueKindExample&quot; );\n   \n   // Create name/value pairs.\n   // This overload supports QWord (long) values. \n   rk-&gt;SetValue( &quot;QuadWordValue&quot;, 42, RegistryValueKind::QWord );\n   \n   // The following SetValue calls have the same effect as using the\n   // SetValue overload that does not specify RegistryValueKind.\n   //\n   rk-&gt;SetValue( &quot;DWordValue&quot;, 42, RegistryValueKind::DWord );\n   rk-&gt;SetValue( &quot;MultipleStringValue&quot;, gcnew array&lt;String^&gt;{\n      &quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;\n   }, RegistryValueKind::MultiString );\n   rk-&gt;SetValue( &quot;BinaryValue&quot;, gcnew array&lt;Byte&gt;{\n      10,43,44,45,14,255\n   }, RegistryValueKind::Binary );\n   rk-&gt;SetValue( &quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind::String );\n   \n   // This overload supports setting expandable string values. Compare\n   // the output from this value with the previous string value.\n   rk-&gt;SetValue( &quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind::ExpandString );\n   \n   // Display all the name/value pairs stored in the test key, with the\n   // registry data type in parentheses.\n   //\n   array&lt;String^&gt;^valueNames = rk-&gt;GetValueNames();\n   System::Collections::IEnumerator^ myEnum = valueNames-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      RegistryValueKind rvk = rk-&gt;GetValueKind( s );\n      switch ( rvk )\n      {\n         case RegistryValueKind::MultiString:\n         {\n            array&lt;String^&gt;^values = (array&lt;String^&gt;^)rk-&gt;GetValue( s );\n            Console::Write( &quot;\\r<br> {0} ({1}) =&quot;, s, rvk );\n            for ( int i = 0; i &lt; values-&gt;Length; i++ )\n            {\n               if (i != 0) Console::Write(&quot;,&quot;);\n               Console::Write( &quot; \\&quot;{0}\\&quot;&quot;, values[ i ] );\n\n            }\n            Console::WriteLine();\n            break;\n         }\n         case RegistryValueKind::Binary:\n         {\n            array&lt;Byte&gt;^bytes = (array&lt;Byte&gt;^)rk-&gt;GetValue( s );\n            Console::Write( &quot;\\r<br> {0} ({1}) =&quot;, s, rvk );\n            for ( int i = 0; i &lt; bytes-&gt;Length; i++ )\n            {\n               \n               // Display each byte as two hexadecimal digits.\n               Console::Write( &quot; {0:X2}&quot;, bytes[ i ] );\n\n            }\n            Console::WriteLine();\n            break;\n         }\n         default:\n            Console::WriteLine( &quot;\\r<br> {0} ({1}) = {2}&quot;, s, rvk, rk-&gt;GetValue( s ) );\n            break;\n      }\n   }\n}\n/*\n\nThis code example produces the following output:\n QuadWordValue (QWord) = 42\n\n DWordValue (DWord) = 42\n\n MultipleStringValue (MultiString) =, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n\n BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n\n StringValue (String) = The path is %PATH%\n\n ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n [***The remainder of this output is omitted.***]\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryValueKind#1\">using System;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryValueKindExample&quot;, false);\n        RegistryKey rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryValueKindExample&quot;);\n\n        // Create name/value pairs.\n\n        // This overload supports QWord (long) values. \n        rk.SetValue(&quot;QuadWordValue&quot;, 42, RegistryValueKind.QWord);\n\n        // The following SetValue calls have the same effect as using the\n        // SetValue overload that does not specify RegistryValueKind.\n        //\n        rk.SetValue(&quot;DWordValue&quot;, 42, RegistryValueKind.DWord);\n        rk.SetValue(&quot;MultipleStringValue&quot;, new string[] {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;}, RegistryValueKind.MultiString);\n        rk.SetValue(&quot;BinaryValue&quot;, new byte[] {10, 43, 44, 45, 14, 255}, RegistryValueKind.Binary);\n        rk.SetValue(&quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.String);\n\n        // This overload supports setting expandable string values. Compare\n        // the output from this value with the previous string value.\n        rk.SetValue(&quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.ExpandString);\n\n\n        // Display all name/value pairs stored in the test key, with each\n        // registry data type in parentheses.\n        //\n        string[] valueNames = rk.GetValueNames();\n        foreach (string s in valueNames)\n        {\n            RegistryValueKind rvk = rk.GetValueKind(s);\n            switch (rvk)\n            {\n                case RegistryValueKind.MultiString :\n                    string[] values = (string[]) rk.GetValue(s);\n                    Console.Write(&quot;\\r<br> {0} ({1}) =&quot;, s, rvk);\n                    for (int i = 0; i &lt; values.Length; i++)\n                    {\n                        if (i != 0) Console.Write(&quot;,&quot;);\n                        Console.Write(&quot; \\&quot;{0}\\&quot;&quot;, values[i]);\n                    }\n                    Console.WriteLine();\n                    break;\n                \n                case RegistryValueKind.Binary :\n                    byte[] bytes = (byte[]) rk.GetValue(s);\n                    Console.Write(&quot;\\r<br> {0} ({1}) =&quot;, s, rvk);\n                    for (int i = 0; i &lt; bytes.Length; i++)\n                    {\n                        // Display each byte as two hexadecimal digits.\n                        Console.Write(&quot; {0:X2}&quot;, bytes[i]);\n                    }\n                    Console.WriteLine();\n                    break;\n                \n                default :\n                    Console.WriteLine(&quot;\\r<br> {0} ({1}) = {2}&quot;, s, rvk, rk.GetValue(s));\n                    break;\n            }\n        }\n    }\n}\n/*\n\nThis code example produces the following output:\n QuadWordValue (QWord) = 42\n\n DWordValue (DWord) = 42\n\n MultipleStringValue (MultiString) =, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n\n BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n\n StringValue (String) = The path is %PATH%\n\n ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n [***The remainder of this output is omitted.***]\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryValueKind#1\">Imports System\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete and recreate the test key.\n        Registry.CurrentUser.DeleteSubKey(&quot;RegistryValueKindExample&quot;, False)\n        Dim rk As RegistryKey = Registry.CurrentUser.CreateSubKey(&quot;RegistryValueKindExample&quot;)\n        \n        &#39; Create name/value pairs.\n        &#39; This overload supports QWord (long) values. \n        rk.SetValue(&quot;QuadWordValue&quot;, 42, RegistryValueKind.QWord)\n        \n        &#39; The following SetValue calls have the same effect as using the\n        &#39; SetValue overload that does not specify RegistryValueKind.\n        &#39;\n        rk.SetValue(&quot;DWordValue&quot;, 42, RegistryValueKind.DWord)\n        rk.SetValue(&quot;MultipleStringValue&quot;, New String() {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;}, RegistryValueKind.MultiString)\n        rk.SetValue(&quot;BinaryValue&quot;, New Byte() {10, 43, 44, 45, 14, 255}, RegistryValueKind.Binary)\n        rk.SetValue(&quot;StringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.String) \n        \n        &#39; This overload supports setting expandable string values. Compare\n        &#39; the output from this value with the previous string value.\n        rk.SetValue(&quot;ExpandedStringValue&quot;, &quot;The path is %PATH%&quot;, RegistryValueKind.ExpandString)\n        \n        \n        &#39; Display all name/value pairs stored in the test key, with each\n        &#39; registry data type in parentheses.\n        &#39;\n        Dim valueNames As String() = rk.GetValueNames()\n        Dim s As String\n        For Each s In  valueNames\n            Dim rvk As RegistryValueKind = rk.GetValueKind(s)\n            Select Case rvk\n                Case RegistryValueKind.MultiString\n                    Dim values As String() = CType(rk.GetValue(s), String())\n                    Console.Write(vbCrLf &amp; &quot; {0} ({1}) =&quot;, s, rvk)\n                    For i As Integer = 0 To values.Length - 1\n                        If i &lt;&gt; 0 Then Console.Write(&quot;,&quot;)\n                        Console.Write(&quot; &quot;&quot;{0}&quot;&quot;&quot;, values(i))\n                    Next i\n                    Console.WriteLine()\n                \n                Case RegistryValueKind.Binary\n                    Dim bytes As Byte() = CType(rk.GetValue(s), Byte())\n                    Console.Write(vbCrLf &amp; &quot; {0} ({1}) =&quot;, s, rvk)\n                    For i As Integer = 0 To bytes.Length - 1\n                        &#39; Display each byte as two hexadecimal digits.\n                        Console.Write(&quot; {0:X2}&quot;, bytes(i))\n                    Next i\n                    Console.WriteLine()\n                \n                Case Else\n                    Console.WriteLine(vbCrLf &amp; &quot; {0} ({1}) = {2}&quot;, s, rvk, rk.GetValue(s))\n            End Select\n        Next s\n    End Sub &#39;Main\nEnd Class &#39;Example\n\n&#39;\n&#39;This code example produces the following output (some output is omitted):\n&#39;\n&#39; QuadWordValue (QWord) = 42\n&#39;\n&#39; DWordValue (DWord) = 42\n&#39;\n&#39; MultipleStringValue (MultiString) = &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\n&#39;\n&#39; BinaryValue (Binary) = 0A 2B 2C 2D 0E FF\n&#39;\n&#39; StringValue (String) = The path is %PATH%\n&#39;\n&#39; ExpandedStringValue (ExpandString) = The path is C:\\Program Files\\Microsoft.NET\\SDK\\v2.0\\Bin;\n&#39; [***The remainder of this output is omitted.***]\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_Win32_RegistryKey_ToString\">\r\n    \r\n            <a id=\"Microsoft_Win32_RegistryKey_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a string representation of this key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representing the key. If the specified key is invalid (cannot be found) then <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> being accessed is closed (closed keys cannot be accessed).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value includes the registry path of the specified key and the hexadecimal value for the key. The registry path includes the absolute root of the specified key, always starts at one of the base keys for the registry, for example, HKEY_LOCAL_MACHINE.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Microsoft.Win32.RegistryKey2#4\">   // Delete or close the new subkey.\n   Console::Write( &quot;<br>Delete newly created registry key? (Y/N) &quot; );\n   if ( Char::ToUpper( Convert::ToChar( Console::Read() ) ) == &#39;Y&#39; )\n   {\n      Registry::CurrentUser-&gt;DeleteSubKeyTree( &quot;Test9999&quot; );\n      Console::WriteLine( &quot;<br>Registry key {0} deleted.&quot;, test9999-&gt;Name );\n   }\n   else\n   {\n      Console::WriteLine( &quot;<br>Registry key {0} closed.&quot;, test9999-&gt;ToString() );\n      test9999-&gt;Close();\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Microsoft.Win32.RegistryKey2#4\">        // Delete or close the new subkey.\n        Console.Write(&quot;<br>Delete newly created registry key? (Y/N) &quot;);\n        if(Char.ToUpper(Convert.ToChar(Console.Read())) == &#39;Y&#39;)\n        {\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;);\n            Console.WriteLine(&quot;<br>Registry key {0} deleted.&quot;, \n                test9999.Name);\n        }\n        else\n        {\n            Console.WriteLine(&quot;<br>Registry key {0} closed.&quot;, \n                test9999.ToString());\n            test9999.Close();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.RegistryKey2#4\">        &#39; Delete or close the new subkey.\n        Console.Write(vbCrLf &amp; &quot;Delete newly created &quot; &amp; _\n            &quot;registry key? (Y/N) &quot;)\n        If Char.ToUpper(Convert.ToChar(Console.Read())) = &quot;Y&quot;C Then\n            Registry.CurrentUser.DeleteSubKeyTree(&quot;Test9999&quot;)\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} deleted.&quot;, _\n                test9999.Name)\n        Else\n            Console.WriteLine(vbCrLf &amp; &quot;Registry key {0} closed.&quot;, _\n                test9999.ToString())\n            test9999.Close()\n        End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.Win32.RegistryKey.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.Win32.RegistryKey.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.Close\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.CreateSubKey\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.DeleteSubKey\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.DeleteSubKeyTree\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.DeleteValue\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.Dispose\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.Flush\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.FromHandle\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.GetAccessControl\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.GetSubKeyNames\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.GetValue\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.GetValueKind\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.GetValueNames\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.Handle\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.Name\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.OpenBaseKey\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.OpenRemoteBaseKey\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.OpenSubKey\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.SetAccessControl\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.SetValue\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.SubKeyCount\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.ToString\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.ValueCount\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.RegistryKey.View\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2fec73dc-4c53-1223-a605-7c1297ee39d0\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.Win32\\RegistryKey.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a key-level node in the Windows registry. This class is a registry encapsulation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.Win32/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.Win32.RegistryKey\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.Win32.RegistryKey.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.Win32.RegistryKey.yml","open_to_public_contributors":true,"api_name":["Microsoft.Win32.RegistryKey","Microsoft.Win32.RegistryKey.Close","Microsoft.Win32.RegistryKey.CreateSubKey","Microsoft.Win32.RegistryKey.DeleteSubKey","Microsoft.Win32.RegistryKey.DeleteSubKeyTree","Microsoft.Win32.RegistryKey.DeleteValue","Microsoft.Win32.RegistryKey.Dispose","Microsoft.Win32.RegistryKey.Flush","Microsoft.Win32.RegistryKey.FromHandle","Microsoft.Win32.RegistryKey.GetAccessControl","Microsoft.Win32.RegistryKey.GetSubKeyNames","Microsoft.Win32.RegistryKey.GetValue","Microsoft.Win32.RegistryKey.GetValueKind","Microsoft.Win32.RegistryKey.GetValueNames","Microsoft.Win32.RegistryKey.Handle","Microsoft.Win32.RegistryKey.Name","Microsoft.Win32.RegistryKey.OpenBaseKey","Microsoft.Win32.RegistryKey.OpenRemoteBaseKey","Microsoft.Win32.RegistryKey.OpenSubKey","Microsoft.Win32.RegistryKey.SetAccessControl","Microsoft.Win32.RegistryKey.SetValue","Microsoft.Win32.RegistryKey.SubKeyCount","Microsoft.Win32.RegistryKey.ToString","Microsoft.Win32.RegistryKey.ValueCount","Microsoft.Win32.RegistryKey.View"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.Win32.RegistryKey","Microsoft::Win32::RegistryKey","Microsoft.Win32.RegistryKey.Close","Microsoft::Win32::RegistryKey::Close","Microsoft.Win32.RegistryKey.CreateSubKey","Microsoft::Win32::RegistryKey::CreateSubKey","Microsoft.Win32.RegistryKey.DeleteSubKey","Microsoft::Win32::RegistryKey::DeleteSubKey","Microsoft.Win32.RegistryKey.DeleteSubKeyTree","Microsoft::Win32::RegistryKey::DeleteSubKeyTree","Microsoft.Win32.RegistryKey.DeleteValue","Microsoft::Win32::RegistryKey::DeleteValue","Microsoft.Win32.RegistryKey.Dispose","Microsoft::Win32::RegistryKey::Dispose","Microsoft.Win32.RegistryKey.Flush","Microsoft::Win32::RegistryKey::Flush","Microsoft.Win32.RegistryKey.FromHandle","Microsoft::Win32::RegistryKey::FromHandle","Microsoft.Win32.RegistryKey.GetAccessControl","Microsoft::Win32::RegistryKey::GetAccessControl","Microsoft.Win32.RegistryKey.GetSubKeyNames","Microsoft::Win32::RegistryKey::GetSubKeyNames","Microsoft.Win32.RegistryKey.GetValue","Microsoft::Win32::RegistryKey::GetValue","Microsoft.Win32.RegistryKey.GetValueKind","Microsoft::Win32::RegistryKey::GetValueKind","Microsoft.Win32.RegistryKey.GetValueNames","Microsoft::Win32::RegistryKey::GetValueNames","Microsoft.Win32.RegistryKey.Handle","Microsoft::Win32::RegistryKey::Handle","Microsoft.Win32.RegistryKey.Name","Microsoft::Win32::RegistryKey::Name","Microsoft.Win32.RegistryKey.OpenBaseKey","Microsoft::Win32::RegistryKey::OpenBaseKey","Microsoft.Win32.RegistryKey.OpenRemoteBaseKey","Microsoft::Win32::RegistryKey::OpenRemoteBaseKey","Microsoft.Win32.RegistryKey.OpenSubKey","Microsoft::Win32::RegistryKey::OpenSubKey","Microsoft.Win32.RegistryKey.SetAccessControl","Microsoft::Win32::RegistryKey::SetAccessControl","Microsoft.Win32.RegistryKey.SetValue","Microsoft::Win32::RegistryKey::SetValue","Microsoft.Win32.RegistryKey.SubKeyCount","Microsoft::Win32::RegistryKey::SubKeyCount","Microsoft.Win32.RegistryKey.ToString","Microsoft::Win32::RegistryKey::ToString","Microsoft.Win32.RegistryKey.ValueCount","Microsoft::Win32::RegistryKey::ValueCount","Microsoft.Win32.RegistryKey.View","Microsoft::Win32::RegistryKey::View"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2fec73dc-4c53-1223-a605-7c1297ee39d0","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.Win32\\RegistryKey.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/Microsoft.Win32/RegistryKey.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RegistryKey class | Microsoft Docs","_op_ogTitle":"RegistryKey class","description":"Represents a key-level node in the Windows registry. This class is a registry encapsulation.\n","toc_asset_id":"_splitted/Microsoft.Win32/toc.json","toc_rel":"_splitted/Microsoft.Win32/toc.json","source_url":"","ms.assetid":"Microsoft.Win32.RegistryKey","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.win32.registrykey","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.win32.registrykey","fileRelativePath":"Microsoft.Win32.RegistryKey.html"},"themesRelativePathToOutputRoot":"_themes/"}