{"content":"    \r\n    <h1 id=\"System_Threading_RegisteredWaitHandle\">\r\n      <span class=\"lang-csharp\">RegisteredWaitHandle</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a handle that has been registered when calling <span class=\"xref\">stem.Threading.ThreadPool.RegisterWaitForSingleObject*</span>. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class RegisteredWaitHandle : MarshalByRefObject</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RegisteredWaitHandle</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_RegisteredWaitHandle_Unregister_System_Threading_WaitHandle_\" data-linktype=\"self-bookmark\">Unregister(WaitHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels a registered wait operation issued by the <span class=\"xref\">stem.Threading.ThreadPool.RegisterWaitForSingleObject*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_RegisteredWaitHandle_Unregister_System_Threading_WaitHandle_\">\r\n    \r\n            <a id=\"System_Threading_RegisteredWaitHandle_Unregister_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unregister(WaitHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Cancels a registered wait operation issued by the <span class=\"xref\">stem.Threading.ThreadPool.RegisterWaitForSingleObject*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Unregister (System.Threading.WaitHandle waitObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>waitObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> to be signaled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the function succeeds; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>waitObject</code> is specified, it is signaled only if the <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a> is successfully unregistered. If a callback method is in progress when Unregister executes, <code>waitObject</code> is not signaled until the callback method completes. In particular, if a callback method executes Unregister, <code>waitObject</code> is not signaled until that callback method completes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Unregister method to unregister a task if a callback occurred because the wait handle was signaled.  </p>\n<p> The example also shows how to use the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is <code>WaitProc</code>, and the wait handle is an <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a>.  </p>\n<p> The example defines a <code>TaskInfo</code> class to hold the information that is passed to the callback when it executes. The example creates a <code>TaskInfo</code> object and assigns it some string data. The <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a> that is returned by the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a> method is assigned to the <code>Handle</code> field of the <code>TaskInfo</code> object so that the callback method has access to the <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a>.  </p>\n<p> In addition to specifying <code>TaskInfo</code> as the object to pass to the callback method, the call to the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a> method specifies the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> that the task will wait for, a <a class=\"xref\" href=\"system.threading.waitortimercallback\" data-linktype=\"relative-path\">WaitOrTimerCallback</a> delegate that represents the <code>WaitProc</code> callback method, a one second time-out interval, and multiple callbacks.  </p>\n<p> When the main thread signals the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> by calling its <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> method, the <a class=\"xref\" href=\"system.threading.waitortimercallback\" data-linktype=\"relative-path\">WaitOrTimerCallback</a> delegate is invoked. The <code>WaitProc</code> method tests <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a> to determine whether a time-out occurred. If the callback was invoked because the wait handle was signaled, the <code>WaitProc</code> method unregisters the <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a>, stopping additional callbacks. In the case of a time-out, the task continues to wait. The <code>WaitProc</code> method ends by printing a message to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ThreadPool RegisterWaitForSingleObject0#1\">using System;\nusing System.Threading;\n\n// TaskInfo contains data that will be passed to the callback\n// method.\npublic class TaskInfo {\n    public RegisteredWaitHandle Handle = null;\n    public string OtherInfo = &quot;default&quot;;\n}\n\npublic class Example {\n    public static void Main(string[] args) {\n        // The main thread uses AutoResetEvent to signal the\n        // registered wait handle, which executes the callback\n        // method.\n        AutoResetEvent ev = new AutoResetEvent(false);\n\n        TaskInfo ti = new TaskInfo();\n        ti.OtherInfo = &quot;First task&quot;;\n        // The TaskInfo for the task includes the registered wait\n        // handle returned by RegisterWaitForSingleObject.  This\n        // allows the wait to be terminated when the object has\n        // been signaled once (see WaitProc).\n        ti.Handle = ThreadPool.RegisterWaitForSingleObject(\n            ev,\n            new WaitOrTimerCallback(WaitProc),\n            ti,\n            1000,\n            false\n        );\n\n        // The main thread waits three seconds, to demonstrate the\n        // time-outs on the queued thread, and then signals.\n        Thread.Sleep(3100);\n        Console.WriteLine(&quot;Main thread signals.&quot;);\n        ev.Set();\n\n        // The main thread sleeps, which should give the callback\n        // method time to execute.  If you comment out this line, the\n        // program usually ends before the ThreadPool thread can execute.\n        Thread.Sleep(1000);\n        // If you start a thread yourself, you can wait for it to end\n        // by calling Thread.Join.  This option is not available with \n        // thread pool threads.\n    }\n   \n    // The callback method executes when the registered wait times out,\n    // or when the WaitHandle (in this case AutoResetEvent) is signaled.\n    // WaitProc unregisters the WaitHandle the first time the event is \n    // signaled.\n    public static void WaitProc(object state, bool timedOut) {\n        // The state object must be cast to the correct type, because the\n        // signature of the WaitOrTimerCallback delegate specifies type\n        // Object.\n        TaskInfo ti = (TaskInfo) state;\n\n        string cause = &quot;TIMED OUT&quot;;\n        if (!timedOut) {\n            cause = &quot;SIGNALED&quot;;\n            // If the callback method executes because the WaitHandle is\n            // signaled, stop future execution of the callback method\n            // by unregistering the WaitHandle.\n            if (ti.Handle != null)\n                ti.Handle.Unregister(null);\n        } \n\n        Console.WriteLine(&quot;WaitProc( {0} ) executes on thread {1}; cause = {2}.&quot;,\n            ti.OtherInfo, \n            Thread.CurrentThread.GetHashCode().ToString(), \n            cause\n        );\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Threading.ThreadPool RegisterWaitForSingleObject0#1\">using namespace System;\nusing namespace System::Threading;\n\n// TaskInfo contains data that will be passed to the callback\n// method.\npublic ref class TaskInfo\n{\npublic:\n   TaskInfo()\n   {\n      Handle = nullptr;\n      OtherInfo = &quot;default&quot;;\n   }\n\n   RegisteredWaitHandle^ Handle;\n   String^ OtherInfo;\n};\n\nref class Example\n{\npublic:\n\n   // The callback method executes when the registered wait times out,\n   // or when the WaitHandle (in this case AutoResetEvent) is signaled.\n   // WaitProc unregisters the WaitHandle the first time the event is \n   // signaled.\n   static void WaitProc( Object^ state, bool timedOut )\n   {\n      \n      // The state Object must be cast to the correct type, because the\n      // signature of the WaitOrTimerCallback delegate specifies type\n      // Object.\n      TaskInfo^ ti = static_cast&lt;TaskInfo^&gt;(state);\n      String^ cause = &quot;TIMED OUT&quot;;\n      if (  !timedOut )\n      {\n         cause = &quot;SIGNALED&quot;;\n         \n         // If the callback method executes because the WaitHandle is\n         // signaled, stop future execution of the callback method\n         // by unregistering the WaitHandle.\n         if ( ti-&gt;Handle != nullptr )\n                  ti-&gt;Handle-&gt;Unregister( nullptr );\n      }\n\n      Console::WriteLine( &quot;WaitProc( {0}) executes on thread {1}; cause = {2}.&quot;, ti-&gt;OtherInfo, Thread::CurrentThread-&gt;GetHashCode(), cause );\n   }\n\n};\n\nint main()\n{\n   \n   // The main thread uses AutoResetEvent to signal the\n   // registered wait handle, which executes the callback\n   // method.\n   AutoResetEvent^ ev = gcnew AutoResetEvent( false );\n   TaskInfo^ ti = gcnew TaskInfo;\n   ti-&gt;OtherInfo = &quot;First task&quot;;\n   \n   // The TaskInfo for the task includes the registered wait\n   // handle returned by RegisterWaitForSingleObject.  This\n   // allows the wait to be terminated when the object has\n   // been signaled once (see WaitProc).\n   ti-&gt;Handle = ThreadPool::RegisterWaitForSingleObject( ev, gcnew WaitOrTimerCallback( Example::WaitProc ), ti, 1000, false );\n   \n   // The main thread waits three seconds, to demonstrate the\n   // time-outs on the queued thread, and then signals.\n   Thread::Sleep( 3100 );\n   Console::WriteLine( &quot;Main thread signals.&quot; );\n   ev-&gt;Set();\n   \n   // The main thread sleeps, which should give the callback\n   // method time to execute.  If you comment out this line, the\n   // program usually ends before the ThreadPool thread can execute.\n   Thread::Sleep( 1000 );\n   \n   // If you start a thread yourself, you can wait for it to end\n   // by calling Thread::Join.  This option is not available with \n   // thread pool threads.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ThreadPool RegisterWaitForSingleObject0#1\">Imports System\nImports System.Threading\n\n&#39; TaskInfo contains data that will be passed to the callback\n&#39; method.\nPublic Class TaskInfo\n    public Handle As RegisteredWaitHandle = Nothing\n    public OtherInfo As String = &quot;default&quot;\nEnd Class\n\nPublic Class Example\n\n    &lt;MTAThread&gt; _\n    Public Shared Sub Main()\n        &#39; The main thread uses AutoResetEvent to signal the\n        &#39; registered wait handle, which executes the callback\n        &#39; method.\n        Dim ev As New AutoResetEvent(false)\n\n        Dim ti As New TaskInfo()\n        ti.OtherInfo = &quot;First task&quot;\n        &#39; The TaskInfo for the task includes the registered wait\n        &#39; handle returned by RegisterWaitForSingleObject.  This\n        &#39; allows the wait to be terminated when the object has\n        &#39; been signaled once (see WaitProc).\n        ti.Handle = ThreadPool.RegisterWaitForSingleObject( _\n            ev, _\n            New WaitOrTimerCallback(AddressOf WaitProc), _\n            ti, _\n            1000, _\n            false _\n        )\n\n        &#39; The main thread waits about three seconds, to demonstrate \n        &#39; the time-outs on the queued task, and then signals.\n        Thread.Sleep(3100)\n        Console.WriteLine(&quot;Main thread signals.&quot;)\n        ev.Set()\n\n        &#39; The main thread sleeps, which should give the callback\n        &#39; method time to execute.  If you comment out this line, the\n        &#39; program usually ends before the ThreadPool thread can execute.\n        Thread.Sleep(1000)\n        &#39; If you start a thread yourself, you can wait for it to end\n        &#39; by calling Thread.Join.  This option is not available with \n        &#39; thread pool threads.\n    End Sub\n   \n    &#39; The callback method executes when the registered wait times out,\n    &#39; or when the WaitHandle (in this case AutoResetEvent) is signaled.\n    &#39; WaitProc unregisters the WaitHandle the first time the event is \n    &#39; signaled.\n    Public Shared Sub WaitProc(state As Object, timedOut As Boolean)\n        &#39; The state object must be cast to the correct type, because the\n        &#39; signature of the WaitOrTimerCallback delegate specifies type\n        &#39; Object.\n        Dim ti As TaskInfo = CType(state, TaskInfo)\n\n        Dim cause As String = &quot;TIMED OUT&quot;\n        If Not timedOut Then\n            cause = &quot;SIGNALED&quot;\n            &#39; If the callback method executes because the WaitHandle is\n            &#39; signaled, stop future execution of the callback method\n            &#39; by unregistering the WaitHandle.\n            If Not ti.Handle Is Nothing Then\n                ti.Handle.Unregister(Nothing)\n            End If\n        End If \n\n        Console.WriteLine(&quot;WaitProc( {0} ) executes on thread {1}; cause = {2}.&quot;, _\n            ti.OtherInfo, _\n            Thread.CurrentThread.GetHashCode().ToString(), _\n            cause _\n        )\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.RegisteredWaitHandle.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.RegisteredWaitHandle.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.RegisteredWaitHandle\">\r\n<meta name=\"APIName\" content=\"System.Threading.RegisteredWaitHandle.Unregister\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0fc7972d-78d9-8b72-49f0-d119ae47442b\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Threading\\RegisteredWaitHandle.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a handle that has been registered when calling . This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.RegisteredWaitHandle\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.RegisteredWaitHandle.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.RegisteredWaitHandle.yml","open_to_public_contributors":true,"api_name":["System.Threading.RegisteredWaitHandle","System.Threading.RegisteredWaitHandle.Unregister"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.RegisteredWaitHandle","System::Threading::RegisteredWaitHandle","System.Threading.RegisteredWaitHandle.Unregister","System::Threading::RegisteredWaitHandle::Unregister"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0fc7972d-78d9-8b72-49f0-d119ae47442b","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Threading\\RegisteredWaitHandle.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/RegisteredWaitHandle.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RegisteredWaitHandle class | Microsoft Docs","_op_ogTitle":"RegisteredWaitHandle class","description":"Represents a handle that has been registered when calling . This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.RegisteredWaitHandle","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.registeredwaithandle","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.registeredwaithandle","fileRelativePath":"System.Threading.RegisteredWaitHandle.html"},"themesRelativePathToOutputRoot":"_themes/"}