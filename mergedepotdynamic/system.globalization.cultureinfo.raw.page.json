{"content":"    \r\n    <h1 id=\"System_Globalization_CultureInfo\">\r\n      <span class=\"lang-csharp\">CultureInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about a specific culture (called a <em>locale</em> for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class CultureInfo : ICloneable, IFormatProvider</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CultureInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/globalization/cultureinfo.cs#e319c6636909012f\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The CultureInfo class provides culture-specific information, such as the language, sublanguage, country/region, calendar, and conventions associated with a particular culture. This class also provides access to culture-specific instances of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a>, <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a>, and <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> objects. These objects contain the information required for culture-specific operations, such as casing, formatting dates and numbers, and comparing strings. The CultureInfo class is used either directly or indirectly by classes that format, parse, or manipulate culture-specific data, such as <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>, <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a>, and the numeric types.  </p>\n<p> In this section:  </p>\n<p> <a href=\"#CultureNames\" data-linktype=\"self-bookmark\">Culture names and identifiers</a><br> <a href=\"#Invariant\" data-linktype=\"self-bookmark\">Invariant, neutral, and specific cultures</a><br> <a href=\"#Custom\" data-linktype=\"self-bookmark\">Custom cultures</a><br> <a href=\"#Dynamic\" data-linktype=\"self-bookmark\">Dynamic culture data</a><br> <a href=\"#Current\" data-linktype=\"self-bookmark\">The current culture and current UI culture</a><br> <a href=\"#GetAll\" data-linktype=\"self-bookmark\">Getting all cultures</a><br> <a href=\"#Threads\" data-linktype=\"self-bookmark\">Culture and threads</a><br> <a href=\"#AppDomain\" data-linktype=\"self-bookmark\">Culture and application domains</a><br> <a href=\"#Async\" data-linktype=\"self-bookmark\">Culture and task-based asynchronous operations</a><br> <a href=\"#Serialization\" data-linktype=\"self-bookmark\">CultureInfo object serialization</a><br> <a href=\"#CPanel\" data-linktype=\"self-bookmark\">Control Panel overrides</a><br> <a href=\"#AlternateSort\" data-linktype=\"self-bookmark\">Alternate sort orders</a><br> <a href=\"#Windows\" data-linktype=\"self-bookmark\">Culture and Windows apps</a>  </p>\n<p><a name=\"CultureNames\"></a>   </p>\n<h2 id=\"culture-names-and-identifiers\">Culture names and identifiers</h2>\n<p> The CultureInfo class specifies a unique name for each culture, based on RFC 4646. The name is a combination of an ISO 639 two-letter lowercase culture code associated with a language and an ISO 3166 two-letter uppercase subculture code associated with a country or region. In addition, for apps that target .NET Framework 4 or later and are running under Windows 10 or later, culture names that correspond to valid BCP-47 language tags are supported.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When a culture name is passed to a class constructor or a method such as <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CreateSpecificCulture_\" data-linktype=\"relative-path\">CreateSpecificCulture</a> or CultureInfo, its case is not significant.  </p>\n</div>\n<p> The format for the culture name based on RFC 4646 is <em>languagecode2</em>&gt;-<em>country/regioncode2</em>, where <em>languagecode2</em> is the two-letter language code and <em>country/regioncode2</em> is the two-letter subculture code. Examples include ja-JP for Japanese (Japan) and en-US for English (United States). In cases where a two-letter language code is not available, a three-letter code derived from ISO 639-2 is used.  </p>\n<p> Note that some culture names also specify an ISO 15924 script. For example, Cyrl specifies the Cyrillic script and Latn specifies the Latin script. A culture name that includes a script uses the pattern <em>languagecode2</em>-<em>scripttag</em>-<em>country/regioncode2</em>. An example of this type of culture name is uz-Cyrl-UZ for Uzbek (Cyrillic, Uzbekistan). On Windows operating systems before Windows Vista, a culture name that includes a script uses the pattern <em>languagecode2</em>-<em>country/regioncode2</em>-<em>scripttag</em>, for example, uz-UZ-Cyrl for Uzbek (Cyrillic, Uzbekistan).  </p>\n<p> A neutral culture is specified by only the two-letter lowercase language code. For example, fr specifies the neutral culture for French, and de specifies the neutral culture for German.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There are two culture names that contradict this rule. The cultures Chinese (Simplified), named zh-Hans, and Chinese (Traditional), named zh-Hant, are neutral cultures. The culture names represent the current standard and should be used unless you have a reason for using the older names zh-CHS and zh-CHT.  </p>\n</div>\n<p> A culture identifier is a standard international numeric abbreviation and has the components necessary to uniquely identify one of the installed cultures. Your application can use predefined culture identifiers or define custom identifiers.  </p>\n<p> Certain predefined culture names and identifiers are used by this and other classes in the <a class=\"xref\" href=\"system.globalization\" data-linktype=\"relative-path\">System.Globalization</a> namespace. Detailed culture information appears in the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center.  </p>\n<p> Remember that the culture names and identifiers represent only a subset of cultures that can be found on a particular computer. Windows versions or service packs can change the available cultures. Applications add custom cultures using the <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> class. Users add their own custom cultures using the Microsoft Locale Builder tool. Microsoft Locale Builder is written in managed code using the <code>CultureAndRegionInfoBuilder</code> class.  </p>\n<p> Several distinct names are closely associated with a culture, notably the names associated with the following class members:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_ToString_\" data-linktype=\"relative-path\">ToString</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Name_\" data-linktype=\"relative-path\">Name</a>  \n\n</li>\n</ul>\n<p><a name=\"Invariant\"></a>   </p>\n<h2 id=\"invariant-neutral-and-specific-cultures\">Invariant, neutral, and specific cultures</h2>\n<p> The cultures are generally grouped into three sets: invariant cultures, neutral cultures, and specific cultures.  </p>\n<p> An invariant culture is culture-insensitive. Your application specifies the invariant culture by name using an empty string (&quot;&quot;) or by its identifier. <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> defines an instance of the invariant culture. It is associated with the English language but not with any country/region. It is used in almost any method in the <code>Globalization</code> namespace that requires a culture.  </p>\n<p> A neutral culture is a culture that is associated with a language but not with a country/region. A specific culture is a culture that is associated with a language and a country/region. For example, fr is the neutral name for the French culture, and fr-FR is the name of the specific French (France) culture. Note that Chinese (Simplified) and Chinese (Traditional) are also considered neutral cultures.  </p>\n<p> Creating an instance of a <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> class for a neutral culture is not recommended because the data it contains is arbitrary. To display and sort data, specify both the language and region. Additionally, the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Name_\" data-linktype=\"relative-path\">Name</a> property of a <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object created for a neutral culture returns only the country and does not include the region.  </p>\n<p> The defined cultures have a hierarchy in which the parent of a specific culture is a neutral culture and the parent of a neutral culture is the invariant culture. The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Parent_\" data-linktype=\"relative-path\">Parent</a> property contains the neutral culture associated with a specific culture. Custom cultures should define the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Parent_\" data-linktype=\"relative-path\">Parent</a> property in conformance with this pattern.  </p>\n<p> If the resources for a specific culture are not available in the operating system, the resources for the associated neutral culture are used. If the resources for the neutral culture are not available, the resources embedded in the main assembly are used. For more information on the resource fallback process, see <a href=\"../Topic/Packaging%20and%20Deploying%20Resources%20in%20Desktop%20Apps.md\" data-linktype=\"relative-path\">Packaging and Deploying Resources</a>.  </p>\n<p> The list of locales in the Windows API is slightly different from the list of cultures supported by the .NET Framework. If interoperability with Windows is required, for example, through the p/invoke mechanism, the application should use a specific culture that is defined for the operating system. Use of the specific culture ensures consistency with the equivalent Windows locale, which is identified with a locale identifier that is the same as <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a>.  </p>\n<p> A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> or a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> can be created only for the invariant culture or for specific cultures, not for neutral cultures.  </p>\n<p> If <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is the <a class=\"xref\" href=\"system.globalization.taiwancalendar\" data-linktype=\"relative-path\">TaiwanCalendar</a> but the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> is not set to zh-TW, then <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_NativeCalendarName_\" data-linktype=\"relative-path\">NativeCalendarName</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetEraName_\" data-linktype=\"relative-path\">GetEraName</a>, and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName_\" data-linktype=\"relative-path\">GetAbbreviatedEraName</a> return an empty string (&quot;&quot;).  </p>\n<p><a name=\"Custom\"></a>   </p>\n<h2 id=\"custom-cultures\">Custom cultures</h2>\n<p> In addition to the predefined cultures supported by the Windows operating system and the .NET Framework, the .NET Framework supports three types of custom cultures:  </p>\n<ul>\n<li><p>New cultures that supplement the cultures available in Windows or the .NET Framework. For example, an application could install a CultureInfo object that represents the fj-FJ (or Fijan (Fiji)) culture on a system.  </p>\n</li>\n<li><p>Replacement cultures whose properties are different from the properties of the standard cultures supported by Windows and the .NET Framework.  </p>\n</li>\n<li><p>Standard cultures with user overrides. The user can use the <strong>Region and Language</strong> application in <strong>Control Panel</strong> to customize an existing culture&#39;s property values.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> You can use the <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> class to define, save, and register custom cultures that either supplement or replace existing cultures. The <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder#System_Globalization_CultureAndRegionInfoBuilder_Save_\" data-linktype=\"relative-path\">Save</a> method creates a Locale Data Markup Language (LDML) file that can be used to install a custom culture on target systems. For step-by step information on using the <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> class to create a new or replacement culture, see the <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> class topic.  </p>\n</div>\n<p> Because the .NET Framework supports custom cultures, you should consider the following when working with culture-specific data:  </p>\n<ul>\n<li><p>Custom cultures can have values that exceed the ranges of the predefined cultures. For example, some cultures have unusually long month names, unexpected date or time formats, or other unusual data.  </p>\n</li>\n<li><p>When you display culture-specific data in the user interface, you should respect the user&#39;s customizations; for example, the user might want a 24-hour clock or a yyyyMMdd date format.  </p>\n</li>\n<li><p>Remember that custom cultures override default values. Therefore, you cannot consider culture data to be stable. Country names, number and date formats, and spellings may change in the future. If you want to serialize culture-sensitive data such as date and time strings to be passed to the date and time parsing functions, you should use the invariant culture or a specific .  </p>\n<p>The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CultureTypes_\" data-linktype=\"relative-path\">CultureTypes</a> property value of custom cultures installed on a system includes the <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">System.Globalization.CultureTypes</a> flag, and custom cultures are assigned an <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> property value of <code>LOCALE_CUSTOM_UNSPECIFIED</code> (0x1000, or 4096). Note that, starting with Windows 10, this value is also assigned to system-defined cultures that lack complete cultural data.  </p>\n</li>\n</ul>\n<p><a name=\"Dynamic\"></a>   </p>\n<h2 id=\"dynamic-culture-data\">Dynamic culture data</h2>\n<p> Except for the invariant culture, culture data is dynamic. This is true even for the predefined cultures. For example, countries or regions adopt new currencies, change their spellings of words, or change their preferred calendar, and culture definitions change to track this.  Custom cultures are subject to change without notice, and any specific culture might be overridden by a custom replacement culture. Also, as discussed below, an individual user can override cultural preferences. Applications should always obtain culture data at run time.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When saving data, your application should use the invariant culture, a binary format, or a specific culture-independent format. Data saved according to the current values associated with a particular culture, other than the invariant culture, might become unreadable or might change in meaning if that culture changes.  </p>\n</div>\n<p><a name=\"Current\"></a>   </p>\n<h2 id=\"the-current-culture-and-current-ui-culture\">The current culture and current UI culture</h2>\n<p> Every thread in a .NET Framework application has a current culture and a current UI culture. The current culture determines the formatting conventions for dates, times, numbers, and currency values, the sort order of text, casing conventions, and the ways in which strings are compared. The current UI culture is used to retrieve culture-specific resources at runtime.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For information on how the current and current UI culture is determined on a per-thread basis, see the  <a href=\"#Threads\" data-linktype=\"self-bookmark\">Culture and threads</a> section. For information on how the current and current UI culture is determined on threads executing in a new application domain, and on threads that cross application domain boundaries, see the <a href=\"#AppDomain\" data-linktype=\"self-bookmark\">Culture and application domains</a> section. For information on how the current  and current is determined on  threads performing task-based asynchronous operations, see the <a href=\"#Async\" data-linktype=\"self-bookmark\">Culture and task-based asynchronous operations</a> section.  </p>\n</div>\n<p> For more detailed information on the current culture, see the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property topic. For more detailed information on the current UI culture, see the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property topic.  </p>\n<h3 id=\"retrieving-the-current-and-current-ui-cultures\">Retrieving the current and current UI cultures</h3>\n<p> You can get a CultureInfo object that represents the current culture in either of two ways:  </p>\n<ul>\n<li><p>By retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property.  </p>\n</li>\n<li><p>By retrieving the value of the <a href=\"../Topic/CurrentCulture%20Property.md\" data-linktype=\"relative-path\">Thread.CurrentThread.CurrentCulture</a> property.  </p>\n<p>The following example retrieves both property values, compares them to show that they are equal, and displays the name of the current culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo#1\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim culture1 As CultureInfo = CultureInfo.CurrentCulture\n      Dim culture2 As CultureInfo = Thread.CurrentThread.CurrentCulture\n      Console.WriteLine(&quot;The current culture is {0}&quot;, culture1.Name)\n      Console.WriteLine(&quot;The two CultureInfo objects are equal: {0}&quot;,\n                        culture1.Equals(culture2))\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current culture is en-US\n&#39;     The two CultureInfo objects are equal: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo#1\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo culture1 = CultureInfo.CurrentCulture;\n      CultureInfo culture2 = Thread.CurrentThread.CurrentCulture;\n      Console.WriteLine(&quot;The current culture is {0}&quot;, culture1.Name);\n      Console.WriteLine(&quot;The two CultureInfo objects are equal: {0}&quot;,\n                        culture1 == culture2);\n   }\n}\n// The example displays output like the following:\n//     The current culture is en-US\n//     The two CultureInfo objects are equal: True\n</code></pre><p>You can get a CultureInfo object that represents the current UI culture in either of two ways:  </p>\n</li>\n<li><p>By retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property.  </p>\n</li>\n<li><p>By retrieving the value of the <a href=\"../Topic/CurrentUICulture%20Property.md\" data-linktype=\"relative-path\">Thread.CurrentThread.CurrentUICulture</a> property.  </p>\n<p>The following example retrieves both property values, compares them to show that they are equal, and displays the name of the current UI culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo#2\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo uiCulture1 = CultureInfo.CurrentUICulture;\n      CultureInfo uiCulture2 = Thread.CurrentThread.CurrentUICulture;\n      Console.WriteLine(&quot;The current UI culture is {0}&quot;, uiCulture1.Name);\n      Console.WriteLine(&quot;The two CultureInfo objects are equal: {0}&quot;,\n                        uiCulture1 == uiCulture2);\n   }\n}\n// The example displays output like the following:\n//     The current UI culture is en-US\n//     The two CultureInfo objects are equal: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo#2\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim uiCulture1 As CultureInfo = CultureInfo.CurrentUICulture\n      Dim uiCulture2 As CultureInfo = Thread.CurrentThread.CurrentUICulture\n      Console.WriteLine(&quot;The current UI culture is {0}&quot;, uiCulture1.Name)\n      Console.WriteLine(&quot;The two CultureInfo objects are equal: {0}&quot;,\n                        uiCulture1.Equals(uiCulture2))\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current UI culture is en-US\n&#39;     The two CultureInfo objects are equal: True\n</code></pre></li>\n</ul>\n<h3 id=\"setting-the-current-and-current-ui-cultures\">Setting the current and current UI cultures</h3>\n<p> To change the culture and UI culture of a thread, do the following:  </p>\n<ol>\n<li><p>Instantiate a CultureInfo object that represents that culture by calling a CultureInfo class constructor and passing it the name of the culture. The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_\" data-linktype=\"relative-path\">CultureInfo(String)</a> constructor instantiates a  CultureInfo object that reflects user overrides if the new culture is the same as the current Windows culture.   The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">CultureInfo(String,Boolean)</a> constructor allows you to specify whether the newly instantiated CultureInfo object reflects user overrides if the new culture is the same as the current Windows culture.  </p>\n</li>\n<li><p>Assign the CultureInfo object to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> or<a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property. In addition, for apps running on the version 4.6 or later of the desktop .NET Framework, you can also assign the  CultureInfo object to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property.  </p>\n<p>The following example retrieves the current culture. If it is anything other than the French (France) culture, it changes the current culture to French (France). Otherwise, it changes the current culture to French (Luxembourg).  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo#3\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim current As CultureInfo = CultureInfo.CurrentCulture\n      Console.WriteLine(&quot;The current culture is {0}&quot;, current.Name)\n      Dim newCulture As CultureInfo\n      If current.Name.Equals(&quot;fr-FR&quot;) Then\n         newCulture = New CultureInfo(&quot;fr-LU&quot;)\n      Else   \n         newCulture = new CultureInfo(&quot;fr-FR&quot;)\n      End If\n      \n      CultureInfo.CurrentCulture = newCulture\n      Console.WriteLine(&quot;The current culture is now {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)   \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current culture is en-US\n&#39;     The current culture is now fr-FR\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo#3\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo current = CultureInfo.CurrentCulture;\n      Console.WriteLine(&quot;The current culture is {0}&quot;, current.Name);\n      CultureInfo newCulture;\n      if (current.Name.Equals(&quot;fr-FR&quot;))\n         newCulture = new CultureInfo(&quot;fr-LU&quot;);\n      else   \n         newCulture = new CultureInfo(&quot;fr-FR&quot;);\n      \n      CultureInfo.CurrentCulture = newCulture;\n      Console.WriteLine(&quot;The current culture is now {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);   \n   }\n}\n// The example displays output like the following:\n//     The current culture is en-US\n//     The current culture is now fr-FR\n</code></pre><p>The following example retrieves the current culture. If it is anything other the Slovenian (Slovenia) culture, it changes the current culture to Slovenian (Slovenia). Otherwise, it changes the current culture to Croatian (Croatia).  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo#4\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo current = CultureInfo.CurrentUICulture;\n      Console.WriteLine(&quot;The current UI culture is {0}&quot;, current.Name);\n      CultureInfo newUICulture;\n      if (current.Name.Equals(&quot;sl-SI&quot;))\n         newUICulture = new CultureInfo(&quot;hr-HR&quot;);\n      else   \n         newUICulture = new CultureInfo(&quot;sl-SI&quot;);\n      \n      CultureInfo.CurrentUICulture = newUICulture;\n      Console.WriteLine(&quot;The current UI culture is now {0}&quot;, \n                        CultureInfo.CurrentUICulture.Name);   \n   }\n}\n// The example displays output like the following:\n//     The current UI culture is en-US\n//     The current UI culture is now sl-SI\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo#4\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim current As CultureInfo = CultureInfo.CurrentUICulture\n      Console.WriteLine(&quot;The current UI culture is {0}&quot;, current.Name)\n      Dim newUICulture As CultureInfo\n      If current.Name.Equals(&quot;sl-SI&quot;) Then\n         newUICulture = New CultureInfo(&quot;hr-HR&quot;)\n      Else   \n         newUICulture = new CultureInfo(&quot;sl-SI&quot;)\n      End If\n      \n      CultureInfo.CurrentUICulture = newUICulture\n      Console.WriteLine(&quot;The current UI culture is now {0}&quot;, \n                        CultureInfo.CurrentUICulture.Name)   \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current UI culture is en-US\n&#39;     The current UI culture is now sl-SI\n</code></pre></li>\n</ol>\n<p><a name=\"GetAll\"></a>   </p>\n<h2 id=\"getting-all-cultures\">Getting all cultures</h2>\n<p> You can retrieve an array specific categories of cultures or of all the cultures available on the local computer by calling the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultures_\" data-linktype=\"relative-path\">GetCultures</a> method. For example, you can retrieve custom cultures, specific cultures, or neutral cultures either alone or in combination.  </p>\n<p> The following example calls the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultures_\" data-linktype=\"relative-path\">GetCultures</a> method twice, first with the <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">System.Globalization.CultureTypes</a> enumeration member to retrieve all custom cultures, and then with the <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">System.Globalization.CultureTypes</a> enumeration member to retrieve all replacement cultures.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo#5\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Get all custom cultures.\n      Dim custom() As CultureInfo = CultureInfo.GetCultures(CultureTypes.UserCustomCulture)\n      If custom.Length = 0 Then \n         Console.WriteLine(&quot;There are no user-defined custom cultures.&quot;)\n      Else\n         Console.WriteLine(&quot;Custom cultures:&quot;)\n         For Each culture In custom \n            Console.WriteLine(&quot;   {0} -- {1}&quot;, culture.Name, culture.DisplayName)\n         Next       \n      End If\n      Console.WriteLine()\n      \n      &#39; Get all replacement cultures.\n      Dim replacements() As CultureInfo = CultureInfo.GetCultures(CultureTypes.ReplacementCultures)\n      If replacements.Length = 0 Then \n         Console.WriteLine(&quot;There are no replacement cultures.&quot;)\n      Else \n         Console.WriteLine(&quot;Replacement cultures:&quot;)\n         For Each culture in replacements \n            Console.WriteLine(&quot;   {0} -- {1}&quot;, culture.Name, culture.DisplayName)    \n         Next\n      End If\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     Custom cultures:\n&#39;        x-en-US-sample -- English (United States)\n&#39;        fj-FJ -- Boumaa Fijian (Viti)\n&#39;     \n&#39;     There are no replacement cultures.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo#5\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get all custom cultures.\n      CultureInfo[] custom = CultureInfo.GetCultures(CultureTypes.UserCustomCulture);\n      if (custom.Length == 0) { \n         Console.WriteLine(&quot;There are no user-defined custom cultures.&quot;);\n      }\n      else {\n         Console.WriteLine(&quot;Custom cultures:&quot;);\n         foreach (var culture in custom) \n            Console.WriteLine(&quot;   {0} -- {1}&quot;, culture.Name, culture.DisplayName);    \n      }\n      Console.WriteLine();\n      \n      // Get all replacement cultures.\n      CultureInfo[] replacements = CultureInfo.GetCultures(CultureTypes.ReplacementCultures);\n      if (replacements.Length == 0) { \n         Console.WriteLine(&quot;There are no replacement cultures.&quot;);\n      }                                             \n      else {\n         Console.WriteLine(&quot;Replacement cultures:&quot;);\n         foreach (var culture in replacements) \n            Console.WriteLine(&quot;   {0} -- {1}&quot;, culture.Name, culture.DisplayName);    \n      }\n      Console.WriteLine();\n   }\n}\n// The example displays output like the following:\n//     Custom cultures:\n//        x-en-US-sample -- English (United States)\n//        fj-FJ -- Boumaa Fijian (Viti)\n//     \n//     There are no replacement cultures.\n</code></pre><p><a name=\"Threads\"></a>   </p>\n<h2 id=\"culture-and-threads\">Culture and threads</h2>\n<p> When a new application thread is started, its current culture and current UI culture are defined by the current system culture, and not by the current thread culture. The following example illustrates the difference. It sets the current culture and current UI culture of an application thread to the French (France) culture (fr-FR). If the current culture is already fr-FR, the example sets it to the English (United States) culture (en-US). It displays three random numbers as currency values and then creates a new thread, which, in turn, displays three more random numbers as currency values. But as the output from the example shows, the currency values displayed by the new thread do not reflect the formatting conventions of the French (France) culture, unlike the output from the main application thread.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Class.Thread#1\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   static Random rnd = new Random();\n   \n   public static void Main()\n   {\n      if (Thread.CurrentThread.CurrentCulture.Name != &quot;fr-FR&quot;) {\n         // If current culture is not fr-FR, set culture to fr-FR.\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n         Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      }\n      else {\n         // Set culture to en-US.\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n         Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      }\n      ThreadProc();\n          \n      Thread worker = new Thread(ThreadProc);\n      worker.Name = &quot;WorkerThread&quot;;\n      worker.Start();\n   }\n   \n   private static void DisplayThreadInfo()\n   {\n      Console.WriteLine(&quot;\\nCurrent Thread Name: &#39;{0}&#39;&quot;, \n                        Thread.CurrentThread.Name);\n      Console.WriteLine(&quot;Current Thread Culture/UI Culture: {0}/{1}&quot;, \n                        Thread.CurrentThread.CurrentCulture.Name,\n                        Thread.CurrentThread.CurrentUICulture.Name);                        \n   }\n   \n   private static void DisplayValues()\n   {\n      // Create new thread and display three random numbers.\n      Console.WriteLine(&quot;Some currency values:&quot;);\n      for (int ctr = 0; ctr &lt;= 3; ctr++)\n         Console.WriteLine(&quot;   {0:C2}&quot;, rnd.NextDouble() * 10);                        \n   }\n   \n   private static void ThreadProc()\n   {\n      DisplayThreadInfo();\n      DisplayValues();\n   }\n}\n// The example displays output similar to the following:\n//       Current Thread Name: &#39;&#39;\n//       Current Thread Culture/UI Culture: fr-FR/fr-FR\n//       Some currency values:\n//          8,11 €\n//          1,48 €\n//          8,99 €\n//          9,04 €\n//       \n//       Current Thread Name: &#39;WorkerThread&#39;\n//       Current Thread Culture/UI Culture: en-US/en-US\n//       Some currency values:\n//          $6.72\n//          $6.35\n//          $2.90\n//          $7.72\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Class.Thread#1\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Dim rnd As New Random()\n   \n   Public Sub Main()\n      If Thread.CurrentThread.CurrentCulture.Name &lt;&gt; &quot;fr-FR&quot; Then\n         &#39; If current culture is not fr-FR, set culture to fr-FR.\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n         Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      Else\n         &#39; Set culture to en-US.\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n         Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      End If\n      ThreadProc()\n          \n       Dim worker As New Thread(AddressOf ThreadProc)\n       worker.Name = &quot;WorkerThread&quot;\n       worker.Start()\n   End Sub\n   \n   Private Sub DisplayThreadInfo()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current Thread Name: &#39;{0}&#39;&quot;, \n                        Thread.CurrentThread.Name)\n      Console.WriteLine(&quot;Current Thread Culture/UI Culture: {0}/{1}&quot;, \n                        Thread.CurrentThread.CurrentCulture.Name,\n                        Thread.CurrentThread.CurrentUICulture.Name)                        \n   End Sub\n   \n   Private Sub DisplayValues()\n      &#39; Create new thread and display three random numbers.\n      Console.WriteLine(&quot;Some currency values:&quot;)\n      For ctr As Integer = 0 To 3\n         Console.WriteLine(&quot;   {0:C2}&quot;, rnd.NextDouble() * 10)                        \n      Next\n   End Sub\n   \n   Private Sub ThreadProc()\n      DisplayThreadInfo()\n      DisplayValues()\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       Current Thread Name: &#39;&#39;\n&#39;       Current Thread Culture/UI Culture: fr-FR/fr-FR\n&#39;       Some currency values:\n&#39;          8,11 €\n&#39;          1,48 €\n&#39;          8,99 €\n&#39;          9,04 €\n&#39;       \n&#39;       Current Thread Name: &#39;WorkerThread&#39;\n&#39;       Current Thread Culture/UI Culture: en-US/en-US\n&#39;       Some currency values:\n&#39;          $6.72\n&#39;          $6.35\n&#39;          $2.90\n&#39;          $7.72\n</code></pre><p> In versions of the .NET Framework before the .NET Framework 4.5, the most common way to ensure that the main application thread shares the same culture with all other worker threads is to pass either the name of the application-wide culture or a CultureInfo object that represents the application-wide culture to a <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">System.Threading.ParameterizedThreadStart</a> delegate. The following example uses this approach to ensure that the currency values displayed by two threads reflect the formatting conventions of the same culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Class.Thread#2\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   static Random rnd = new Random();\n   \n   public static void Main()\n   {\n      if (Thread.CurrentThread.CurrentCulture.Name != &quot;fr-FR&quot;) {\n         // If current culture is not fr-FR, set culture to fr-FR.\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n         Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      }   \n      else {\n         // Set culture to en-US.\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n         Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      }\n      DisplayThreadInfo();\n      DisplayValues();\n          \n       Thread worker = new Thread(Example.ThreadProc);\n       worker.Name = &quot;WorkerThread&quot;;\n       worker.Start(Thread.CurrentThread.CurrentCulture);\n   }\n   \n   private static void DisplayThreadInfo()\n   {\n      Console.WriteLine(&quot;\\nCurrent Thread Name: &#39;{0}&#39;&quot;, \n                        Thread.CurrentThread.Name);\n      Console.WriteLine(&quot;Current Thread Culture/UI Culture: {0}/{1}&quot;, \n                        Thread.CurrentThread.CurrentCulture.Name,\n                        Thread.CurrentThread.CurrentUICulture.Name);                        \n   }\n   \n   private static void DisplayValues()\n   {\n      // Create new thread and display three random numbers.\n      Console.WriteLine(&quot;Some currency values:&quot;);\n      for (int ctr = 0; ctr &lt;= 3; ctr++)\n         Console.WriteLine(&quot;   {0:C2}&quot;, rnd.NextDouble() * 10);                        \n   }\n   \n   private static void ThreadProc(Object obj) \n   {\n      Thread.CurrentThread.CurrentCulture = (CultureInfo) obj;\n      Thread.CurrentThread.CurrentUICulture = (CultureInfo) obj;\n      DisplayThreadInfo();\n      DisplayValues();\n   }\n}\n// The example displays output similar to the following:\n//       Current Thread Name: &#39;&#39;\n//       Current Thread Culture/UI Culture: fr-FR/fr-FR\n//       Some currency values:\n//          6,83 €\n//          3,47 €\n//          6,07 €\n//          1,70 €\n//       \n//       Current Thread Name: &#39;WorkerThread&#39;\n//       Current Thread Culture/UI Culture: fr-FR/fr-FR\n//       Some currency values:\n//          9,54 €\n//          9,50 €\n//          0,58 €\n//          6,91 €\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Class.Thread#2\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Dim rnd As New Random()\n   \n   Public Sub Main()\n      If Thread.CurrentThread.CurrentCulture.Name &lt;&gt; &quot;fr-FR&quot; Then\n         &#39; If current culture is not fr-FR, set culture to fr-FR.\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n         Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      Else\n         &#39; Set culture to en-US.\n         Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n         Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      End If\n      DisplayThreadInfo()\n      DisplayValues()\n          \n       Dim worker As New Thread(AddressOf ThreadProc)\n       worker.Name = &quot;WorkerThread&quot;\n       worker.Start(Thread.CurrentThread.CurrentCulture)\n   End Sub\n   \n   Private Sub DisplayThreadInfo()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current Thread Name: &#39;{0}&#39;&quot;, \n                        Thread.CurrentThread.Name)\n      Console.WriteLine(&quot;Current Thread Culture/UI Culture: {0}/{1}&quot;, \n                        Thread.CurrentThread.CurrentCulture.Name,\n                        Thread.CurrentThread.CurrentUICulture.Name)                        \n   End Sub\n   \n   Private Sub DisplayValues()\n      &#39; Create new thread and display three random numbers.\n      Console.WriteLine(&quot;Some currency values:&quot;)\n      For ctr As Integer = 0 To 3\n         Console.WriteLine(&quot;   {0:C2}&quot;, rnd.NextDouble() * 10)                        \n      Next\n   End Sub\n   \n   Private Sub ThreadProc(obj As Object)\n      Thread.CurrentThread.CurrentCulture = CType(obj, CultureInfo)\n      Thread.CurrentThread.CurrentUICulture = CType(obj, CultureInfo)\n      DisplayThreadInfo()\n      DisplayValues()\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       Current Thread Name: &#39;&#39;\n&#39;       Current Thread Culture/UI Culture: fr-FR/fr-FR\n&#39;       Some currency values:\n&#39;          6,83 €\n&#39;          3,47 €\n&#39;          6,07 €\n&#39;          1,70 €\n&#39;       \n&#39;       Current Thread Name: &#39;WorkerThread&#39;\n&#39;       Current Thread Culture/UI Culture: fr-FR/fr-FR\n&#39;       Some currency values:\n&#39;          9,54 €\n&#39;          9,50 €\n&#39;          0,58 €\n&#39;          6,91 €\n</code></pre><p> You can set the culture and UI culture of thread pool threads in a similar manner by calling the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_QueueUserWorkItem_System_Threading_WaitCallback_System_Object_\" data-linktype=\"relative-path\">System.Threading.ThreadPool.QueueUserWorkItem(WaitCallback,Object)</a> method.  </p>\n<p> Starting with the .NET Framework 4.5, you can set the culture and UI culture of all threads in an application domain more directly by assigning a CultureInfo object that represents that culture to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> properties. The following example uses these properties to ensure that all threads in the default application domain share the same culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Class.Thread#3\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   static Random rnd = new Random();\n   \n   public static void Main()\n   {\n      if (Thread.CurrentThread.CurrentCulture.Name != &quot;fr-FR&quot;) {\n         // If current culture is not fr-FR, set culture to fr-FR.\n         CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n         CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      }   \n      else {\n         // Set culture to en-US.\n         CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n         CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      }\n      ThreadProc();\n          \n      Thread worker = new Thread(Example.ThreadProc);\n      worker.Name = &quot;WorkerThread&quot;;\n      worker.Start();\n   }\n   \n   private static void DisplayThreadInfo()\n   {\n      Console.WriteLine(&quot;\\nCurrent Thread Name: &#39;{0}&#39;&quot;, \n                        Thread.CurrentThread.Name);\n      Console.WriteLine(&quot;Current Thread Culture/UI Culture: {0}/{1}&quot;, \n                        Thread.CurrentThread.CurrentCulture.Name,\n                        Thread.CurrentThread.CurrentUICulture.Name);                        \n   }\n   \n   private static void DisplayValues()\n   {\n      // Create new thread and display three random numbers.\n      Console.WriteLine(&quot;Some currency values:&quot;);\n      for (int ctr = 0; ctr &lt;= 3; ctr++)\n         Console.WriteLine(&quot;   {0:C2}&quot;, rnd.NextDouble() * 10);                        \n   }\n   \n   private static void ThreadProc() \n   {\n      DisplayThreadInfo();\n      DisplayValues();\n   }\n}\n// The example displays output similar to the following:\n//       Current Thread Name: &#39;&#39;\n//       Current Thread Culture/UI Culture: fr-FR/fr-FR\n//       Some currency values:\n//          6,83 €\n//          3,47 €\n//          6,07 €\n//          1,70 €\n//       \n//       Current Thread Name: &#39;WorkerThread&#39;\n//       Current Thread Culture/UI Culture: fr-FR/fr-FR\n//       Some currency values:\n//          9,54 €\n//          9,50 €\n//          0,58 €\n//          6,91 €\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Class.Thread#3\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Dim rnd As New Random()\n   \n   Public Sub Main()\n      If Thread.CurrentThread.CurrentCulture.Name &lt;&gt; &quot;fr-FR&quot; Then\n         &#39; If current culture is not fr-FR, set culture to fr-FR.\n         CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n         CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      Else\n         &#39; Set culture to en-US.\n         CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n         CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      End If\n      ThreadProc()\n\n       Dim worker As New Thread(AddressOf ThreadProc)\n       worker.Name = &quot;WorkerThread&quot;\n       worker.Start()\n   End Sub\n   \n   Private Sub DisplayThreadInfo()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current Thread Name: &#39;{0}&#39;&quot;, \n                        Thread.CurrentThread.Name)\n      Console.WriteLine(&quot;Current Thread Culture/UI Culture: {0}/{1}&quot;, \n                        Thread.CurrentThread.CurrentCulture.Name,\n                        Thread.CurrentThread.CurrentUICulture.Name)                        \n   End Sub\n   \n   Private Sub DisplayValues()\n      &#39; Create new thread and display three random numbers.\n      Console.WriteLine(&quot;Some currency values:&quot;)\n      For ctr As Integer = 0 To 3\n         Console.WriteLine(&quot;   {0:C2}&quot;, rnd.NextDouble() * 10)                        \n      Next\n   End Sub\n   \n   Private Sub ThreadProc()\n      DisplayThreadInfo()\n      DisplayValues()\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       Current Thread Name: &#39;&#39;\n&#39;       Current Thread Culture/UI Culture: fr-FR/fr-FR\n&#39;       Some currency values:\n&#39;          6,83 €\n&#39;          3,47 €\n&#39;          6,07 €\n&#39;          1,70 €\n&#39;       \n&#39;       Current Thread Name: &#39;WorkerThread&#39;\n&#39;       Current Thread Culture/UI Culture: fr-FR/fr-FR\n&#39;       Some currency values:\n&#39;          9,54 €\n&#39;          9,50 €\n&#39;          0,58 €\n&#39;          6,91 €\n</code></pre><div class=\"WARNING\"><h5>Warning</h5><p> Although the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> properties are static members, they define the default culture and default UI culture only for the application domain that is current at the time these property values are set. For more information, see the next section, <a href=\"#AppDomain\" data-linktype=\"self-bookmark\">Culture and application domains</a>.  </p>\n</div>\n<p> When you assign values to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> properties, the culture and UI culture of the threads in the application domain also change if they have not explicitly been assigned a culture. However, these threads reflect the new culture settings only while they execute in the current application domain. If these threads execute in another application domain, their culture becomes the default culture defined for that application domain. As a result, we recommend that you always set the culture of the main application thread, and not rely on the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> properties to change it.  </p>\n<p><a name=\"AppDomain\"></a>   </p>\n<h2 id=\"culture-and-application-domains\">Culture and application domains</h2>\n<p> <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> are static properties that explicitly define a default culture only for the application domain that is current when the property value is set or retrieved. The following example sets the default culture and default UI culture in the default application domain to French (France), and then uses the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> class and the <a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a> delegate to set the default culture and UI culture in a new application domain to Russian (Russia). A single thread then executes two methods in each application domain. Note that the thread&#39;s culture and UI culture are not explicitly set; they are derived from the default culture and UI culture of the application domain in which the thread is executing. Note also that the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> properties return the default CultureInfo values of the application domain that is current when the method call is made.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Class.AppDomain#1\">using System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Set the default culture and display the current date in the current application domain.\n      Info info1 = new Info();\n      SetAppDomainCultures(&quot;fr-FR&quot;);\n      \n      // Create a second application domain.\n      AppDomainSetup setup = new AppDomainSetup();\n      setup.AppDomainInitializer = SetAppDomainCultures;\n      setup.AppDomainInitializerArguments = new string[] { &quot;ru-RU&quot; };\n      AppDomain domain = AppDomain.CreateDomain(&quot;Domain2&quot;, null, setup);\n      // Create an Info object in the new application domain.\n      Info info2 = (Info) domain.CreateInstanceAndUnwrap(typeof(Example).Assembly.FullName, \n                                                         &quot;Info&quot;); \n\n      // Execute methods in the two application domains.\n      info2.DisplayDate();\n      info2.DisplayCultures();\n      \n      info1.DisplayDate();\n      info1.DisplayCultures();            \n   }\n\n   public static void SetAppDomainCultures(string[] names)\n   {\n      SetAppDomainCultures(names[0]);\n   }\n   \n   public static void SetAppDomainCultures(string name)\n   {\n       try {\n         CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CreateSpecificCulture(name);\n         CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.CreateSpecificCulture(name);\n      }\n      // If an exception occurs, we&#39;ll just fall back to the system default.\n      catch (CultureNotFoundException) {\n         return;\n      }   \n      catch (ArgumentException) {\n         return;\n      } \n   }\n}\n\npublic class Info : MarshalByRefObject\n{\n   public void DisplayDate()\n   {\n      Console.WriteLine(&quot;Today is {0:D}&quot;, DateTime.Now);\n   }\n   \n   public void DisplayCultures()\n   {\n      Console.WriteLine(&quot;Application domain is {0}&quot;, AppDomain.CurrentDomain.Id);\n      Console.WriteLine(&quot;Default Culture: {0}&quot;, CultureInfo.DefaultThreadCurrentCulture);\n      Console.WriteLine(&quot;Default UI Culture: {0}&quot;, CultureInfo.DefaultThreadCurrentUICulture);\n   }\n}\n// The example displays the following output:\n//       Today is 14 октября 2011 г.\n//       Application domain is 2\n//       Default Culture: ru-RU\n//       Default UI Culture: ru-RU\n//       Today is vendredi 14 octobre 2011\n//       Application domain is 1\n//       Default Culture: fr-FR\n//       Default UI Culture: fr-FR\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Class.AppDomain#1\">Imports System.Globalization\nImports System.Reflection\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      &#39; Set the default culture and display the current date in the current application domain.\n      Dim info1 As New Info()\n      SetAppDomainCultures(&quot;fr-FR&quot;)\n      \n      &#39; Create a second application domain.\n      Dim setup As New AppDomainSetup()\n      setup.AppDomainInitializer = AddressOf SetAppDomainCultures\n      setup.AppDomainInitializerArguments = { &quot;ru-RU&quot; }\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;Domain2&quot;, Nothing, setup)\n      &#39; Create an Info object in the new application domain.\n      Dim info2 As Info = CType(domain.CreateInstanceAndUnwrap(GetType(Example).Assembly.FullName, \n                                                               &quot;Info&quot;), Info) \n\n      &#39; Execute methods in the two application domains.\n      info2.DisplayDate()\n      info2.DisplayCultures()\n      \n      info1.DisplayDate()\n      info1.DisplayCultures()            \n   End Sub\n   \n   Public Sub SetAppDomainCultures(names() As String)\n      SetAppDomainCultures(names(0))\n   End Sub\n   \n   Public Sub SetAppDomainCultures(name As String)\n       Try\n         CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CreateSpecificCulture(name)\n         CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.CreateSpecificCulture(name)\n      &#39; If an exception occurs, we&#39;ll just fall back to the system default.\n      Catch e As CultureNotFoundException\n         Return\n      Catch e As ArgumentException\n         Return\n      End Try      \n   End Sub\nEnd Module\n\nPublic Class Info : Inherits MarshalByRefObject\n   Public Sub DisplayDate()\n      Console.WriteLine(&quot;Today is {0:D}&quot;, Date.Now)\n   End Sub\n   \n   Public Sub DisplayCultures()\n      Console.WriteLine(&quot;Application domain is {0}&quot;, AppDomain.CurrentDomain.Id)\n      Console.WriteLine(&quot;Default Culture: {0}&quot;, CultureInfo.DefaultThreadCurrentCulture)\n      Console.WriteLine(&quot;Default UI Culture: {0}&quot;, CultureInfo.DefaultThreadCurrentUICulture)\n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       Today is 14 октября 2011 г.\n&#39;       Application domain is 2\n&#39;       Default Culture: ru-RU\n&#39;       Default UI Culture: ru-RU\n&#39;       Today is vendredi 14 octobre 2011\n&#39;       Application domain is 1\n&#39;       Default Culture: fr-FR\n&#39;       Default UI Culture: fr-FR\n</code></pre><p> For more information about cultures and application domains, see the &quot;Application Domains and Threads&quot; section in the  topic.  </p>\n<p><a name=\"Async\"></a>   </p>\n<h2 id=\"culture-and-task-based-asynchronous-operations\">Culture and task-based asynchronous operations</h2>\n<p> The <a href=\"../Topic/Task-based%20Asynchronous%20Programming.md\" data-linktype=\"relative-path\">task-based asynchronous programming pattern</a> uses <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> and <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> objects to asynchronously execute delegates on thread pool threads. The specific thread on which a particular task runs is not known in advance, but is determined only at runtime.  </p>\n<p> For apps that target the .NET Framework 4.6 or later versions, culture is part of an asynchronous operation&#39;s context. In other words, starting with apps that target the .NET Framework 4.6, asynchronous operations by default inherit the values of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> properties of the thread from which they are launched. If the current culture or current UI culture differs from the system culture, the current culture crosses thread boundaries and becomes the current culture of the thread pool thread that is executing an asynchronous operation.  </p>\n<p> The following example provides a simple illustration. It uses the <a class=\"xref\" href=\"system.runtime.versioning.targetframeworkattribute\" data-linktype=\"relative-path\">TargetFrameworkAttribute</a> attribute to target the .NET Framework 4.6. The example defines a <a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func&lt;TResult&gt;</a> delegate, <code>formatDelegate</code>, that returns some numbers formatted as currency values. The example changes the current system culture to either French (France) or, if French (France) is already the current culture, English (United States). It then:  </p>\n<ul>\n<li><p>Invokes the delegate directly so that it runs synchronously on the main app thread.  </p>\n</li>\n<li><p>Creates a task that executes the delegate asynchronously on a thread pool thread.  </p>\n</li>\n<li><p>Creates a task that executes the delegate synchronously on the main app thread by calling the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_RunSynchronously_\" data-linktype=\"relative-path\">RunSynchronously</a> method.  </p>\n<p>As the output from the example shows, when the current culture is changed to French (France), the current culture of the thread from which tasks are invoked asynchronously becomes the current culture for that asynchronous operation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Class.Async#1\">using System;\nusing System.Globalization;\nusing System.Runtime.Versioning;\nusing System.Threading;\nusing System.Threading.Tasks;\n\n[assembly:TargetFramework(&quot;.NETFramework,Version=v4.6&quot;)]\n\npublic class Example\n{\n   \n   public static void Main()\n   {\n       decimal[] values = { 163025412.32m, 18905365.59m };\n       string formatString = &quot;C2&quot;;\n       Func&lt;String&gt; formatDelegate = () =&gt; { string output = String.Format(&quot;Formatting using the {0} culture on thread {1}.\\n&quot;,\n                                                                           CultureInfo.CurrentCulture.Name,\n                                                                           Thread.CurrentThread.ManagedThreadId);\n                                             foreach (var value in values)\n                                                output += String.Format(&quot;{0}   &quot;, value.ToString(formatString));\n                                                   \n                                             output += Environment.NewLine;\n                                             return output;\n                                           };\n       \n       Console.WriteLine(&quot;The example is running on thread {0}&quot;, \n                         Thread.CurrentThread.ManagedThreadId);\n       // Make the current culture different from the system culture.\n       Console.WriteLine(&quot;The current culture is {0}&quot;, \n                         CultureInfo.CurrentCulture.Name);\n       if (CultureInfo.CurrentCulture.Name == &quot;fr-FR&quot;)\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n       else\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;);\n\n       Console.WriteLine(&quot;Changed the current culture to {0}.\\n&quot;,\n                         CultureInfo.CurrentCulture.Name);\n       \n       // Execute the delegate synchronously.\n       Console.WriteLine(&quot;Executing the delegate synchronously:&quot;);\n       Console.WriteLine(formatDelegate());\n       \n       // Call an async delegate to format the values using one format string.\n       Console.WriteLine(&quot;Executing a task asynchronously:&quot;); \n       var t1 = Task.Run(formatDelegate);\n       Console.WriteLine(t1.Result);\n       \n       Console.WriteLine(&quot;Executing a task synchronously:&quot;);\n       var t2 = new Task&lt;String&gt;(formatDelegate); \n       t2.RunSynchronously();\n       Console.WriteLine(t2.Result);\n   }\n}\n// The example displays the following output:\n//         The example is running on thread 1\n//         The current culture is en-US\n//         Changed the current culture to fr-FR.\n//\n//         Executing the delegate synchronously:\n//         Formatting using the fr-FR culture on thread 1.\n//         163�025�412,32 �   18�905�365,59 �\n//\n//         Executing a task asynchronously:\n//         Formatting using the fr-FR culture on thread 3.\n//         163�025�412,32 �   18�905�365,59 �\n//\n//         Executing a task synchronously:\n//         Formatting using the fr-FR culture on thread 1.\n//         163�025�412,32 �   18�905�365,59 �\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Class.Async#1\">Imports System.Globalization\nImports System.Runtime.Versioning\nImports System.Threading\nImports System.Threading.Tasks\n\n&lt;Assembly:TargetFramework(&quot;.NETFramework,Version=v4.6&quot;)&gt;\n\nModule Example\n   Public Sub Main()\n       Dim values() As Decimal = { 163025412.32d, 18905365.59d }\n       Dim formatString As String = &quot;C2&quot;\n       Dim formatDelegate As Func(Of String) = Function()\n                                                  Dim output As String = String.Format(&quot;Formatting using the {0} culture on thread {1}.&quot;,\n                                                                                       CultureInfo.CurrentCulture.Name,\n                                                                                       Thread.CurrentThread.ManagedThreadId)\n                                                  output += Environment.NewLine\n                                                  For Each value In values\n                                                     output += String.Format(&quot;{0}   &quot;, value.ToString(formatString))\n                                                  Next \n                                                  output += Environment.NewLine\n                                                  Return output\n                                               End Function\n       \n       Console.WriteLine(&quot;The example is running on thread {0}&quot;, \n                         Thread.CurrentThread.ManagedThreadId)\n       &#39; Make the current culture different from the system culture.\n       Console.WriteLine(&quot;The current culture is {0}&quot;, \n                         CultureInfo.CurrentCulture.Name)\n       If CultureInfo.CurrentCulture.Name = &quot;fr-FR&quot; Then\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;)\n       Else\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;)\n       End If\n       Console.WriteLine(&quot;Changed the current culture to {0}.&quot;,\n                         CultureInfo.CurrentCulture.Name)\n       Console.WriteLine()                  \n       \n       &#39; Execute the delegate synchronously.\n       Console.WriteLine(&quot;Executing the delegate synchronously:&quot;)\n       Console.WriteLine(formatDelegate())\n       \n       &#39; Call an async delegate to format the values using one format string.\n       Console.WriteLine(&quot;Executing a task asynchronously:&quot;) \n       Dim t1 = Task.Run(formatDelegate)\n       Console.WriteLine(t1.Result)\n       \n       Console.WriteLine(&quot;Executing a task synchronously:&quot;)\n       Dim t2 = New Task(Of String)(formatDelegate) \n       t2.RunSynchronously()\n       Console.WriteLine(t2.Result)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;          The example is running on thread 1\n&#39;          The current culture is en-US\n&#39;          Changed the current culture to fr-FR.\n&#39;\n&#39;          Executing the delegate synchronously:\n&#39;          Formatting Imports the fr-FR culture on thread 1.\n&#39;          163�025�412,32 �   18�905�365,59 �\n&#39;\n&#39;          Executing a task asynchronously:\n&#39;          Formatting Imports the fr-FR culture on thread 3.\n&#39;          163�025�412,32 �   18�905�365,59 �\n&#39;\n&#39;          Executing a task synchronously:\n&#39;          Formatting Imports the fr-FR culture on thread 1.\n&#39;          163�025�412,32 �   18�905�365,59 �\n</code></pre><p>For apps that target versions of the .NET Framework prior to the .NET Framework 4.6, or for apps that do not target a particular version of the .NET Framework, the culture of the calling thread is not part of a task&#39;s context. Instead, unless one is explicitly defined, the culture of new threads by default is the system culture. The following example, which is identical to the previous example except that it lacks the <a class=\"xref\" href=\"system.runtime.versioning.targetframeworkattribute\" data-linktype=\"relative-path\">TargetFrameworkAttribute</a> attribute, illustrates this. Because the system culture of the system on which the example executed was English (United States), the culture of the task that executes asynchronously on a thread pool thread is en-US rather than fr-FR.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Class.Async#2\">using System;\nusing System.Globalization;\nusing System.Runtime.Versioning;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n       decimal[] values = { 163025412.32m, 18905365.59m };\n       string formatString = &quot;C2&quot;;\n       Func&lt;String&gt; formatDelegate = () =&gt; { string output = String.Format(&quot;Formatting using the {0} culture on thread {1}.\\n&quot;,\n                                                                           CultureInfo.CurrentCulture.Name,\n                                                                           Thread.CurrentThread.ManagedThreadId);\n                                             foreach (var value in values)\n                                                output += String.Format(&quot;{0}   &quot;, value.ToString(formatString));\n                                                   \n                                             output += Environment.NewLine;\n                                             return output;\n                                           };\n       \n       Console.WriteLine(&quot;The example is running on thread {0}&quot;, \n                         Thread.CurrentThread.ManagedThreadId);\n       // Make the current culture different from the system culture.\n       Console.WriteLine(&quot;The current culture is {0}&quot;, \n                         CultureInfo.CurrentCulture.Name);\n       if (CultureInfo.CurrentCulture.Name == &quot;fr-FR&quot;)\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n       else\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;);\n\n       Console.WriteLine(&quot;Changed the current culture to {0}.\\n&quot;,\n                         CultureInfo.CurrentCulture.Name);\n       \n       // Execute the delegate synchronously.\n       Console.WriteLine(&quot;Executing the delegate synchronously:&quot;);\n       Console.WriteLine(formatDelegate());\n       \n       // Call an async delegate to format the values using one format string.\n       Console.WriteLine(&quot;Executing a task asynchronously:&quot;); \n       var t1 = Task.Run(formatDelegate);\n       Console.WriteLine(t1.Result);\n       \n       Console.WriteLine(&quot;Executing a task synchronously:&quot;);\n       var t2 = new Task&lt;String&gt;(formatDelegate); \n       t2.RunSynchronously();\n       Console.WriteLine(t2.Result);\n   }\n}\n// The example displays the following output:\n//     The example is running on thread 1\n//     The current culture is en-US\n//     Changed the current culture to fr-FR.\n//     \n//     Executing the delegate synchronously:\n//     Formatting using the fr-FR culture on thread 1.\n//     163�025�412,32 �   18�905�365,59 �\n//     \n//     Executing a task asynchronously:\n//     Formatting using the en-US culture on thread 3.\n//     $163,025,412.32   $18,905,365.59\n//     \n//     Executing a task synchronously:\n//     Formatting using the fr-FR culture on thread 1.\n//     163�025�412,32 �   18�905�365,59 �\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Class.Async#2\">Imports System.Globalization\nImports System.Runtime.Versioning\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n       Dim values() As Decimal = { 163025412.32d, 18905365.59d }\n       Dim formatString As String = &quot;C2&quot;\n       Dim formatDelegate As Func(Of String) = Function()\n                                                  Dim output As String = String.Format(&quot;Formatting using the {0} culture on thread {1}.&quot;,\n                                                                                       CultureInfo.CurrentCulture.Name,\n                                                                                       Thread.CurrentThread.ManagedThreadId)\n                                                  output += Environment.NewLine\n                                                  For Each value In values\n                                                     output += String.Format(&quot;{0}   &quot;, value.ToString(formatString))\n                                                  Next \n                                                  output += Environment.NewLine\n                                                  Return output\n                                               End Function\n       \n       Console.WriteLine(&quot;The example is running on thread {0}&quot;, \n                         Thread.CurrentThread.ManagedThreadId)\n       &#39; Make the current culture different from the system culture.\n       Console.WriteLine(&quot;The current culture is {0}&quot;, \n                         CultureInfo.CurrentCulture.Name)\n       If CultureInfo.CurrentCulture.Name = &quot;fr-FR&quot; Then\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;)\n       Else\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;)\n       End If\n       Console.WriteLine(&quot;Changed the current culture to {0}.&quot;,\n                         CultureInfo.CurrentCulture.Name)\n       Console.WriteLine()                  \n       \n       &#39; Execute the delegate synchronously.\n       Console.WriteLine(&quot;Executing the delegate synchronously:&quot;)\n       Console.WriteLine(formatDelegate())\n       \n       &#39; Call an async delegate to format the values using one format string.\n       Console.WriteLine(&quot;Executing a task asynchronously:&quot;) \n       Dim t1 = Task.Run(formatDelegate)\n       Console.WriteLine(t1.Result)\n       \n       Console.WriteLine(&quot;Executing a task synchronously:&quot;)\n       Dim t2 = New Task(Of String)(formatDelegate) \n       t2.RunSynchronously()\n       Console.WriteLine(t2.Result)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The example is running on thread 1\n&#39;     The current culture is en-US\n&#39;     Changed the current culture to fr-FR.\n&#39;     \n&#39;     Executing the delegate synchronously:\n&#39;     Formatting using the fr-FR culture on thread 1.\n&#39;     163�025�412,32 �   18�905�365,59 �\n&#39;     \n&#39;     Executing a task asynchronously:\n&#39;     Formatting using the en-US culture on thread 3.\n&#39;     $163,025,412.32   $18,905,365.59\n&#39;     \n&#39;     Executing a task synchronously:\n&#39;     Formatting using the fr-FR culture on thread 1.\n&#39;     163�025�412,32 �   18�905�365,59 �\n</code></pre><p>For apps that target versions of the .NET Framework from the .NET Framework 4.5 and later but prior to the .NET Framework 4.6, you can use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> properties to ensure that the culture of the calling thread is used in asynchronous tasks that execute on thread pool threads. The following example is identical to the previous example, except that it uses the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> property to ensure that thread pool threads have the same culture as the main app thread.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Class.Async#3\">Imports System.Globalization\nImports System.Runtime.Versioning\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n       Dim values() As Decimal = { 163025412.32d, 18905365.59d }\n       Dim formatString As String = &quot;C2&quot;\n       Dim formatDelegate As Func(Of String) = Function()\n                                                  Dim output As String = String.Format(&quot;Formatting using the {0} culture on thread {1}.&quot;,\n                                                                                       CultureInfo.CurrentCulture.Name,\n                                                                                       Thread.CurrentThread.ManagedThreadId)\n                                                  output += Environment.NewLine\n                                                  For Each value In values\n                                                     output += String.Format(&quot;{0}   &quot;, value.ToString(formatString))\n                                                  Next \n                                                  output += Environment.NewLine\n                                                  Return output\n                                               End Function\n       \n       Console.WriteLine(&quot;The example is running on thread {0}&quot;, \n                         Thread.CurrentThread.ManagedThreadId)\n       &#39; Make the current culture different from the system culture.\n       Console.WriteLine(&quot;The current culture is {0}&quot;, \n                         CultureInfo.CurrentCulture.Name)\n       If CultureInfo.CurrentCulture.Name = &quot;fr-FR&quot; Then\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;)\n       Else\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;)\n       End If\n       Console.WriteLine(&quot;Changed the current culture to {0}.&quot;,\n                         CultureInfo.CurrentCulture.Name)\n       CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CurrentCulture\n       Console.WriteLine()                  \n       \n       &#39; Execute the delegate synchronously.\n       Console.WriteLine(&quot;Executing the delegate synchronously:&quot;)\n       Console.WriteLine(formatDelegate())\n       \n       &#39; Call an async delegate to format the values using one format string.\n       Console.WriteLine(&quot;Executing a task asynchronously:&quot;) \n       Dim t1 = Task.Run(formatDelegate)\n       Console.WriteLine(t1.Result)\n       \n       Console.WriteLine(&quot;Executing a task synchronously:&quot;)\n       Dim t2 = New Task(Of String)(formatDelegate) \n       t2.RunSynchronously()\n       Console.WriteLine(t2.Result)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The example is running on thread 1\n&#39;       The current culture is en-US\n&#39;       Changed the current culture to fr-FR.\n&#39;       \n&#39;       Executing the delegate synchronously:\n&#39;       Formatting using the fr-FR culture on thread 1.\n&#39;       163�025�412,32 �   18�905�365,59 �\n&#39;       \n&#39;       Executing a task asynchronously:\n&#39;       Formatting using the fr-FR culture on thread 3.\n&#39;       163�025�412,32 �   18�905�365,59 �\n&#39;       \n&#39;       Executing a task synchronously:\n&#39;       Formatting using the fr-FR culture on thread 1.\n&#39;       163�025�412,32 �   18�905�365,59 �\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Class.Async#3\">using System;\nusing System.Globalization;\nusing System.Runtime.Versioning;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n       decimal[] values = { 163025412.32m, 18905365.59m };\n       string formatString = &quot;C2&quot;;\n       Func&lt;String&gt; formatDelegate = () =&gt; { string output = String.Format(&quot;Formatting using the {0} culture on thread {1}.\\n&quot;,\n                                                                           CultureInfo.CurrentCulture.Name,\n                                                                           Thread.CurrentThread.ManagedThreadId);\n                                             foreach (var value in values)\n                                                output += String.Format(&quot;{0}   &quot;, value.ToString(formatString));\n                                                   \n                                             output += Environment.NewLine;\n                                             return output;\n                                           };\n       \n       Console.WriteLine(&quot;The example is running on thread {0}&quot;, \n                         Thread.CurrentThread.ManagedThreadId);\n       // Make the current culture different from the system culture.\n       Console.WriteLine(&quot;The current culture is {0}&quot;, \n                         CultureInfo.CurrentCulture.Name);\n       if (CultureInfo.CurrentCulture.Name == &quot;fr-FR&quot;)\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n       else\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;);\n\n       Console.WriteLine(&quot;Changed the current culture to {0}.\\n&quot;,\n                         CultureInfo.CurrentCulture.Name);\n       CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CurrentCulture;\n       \n       // Execute the delegate synchronously.\n       Console.WriteLine(&quot;Executing the delegate synchronously:&quot;);\n       Console.WriteLine(formatDelegate());\n       \n       // Call an async delegate to format the values using one format string.\n       Console.WriteLine(&quot;Executing a task asynchronously:&quot;); \n       var t1 = Task.Run(formatDelegate);\n       Console.WriteLine(t1.Result);\n       \n       Console.WriteLine(&quot;Executing a task synchronously:&quot;);\n       var t2 = new Task&lt;String&gt;(formatDelegate); \n       t2.RunSynchronously();\n       Console.WriteLine(t2.Result);\n   }\n}\n// The example displays the following output:\n//     The example is running on thread 1\n//     The current culture is en-US\n//     Changed the current culture to fr-FR.\n//     \n//     Executing the delegate synchronously:\n//     Formatting using the fr-FR culture on thread 1.\n//     163�025�412,32 �   18�905�365,59 �\n//     \n//     Executing a task asynchronously:\n//     Formatting using the fr-FR culture on thread 3.\n//     163�025�412,32 �   18�905�365,59 �\n//     \n//     Executing a task synchronously:\n//     Formatting using the fr-FR culture on thread 1.\n//     163�025�412,32 �   18�905�365,59 �\n</code></pre><p><a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> are per-app domain properties; that is, they establish a default culture for all threads not explicitly assigned a culture in a specific application domain. However, for apps that target the .NET Framework 4.6 or later, the culture of the calling thread remains part of an asynchronous task&#39;s context even if the task crosses app domain boundaries.  </p>\n<p>The following example shows that the calling thread&#39;s culture remains the current culture of a task-based asynchronous operation even if the method that the task is executing crosses application domain boundaries. It defines a class, <code>DataRetriever</code>, with a single method, <code>GetFormattedNumber</code>, that returns a random double-precision floating-point number between 1 and 1,000 formatted as a currency value. A first task is run that simply instantiates a <code>DataRetriever</code> instance and calls its <code>GetFormattedNumber</code> method. A second task reports its current application domain, creates a new application domain, instantiates a <code>DataRetriever</code> instance in the new application domain, and calls its <code>GetFormattedNumber</code> method. As the output from the example shows, the current culture has remained the same in the calling thread, the first task, and the second task both when it was executing in the main application domain and the second application domain.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Class.Async#4\">using System;\nusing System.Globalization;\nusing System.Runtime.Versioning;\nusing System.Threading;\nusing System.Threading.Tasks;\n\n[assembly:TargetFramework(&quot;.NETFramework,Version=v4.6&quot;)]\n\npublic class Example\n{\n   public static void Main()\n   {\n       string formatString = &quot;C2&quot;;\n       Console.WriteLine(&quot;The example is running on thread {0}&quot;, \n                         Thread.CurrentThread.ManagedThreadId);\n       // Make the current culture different from the system culture.\n       Console.WriteLine(&quot;The current culture is {0}&quot;, \n                         CultureInfo.CurrentCulture.Name);\n       if (CultureInfo.CurrentCulture.Name == &quot;fr-FR&quot;)\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;);\n       else\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;);\n\n       Console.WriteLine(&quot;Changed the current culture to {0}.\\n&quot;,\n                         CultureInfo.CurrentCulture.Name);\n       \n       // Call an async delegate to format the values using one format string.\n       Console.WriteLine(&quot;Executing a task asynchronously in the main appdomain:&quot;); \n       var t1 = Task.Run(() =&gt; { DataRetriever d = new DataRetriever();\n                                 return d.GetFormattedNumber(formatString);\n                               });\n       Console.WriteLine(t1.Result);\n       Console.WriteLine(); \n       \n       Console.WriteLine(&quot;Executing a task synchronously in two appdomains:&quot;);\n       var t2 = Task.Run(() =&gt; { Console.WriteLine(&quot;Thread {0} is running in app domain &#39;{1}&#39;&quot;, \n                                                   Thread.CurrentThread.ManagedThreadId, \n                                                   AppDomain.CurrentDomain.FriendlyName);\n                                 AppDomain domain = AppDomain.CreateDomain(&quot;Domain2&quot;);\n                                 DataRetriever d = (DataRetriever) domain.CreateInstanceAndUnwrap(typeof(Example).Assembly.FullName,\n                                                   &quot;DataRetriever&quot;);\n                                 return d.GetFormattedNumber(formatString); \n                               }); \n       Console.WriteLine(t2.Result);\n   }\n}\n\npublic class DataRetriever : MarshalByRefObject\n{\n   public string GetFormattedNumber(String format)\n   {\n      Thread thread = Thread.CurrentThread;\n      Console.WriteLine(&quot;Current culture is {0}&quot;, thread.CurrentCulture);\n      Console.WriteLine(&quot;Thread {0} is running in app domain &#39;{1}&#39;&quot;, \n                        thread.ManagedThreadId, \n                        AppDomain.CurrentDomain.FriendlyName);\n      Random rnd = new Random();\n      Double value = rnd.NextDouble() * 1000;\n      return value.ToString(format);\n   }\n}\n// The example displays output like the following:\n//     The example is running on thread 1\n//     The current culture is en-US\n//     Changed the current culture to fr-FR.\n//     \n//     Executing a task asynchronously in a single appdomain:\n//     Current culture is fr-FR\n//     Thread 3 is running in app domain &#39;AsyncCulture4.exe&#39;\n//     93,48 �\n//     \n//     Executing a task synchronously in two appdomains:\n//     Thread 4 is running in app domain &#39;AsyncCulture4.exe&#39;\n//     Current culture is fr-FR\n//     Thread 4 is running in app domain &#39;Domain2&#39;\n//     288,66 �\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Class.Async#4\">Imports System.Globalization\nImports System.Runtime.Versioning\nImports System.Threading\nImports System.Threading.Tasks\n\n&lt;Assembly:TargetFramework(&quot;.NETFramework,Version=v4.6&quot;)&gt;\n\nModule Example\n   Public Sub Main()\n       Dim formatString As String = &quot;C2&quot;\n       Console.WriteLine(&quot;The example is running on thread {0}&quot;, \n                         Thread.CurrentThread.ManagedThreadId)\n       &#39; Make the current culture different from the system culture.\n       Console.WriteLine(&quot;The current culture is {0}&quot;, \n                         CultureInfo.CurrentCulture.Name)\n       If CultureInfo.CurrentCulture.Name = &quot;fr-FR&quot; Then\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;en-US&quot;)\n       Else\n          Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;)\n       End If\n\n       Console.WriteLine(&quot;Changed the current culture to {0}.&quot;,\n                         CultureInfo.CurrentCulture.Name)\n       Console.WriteLine()\n       \n       &#39; Call an async delegate to format the values using one format string.\n       Console.WriteLine(&quot;Executing a task asynchronously in the main appdomain:&quot;) \n       Dim t1 = Task.Run(Function()\n                            Dim d As New DataRetriever()\n                            Return d.GetFormattedNumber(formatString)\n                         End Function)\n       Console.WriteLine(t1.Result)\n       Console.WriteLine() \n       \n       Console.WriteLine(&quot;Executing a task synchronously in two appdomains:&quot;)\n       Dim t2 = Task.Run(Function()\n                            Console.WriteLine(&quot;Thread {0} is running in app domain &#39;{1}&#39;&quot;, \n                                              Thread.CurrentThread.ManagedThreadId, \n                                              AppDomain.CurrentDomain.FriendlyName)\n                            Dim domain As AppDomain = AppDomain.CreateDomain(&quot;Domain2&quot;)\n                            Dim d As DataRetriever = CType(domain.CreateInstanceAndUnwrap(GetType(Example).Assembly.FullName,\n                                                                                          &quot;DataRetriever&quot;), DataRetriever)\n                            Return d.GetFormattedNumber(formatString) \n                         End Function) \n       Console.WriteLine(t2.Result)\n   End Sub\nEnd Module\n\nPublic Class DataRetriever : Inherits MarshalByRefObject\n   Public Function GetFormattedNumber(format As String) As String\n      Dim thread As Thread = Thread.CurrentThread\n      Console.WriteLine(&quot;Current culture is {0}&quot;, thread.CurrentCulture)\n      Console.WriteLine(&quot;Thread {0} is running in app domain &#39;{1}&#39;&quot;, \n                        thread.ManagedThreadId, \n                        AppDomain.CurrentDomain.FriendlyName)\n      Dim rnd As New Random()\n      Dim value As Double = rnd.NextDouble() * 1000\n      Return value.ToString(format)\n   End Function\nEnd Class\n&#39; The example displays output like the following:\n&#39;     The example is running on thread 1\n&#39;     The current culture is en-US\n&#39;     Changed the current culture to fr-FR.\n&#39;     \n&#39;     Executing a task asynchronously in a single appdomain:\n&#39;     Current culture is fr-FR\n&#39;     Thread 3 is running in app domain &#39;AsyncCulture4.exe&#39;\n&#39;     93,48 �\n&#39;     \n&#39;     Executing a task synchronously in two appdomains:\n&#39;     Thread 4 is running in app domain &#39;AsyncCulture4.exe&#39;\n&#39;     Current culture is fr-FR\n&#39;     Thread 4 is running in app domain &#39;Domain2&#39;\n&#39;     288,66 �\n</code></pre></li>\n</ul>\n<p><a name=\"Serialization\"></a>   </p>\n<h2 id=\"cultureinfo-object-serialization\">CultureInfo object serialization</h2>\n<p> When a CultureInfo object is serialized, all that is actually stored is <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a>. It is successfully de-serialized only in an environment where that <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> has the same meaning. The following three examples show why this is not always the case:  </p>\n<ul>\n<li><p>If the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CultureTypes_\" data-linktype=\"relative-path\">CultureTypes</a> property value is <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">System.Globalization.CultureTypes</a>, and if that culture was first introduced in Windows Vista or a later version of the Windows operating system, it is not possible to de-serialize it on Windows XP. Similarly, if the culture was first introduced in Windows XP Service Pack 2, it is not possible to de-serialize it for a Windows XP system on which the culture has not been installed.  </p>\n</li>\n<li><p>If the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CultureTypes_\" data-linktype=\"relative-path\">CultureTypes</a> value is <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">System.Globalization.CultureTypes</a>, and the computer on which it is de-serialized does not have this user custom culture installed, it is not possible to de-serialize it.  </p>\n</li>\n<li><p>If the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CultureTypes_\" data-linktype=\"relative-path\">CultureTypes</a> value is <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">System.Globalization.CultureTypes</a>, and the computer on which it is de-serialized does not have this replacement culture, it de-serializes to the same name, but not all of the same characteristics. For example, if en-US is a replacement culture on computer A, but not on computer B, and if a CultureInfo object referring to this culture is serialized on computer A and de-serialized on computer B, then none of the custom characteristics of the culture are transmitted. The culture de-serializes successfully, but with a different meaning.  </p>\n</li>\n</ul>\n<p><a name=\"CPanel\"></a>   </p>\n<h2 id=\"control-panel-overrides\">Control Panel overrides</h2>\n<p> The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. In general, your applications should honor these user overrides.  </p>\n<p> If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is <code>true</code> and the specified culture matches the current culture of Windows, the CultureInfo uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the CultureInfo, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.  </p>\n<p><a name=\"AlternateSort\"></a>   </p>\n<h2 id=\"alternate-sort-orders\">Alternate sort orders</h2>\n<p> Some cultures support more than one sort order. For example:  </p>\n<ul>\n<li><p>The Spanish (Spain) culture has two sort orders: the default international sort order, and the traditional sort order. When you instantiate a CultureInfo object with the es-ES culture name, the international sort order is used. When you instantiate a CultureInfo object with the es-ES-tradnl culture name, the traditional sort order is used.  </p>\n</li>\n<li><p>The zh-CN (Chinese (Simplified, PRC)) culture supports two sort orders:  by pronunciation (the default) and by stroke count. When you instantiate a CultureInfo object with the zh-CN culture name, the default sort order is used. When you instantiate a CultureInfo object with a local identifier of 0x00020804, strings are sorted by stroke count.  </p>\n<p>The following table lists the cultures that support alternate sort orders and the identifiers for the default and alternate sort orders.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Culture name</th>\n<th>Culture</th>\n<th>Default sort name and identifier</th>\n<th>Alternate sort name and identifier</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>es-ES</td>\n<td>Spanish (Spain)</td>\n<td>International: 0x00000C0A</td>\n<td>Traditional: 0x0000040A</td>\n</tr>\n<tr>\n<td>zh-TW</td>\n<td>Chinese (Taiwan)</td>\n<td>Stroke Count: 0x00000404</td>\n<td>Bopomofo: 0x00030404</td>\n</tr>\n<tr>\n<td>zh-CN</td>\n<td>Chinese (PRC)</td>\n<td>Pronunciation: 0x00000804</td>\n<td>Stroke Count: 0x00020804</td>\n</tr>\n<tr>\n<td>zh-HK</td>\n<td>Chinese (Hong Kong SAR)</td>\n<td>Stroke Count: 0x00000c04</td>\n<td>Stroke Count: 0x00020c04</td>\n</tr>\n<tr>\n<td>zh-SG</td>\n<td>Chinese (Singapore)</td>\n<td>Pronunciation: 0x00001004</td>\n<td>Stroke Count: 0x00021004</td>\n</tr>\n<tr>\n<td>zh-MO</td>\n<td>Chinese (Macao SAR)</td>\n<td>Pronunciation: 0x00001404</td>\n<td>Stroke Count: 0x00021404</td>\n</tr>\n<tr>\n<td>ja-JP</td>\n<td>Japanese (Japan)</td>\n<td>Default: 0x00000411</td>\n<td>Unicode: 0x00010411</td>\n</tr>\n<tr>\n<td>ko-KR</td>\n<td>Korean (Korea)</td>\n<td>Default: 0x00000412</td>\n<td>Korean Xwansung - Unicode: 0x00010412</td>\n</tr>\n<tr>\n<td>de-DE</td>\n<td>German (Germany)</td>\n<td>Dictionary: 0x00000407</td>\n<td>Phone Book Sort DIN: 0x00010407</td>\n</tr>\n<tr>\n<td>hu-HU</td>\n<td>Hungarian (Hungary)</td>\n<td>Default: 0x0000040e</td>\n<td>Technical Sort: 0x0001040e</td>\n</tr>\n<tr>\n<td>ka-GE</td>\n<td>Georgian (Georgia)</td>\n<td>Traditional: 0x00000437</td>\n<td>Modern Sort: 0x00010437</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"Windows\"></a>   </p>\n<h2 id=\"culture-and-windows-apps\">Culture and Windows apps</h2>\n<p> In Windows apps, the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> properties are read-only. You can set the current culture and current UI culture by using the Windows <a href=\"https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx\" data-linktype=\"external\">ResourceContext.Languages</a> property. The following example uses it to change the application&#39;s current culture and current UI culture either to English (United States) or, if the current culture is already English (United States), to French (France). The value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> properties are then displayed to a <a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a> control named <code>block</code>. As the output from the example shows, both property values reflect the new value of the <a href=\"https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx\" data-linktype=\"external\">ResourceContext.Languages</a> property.  </p>\n<pre><code class=\"lang-c#\">\nResourceContext context = ResourceManager.Current.DefaultContext;  \nvar list = new List&lt;String&gt;();  \nif (CultureInfo.CurrentCulture.Name == &quot;en-US&quot;)  \n   list.Add(&quot;fr-FR&quot;);  \nelse  \n   list.Add(&quot;en-US&quot;);  \n\ncontext.Languages = list;  \nblock.Text += String.Format(&quot;\\nThe current culture is {0}\\n&quot;,  \n                            CultureInfo.CurrentCulture);  \nblock.Text += String.Format(&quot;The current culture UI is {0}\\n&quot;,  \n                            CultureInfo.CurrentUICulture);  \n// The example displays output like the following if run on a system  \n// whose current culture is English (United States):  \n// The current culture is fr-FR  \n// The current UI culture is fr-FR  \n</code></pre><pre><code>\nDim context As ResourceContext = ResourceManager.Current.DefaultContext  \nDim list As New List(Of String)()  \nIf CultureInfo.CurrentCulture.Name = &quot;en-US&quot; Then  \n   list.Add(&quot;fr-FR&quot;)  \nElse  \n   list.Add(&quot;en-US&quot;)  \nEnd If  \ncontext.Languages = list  \nblock.Text += String.Format(&quot;{1}The current culture is {0}{1}&quot;,  \n                            CultureInfo.CurrentCulture, vbCrLf)  \nblock.Text += String.Format(&quot;The current culture UI is {0}\\n&quot;,  \n                            CultureInfo.CurrentUICulture)  \n&#39; The example displays output Like the following if run on a system  \n&#39; whose current culture Is English (United States):  \n&#39;    The current culture Is fr-FR  \n&#39;    The current UI culture Is fr-FR  \n</code></pre>\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo__ctor_System_Int32_\" data-linktype=\"self-bookmark\">CultureInfo(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class based on the culture specified by the culture identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo__ctor_System_String_\" data-linktype=\"self-bookmark\">CultureInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class based on the culture specified by name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo__ctor_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">CultureInfo(Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class based on the culture specified by the culture identifier and on the Boolean that specifies whether to use the user-selected culture settings from the system.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo__ctor_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">CultureInfo(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class based on the culture specified by name and on the Boolean that specifies whether to use the user-selected culture settings from the system.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_Calendar\" data-linktype=\"self-bookmark\">Calendar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default calendar used by the culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_CompareInfo\" data-linktype=\"self-bookmark\">CompareInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> that defines how to compare strings for the culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_CultureTypes\" data-linktype=\"self-bookmark\">CultureTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the culture types that pertain to the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_CurrentCulture\" data-linktype=\"self-bookmark\">CurrentCulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture used by the current thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_CurrentUICulture\" data-linktype=\"self-bookmark\">CurrentUICulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_DateTimeFormat\" data-linktype=\"self-bookmark\">DateTimeFormat</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> that defines the culturally appropriate format of displaying dates and times.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_DefaultThreadCurrentCulture\" data-linktype=\"self-bookmark\">DefaultThreadCurrentCulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default culture for threads in the current application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture\" data-linktype=\"self-bookmark\">DefaultThreadCurrentUICulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default UI culture for threads in the current application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_DisplayName\" data-linktype=\"self-bookmark\">DisplayName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the full localized culture name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_EnglishName\" data-linktype=\"self-bookmark\">EnglishName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the culture name in the format <em>languagefull</em> [<em>country/regionfull</em>] in English.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_IetfLanguageTag\" data-linktype=\"self-bookmark\">IetfLanguageTag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deprecated. Gets the RFC 4646 standard identification for a language.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_InstalledUICulture\" data-linktype=\"self-bookmark\">InstalledUICulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that represents the culture installed with the operating system.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_InvariantCulture\" data-linktype=\"self-bookmark\">InvariantCulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that is culture-independent (invariant).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_IsNeutralCulture\" data-linktype=\"self-bookmark\">IsNeutralCulture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> represents a neutral culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_KeyboardLayoutId\" data-linktype=\"self-bookmark\">KeyboardLayoutId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the active input locale identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_LCID\" data-linktype=\"self-bookmark\">LCID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the culture identifier for the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the culture name in the format <em>languagecode2</em>-<em>country/regioncode2</em>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_NativeName\" data-linktype=\"self-bookmark\">NativeName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the culture name, consisting of the language, the country/region, and the optional script, that the culture is set to display.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_NumberFormat\" data-linktype=\"self-bookmark\">NumberFormat</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> that defines the culturally appropriate format of displaying numbers, currency, and percentage.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_OptionalCalendars\" data-linktype=\"self-bookmark\">OptionalCalendars</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of calendars that can be used by the culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_Parent\" data-linktype=\"self-bookmark\">Parent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that represents the parent culture of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_TextInfo\" data-linktype=\"self-bookmark\">TextInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> that defines the writing system associated with the culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_ThreeLetterISOLanguageName\" data-linktype=\"self-bookmark\">ThreeLetterISOLanguageName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the ISO 639-2 three-letter code for the language of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName\" data-linktype=\"self-bookmark\">ThreeLetterWindowsLanguageName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the three-letter code for the language as defined in the Windows API.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_TwoLetterISOLanguageName\" data-linktype=\"self-bookmark\">TwoLetterISOLanguageName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the ISO 639-1 two-letter code for the language of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_UseUserOverride\" data-linktype=\"self-bookmark\">UseUserOverride</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object uses the user-selected culture settings.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_ClearCachedData\" data-linktype=\"self-bookmark\">ClearCachedData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Refreshes cached culture-related information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a copy of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_CreateSpecificCulture_System_String_\" data-linktype=\"self-bookmark\">CreateSpecificCulture(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that represents the specific culture that is associated with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified object is the same culture as the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_GetConsoleFallbackUICulture\" data-linktype=\"self-bookmark\">GetConsoleFallbackUICulture()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an alternate user interface culture suitable for console applications when the default graphic user interface culture is unsuitable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_GetCultureInfo_System_Int32_\" data-linktype=\"self-bookmark\">GetCultureInfo(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a cached, read-only instance of a culture by using the specified culture identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_GetCultureInfo_System_String_\" data-linktype=\"self-bookmark\">GetCultureInfo(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a cached, read-only instance of a culture using the specified culture name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_GetCultureInfo_System_String_System_String_\" data-linktype=\"self-bookmark\">GetCultureInfo(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a cached, read-only instance of a culture. Parameters specify a culture that is initialized with the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> and <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects specified by another culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag_System_String_\" data-linktype=\"self-bookmark\">GetCultureInfoByIetfLanguageTag(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deprecated. Retrieves a read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object having linguistic characteristics that are identified by the specified RFC 4646 language tag.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_GetCultures_System_Globalization_CultureTypes_\" data-linktype=\"self-bookmark\">GetCultures(CultureTypes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of supported cultures filtered by the specified <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a> parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_GetFormat_System_Type_\" data-linktype=\"self-bookmark\">GetFormat(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that defines how to format the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, suitable for hashing algorithms and data structures, such as a hash table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_ReadOnly_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">ReadOnly(CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a read-only wrapper around the specified <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_CultureInfo_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string containing the name of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> in the format <em>languagecode2</em>-<em>country/regioncode2</em>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CultureInfo(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class based on the culture specified by the culture identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CultureInfo (int culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A predefined <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> identifier, <span class=\"xref\">stem.Globalization.CultureInfo.LCID*</span> property of an existing <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object, or Windows-only culture identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is not a valid culture identifier. See the Notes to Callers section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Predefined culture identifiers are listed in the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center.  </p>\n<p> In most cases, the <code>culture</code> parameter is mapped to the corresponding National Language Support (NLS) locale identifier. The value of the <code>culture</code> parameter becomes the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> property of the new <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<p> We recommend that you call the locale name constructor <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_\" data-linktype=\"relative-path\">CultureInfo</a>, because locale names are preferable to LCIDs. For custom locales, a locale name is required.  </p>\n<p> The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. If the specified culture identifier matches the culture identifier of the current Windows culture, this constructor creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> (for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>) the results of the methods and the values of the properties are undefined.  </p>\n<p> If the specified culture identifier does not match the identifier of the current Windows culture, this constructor creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that uses the default values for the specified culture.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> property is always set to <code>true</code>.  </p>\n<p> For example, suppose that Arabic (Saudi Arabia) is the current Windows culture and the user has changed the calendar from Hijri to Gregorian.  </p>\n<ul>\n<li><p>With <code>CultureInfo(&quot;0x0401&quot;)</code> (culture name ar-SA), <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> (which is the user setting) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>true</code>.  </p>\n</li>\n<li><p>With <code>CultureInfo(&quot;0x041E&quot;)</code> (culture name th-TH), <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.thaibuddhistcalendar\" data-linktype=\"relative-path\">ThaiBuddhistCalendar</a> (which is the default calendar for th-TH) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>true</code>.  </p>\n<p>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should use a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> constructor overload that accepts a <code>useUserOverride</code> parameter and set it to <code>false</code>.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> For backwards compatibility, a culture constructed using a <code>culture</code> parameter of 0x0004 or 0x7c04 will have a <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property of zh-CHS or zh-CHT, respectively. You should instead prefer to construct the culture using the current standard culture names of zh-Hans or zh-Hant, unless you have a reason for using the older names.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CultureInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class based on the culture specified by name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CultureInfo (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A predefined <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> name, <span class=\"xref\">stem.Globalization.CultureInfo.Name*</span> of an existing <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, or Windows-only culture name. <code>name</code> is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid culture name. For more information, see the Notes to Callers section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of predefined culture names, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center. In addition, starting with Windows 10, <code>name</code> can be any valid BCP-47 language tag.  </p>\n<p> If <code>name</code> is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, the constructor creates an instance of the invariant culture; this is equivalent to retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.  </p>\n<p> The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. If the culture identifier associated with <code>name</code> matches the culture identifier of the current Windows culture, this constructor creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.  </p>\n<p> If the culture identifier associated with <code>name</code> does not match the culture identifier of the current Windows culture, this constructor creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that uses the default values for the specified culture.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> property is always set to <code>true</code>.  </p>\n<p> For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user changed the calendar from Hijri to Gregorian.  </p>\n<ul>\n<li><p>With <code>CultureInfo(&quot;ar-SA&quot;)</code>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> (which is the user setting) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>true</code>.  </p>\n</li>\n<li><p>With <code>CultureInfo(&quot;th-TH&quot;)</code>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.thaibuddhistcalendar\" data-linktype=\"relative-path\">ThaiBuddhistCalendar</a> (which is the default calendar for th-TH) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>true</code>.  </p>\n<p>The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> property of the new <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is set to the culture identifier associated with the specified name.  </p>\n<p>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not do this. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should use a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> constructor overload that accepts a <code>useUserOverride</code> parameter and set it to <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the current culture. If it is anything other than the French (France) culture, it calls the CultureInfo constructor to instantiate a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the French (France) culture and makes it the current thread culture. Otherwise, it instantiates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the French (Luxembourg) culture and makes it the current culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo#3\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim current As CultureInfo = CultureInfo.CurrentCulture\n      Console.WriteLine(&quot;The current culture is {0}&quot;, current.Name)\n      Dim newCulture As CultureInfo\n      If current.Name.Equals(&quot;fr-FR&quot;) Then\n         newCulture = New CultureInfo(&quot;fr-LU&quot;)\n      Else   \n         newCulture = new CultureInfo(&quot;fr-FR&quot;)\n      End If\n      \n      CultureInfo.CurrentCulture = newCulture\n      Console.WriteLine(&quot;The current culture is now {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)   \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current culture is en-US\n&#39;     The current culture is now fr-FR\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo#3\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo current = CultureInfo.CurrentCulture;\n      Console.WriteLine(&quot;The current culture is {0}&quot;, current.Name);\n      CultureInfo newCulture;\n      if (current.Name.Equals(&quot;fr-FR&quot;))\n         newCulture = new CultureInfo(&quot;fr-LU&quot;);\n      else   \n         newCulture = new CultureInfo(&quot;fr-FR&quot;);\n      \n      CultureInfo.CurrentCulture = newCulture;\n      Console.WriteLine(&quot;The current culture is now {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);   \n   }\n}\n// The example displays output like the following:\n//     The current culture is en-US\n//     The current culture is now fr-FR\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo__ctor_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CultureInfo(Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class based on the culture specified by the culture identifier and on the Boolean that specifies whether to use the user-selected culture settings from the system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CultureInfo (int culture, bool useUserOverride);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A predefined <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> identifier, <span class=\"xref\">stem.Globalization.CultureInfo.LCID*</span> property of an existing <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object, or Windows-only culture identifier.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>useUserOverride</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean that denotes whether to use the user-selected culture settings (<code>true</code>) or the default culture settings (<code>false</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is not a valid culture identifier. See the Notes to Callers section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Predefined culture identifiers are listed in the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center.  </p>\n<p> In most cases, the <code>culture</code> parameter is mapped to the corresponding National Language Support (NLS) locale identifier. The value of the <code>culture</code> parameter becomes the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> property of the new <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<p> We recommend that you call the locale name constructor <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_\" data-linktype=\"relative-path\">CultureInfo</a>, because locale names are preferable to LCIDs. For custom locales, a locale name is required.  </p>\n<p> The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  </p>\n<p> Applications should typically not disallow user overrides. Note that disallowing overrides does not itself guarantee data stability; see the blog entry <a href=\"http://go.microsoft.com/fwlink/?LinkId=156850\" data-linktype=\"external\">Culture data shouldn&#39;t be considered stable (except for Invariant)</a>.  </p>\n<p> If the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> property is set to <code>true</code> and the specified culture identifier matches the identifier of the current Windows culture, this constructor creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.  </p>\n<p> Otherwise, this constructor creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that uses the default values for the specified culture.  </p>\n<p> The value of the <code>useUserOverride</code> parameter becomes the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> property.  </p>\n<p> For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user has changed the calendar from Hijri to Gregorian.  </p>\n<ul>\n<li><p>With <code>CultureInfo(&quot;0x0401&quot;, true)</code> (culture name ar-SA), <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> (which is the user setting) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>true</code>.  </p>\n</li>\n<li><p>With <code>CultureInfo(&quot;0x0401&quot;, false)</code> (culture name ar-SA), <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.hijricalendar\" data-linktype=\"relative-path\">HijriCalendar</a> (which is the default calendar for ar-SA) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>false</code>.  </p>\n</li>\n<li><p>With <code>CultureInfo(&quot;0x041E&quot;, true)</code> (culture name th-TH), <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.thaibuddhistcalendar\" data-linktype=\"relative-path\">ThaiBuddhistCalendar</a> (which is the default calendar for th-TH) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>true</code>.  </p>\n</li>\n<li><p>With <code>CultureInfo(&quot;0x041E&quot;, false)</code> (culture name th-TH), <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.thaibuddhistcalendar\" data-linktype=\"relative-path\">ThaiBuddhistCalendar</a> (which is the default calendar for th-TH) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>false</code>.  </p>\n<p>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should set the <code>useUserOverride</code> parameter to <code>false</code>.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> For backwards compatibility, a culture constructed using a <code>culture</code> parameter of 0x0004 or 0x7c04 will have a <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property of zh-CHS or zh-CHT, respectively. You should instead prefer to construct the culture using the current standard culture names of zh-Hans or zh-Hant, unless you have a reason for using the older names.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo__ctor_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CultureInfo(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class based on the culture specified by name and on the Boolean that specifies whether to use the user-selected culture settings from the system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public CultureInfo (string name, bool useUserOverride);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A predefined <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> name, <span class=\"xref\">stem.Globalization.CultureInfo.Name*</span> of an existing <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, or Windows-only culture name. <code>name</code> is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>useUserOverride</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean that denotes whether to use the user-selected culture settings (<code>true</code>) or the default culture settings (<code>false</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid culture name. See the Notes to Callers section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of predefined culture names, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center. In addition, starting with Windows 10, <code>name</code> can be any valid BCP-47 language tag.  </p>\n<p> If <code>name</code> is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, the constructor creates an instance of the invariant culture; this is equivalent to retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.  </p>\n<p> The user might choose to override some of the values associated with the current Windows culture through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  </p>\n<p> Applications should typically not disallow user overrides. Note that disallowing overrides does not itself guarantee data stability; see the blog entry <a href=\"http://go.microsoft.com/fwlink/?LinkId=156850\" data-linktype=\"external\">Culture data shouldn&#39;t be considered stable (except for Invariant)</a>.  </p>\n<p> If the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> property is set to <code>true</code> and the culture identifier associated with the specified culture name matches the culture identifier of the current Windows culture, this constructor creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.  </p>\n<p> Otherwise, this constructor creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that uses the default values for the specified culture.  </p>\n<p> The value of the <code>useUserOverride</code> parameter becomes the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> property.  </p>\n<p> For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user changed the calendar from Hijri to Gregorian.  </p>\n<ul>\n<li><p>With <code>CultureInfo(&quot;ar-SA&quot;, true)</code>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> (which is the user setting) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>true</code>.  </p>\n</li>\n<li><p>With <code>CultureInfo(&quot;ar-SA&quot;, false)</code>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.hijricalendar\" data-linktype=\"relative-path\">HijriCalendar</a> (which is the default calendar for ar-SA) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>false</code>.  </p>\n</li>\n<li><p>With <code>CultureInfo(&quot;th-TH&quot;, true)</code>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.thaibuddhistcalendar\" data-linktype=\"relative-path\">ThaiBuddhistCalendar</a> (which is the default calendar for th-TH) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>true</code>.  </p>\n</li>\n<li><p>With <code>CultureInfo(&quot;th-TH&quot;, false)</code>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> is set to <a class=\"xref\" href=\"system.globalization.thaibuddhistcalendar\" data-linktype=\"relative-path\">ThaiBuddhistCalendar</a> (which is the default calendar for th-TH) and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is set to <code>false</code>.  </p>\n<p>The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> property of the new <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is set to the culture identifier associated with the specified name.  </p>\n<p>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not do this. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should set the <code>useUserOverride</code> parameter to <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_Calendar\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_Calendar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Calendar</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default calendar used by the culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.Calendar Calendar { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> that represents the default calendar used by the culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  </p>\n<p> If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is <code>true</code> and the specified culture matches the current culture of Windows, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.  </p>\n<p> Therefore, if <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is <code>true</code>, the value of this property might be different from the default calendar used by the culture.  </p>\n<p> Your application changes the calendar used by the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> by setting the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>, which is an instance of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> class. The new calendar must be one of the calendars listed in <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>. <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> also includes other properties that customize the date and time formatting associated with that <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_CompareInfo\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_CompareInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> that defines how to compare strings for the culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.CompareInfo CompareInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> that defines how to compare strings for the culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CompareInfo property returns a <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> object that provides culture-specific information used in culture-sensitive sorting and string comparison operations.  </p>\n<p> The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  </p>\n<p> If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is <code>true</code> and the specified culture matches the current culture of Windows, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for Spanish (Spain) with the international sort and another <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> with the traditional sort.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo_esES#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes the CultureInfo which uses the international sort.\n   CultureInfo^ myCIintl = gcnew CultureInfo( &quot;es-ES&quot;,false );\n   \n   // Creates and initializes the CultureInfo which uses the traditional sort.\n   CultureInfo^ myCItrad = gcnew CultureInfo( 0x040A,false );\n   \n   // Displays the properties of each culture.\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot; );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl-&gt;CompareInfo, myCItrad-&gt;CompareInfo );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl-&gt;DisplayName, myCItrad-&gt;DisplayName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl-&gt;EnglishName, myCItrad-&gt;EnglishName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl-&gt;IsNeutralCulture, myCItrad-&gt;IsNeutralCulture );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl-&gt;IsReadOnly, myCItrad-&gt;IsReadOnly );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl-&gt;LCID, myCItrad-&gt;LCID );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl-&gt;Name, myCItrad-&gt;Name );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl-&gt;NativeName, myCItrad-&gt;NativeName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl-&gt;Parent, myCItrad-&gt;Parent );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl-&gt;TextInfo, myCItrad-&gt;TextInfo );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl-&gt;ThreeLetterISOLanguageName, myCItrad-&gt;ThreeLetterISOLanguageName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl-&gt;ThreeLetterWindowsLanguageName, myCItrad-&gt;ThreeLetterWindowsLanguageName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl-&gt;TwoLetterISOLanguageName, myCItrad-&gt;TwoLetterISOLanguageName );\n   Console::WriteLine();\n   \n   // Compare two strings using myCIintl -&gt; \n   Console::WriteLine( &quot;Comparing \\&quot;llegar\\&quot; and \\&quot;lugar\\&quot;&quot; );\n   Console::WriteLine( &quot;   With myCIintl -&gt; CompareInfo -&gt; Compare: {0}&quot;, myCIintl-&gt;CompareInfo-&gt;Compare( &quot;llegar&quot;, &quot;lugar&quot; ) );\n   Console::WriteLine( &quot;   With myCItrad -&gt; CompareInfo -&gt; Compare: {0}&quot;, myCItrad-&gt;CompareInfo-&gt;Compare( &quot;llegar&quot;, &quot;lugar&quot; ) );\n}\n\n/*\nThis code produces the following output.\n\nPROPERTY                       INTERNATIONAL                                  TRADITIONAL              \nCompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\nDisplayName                    Spanish (Spain)                                Spanish (Spain)          \nEnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\nIsNeutralCulture               False                                          False                    \nIsReadOnly                     False                                          False                    \nLCID                           3082                                           1034                     \nName                           es-ES                                          es-ES                    \nNativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\nParent                         es                                             es                       \nTextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \nThreeLetterISOLanguageName     spa                                            spa                      \nThreeLetterWindowsLanguageName ESN                                            ESP                      \nTwoLetterISOLanguageName       es                                             es                       \n\nComparing &quot;llegar&quot; and &quot;lugar&quot;\n   With myCIintl -&gt; CompareInfo -&gt; Compare: -1\n   With myCItrad -&gt; CompareInfo -&gt; Compare: 1\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo_esES#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Creates and initializes the CultureInfo which uses the international sort.\n      CultureInfo myCIintl = new CultureInfo(&quot;es-ES&quot;, false);\n\n      // Creates and initializes the CultureInfo which uses the traditional sort.\n      CultureInfo myCItrad = new CultureInfo(0x040A, false);\n\n      // Displays the properties of each culture.\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot;);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl.CompareInfo, myCItrad.CompareInfo);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl.DisplayName, myCItrad.DisplayName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl.EnglishName, myCItrad.EnglishName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl.IsNeutralCulture, myCItrad.IsNeutralCulture);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl.IsReadOnly, myCItrad.IsReadOnly);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl.LCID, myCItrad.LCID);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl.Name, myCItrad.Name);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl.NativeName, myCItrad.NativeName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl.Parent, myCItrad.Parent);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl.TextInfo, myCItrad.TextInfo);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl.ThreeLetterISOLanguageName, myCItrad.ThreeLetterISOLanguageName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl.ThreeLetterWindowsLanguageName, myCItrad.ThreeLetterWindowsLanguageName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl.TwoLetterISOLanguageName, myCItrad.TwoLetterISOLanguageName);\n      Console.WriteLine();\n\n      // Compare two strings using myCIintl.\n      Console.WriteLine(&quot;Comparing \\&quot;llegar\\&quot; and \\&quot;lugar\\&quot;&quot;);\n      Console.WriteLine(&quot;   With myCIintl.CompareInfo.Compare: {0}&quot;, myCIintl.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;));\n      Console.WriteLine(&quot;   With myCItrad.CompareInfo.Compare: {0}&quot;, myCItrad.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;));\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nPROPERTY                       INTERNATIONAL                                  TRADITIONAL              \nCompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\nDisplayName                    Spanish (Spain)                                Spanish (Spain)          \nEnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\nIsNeutralCulture               False                                          False                    \nIsReadOnly                     False                                          False                    \nLCID                           3082                                           1034                     \nName                           es-ES                                          es-ES                    \nNativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\nParent                         es                                             es                       \nTextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \nThreeLetterISOLanguageName     spa                                            spa                      \nThreeLetterWindowsLanguageName ESN                                            ESP                      \nTwoLetterISOLanguageName       es                                             es                       \n\nComparing &quot;llegar&quot; and &quot;lugar&quot;\n   With myCIintl.CompareInfo.Compare: -1\n   With myCItrad.CompareInfo.Compare: 1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo_esES#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nModule Module1\n\n    Public Sub Main()\n\n        &#39; Creates and initializes the CultureInfo which uses the international sort.\n        Dim myCIintl As New CultureInfo(&quot;es-ES&quot;, False)\n\n        &#39; Creates and initializes the CultureInfo which uses the traditional sort.\n        Dim myCItrad As New CultureInfo(&amp;H40A, False)\n\n        &#39; Displays the properties of each culture.\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot;)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl.CompareInfo, myCItrad.CompareInfo)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl.DisplayName, myCItrad.DisplayName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl.EnglishName, myCItrad.EnglishName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl.IsNeutralCulture, myCItrad.IsNeutralCulture)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl.IsReadOnly, myCItrad.IsReadOnly)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl.LCID, myCItrad.LCID)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl.Name, myCItrad.Name)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl.NativeName, myCItrad.NativeName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl.Parent, myCItrad.Parent)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl.TextInfo, myCItrad.TextInfo)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl.ThreeLetterISOLanguageName, myCItrad.ThreeLetterISOLanguageName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl.ThreeLetterWindowsLanguageName, myCItrad.ThreeLetterWindowsLanguageName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl.TwoLetterISOLanguageName, myCItrad.TwoLetterISOLanguageName)\n        Console.WriteLine()\n\n        &#39; Compare two strings using myCIintl.\n        Console.WriteLine(&quot;Comparing &quot;&quot;llegar&quot;&quot; and &quot;&quot;lugar&quot;&quot;&quot;)\n        Console.WriteLine(&quot;   With myCIintl.CompareInfo.Compare: {0}&quot;, myCIintl.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;))\n        Console.WriteLine(&quot;   With myCItrad.CompareInfo.Compare: {0}&quot;, myCItrad.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;))\n\n    End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;PROPERTY                       INTERNATIONAL                                  TRADITIONAL              \n&#39;CompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\n&#39;DisplayName                    Spanish (Spain)                                Spanish (Spain)          \n&#39;EnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\n&#39;IsNeutralCulture               False                                          False                    \n&#39;IsReadOnly                     False                                          False                    \n&#39;LCID                           3082                                           1034                     \n&#39;Name                           es-ES                                          es-ES                    \n&#39;NativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\n&#39;Parent                         es                                             es                       \n&#39;TextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \n&#39;ThreeLetterISOLanguageName     spa                                            spa                      \n&#39;ThreeLetterWindowsLanguageName ESN                                            ESP                      \n&#39;TwoLetterISOLanguageName       es                                             es                       \n&#39;\n&#39;Comparing &quot;llegar&quot; and &quot;lugar&quot;\n&#39;   With myCIintl.CompareInfo.Compare: -1\n&#39;   With myCItrad.CompareInfo.Compare: 1\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_CultureTypes\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_CultureTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CultureTypes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the culture types that pertain to the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Globalization.CultureTypes CultureTypes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of one or more <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a> values. There is no default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a> enumeration and the CultureTypes property.  </p>\n<pre><code class=\"lang-cs\" name=\"system.globalization.cultureTypes#1\">// This example demonstrates the CultureTypes enumeration \n// and the CultureInfo.CultureTypes property.\n\nusing System;\nusing System.Globalization;\n\nclass Sample\n{\n    public static void Main()\n    {\n        // Create a table of most culture types. \n        CultureTypes[] mostCultureTypes = new CultureTypes[] {\n                        CultureTypes.NeutralCultures, \n                        CultureTypes.SpecificCultures, \n                        CultureTypes.InstalledWin32Cultures, \n                        CultureTypes.UserCustomCulture, \n                        CultureTypes.ReplacementCultures, \n                        CultureTypes.FrameworkCultures,\n                        CultureTypes.WindowsOnlyCultures\n                        };\n        CultureInfo[] allCultures;\n        CultureTypes combo;\n\n        // Get and enumerate all cultures.\n        allCultures = CultureInfo.GetCultures(CultureTypes.AllCultures);\n        foreach (CultureInfo ci in allCultures)\n        {\n            // Display the name of each culture.\n            Console.WriteLine(&quot;Culture: {0}&quot;, ci.Name);\n\n            // Get the culture types of each culture. \n            combo = ci.CultureTypes;\n\n            // Display the name of each culture type flag that is set.\n            Console.Write(&quot;  &quot;);\n            foreach (CultureTypes ct in mostCultureTypes)\n                if (0 != (ct &amp; combo))\n                    Console.Write(&quot;{0} &quot;, ct);\n            Console.WriteLine();\n        }\n    }\n}\n\n/*\nThe following is a portion of the results produced by this code example.\n.\n.\n.\nCulture: tg\n  NeutralCultures InstalledWin32Cultures \nCulture: ta\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: te\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: syr\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: tg-Cyrl-TJ\n  SpecificCultures InstalledWin32Cultures \nCulture: ta-IN\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: te-IN\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: syr-SY\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: tg-Cyrl\n  NeutralCultures InstalledWin32Cultures \n.\n.\n.\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"system.globalization.cultureTypes#1\">// This example demonstrates the CultureTypes enumeration \n// and the CultureInfo.CultureTypes property.\n\nusing namespace System;\nusing namespace System::Globalization;\nint main()\n{\n    // Create a table of most culture types. \n    array&lt;CultureTypes&gt;^ mostCultureTypes = gcnew array&lt;CultureTypes&gt; {\n                    CultureTypes::NeutralCultures, \n                    CultureTypes::SpecificCultures, \n                    CultureTypes::InstalledWin32Cultures, \n                    CultureTypes::UserCustomCulture, \n                    CultureTypes::ReplacementCultures, \n                    CultureTypes::FrameworkCultures,\n                    CultureTypes::WindowsOnlyCultures\n                    };\n    CultureTypes combo;\n\n    // Get and enumerate all cultures.\n    System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures(CultureTypes::AllCultures)-&gt;GetEnumerator();\n    while (enum0-&gt;MoveNext())\n    {\n        // Display the name of each culture.\n        CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n        Console::WriteLine(&quot;Culture: {0}&quot;, ci-&gt;Name);\n\n        // Get the culture types of each culture. \n        combo = ci-&gt;CultureTypes;\n\n        // Display the name of each culture type flag that is set.\n        Console::Write(&quot;  &quot;);\n        for each (CultureTypes ct in mostCultureTypes)\n            if ((ct &amp; combo) != CultureTypes())\n                Console::Write(&quot;{0} &quot;, ct);\n        Console::WriteLine();\n    }\n}\n\n/*\nThe following is a portion of the results produced by this code example.\n.\n.\n.\nCulture: tg\n  NeutralCultures InstalledWin32Cultures \nCulture: ta\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: te\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: syr\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: tg-Cyrl-TJ\n  SpecificCultures InstalledWin32Cultures \nCulture: ta-IN\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: te-IN\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: syr-SY\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: tg-Cyrl\n  NeutralCultures InstalledWin32Cultures \n.\n.\n.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"system.globalization.cultureTypes#1\">&#39; This example demonstrates the CultureTypes enumeration \n&#39; and the CultureInfo.CultureTypes property.\n\nImports System\nImports System.Globalization\n\nModule Module1\n    Public Sub Main()\n\n        &#39; Create a table of most culture types. \n        Dim mostCultureTypes() As CultureTypes = { _\n                CultureTypes.NeutralCultures, _\n                CultureTypes.SpecificCultures, _\n                CultureTypes.InstalledWin32Cultures, _\n                CultureTypes.UserCustomCulture, _\n                CultureTypes.ReplacementCultures, _\n                CultureTypes.FrameworkCultures, _\n                CultureTypes.WindowsOnlyCultures}\n        Dim allCultures() As CultureInfo\n        Dim combo As CultureTypes\n\n        &#39; Get and enumerate all cultures.\n        allCultures = CultureInfo.GetCultures(CultureTypes.AllCultures)\n        Dim ci As CultureInfo\n        For Each ci In allCultures\n            &#39; Display the name of each culture.\n            Console.WriteLine(&quot;Culture: {0}&quot;, ci.Name)\n\n            &#39; Get the culture types of each culture. \n            combo = ci.CultureTypes\n\n            &#39; Display the name of each culture type flag that is set.\n            Console.Write(&quot;  &quot;)\n            Dim ct As CultureTypes\n            For Each ct In mostCultureTypes\n                If 0 &lt;&gt; (ct And combo) Then\n                    Console.Write(&quot;{0} &quot;, ct)\n                End If\n            Next ct\n            Console.WriteLine()\n        Next ci\n\n    End Sub &#39;Main \nEnd Module\n\n&#39;The following is a portion of the results produced by this code example.\n&#39;.\n&#39;.\n&#39;.\n&#39;Culture: tg\n&#39;  NeutralCultures InstalledWin32Cultures \n&#39;Culture: ta\n&#39;  NeutralCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: te\n&#39;  NeutralCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: syr\n&#39;  NeutralCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: tg-Cyrl-TJ\n&#39;  SpecificCultures InstalledWin32Cultures \n&#39;Culture: ta-IN\n&#39;  SpecificCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: te-IN\n&#39;  SpecificCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: syr-SY\n&#39;  SpecificCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: tg-Cyrl\n&#39;  NeutralCultures InstalledWin32Cultures \n&#39;.\n&#39;.\n&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_CurrentCulture\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_CurrentCulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentCulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture used by the current thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo CurrentCulture { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>An object that represents the culture used by the current thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is set to <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that is returned by this property and its associated objects determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.  </p>\n<p> The current culture is a property of the executing thread, which is returned by the static <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentThread_\" data-linktype=\"relative-path\">CurrentThread</a> property. The value of the CurrentCulture property corresponds to the value of the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property. Retrieving the value of the CurrentCulture property is equivalent to retrieving the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object returned by the <code>Thread.CurrentThread.CurrentCulture</code> property. Starting with the .NET Framework 4.6, setting the value of the CurrentCulture property also changes the current thread culture.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 4.5.2 and earlier versions, the CurrentCulture property is read-only;  that is, you can retrieve the property value, but you cannot set it. To change the current culture, you assign the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the new culture to the <code>Thread.CurrentThread.CurrentCulture</code> property. Starting with the .NET Framework 4.6, the CurrentCulture property is read-write; you can both set and retrieve the property&#39;s value. If you do set the property value to a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents a new culture, the value of the <code>Thread.CurrentThread.CurrentCulture</code> property also changes.  </p>\n</div>\n<p> In this section:  </p>\n<p> <a href=\"#ThreadCulture\" data-linktype=\"self-bookmark\">How a Thread&#39;s Culture Is Determined</a><br> <a href=\"#Getting\" data-linktype=\"self-bookmark\">Getting the Current Culture</a><br> <a href=\"#ExplicitSetting\" data-linktype=\"self-bookmark\">Explicitly Setting the CurrentCulture Property</a><br> <a href=\"#Overrides\" data-linktype=\"self-bookmark\">The Current Culture and User Overrides</a><br> <a href=\"#WindowsAndCurr\" data-linktype=\"self-bookmark\">Culture and Windows Apps</a>  </p>\n<p><a name=\"ThreadCulture\"></a>   </p>\n<h2 id=\"how-a-threads-culture-is-determined\">How a Thread&#39;s Culture Is Determined</h2>\n<p> When a thread is started, its culture is initially determined as follows:  </p>\n<ul>\n<li><p>By retrieving the culture that is specified by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> property in the application domain in which the thread is executing, if the property value is not <code>null</code>.  </p>\n</li>\n<li><p>If the thread is a thread pool thread that is executing a task-based asynchronous operation and the app targets the .NET Framework 4.6 or a later version of the .NET Framework, its culture is determined by the culture of the calling thread.  The following example changes the current culture to Portuguese (Brazil) and launches six tasks, each of which displays its thread ID, its task ID, and its current culture. Each of the tasks (and the threads) has inherited the culture of the calling thread.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentCulture#14\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Runtime.Versioning;\nusing System.Threading;\nusing System.Threading.Tasks;\n\n[assembly:TargetFramework(&quot;.NETFramework,Version=v4.6&quot;)]\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new List&lt;Task&gt;();\n      Console.WriteLine(&quot;The current culture is {0}&quot;, \n                        Thread.CurrentThread.CurrentCulture.Name);\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;pt-BR&quot;);\n      // Change the current culture to Portuguese (Brazil).\n      Console.WriteLine(&quot;Current culture changed to {0}&quot;,\n                        Thread.CurrentThread.CurrentCulture.Name);\n      Console.WriteLine(&quot;Application thread is thread {0}&quot;,\n                        Thread.CurrentThread.ManagedThreadId);\n      // Launch six tasks and display their current culture.\n      for (int ctr = 0; ctr &lt;= 5; ctr++)\n         tasks.Add(Task.Run( () =&gt; {\n                               Console.WriteLine(&quot;Culture of task {0} on thread {1} is {2}&quot;,\n                                                 Task.CurrentId, \n                                                 Thread.CurrentThread.ManagedThreadId,\n                                                 Thread.CurrentThread.CurrentCulture.Name);\n                            } ));                     \n\n      Task.WaitAll(tasks.ToArray());\n   }\n}\n// The example displays output like the following:\n//     The current culture is en-US\n//     Current culture changed to pt-BR\n//     Application thread is thread 9\n//     Culture of task 2 on thread 11 is pt-BR\n//     Culture of task 1 on thread 10 is pt-BR\n//     Culture of task 3 on thread 11 is pt-BR\n//     Culture of task 5 on thread 11 is pt-BR\n//     Culture of task 6 on thread 11 is pt-BR\n//     Culture of task 4 on thread 10 is pt-BR\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentCulture#14\">Imports System.Collections.Generic\nImports System.Globalization\nImports System.Runtime.Versioning\nImports System.Threading\nImports System.Threading.Tasks\n\n&lt;assembly:TargetFramework(&quot;.NETFramework,Version=v4.6&quot;)&gt;\n\nModule Example\n   Public Sub Main()\n      Dim tasks As New List(Of Task)\n      Console.WriteLine(&quot;The current culture is {0}&quot;, \n                        Thread.CurrentThread.CurrentCulture.Name)\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;pt-BR&quot;)\n      &#39; Change the current culture to Portuguese (Brazil).\n      Console.WriteLine(&quot;Current culture changed to {0}&quot;,\n                        Thread.CurrentThread.CurrentCulture.Name)\n      Console.WriteLine(&quot;Application thread is thread {0}&quot;,\n                        Thread.CurrentThread.ManagedThreadId)\n      &#39; Launch six tasks and display their current culture.\n      For ctr As Integer = 0 to 5\n         tasks.Add(Task.Run(Sub()\n                               Console.WriteLine(&quot;Culture of task {0} on thread {1} is {2}&quot;,\n                                                 Task.CurrentId, \n                                                 Thread.CurrentThread.ManagedThreadId,\n                                                 Thread.CurrentThread.CurrentCulture.Name)\n                            End Sub))                     \n      Next\n      Task.WaitAll(tasks.ToArray())\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current culture is en-US\n&#39;     Current culture changed to pt-BR\n&#39;     Application thread is thread 9\n&#39;     Culture of task 2 on thread 11 is pt-BR\n&#39;     Culture of task 1 on thread 10 is pt-BR\n&#39;     Culture of task 3 on thread 11 is pt-BR\n&#39;     Culture of task 5 on thread 11 is pt-BR\n&#39;     Culture of task 6 on thread 11 is pt-BR\n&#39;     Culture of task 4 on thread 10 is pt-BR\n</code></pre><p> For more information, see the &quot;Culture and task-based asynchronous operations&quot; section in the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> topic.  </p>\n</li>\n<li><p>By calling the Windows <code>GetUserDefaultLocaleName</code> function.  </p>\n<p>Note that if you set a specific culture that is different from the system-installed culture or the user&#39;s preferred culture, and your application starts multiple threads, the current culture of those threads will be the culture that is returned by the <code>GetUserDefaultLocaleName</code> function, unless you assign a culture to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> property in the application domain in which the thread is executing.  </p>\n<p>For more information about how the culture of a thread is determined, see the &quot;Culture and threads&quot; section in the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> reference page.  </p>\n</li>\n</ul>\n<p><a name=\"Getting\"></a>   </p>\n<h2 id=\"getting-the-current-culture\">Getting the Current Culture</h2>\n<p> The CurrentCulture property is a per-thread setting; that is, each thread can have its own culture. You get the culture of the current thread by retrieving the value of the   CurrentCulture property, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentCulture#5\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo culture = CultureInfo.CurrentCulture;\n      Console.WriteLine(&quot;The current culture is {0} [{1}]&quot;,\n                        culture.NativeName, culture.Name);\n   }\n}\n// The example displays output like the following:\n//       The current culture is English (United States) [en-US]\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentCulture#5\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim culture As CultureInfo = CultureInfo.CurrentCulture\n      Console.WriteLine(&quot;The current culture is {0} [{1}]&quot;,\n                        culture.NativeName, culture.Name)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current culture is English (United States) [en-US]\n</code></pre><p> You can also retrieve the value of the current thread&#39;s culture from the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentThread_\" data-linktype=\"relative-path\">CurrentThread</a> property.  </p>\n<p><a name=\"ExplicitSetting\"></a>   </p>\n<h2 id=\"explicitly-setting-the-currentculture-property\">Explicitly Setting the CurrentCulture Property</h2>\n<p> Staring with the .NET Framework 4.6, to change the culture that is used by an existing thread, you set the CurrentCulture property to the new culture. If you explicitly change a thread&#39;s culture in this way, that change persists if the thread crosses application domain boundaries. The following example changes the current thread culture to Dutch (Netherlands). It also shows that, when the current thread crosses application domain boundaries, its current culture remains changed.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentCulture#11\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Info : MarshalByRefObject\n{\n   public void ShowCurrentCulture()\n   {\n      Console.WriteLine(&quot;Culture of {0} in application domain {1}: {2}&quot;,\n                        Thread.CurrentThread.Name,\n                        AppDomain.CurrentDomain.FriendlyName,\n                        CultureInfo.CurrentCulture.Name);\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Info inf = new Info();\n      // Set the current culture to Dutch (Netherlands).\n      Thread.CurrentThread.Name = &quot;MainThread&quot;;\n      CultureInfo.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;nl-NL&quot;);\n      inf.ShowCurrentCulture();\n      \n      // Create a new application domain.\n       AppDomain ad = AppDomain.CreateDomain(&quot;Domain2&quot;);\n       Info inf2 = (Info) ad.CreateInstanceAndUnwrap(typeof(Info).Assembly.FullName, &quot;Info&quot;);\n       inf2.ShowCurrentCulture();                       \n   }\n}\n// The example displays the following output:\n//       Culture of MainThread in application domain ChangeCulture1.exe: nl-NL\n//       Culture of MainThread in application domain Domain2: nl-NL\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentCulture#11\">Imports System.Globalization\nImports System.Threading\n\nPublic Class Info : Inherits MarshalByRefObject\n   Public Sub ShowCurrentCulture()\n      Console.WriteLine(&quot;Culture of {0} in application domain {1}: {2}&quot;,\n                        Thread.CurrentThread.Name,\n                        AppDomain.CurrentDomain.FriendlyName,\n                        CultureInfo.CurrentCulture.Name)\n   End Sub\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim inf As New Info()\n      &#39; Set the current culture to Dutch (Netherlands).\n      Thread.CurrentThread.Name = &quot;MainThread&quot;\n      CultureInfo.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;nl-NL&quot;)\n      inf.ShowCurrentCulture()\n      \n      &#39; Create a new application domain.\n       Dim ad As AppDomain = AppDomain.CreateDomain(&quot;Domain2&quot;)\n       Dim inf2 As Info = CType(ad.CreateInstanceAndUnwrap(GetType(Info).Assembly.FullName, &quot;Info&quot;),\n                          Info)  \n       inf2.ShowCurrentCulture()                       \n   End Sub\nEnd Module\n&#39; This example displays the following output:\n&#39;       Culture of MainThread in application domain Example.exe: nl-NL\n&#39;       Culture of MainThread in application domain Domain2: nl-NL\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> Changing the culture by using the CurrentCulture property requires a <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> permission with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> value set. Manipulating threads is dangerous because of the security state associated with threads. Therefore, this permission should be given only to trustworthy code, and then only as necessary. You cannot change thread culture in semi-trusted code.  </p>\n</div>\n<p> Starting with the .NET Framework 4, you can explicitly change the current thread culture to either a specific culture (such as French (Canada)) or a neutral culture (such as French). When a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object represents a neutral culture, the values of <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> properties such as <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CompareInfo_\" data-linktype=\"relative-path\">CompareInfo</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a>, and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_TextInfo_\" data-linktype=\"relative-path\">TextInfo</a> reflect the specific culture that is associated with the neutral culture. For example, the dominant culture for the English neutral culture is English (United States); the dominant culture for the German culture is German (Germany). The following example illustrates the difference in formatting when the current culture is set to a specific culture, French (Canada), and a neutral culture, French.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentCulture#12\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      double value = 1634.92;\n      CultureInfo.CurrentCulture = new CultureInfo(&quot;fr-CA&quot;);\n      Console.WriteLine(&quot;Current Culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);\n      Console.WriteLine(&quot;{0:C2}\\n&quot;, value);\n      \n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr&quot;);\n      Console.WriteLine(&quot;Current Culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);\n      Console.WriteLine(&quot;{0:C2}&quot;, value);\n   }\n}\n// The example displays the following output:\n//       Current Culture: fr-CA\n//       1&#160;634,92 $\n//       \n//       Current Culture: fr\n//       1&#160;634,92 €\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentCulture#12\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim value As Double = 1634.92\n      CultureInfo.CurrentCulture = New CultureInfo(&quot;fr-CA&quot;)\n      Console.WriteLine(&quot;Current Culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)\n      Console.WriteLine(&quot;{0:C2}&quot;, value)\n      Console.WriteLine()\n      \n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;fr&quot;)\n      Console.WriteLine(&quot;Current Culture: {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)\n      Console.WriteLine(&quot;{0:C2}&quot;, value)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Current Culture: fr-CA\n&#39;       1&#160;634,92 $\n&#39;       \n&#39;       Current Culture: fr\n&#39;       1&#160;634,92 €\n</code></pre><p> You can also use the CurrentCulture property along with the <a class=\"xref\" href=\"system.web.httprequest#System_Web_HttpRequest_UserLanguages_\" data-linktype=\"relative-path\">UserLanguages</a> property to set the CurrentCulture property of an ASP.NET application to the user&#39;s preferred culture, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentCulture#13\">      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(Request.UserLanguages(0))\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentCulture#13\">      CultureInfo.CurrentCulture = CultureInfo.CreateSpecificCulture(Request.UserLanguages[0]);\n</code></pre><p><a name=\"Overrides\"></a>   </p>\n<h2 id=\"the-current-culture-and-user-overrides\">The Current Culture and User Overrides</h2>\n<p> Windows allows users to override the standard property values of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object and its associated objects by using <strong>Regional and Language Options</strong> in Control Panel. The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object returned by the CurrentCulture property reflects these user overrides in the following cases:  </p>\n<ul>\n<li><p>If the current thread culture is set implicitly by the Windows <code>GetUserDefaultLocaleName</code> function.  </p>\n</li>\n<li><p>If the current thread culture defined by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> property corresponds to the current Windows system culture.  </p>\n</li>\n<li><p>If the current thread culture is set explicitly to a culture returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CreateSpecificCulture_\" data-linktype=\"relative-path\">CreateSpecificCulture</a> method, and that culture corresponds to the current Windows system culture.  </p>\n</li>\n<li><p>If the current thread culture is set explicitly to a culture instantiated by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_\" data-linktype=\"relative-path\">CultureInfo(String)</a> constructor, and that culture corresponds to the current Windows system culture.  </p>\n<p>In some cases, particularly for server applications, setting the current culture to a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that reflects user overrides may be undesirable. Instead, you can set the current thread culture to a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that does not reflect user overrides in the following ways:  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">CultureInfo(String,Boolean)</a> constructor with a value of <code>false</code> for the <code>useUserOverride</code> argument.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfo_\" data-linktype=\"relative-path\">GetCultureInfo</a> method, which returns a cached, read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.  </p>\n</li>\n</ul>\n<p><a name=\"WindowsAndCurr\"></a>   </p>\n<h2 id=\"the-current-culture-and-windows-apps\">The Current Culture and Windows apps</h2>\n<p> In Windows apps, the CurrentCulture property is read-only. You can set the current culture by using the Windows <a href=\"https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx\" data-linktype=\"external\">ResourceContext.Languages</a> property. The following example uses it to change the application&#39;s current culture either to English (United States) or, if the current culture is already English (United States), to French (France). The value of the CurrentCulture and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> properties are then displayed to a <a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a> control named <code>block</code>. As the output from the example shows, the current culture changes when the <a href=\"https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx\" data-linktype=\"external\">ResourceContext.Languages</a> property changes.  </p>\n<pre><code class=\"lang-c#\">\nResourceContext context = ResourceManager.Current.DefaultContext;  \nvar list = new List&lt;String&gt;();  \nif (CultureInfo.CurrentCulture.Name == &quot;en-US&quot;)  \n   list.Add(&quot;fr-FR&quot;);  \nelse  \n   list.Add(&quot;en-US&quot;);  \n\ncontext.Languages = list;  \nblock.Text += String.Format(&quot;\\nThe current culture is {0}\\n&quot;,  \n                            CultureInfo.CurrentCulture);  \nblock.Text += String.Format(&quot;The current culture UI is {0}\\n&quot;,  \n                            CultureInfo.CurrentUICulture);  \n// The example displays output like the following if run on a system  \n// whose current culture is English (United States):  \n// The current culture is fr-FR  \n// The current UI culture is fr-FR  \n</code></pre><pre><code>\nDim context As ResourceContext = ResourceManager.Current.DefaultContext  \nDim list As New List(Of String)()  \nIf CultureInfo.CurrentCulture.Name = &quot;en-US&quot; Then  \n   list.Add(&quot;fr-FR&quot;)  \nElse  \n   list.Add(&quot;en-US&quot;)  \nEnd If  \ncontext.Languages = list  \nblock.Text += String.Format(&quot;{1}The current culture is {0}{1}&quot;,  \n                            CultureInfo.CurrentCulture, vbCrLf)  \nblock.Text += String.Format(&quot;The current culture UI is {0}\\n&quot;,  \n                            CultureInfo.CurrentUICulture)  \n&#39; The example displays output Like the following if run on a system  \n&#39; whose current culture Is English (United States):  \n&#39;    The current culture Is fr-FR  \n&#39;    The current UI culture Is fr-FR  \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to change the CurrentCulture and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> of the current thread.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentCulture2#11\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()  \n   {\n      // Display the name of the current thread culture.\n      Console.WriteLine(&quot;CurrentCulture is {0}.&quot;, CultureInfo.CurrentCulture.Name);\n\n      // Change the current culture to th-TH.\n      CultureInfo.CurrentCulture = new CultureInfo(&quot;th-TH&quot;, false);\n      Console.WriteLine(&quot;CurrentCulture is now {0}.&quot;, CultureInfo.CurrentCulture.Name);\n\n      // Display the name of the current UI culture.\n      Console.WriteLine(&quot;CurrentUICulture is {0}.&quot;, CultureInfo.CurrentUICulture.Name);\n\n      // Change the current UI culture to ja-JP.\n      CultureInfo.CurrentUICulture = new CultureInfo( &quot;ja-JP&quot;, false );\n      Console.WriteLine(&quot;CurrentUICulture is now {0}.&quot;, CultureInfo.CurrentUICulture.Name);\n   }\n}\n// The example displays the following output:\n//       CurrentCulture is en-US.\n//       CurrentCulture is now th-TH.\n//       CurrentUICulture is en-US.\n//       CurrentUICulture is now ja-JP.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentCulture2#11\">Imports System.Globalization\nImports System.Threading\n\nPublic Module Example\n   Public Sub Main()\n\n      &#39; Display the name of the current thread culture.\n      Console.WriteLine(&quot;CurrentCulture is {0}.&quot;, CultureInfo.CurrentCulture.Name)\n\n      &#39; Change the current culture to th-TH.\n      CultureInfo.CurrentCulture = New CultureInfo(&quot;th-TH&quot;, False)\n      Console.WriteLine(&quot;CurrentCulture is now {0}.&quot;, CultureInfo.CurrentCulture.Name)\n\n      &#39; Display the name of the current UI culture.\n      Console.WriteLine(&quot;CurrentUICulture is {0}.&quot;, CultureInfo.CurrentUICulture.Name)\n\n      &#39; Change the current UI culture to ja-JP.\n      CultureInfo.CurrentUICulture = New CultureInfo(&quot;ja-JP&quot;, False)\n      Console.WriteLine(&quot;CurrentUICulture is now {0}.&quot;, CultureInfo.CurrentUICulture.Name)\n   End Sub \nEnd Module\n&#39; The example displays the following output:\n&#39;       CurrentCulture is en-US.\n&#39;       CurrentCulture is now th-TH.\n&#39;       CurrentUICulture is en-US.\n&#39;       CurrentUICulture is now ja-JP.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.CurrentCulture2#11\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nint main()\n{\n   // Display the name of the current thread culture.\n   Console::WriteLine(&quot;CurrentCulture is {0}.&quot;, CultureInfo::CurrentCulture-&gt;Name);\n   \n   // Change the current culture to th-TH.\n   CultureInfo::CurrentCulture = gcnew CultureInfo(&quot;th-TH&quot;,false);\n   Console::WriteLine(&quot;CurrentCulture is now {0}.&quot;, CultureInfo::CurrentCulture-&gt;Name);\n   \n   // Displays the name of the CurrentUICulture of the current thread.\n   Console::WriteLine(&quot;CurrentUICulture is {0}.&quot;, CultureInfo::CurrentCulture-&gt;Name);\n   \n   // Changes the CurrentUICulture of the current thread to ja-JP.\n   CultureInfo::CurrentUICulture = gcnew CultureInfo(&quot;ja-JP&quot;,false);\n   Console::WriteLine(&quot;CurrentUICulture is now {0}.&quot;, CultureInfo::CurrentCulture-&gt;Name);\n}\n// The example displays the following output:\n//       CurrentCulture is en-US.\n//       CurrentCulture is now th-TH.\n//       CurrentUICulture is en-US.\n//       CurrentUICulture is now ja-JP.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_CurrentUICulture\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_CurrentUICulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentUICulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo CurrentUICulture { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>The culture used by the Resource Manager to look up culture-specific resources at run time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is set to a culture name that cannot be used to locate a resource file. Resource filenames can include only letters, numbers, hyphens, or underscores.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current UI culture is a per-thread property. That is, each thread has its own current UI culture. This property is equivalent to retrieving or, starting with the .NET Framework 4.6, setting the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object assigned to the  <code>System.Threading.Thread.CurrentThread.CurrentUICulture</code> property. When a thread is started, its UI culture is initially determined as follows:  </p>\n<ul>\n<li><p>By retrieving the culture that is specified by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> property in the application domain in which the thread is executing, if the property value is not <code>null</code>.  </p>\n</li>\n<li><p>If the thread is a thread pool thread that is executing a task-based asynchronous operation and the app targets the .NET Framework 4.6 or a later version of the .NET Framework, its UI culture is determined by the UI culture of the calling thread.  The following example changes the current UI culture to Portuguese (Brazil) and launches six tasks, each of which displays its thread ID, its task ID, and its current UI culture. Each of the tasks (and the threads) has inherited the UI culture of the calling thread.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentUICulture#14\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Runtime.Versioning;\nusing System.Threading;\nusing System.Threading.Tasks;\n\n[assembly:TargetFramework(&quot;.NETFramework,Version=v4.6&quot;)]\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new List&lt;Task&gt;();\n      Console.WriteLine(&quot;The current UI culture is {0}&quot;, \n                        Thread.CurrentThread.CurrentUICulture.Name);\n      Thread.CurrentThread.CurrentUICulture = new CultureInfo(&quot;pt-BR&quot;);\n      // Change the current UI culture to Portuguese (Brazil).\n      Console.WriteLine(&quot;Current UI culture changed to {0}&quot;,\n                        Thread.CurrentThread.CurrentUICulture.Name);\n      Console.WriteLine(&quot;Application thread is thread {0}&quot;,\n                        Thread.CurrentThread.ManagedThreadId);\n      // Launch six tasks and display their current culture.\n      for (int ctr = 0; ctr &lt;= 5; ctr++)\n         tasks.Add(Task.Run( () =&gt; {\n                               Console.WriteLine(&quot;UI Culture of task {0} on thread {1} is {2}&quot;,\n                                                 Task.CurrentId, \n                                                 Thread.CurrentThread.ManagedThreadId,\n                                                 Thread.CurrentThread.CurrentUICulture.Name);\n                            } ));                     \n\n      Task.WaitAll(tasks.ToArray());\n   }\n}\n// The example displays output like the following:\n//     The current culture is en-US\n//     Current culture changed to pt-BR\n//     Application thread is thread 9\n//     Culture of task 2 on thread 11 is pt-BR\n//     Culture of task 1 on thread 10 is pt-BR\n//     Culture of task 3 on thread 11 is pt-BR\n//     Culture of task 5 on thread 11 is pt-BR\n//     Culture of task 6 on thread 11 is pt-BR\n//     Culture of task 4 on thread 10 is pt-BR\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentUICulture#14\">Imports System.Collections.Generic\nImports System.Globalization\nImports System.Runtime.Versioning\nImports System.Threading\nImports System.Threading.Tasks\n\n&lt;assembly:TargetFramework(&quot;.NETFramework,Version=v4.6&quot;)&gt;\n\nModule Example\n   Public Sub Main()\n      Dim tasks As New List(Of Task)\n      Console.WriteLine(&quot;The current UI culture is {0}&quot;, \n                        Thread.CurrentThread.CurrentUICulture.Name)\n      Thread.CurrentThread.CurrentUICulture = New CultureInfo(&quot;pt-BR&quot;)\n      &#39; Change the current UI culture to Portuguese (Brazil).\n      Console.WriteLine(&quot;Current culture changed to {0}&quot;,\n                        Thread.CurrentThread.CurrentUICulture.Name)\n      Console.WriteLine(&quot;Application thread is thread {0}&quot;,\n                        Thread.CurrentThread.ManagedThreadId)\n      &#39; Launch six tasks and display their current culture.\n      For ctr As Integer = 0 to 5\n         tasks.Add(Task.Run(Sub()\n                               Console.WriteLine(&quot;Culture of task {0} on thread {1} is {2}&quot;,\n                                                 Task.CurrentId, \n                                                 Thread.CurrentThread.ManagedThreadId,\n                                                 Thread.CurrentThread.CurrentUICulture.Name)\n                            End Sub))                     \n      Next\n      Task.WaitAll(tasks.ToArray())\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current culture is en-US\n&#39;     Current culture changed to pt-BR\n&#39;     Application thread is thread 9\n&#39;     Culture of task 2 on thread 11 is pt-BR\n&#39;     Culture of task 1 on thread 10 is pt-BR\n&#39;     Culture of task 3 on thread 11 is pt-BR\n&#39;     Culture of task 5 on thread 11 is pt-BR\n&#39;     Culture of task 6 on thread 11 is pt-BR\n&#39;     Culture of task 4 on thread 10 is pt-BR\n</code></pre><p> For more information, see the &quot;Culture and task-based asynchronous operations&quot; section in the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> topic.  </p>\n</li>\n<li><p>By calling the Windows <code>GetUserDefaultUILanguage</code> function.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Compact Framework, the CurrentUICulture property is read-only. The current UI culture is determined by the system&#39;s regional settings and cannot be changed programmatically.  </p>\n</div>\n<p> Starting with the .NET Framework 4.6, to change the user interface culture used by a thread, set the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property to the new culture. If you explicitly change a thread&#39;s UI culture in this way, that change persists if the thread crosses application domain boundaries.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 4.5.2 and earlier versions, the CurrentUICulture property is read-only;  that is, you can retrieve the property value, but you cannot set it. To change the current UI culture, you assign the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the new UI culture to the <code>Thread.CurrentThread.CurrentUICulture</code> property. Starting with the .NET Framework 4.6, the CurrentUICulture property is read-write; you can both set and retrieve the property&#39;s value. If you do set the property value to a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents a new culture, the value of the <code>Thread.CurrentThread.CurrentCulture</code> property also changes.  </p>\n</div>\n<p> In this section:  </p>\n<p> <a href=\"#Getting\" data-linktype=\"self-bookmark\">Getting the Current UI Culture</a><br> <a href=\"#Explicit\" data-linktype=\"self-bookmark\">Explicitly Setting the Current UI Culture</a><br> <a href=\"#Implicit\" data-linktype=\"self-bookmark\">Implicitly Setting the Current UI Culture</a><br> <a href=\"#Security\" data-linktype=\"self-bookmark\">Security Considerations</a><br> <a href=\"#WindowsAndCurrUI\" data-linktype=\"self-bookmark\">The Current UI Culture and Windows apps</a>  </p>\n<p><a name=\"Getting\"></a>   </p>\n<h2 id=\"getting-the-current-ui-culture\">Getting the Current UI Culture</h2>\n<p> The CurrentUICulture property is a per-thread setting; that is, each thread can have its own UI culture. You get the UI culture of the current thread by retrieving the value of the   CurrentUICulture property, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentUICulture#5\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo culture = CultureInfo.CurrentUICulture;\n      Console.WriteLine(&quot;The current UI culture is {0} [{1}]&quot;,\n                        culture.NativeName, culture.Name);\n   }\n}\n// The example displays output like the following:\n//       The current UI culture is English (United States) [en-US]\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentUICulture#5\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim culture As CultureInfo = CultureInfo.CurrentCulture\n      Console.WriteLine(&quot;The current UI culture is {0} [{1}]&quot;,\n                        culture.NativeName, culture.Name)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     The current UI culture is English (United States) [en-US]\n</code></pre><p> You can also retrieve the value of the current thread&#39;s UI culture from the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property.  </p>\n<p><a name=\"Explicit\"></a>   </p>\n<h2 id=\"explicitly-setting-the-current-ui-culture\">Explicitly Setting the Current UI Culture</h2>\n<p> Starting with the .NET Framework 4.6, you can change the current UI culture by assigning a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the new culture to the iCurrentUICulture property. The current UI culture can be set to either a specific culture (such as en-US or de-DE) or to a neutral culture (such as en or de). The following example sets the current UI culture to fr-FR or French (France).  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentUICulture#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;The current UI culture: {0}&quot;, \n                        CultureInfo.CurrentUICulture.Name);\n      \n      CultureInfo.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      Console.WriteLine(&quot;The current UI culture: {0}&quot;, \n                        CultureInfo.CurrentUICulture.Name);\n   }\n}\n// The example displays output like the following:\n//       The current UI culture: en-US\n//       The current UI culture: fr-FR\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentUICulture#1\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Console.WriteLine(&quot;The current UI culture: {0}&quot;, \n                        CultureInfo.CurrentUICulture.Name)\n      \n      CultureInfo.CurrentUICulture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      Console.WriteLine(&quot;The current UI culture: {0}&quot;, \n                        CultureInfo.CurrentUICulture.Name)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       The current UI culture: en-US\n&#39;       The current UI culture: fr-FR\n</code></pre><p> In a multithreaded application, you can explicitly set the UI culture of any thread by assigning a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents that culture to the thread&#39;s <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property. If the thread whose culture you want to set is the current thread, you can assign the new culture to the CurrentUICulture property. When the UI culture of a thread is set explicitly, that thread retains the same culture even if it crosses application domain boundaries and executes code in another application domain.  </p>\n<p><a name=\"Implicit\"></a>   </p>\n<h2 id=\"implicitly-setting-the-current-ui-culture\">Implicitly Setting the Current UI Culture</h2>\n<p> When a thread, including the main application thread, is first created, by default its current UI culture is set as follows:  </p>\n<ul>\n<li><p>By using the culture defined by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> property for the current application domain if the  property value is not <code>null</code>.  </p>\n</li>\n<li><p>By using the system&#39;s default culture. On systems that use the Windows operating system, the common language runtime calls the Windows <code>GetUserDefaultUILanguage</code> function to set the current  UI culture. <code>GetUserDefaultUILanguage</code> returns the default UI culture set by the user. If the user has not set a default UI language, it returns the culture originally installed on the system.  </p>\n<p>If the thread crosses application boundaries and executes code in another application domain, its culture is determined in the same way as that of a newly created thread.  </p>\n<p>Note that if you set a specific UI culture that is different from the system-installed UI culture or the user&#39;s preferred UI culture, and your application starts multiple threads, the current UI culture of those threads will be the culture returned by the <code>GetUserDefaultUILanguage</code> function, unless you assign a culture to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> property in the application domain in which the thread is executing.  </p>\n</li>\n</ul>\n<p><a name=\"Security\"></a>   </p>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> Changing the culture of the current thread requires a <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> permission with the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> value set.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Manipulating threads is dangerous because of the security state associated with threads. Therefore, this permission should be given only to trustworthy code, and then only as necessary. You cannot change thread culture in semi-trusted code.  </p>\n</div>\n<p><a name=\"WindowsAndCurrUI\"></a>   </p>\n<h2 id=\"the-current-ui-culture-and-windows-apps\">The Current UI Culture and Windows apps</h2>\n<p> In Windows apps, the CurrentUICulture property is read-only. You can set the current UI culture by using the Windows <a href=\"https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx\" data-linktype=\"external\">ResourceContext.Languages</a> property. The following example uses it to change the application&#39;s current UI culture either to English (United States) or, if the current culture is already English (United States), to French (France). The value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> and CurrentUICulture properties are then displayed to a <a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a> control named <code>block</code>. As the output from the example shows, the current UI culture changes when the <a href=\"https://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.resources.core.resourcecontext.languages.aspx\" data-linktype=\"external\">ResourceContext.Languages</a> property changes.  </p>\n<pre><code class=\"lang-c#\">\nResourceContext context = ResourceManager.Current.DefaultContext;  \nvar list = new List&lt;String&gt;();  \nif (CultureInfo.CurrentCulture.Name == &quot;en-US&quot;)  \n   list.Add(&quot;fr-FR&quot;);  \nelse  \n   list.Add(&quot;en-US&quot;);  \n\ncontext.Languages = list;  \nblock.Text += String.Format(&quot;\\nThe current culture is {0}\\n&quot;,  \n                            CultureInfo.CurrentCulture);  \nblock.Text += String.Format(&quot;The current culture UI is {0}\\n&quot;,  \n                            CultureInfo.CurrentUICulture);  \n// The example displays output like the following if run on a system  \n// whose current culture is English (United States):  \n// The current culture is fr-FR  \n// The current UI culture is fr-FR  \n</code></pre><pre><code>\nDim context As ResourceContext = ResourceManager.Current.DefaultContext  \nDim list As New List(Of String)()  \nIf CultureInfo.CurrentCulture.Name = &quot;en-US&quot; Then  \n   list.Add(&quot;fr-FR&quot;)  \nElse  \n   list.Add(&quot;en-US&quot;)  \nEnd If  \ncontext.Languages = list  \nblock.Text += String.Format(&quot;{1}The current culture is {0}{1}&quot;,  \n                            CultureInfo.CurrentCulture, vbCrLf)  \nblock.Text += String.Format(&quot;The current culture UI is {0}\\n&quot;,  \n                            CultureInfo.CurrentUICulture)  \n&#39; The example displays output Like the following if run on a system  \n&#39; whose current culture Is English (United States):  \n&#39;    The current culture Is fr-FR  \n&#39;    The current UI culture Is fr-FR  \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to change the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> and CurrentUICulture of the current thread.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CurrentCulture2#11\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()  \n   {\n      // Display the name of the current thread culture.\n      Console.WriteLine(&quot;CurrentCulture is {0}.&quot;, CultureInfo.CurrentCulture.Name);\n\n      // Change the current culture to th-TH.\n      CultureInfo.CurrentCulture = new CultureInfo(&quot;th-TH&quot;, false);\n      Console.WriteLine(&quot;CurrentCulture is now {0}.&quot;, CultureInfo.CurrentCulture.Name);\n\n      // Display the name of the current UI culture.\n      Console.WriteLine(&quot;CurrentUICulture is {0}.&quot;, CultureInfo.CurrentUICulture.Name);\n\n      // Change the current UI culture to ja-JP.\n      CultureInfo.CurrentUICulture = new CultureInfo( &quot;ja-JP&quot;, false );\n      Console.WriteLine(&quot;CurrentUICulture is now {0}.&quot;, CultureInfo.CurrentUICulture.Name);\n   }\n}\n// The example displays the following output:\n//       CurrentCulture is en-US.\n//       CurrentCulture is now th-TH.\n//       CurrentUICulture is en-US.\n//       CurrentUICulture is now ja-JP.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CurrentCulture2#11\">Imports System.Globalization\nImports System.Threading\n\nPublic Module Example\n   Public Sub Main()\n\n      &#39; Display the name of the current thread culture.\n      Console.WriteLine(&quot;CurrentCulture is {0}.&quot;, CultureInfo.CurrentCulture.Name)\n\n      &#39; Change the current culture to th-TH.\n      CultureInfo.CurrentCulture = New CultureInfo(&quot;th-TH&quot;, False)\n      Console.WriteLine(&quot;CurrentCulture is now {0}.&quot;, CultureInfo.CurrentCulture.Name)\n\n      &#39; Display the name of the current UI culture.\n      Console.WriteLine(&quot;CurrentUICulture is {0}.&quot;, CultureInfo.CurrentUICulture.Name)\n\n      &#39; Change the current UI culture to ja-JP.\n      CultureInfo.CurrentUICulture = New CultureInfo(&quot;ja-JP&quot;, False)\n      Console.WriteLine(&quot;CurrentUICulture is now {0}.&quot;, CultureInfo.CurrentUICulture.Name)\n   End Sub \nEnd Module\n&#39; The example displays the following output:\n&#39;       CurrentCulture is en-US.\n&#39;       CurrentCulture is now th-TH.\n&#39;       CurrentUICulture is en-US.\n&#39;       CurrentUICulture is now ja-JP.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.CurrentCulture2#11\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Threading;\n\nint main()\n{\n   // Display the name of the current thread culture.\n   Console::WriteLine(&quot;CurrentCulture is {0}.&quot;, CultureInfo::CurrentCulture-&gt;Name);\n   \n   // Change the current culture to th-TH.\n   CultureInfo::CurrentCulture = gcnew CultureInfo(&quot;th-TH&quot;,false);\n   Console::WriteLine(&quot;CurrentCulture is now {0}.&quot;, CultureInfo::CurrentCulture-&gt;Name);\n   \n   // Displays the name of the CurrentUICulture of the current thread.\n   Console::WriteLine(&quot;CurrentUICulture is {0}.&quot;, CultureInfo::CurrentCulture-&gt;Name);\n   \n   // Changes the CurrentUICulture of the current thread to ja-JP.\n   CultureInfo::CurrentUICulture = gcnew CultureInfo(&quot;ja-JP&quot;,false);\n   Console::WriteLine(&quot;CurrentUICulture is now {0}.&quot;, CultureInfo::CurrentCulture-&gt;Name);\n}\n// The example displays the following output:\n//       CurrentCulture is en-US.\n//       CurrentCulture is now th-TH.\n//       CurrentUICulture is en-US.\n//       CurrentUICulture is now ja-JP.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_DateTimeFormat\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_DateTimeFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DateTimeFormat</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> that defines the culturally appropriate format of displaying dates and times.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> that defines the culturally appropriate format of displaying dates and times.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is set to null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The DateTimeFormat property or any of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> properties is set, and the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"overrides\">Overrides</h2>\n<p> The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  </p>\n<p> If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is <code>true</code> and the specified culture matches the current culture of Windows, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the DateTimeFormat property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.  </p>\n<p> The value of the DateTimeFormat property and the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property is not calculated until your application accesses the property. If the user can change the current culture to a new culture while the application is running and then the application accesses the DateTimeFormat or <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property, the application retrieves the defaults for the new culture instead of the overrides for the original culture. To preserve the overrides for the original current culture, the application should access the DateTimeFormat and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> properties before changing the current culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that CultureInfo.Clone also clones the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instances associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.Clone#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a CultureInfo.\n   CultureInfo^ myCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   \n   // Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n   CultureInfo^ myCIclone = dynamic_cast&lt;CultureInfo^&gt;(myCI-&gt;Clone());\n   myCIclone-&gt;DateTimeFormat-&gt;AMDesignator = &quot;a.m.&quot;;\n   myCIclone-&gt;DateTimeFormat-&gt;DateSeparator = &quot;-&quot;;\n   myCIclone-&gt;NumberFormat-&gt;CurrencySymbol = &quot;USD&quot;;\n   myCIclone-&gt;NumberFormat-&gt;NumberDecimalDigits = 4;\n   \n   // Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n   Console::WriteLine( &quot;DTFI/NFI PROPERTY&nbsp;&nbsp;&nbsp;&nbsp;ORIGINAL&nbsp;&nbsp;&nbsp;&nbsp;MODIFIED CLONE&quot; );\n   Console::WriteLine( &quot;DTFI.AMDesignator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;DateTimeFormat-&gt;AMDesignator, myCIclone-&gt;DateTimeFormat-&gt;AMDesignator );\n   Console::WriteLine( &quot;DTFI.DateSeparator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;DateTimeFormat-&gt;DateSeparator, myCIclone-&gt;DateTimeFormat-&gt;DateSeparator );\n   Console::WriteLine( &quot;NFI.CurrencySymbol&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;NumberFormat-&gt;CurrencySymbol, myCIclone-&gt;NumberFormat-&gt;CurrencySymbol );\n   Console::WriteLine( &quot;NFI.NumberDecimalDigits&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;NumberFormat-&gt;NumberDecimalDigits, myCIclone-&gt;NumberFormat-&gt;NumberDecimalDigits );\n}\n\n/*\nThis code produces the following output.\n\nDTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\nDTFI.AMDesignator       AM              a.m.\nDTFI.DateSeparator      /               -\nNFI.CurrencySymbol      $               USD\nNFI.NumberDecimalDigits 2               4\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Clone#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCultureInfo\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a CultureInfo.\n      Dim myCI As New CultureInfo(&quot;en-US&quot;, False)\n      \n      &#39; Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n      Dim myCIclone As CultureInfo = CType(myCI.Clone(), CultureInfo)\n      myCIclone.DateTimeFormat.AMDesignator = &quot;a.m.&quot;\n      myCIclone.DateTimeFormat.DateSeparator = &quot;-&quot;\n      myCIclone.NumberFormat.CurrencySymbol = &quot;USD&quot;\n      myCIclone.NumberFormat.NumberDecimalDigits = 4\n      \n      &#39; Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n      Console.WriteLine(&quot;DTFI/NFI PROPERTY&quot; + ControlChars.Tab + &quot;ORIGINAL&quot; + ControlChars.Tab + &quot;MODIFIED CLONE&quot;)\n      Console.WriteLine(&quot;DTFI.AMDesignator&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.DateTimeFormat.AMDesignator, myCIclone.DateTimeFormat.AMDesignator)\n      Console.WriteLine(&quot;DTFI.DateSeparator&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.DateTimeFormat.DateSeparator, myCIclone.DateTimeFormat.DateSeparator)\n      Console.WriteLine(&quot;NFI.CurrencySymbol&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.NumberFormat.CurrencySymbol, myCIclone.NumberFormat.CurrencySymbol)\n      Console.WriteLine(&quot;NFI.NumberDecimalDigits&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.NumberFormat.NumberDecimalDigits, myCIclone.NumberFormat.NumberDecimalDigits)\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCultureInfo\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; DTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\n&#39; DTFI.AMDesignator       AM              a.m.\n&#39; DTFI.DateSeparator      /               -\n&#39; NFI.CurrencySymbol      $               USD\n&#39; NFI.NumberDecimalDigits 2               4\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Clone#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCultureInfo  {\n\n   public static void Main()  {\n\n      // Creates and initializes a CultureInfo.\n      CultureInfo myCI = new CultureInfo(&quot;en-US&quot;, false);\n\n      // Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n      CultureInfo myCIclone = (CultureInfo) myCI.Clone();\n      myCIclone.DateTimeFormat.AMDesignator = &quot;a.m.&quot;;\n      myCIclone.DateTimeFormat.DateSeparator = &quot;-&quot;;\n      myCIclone.NumberFormat.CurrencySymbol = &quot;USD&quot;;\n      myCIclone.NumberFormat.NumberDecimalDigits = 4;\n\n      // Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n      Console.WriteLine( &quot;DTFI/NFI PROPERTY&nbsp;&nbsp;&nbsp;&nbsp;ORIGINAL&nbsp;&nbsp;&nbsp;&nbsp;MODIFIED CLONE&quot; );\n      Console.WriteLine( &quot;DTFI.AMDesignator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.DateTimeFormat.AMDesignator, myCIclone.DateTimeFormat.AMDesignator );\n      Console.WriteLine( &quot;DTFI.DateSeparator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.DateTimeFormat.DateSeparator, myCIclone.DateTimeFormat.DateSeparator );\n      Console.WriteLine( &quot;NFI.CurrencySymbol&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.NumberFormat.CurrencySymbol, myCIclone.NumberFormat.CurrencySymbol );\n      Console.WriteLine( &quot;NFI.NumberDecimalDigits&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.NumberFormat.NumberDecimalDigits, myCIclone.NumberFormat.NumberDecimalDigits );\n      \n   }\n\n}\n\n/*\nThis code produces the following output.\n\nDTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\nDTFI.AMDesignator       AM              a.m.\nDTFI.DateSeparator      /               -\nNFI.CurrencySymbol      $               USD\nNFI.NumberDecimalDigits 2               4\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_DefaultThreadCurrentCulture\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultThreadCurrentCulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default culture for threads in the current application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>The default culture for threads in the current application domain, or <code>null</code> if the current system culture is the default thread culture in the application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework 4 and previous versions, by default, the culture of all threads is set to the Windows system culture. For applications whose current culture differs from the default system culture, this behavior is often undesirable. In the .NET Framework 4.5, the DefaultThreadCurrentCulture property enables an application to define the default culture of all threads in an application domain.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you have not explicitly set the culture of any existing threads executing in an application domain, setting the DefaultThreadCurrentCulture property also changes the culture of these threads. However, if these threads execute in another application domain, their culture is defined by the DefaultThreadCurrentCulture property in that application domain or, if no default value is defined, by the default system culture. Because of this, we recommend that you always explicitly set the culture of your main application thread, and not rely on the DefaultThreadCurrentCulture property to define the culture of the main application thread.  </p>\n</div>\n<p> Unless it is set explicitly, the value of the DefaultThreadCurrentCulture property is <code>null</code>, and the culture of threads in an application domain that have not been assigned an explicit culture is defined by the default Windows system culture.  </p>\n<p> For more information about cultures, threads, and application domains, see the &quot;Culture and threads&quot; and &quot;Culture and application domains&quot; sections in the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> reference page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the default behavior of the .NET Framework in defining the current culture of a new thread. At startup, the example sets the current culture and the current UI culture to French (France) on all systems except those on which the default system culture is already French (France). If the default system culture is already French (France), the code sets the current culture and the current UI culture to English (United States). It then calls the <code>DisplayRandomNumbers</code> routine, which generates three random numbers and displays them as currency values. Next, it creates a new thread, which also executes the <code>DisplayRandomNumbers</code> routine.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1\">Imports System.Globalization\nImports System.Text\nImports System.Threading\n\nModule Example\n\n   Public Sub Main()\n      Console.OutputEncoding = Encoding.UTF8 \n      &#39; Change current culture\n      Dim culture As CultureInfo\n      If Thread.CurrentThread.CurrentCulture.Name = &quot;fr-FR&quot; Then\n         culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Else\n         culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      End If   \n      Thread.CurrentThread.CurrentCulture = culture\n      Thread.CurrentThread.CurrentUICulture = culture\n      \n      &#39; Generate and display three random numbers on the current thread.\n      DisplayRandomNumbers()\n      Thread.Sleep(1000)\n      \n      Dim workerThread As New Thread(AddressOf Example.DisplayRandomNumbers)\n      workerThread.Start()\n   End Sub\n   \n   Private Sub DisplayRandomNumbers()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current Culture:    {0}&quot;, \n                        Thread.CurrentThread.CurrentCulture)\n      Console.WriteLine(&quot;Current UI Culture: {0}&quot;, \n                        Thread.CurrentThread.CurrentUICulture)\n\n      Console.Write(&quot;Random Values: &quot;)\n      Dim rand As New Random()\n      For ctr As Integer = 0 To 2\n         Console.Write(&quot;     {0:C2}     &quot;, rand.NextDouble())\n      Next      \n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;    Current Culture:    fr-FR\n&#39;    Current UI Culture: fr-FR\n&#39;    Random Values:      0,77 €          0,35 €          0,52 €     \n&#39;    \n&#39;    Current Culture:    en-US\n&#39;    Current UI Culture: en-US\n&#39;    Random Values:      $0.30          $0.79          $0.65     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1\">using System;\nusing System.Globalization;\nusing System.Text;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.OutputEncoding = Encoding.UTF8; \n      // Change current culture\n      CultureInfo culture;\n      if (Thread.CurrentThread.CurrentCulture.Name == &quot;fr-FR&quot;)\n         culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      else\n         culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n\n      Thread.CurrentThread.CurrentCulture = culture;\n      Thread.CurrentThread.CurrentUICulture = culture;\n      \n      // Generate and display three random numbers on the current thread.\n      DisplayRandomNumbers();\n      Thread.Sleep(1000);\n      \n      Thread workerThread = new Thread(new ThreadStart(Example.DisplayRandomNumbers));\n      workerThread.Start();\n   }\n\n   private static void DisplayRandomNumbers()\n   {\n      Console.WriteLine();\n      Console.WriteLine(&quot;Current Culture:    {0}&quot;, \n                        Thread.CurrentThread.CurrentCulture);\n      Console.WriteLine(&quot;Current UI Culture: {0}&quot;, \n                        Thread.CurrentThread.CurrentUICulture);\n\n      Console.Write(&quot;Random Values: &quot;);\n      Random rand = new Random();\n      for (int ctr = 0; ctr &lt;= 2; ctr++)\n         Console.Write(&quot;     {0:C2}     &quot;, rand.NextDouble());\n\n      Console.WriteLine();\n   }\n}\n// The example displays output similar to the following:\n//    Current Culture:    fr-FR\n//    Current UI Culture: fr-FR\n//    Random Values:      0,77 €          0,35 €          0,52 €     \n//    \n//    Current Culture:    en-US\n//    Current UI Culture: en-US\n//    Random Values:      $0.30          $0.79          $0.65     \n</code></pre><p> As the output from the example shows, when the example is run on a computer whose system culture is English (United States), the main thread displays its currency values using the formatting conventions of the French (France) culture. However, because the worker thread&#39;s culture is derived from the current Windows system culture rather than the application&#39;s current culture, the work thread displays its currency values using the formatting conventions of the English (United States) culture.  </p>\n<p> The following example uses the DefaultThreadCurrentCulture and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> properties  to define the current culture and current UI culture of a new application thread. At startup, the example sets the current culture and the current UI culture to French (France) on all systems except those on which the default system culture is already French (France). If the default system culture is already French (France), it sets the current culture and the current UI culture to English (United States). It then calls the <code>DisplayRandomNumbers</code> routine, which generates three random numbers and displays them as currency values. Next, it creates a new thread, which also executes the <code>DisplayRandomNumbers</code> routine.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2\">using System;\nusing System.Globalization;\nusing System.Text;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.OutputEncoding = Encoding.UTF8; \n      // Change current culture\n      CultureInfo culture;\n      if (Thread.CurrentThread.CurrentCulture.Name == &quot;fr-FR&quot;)\n         culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      else\n         culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      \n      CultureInfo.DefaultThreadCurrentCulture = culture;\n      CultureInfo.DefaultThreadCurrentUICulture = culture;\n\n      Thread.CurrentThread.CurrentCulture = culture;\n      Thread.CurrentThread.CurrentUICulture = culture;\n      \n      // Generate and display three random numbers on the current thread.\n      DisplayRandomNumbers();\n      Thread.Sleep(1000);\n      \n      Thread workerThread = new Thread(new ThreadStart(Example.DisplayRandomNumbers));\n      workerThread.Start();\n   }\n\n   private static void DisplayRandomNumbers()\n   {\n      Console.WriteLine();\n      Console.WriteLine(&quot;Current Culture:    {0}&quot;, \n                        Thread.CurrentThread.CurrentCulture);\n      Console.WriteLine(&quot;Current UI Culture: {0}&quot;, \n                        Thread.CurrentThread.CurrentUICulture);\n\n      Console.Write(&quot;Random Values: &quot;);\n      Random rand = new Random();\n      for (int ctr = 0; ctr &lt;= 2; ctr++)\n         Console.Write(&quot;     {0:C2}     &quot;, rand.NextDouble());\n\n      Console.WriteLine();\n   }\n}\n// The example displays output similar to the following:\n//    Current Culture:    fr-FR\n//    Current UI Culture: fr-FR\n//    Random Values:      0,78 €          0,80 €          0,37 €\n//    \n//    Current Culture:    fr-FR\n//    Current UI Culture: fr-FR\n//    Random Values:      0,52 €          0,32 €          0,15 €\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2\">Imports System.Globalization\nImports System.Text\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Console.OutputEncoding = Encoding.UTF8 \n      &#39; Change current culture\n      Dim culture As CultureInfo\n      \n      If Thread.CurrentThread.CurrentCulture.Name = &quot;fr-FR&quot; Then\n         culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Else\n         culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      End If   \n      CultureInfo.DefaultThreadCurrentCulture = culture\n      CultureInfo.DefaultThreadCurrentUICulture = culture\n      \n      Thread.CurrentThread.CurrentCulture = culture\n      Thread.CurrentThread.CurrentUICulture = culture\n      \n      &#39; Generate and display three random numbers on the current thread.\n      DisplayRandomNumbers()\n      Thread.Sleep(1000)\n      \n      Dim workerThread As New Thread(AddressOf Example.DisplayRandomNumbers)\n      workerThread.Start()\n   End Sub\n   \n   Private Sub DisplayRandomNumbers()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current Culture:    {0}&quot;, \n                        Thread.CurrentThread.CurrentCulture)\n      Console.WriteLine(&quot;Current UI Culture: {0}&quot;, \n                        Thread.CurrentThread.CurrentUICulture)\n      Console.Write(&quot;Random Values: &quot;)\n      Dim rand As New Random()\n      For ctr As Integer = 0 To 2\n         Console.Write(&quot;     {0:C2}     &quot;, rand.NextDouble())\n      Next      \n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;    Current Culture:    fr-FR\n&#39;    Current UI Culture: fr-FR\n&#39;    Random Values:      0,78 €          0,80 €          0,37 €\n&#39;    \n&#39;    Current Culture:    fr-FR\n&#39;    Current UI Culture: fr-FR\n&#39;    Random Values:      0,52 €          0,32 €          0,15 €\n</code></pre><p> As the output from the example shows, when the example is run on a computer whose system culture is English (United States), both the main thread and the worker thread display their currency values using the formatting conventions of the French (France) culture.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_DefaultThreadCurrentUICulture\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultThreadCurrentUICulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default UI culture for threads in the current application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>The default UI culture for threads in the current application domain, or <code>null</code> if the current system UI culture is the default thread UI culture in the application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the <span class=\"xref\">stem.Globalization.CultureInfo.Name*</span> property value is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework 4 and previous versions, by default, the UI culture of all threads is set to the Windows system culture. For applications whose current UI culture differs from the default system culture, this behavior is often undesirable. In the .NET Framework 4.5, the DefaultThreadCurrentUICulture property lets you define the default UI culture of all threads in an application domain.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you have not explicitly set the UI culture of any existing threads executing in an application domain, setting the DefaultThreadCurrentUICulture property also changes the culture of these threads. However, if these threads execute in another application domain, their culture is defined by the DefaultThreadCurrentUICulture property in that application domain or, if no default value is defined, by the default system culture. Because of this, we recommend that you always explicitly set the culture of your main application thread and do not rely on the DefaultThreadCurrentUICulture property to define the culture of the main application thread.  </p>\n</div>\n<p> Unless it is set explicitly, the value of the DefaultThreadCurrentUICulture property is <code>null</code>, and the current culture of all threads in an application domain that have not been assigned an explicit culture is defined by the default Windows system culture.  </p>\n<p> For more information about cultures, threads, and application domains, see the &quot;Culture and threads&quot; and &quot;Culture and application domains&quot; sections in the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> reference page.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the default behavior of the .NET Framework in defining the current culture of a new thread. It uses English and Russian language resources. The following text file named GreetingStrings.txt contains the English language resources:  </p>\n<pre><code>greeting =Hello again!  \nnewGreeting=Hello!  \n</code></pre><p> It is compiled to a binary .resources file named GreetingStrings.resources by using the  <a href=\"../Topic/Resgen.exe%20(Resource%20File%20Generator).md\" data-linktype=\"relative-path\">Resource File Generator</a> with the following command.  </p>\n<pre><code>resgen greetingstrings.txt  \n</code></pre><p> The following text file named GreetingStrings.ru-RU.txt contains the Russian language resources:  </p>\n<pre><code>greeting=Еще раз привет!  \nnewGreeting=Привет!  \n</code></pre><p> It is compiled to a binary .resources file named GreetingStrings.ru-RU.resources by using the  <a href=\"../Topic/Resgen.exe%20(Resource%20File%20Generator).md\" data-linktype=\"relative-path\">Resource File Generator</a> with the following command.  </p>\n<pre><code>resgen greetingstrings.ru-RU.txt  \n</code></pre><p> The application code, which is shown below, resides in a file named Example1.vb or Example1.cs. It is compiled to an executable by using the following command for the Visual Basic compiler:  </p>\n<pre><code>vbc Example1.vb /resource:GreetingStrings.resources  \n</code></pre><p> For the C# compiler, the command is similar:  </p>\n<pre><code>csc /resource:GreetingStrings.resources Example1.cs  \n</code></pre><p> This creates an assembly that includes the example&#39;s executable code along with the resources for its fallback culture. You can also use the  <a href=\"../Topic/Al.exe%20(Assembly%20Linker).md\" data-linktype=\"relative-path\">Assembly Linker</a> to create the resource file for the Russian (Russia) culture with the following command:  </p>\n<pre><code>&gt;al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\\Example1.resources.dll  \n</code></pre><p> At startup, the example sets the current culture and the current UI culture to Russian (Russia) on all systems except those on which the default system culture is already Russian (Russia). If the default system culture is already Russian (Russia), the code sets the current culture and the current UI culture to English (United States). It then calls the <code>ShowGreeting</code> routine, which displays a simple string the first time it is called and a slightly different string on subsequent method calls. Next, it creates a new thread, which also executes the <code>ShowGreeting</code> routine.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1\">using System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Resources;\nusing System.Threading;\n\n[assembly:NeutralResourcesLanguageAttribute(&quot;en-US&quot;)]\n\npublic class Example\n{\n   private static int nGreetings = 0;\n   private static ResourceManager rm;\n\n   public static void Main()\n   {\n      AppDomain domain = AppDomain.CurrentDomain;\n      rm = new ResourceManager(&quot;GreetingStrings&quot;, \n                               typeof(Example).Assembly);\n                  \n      CultureInfo culture = null;\n      if (Thread.CurrentThread.CurrentUICulture.Name == &quot;ru-RU&quot;)\n         culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      else\n         culture = CultureInfo.CreateSpecificCulture(&quot;ru-RU&quot;);\n\n      Thread.CurrentThread.CurrentCulture = culture;\n      Thread.CurrentThread.CurrentUICulture = culture;\n\n      ShowGreeting();\n      Thread.Sleep(1000);\n\n      Thread workerThread = new Thread(Example.ShowGreeting);\n      workerThread.Start();\n   }\n\n   private static void ShowGreeting()\n   {\n      string greeting = nGreetings == 0 ? rm.GetString(&quot;newGreeting&quot;) :\n                                          rm.GetString(&quot;greeting&quot;);\n      nGreetings++;\n      Console.WriteLine(&quot;{0}&quot;, greeting);   \n   }\n}\n// The example displays the following output:\n//       Привет!\n//       Hello again!\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1\">Imports System.Globalization\nImports System.Reflection\nImports System.Resources\nImports System.Threading\n\n&lt;Assembly:NeutralResourcesLanguageAttribute(&quot;en-US&quot;)&gt;\n\nPublic Class Example\n   Private Shared nGreetings As Integer = 0\n   Private Shared rm As ResourceManager\n\n   Public Shared Sub Main()\n      Dim domain As AppDomain = AppDomain.CurrentDomain\n      rm = New ResourceManager(&quot;GreetingStrings&quot;, \n                               GetType(Example).Assembly)\n                  \n      Dim culture As CultureInfo = Nothing\n      If Thread.CurrentThread.CurrentUICulture.Name = &quot;ru-RU&quot; Then\n         culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Else\n         culture = CultureInfo.CreateSpecificCulture(&quot;ru-RU&quot;)\n      End If   \n      Thread.CurrentThread.CurrentCulture = culture\n      Thread.CurrentThread.CurrentUICulture = culture\n\n      ShowGreeting()\n      Thread.Sleep(1000)\n\n      Dim workerThread As New Thread(AddressOf Example.ShowGreeting)\n      workerThread.Start()\n   End Sub\n   \n   Private Shared Sub ShowGreeting()\n      Dim greeting As String = CStr(IIf(nGreetings = 0, \n                                        rm.GetString(&quot;newGreeting&quot;),\n                                        rm.GetString(&quot;greeting&quot;)))\n      nGreetings += 1\n      Console.WriteLine(&quot;{0}&quot;, greeting)   \n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       Привет!\n&#39;       Hello again!\n</code></pre><p> As the output from the example shows, when the example is run on a computer whose system culture is English (United States), the main thread displays its initial string in Russian. However, because the worker thread&#39;s culture is derived from the current Windows system culture rather than the application&#39;s current culture, the worker thread displays its string in English.  </p>\n<p> The following example uses the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and DefaultThreadCurrentUICulture properties  to define the current culture and current UI culture of a new application thread.  </p>\n<p> The example uses the same resources files as the previous example. The commands to compile and to embed the localized Russian language resources into a satellite assembly are also identical, except that the name of the executable assembly changes.  </p>\n<p> At startup, the example sets the current culture and the current UI culture to Russian (Russia) on all systems except those on which the default system culture is already Russian (Russia). If the default system culture is already Russian (Russia), it sets the current culture and the current UI culture to English (United States). It then calls the <code>ShowGreeting</code> routine, which displays a simple string the first time it is called and a slightly different string on subsequent method calls. Next, it creates a new thread, which also executes the <code>ShowGreeting</code> routine.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2\">using System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Resources;\nusing System.Threading;\n\n[assembly:NeutralResourcesLanguageAttribute(&quot;en-US&quot;)]\n\npublic class Example\n{\n   private static int nGreetings = 0;\n   private static ResourceManager rm;\n\n   public static void Main()\n   {\n      AppDomain domain = AppDomain.CurrentDomain;\n      rm = new ResourceManager(&quot;GreetingStrings&quot;, \n                               typeof(Example).Assembly);\n                  \n      CultureInfo culture = null;\n      if (Thread.CurrentThread.CurrentUICulture.Name == &quot;ru-RU&quot;)\n         culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      else\n         culture = CultureInfo.CreateSpecificCulture(&quot;ru-RU&quot;);\n\n      CultureInfo.DefaultThreadCurrentCulture = culture;\n      CultureInfo.DefaultThreadCurrentUICulture = culture;\n\n      Thread.CurrentThread.CurrentCulture = culture;\n      Thread.CurrentThread.CurrentUICulture = culture;\n\n      ShowGreeting();\n      Thread.Sleep(1000);\n\n      Thread workerThread = new Thread(Example.ShowGreeting);\n      workerThread.Start();\n   }\n\n   private static void ShowGreeting()\n   {\n      string greeting = nGreetings == 0 ? rm.GetString(&quot;newGreeting&quot;) :\n                                          rm.GetString(&quot;greeting&quot;);\n      nGreetings++;\n      Console.WriteLine(&quot;{0}&quot;, greeting);   \n   }\n}\n// The example displays the following output:\n//       Привет!\n//       Еще раз привет!\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2\">Imports System.Globalization\nImports System.Reflection\nImports System.Resources\nImports System.Threading\n\n&lt;Assembly:NeutralResourcesLanguageAttribute(&quot;en-US&quot;)&gt;\n\nPublic Class Example\n   Private Shared nGreetings As Integer = 0\n   Private Shared rm As ResourceManager\n\n   Public Shared Sub Main()\n      Dim domain As AppDomain = AppDomain.CurrentDomain\n      rm = New ResourceManager(&quot;GreetingStrings&quot;, \n                               GetType(Example).Assembly)\n                  \n      Dim culture As CultureInfo = Nothing\n      If Thread.CurrentThread.CurrentUICulture.Name = &quot;ru-RU&quot; Then\n         culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Else\n         culture = CultureInfo.CreateSpecificCulture(&quot;ru-RU&quot;)\n      End If   \n      CultureInfo.DefaultThreadCurrentCulture = culture\n      CultureInfo.DefaultThreadCurrentUICulture = culture\n       \n      Thread.CurrentThread.CurrentCulture = culture\n      Thread.CurrentThread.CurrentUICulture = culture\n\n      ShowGreeting()\n      Thread.Sleep(1000)\n\n      Dim workerThread As New Thread(AddressOf Example.ShowGreeting)\n      workerThread.Start()\n   End Sub\n   \n   Private Shared Sub ShowGreeting()\n      Dim greeting As String = CStr(IIf(nGreetings = 0, \n                                        rm.GetString(&quot;newGreeting&quot;),\n                                        rm.GetString(&quot;greeting&quot;)))\n      nGreetings += 1\n      Console.WriteLine(&quot;{0}&quot;, greeting)   \n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       Привет!\n&#39;       Еще раз привет!\n</code></pre><p> As the output from the example shows, when the example is run on a computer whose system culture is English (United States), both the main thread and the worker thread display their strings in the Russian language.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_DisplayName\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_DisplayName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DisplayName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the full localized culture name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string DisplayName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The full localized culture name in the format <em>languagefull</em> [<em>country/regionfull</em>], where <em>languagefull</em> is the full name of the language and <em>country/regionfull</em> is the full name of the country/region.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property represents the localized name of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.  </p>\n<p> Culture names may vary due to scripting or formatting conventions. You should use the returned name for display, and not attempt to parse it.  </p>\n<p> If a custom culture is created by means of the <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> class, the DisplayName property is initialized to the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NativeName_\" data-linktype=\"relative-path\">NativeName</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays several properties of the neutral cultures.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example displays the zh-CHS and zh-CHT cultures with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;);\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.NeutralCultures))\n      {\n         Console.Write(&quot;{0,-7}&quot;, ci.Name);\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName);\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName);\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName);\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Displays several properties of the neutral cultures.\n   Console::WriteLine( &quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot; );\n   System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures( CultureTypes::NeutralCultures )-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;{0,-7}&quot;, ci-&gt;Name );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;TwoLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterWindowsLanguageName );\n      Console::Write( &quot; {0,-40}&quot;, ci-&gt;DisplayName );\n      Console::WriteLine( &quot; {0,-40}&quot;, ci-&gt;EnglishName );\n   }\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.GetCultures#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n   Public Sub Main()\n\n      &#39; Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;)\n      Dim ci As CultureInfo\n      For Each ci In CultureInfo.GetCultures(CultureTypes.NeutralCultures)\n         Console.Write(&quot;{0,-7}&quot;, ci.Name)\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName)\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName)\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName)\n      Next ci\n\n   End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.  This output has been cropped for brevity.\n&#39;\n&#39;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\n&#39;ar      ar  ara ARA Arabic                                   Arabic                                  \n&#39;bg      bg  bul BGR Bulgarian                                Bulgarian                               \n&#39;ca      ca  cat CAT Catalan                                  Catalan                                 \n&#39;zh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \n&#39;cs      cs  ces CSY Czech                                    Czech                                   \n&#39;da      da  dan DAN Danish                                   Danish                                  \n&#39;de      de  deu DEU German                                   German                                  \n&#39;el      el  ell ELL Greek                                    Greek                                   \n&#39;en      en  eng ENU English                                  English                                 \n&#39;es      es  spa ESP Spanish                                  Spanish                                 \n&#39;fi      fi  fin FIN Finnish                                  Finnish                                 \n&#39;zh      zh  zho CHS Chinese                                  Chinese                                 \n&#39;zh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \n&#39;zh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \n&#39;zh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_EnglishName\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_EnglishName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnglishName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the culture name in the format <em>languagefull</em> [<em>country/regionfull</em>] in English.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string EnglishName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The culture name in the format <em>languagefull</em> [<em>country/regionfull</em>] in English, where <em>languagefull</em> is the full name of the language and <em>country/regionfull</em> is the full name of the country/region.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, the EnglishName for the specific culture name en-US is &quot;English (United States)&quot;.  </p>\n<p> The value of this property is the same, regardless of the language version of the .NET Framework.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays several properties of the neutral cultures.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;);\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.NeutralCultures))\n      {\n         Console.Write(&quot;{0,-7}&quot;, ci.Name);\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName);\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName);\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName);\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Displays several properties of the neutral cultures.\n   Console::WriteLine( &quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot; );\n   System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures( CultureTypes::NeutralCultures )-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;{0,-7}&quot;, ci-&gt;Name );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;TwoLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterWindowsLanguageName );\n      Console::Write( &quot; {0,-40}&quot;, ci-&gt;DisplayName );\n      Console::WriteLine( &quot; {0,-40}&quot;, ci-&gt;EnglishName );\n   }\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.GetCultures#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n   Public Sub Main()\n\n      &#39; Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;)\n      Dim ci As CultureInfo\n      For Each ci In CultureInfo.GetCultures(CultureTypes.NeutralCultures)\n         Console.Write(&quot;{0,-7}&quot;, ci.Name)\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName)\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName)\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName)\n      Next ci\n\n   End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.  This output has been cropped for brevity.\n&#39;\n&#39;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\n&#39;ar      ar  ara ARA Arabic                                   Arabic                                  \n&#39;bg      bg  bul BGR Bulgarian                                Bulgarian                               \n&#39;ca      ca  cat CAT Catalan                                  Catalan                                 \n&#39;zh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \n&#39;cs      cs  ces CSY Czech                                    Czech                                   \n&#39;da      da  dan DAN Danish                                   Danish                                  \n&#39;de      de  deu DEU German                                   German                                  \n&#39;el      el  ell ELL Greek                                    Greek                                   \n&#39;en      en  eng ENU English                                  English                                 \n&#39;es      es  spa ESP Spanish                                  Spanish                                 \n&#39;fi      fi  fin FIN Finnish                                  Finnish                                 \n&#39;zh      zh  zho CHS Chinese                                  Chinese                                 \n&#39;zh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \n&#39;zh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \n&#39;zh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_IetfLanguageTag\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_IetfLanguageTag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IetfLanguageTag</div>        \r\n          </div>\r\n    \r\n            <p>Deprecated. Gets the RFC 4646 standard identification for a language.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string IetfLanguageTag { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that is the RFC 4646 standard identification for a language.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This property and the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag_\" data-linktype=\"relative-path\">GetCultureInfoByIetfLanguageTag</a> method are deprecated. Instead, you should use a the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property. IETF tags and names are identical.  </p>\n</div>\n<p> The RFC 4646 standard that is maintained by the Internet Engineering Task Force (IETF) defines an IETF language tag, which provides a uniform means of identifying a language. The format of an IETF language tag is similar to the culture name returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property, but does not identify a culture uniquely. That is, different cultures share the same IETF language tag if those cultures have identical linguistic characteristics. The linguistic characteristics of a culture are contained in the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object associated with a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.  </p>\n<p> An IETF language tag consists of a mandatory language identifier, an optional script identifier, and an optional region identifier.  </p>\n<p> For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=230876\" data-linktype=\"external\">RFC 5646, &quot;Tags for Identifying Languages</a>. For a list of subtags, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=230877\" data-linktype=\"external\">The IANA Language Subtag Registry</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_InstalledUICulture\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_InstalledUICulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InstalledUICulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that represents the culture installed with the operating system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo InstalledUICulture { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that represents the culture installed with the operating system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a localized operating system, such as Japanese Windows 2000 Professional, this property returns the culture of the operating system. This property is the equivalent of <code>GetSystemDefaultUILanguage</code> in the Windows API.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_InvariantCulture\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_InvariantCulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvariantCulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that is culture-independent (invariant).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo InvariantCulture { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>The object that is culture-independent (invariant).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The invariant culture is culture-insensitive; it is associated with the English language but not with any country/region. You specify the invariant culture by name by using an empty string (&quot;&quot;) in the call to a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> instantiation method. InvariantCulture also retrieves an instance of the invariant culture. It can be used in almost any method in the <a class=\"xref\" href=\"system.globalization\" data-linktype=\"relative-path\">System.Globalization</a> namespace that requires a culture. The objects returned by properties such as <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CompareInfo_\" data-linktype=\"relative-path\">CompareInfo</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>, and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> also reflect the string comparison and formatting conventions of the invariant culture.  </p>\n<p> Unlike culture-sensitive data, which is subject to change by user customization or by updates to the .NET Framework or the operating system, invariant culture data is stable over time and across installed cultures and cannot be customized by users. This makes the invariant culture particularly useful for operations that require culture-independent results, such as formatting and parsing operations that persist formatted data, or sorting and ordering operations that require that data be displayed in a fixed order regardless of culture.  </p>\n<h2 id=\"string-operations\">String Operations</h2>\n<p> You can use the invariant culture for culture-sensitive string operations that are not affected by the conventions of the current thread culture and that are consistent across cultures. For example, you may want sorted data to appear in a fixed order or apply a standard set of casing conventions to strings regardless of the current thread culture. To do this, you pass the InvariantCulture object to a method that has a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> parameter, such as <a class=\"xref\" href=\"system.string#System_String_Compare_System_String_System_String_System_Boolean_System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">Compare(String,String,Boolean,CultureInfo)</a> and <a class=\"xref\" href=\"system.string#System_String_ToUpper_System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">ToUpper(CultureInfo)</a>.  </p>\n<h2 id=\"persisting-data\">Persisting Data</h2>\n<p> The InvariantCulture property can be used to persist data in a culture-independent format. This provides a known format that does not change and that can be used to serialize and deserialize data across cultures. After the data is deserialized, it can be formatted appropriately based on the cultural conventions of the current user.  </p>\n<p> For example, if you choose to persist date and time data in string form, you can pass the InvariantCulture object to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.DateTime.ToString(String,IFormatProvider)</a> or <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.DateTimeOffset.ToString(IFormatProvider)</a> method to create the string, and you can pass the InvariantCulture object to the <a class=\"xref\" href=\"system.datetime#System_DateTime_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.DateTime.Parse(String,IFormatProvider)</a> or <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_Parse_System_String_System_IFormatProvider_System_Globalization_DateTimeStyles_\" data-linktype=\"relative-path\">System.DateTimeOffset.Parse(String,IFormatProvider,DateTimeStyles)</a> method to convert the string back to a date and time value. This technique ensures that the underlying date and time values do not change when the data is read or written by users from different cultures.  </p>\n<p> The following example uses the invariant culture to persist a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value as a string. It then parses the string and displays its value by using the formatting conventions of the French (France) and German (Germany) cultures.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.InvariantCulture#1\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      &#39; Persist the date and time data.\n      Dim sw As New StreamWriter(&quot;.\\DateData.dat&quot;)\n      \n      &#39; Create a DateTime value.      \n      Dim dtIn As DateTime = DateTime.Now\n      &#39; Retrieve a CultureInfo object.\n      Dim invC As CultureInfo = CultureInfo.InvariantCulture\n      \n      &#39; Convert the date to a string and write it to a file.\n      sw.WriteLine(dtIn.ToString(&quot;r&quot;, invC))\n      sw.Close()\n\n      &#39; Restore the date and time data.\n      Dim sr As New StreamReader(&quot;.\\DateData.dat&quot;)\n      Dim input As String = String.Empty\n      Do While sr.Peek() &gt;= 0 \n         input = sr.ReadLine()\n         Console.WriteLine(&quot;Stored data: {0}&quot; , input)    \n         Console.WriteLine()\n         \n         &#39; Parse the stored string.\n         Dim dtOut As DateTime = DateTime.Parse(input, invC, DateTimeStyles.RoundtripKind)\n\n         &#39; Create a French (France) CultureInfo object.\n         Dim frFr As New CultureInfo(&quot;fr-FR&quot;)\n         &#39; Displays the date formatted for the &quot;fr-FR&quot; culture.\n         Console.WriteLine(&quot;Date formatted for the {0} culture: {1}&quot; , \n                           frFr.Name, dtOut.ToString(&quot;f&quot;, frFr))\n\n         &#39; Creates a German (Germany) CultureInfo object.\n         Dim deDe As New CultureInfo(&quot;de-De&quot;)\n         &#39; Displays the date formatted for the &quot;de-DE&quot; culture.\n         Console.WriteLine(&quot;Date formatted for {0} culture: {1}&quot; , \n                           deDe.Name, dtOut.ToString(&quot;f&quot;, deDe))\n      Loop\n      sr.Close()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Stored data: Tue, 15 May 2012 16:34:16 GMT\n&#39;    \n&#39;    Date formatted for the fr-FR culture: mardi 15 mai 2012 16:34\n&#39;    Date formatted for de-DE culture: Dienstag, 15. Mai 2012 16:34\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.InvariantCulture#1\">using System;\nusing System.IO;\nusing System.Globalization;\n\npublic class Example \n{\n   public static void Main() \n   {\n      // Persist the date and time data.\n      StreamWriter sw = new StreamWriter(@&quot;.\\DateData.dat&quot;);\n      \n      // Create a DateTime value.      \n      DateTime dtIn = DateTime.Now;\n      // Retrieve a CultureInfo object.\n      CultureInfo invC = CultureInfo.InvariantCulture;\n      \n      // Convert the date to a string and write it to a file.\n      sw.WriteLine(dtIn.ToString(&quot;r&quot;, invC));\n      sw.Close();\n\n      // Restore the date and time data.\n      StreamReader sr = new StreamReader(@&quot;.\\DateData.dat&quot;);\n      String input;\n      while ((input = sr.ReadLine()) != null) \n      {\n         Console.WriteLine(&quot;Stored data: {0}\\n&quot; , input);    \n\n         // Parse the stored string.\n         DateTime dtOut = DateTime.Parse(input, invC, DateTimeStyles.RoundtripKind);\n\n         // Create a French (France) CultureInfo object.\n         CultureInfo frFr = new CultureInfo(&quot;fr-FR&quot;);\n         // Displays the date formatted for the &quot;fr-FR&quot; culture.\n         Console.WriteLine(&quot;Date formatted for the {0} culture: {1}&quot; , \n                           frFr.Name, dtOut.ToString(&quot;f&quot;, frFr));\n\n         // Creates a German (Germany) CultureInfo object.\n         CultureInfo deDe= new CultureInfo(&quot;de-De&quot;);\n         // Displays the date formatted for the &quot;de-DE&quot; culture.\n         Console.WriteLine(&quot;Date formatted for {0} culture: {1}&quot; , \n                           deDe.Name, dtOut.ToString(&quot;f&quot;, deDe));\n      }\n      sr.Close();\n   }\n}\n// The example displays the following output:\n//    Stored data: Tue, 15 May 2012 16:34:16 GMT\n//    \n//    Date formatted for the fr-FR culture: mardi 15 mai 2012 16:34\n//    Date formatted for de-DE culture: Dienstag, 15. Mai 2012 16:34\n</code></pre><h2 id=\"security-decisions\">Security Decisions</h2>\n<p> If you are making a security decision (such as whether to allow access to a system resource) based on the result of a string comparison or a case change, you should not use the invariant culture. Instead, you should perform a case-sensitive or case-insensitive ordinal comparison by calling a method that includes a <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">StringComparison</a> parameter and supplying either <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> or <a class=\"xref\" href=\"system.stringcomparison\" data-linktype=\"relative-path\">System.StringComparison</a> as an argument. Code that performs culture-sensitive string operations can cause security vulnerabilities if the current culture is changed or if the culture on the computer that is running the code differs from the culture that is used to test the code. In contrast, an ordinal comparison depends solely on the binary value of the compared characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_IsNeutralCulture\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_IsNeutralCulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNeutralCulture</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> represents a neutral culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsNeutralCulture { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> represents a neutral culture; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A neutral culture is a culture that is associated with a language but not with a country or region. It differs from a specific culture, which is a culture that is associated with both a language and a country or region. For example, fr is the name for the neutral French culture, while fr-FR is the name for the French culture in France.  </p>\n<p> If this property returns <code>false</code>, the culture is either a specific culture or the invariant culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines which cultures using the Chinese language are neutral cultures.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.IsNeutralCulture2#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Lists the cultures that use the Chinese language and determines if each is a neutral culture.\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.AllCultures))\n      {\n         if (ci.TwoLetterISOLanguageName == &quot;zh&quot;)\n         {\n            Console.Write(&quot;{0,-7} {1,-40}&quot;, ci.Name, ci.EnglishName);\n            if (ci.IsNeutralCulture)\n            {\n               Console.WriteLine(&quot;: neutral&quot;);\n                }\n            else\n            {\n               Console.WriteLine(&quot;: specific&quot;);\n            }\n         }\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nzh-Hans Chinese (Simplified)                    : neutral\nzh-TW   Chinese (Traditional, Taiwan)           : specific\nzh-CN   Chinese (Simplified, PRC)               : specific\nzh-HK   Chinese (Traditional, Hong Kong S.A.R.) : specific\nzh-SG   Chinese (Simplified, Singapore)         : specific\nzh-MO   Chinese (Traditional, Macao S.A.R.)     : specific\nzh      Chinese                                 : neutral\nzh-Hant Chinese (Traditional)                   : neutral\nzh-CHS  Chinese (Simplified) Legacy             : neutral\nzh-CHT  Chinese (Traditional) Legacy            : neutral\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.IsNeutralCulture2#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Lists the cultures that use the Chinese language and determines if each is a neutral culture.\n   System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures( CultureTypes::AllCultures )-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n      if ( ci-&gt;TwoLetterISOLanguageName-&gt;Equals( &quot;zh&quot; ) )\n      {\n         Console::Write( &quot;{0,-7} {1,-40}&quot;, ci-&gt;Name, ci-&gt;EnglishName );\n         if ( ci-&gt;IsNeutralCulture )\n         {\n            Console::WriteLine( &quot;: neutral&quot; );\n         }\n         else\n         {\n            Console::WriteLine( &quot;: specific&quot; );\n         }\n      }\n   }\n}\n\n/*\nThis code produces the following output.\n\nzh-Hans Chinese (Simplified)                    : neutral\nzh-TW   Chinese (Traditional, Taiwan)           : specific\nzh-CN   Chinese (Simplified, PRC)               : specific\nzh-HK   Chinese (Traditional, Hong Kong S.A.R.) : specific\nzh-SG   Chinese (Simplified, Singapore)         : specific\nzh-MO   Chinese (Traditional, Macao S.A.R.)     : specific\nzh      Chinese                                 : neutral\nzh-Hant Chinese (Traditional)                   : neutral\nzh-CHS  Chinese (Simplified) Legacy             : neutral\nzh-CHT  Chinese (Traditional) Legacy            : neutral\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.IsNeutralCulture2#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n   Public Sub Main()\n\n      &#39; Lists the cultures that use the Chinese language and determines if each is a neutral culture.\n      Dim ci As CultureInfo\n      For Each ci In CultureInfo.GetCultures(CultureTypes.AllCultures)\n         If ci.TwoLetterISOLanguageName = &quot;zh&quot; Then\n            Console.Write(&quot;{0,-7} {1,-40}&quot;, ci.Name, ci.EnglishName)\n            If ci.IsNeutralCulture Then\n               Console.WriteLine(&quot;: neutral&quot;)\n            Else\n               Console.WriteLine(&quot;: specific&quot;)\n            End If\n         End If\n      Next ci\n\n   End Sub &#39;Main \n\nEnd Module\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;zh-Hans Chinese (Simplified)                    : neutral\n&#39;zh-TW   Chinese (Traditional, Taiwan)           : specific\n&#39;zh-CN   Chinese (Simplified, PRC)               : specific\n&#39;zh-HK   Chinese (Traditional, Hong Kong S.A.R.) : specific\n&#39;zh-SG   Chinese (Simplified, Singapore)         : specific\n&#39;zh-MO   Chinese (Traditional, Macao S.A.R.)     : specific\n&#39;zh      Chinese                                 : neutral\n&#39;zh-Hant Chinese (Traditional)                   : neutral\n&#39;zh-CHS  Chinese (Simplified) Legacy             : neutral\n&#39;zh-CHT  Chinese (Traditional) Legacy            : neutral\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_IsReadOnly\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is read-only; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is read-only, the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> instances are also read-only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that IsReadOnly also helps protect the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instances associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.ReadOnly#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCultureInfo\n\n   Public Shared Sub Main()\n      \n      &#39; Creates a CultureInfo.\n      Dim myCI As New CultureInfo(&quot;en-US&quot;)\n      \n      &#39; Creates a read-only CultureInfo based on myCI.\n      Dim myReadOnlyCI As CultureInfo = CultureInfo.ReadOnly(myCI)\n      \n      &#39; Display the read-only status of each CultureInfo and their DateTimeFormat and NumberFormat properties.\n      If myCI.IsReadOnly Then \n         Console.WriteLine(&quot;myCI is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myCI is writable.&quot;)\n      End If\n\n      If myCI.DateTimeFormat.IsReadOnly Then \n         Console.WriteLine(&quot;myCI.DateTimeFormat is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myCI.DateTimeFormat is writable.&quot;)\n      End If\n\n      If myCI.NumberFormat.IsReadOnly Then \n         Console.WriteLine(&quot;myCI.NumberFormat is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myCI.NumberFormat is writable.&quot;)\n      End If\n\n      If myReadOnlyCI.IsReadOnly Then \n         Console.WriteLine(&quot;myReadOnlyCI is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myReadOnlyCI is writable.&quot;)\n      End If\n\n      If myReadOnlyCI.DateTimeFormat.IsReadOnly Then \n         Console.WriteLine(&quot;myReadOnlyCI.DateTimeFormat is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myReadOnlyCI.DateTimeFormat is writable.&quot;)\n      End If\n\n      If myReadOnlyCI.NumberFormat.IsReadOnly Then \n         Console.WriteLine(&quot;myReadOnlyCI.NumberFormat is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myReadOnlyCI.NumberFormat is writable.&quot;)\n      End If\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCultureInfo\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; myCI is writable.\n&#39; myCI.DateTimeFormat is writable.\n&#39; myCI.NumberFormat is writable.\n&#39; myReadOnlyCI is read only.\n&#39; myReadOnlyCI.DateTimeFormat is read only.\n&#39; myReadOnlyCI.NumberFormat is read only.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.ReadOnly#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCultureInfo  {\n\n   public static void Main()  {\n\n      // Creates a CultureInfo.\n      CultureInfo myCI = new CultureInfo( &quot;en-US&quot; );\n\n      // Creates a read-only CultureInfo based on myCI.\n      CultureInfo myReadOnlyCI = CultureInfo.ReadOnly( myCI );\n\n      // Display the read-only status of each CultureInfo and their DateTimeFormat and NumberFormat properties.\n      Console.WriteLine( &quot;myCI is {0}.&quot;, myCI.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myCI.DateTimeFormat is {0}.&quot;, myCI.DateTimeFormat.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myCI.NumberFormat is {0}.&quot;, myCI.NumberFormat.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myReadOnlyCI is {0}.&quot;, myReadOnlyCI.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myReadOnlyCI.DateTimeFormat is {0}.&quot;, myReadOnlyCI.DateTimeFormat.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myReadOnlyCI.NumberFormat is {0}.&quot;, myReadOnlyCI.NumberFormat.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nmyCI is writable.\nmyCI.DateTimeFormat is writable.\nmyCI.NumberFormat is writable.\nmyReadOnlyCI is read only.\nmyReadOnlyCI.DateTimeFormat is read only.\nmyReadOnlyCI.NumberFormat is read only.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.ReadOnly#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates a CultureInfo.\n   CultureInfo^ myCI = gcnew CultureInfo( &quot;en-US&quot; );\n   \n   // Creates a read-only CultureInfo based on myCI -&gt; \n   CultureInfo^ myReadOnlyCI = CultureInfo::ReadOnly( myCI );\n   \n   // Display the read-only status of each CultureInfo and their DateTimeFormat and NumberFormat properties.\n   Console::WriteLine( &quot;myCI is {0}.&quot;, myCI-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myCI -&gt; DateTimeFormat is {0}.&quot;, myCI-&gt;DateTimeFormat-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myCI -&gt; NumberFormat is {0}.&quot;, myCI-&gt;NumberFormat-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myReadOnlyCI is {0}.&quot;, myReadOnlyCI-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myReadOnlyCI -&gt; DateTimeFormat is {0}.&quot;, myReadOnlyCI-&gt;DateTimeFormat-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myReadOnlyCI -&gt; NumberFormat is {0}.&quot;, myReadOnlyCI-&gt;NumberFormat-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n}\n\n/*\nThis code produces the following output.\n\nmyCI is writable.\nmyCI -&gt; DateTimeFormat is writable.\nmyCI -&gt; NumberFormat is writable.\nmyReadOnlyCI is read only.\nmyReadOnlyCI -&gt; DateTimeFormat is read only.\nmyReadOnlyCI -&gt; NumberFormat is read only.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_KeyboardLayoutId\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_KeyboardLayoutId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyboardLayoutId</div>        \r\n          </div>\r\n    \r\n            <p>Gets the active input locale identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int KeyboardLayoutId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed number that specifies an input locale identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The input locale identifier was formerly called the keyboard layout. An input locale identifier is a broader concept than a keyboard layout since it can also indicate a speech-to-text converter, an Input Method Editor (IME), or any other form of input.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_LCID\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_LCID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LCID</div>        \r\n          </div>\r\n    \r\n            <p>Gets the culture identifier for the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LCID { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The culture identifier for the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In most cases, the culture identifier is mapped to the corresponding NLS locale identifier.  </p>\n<p> In versions of Windows prior to Windows 10, the locale identifier <code>LOCALE_CUSTOM_UNSPECIFIED</code> (0x1000, or 4096) is assigned to custom cultures created by the user. Starting with Windows 10, it is assigned to any culture that does not have a unique locale identifier and does not have complete system-provided data. As a result, code that iterates cultures and retrieves those with an LCID value of <code>LOCALE_CUSTOM_UNSPECIFIED</code> returns a larger subset of <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects if run under Windows 10.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for Spanish (Spain) with the international sort order and another <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> with the traditional sort order.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo_esES#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes the CultureInfo which uses the international sort.\n   CultureInfo^ myCIintl = gcnew CultureInfo( &quot;es-ES&quot;,false );\n   \n   // Creates and initializes the CultureInfo which uses the traditional sort.\n   CultureInfo^ myCItrad = gcnew CultureInfo( 0x040A,false );\n   \n   // Displays the properties of each culture.\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot; );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl-&gt;CompareInfo, myCItrad-&gt;CompareInfo );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl-&gt;DisplayName, myCItrad-&gt;DisplayName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl-&gt;EnglishName, myCItrad-&gt;EnglishName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl-&gt;IsNeutralCulture, myCItrad-&gt;IsNeutralCulture );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl-&gt;IsReadOnly, myCItrad-&gt;IsReadOnly );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl-&gt;LCID, myCItrad-&gt;LCID );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl-&gt;Name, myCItrad-&gt;Name );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl-&gt;NativeName, myCItrad-&gt;NativeName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl-&gt;Parent, myCItrad-&gt;Parent );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl-&gt;TextInfo, myCItrad-&gt;TextInfo );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl-&gt;ThreeLetterISOLanguageName, myCItrad-&gt;ThreeLetterISOLanguageName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl-&gt;ThreeLetterWindowsLanguageName, myCItrad-&gt;ThreeLetterWindowsLanguageName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl-&gt;TwoLetterISOLanguageName, myCItrad-&gt;TwoLetterISOLanguageName );\n   Console::WriteLine();\n   \n   // Compare two strings using myCIintl -&gt; \n   Console::WriteLine( &quot;Comparing \\&quot;llegar\\&quot; and \\&quot;lugar\\&quot;&quot; );\n   Console::WriteLine( &quot;   With myCIintl -&gt; CompareInfo -&gt; Compare: {0}&quot;, myCIintl-&gt;CompareInfo-&gt;Compare( &quot;llegar&quot;, &quot;lugar&quot; ) );\n   Console::WriteLine( &quot;   With myCItrad -&gt; CompareInfo -&gt; Compare: {0}&quot;, myCItrad-&gt;CompareInfo-&gt;Compare( &quot;llegar&quot;, &quot;lugar&quot; ) );\n}\n\n/*\nThis code produces the following output.\n\nPROPERTY                       INTERNATIONAL                                  TRADITIONAL              \nCompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\nDisplayName                    Spanish (Spain)                                Spanish (Spain)          \nEnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\nIsNeutralCulture               False                                          False                    \nIsReadOnly                     False                                          False                    \nLCID                           3082                                           1034                     \nName                           es-ES                                          es-ES                    \nNativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\nParent                         es                                             es                       \nTextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \nThreeLetterISOLanguageName     spa                                            spa                      \nThreeLetterWindowsLanguageName ESN                                            ESP                      \nTwoLetterISOLanguageName       es                                             es                       \n\nComparing &quot;llegar&quot; and &quot;lugar&quot;\n   With myCIintl -&gt; CompareInfo -&gt; Compare: -1\n   With myCItrad -&gt; CompareInfo -&gt; Compare: 1\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo_esES#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Creates and initializes the CultureInfo which uses the international sort.\n      CultureInfo myCIintl = new CultureInfo(&quot;es-ES&quot;, false);\n\n      // Creates and initializes the CultureInfo which uses the traditional sort.\n      CultureInfo myCItrad = new CultureInfo(0x040A, false);\n\n      // Displays the properties of each culture.\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot;);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl.CompareInfo, myCItrad.CompareInfo);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl.DisplayName, myCItrad.DisplayName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl.EnglishName, myCItrad.EnglishName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl.IsNeutralCulture, myCItrad.IsNeutralCulture);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl.IsReadOnly, myCItrad.IsReadOnly);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl.LCID, myCItrad.LCID);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl.Name, myCItrad.Name);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl.NativeName, myCItrad.NativeName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl.Parent, myCItrad.Parent);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl.TextInfo, myCItrad.TextInfo);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl.ThreeLetterISOLanguageName, myCItrad.ThreeLetterISOLanguageName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl.ThreeLetterWindowsLanguageName, myCItrad.ThreeLetterWindowsLanguageName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl.TwoLetterISOLanguageName, myCItrad.TwoLetterISOLanguageName);\n      Console.WriteLine();\n\n      // Compare two strings using myCIintl.\n      Console.WriteLine(&quot;Comparing \\&quot;llegar\\&quot; and \\&quot;lugar\\&quot;&quot;);\n      Console.WriteLine(&quot;   With myCIintl.CompareInfo.Compare: {0}&quot;, myCIintl.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;));\n      Console.WriteLine(&quot;   With myCItrad.CompareInfo.Compare: {0}&quot;, myCItrad.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;));\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nPROPERTY                       INTERNATIONAL                                  TRADITIONAL              \nCompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\nDisplayName                    Spanish (Spain)                                Spanish (Spain)          \nEnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\nIsNeutralCulture               False                                          False                    \nIsReadOnly                     False                                          False                    \nLCID                           3082                                           1034                     \nName                           es-ES                                          es-ES                    \nNativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\nParent                         es                                             es                       \nTextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \nThreeLetterISOLanguageName     spa                                            spa                      \nThreeLetterWindowsLanguageName ESN                                            ESP                      \nTwoLetterISOLanguageName       es                                             es                       \n\nComparing &quot;llegar&quot; and &quot;lugar&quot;\n   With myCIintl.CompareInfo.Compare: -1\n   With myCItrad.CompareInfo.Compare: 1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo_esES#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nModule Module1\n\n    Public Sub Main()\n\n        &#39; Creates and initializes the CultureInfo which uses the international sort.\n        Dim myCIintl As New CultureInfo(&quot;es-ES&quot;, False)\n\n        &#39; Creates and initializes the CultureInfo which uses the traditional sort.\n        Dim myCItrad As New CultureInfo(&amp;H40A, False)\n\n        &#39; Displays the properties of each culture.\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot;)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl.CompareInfo, myCItrad.CompareInfo)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl.DisplayName, myCItrad.DisplayName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl.EnglishName, myCItrad.EnglishName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl.IsNeutralCulture, myCItrad.IsNeutralCulture)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl.IsReadOnly, myCItrad.IsReadOnly)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl.LCID, myCItrad.LCID)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl.Name, myCItrad.Name)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl.NativeName, myCItrad.NativeName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl.Parent, myCItrad.Parent)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl.TextInfo, myCItrad.TextInfo)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl.ThreeLetterISOLanguageName, myCItrad.ThreeLetterISOLanguageName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl.ThreeLetterWindowsLanguageName, myCItrad.ThreeLetterWindowsLanguageName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl.TwoLetterISOLanguageName, myCItrad.TwoLetterISOLanguageName)\n        Console.WriteLine()\n\n        &#39; Compare two strings using myCIintl.\n        Console.WriteLine(&quot;Comparing &quot;&quot;llegar&quot;&quot; and &quot;&quot;lugar&quot;&quot;&quot;)\n        Console.WriteLine(&quot;   With myCIintl.CompareInfo.Compare: {0}&quot;, myCIintl.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;))\n        Console.WriteLine(&quot;   With myCItrad.CompareInfo.Compare: {0}&quot;, myCItrad.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;))\n\n    End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;PROPERTY                       INTERNATIONAL                                  TRADITIONAL              \n&#39;CompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\n&#39;DisplayName                    Spanish (Spain)                                Spanish (Spain)          \n&#39;EnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\n&#39;IsNeutralCulture               False                                          False                    \n&#39;IsReadOnly                     False                                          False                    \n&#39;LCID                           3082                                           1034                     \n&#39;Name                           es-ES                                          es-ES                    \n&#39;NativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\n&#39;Parent                         es                                             es                       \n&#39;TextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \n&#39;ThreeLetterISOLanguageName     spa                                            spa                      \n&#39;ThreeLetterWindowsLanguageName ESN                                            ESP                      \n&#39;TwoLetterISOLanguageName       es                                             es                       \n&#39;\n&#39;Comparing &quot;llegar&quot; and &quot;lugar&quot;\n&#39;   With myCIintl.CompareInfo.Compare: -1\n&#39;   With myCItrad.CompareInfo.Compare: 1\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_Name\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the culture name in the format <em>languagecode2</em>-<em>country/regioncode2</em>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The culture name in the format <em>languagecode2</em>-<em>country/regioncode2</em>. <em>languagecode2</em> is a lowercase two-letter code derived from ISO 639-1. <em>country/regioncode2</em> is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of predefined culture names and identifiers that the Name property can return, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center. In addition, starting with Windows 10, <code>name</code> can be any valid BCP-47 language tag. Note that culture names are subject to change, and that they also can reflect the names of custom cultures.  </p>\n<p> The Name property follows the naming standards provided in the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class topic. It returns the short form of the culture name that excludes any indication of an alternate sort order. For example, if you instantiate a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object by using the string &quot;de-DE_phoneb&quot; to reflect an alternate sort order, the Name property returns &quot;de-DE&quot;.  </p>\n<p> To get the full name of the culture, you should use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DisplayName_\" data-linktype=\"relative-path\">DisplayName</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_EnglishName_\" data-linktype=\"relative-path\">EnglishName</a>, or <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NativeName_\" data-linktype=\"relative-path\">NativeName</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays several properties of the neutral cultures.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;);\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.NeutralCultures))\n      {\n         Console.Write(&quot;{0,-7}&quot;, ci.Name);\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName);\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName);\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName);\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Displays several properties of the neutral cultures.\n   Console::WriteLine( &quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot; );\n   System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures( CultureTypes::NeutralCultures )-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;{0,-7}&quot;, ci-&gt;Name );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;TwoLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterWindowsLanguageName );\n      Console::Write( &quot; {0,-40}&quot;, ci-&gt;DisplayName );\n      Console::WriteLine( &quot; {0,-40}&quot;, ci-&gt;EnglishName );\n   }\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.GetCultures#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n   Public Sub Main()\n\n      &#39; Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;)\n      Dim ci As CultureInfo\n      For Each ci In CultureInfo.GetCultures(CultureTypes.NeutralCultures)\n         Console.Write(&quot;{0,-7}&quot;, ci.Name)\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName)\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName)\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName)\n      Next ci\n\n   End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.  This output has been cropped for brevity.\n&#39;\n&#39;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\n&#39;ar      ar  ara ARA Arabic                                   Arabic                                  \n&#39;bg      bg  bul BGR Bulgarian                                Bulgarian                               \n&#39;ca      ca  cat CAT Catalan                                  Catalan                                 \n&#39;zh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \n&#39;cs      cs  ces CSY Czech                                    Czech                                   \n&#39;da      da  dan DAN Danish                                   Danish                                  \n&#39;de      de  deu DEU German                                   German                                  \n&#39;el      el  ell ELL Greek                                    Greek                                   \n&#39;en      en  eng ENU English                                  English                                 \n&#39;es      es  spa ESP Spanish                                  Spanish                                 \n&#39;fi      fi  fin FIN Finnish                                  Finnish                                 \n&#39;zh      zh  zho CHS Chinese                                  Chinese                                 \n&#39;zh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \n&#39;zh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \n&#39;zh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_NativeName\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_NativeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NativeName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the culture name, consisting of the language, the country/region, and the optional script, that the culture is set to display.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string NativeName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The culture name. consisting of the full name of the language, the full name of the country/region, and the optional script. The format is discussed in the description of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this property is the same, regardless of the language version of the .NET Framework.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_NumberFormat\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_NumberFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NumberFormat</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> that defines the culturally appropriate format of displaying numbers, currency, and percentage.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> that defines the culturally appropriate format of displaying numbers, currency, and percentage.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is set to null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The NumberFormat property or any of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> properties is set, and the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"overrides\">Overrides</h2>\n<p> The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  </p>\n<p> If <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> is <code>true</code> and the specified culture matches the current culture of Windows, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the NumberFormat property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.  </p>\n<p> The values of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property and the NumberFormat property are not calculated until the user accesses the property. If the user uses the Control Panel to change the current culture to a new culture while the application is running and then accesses the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> or NumberFormat property, the application retrieves the defaults for the new culture. not the overrides for the original culture. To preserve the overrides for the original current culture, the application should access the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> and NumberFormat properties before changing the current culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that CultureInfo.Clone also clones the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instances associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.Clone#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a CultureInfo.\n   CultureInfo^ myCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   \n   // Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n   CultureInfo^ myCIclone = dynamic_cast&lt;CultureInfo^&gt;(myCI-&gt;Clone());\n   myCIclone-&gt;DateTimeFormat-&gt;AMDesignator = &quot;a.m.&quot;;\n   myCIclone-&gt;DateTimeFormat-&gt;DateSeparator = &quot;-&quot;;\n   myCIclone-&gt;NumberFormat-&gt;CurrencySymbol = &quot;USD&quot;;\n   myCIclone-&gt;NumberFormat-&gt;NumberDecimalDigits = 4;\n   \n   // Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n   Console::WriteLine( &quot;DTFI/NFI PROPERTY&nbsp;&nbsp;&nbsp;&nbsp;ORIGINAL&nbsp;&nbsp;&nbsp;&nbsp;MODIFIED CLONE&quot; );\n   Console::WriteLine( &quot;DTFI.AMDesignator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;DateTimeFormat-&gt;AMDesignator, myCIclone-&gt;DateTimeFormat-&gt;AMDesignator );\n   Console::WriteLine( &quot;DTFI.DateSeparator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;DateTimeFormat-&gt;DateSeparator, myCIclone-&gt;DateTimeFormat-&gt;DateSeparator );\n   Console::WriteLine( &quot;NFI.CurrencySymbol&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;NumberFormat-&gt;CurrencySymbol, myCIclone-&gt;NumberFormat-&gt;CurrencySymbol );\n   Console::WriteLine( &quot;NFI.NumberDecimalDigits&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;NumberFormat-&gt;NumberDecimalDigits, myCIclone-&gt;NumberFormat-&gt;NumberDecimalDigits );\n}\n\n/*\nThis code produces the following output.\n\nDTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\nDTFI.AMDesignator       AM              a.m.\nDTFI.DateSeparator      /               -\nNFI.CurrencySymbol      $               USD\nNFI.NumberDecimalDigits 2               4\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Clone#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCultureInfo\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a CultureInfo.\n      Dim myCI As New CultureInfo(&quot;en-US&quot;, False)\n      \n      &#39; Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n      Dim myCIclone As CultureInfo = CType(myCI.Clone(), CultureInfo)\n      myCIclone.DateTimeFormat.AMDesignator = &quot;a.m.&quot;\n      myCIclone.DateTimeFormat.DateSeparator = &quot;-&quot;\n      myCIclone.NumberFormat.CurrencySymbol = &quot;USD&quot;\n      myCIclone.NumberFormat.NumberDecimalDigits = 4\n      \n      &#39; Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n      Console.WriteLine(&quot;DTFI/NFI PROPERTY&quot; + ControlChars.Tab + &quot;ORIGINAL&quot; + ControlChars.Tab + &quot;MODIFIED CLONE&quot;)\n      Console.WriteLine(&quot;DTFI.AMDesignator&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.DateTimeFormat.AMDesignator, myCIclone.DateTimeFormat.AMDesignator)\n      Console.WriteLine(&quot;DTFI.DateSeparator&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.DateTimeFormat.DateSeparator, myCIclone.DateTimeFormat.DateSeparator)\n      Console.WriteLine(&quot;NFI.CurrencySymbol&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.NumberFormat.CurrencySymbol, myCIclone.NumberFormat.CurrencySymbol)\n      Console.WriteLine(&quot;NFI.NumberDecimalDigits&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.NumberFormat.NumberDecimalDigits, myCIclone.NumberFormat.NumberDecimalDigits)\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCultureInfo\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; DTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\n&#39; DTFI.AMDesignator       AM              a.m.\n&#39; DTFI.DateSeparator      /               -\n&#39; NFI.CurrencySymbol      $               USD\n&#39; NFI.NumberDecimalDigits 2               4\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Clone#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCultureInfo  {\n\n   public static void Main()  {\n\n      // Creates and initializes a CultureInfo.\n      CultureInfo myCI = new CultureInfo(&quot;en-US&quot;, false);\n\n      // Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n      CultureInfo myCIclone = (CultureInfo) myCI.Clone();\n      myCIclone.DateTimeFormat.AMDesignator = &quot;a.m.&quot;;\n      myCIclone.DateTimeFormat.DateSeparator = &quot;-&quot;;\n      myCIclone.NumberFormat.CurrencySymbol = &quot;USD&quot;;\n      myCIclone.NumberFormat.NumberDecimalDigits = 4;\n\n      // Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n      Console.WriteLine( &quot;DTFI/NFI PROPERTY&nbsp;&nbsp;&nbsp;&nbsp;ORIGINAL&nbsp;&nbsp;&nbsp;&nbsp;MODIFIED CLONE&quot; );\n      Console.WriteLine( &quot;DTFI.AMDesignator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.DateTimeFormat.AMDesignator, myCIclone.DateTimeFormat.AMDesignator );\n      Console.WriteLine( &quot;DTFI.DateSeparator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.DateTimeFormat.DateSeparator, myCIclone.DateTimeFormat.DateSeparator );\n      Console.WriteLine( &quot;NFI.CurrencySymbol&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.NumberFormat.CurrencySymbol, myCIclone.NumberFormat.CurrencySymbol );\n      Console.WriteLine( &quot;NFI.NumberDecimalDigits&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.NumberFormat.NumberDecimalDigits, myCIclone.NumberFormat.NumberDecimalDigits );\n      \n   }\n\n}\n\n/*\nThis code produces the following output.\n\nDTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\nDTFI.AMDesignator       AM              a.m.\nDTFI.DateSeparator      /               -\nNFI.CurrencySymbol      $               USD\nNFI.NumberDecimalDigits 2               4\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_OptionalCalendars\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_OptionalCalendars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OptionalCalendars</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of calendars that can be used by the culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.Calendar[] OptionalCalendars { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> that represents the calendars that can be used by the culture represented by the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Your application changes the calendar used by the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> by setting the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>, which is an instance of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> class. The new calendar must be one of the calendars listed in OptionalCalendars. <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> also includes other properties that customize the date and time formatting associated with that <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to determine the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> versions supported by the culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendarTypes#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCultureInfo\n\n   Public Shared Sub Main()\n\n      &#39; Gets the calendars supported by the ar-SA culture.\n      Dim myOptCals As Calendar() = New CultureInfo(&quot;ar-SA&quot;).OptionalCalendars\n\n      &#39; Checks which ones are GregorianCalendar then determines the GregorianCalendar version.\n      Console.WriteLine(&quot;The ar-SA culture supports the following calendars:&quot;)\n      Dim cal As Calendar\n      For Each cal In  myOptCals\n         If cal.GetType() Is GetType(GregorianCalendar)  Then\n            Dim myGreCal As GregorianCalendar = CType(cal, GregorianCalendar)\n            Dim calType As GregorianCalendarTypes = myGreCal.CalendarType\n            Console.WriteLine(&quot;   {0} ({1})&quot;, cal, calType)\n         Else\n            Console.WriteLine(&quot;   {0}&quot;, cal)\n         End If\n      Next cal\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCultureInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The ar-SA culture supports the following calendars:\n&#39;   System.Globalization.HijriCalendar\n&#39;   System.Globalization.GregorianCalendar (USEnglish)\n&#39;   System.Globalization.GregorianCalendar (MiddleEastFrench)\n&#39;   System.Globalization.GregorianCalendar (Arabic)\n&#39;   System.Globalization.GregorianCalendar (Localized)\n&#39;   System.Globalization.GregorianCalendar (TransliteratedFrench)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendarTypes#1\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Calendar* myOptCals[] = new CultureInfo(S&quot;ar-SA&quot;) -&gt; OptionalCalendars;\n   CultureInfo^ MyCI = gcnew CultureInfo( &quot;ar-SA&quot; );\n   array&lt;Calendar^&gt;^myOptCals = MyCI-&gt;OptionalCalendars;\n   \n   // Checks which ones are GregorianCalendar then determines the GregorianCalendar version.\n   Console::WriteLine( &quot;The ar-SA culture supports the following calendars:&quot; );\n   IEnumerator^ myEnum = myOptCals-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Calendar^ cal = safe_cast&lt;Calendar^&gt;(myEnum-&gt;Current);\n      if ( cal-&gt;GetType() == GregorianCalendar::typeid )\n      {\n         GregorianCalendar^ myGreCal = dynamic_cast&lt;GregorianCalendar^&gt;(cal);\n         GregorianCalendarTypes calType = myGreCal-&gt;CalendarType;\n         Console::WriteLine( &quot; {0} ( {1})&quot;, cal, calType );\n      }\n      else\n            Console::WriteLine( &quot; {0}&quot;, cal );\n   }\n}\n\n/*\nThis code produces the following output.\n\nThe ar-SA culture supports the following calendars:\n System.Globalization.HijriCalendar\n System.Globalization.GregorianCalendar ( USEnglish)\n System.Globalization.GregorianCalendar ( MiddleEastFrench)\n System.Globalization.GregorianCalendar ( Arabic)\n System.Globalization.GregorianCalendar ( Localized)\n System.Globalization.GregorianCalendar ( TransliteratedFrench)\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendarTypes#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCultureInfo  {\n\n   public static void Main()  {\n\n      // Gets the calendars supported by the ar-SA culture.\n      Calendar[] myOptCals = new CultureInfo(&quot;ar-SA&quot;).OptionalCalendars;\n\n      // Checks which ones are GregorianCalendar then determines the GregorianCalendar version.\n      Console.WriteLine( &quot;The ar-SA culture supports the following calendars:&quot; );\n      foreach ( Calendar cal in myOptCals )  {\n         if ( cal.GetType() == typeof( GregorianCalendar ) )  {\n            GregorianCalendar myGreCal = (GregorianCalendar) cal;\n            GregorianCalendarTypes calType = myGreCal.CalendarType;\n            Console.WriteLine( &quot;   {0} ({1})&quot;, cal, calType );\n         }\n         else  {\n            Console.WriteLine( &quot;   {0}&quot;, cal );\n         }\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nThe ar-SA culture supports the following calendars:\n   System.Globalization.HijriCalendar\n   System.Globalization.GregorianCalendar (USEnglish)\n   System.Globalization.GregorianCalendar (MiddleEastFrench)\n   System.Globalization.GregorianCalendar (Arabic)\n   System.Globalization.GregorianCalendar (Localized)\n   System.Globalization.GregorianCalendar (TransliteratedFrench)\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_Parent\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_Parent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parent</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that represents the parent culture of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.CultureInfo Parent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that represents the parent culture of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The cultures have a hierarchy in which the parent of a specific culture is a neutral culture, the parent of a neutral culture is the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>, and the parent of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> is the invariant culture itself. The parent culture encompasses only the set of information that is common among its children.  </p>\n<p> If the resources for the specific culture are not available in the system, the resources for the neutral culture are used. If the resources for the neutral culture are not available, the resources embedded in the main assembly are used. For more information on the resource fallback process, see <a href=\"../Topic/Packaging%20and%20Deploying%20Resources%20in%20Desktop%20Apps.md\" data-linktype=\"relative-path\">Packaging and Deploying Resources</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example determines the parent culture of each specific culture using the Chinese language.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.Parent#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Prints the header.\n   Console::WriteLine( &quot;SPECIFIC CULTURE                                     PARENT CULTURE&quot; );\n   \n   // Determines the specific cultures that use the Chinese language, \n   // and displays the parent culture.\n   System::Collections::IEnumerator^ en = CultureInfo::GetCultures( CultureTypes::SpecificCultures )-&gt;GetEnumerator();\n   while ( en-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(en-&gt;Current);\n      if ( ci-&gt;TwoLetterISOLanguageName-&gt;Equals( &quot;zh&quot; ) )\n      {\n         Console::Write( &quot;0x{0} {1} {2,-40}&quot;, ci-&gt;LCID.ToString(  &quot;X4&quot; ), ci-&gt;Name, ci-&gt;EnglishName );\n         Console::WriteLine( &quot;0x{0} {1} {2}&quot;, ci-&gt;Parent-&gt;LCID.ToString( &quot;X4&quot; ), ci-&gt;Parent-&gt;Name, ci-&gt;Parent-&gt;EnglishName );\n      }\n   }\n}\n\n/*\nThis code produces the following output.\n\nSPECIFIC CULTURE                                     PARENT CULTURE\n0x0404 zh-TW Chinese (Traditional, Taiwan)           0x7C04 zh-CHT Chinese (Traditional) Legacy\n0x0804 zh-CN Chinese (Simplified, PRC)               0x0004 zh-CHS Chinese (Simplified) Legacy\n0x0C04 zh-HK Chinese (Traditional, Hong Kong S.A.R.) 0x7C04 zh-CHT Chinese (Traditional) Legacy\n0x1004 zh-SG Chinese (Simplified, Singapore)         0x0004 zh-CHS Chinese (Simplified) Legacy\n0x1404 zh-MO Chinese (Traditional, Macao S.A.R.)     0x7C04 zh-CHT Chinese (Traditional) Legacy\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Parent#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Prints the header.\n      Console.WriteLine(&quot;SPECIFIC CULTURE                                     PARENT CULTURE&quot;);\n\n      // Determines the specific cultures that use the Chinese language, and displays the parent culture.\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.SpecificCultures))\n      {\n         if (ci.TwoLetterISOLanguageName == &quot;zh&quot;)\n         {\n            Console.Write(&quot;0x{0} {1} {2,-40}&quot;, ci.LCID.ToString(&quot;X4&quot;), ci.Name, ci.EnglishName);\n            Console.WriteLine(&quot;0x{0} {1} {2}&quot;, ci.Parent.LCID.ToString(&quot;X4&quot;), ci.Parent.Name, ci.Parent.EnglishName);\n         }\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nSPECIFIC CULTURE                                     PARENT CULTURE\n0x0404 zh-TW Chinese (Traditional, Taiwan)           0x7C04 zh-CHT Chinese (Traditional) Legacy\n0x0804 zh-CN Chinese (Simplified, PRC)               0x0004 zh-CHS Chinese (Simplified) Legacy\n0x0C04 zh-HK Chinese (Traditional, Hong Kong S.A.R.) 0x7C04 zh-CHT Chinese (Traditional) Legacy\n0x1004 zh-SG Chinese (Simplified, Singapore)         0x0004 zh-CHS Chinese (Simplified) Legacy\n0x1404 zh-MO Chinese (Traditional, Macao S.A.R.)     0x7C04 zh-CHT Chinese (Traditional) Legacy\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Parent#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n    Public Sub Main()\n\n      &#39; Prints the header.\n        Console.WriteLine(&quot;SPECIFIC CULTURE                                     PARENT CULTURE&quot;)\n\n        &#39; Determines the specific cultures that use the Chinese language, and displays the parent culture.\n        Dim ci As CultureInfo\n        For Each ci In CultureInfo.GetCultures(CultureTypes.SpecificCultures)\n            If ci.TwoLetterISOLanguageName = &quot;zh&quot; Then\n                Console.Write(&quot;0x{0} {1} {2,-40}&quot;, ci.LCID.ToString(&quot;X4&quot;), ci.Name, ci.EnglishName)\n                Console.WriteLine(&quot;0x{0} {1} {2}&quot;, ci.Parent.LCID.ToString(&quot;X4&quot;), ci.Parent.Name, ci.Parent.EnglishName)\n            End If\n        Next ci\n\n    End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;SPECIFIC CULTURE                                     PARENT CULTURE\n&#39;0x0404 zh-TW Chinese (Traditional, Taiwan)           0x7C04 zh-CHT Chinese (Traditional) Legacy\n&#39;0x0804 zh-CN Chinese (Simplified, PRC)               0x0004 zh-CHS Chinese (Simplified) Legacy\n&#39;0x0C04 zh-HK Chinese (Traditional, Hong Kong S.A.R.) 0x7C04 zh-CHT Chinese (Traditional) Legacy\n&#39;0x1004 zh-SG Chinese (Simplified, Singapore)         0x0004 zh-CHS Chinese (Simplified) Legacy\n&#39;0x1404 zh-MO Chinese (Traditional, Macao S.A.R.)     0x7C04 zh-CHT Chinese (Traditional) Legacy\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_TextInfo\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_TextInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> that defines the writing system associated with the culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.TextInfo TextInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> that defines the writing system associated with the culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TextInfo property provides culture-specific casing information for strings. To perform culture-insensitive casing, the application should use the TextInfo property of <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for Spanish (Spain) with the international sort order and another <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> with the traditional sort order.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo_esES#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes the CultureInfo which uses the international sort.\n   CultureInfo^ myCIintl = gcnew CultureInfo( &quot;es-ES&quot;,false );\n   \n   // Creates and initializes the CultureInfo which uses the traditional sort.\n   CultureInfo^ myCItrad = gcnew CultureInfo( 0x040A,false );\n   \n   // Displays the properties of each culture.\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot; );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl-&gt;CompareInfo, myCItrad-&gt;CompareInfo );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl-&gt;DisplayName, myCItrad-&gt;DisplayName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl-&gt;EnglishName, myCItrad-&gt;EnglishName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl-&gt;IsNeutralCulture, myCItrad-&gt;IsNeutralCulture );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl-&gt;IsReadOnly, myCItrad-&gt;IsReadOnly );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl-&gt;LCID, myCItrad-&gt;LCID );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl-&gt;Name, myCItrad-&gt;Name );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl-&gt;NativeName, myCItrad-&gt;NativeName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl-&gt;Parent, myCItrad-&gt;Parent );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl-&gt;TextInfo, myCItrad-&gt;TextInfo );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl-&gt;ThreeLetterISOLanguageName, myCItrad-&gt;ThreeLetterISOLanguageName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl-&gt;ThreeLetterWindowsLanguageName, myCItrad-&gt;ThreeLetterWindowsLanguageName );\n   Console::WriteLine( &quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl-&gt;TwoLetterISOLanguageName, myCItrad-&gt;TwoLetterISOLanguageName );\n   Console::WriteLine();\n   \n   // Compare two strings using myCIintl -&gt; \n   Console::WriteLine( &quot;Comparing \\&quot;llegar\\&quot; and \\&quot;lugar\\&quot;&quot; );\n   Console::WriteLine( &quot;   With myCIintl -&gt; CompareInfo -&gt; Compare: {0}&quot;, myCIintl-&gt;CompareInfo-&gt;Compare( &quot;llegar&quot;, &quot;lugar&quot; ) );\n   Console::WriteLine( &quot;   With myCItrad -&gt; CompareInfo -&gt; Compare: {0}&quot;, myCItrad-&gt;CompareInfo-&gt;Compare( &quot;llegar&quot;, &quot;lugar&quot; ) );\n}\n\n/*\nThis code produces the following output.\n\nPROPERTY                       INTERNATIONAL                                  TRADITIONAL              \nCompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\nDisplayName                    Spanish (Spain)                                Spanish (Spain)          \nEnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\nIsNeutralCulture               False                                          False                    \nIsReadOnly                     False                                          False                    \nLCID                           3082                                           1034                     \nName                           es-ES                                          es-ES                    \nNativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\nParent                         es                                             es                       \nTextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \nThreeLetterISOLanguageName     spa                                            spa                      \nThreeLetterWindowsLanguageName ESN                                            ESP                      \nTwoLetterISOLanguageName       es                                             es                       \n\nComparing &quot;llegar&quot; and &quot;lugar&quot;\n   With myCIintl -&gt; CompareInfo -&gt; Compare: -1\n   With myCItrad -&gt; CompareInfo -&gt; Compare: 1\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo_esES#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Creates and initializes the CultureInfo which uses the international sort.\n      CultureInfo myCIintl = new CultureInfo(&quot;es-ES&quot;, false);\n\n      // Creates and initializes the CultureInfo which uses the traditional sort.\n      CultureInfo myCItrad = new CultureInfo(0x040A, false);\n\n      // Displays the properties of each culture.\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot;);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl.CompareInfo, myCItrad.CompareInfo);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl.DisplayName, myCItrad.DisplayName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl.EnglishName, myCItrad.EnglishName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl.IsNeutralCulture, myCItrad.IsNeutralCulture);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl.IsReadOnly, myCItrad.IsReadOnly);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl.LCID, myCItrad.LCID);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl.Name, myCItrad.Name);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl.NativeName, myCItrad.NativeName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl.Parent, myCItrad.Parent);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl.TextInfo, myCItrad.TextInfo);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl.ThreeLetterISOLanguageName, myCItrad.ThreeLetterISOLanguageName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl.ThreeLetterWindowsLanguageName, myCItrad.ThreeLetterWindowsLanguageName);\n      Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl.TwoLetterISOLanguageName, myCItrad.TwoLetterISOLanguageName);\n      Console.WriteLine();\n\n      // Compare two strings using myCIintl.\n      Console.WriteLine(&quot;Comparing \\&quot;llegar\\&quot; and \\&quot;lugar\\&quot;&quot;);\n      Console.WriteLine(&quot;   With myCIintl.CompareInfo.Compare: {0}&quot;, myCIintl.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;));\n      Console.WriteLine(&quot;   With myCItrad.CompareInfo.Compare: {0}&quot;, myCItrad.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;));\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nPROPERTY                       INTERNATIONAL                                  TRADITIONAL              \nCompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\nDisplayName                    Spanish (Spain)                                Spanish (Spain)          \nEnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\nIsNeutralCulture               False                                          False                    \nIsReadOnly                     False                                          False                    \nLCID                           3082                                           1034                     \nName                           es-ES                                          es-ES                    \nNativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\nParent                         es                                             es                       \nTextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \nThreeLetterISOLanguageName     spa                                            spa                      \nThreeLetterWindowsLanguageName ESN                                            ESP                      \nTwoLetterISOLanguageName       es                                             es                       \n\nComparing &quot;llegar&quot; and &quot;lugar&quot;\n   With myCIintl.CompareInfo.Compare: -1\n   With myCItrad.CompareInfo.Compare: 1\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo_esES#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nModule Module1\n\n    Public Sub Main()\n\n        &#39; Creates and initializes the CultureInfo which uses the international sort.\n        Dim myCIintl As New CultureInfo(&quot;es-ES&quot;, False)\n\n        &#39; Creates and initializes the CultureInfo which uses the traditional sort.\n        Dim myCItrad As New CultureInfo(&amp;H40A, False)\n\n        &#39; Displays the properties of each culture.\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;PROPERTY&quot;, &quot;INTERNATIONAL&quot;, &quot;TRADITIONAL&quot;)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;CompareInfo&quot;, myCIintl.CompareInfo, myCItrad.CompareInfo)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;DisplayName&quot;, myCIintl.DisplayName, myCItrad.DisplayName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;EnglishName&quot;, myCIintl.EnglishName, myCItrad.EnglishName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsNeutralCulture&quot;, myCIintl.IsNeutralCulture, myCItrad.IsNeutralCulture)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;IsReadOnly&quot;, myCIintl.IsReadOnly, myCItrad.IsReadOnly)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;LCID&quot;, myCIintl.LCID, myCItrad.LCID)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Name&quot;, myCIintl.Name, myCItrad.Name)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;NativeName&quot;, myCIintl.NativeName, myCItrad.NativeName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;Parent&quot;, myCIintl.Parent, myCItrad.Parent)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TextInfo&quot;, myCIintl.TextInfo, myCItrad.TextInfo)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterISOLanguageName&quot;, myCIintl.ThreeLetterISOLanguageName, myCItrad.ThreeLetterISOLanguageName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;ThreeLetterWindowsLanguageName&quot;, myCIintl.ThreeLetterWindowsLanguageName, myCItrad.ThreeLetterWindowsLanguageName)\n        Console.WriteLine(&quot;{0,-31}{1,-47}{2,-25}&quot;, &quot;TwoLetterISOLanguageName&quot;, myCIintl.TwoLetterISOLanguageName, myCItrad.TwoLetterISOLanguageName)\n        Console.WriteLine()\n\n        &#39; Compare two strings using myCIintl.\n        Console.WriteLine(&quot;Comparing &quot;&quot;llegar&quot;&quot; and &quot;&quot;lugar&quot;&quot;&quot;)\n        Console.WriteLine(&quot;   With myCIintl.CompareInfo.Compare: {0}&quot;, myCIintl.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;))\n        Console.WriteLine(&quot;   With myCItrad.CompareInfo.Compare: {0}&quot;, myCItrad.CompareInfo.Compare(&quot;llegar&quot;, &quot;lugar&quot;))\n\n    End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;PROPERTY                       INTERNATIONAL                                  TRADITIONAL              \n&#39;CompareInfo                    CompareInfo - es-ES                            CompareInfo - es-ES_tradnl\n&#39;DisplayName                    Spanish (Spain)                                Spanish (Spain)          \n&#39;EnglishName                    Spanish (Spain, International Sort)            Spanish (Spain, Traditional Sort)\n&#39;IsNeutralCulture               False                                          False                    \n&#39;IsReadOnly                     False                                          False                    \n&#39;LCID                           3082                                           1034                     \n&#39;Name                           es-ES                                          es-ES                    \n&#39;NativeName                     Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n internacional) Espa&#241;ol (Espa&#241;a, alfabetizaci&#243;n tradicional)\n&#39;Parent                         es                                             es                       \n&#39;TextInfo                       TextInfo - es-ES                               TextInfo - es-ES_tradnl  \n&#39;ThreeLetterISOLanguageName     spa                                            spa                      \n&#39;ThreeLetterWindowsLanguageName ESN                                            ESP                      \n&#39;TwoLetterISOLanguageName       es                                             es                       \n&#39;\n&#39;Comparing &quot;llegar&quot; and &quot;lugar&quot;\n&#39;   With myCIintl.CompareInfo.Compare: -1\n&#39;   With myCItrad.CompareInfo.Compare: 1\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_ThreeLetterISOLanguageName\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_ThreeLetterISOLanguageName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThreeLetterISOLanguageName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the ISO 639-2 three-letter code for the language of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ThreeLetterISOLanguageName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The ISO 639-2 three-letter code for the language of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, the three-letter abbreviation for English is &quot;eng&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When communicating between processes or persisting data it is usually better to use the full <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a>. Using just the language can lose context and data.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays several properties of the neutral cultures.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;);\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.NeutralCultures))\n      {\n         Console.Write(&quot;{0,-7}&quot;, ci.Name);\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName);\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName);\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName);\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Displays several properties of the neutral cultures.\n   Console::WriteLine( &quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot; );\n   System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures( CultureTypes::NeutralCultures )-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;{0,-7}&quot;, ci-&gt;Name );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;TwoLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterWindowsLanguageName );\n      Console::Write( &quot; {0,-40}&quot;, ci-&gt;DisplayName );\n      Console::WriteLine( &quot; {0,-40}&quot;, ci-&gt;EnglishName );\n   }\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.GetCultures#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n   Public Sub Main()\n\n      &#39; Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;)\n      Dim ci As CultureInfo\n      For Each ci In CultureInfo.GetCultures(CultureTypes.NeutralCultures)\n         Console.Write(&quot;{0,-7}&quot;, ci.Name)\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName)\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName)\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName)\n      Next ci\n\n   End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.  This output has been cropped for brevity.\n&#39;\n&#39;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\n&#39;ar      ar  ara ARA Arabic                                   Arabic                                  \n&#39;bg      bg  bul BGR Bulgarian                                Bulgarian                               \n&#39;ca      ca  cat CAT Catalan                                  Catalan                                 \n&#39;zh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \n&#39;cs      cs  ces CSY Czech                                    Czech                                   \n&#39;da      da  dan DAN Danish                                   Danish                                  \n&#39;de      de  deu DEU German                                   German                                  \n&#39;el      el  ell ELL Greek                                    Greek                                   \n&#39;en      en  eng ENU English                                  English                                 \n&#39;es      es  spa ESP Spanish                                  Spanish                                 \n&#39;fi      fi  fin FIN Finnish                                  Finnish                                 \n&#39;zh      zh  zho CHS Chinese                                  Chinese                                 \n&#39;zh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \n&#39;zh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \n&#39;zh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ThreeLetterWindowsLanguageName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the three-letter code for the language as defined in the Windows API.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ThreeLetterWindowsLanguageName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The three-letter code for the language as defined in the Windows API.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the same value as the Windows API method <code>GetLocaleInfo</code> with the LOCALE_SABBREVLANGNAME value. For example, the three-letter code for English (United States) as defined in the Windows API is &quot;enu&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When communicating between processes or persisting data it is usually better to use the full <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a>. Using just the language can lose context and data.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays several properties of the neutral cultures.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;);\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.NeutralCultures))\n      {\n         Console.Write(&quot;{0,-7}&quot;, ci.Name);\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName);\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName);\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName);\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Displays several properties of the neutral cultures.\n   Console::WriteLine( &quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot; );\n   System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures( CultureTypes::NeutralCultures )-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;{0,-7}&quot;, ci-&gt;Name );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;TwoLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterWindowsLanguageName );\n      Console::Write( &quot; {0,-40}&quot;, ci-&gt;DisplayName );\n      Console::WriteLine( &quot; {0,-40}&quot;, ci-&gt;EnglishName );\n   }\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.GetCultures#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n   Public Sub Main()\n\n      &#39; Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;)\n      Dim ci As CultureInfo\n      For Each ci In CultureInfo.GetCultures(CultureTypes.NeutralCultures)\n         Console.Write(&quot;{0,-7}&quot;, ci.Name)\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName)\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName)\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName)\n      Next ci\n\n   End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.  This output has been cropped for brevity.\n&#39;\n&#39;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\n&#39;ar      ar  ara ARA Arabic                                   Arabic                                  \n&#39;bg      bg  bul BGR Bulgarian                                Bulgarian                               \n&#39;ca      ca  cat CAT Catalan                                  Catalan                                 \n&#39;zh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \n&#39;cs      cs  ces CSY Czech                                    Czech                                   \n&#39;da      da  dan DAN Danish                                   Danish                                  \n&#39;de      de  deu DEU German                                   German                                  \n&#39;el      el  ell ELL Greek                                    Greek                                   \n&#39;en      en  eng ENU English                                  English                                 \n&#39;es      es  spa ESP Spanish                                  Spanish                                 \n&#39;fi      fi  fin FIN Finnish                                  Finnish                                 \n&#39;zh      zh  zho CHS Chinese                                  Chinese                                 \n&#39;zh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \n&#39;zh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \n&#39;zh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_TwoLetterISOLanguageName\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_TwoLetterISOLanguageName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TwoLetterISOLanguageName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the ISO 639-1 two-letter code for the language of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string TwoLetterISOLanguageName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The ISO 639-1 two-letter code for the language of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, the two-letter abbreviation for English is &quot;en&quot;. The TwoLetterISOLanguageName property value for the invariant culture is &quot;iv&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When communicating between processes or persisting data it is usually better to use the full <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a>. Using just the language can lose context and data.  </p>\n</div>\n<p> If ISO 639-1 does not define a two-letter language code for a particular culture, the TwoLetterISOLanguageName property returns a string that consists of three or more letters. For more information, see the example.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists the cultures whose TwoLetterISOLanguageName property does not consist of a two-letter language code.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.TwoLetterISOLanguageName#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Get all available cultures on the current system.\n      Dim cultures() As CultureInfo = CultureInfo.GetCultures(CultureTypes.AllCultures)\n\n      Console.WriteLine(&quot;{0,-32} {1,-13} {2,-6}&quot;, &quot;Display Name&quot;, \n                        &quot;Name&quot;, &quot;TwoLetterISOLanguageName&quot;)\n      Console.WriteLine()\n      For Each culture In cultures\n         &#39; Exclude custom cultures.\n         If (culture.CultureTypes And CultureTypes.UserCustomCulture) = CultureTypes.UserCustomCulture Then \n            Continue For\n         End If\n         \n         &#39; Exclude all two-letter codes.\n         If culture.TwoLetterISOLanguageName.Length = 2 Then Continue For\n         \n         Console.WriteLine(&quot;{0,-32} {1,-13} {2,-6}&quot;, culture.DisplayName,\n                           culture.Name, culture.TwoLetterISOLanguageName)\n      Next   \n   End Sub\nEnd Module\n&#39; The example output like the following:\n&#39;       Display Name                     Name          TwoLetterISOLanguageName\n&#39;       \n&#39;       Upper Sorbian                    hsb           hsb\n&#39;       Konkani                          kok           kok\n&#39;       Syriac                           syr           syr\n&#39;       Tamazight                        tzm           tzm\n&#39;       Filipino                         fil           fil\n&#39;       Quechua                          quz           quz\n&#39;       Sesotho sa Leboa                 nso           nso\n&#39;       Mapudungun                       arn           arn\n&#39;       Mohawk                           moh           moh\n&#39;       Alsatian                         gsw           gsw\n&#39;       Sakha                            sah           sah\n&#39;       K&#39;iche                           qut           qut\n&#39;       Dari                             prs           prs\n&#39;       Upper Sorbian (Germany)          hsb-DE        hsb\n&#39;       Konkani (India)                  kok-IN        kok\n&#39;       Syriac (Syria)                   syr-SY        syr\n&#39;       Filipino (Philippines)           fil-PH        fil\n&#39;       Quechua (Bolivia)                quz-BO        quz\n&#39;       Sesotho sa Leboa (South Africa)  nso-ZA        nso\n&#39;       Mapudungun (Chile)               arn-CL        arn\n&#39;       Mohawk (Mohawk)                  moh-CA        moh\n&#39;       Alsatian (France)                gsw-FR        gsw\n&#39;       Sakha (Russia)                   sah-RU        sah\n&#39;       K&#39;iche (Guatemala)               qut-GT        qut\n&#39;       Dari (Afghanistan)               prs-AF        prs\n&#39;       Lower Sorbian (Germany)          dsb-DE        dsb\n&#39;       Tamazight (Latin, Algeria)       tzm-Latn-DZ   tzm\n&#39;       Quechua (Ecuador)                quz-EC        quz\n&#39;       Quechua (Peru)                   quz-PE        quz\n&#39;       Sami, Lule (Norway)              smj-NO        smj\n&#39;       Sami, Lule (Sweden)              smj-SE        smj\n&#39;       Sami, Southern (Norway)          sma-NO        sma\n&#39;       Sami, Southern (Sweden)          sma-SE        sma\n&#39;       Sami, Skolt (Finland)            sms-FI        sms\n&#39;       Sami, Inari (Finland)            smn-FI        smn\n&#39;       Sami (Inari)                     smn           smn\n&#39;       Sami (Skolt)                     sms           sms\n&#39;       Sami (Southern)                  sma           sma\n&#39;       Lower Sorbian                    dsb           dsb\n&#39;       Sami (Lule)                      smj           smj\n&#39;       Tamazight (Latin)                tzm-Latn      tzm\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.TwoLetterISOLanguageName#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get all available cultures on the current system.\n      CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.AllCultures);\n\n      Console.WriteLine(&quot;{0,-32} {1,-13} {2,-6}<br>&quot;, &quot;Display Name&quot;, \n                        &quot;Name&quot;, &quot;TwoLetterISOLanguageName&quot;);\n\n      foreach (var culture in cultures) {\n         // Exclude custom cultures.\n         if ((culture.CultureTypes &amp; CultureTypes.UserCustomCulture) == CultureTypes.UserCustomCulture) \n            continue;\n         \n         // Exclude all two-letter codes.\n         if (culture.TwoLetterISOLanguageName.Length == 2)\n            continue;\n         \n         Console.WriteLine(&quot;{0,-32} {1,-13} {2,-6}&quot;, culture.DisplayName,\n                           culture.Name, culture.TwoLetterISOLanguageName);\n      }   \n   }\n}\n// The example output like the following:\n//       Display Name                     Name          TwoLetterISOLanguageName\n//       \n//       Upper Sorbian                    hsb           hsb\n//       Konkani                          kok           kok\n//       Syriac                           syr           syr\n//       Tamazight                        tzm           tzm\n//       Filipino                         fil           fil\n//       Quechua                          quz           quz\n//       Sesotho sa Leboa                 nso           nso\n//       Mapudungun                       arn           arn\n//       Mohawk                           moh           moh\n//       Alsatian                         gsw           gsw\n//       Sakha                            sah           sah\n//       K&#39;iche                           qut           qut\n//       Dari                             prs           prs\n//       Upper Sorbian (Germany)          hsb-DE        hsb\n//       Konkani (India)                  kok-IN        kok\n//       Syriac (Syria)                   syr-SY        syr\n//       Filipino (Philippines)           fil-PH        fil\n//       Quechua (Bolivia)                quz-BO        quz\n//       Sesotho sa Leboa (South Africa)  nso-ZA        nso\n//       Mapudungun (Chile)               arn-CL        arn\n//       Mohawk (Mohawk)                  moh-CA        moh\n//       Alsatian (France)                gsw-FR        gsw\n//       Sakha (Russia)                   sah-RU        sah\n//       K&#39;iche (Guatemala)               qut-GT        qut\n//       Dari (Afghanistan)               prs-AF        prs\n//       Lower Sorbian (Germany)          dsb-DE        dsb\n//       Tamazight (Latin, Algeria)       tzm-Latn-DZ   tzm\n//       Quechua (Ecuador)                quz-EC        quz\n//       Quechua (Peru)                   quz-PE        quz\n//       Sami, Lule (Norway)              smj-NO        smj\n//       Sami, Lule (Sweden)              smj-SE        smj\n//       Sami, Southern (Norway)          sma-NO        sma\n//       Sami, Southern (Sweden)          sma-SE        sma\n//       Sami, Skolt (Finland)            sms-FI        sms\n//       Sami, Inari (Finland)            smn-FI        smn\n//       Sami (Inari)                     smn           smn\n//       Sami (Skolt)                     sms           sms\n//       Sami (Southern)                  sma           sma\n//       Lower Sorbian                    dsb           dsb\n//       Sami (Lule)                      smj           smj\n//       Tamazight (Latin)                tzm-Latn      tzm\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_UseUserOverride\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_UseUserOverride_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseUserOverride</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object uses the user-selected culture settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseUserOverride { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> uses the user-selected culture settings; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.  </p>\n<p> If UseUserOverride is <code>true</code> and the specified culture matches the current culture of Windows, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> uses those overrides, including user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property, and the properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instance returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, for example, if the selected calendar is not one of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a>, the results of the methods and the values of the properties are undefined.  </p>\n<p> This property is set when the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is created.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_ClearCachedData\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_ClearCachedData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearCachedData()</div>        \r\n          </div>\r\n    \r\n            <p>Refreshes cached culture-related information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ClearCachedData ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Information, such as the default culture and format patterns, is cached the first time it is requested. That information can change during the life of the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>, for example, when the user modifies the regional and language options portion of Control Panel. However, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class does not automatically detect changes in the system settings.  </p>\n<p> The ClearCachedData method clears the cache of <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects created by <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfo_\" data-linktype=\"relative-path\">GetCultureInfo</a> and refreshes the information in the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a>, and <a class=\"xref\" href=\"system.globalization.regioninfo#System_Globalization_RegionInfo_CurrentRegion_\" data-linktype=\"relative-path\">CurrentRegion</a> properties, based on the current system settings.  </p>\n<p> The ClearCachedData method does not refresh the information in the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property for existing threads. However, future threads will have any new <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> property values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_Clone\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a copy of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A copy of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The clone is writable even if the original <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is read-only. Therefore, the properties of the clone can be modified.  </p>\n<p> A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects. It refers to the original objects instead. In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.  </p>\n<p> The Clone method creates an enhanced shallow copy. The objects returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_TextInfo_\" data-linktype=\"relative-path\">TextInfo</a>, and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> properties are also copied. Consequently, the cloned <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object can modify its copied properties without affecting the original <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that CultureInfo.Clone also clones the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instances associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.Clone#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a CultureInfo.\n   CultureInfo^ myCI = gcnew CultureInfo( &quot;en-US&quot;,false );\n   \n   // Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n   CultureInfo^ myCIclone = dynamic_cast&lt;CultureInfo^&gt;(myCI-&gt;Clone());\n   myCIclone-&gt;DateTimeFormat-&gt;AMDesignator = &quot;a.m.&quot;;\n   myCIclone-&gt;DateTimeFormat-&gt;DateSeparator = &quot;-&quot;;\n   myCIclone-&gt;NumberFormat-&gt;CurrencySymbol = &quot;USD&quot;;\n   myCIclone-&gt;NumberFormat-&gt;NumberDecimalDigits = 4;\n   \n   // Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n   Console::WriteLine( &quot;DTFI/NFI PROPERTY&nbsp;&nbsp;&nbsp;&nbsp;ORIGINAL&nbsp;&nbsp;&nbsp;&nbsp;MODIFIED CLONE&quot; );\n   Console::WriteLine( &quot;DTFI.AMDesignator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;DateTimeFormat-&gt;AMDesignator, myCIclone-&gt;DateTimeFormat-&gt;AMDesignator );\n   Console::WriteLine( &quot;DTFI.DateSeparator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;DateTimeFormat-&gt;DateSeparator, myCIclone-&gt;DateTimeFormat-&gt;DateSeparator );\n   Console::WriteLine( &quot;NFI.CurrencySymbol&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;NumberFormat-&gt;CurrencySymbol, myCIclone-&gt;NumberFormat-&gt;CurrencySymbol );\n   Console::WriteLine( &quot;NFI.NumberDecimalDigits&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI-&gt;NumberFormat-&gt;NumberDecimalDigits, myCIclone-&gt;NumberFormat-&gt;NumberDecimalDigits );\n}\n\n/*\nThis code produces the following output.\n\nDTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\nDTFI.AMDesignator       AM              a.m.\nDTFI.DateSeparator      /               -\nNFI.CurrencySymbol      $               USD\nNFI.NumberDecimalDigits 2               4\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.Clone#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCultureInfo\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a CultureInfo.\n      Dim myCI As New CultureInfo(&quot;en-US&quot;, False)\n      \n      &#39; Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n      Dim myCIclone As CultureInfo = CType(myCI.Clone(), CultureInfo)\n      myCIclone.DateTimeFormat.AMDesignator = &quot;a.m.&quot;\n      myCIclone.DateTimeFormat.DateSeparator = &quot;-&quot;\n      myCIclone.NumberFormat.CurrencySymbol = &quot;USD&quot;\n      myCIclone.NumberFormat.NumberDecimalDigits = 4\n      \n      &#39; Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n      Console.WriteLine(&quot;DTFI/NFI PROPERTY&quot; + ControlChars.Tab + &quot;ORIGINAL&quot; + ControlChars.Tab + &quot;MODIFIED CLONE&quot;)\n      Console.WriteLine(&quot;DTFI.AMDesignator&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.DateTimeFormat.AMDesignator, myCIclone.DateTimeFormat.AMDesignator)\n      Console.WriteLine(&quot;DTFI.DateSeparator&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.DateTimeFormat.DateSeparator, myCIclone.DateTimeFormat.DateSeparator)\n      Console.WriteLine(&quot;NFI.CurrencySymbol&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.NumberFormat.CurrencySymbol, myCIclone.NumberFormat.CurrencySymbol)\n      Console.WriteLine(&quot;NFI.NumberDecimalDigits&quot; + ControlChars.Tab + &quot;{0}&quot; + ControlChars.Tab + ControlChars.Tab + &quot;{1}&quot;, myCI.NumberFormat.NumberDecimalDigits, myCIclone.NumberFormat.NumberDecimalDigits)\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCultureInfo\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; DTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\n&#39; DTFI.AMDesignator       AM              a.m.\n&#39; DTFI.DateSeparator      /               -\n&#39; NFI.CurrencySymbol      $               USD\n&#39; NFI.NumberDecimalDigits 2               4\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.Clone#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCultureInfo  {\n\n   public static void Main()  {\n\n      // Creates and initializes a CultureInfo.\n      CultureInfo myCI = new CultureInfo(&quot;en-US&quot;, false);\n\n      // Clones myCI and modifies the DTFI and NFI instances associated with the clone.\n      CultureInfo myCIclone = (CultureInfo) myCI.Clone();\n      myCIclone.DateTimeFormat.AMDesignator = &quot;a.m.&quot;;\n      myCIclone.DateTimeFormat.DateSeparator = &quot;-&quot;;\n      myCIclone.NumberFormat.CurrencySymbol = &quot;USD&quot;;\n      myCIclone.NumberFormat.NumberDecimalDigits = 4;\n\n      // Displays the properties of the DTFI and NFI instances associated with the original and with the clone. \n      Console.WriteLine( &quot;DTFI/NFI PROPERTY&nbsp;&nbsp;&nbsp;&nbsp;ORIGINAL&nbsp;&nbsp;&nbsp;&nbsp;MODIFIED CLONE&quot; );\n      Console.WriteLine( &quot;DTFI.AMDesignator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.DateTimeFormat.AMDesignator, myCIclone.DateTimeFormat.AMDesignator );\n      Console.WriteLine( &quot;DTFI.DateSeparator&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.DateTimeFormat.DateSeparator, myCIclone.DateTimeFormat.DateSeparator );\n      Console.WriteLine( &quot;NFI.CurrencySymbol&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.NumberFormat.CurrencySymbol, myCIclone.NumberFormat.CurrencySymbol );\n      Console.WriteLine( &quot;NFI.NumberDecimalDigits&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myCI.NumberFormat.NumberDecimalDigits, myCIclone.NumberFormat.NumberDecimalDigits );\n      \n   }\n\n}\n\n/*\nThis code produces the following output.\n\nDTFI/NFI PROPERTY       ORIGINAL        MODIFIED CLONE\nDTFI.AMDesignator       AM              a.m.\nDTFI.DateSeparator      /               -\nNFI.CurrencySymbol      $               USD\nNFI.NumberDecimalDigits 2               4\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_CreateSpecificCulture_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_CreateSpecificCulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSpecificCulture(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> that represents the specific culture that is associated with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo CreateSpecificCulture (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A predefined <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> name or the name of an existing <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. <code>name</code> is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents:  </p>\n<p> The invariant culture, if <code>name</code> is an empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> The specific culture associated with <code>name</code>, if <code>name</code> is a neutral culture.  </p>\n<p> -or-  </p>\n<p> The culture specified by <code>name</code>, if <code>name</code> is already a specific culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid culture name.  </p>\n<p> -or-  </p>\n<p> The culture specified by <code>name</code> does not have a specific culture associated with it.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateSpecificCulture method wraps a call to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_\" data-linktype=\"relative-path\">CultureInfo(String)</a> constructor.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For a list of predefined culture names, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center. In addition, starting with Windows 10, <code>name</code> can be any valid BCP-47 language tag.  </p>\n</div>\n<p> Cultures are grouped into three sets: the invariant culture, the neutral cultures, and the specific cultures. For more information, see the description of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class.  </p>\n<p> If the culture identifier of the specific culture returned by this method matches the culture identifier of the current Windows culture, this method creates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that uses the Windows culture overrides. The overrides include user settings for the properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property and the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> property. To instantiate a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that with default culture settings rather than user overrides, call the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">CultureInfo(String,Boolean)</a> constructor with a value of <code>false</code> for the <code>useUserOverride</code> argument.  </p>\n<p> Although the CreateSpecificCulture method name includes the term &quot;Specific&quot;, remember that culture data can change between versions, or due to custom cultures, or because of user overrides. Use the invariant culture or binary or fixed forms for saving data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves an array of <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects that represent neutral cultures from the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultures_\" data-linktype=\"relative-path\">GetCultures</a> method and sorts the array. When it iterates the elements in the array, it passes the name of each neutral culture to the CreateSpecificCulture method and displays the name of the specific culture returned by the method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example uses the zh-CHS and zh-CHT culture names. However, applications that target Windows Vista and later should use zh-Hans instead of zh-CHS and zh-Hant instead of zh-CHT. zh-Hans and zh-Hant represent the current standard and should be used unless you have a reason for using the older names.  </p>\n<p> Note also that the results of the example may differ on an installation of Taiwanese Windows, where the input of a Chinese (Traditional) neutral culture (zh, zh-CHT, or zh-Hant) will return zh-TW.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.CreateSpecificCulture2#2\">Imports System.Collections.Generic\nImports System.Globalization\nImports System.Reflection\n\nPublic Class Example\n   Public Shared Sub Main()\n      &#39; Display the header.\n      Console.WriteLine(&quot;{0,-53}{1}&quot;, &quot;CULTURE&quot;, &quot;SPECIFIC CULTURE&quot;)\n\n      &#39; Get each neutral culture in the .NET Framework.\n      Dim cultures() As CultureInfo = CultureInfo.GetCultures(CultureTypes.NeutralCultures)\n      &#39; Sort the returned array by name.\n      Array.Sort(Of CultureInfo)(cultures, New NamePropertyComparer(Of CultureInfo)())\n      \n      &#39; Determine the specific culture associated with each neutral culture.\n      For Each culture As CultureInfo In cultures\n         Console.Write(&quot;{0,-12} {1,-40}&quot;, culture.Name, culture.EnglishName)\n         Try\n            Console.WriteLine(&quot;{0}&quot;, CultureInfo.CreateSpecificCulture(culture.Name).Name)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;(no associated specific culture)&quot;)\n         End Try\n      Next \n   End Sub\nEnd Class\n\nPublic Class NamePropertyComparer(Of T) : Implements IComparer(Of T)\n   Public Function Compare(x As T, y As T) As Integer _\n                   Implements IComparer(Of T).Compare\n      If x Is Nothing Then\n         If y Is Nothing Then\n            Return 0\n         Else\n            Return -1\n         End If\n      End If \n      Dim pX As PropertyInfo = x.GetType().GetProperty(&quot;Name&quot;)\n      Dim pY As PropertyInfo = y.GetType().GetProperty(&quot;Name&quot;)             \n      Return String.Compare(CStr(pX.GetValue(x, Nothing)), CStr(pY.GetValue(y, Nothing)))\n   End Function\nEnd Class\n&#39; The example displays the following output.  This output has been cropped for brevity.\n&#39;    CULTURE                                              SPECIFIC CULTURE\n&#39;                 Invariant Language (Invariant Country)  \n&#39;    af           Afrikaans                               af-ZA\n&#39;    am           Amharic                                 am-ET\n&#39;    ar           Arabic                                  ar-SA\n&#39;    arn          Mapudungun                              arn-CL\n&#39;    as           Assamese                                as-IN\n&#39;    az           Azerbaijani                             az-Latn-AZ\n&#39;    az-Cyrl      Azerbaijani (Cyrillic)                  az-Cyrl-AZ\n&#39;    az-Latn      Azerbaijani (Latin)                     az-Latn-AZ\n&#39;    ba           Bashkir                                 ba-RU\n&#39;    be           Belarusian                              be-BY\n&#39;    bg           Bulgarian                               bg-BG\n&#39;    bn           Bengali                                 bn-IN\n&#39;    bo           Tibetan                                 bo-CN\n&#39;    br           Breton                                  br-FR\n&#39;    bs           Bosnian                                 bs-Latn-BA\n&#39;    bs-Cyrl      Bosnian (Cyrillic)                      bs-Cyrl-BA\n&#39;    bs-Latn      Bosnian (Latin)                         bs-Latn-BA\n&#39;    ca           Catalan                                 ca-ES\n&#39;    co           Corsican                                co-FR\n&#39;    cs           Czech                                   cs-CZ\n&#39;    cy           Welsh                                   cy-GB\n&#39;    da           Danish                                  da-DK\n&#39;    de           German                                  de-DE\n&#39;    dsb          Lower Sorbian                           dsb-DE\n&#39;    dv           Divehi                                  dv-MV\n&#39;    ...\n&#39;    ta           Tamil                                   ta-IN\n&#39;    te           Telugu                                  te-IN\n&#39;    tg           Tajik                                   tg-Cyrl-TJ\n&#39;    tg-Cyrl      Tajik (Cyrillic)                        tg-Cyrl-TJ\n&#39;    th           Thai                                    th-TH\n&#39;    tk           Turkmen                                 tk-TM\n&#39;    tn           Setswana                                tn-ZA\n&#39;    tr           Turkish                                 tr-TR\n&#39;    tt           Tatar                                   tt-RU\n&#39;    tzm          Tamazight                               tzm-Latn-DZ\n&#39;    tzm-Latn     Tamazight (Latin)                       tzm-Latn-DZ\n&#39;    ug           Uyghur                                  ug-CN\n&#39;    uk           Ukrainian                               uk-UA\n&#39;    ur           Urdu                                    ur-PK\n&#39;    uz           Uzbek                                   uz-Latn-UZ\n&#39;    uz-Cyrl      Uzbek (Cyrillic)                        uz-Cyrl-UZ\n&#39;    uz-Latn      Uzbek (Latin)                           uz-Latn-UZ\n&#39;    vi           Vietnamese                              vi-VN\n&#39;    wo           Wolof                                   wo-SN\n&#39;    xh           isiXhosa                                xh-ZA\n&#39;    yo           Yoruba                                  yo-NG\n&#39;    zh           Chinese                                 zh-CN\n&#39;    zh-CHS       Chinese (Simplified) Legacy             zh-CN\n&#39;    zh-CHT       Chinese (Traditional) Legacy            zh-HK\n&#39;    zh-Hans      Chinese (Simplified)                    zh-CN\n&#39;    zh-Hant      Chinese (Traditional)                   zh-HK\n&#39;    zu           isiZulu                                 zu-ZA\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.CreateSpecificCulture2#2\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Display the header.\n      Console.WriteLine(&quot;{0,-53}{1}&quot;, &quot;CULTURE&quot;, &quot;SPECIFIC CULTURE&quot;);\n\n      // Get each neutral culture in the .NET Framework.\n      CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.NeutralCultures);\n      // Sort the returned array by name.\n      Array.Sort&lt;CultureInfo&gt;(cultures, new NamePropertyComparer&lt;CultureInfo&gt;());\n      \n      // Determine the specific culture associated with each neutral culture.\n      foreach (var culture in cultures) \n      {\n         Console.Write(&quot;{0,-12} {1,-40}&quot;, culture.Name, culture.EnglishName);\n         try {\n            Console.WriteLine(&quot;{0}&quot;, CultureInfo.CreateSpecificCulture(culture.Name).Name);\n         }   \n         catch (ArgumentException) {\n            Console.WriteLine(&quot;(no associated specific culture)&quot;);\n         }\n      } \n   }\n}\n\npublic class NamePropertyComparer&lt;T&gt; : IComparer&lt;T&gt;\n{\n   public int Compare(T x, T y) \n   {\n      if (x == null)\n         if (y == null)\n            return 0;\n         else\n            return -1;\n\n      PropertyInfo pX = x.GetType().GetProperty(&quot;Name&quot;);\n      PropertyInfo pY = y.GetType().GetProperty(&quot;Name&quot;);             \n      return String.Compare((string) pX.GetValue(x, null), (string) pY.GetValue(y, null));\n   }\n}\n// The example displays the following output:\n//    CULTURE                                              SPECIFIC CULTURE\n//                 Invariant Language (Invariant Country)  \n//    af           Afrikaans                               af-ZA\n//    am           Amharic                                 am-ET\n//    ar           Arabic                                  ar-SA\n//    arn          Mapudungun                              arn-CL\n//    as           Assamese                                as-IN\n//    az           Azerbaijani                             az-Latn-AZ\n//    az-Cyrl      Azerbaijani (Cyrillic)                  az-Cyrl-AZ\n//    az-Latn      Azerbaijani (Latin)                     az-Latn-AZ\n//    ba           Bashkir                                 ba-RU\n//    be           Belarusian                              be-BY\n//    bg           Bulgarian                               bg-BG\n//    bn           Bengali                                 bn-IN\n//    bo           Tibetan                                 bo-CN\n//    br           Breton                                  br-FR\n//    bs           Bosnian                                 bs-Latn-BA\n//    bs-Cyrl      Bosnian (Cyrillic)                      bs-Cyrl-BA\n//    bs-Latn      Bosnian (Latin)                         bs-Latn-BA\n//    ca           Catalan                                 ca-ES\n//    co           Corsican                                co-FR\n//    cs           Czech                                   cs-CZ\n//    cy           Welsh                                   cy-GB\n//    da           Danish                                  da-DK\n//    de           German                                  de-DE\n//    dsb          Lower Sorbian                           dsb-DE\n//    dv           Divehi                                  dv-MV\n//    ...\n//    ta           Tamil                                   ta-IN\n//    te           Telugu                                  te-IN\n//    tg           Tajik                                   tg-Cyrl-TJ\n//    tg-Cyrl      Tajik (Cyrillic)                        tg-Cyrl-TJ\n//    th           Thai                                    th-TH\n//    tk           Turkmen                                 tk-TM\n//    tn           Setswana                                tn-ZA\n//    tr           Turkish                                 tr-TR\n//    tt           Tatar                                   tt-RU\n//    tzm          Tamazight                               tzm-Latn-DZ\n//    tzm-Latn     Tamazight (Latin)                       tzm-Latn-DZ\n//    ug           Uyghur                                  ug-CN\n//    uk           Ukrainian                               uk-UA\n//    ur           Urdu                                    ur-PK\n//    uz           Uzbek                                   uz-Latn-UZ\n//    uz-Cyrl      Uzbek (Cyrillic)                        uz-Cyrl-UZ\n//    uz-Latn      Uzbek (Latin)                           uz-Latn-UZ\n//    vi           Vietnamese                              vi-VN\n//    wo           Wolof                                   wo-SN\n//    xh           isiXhosa                                xh-ZA\n//    yo           Yoruba                                  yo-NG\n//    zh           Chinese                                 zh-CN\n//    zh-CHS       Chinese (Simplified) Legacy             zh-CN\n//    zh-CHT       Chinese (Traditional) Legacy            zh-HK\n//    zh-Hans      Chinese (Simplified)                    zh-CN\n//    zh-Hant      Chinese (Traditional)                   zh-HK\n//    zu           isiZulu                                 zu-ZA\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified object is the same culture as the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is the same culture as the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Two <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects are considered equal if their <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CompareInfo_\" data-linktype=\"relative-path\">CompareInfo</a> properties are equal.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_GetConsoleFallbackUICulture\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_GetConsoleFallbackUICulture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConsoleFallbackUICulture()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an alternate user interface culture suitable for console applications when the default graphic user interface culture is unsuitable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>An alternate culture that is used to read and display text on the console.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Languages such as Arabic, Hebrew, Urdu, and Syriac are based on bidirectional text. Windows applications, which have a graphical user interface, support bidirectional languages. However, console applications, which employ the text user interface of the operating system console, do not provide bidirectional support. Therefore, if you localize a console application to Arabic or Hebrew, your application displays unreadable text on the console screen.  </p>\n<p> The user interface culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture. For example, the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property returns an Arabic culture for an Arabic operating system. Use the GetConsoleFallbackUICulture method to retrieve a culture suitable for a console application user interface. After your application retrieves the fallback user interface culture, it should assign the culture to the current user interface culture of the current thread. For more information, see the &quot;Explicitly Setting the Current UI Culture&quot; section of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property.  </p>\n<p> The following are predefined cultures that have a different fallback user interface culture name from the predefined culture name.  </p>\n<table>\n<thead>\n<tr>\n<th>Predefined culture</th>\n<th>Culture name</th>\n<th>Fallback user interface culture name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Amharic</td>\n<td>am</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Amharic (Ethiopia)</td>\n<td>am-ET</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>(neutral Arabic)</td>\n<td>ar</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (U.A.E.)</td>\n<td>ar-AE</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Bahrain)</td>\n<td>ar-BH</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Algeria)</td>\n<td>ar-DZ</td>\n<td>fr-FR</td>\n</tr>\n<tr>\n<td>Arabic (Egypt)</td>\n<td>ar-EG</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Iraq)</td>\n<td>ar-IQ</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Jordan)</td>\n<td>ar-JO</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Kuwait)</td>\n<td>ar-KW</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Lebanon)</td>\n<td>ar-LB</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Libya)</td>\n<td>ar-LY</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Morocco)</td>\n<td>ar-MA</td>\n<td>fr-FR</td>\n</tr>\n<tr>\n<td>Arabic (Oman)</td>\n<td>ar-OM</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Qatar)</td>\n<td>ar-QA</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Saudi Arabia)</td>\n<td>ar-SA</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Syria)</td>\n<td>ar-SY</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Arabic (Tunisia)</td>\n<td>ar-TN</td>\n<td>fr-FR</td>\n</tr>\n<tr>\n<td>Arabic (Yemen)</td>\n<td>ar-YE</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Assamese</td>\n<td>as</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Assamese (India)</td>\n<td>as-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Bengali</td>\n<td>bn</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Bengali (Bangladesh)</td>\n<td>bn-BD</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Bengali (India)</td>\n<td>bn-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Tibetan</td>\n<td>bo</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Tibetan (PRC)</td>\n<td>bo-CN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Divehi</td>\n<td>dv</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Divehi (India)</td>\n<td>dv-MV</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Persian</td>\n<td>fa</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Persian (Iran)</td>\n<td>fa-IR</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Gujarati</td>\n<td>gu</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Gujarati (India)</td>\n<td>gu-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Hebrew</td>\n<td>he</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Hebrew (Israel)</td>\n<td>he-IL</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Hindi</td>\n<td>hi</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Hindi (India)</td>\n<td>hi-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Yi</td>\n<td>ii</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Yi (PRC)</td>\n<td>ii-CN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Inukitut Syllabics</td>\n<td>iu-Cans</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Inukitut Syllabics (Canada)</td>\n<td>iu-Cans-CA</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Khmer</td>\n<td>km</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Khmer (Cambodia)</td>\n<td>km-KH</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Kannada</td>\n<td>kn</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Kannada (India)</td>\n<td>kn-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Konkani</td>\n<td>kok</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Konkani (India)</td>\n<td>kok-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Lao</td>\n<td>lo</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Lao (Lao P.D.R.)</td>\n<td>lo-LA</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Malayalam</td>\n<td>ml</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Malayalam (India)</td>\n<td>ml-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Mohawk</td>\n<td>moh</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Mohawk (Canada)</td>\n<td>moh-CA</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Marathi</td>\n<td>mr</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Marathi (India)</td>\n<td>mr-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Nepali</td>\n<td>ne</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Nepali (Nepal)</td>\n<td>ne-NP</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Norwegian</td>\n<td>no</td>\n<td>nb-NO</td>\n</tr>\n<tr>\n<td>Oriya</td>\n<td>or</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Oriya (India)</td>\n<td>or-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Punjabi</td>\n<td>pa</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Punjabi (India)</td>\n<td>pa-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Dari</td>\n<td>prs</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Dari (Afghanistan)</td>\n<td>prs-AF</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Pashto</td>\n<td>ps</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Pashto (Afghanistan)</td>\n<td>ps-AF</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Sanskrit</td>\n<td>sa</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Sanskrit (India)</td>\n<td>sa-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Sinhala</td>\n<td>si</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Sinhala (Sri Lanka)</td>\n<td>si-LK</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Syriac</td>\n<td>syr</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Syriac (Syria)</td>\n<td>syr-SY</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Tamil</td>\n<td>ta</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Tamil (India)</td>\n<td>ta-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Telugu</td>\n<td>te</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Telugu (India)</td>\n<td>te-IN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Thai</td>\n<td>th</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Thai (Thailand)</td>\n<td>th-Th</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Uighur</td>\n<td>ug</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Uighur (PRC)</td>\n<td>ug-CN</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Urdu</td>\n<td>ur</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Urdu (Pakistan)</td>\n<td>ur-PK</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Vietnamese</td>\n<td>vi</td>\n<td>en-US</td>\n</tr>\n<tr>\n<td>Vietnamese (Vietnam)</td>\n<td>vi-VN</td>\n<td>en-US</td>\n</tr>\n</tbody>\n</table>\n<p> Your application can use<a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> to create a replacement for a culture, and that culture can have a console fallback culture of your choosing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the fallback user interface culture associated with a culture object.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.ci.getCFUIC#1\">// This example demonstrates the GetConsoleFallbackUICulture() method\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    CultureInfo ci = new CultureInfo(&quot;ar-DZ&quot;);\n    Console.WriteLine(&quot;Culture name: . . . . . . . . . {0}&quot;, ci.Name);\n    Console.WriteLine(&quot;Console fallback UI culture:. . {0}&quot;,\n                       ci.GetConsoleFallbackUICulture().Name);\n    }\n}\n/*\nThis code example produces the following results:\n\nCulture name: . . . . . . . . . ar-DZ\nConsole fallback UI culture:. . fr-FR\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"sys.glob.ci.getCFUIC#1\">// This example demonstrates the GetConsoleFallbackUICulture() method\nusing namespace System;\nusing namespace System::Globalization;\n\nint main()\n{\n    CultureInfo^ ci = gcnew CultureInfo(&quot;ar-DZ&quot;);\n    Console::WriteLine(&quot;Culture name: . . . . . . . . . {0}&quot;, ci-&gt;Name);\n    Console::WriteLine(&quot;Console fallback UI culture:. . {0}&quot;,\n        ci-&gt;GetConsoleFallbackUICulture()-&gt;Name);\n}\n/*\nThis code example produces the following results:\n\nCulture name: . . . . . . . . . ar-DZ\nConsole fallback UI culture:. . fr-FR\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.ci.getCFUIC#1\">&#39; This example demonstrates the GetConsoleFallbackUICulture() method\nImports System\nImports System.Globalization\n\nClass Sample\n   Public Shared Sub Main()\n      Dim ci As New CultureInfo(&quot;ar-DZ&quot;)\n      Console.WriteLine(&quot;Culture name: . . . . . . . . . {0}&quot;, ci.Name)\n      Console.WriteLine(&quot;Console fallback UI culture:. . {0}&quot;, _\n                         ci.GetConsoleFallbackUICulture().Name)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Culture name: . . . . . . . . . ar-DZ\n&#39;Console fallback UI culture:. . fr-FR\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_GetCultureInfo_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_GetCultureInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCultureInfo(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a cached, read-only instance of a culture by using the specified culture identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo GetCultureInfo (int culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A locale identifier (LCID).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> specifies a culture that is not supported. See the Notes to Caller section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>We recommend that you use the string overload of this method (<a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfo_System_String_\" data-linktype=\"relative-path\">GetCultureInfo(String)</a>), because locale names should be used instead of LCIDs. For custom locales, the locale name is required.  </p>\n<p> If <code>culture</code> is the locale identifier of the current culture, the returned <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object does not reflect any user overrides.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_GetCultureInfo_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_GetCultureInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCultureInfo(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a cached, read-only instance of a culture using the specified culture name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo GetCultureInfo (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a culture. <code>name</code> is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> specifies a culture that is not supported. See the Notes to Callers section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of predefined culture names, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center. In addition, starting with Windows 10, <code>name</code> can be any valid BCP-47 language tag.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfo_\" data-linktype=\"relative-path\">GetCultureInfo</a> method retrieves a cached, read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. It offers better performance than a corresponding call to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_\" data-linktype=\"relative-path\">System.Globalization.CultureInfo.CultureInfo(String)</a> constructor.  </p>\n<p> If <code>name</code> is the name of the current culture, the returned <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object does not reflect any user overrides. This makes the method suitable for server applications or tools that do not have a real user account on the system and that need to load multiple cultures efficiently.  </p>\n<p> If <code>name</code> is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, the method returns the invariant culture. This is equivalent to retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_GetCultureInfo_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_GetCultureInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCultureInfo(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a cached, read-only instance of a culture. Parameters specify a culture that is initialized with the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> and <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects specified by another culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a culture. <code>name</code> is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>altName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a culture that supplies the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> and <a class=\"xref\" href=\"system.globalization.compareinfo\" data-linktype=\"relative-path\">CompareInfo</a> objects used to initialize <code>name</code>. <code>altName</code> is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>altName</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>altName</code> specifies a culture that is not supported. See the Notes to Callers section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of predefined culture names, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> at the Go Global Developer Center. In addition, starting with Windows 10, <code>name</code> can be any valid BCP-47 language tag.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfo_\" data-linktype=\"relative-path\">GetCultureInfo</a> method obtains a cached, read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. It offers better performance than a corresponding call to a <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_\" data-linktype=\"relative-path\">CultureInfo</a> constructor. The method is used to create a culture similar to that specified by the <code>name</code> parameter, but with different sorting and casing rules.  </p>\n<p> If <code>name</code> or <code>altName</code> is the name of the current culture, the returned objects do not reflect any user overrides. If <code>name</code> is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, the method returns the invariant culture. This is equivalent to retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property. If <code>altName</code> is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, the method uses the writing system and comparison rules specified by the invariant culture.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCultureInfoByIetfLanguageTag(String)</div>        \r\n          </div>\r\n    \r\n            <p>Deprecated. Retrieves a read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object having linguistic characteristics that are identified by the specified RFC 4646 language tag.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a language as specified by the RFC 4646 standard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturenotfoundexception\" data-linktype=\"relative-path\">CultureNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> does not correspond to a supported culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method and the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_IetfLanguageTag_\" data-linktype=\"relative-path\">IetfLanguageTag</a> property are deprecated. Instead of using these elements, the application should use a new <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object and calls to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property. IETF tags and names are identical.  </p>\n</div>\n<p> The RFC 4646 standard that is maintained by the Internet Engineering Task Force (IETF) defines an IETF language tag, which provides a uniform means of identifying a language. The format of an IETF language tag is the same as the culture name returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Name_\" data-linktype=\"relative-path\">Name</a> property, but does not identify a culture uniquely. Different cultures share the same IETF language tag if those cultures have identical linguistic characteristics. The linguistic characteristics of a culture are contained in the <a class=\"xref\" href=\"system.globalization.textinfo\" data-linktype=\"relative-path\">TextInfo</a> object associated with a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.  </p>\n<p> An IETF language tag consists of a mandatory language identifier, an optional script identifier, and an optional region identifier.  </p>\n<p> Your applications should use the retrieved culture to control language-specific tasks, such as managing a spelling or grammar checker. Applications should not use the retrieved culture to control culture-specific tasks, such as sorting text or formatting times and dates.  </p>\n<p> For more information, see RFC 4646, &quot;Tags for Identifying Languages,&quot; and the most recent draft standard, Draft-phillips-langtags-05.txt, at <a href=\"http://go.microsoft.com/fwlink/?LinkId=100231\" data-linktype=\"external\">http://go.microsoft.com/fwlink/?LinkId=100231</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_GetCultures_System_Globalization_CultureTypes_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_GetCultures_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCultures(CultureTypes)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of supported cultures filtered by the specified <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a> parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values that filter the cultures to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the cultures specified by the <code>types</code> parameter. The array of cultures is unsorted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>types</code> specifies an invalid combination of <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetCultures method is most commonly called with the <code>types</code> parameter set to the following values:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a>, which returns all specific cultures.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a>, which returns all neutral cultures and the invariant culture.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a>, which returns all neutral and specific cultures, cultures installed in the Windows system, and custom cultures created by the user.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a>, which returns all custom cultures, such as those registered by the <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> class. In versions of Windows before Windows 10, the <a class=\"xref\" href=\"system.globalization.culturetypes\" data-linktype=\"relative-path\">CultureTypes</a> value applies to all user-defined custom cultures. Starting with Windows 10, it applies to system cultures that lack complete cultural data and that do not have a unique local identifier, as indicated by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_LCID_\" data-linktype=\"relative-path\">LCID</a> property value. As a result, code such as the following will return different results when run on Windows 10 and on an earlier version of Windows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.GetCultures#2\">Imports System.Globalization\n\nModule Example\n   Sub Main()\n       Dim cultures() As CultureInfo = CultureInfo.GetCultures(CultureTypes.UserCustomCulture Or\n                                                               CultureTypes.SpecificCultures)\n      Dim ctr As Integer = 0\n      For Each culture In cultures\n         If (culture.CultureTypes And CultureTypes.UserCustomCulture) = CultureTypes.UserCustomCulture Then\n            ctr += 1\n         End If\n      Next\n      Console.WriteLine(&quot;Number of Specific Custom Cultures: {0}&quot;, ctr)\n   End Sub\nEnd Module\n&#39; If run under Windows 8, the example displays output like the following:\n&#39;      Number of Specific Custom Cultures: 6\n&#39; If run under Windows 10, the example displays output like the following:\n&#39;      Number of Specific Custom Cultures: 279\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.GetCultures#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n       CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.UserCustomCulture |\n                                                        CultureTypes.SpecificCultures);\n      int ctr = 0;\n      foreach (var culture in cultures)\n         if ((culture.CultureTypes &amp; CultureTypes.UserCustomCulture) == CultureTypes.UserCustomCulture)\n            ctr++;\n\n      Console.WriteLine(&quot;Number of Specific Custom Cultures: {0}&quot;, ctr);\n   }\n}\n// If run under Windows 8, the example displays output like the following:\n//      Number of Specific Custom Cultures: 6\n// If run under Windows 10, the example displays output like the following:\n//      Number of Specific Custom Cultures: 279\n</code></pre></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays several properties of the neutral cultures.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example displays the zh-CHS and zh-CHT cultures with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;);\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.NeutralCultures))\n      {\n         Console.Write(&quot;{0,-7}&quot;, ci.Name);\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName);\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName);\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName);\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Displays several properties of the neutral cultures.\n   Console::WriteLine( &quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot; );\n   System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures( CultureTypes::NeutralCultures )-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;{0,-7}&quot;, ci-&gt;Name );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;TwoLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterWindowsLanguageName );\n      Console::Write( &quot; {0,-40}&quot;, ci-&gt;DisplayName );\n      Console::WriteLine( &quot; {0,-40}&quot;, ci-&gt;EnglishName );\n   }\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.GetCultures#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n   Public Sub Main()\n\n      &#39; Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;)\n      Dim ci As CultureInfo\n      For Each ci In CultureInfo.GetCultures(CultureTypes.NeutralCultures)\n         Console.Write(&quot;{0,-7}&quot;, ci.Name)\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName)\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName)\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName)\n      Next ci\n\n   End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.  This output has been cropped for brevity.\n&#39;\n&#39;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\n&#39;ar      ar  ara ARA Arabic                                   Arabic                                  \n&#39;bg      bg  bul BGR Bulgarian                                Bulgarian                               \n&#39;ca      ca  cat CAT Catalan                                  Catalan                                 \n&#39;zh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \n&#39;cs      cs  ces CSY Czech                                    Czech                                   \n&#39;da      da  dan DAN Danish                                   Danish                                  \n&#39;de      de  deu DEU German                                   German                                  \n&#39;el      el  ell ELL Greek                                    Greek                                   \n&#39;en      en  eng ENU English                                  English                                 \n&#39;es      es  spa ESP Spanish                                  Spanish                                 \n&#39;fi      fi  fin FIN Finnish                                  Finnish                                 \n&#39;zh      zh  zho CHS Chinese                                  Chinese                                 \n&#39;zh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \n&#39;zh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \n&#39;zh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_GetFormat_System_Type_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_GetFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFormat(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that defines how to format the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object GetFormat (Type formatType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> for which to get a formatting object. This method only supports the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value of the <span class=\"xref\">stem.Globalization.CultureInfo.NumberFormat*</span> property, which is a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> containing the default number format information for the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, if <code>formatType</code> is the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class.  </p>\n<p> -or-  </p>\n<p> The value of the <span class=\"xref\">stem.Globalization.CultureInfo.DateTimeFormat*</span> property, which is a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> containing the default date and time format information for the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, if <code>formatType</code> is the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> class.  </p>\n<p> -or-  </p>\n<p> null, if <code>formatType</code> is any other object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetFormat implements <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a>.  </p>\n<p> <code>NumberFormatInfo</code> provides the culture-specific numeric format used in conjunction with the Format methods in the base data types. <code>DateTimeFormatInfo</code> controls how the date and time values are formatted for a specific culture.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, suitable for hashing algorithms and data structures, such as a hash table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> This method generates the same hash code for two objects that are equal according to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_ReadOnly_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_ReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnly(CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a read-only wrapper around the specified <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ci</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object to wrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> wrapper around <code>ci</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>ci</code> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This wrapper prevents any modifications to <code>ci</code>, or the objects returned by the <code>ci</code>.<a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> and <code>ci</code>.<a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows that the ReadOnly method helps protect the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> instances associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.ReadOnly#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesCultureInfo\n\n   Public Shared Sub Main()\n      \n      &#39; Creates a CultureInfo.\n      Dim myCI As New CultureInfo(&quot;en-US&quot;)\n      \n      &#39; Creates a read-only CultureInfo based on myCI.\n      Dim myReadOnlyCI As CultureInfo = CultureInfo.ReadOnly(myCI)\n      \n      &#39; Display the read-only status of each CultureInfo and their DateTimeFormat and NumberFormat properties.\n      If myCI.IsReadOnly Then \n         Console.WriteLine(&quot;myCI is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myCI is writable.&quot;)\n      End If\n\n      If myCI.DateTimeFormat.IsReadOnly Then \n         Console.WriteLine(&quot;myCI.DateTimeFormat is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myCI.DateTimeFormat is writable.&quot;)\n      End If\n\n      If myCI.NumberFormat.IsReadOnly Then \n         Console.WriteLine(&quot;myCI.NumberFormat is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myCI.NumberFormat is writable.&quot;)\n      End If\n\n      If myReadOnlyCI.IsReadOnly Then \n         Console.WriteLine(&quot;myReadOnlyCI is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myReadOnlyCI is writable.&quot;)\n      End If\n\n      If myReadOnlyCI.DateTimeFormat.IsReadOnly Then \n         Console.WriteLine(&quot;myReadOnlyCI.DateTimeFormat is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myReadOnlyCI.DateTimeFormat is writable.&quot;)\n      End If\n\n      If myReadOnlyCI.NumberFormat.IsReadOnly Then \n         Console.WriteLine(&quot;myReadOnlyCI.NumberFormat is read only.&quot;)\n      Else\n         Console.WriteLine(&quot;myReadOnlyCI.NumberFormat is writable.&quot;)\n      End If\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCultureInfo\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; myCI is writable.\n&#39; myCI.DateTimeFormat is writable.\n&#39; myCI.NumberFormat is writable.\n&#39; myReadOnlyCI is read only.\n&#39; myReadOnlyCI.DateTimeFormat is read only.\n&#39; myReadOnlyCI.NumberFormat is read only.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.ReadOnly#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCultureInfo  {\n\n   public static void Main()  {\n\n      // Creates a CultureInfo.\n      CultureInfo myCI = new CultureInfo( &quot;en-US&quot; );\n\n      // Creates a read-only CultureInfo based on myCI.\n      CultureInfo myReadOnlyCI = CultureInfo.ReadOnly( myCI );\n\n      // Display the read-only status of each CultureInfo and their DateTimeFormat and NumberFormat properties.\n      Console.WriteLine( &quot;myCI is {0}.&quot;, myCI.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myCI.DateTimeFormat is {0}.&quot;, myCI.DateTimeFormat.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myCI.NumberFormat is {0}.&quot;, myCI.NumberFormat.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myReadOnlyCI is {0}.&quot;, myReadOnlyCI.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myReadOnlyCI.DateTimeFormat is {0}.&quot;, myReadOnlyCI.DateTimeFormat.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n      Console.WriteLine( &quot;myReadOnlyCI.NumberFormat is {0}.&quot;, myReadOnlyCI.NumberFormat.IsReadOnly ? &quot;read only&quot; : &quot;writable&quot; );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nmyCI is writable.\nmyCI.DateTimeFormat is writable.\nmyCI.NumberFormat is writable.\nmyReadOnlyCI is read only.\nmyReadOnlyCI.DateTimeFormat is read only.\nmyReadOnlyCI.NumberFormat is read only.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.ReadOnly#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates a CultureInfo.\n   CultureInfo^ myCI = gcnew CultureInfo( &quot;en-US&quot; );\n   \n   // Creates a read-only CultureInfo based on myCI -&gt; \n   CultureInfo^ myReadOnlyCI = CultureInfo::ReadOnly( myCI );\n   \n   // Display the read-only status of each CultureInfo and their DateTimeFormat and NumberFormat properties.\n   Console::WriteLine( &quot;myCI is {0}.&quot;, myCI-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myCI -&gt; DateTimeFormat is {0}.&quot;, myCI-&gt;DateTimeFormat-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myCI -&gt; NumberFormat is {0}.&quot;, myCI-&gt;NumberFormat-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myReadOnlyCI is {0}.&quot;, myReadOnlyCI-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myReadOnlyCI -&gt; DateTimeFormat is {0}.&quot;, myReadOnlyCI-&gt;DateTimeFormat-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n   Console::WriteLine( &quot;myReadOnlyCI -&gt; NumberFormat is {0}.&quot;, myReadOnlyCI-&gt;NumberFormat-&gt;IsReadOnly ? (String^)&quot;read only&quot; : &quot;writable&quot; );\n}\n\n/*\nThis code produces the following output.\n\nmyCI is writable.\nmyCI -&gt; DateTimeFormat is writable.\nmyCI -&gt; NumberFormat is writable.\nmyReadOnlyCI is read only.\nmyReadOnlyCI -&gt; DateTimeFormat is read only.\nmyReadOnlyCI -&gt; NumberFormat is read only.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_CultureInfo_ToString\">\r\n    \r\n            <a id=\"System_Globalization_CultureInfo_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string containing the name of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> in the format <em>languagecode2</em>-<em>country/regioncode2</em>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the name of the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>. It returns a normalized version of the culture name that is passed to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_\" data-linktype=\"relative-path\">CultureInfo(String)</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">CultureInfo(String,Boolean)</a> constructor or to the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CreateSpecificCulture_\" data-linktype=\"relative-path\">CreateSpecificCulture</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfo_System_String_\" data-linktype=\"relative-path\">GetCultureInfo(String)</a> method. It normalizes the result string by converting characters in <em>languagecode2</em> to lowercase and converting characters in <em>country/regioncode2</em> to uppercase if necessary.  </p>\n<p> Predefined culture names are listed in the <a href=\"http://go.microsoft.com/fwlink/?LinkId=200048\" data-linktype=\"external\">National Language Support (NLS) API Reference</a> page at the Go Global Developer Center.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.CultureInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.CultureInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.Calendar\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.ClearCachedData\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.Clone\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.CompareInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.CreateSpecificCulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.CultureTypes\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.CurrentCulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.CurrentUICulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.DateTimeFormat\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.DisplayName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.EnglishName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.GetConsoleFallbackUICulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.GetCultureInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.GetCultures\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.GetFormat\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.IetfLanguageTag\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.InstalledUICulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.InvariantCulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.IsNeutralCulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.KeyboardLayoutId\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.LCID\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.Name\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.NativeName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.NumberFormat\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.OptionalCalendars\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.Parent\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.ReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.TextInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.ThreeLetterISOLanguageName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.ToString\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.TwoLetterISOLanguageName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureInfo.UseUserOverride\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"32fac1d4-5a68-aa48-8766-8593af632d0d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort ord…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.CultureInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.CultureInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.CultureInfo.yml","open_to_public_contributors":true,"api_name":["System.Globalization.CultureInfo","System.Globalization.CultureInfo..ctor","System.Globalization.CultureInfo.Calendar","System.Globalization.CultureInfo.ClearCachedData","System.Globalization.CultureInfo.Clone","System.Globalization.CultureInfo.CompareInfo","System.Globalization.CultureInfo.CreateSpecificCulture","System.Globalization.CultureInfo.CultureTypes","System.Globalization.CultureInfo.CurrentCulture","System.Globalization.CultureInfo.CurrentUICulture","System.Globalization.CultureInfo.DateTimeFormat","System.Globalization.CultureInfo.DefaultThreadCurrentCulture","System.Globalization.CultureInfo.DefaultThreadCurrentUICulture","System.Globalization.CultureInfo.DisplayName","System.Globalization.CultureInfo.EnglishName","System.Globalization.CultureInfo.Equals","System.Globalization.CultureInfo.GetConsoleFallbackUICulture","System.Globalization.CultureInfo.GetCultureInfo","System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag","System.Globalization.CultureInfo.GetCultures","System.Globalization.CultureInfo.GetFormat","System.Globalization.CultureInfo.GetHashCode","System.Globalization.CultureInfo.IetfLanguageTag","System.Globalization.CultureInfo.InstalledUICulture","System.Globalization.CultureInfo.InvariantCulture","System.Globalization.CultureInfo.IsNeutralCulture","System.Globalization.CultureInfo.IsReadOnly","System.Globalization.CultureInfo.KeyboardLayoutId","System.Globalization.CultureInfo.LCID","System.Globalization.CultureInfo.Name","System.Globalization.CultureInfo.NativeName","System.Globalization.CultureInfo.NumberFormat","System.Globalization.CultureInfo.OptionalCalendars","System.Globalization.CultureInfo.Parent","System.Globalization.CultureInfo.ReadOnly","System.Globalization.CultureInfo.TextInfo","System.Globalization.CultureInfo.ThreeLetterISOLanguageName","System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName","System.Globalization.CultureInfo.ToString","System.Globalization.CultureInfo.TwoLetterISOLanguageName","System.Globalization.CultureInfo.UseUserOverride"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.CultureInfo","System::Globalization::CultureInfo","System.Globalization.CultureInfo.#ctor","System::Globalization::CultureInfo::#ctor","System.Globalization.CultureInfo.Calendar","System::Globalization::CultureInfo::Calendar","System.Globalization.CultureInfo.ClearCachedData","System::Globalization::CultureInfo::ClearCachedData","System.Globalization.CultureInfo.Clone","System::Globalization::CultureInfo::Clone","System.Globalization.CultureInfo.CompareInfo","System::Globalization::CultureInfo::CompareInfo","System.Globalization.CultureInfo.CreateSpecificCulture","System::Globalization::CultureInfo::CreateSpecificCulture","System.Globalization.CultureInfo.CultureTypes","System::Globalization::CultureInfo::CultureTypes","System.Globalization.CultureInfo.CurrentCulture","System::Globalization::CultureInfo::CurrentCulture","System.Globalization.CultureInfo.CurrentUICulture","System::Globalization::CultureInfo::CurrentUICulture","System.Globalization.CultureInfo.DateTimeFormat","System::Globalization::CultureInfo::DateTimeFormat","System.Globalization.CultureInfo.DefaultThreadCurrentCulture","System::Globalization::CultureInfo::DefaultThreadCurrentCulture","System.Globalization.CultureInfo.DefaultThreadCurrentUICulture","System::Globalization::CultureInfo::DefaultThreadCurrentUICulture","System.Globalization.CultureInfo.DisplayName","System::Globalization::CultureInfo::DisplayName","System.Globalization.CultureInfo.EnglishName","System::Globalization::CultureInfo::EnglishName","System.Globalization.CultureInfo.Equals","System::Globalization::CultureInfo::Equals","System.Globalization.CultureInfo.GetConsoleFallbackUICulture","System::Globalization::CultureInfo::GetConsoleFallbackUICulture","System.Globalization.CultureInfo.GetCultureInfo","System::Globalization::CultureInfo::GetCultureInfo","System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag","System::Globalization::CultureInfo::GetCultureInfoByIetfLanguageTag","System.Globalization.CultureInfo.GetCultures","System::Globalization::CultureInfo::GetCultures","System.Globalization.CultureInfo.GetFormat","System::Globalization::CultureInfo::GetFormat","System.Globalization.CultureInfo.GetHashCode","System::Globalization::CultureInfo::GetHashCode","System.Globalization.CultureInfo.IetfLanguageTag","System::Globalization::CultureInfo::IetfLanguageTag","System.Globalization.CultureInfo.InstalledUICulture","System::Globalization::CultureInfo::InstalledUICulture","System.Globalization.CultureInfo.InvariantCulture","System::Globalization::CultureInfo::InvariantCulture","System.Globalization.CultureInfo.IsNeutralCulture","System::Globalization::CultureInfo::IsNeutralCulture","System.Globalization.CultureInfo.IsReadOnly","System::Globalization::CultureInfo::IsReadOnly","System.Globalization.CultureInfo.KeyboardLayoutId","System::Globalization::CultureInfo::KeyboardLayoutId","System.Globalization.CultureInfo.LCID","System::Globalization::CultureInfo::LCID","System.Globalization.CultureInfo.Name","System::Globalization::CultureInfo::Name","System.Globalization.CultureInfo.NativeName","System::Globalization::CultureInfo::NativeName","System.Globalization.CultureInfo.NumberFormat","System::Globalization::CultureInfo::NumberFormat","System.Globalization.CultureInfo.OptionalCalendars","System::Globalization::CultureInfo::OptionalCalendars","System.Globalization.CultureInfo.Parent","System::Globalization::CultureInfo::Parent","System.Globalization.CultureInfo.ReadOnly","System::Globalization::CultureInfo::ReadOnly","System.Globalization.CultureInfo.TextInfo","System::Globalization::CultureInfo::TextInfo","System.Globalization.CultureInfo.ThreeLetterISOLanguageName","System::Globalization::CultureInfo::ThreeLetterISOLanguageName","System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName","System::Globalization::CultureInfo::ThreeLetterWindowsLanguageName","System.Globalization.CultureInfo.ToString","System::Globalization::CultureInfo::ToString","System.Globalization.CultureInfo.TwoLetterISOLanguageName","System::Globalization::CultureInfo::TwoLetterISOLanguageName","System.Globalization.CultureInfo.UseUserOverride","System::Globalization::CultureInfo::UseUserOverride"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"32fac1d4-5a68-aa48-8766-8593af632d0d","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/CultureInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CultureInfo class | Microsoft Docs","_op_ogTitle":"CultureInfo class","description":"Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort ord…","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.CultureInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.cultureinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.cultureinfo","fileRelativePath":"System.Globalization.CultureInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}