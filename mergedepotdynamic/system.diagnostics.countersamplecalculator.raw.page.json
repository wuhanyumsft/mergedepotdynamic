{"content":"    \r\n    <h1 id=\"System_Diagnostics_CounterSampleCalculator\">\r\n      <span class=\"lang-csharp\">CounterSampleCalculator</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a set of utility functions for interpreting performance counter data.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class CounterSampleCalculator</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CounterSampleCalculator</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_CounterSampleCalculator_ComputeCounterValue_System_Diagnostics_CounterSample_\" data-linktype=\"self-bookmark\">ComputeCounterValue(CounterSample)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the calculated value of a single raw counter sample.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_CounterSampleCalculator_ComputeCounterValue_System_Diagnostics_CounterSample_System_Diagnostics_CounterSample_\" data-linktype=\"self-bookmark\">ComputeCounterValue(CounterSample,CounterSample)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the calculated value of two raw counter samples.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_CounterSampleCalculator_ComputeCounterValue_System_Diagnostics_CounterSample_\">\r\n    \r\n            <a id=\"System_Diagnostics_CounterSampleCalculator_ComputeCounterValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ComputeCounterValue(CounterSample)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the calculated value of a single raw counter sample.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ComputeCounterValue (System.Diagnostics.CounterSample newSample);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newSample</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> that indicates the most recent sample the system has taken.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A floating-point representation of the performance counter&#39;s calculated value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ComputeCounterValue method overload returns meaningful results only for performance counters of the following <a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a>:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a>  \n</li>\n<li><a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a>  \n\n<p>For other counter types, this overload always returns a value of 0 (zero).</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_CounterSampleCalculator_ComputeCounterValue_System_Diagnostics_CounterSample_System_Diagnostics_CounterSample_\">\r\n    \r\n            <a id=\"System_Diagnostics_CounterSampleCalculator_ComputeCounterValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ComputeCounterValue(CounterSample,CounterSample)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the calculated value of two raw counter samples.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ComputeCounterValue (System.Diagnostics.CounterSample oldSample, System.Diagnostics.CounterSample newSample);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldSample</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> that indicates a previous sample the system has taken.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newSample</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> that indicates the most recent sample the system has taken.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A floating-point representation of the performance counter&#39;s calculated value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>oldSample</code> uses a counter type that is different from <code>newSample</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></div>\r\n                  </div>\r\n                  <p><code>newSample</code> counter type has a Performance Data Helper (PDH) error. For more information, see &quot;Checking PDH Interface Return Values&quot; in the Win32 and COM Development section of this documentation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the ComputeCounterValue method overload to calculate the value of two raw counter samples.  </p>\n<pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.AverageCounter64#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\n\n// Output information about the counter sample.\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;\\r<br>+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r<br>&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n//    Description - This counter type shows how many items are processed, on average,\n//        during an operation. Counters of this type display a ratio of the items \n//        processed (such as bytes sent) to the number of operations completed. The  \n//        ratio is calculated by comparing the number of items processed during the \n//        last interval to the number of operations completed during the last interval. \n// Generic type - Average\n//      Formula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n//        of items processed during the last sample interval and the denominator (D) \n//        represents the number of operations completed during the last two sample \n//        intervals. \n//    Average (Nx - N0) / (Dx - D0)  \n//    Example PhysicalDisk\\ Avg. Disk Bytes/Transfer \n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\nfloat MyComputeCounterValue( CounterSample s0, CounterSample s1 )\n{\n   float numerator = (float)s1.RawValue - (float)s0.RawValue;\n   float denomenator = (float)s1.BaseValue - (float)s0.BaseValue;\n   float counterValue = numerator / denomenator;\n   return counterValue;\n}\n\nbool SetupCategory()\n{\n   if (  !PerformanceCounterCategory::Exists( &quot;AverageCounter64SampleCategory&quot; ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n      \n      // Add the counter.\n      CounterCreationData^ averageCount64 = gcnew CounterCreationData;\n      averageCount64-&gt;CounterType = PerformanceCounterType::AverageCount64;\n      averageCount64-&gt;CounterName = &quot;AverageCounter64Sample&quot;;\n      CCDC-&gt;Add( averageCount64 );\n      \n      // Add the base counter.\n      CounterCreationData^ averageCount64Base = gcnew CounterCreationData;\n      averageCount64Base-&gt;CounterType = PerformanceCounterType::AverageBase;\n      averageCount64Base-&gt;CounterName = &quot;AverageCounter64SampleBase&quot;;\n      CCDC-&gt;Add( averageCount64Base );\n      \n      // Create the category.\n      PerformanceCounterCategory::Create( &quot;AverageCounter64SampleCategory&quot;, &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;, CCDC );\n      return (true);\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - AverageCounter64SampleCategory&quot; );\n      return (false);\n   }\n}\n\nvoid CreateCounters( PerformanceCounter^% PC, PerformanceCounter^% BPC )\n{\n   \n   // Create the counters.\n   PC = gcnew PerformanceCounter( &quot;AverageCounter64SampleCategory&quot;,&quot;AverageCounter64Sample&quot;,false );\n\n   BPC = gcnew PerformanceCounter( &quot;AverageCounter64SampleCategory&quot;,&quot;AverageCounter64SampleBase&quot;,false );\n   PC-&gt;RawValue = 0;\n   BPC-&gt;RawValue = 0;\n}\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC, PerformanceCounter^ BPC )\n{\n   Random^ r = gcnew Random( DateTime::Now.Millisecond );\n\n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      int value = r-&gt;Next( 1, 10 );\n      Console::Write( &quot;{0} = {1}&quot;, j, value );\n      PC-&gt;IncrementBy( value );\n      BPC-&gt;Increment();\n      if ( (j % 10) == 9 )\n      {\n         OutputSample( PC-&gt;NextSample() );\n         samplesList-&gt;Add( PC-&gt;NextSample() );\n      }\n      else\n            Console::WriteLine();\n      System::Threading::Thread::Sleep( 50 );\n   }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n   for ( int i = 0; i &lt; (samplesList-&gt;Count - 1); i++ )\n   {\n      // Output the sample.\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) );\n      \n      // Use .NET to calculate the counter value.\n      Console::WriteLine( &quot;.NET computed counter value = {0}&quot;, CounterSampleCalculator::ComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n      \n      // Calculate the counter value manually.\n      Console::WriteLine( &quot;My computed counter value = {0}&quot;, MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n   }\n}\n\nint main()\n{\n   ArrayList^ samplesList = gcnew ArrayList;\n   PerformanceCounter^ PC;\n   PerformanceCounter^ BPC;\n   SetupCategory();\n   CreateCounters( PC, BPC );\n   CollectSamples( samplesList, PC, BPC );\n   CalculateResults( samplesList );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"PerformanceCounterType.AverageCounter64#1\">\nusing System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\npublic class App {\n\n    private static PerformanceCounter avgCounter64Sample;\n    private static PerformanceCounter avgCounter64SampleBase;\n\n    public static void Main()\n    {\n    \n        ArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Performance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n        CollectSamples(samplesList);\n        CalculateResults(samplesList);\n\n    }\n\n    private static bool SetupCategory()\n    {\n        if ( !PerformanceCounterCategory.Exists(&quot;AverageCounter64SampleCategory&quot;) ) \n        {\n\n            CounterCreationDataCollection counterDataCollection = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData averageCount64 = new CounterCreationData();\n            averageCount64.CounterType = PerformanceCounterType.AverageCount64;\n            averageCount64.CounterName = &quot;AverageCounter64Sample&quot;;\n            counterDataCollection.Add(averageCount64);\n\n            // Add the base counter.\n            CounterCreationData averageCount64Base = new CounterCreationData();\n            averageCount64Base.CounterType = PerformanceCounterType.AverageBase;\n            averageCount64Base.CounterName = &quot;AverageCounter64SampleBase&quot;;\n            counterDataCollection.Add(averageCount64Base);\n\n            // Create the category.\n            PerformanceCounterCategory.Create(&quot;AverageCounter64SampleCategory&quot;,\n                &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, counterDataCollection);\n\n            return(true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - AverageCounter64SampleCategory&quot;);\n            return(false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counters.\n\n        avgCounter64Sample = new PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, \n            &quot;AverageCounter64Sample&quot;, \n            false);\n\n\n        avgCounter64SampleBase = new PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, \n            &quot;AverageCounter64SampleBase&quot;, \n            false);\n\n        avgCounter64Sample.RawValue=0;\n        avgCounter64SampleBase.RawValue=0;\n    }\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\n        Random r = new Random( DateTime.Now.Millisecond );\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++) \n        {\n\n            int value = r.Next(1, 10);\n            Console.Write(j + &quot; = &quot; + value);\n\n            avgCounter64Sample.IncrementBy(value);\n\n            avgCounter64SampleBase.Increment();\n\n            if ((j % 10) == 9) \n            {\n                OutputSample(avgCounter64Sample.NextSample());\n                samplesList.Add( avgCounter64Sample.NextSample() );\n            }\n            else\n                Console.WriteLine();\n\n            System.Threading.Thread.Sleep(50);\n        }\n\n    }\n\n    private static void CalculateResults(ArrayList samplesList)\n    {\n        for(int i = 0; i &lt; (samplesList.Count - 1); i++)\n        {\n            // Output the sample.\n            OutputSample( (CounterSample)samplesList[i] );\n            OutputSample( (CounterSample)samplesList[i+1] );\n\n            // Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; +\n                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i+1]) );\n\n            // Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + \n                MyComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i+1]) );\n\n        }\n    }\n\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    //    Description - This counter type shows how many items are processed, on average,\n    //        during an operation. Counters of this type display a ratio of the items \n    //        processed (such as bytes sent) to the number of operations completed. The  \n    //        ratio is calculated by comparing the number of items processed during the \n    //        last interval to the number of operations completed during the last interval. \n    // Generic type - Average\n    //      Formula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n    //        of items processed during the last sample interval and the denominator (D) \n    //        represents the number of operations completed during the last two sample \n    //        intervals. \n    //    Average (Nx - N0) / (Dx - D0)  \n    //    Example PhysicalDisk\\ Avg. Disk Bytes/Transfer \n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n    {\n        Single numerator = (Single)s1.RawValue - (Single)s0.RawValue;\n        Single denomenator = (Single)s1.BaseValue - (Single)s0.BaseValue;\n        Single counterValue = numerator / denomenator;\n        return(counterValue);\n    }\n\n    // Output information about the counter sample.\n    private static void OutputSample(CounterSample s)\n    {\n        Console.WriteLine(&quot;\\r<br>+++++++++++&quot;);\n        Console.WriteLine(&quot;Sample values - \\r<br>&quot;);\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PerformanceCounterType.AverageCounter64#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n _\n\nPublic Class App\n\n    Private Shared avgCounter64Sample As PerformanceCounter\n    Private Shared avgCounter64SampleBase As PerformanceCounter\n\n\n    Public Shared Sub Main()\n\n        Dim samplesList As New ArrayList()\n        &#39;If the category does not exist, create the category and exit.\n        &#39;Performance counters should not be created and immediately used.\n        &#39;There is a latency time to enable the counters, they should be created\n        &#39;prior to executing the application that uses the counters.\n        &#39;Execute this sample a second time to use the counters.\n        If Not (SetupCategory()) Then\n            CreateCounters()\n            CollectSamples(samplesList)\n            CalculateResults(samplesList)\n        End If\n\n    End Sub &#39;Main\n\n    Private Shared Function SetupCategory() As Boolean\n        If Not PerformanceCounterCategory.Exists(&quot;AverageCounter64SampleCategory&quot;) Then\n\n            Dim counterDataCollection As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim averageCount64 As New CounterCreationData()\n            averageCount64.CounterType = PerformanceCounterType.AverageCount64\n            averageCount64.CounterName = &quot;AverageCounter64Sample&quot;\n            counterDataCollection.Add(averageCount64)\n\n            &#39; Add the base counter.\n            Dim averageCount64Base As New CounterCreationData()\n            averageCount64Base.CounterType = PerformanceCounterType.AverageBase\n            averageCount64Base.CounterName = &quot;AverageCounter64SampleBase&quot;\n            counterDataCollection.Add(averageCount64Base)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;AverageCounter64SampleCategory&quot;, _\n               &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;, _\n                      PerformanceCounterCategoryType.SingleInstance, counterDataCollection)\n\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - AverageCounter64SampleCategory&quot;)\n            Return False\n        End If\n    End Function &#39;SetupCategory\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counters.\n\n        avgCounter64Sample = New PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, &quot;AverageCounter64Sample&quot;, False)\n\n        avgCounter64SampleBase = New PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, &quot;AverageCounter64SampleBase&quot;, False)\n\n        avgCounter64Sample.RawValue = 0\n        avgCounter64SampleBase.RawValue = 0\n    End Sub &#39;CreateCounters\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n\n            Dim value As Integer = r.Next(1, 10)\n            Console.Write(j.ToString() + &quot; = &quot; + value.ToString())\n\n            avgCounter64Sample.IncrementBy(value)\n\n            avgCounter64SampleBase.Increment()\n\n            If j Mod 10 = 9 Then\n                OutputSample(avgCounter64Sample.NextSample())\n                samplesList.Add(avgCounter64Sample.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n    End Sub &#39;CollectSamples\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To (samplesList.Count - 1) - 1\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n            OutputSample(CType(samplesList((i + 1)), CounterSample))\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + MyComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n        Next i\n    End Sub &#39;CalculateResults\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39;\tDescription - This counter type shows how many items are processed, on average,\n    &#39;\t\tduring an operation. Counters of this type display a ratio of the items \n    &#39;\t\tprocessed (such as bytes sent) to the number of operations completed. The  \n    &#39;\t\tratio is calculated by comparing the number of items processed during the \n    &#39;\t\tlast interval to the number of operations completed during the last interval. \n    &#39; Generic type - Average\n    &#39;  \tFormula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n    &#39;\t\tof items processed during the last sample interval and the denominator (D) \n    &#39;\t\trepresents the number of operations completed during the last two sample \n    &#39;\t\tintervals. \n    &#39;\tAverage (Nx - N0) / (Dx - D0)  \n    &#39;\tExample PhysicalDisk\\ Avg. Disk Bytes/Transfer \n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal s0 As CounterSample, ByVal s1 As CounterSample) As [Single]\n        Dim numerator As [Single] = CType(s1.RawValue, [Single]) - CType(s0.RawValue, [Single])\n        Dim denomenator As [Single] = CType(s1.BaseValue, [Single]) - CType(s0.BaseValue, [Single])\n        Dim counterValue As [Single] = numerator / denomenator\n        Return counterValue\n    End Function &#39;MyComputeCounterValue\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Lf + ControlChars.Cr)\n        Console.WriteLine((&quot;   BaseValue        = &quot; + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   CounterType      = &quot; + s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + s.RawValue.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec.ToString()))\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub &#39;OutputSample\nEnd Class &#39;App\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.CounterSampleCalculator.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.CounterSampleCalculator.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSampleCalculator\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSampleCalculator.ComputeCounterValue\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"1202bf8f-05dc-4b71-38f4-ee76996ff0b8\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\CounterSampleCalculator.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a set of utility functions for interpreting performance counter data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.CounterSampleCalculator\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.CounterSampleCalculator.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.CounterSampleCalculator.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.CounterSampleCalculator","System.Diagnostics.CounterSampleCalculator.ComputeCounterValue"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.CounterSampleCalculator","System::Diagnostics::CounterSampleCalculator","System.Diagnostics.CounterSampleCalculator.ComputeCounterValue","System::Diagnostics::CounterSampleCalculator::ComputeCounterValue"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"1202bf8f-05dc-4b71-38f4-ee76996ff0b8","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\CounterSampleCalculator.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/CounterSampleCalculator.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CounterSampleCalculator class | Microsoft Docs","_op_ogTitle":"CounterSampleCalculator class","description":"Provides a set of utility functions for interpreting performance counter data.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.CounterSampleCalculator","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.countersamplecalculator","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.countersamplecalculator","fileRelativePath":"System.Diagnostics.CounterSampleCalculator.html"},"themesRelativePathToOutputRoot":"_themes/"}