{"content":"    \r\n    <h1 id=\"System_Globalization_DateTimeFormatInfo\">\r\n      <span class=\"lang-csharp\">DateTimeFormatInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides culture-specific information about the format of date and time values.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class DateTimeFormatInfo : ICloneable, IFormatProvider</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DateTimeFormatInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The properties of the DateTimeFormatInfo class contain culture-specific information for formatting or parsing date and time values such as the following:  </p>\n<ul>\n<li><p>The patterns used to format date values.  </p>\n</li>\n<li><p>The patterns used to format time values.  </p>\n</li>\n<li><p>The names of the days of the week.  </p>\n</li>\n<li><p>The names of the months of the year.  </p>\n</li>\n<li><p>The A.M. and P.M. designators used in time values.  </p>\n</li>\n<li><p>The calendar in which dates are expressed.  </p>\n<p>In this section:  </p>\n</li>\n<li><p><a href=\"#instantiating\" data-linktype=\"self-bookmark\">Instantiating a DateTimeFormatInfo object</a>  </p>\n<ul>\n<li><p><a href=\"#instantiating_Invariant\" data-linktype=\"self-bookmark\">For the Invariant Culture</a>  </p>\n</li>\n<li><p><a href=\"#instantiating_Specific\" data-linktype=\"self-bookmark\">For a Specific Culture</a>  </p>\n</li>\n<li><p><a href=\"#instantiating_neutral\" data-linktype=\"self-bookmark\">For a neutral culture</a>  </p>\n</li>\n<li><p><a href=\"#instantiating_Current\" data-linktype=\"self-bookmark\">For the current culture</a>  </p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#dynamic\" data-linktype=\"self-bookmark\">DateTimeFormatInfo and dynamic data</a>  </p>\n</li>\n<li><p><a href=\"#Formatting_dates_times\" data-linktype=\"self-bookmark\">Formatting dates and times</a>  </p>\n</li>\n<li><p><a href=\"#properties\" data-linktype=\"self-bookmark\">Format strings and DateTimeFormatInfo properties</a>  </p>\n</li>\n<li><p><a href=\"#Modifying\" data-linktype=\"self-bookmark\">Modifying DateTimeFormatInfo properties</a>  </p>\n</li>\n</ul>\n<p><a name=\"instantiating\"></a>   </p>\n<h2 id=\"instantiating-a-datetimeformatinfo-object\">Instantiating a DateTimeFormatInfo object</h2>\n<p> A DateTimeFormatInfo object can represent the formatting conventions of the invariant culture, a specific culture, a neutral culture, or the current culture. This section discusses how to instantiate each type of DateTimeFormatInfo object.  </p>\n<p><a name=\"instantiating_Invariant\"></a>   </p>\n<h3 id=\"instantiating-a-datetimeformatinfo-object-for-the-invariant-culture\">Instantiating a DateTimeFormatInfo object for the invariant culture</h3>\n<p> The invariant culture represents a culture that is culture-insensitive. It is based on the English language, but not on any specific English-speaking country/region. Although the data of specific cultures can be dynamic and can change to reflect new cultural conventions or user preferences, the data of the invariant culture does not change. You can instantiate a DateTimeFormatInfo object that represents the formatting conventions of the invariant culture in the following ways:  </p>\n<ul>\n<li><p>By retrieving the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_InvariantInfo_\" data-linktype=\"relative-path\">InvariantInfo</a> property. The returned DateTimeFormatInfo object is read-only.  </p>\n</li>\n<li><p>By calling the parameterless <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo__ctor_\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> constructor. The returned DateTimeFormatInfo object is read/write.  </p>\n</li>\n<li><p>By retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property from the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that is returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> property. The returned DateTimeFormatInfo object is read-only.  </p>\n<p>The following example uses each of these methods to instantiate a DateTimeFormatInfo object that represents the invariant culture. It then indicates whether the object is read-only.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#1\">      System.Globalization.DateTimeFormatInfo dtfi; \n      \n      dtfi = System.Globalization.DateTimeFormatInfo.InvariantInfo;\n      Console.WriteLine(dtfi.IsReadOnly);               \n\n      dtfi = new System.Globalization.DateTimeFormatInfo();\n      Console.WriteLine(dtfi.IsReadOnly);               \n      \n      dtfi = System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat;\n      Console.WriteLine(dtfi.IsReadOnly);                \n      // The example displays the following output:\n      //       True\n      //       False\n      //       True      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#1\">      Dim dtfi As System.Globalization.DateTimeFormatInfo\n      \n      dtfi = System.Globalization.DateTimeFormatInfo.InvariantInfo\n      Console.WriteLine(dtfi.IsReadOnly)               \n\n      dtfi = New System.Globalization.DateTimeFormatInfo()\n      Console.WriteLine(dtfi.IsReadOnly)               \n      \n      dtfi = System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat\n      Console.WriteLine(dtfi.IsReadOnly) \n      &#39; The example displays the following output:\n      &#39;       True\n      &#39;       False\n      &#39;       True      \n</code></pre></li>\n</ul>\n<p><a name=\"instantiating_Specific\"></a>   </p>\n<h3 id=\"instantiating-a-datetimeformatinfo-object-for-a-specific-culture\">Instantiating a DateTimeFormatInfo object for a specific culture</h3>\n<p> A specific culture represents a language that is spoken in a particular country/region. For example, en-US is a specific culture that represents the English language spoken in the United States, and en-CA is a specific culture that represents the English language spoken in Canada. You can instantiate a DateTimeFormatInfo object that represents the formatting conventions of a specific culture in the following ways:  </p>\n<ul>\n<li><p>By calling the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfo_System_String_\" data-linktype=\"relative-path\">System.Globalization.CultureInfo.GetCultureInfo(String)</a> method and retrieving the value of the returned <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object&#39;s <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property. The returned DateTimeFormatInfo object is read-only.  </p>\n</li>\n<li><p>By passing the static <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetInstance_\" data-linktype=\"relative-path\">GetInstance</a> method a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose DateTimeFormatInfo object you want to retrieve. The returned DateTimeFormatInfo object is read/write.  </p>\n</li>\n<li><p>By calling the static <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CreateSpecificCulture_\" data-linktype=\"relative-path\">CreateSpecificCulture</a> method and retrieving the value of the returned <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object&#39;s <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property. The returned DateTimeFormatInfo object is read/write.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_\" data-linktype=\"relative-path\">CultureInfo</a> class constructor and retrieving the value of the returned <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object&#39;s <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property. The returned DateTimeFormatInfo object is read/write.  </p>\n<p>The following example illustrates each of these ways to instantiate a DateTimeFormatInfo object and indicates whether the resulting object is read-only.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#3\">      System.Globalization.CultureInfo ci = null;\n      System.Globalization.DateTimeFormatInfo dtfi = null;\n      \n      // Instantiate a culture using CreateSpecificCulture.\n      ci = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      dtfi = ci.DateTimeFormat;\n      Console.WriteLine(&quot;{0} from CreateSpecificCulture: {1}&quot;, ci.Name, dtfi.IsReadOnly);\n      \n      // Instantiate a culture using the CultureInfo constructor.\n      ci = new System.Globalization.CultureInfo(&quot;en-CA&quot;); \n      dtfi = ci.DateTimeFormat;\n      Console.WriteLine(&quot;{0} from CultureInfo constructor: {1}&quot;, ci.Name, dtfi.IsReadOnly);\n      \n      // Retrieve a culture by calling the GetCultureInfo method.\n      ci = System.Globalization.CultureInfo.GetCultureInfo(&quot;en-AU&quot;);\n      dtfi = ci.DateTimeFormat;\n      Console.WriteLine(&quot;{0} from GetCultureInfo: {1}&quot;, ci.Name, dtfi.IsReadOnly);\n      \n      // Instantiate a DateTimeFormatInfo object by calling DateTimeFormatInfo.GetInstance.  \n      ci = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;);\n      dtfi = System.Globalization.DateTimeFormatInfo.GetInstance(ci);\n      Console.WriteLine(&quot;{0} from GetInstance: {1}&quot;, ci.Name, dtfi.IsReadOnly);\n      \n      // The example displays the following output:\n      //      en-US from CreateSpecificCulture: False\n      //      en-CA from CultureInfo constructor: False\n      //      en-AU from GetCultureInfo: True\n      //      en-GB from GetInstance: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#3\">      Dim ci As System.Globalization.CultureInfo = Nothing\n      Dim dtfi As System.Globalization.DateTimeFormatInfo = Nothing\n      \n      &#39; Instantiate a culture using CreateSpecificCulture.\n      ci = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      dtfi = ci.DateTimeFormat\n      Console.WriteLine(&quot;{0} from CreateSpecificCulture: {1}&quot;, ci.Name, dtfi.IsReadOnly)\n      \n      &#39; Instantiate a culture using the CultureInfo constructor.\n      ci = new System.Globalization.CultureInfo(&quot;en-CA&quot;) \n      dtfi = ci.DateTimeFormat\n      Console.WriteLine(&quot;{0} from CultureInfo constructor: {1}&quot;, ci.Name, dtfi.IsReadOnly)\n\n      &#39; Retrieve a culture by calling the GetCultureInfo method.\n      ci = System.Globalization.CultureInfo.GetCultureInfo(&quot;en-AU&quot;)\n      dtfi = ci.DateTimeFormat\n      Console.WriteLine(&quot;{0} from GetCultureInfo: {1}&quot;, ci.Name, dtfi.IsReadOnly)\n\n\n      &#39; Instantiate a DateTimeFormatInfo object by calling DateTimeFormatInfo.GetInstance.  \n      ci = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)\n      dtfi = System.Globalization.DateTimeFormatInfo.GetInstance(ci)\n      Console.WriteLine(&quot;{0} from GetInstance: {1}&quot;, ci.Name, dtfi.IsReadOnly)\n\n      &#39; The example displays the following output:\n      &#39;      en-US from CreateSpecificCulture: False\n      &#39;      en-CA from CultureInfo constructor: False\n      &#39;      en-AU from GetCultureInfo: True\n      &#39;      en-GB from GetInstance: False\n</code></pre></li>\n</ul>\n<p><a name=\"instantiating_neutral\"></a>   </p>\n<h3 id=\"instantiating-a-datetimeformatinfo-object-for-a-neutral-culture\">Instantiating a DateTimeFormatInfo object for a neutral culture</h3>\n<p> A neutral culture represents a culture or language that is independent of a country/region; it is typically the parent of one or more specific cultures. For example, Fr is a neutral culture for the French language and the parent of the fr-FR culture. You can instantiate a DateTimeFormatInfo object that represents the formatting conventions of a neutral culture in the same ways that you create a DateTimeFormatInfo object that represents the formatting conventions of a specific culture. In addition, you can retrieve a neutral culture&#39;s DateTimeFormatInfo object by retrieving a neutral culture from a specific culture&#39;s <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Parent_\" data-linktype=\"relative-path\">Parent</a> property and retrieving the DateTimeFormatInfo object returned by its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property. Unless the parent culture represents the invariant culture, the returned DateTimeFormatInfo object is read/write. The following example illustrates these ways of instantiating a DateTimeFormatInfo object that represents a neutral culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#2\">      System.Globalization.CultureInfo specific, neutral;\n      System.Globalization.DateTimeFormatInfo dtfi;\n     \n      // Instantiate a culture by creating a specific culture and using its Parent property.\n      specific = System.Globalization.CultureInfo.GetCultureInfo(&quot;fr-FR&quot;);\n      neutral = specific.Parent;\n      dtfi = neutral.DateTimeFormat;\n      Console.WriteLine(&quot;{0} from Parent property: {1}&quot;, neutral.Name, dtfi.IsReadOnly);\n      \n      dtfi = System.Globalization.CultureInfo.GetCultureInfo(&quot;fr-FR&quot;).Parent.DateTimeFormat;\n      Console.WriteLine(&quot;{0} from Parent property: {1}&quot;, neutral.Name, dtfi.IsReadOnly);\n\n      // Instantiate a neutral culture using the CultureInfo constructor.\n      neutral = new System.Globalization.CultureInfo(&quot;fr&quot;);\n      dtfi = neutral.DateTimeFormat;\n      Console.WriteLine(&quot;{0} from CultureInfo constructor: {1}&quot;, neutral.Name, dtfi.IsReadOnly);\n      \n      // Instantiate a culture using CreateSpecificCulture. \n      neutral = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;fr&quot;);\n      dtfi = neutral.DateTimeFormat;\n      Console.WriteLine(&quot;{0} from CreateSpecificCulture: {1}&quot;, neutral.Name, dtfi.IsReadOnly);\n      \n      // Retrieve a culture by calling the GetCultureInfo method.\n      neutral = System.Globalization.CultureInfo.GetCultureInfo(&quot;fr&quot;);\n      dtfi = neutral.DateTimeFormat;\n      Console.WriteLine(&quot;{0} from GetCultureInfo: {1}&quot;, neutral.Name, dtfi.IsReadOnly);\n\n      // Instantiate a DateTimeFormatInfo object by calling GetInstance.  \n      neutral = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;fr&quot;);\n      dtfi = System.Globalization.DateTimeFormatInfo.GetInstance(neutral);\n      Console.WriteLine(&quot;{0} from GetInstance: {1}&quot;, neutral.Name, dtfi.IsReadOnly);\n\n      // The example displays the following output:\n      //       fr from Parent property: False\n      //       fr from Parent property: False\n      //       fr from CultureInfo constructor: False\n      //       fr-FR from CreateSpecificCulture: False\n      //       fr from GetCultureInfo: True\n      //       fr-FR from GetInstance: False      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#2\">      Dim specific, neutral As System.Globalization.CultureInfo\n      Dim dtfi As System.Globalization.DateTimeFormatInfo\n     \n      &#39; Instantiate a culture by creating a specific culture and using its Parent property.\n      specific = System.Globalization.CultureInfo.GetCultureInfo(&quot;fr-FR&quot;)\n      neutral = specific.Parent\n      dtfi = neutral.DateTimeFormat\n      Console.WriteLine(&quot;{0} from Parent property: {1}&quot;, neutral.Name, dtfi.IsReadOnly)\n      \n      dtfi = System.Globalization.CultureInfo.GetCultureInfo(&quot;fr-FR&quot;).Parent.DateTimeFormat\n      Console.WriteLine(&quot;{0} from Parent property: {1}&quot;, neutral.Name, dtfi.IsReadOnly)\n\n      &#39; Instantiate a neutral culture using the CultureInfo constructor.\n      neutral = New System.Globalization.CultureInfo(&quot;fr&quot;)\n      dtfi = neutral.DateTimeFormat\n      Console.WriteLine(&quot;{0} from CultureInfo constructor: {1}&quot;, neutral.Name, dtfi.IsReadOnly)\n\n      &#39; Instantiate a culture using CreateSpecificCulture. \n      neutral = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;fr&quot;)\n      dtfi = neutral.DateTimeFormat\n      Console.WriteLine(&quot;{0} from CreateSpecificCulture: {1}&quot;, neutral.Name, dtfi.IsReadOnly)\n      \n      &#39; Retrieve a culture by calling the GetCultureInfo method.\n      neutral = System.Globalization.CultureInfo.GetCultureInfo(&quot;fr&quot;)\n      dtfi = neutral.DateTimeFormat\n      Console.WriteLine(&quot;{0} from GetCultureInfo: {1}&quot;, neutral.Name, dtfi.IsReadOnly)\n      \n      &#39; Instantiate a DateTimeFormatInfo object by calling GetInstance.  \n      neutral = System.Globalization.CultureInfo.CreateSpecificCulture(&quot;fr&quot;)\n      dtfi = System.Globalization.DateTimeFormatInfo.GetInstance(neutral)\n      Console.WriteLine(&quot;{0} from GetInstance: {1}&quot;, neutral.Name, dtfi.IsReadOnly)\n\n      &#39; The example displays the following output:\n      &#39;       fr from Parent property: False\n      &#39;       fr from Parent property: False\n      &#39;       fr from CultureInfo constructor: False\n      &#39;       fr-FR from CreateSpecificCulture: False\n      &#39;       fr from GetCultureInfo: True\n      &#39;       fr-FR from GetInstance: False       \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 through .NET Framework 3.5, trying to retrieve a DateTimeFormatInfo object that  reflects the formatting conventions of a neutral culture throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception.  </p>\n</div>\n<p> However, a neutral culture lacks culture-specific formatting information, because it is independent of a specific country/region. Instead of populating the DateTimeFormatInfo object with generic values, the .NET Framework returns a DateTimeFormatInfo object that reflects the formatting conventions of a specific culture that is a child of the neutral culture. For example, the DateTimeFormatInfo object for the neutral en culture reflects the formatting conventions of the en-US culture, and the DateTimeFormatInfo object for the fr culture reflects the formatting conventions of the fr-FR culture.  </p>\n<p> You can use code like the following to determine which specific culture&#39;s formatting conventions a neutral culture represents. The example uses reflection to compare the DateTimeFormatInfo properties of a neutral culture with the properties of a specific child culture. It considers two calendars to be equivalent if they are the same calendar type and, for Gregorian calendars, if their <a class=\"xref\" href=\"system.globalization.gregoriancalendar#System_Globalization_GregorianCalendar_CalendarType_\" data-linktype=\"relative-path\">CalendarType</a> properties have identical values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#6\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get all the neutral cultures\n      List&lt;String&gt; names = new List&lt;String&gt;();\n      Array.ForEach(CultureInfo.GetCultures(CultureTypes.NeutralCultures),\n                    culture =&gt; names.Add(culture.Name));\n      names.Sort();\n      foreach (var name in names) {\n         // Ignore the invariant culture.\n         if (name == &quot;&quot;) continue;\n         \n         ListSimilarChildCultures(name);        \n      }\n   }\n\n   private static void ListSimilarChildCultures(String name)\n   {\n      // Create the neutral DateTimeFormatInfo object.\n      DateTimeFormatInfo dtfi = CultureInfo.GetCultureInfo(name).DateTimeFormat;\n      // Retrieve all specific cultures of the neutral culture.\n      CultureInfo[] cultures = Array.FindAll(CultureInfo.GetCultures(CultureTypes.SpecificCultures), \n                               culture =&gt; culture.Name.StartsWith(name + &quot;-&quot;, StringComparison.OrdinalIgnoreCase));\n      // Create an array of DateTimeFormatInfo properties\n      PropertyInfo[] properties = typeof(DateTimeFormatInfo).GetProperties(BindingFlags.Instance | BindingFlags.Public);\n      bool hasOneMatch = false;\n\n      foreach (var ci in cultures) {\n         bool match = true;     \n         // Get the DateTimeFormatInfo for a specific culture.\n         DateTimeFormatInfo specificDtfi = ci.DateTimeFormat;\n         // Compare the property values of the two.\n         foreach (var prop in properties) {\n            // We&#39;re not interested in the value of IsReadOnly.     \n            if (prop.Name == &quot;IsReadOnly&quot;) continue;\n            \n            // For arrays, iterate the individual elements to see if they are the same.\n            if (prop.PropertyType.IsArray) { \n               IList nList = (IList) prop.GetValue(dtfi, null);\n               IList sList = (IList) prop.GetValue(specificDtfi, null);\n               if (nList.Count != sList.Count) {\n                  match = false;\nConsole.WriteLine(&quot;   Different n in {2} array for {0} and {1}&quot;, name, ci.Name, prop.Name);\n                  break;\n               } \n\n               for (int ctr = 0; ctr &lt; nList.Count; ctr++) {\n                  if (! nList[ctr].Equals(sList[ctr])) { \n                     match = false;\nConsole.WriteLine(&quot;   {0} value different for {1} and {2}&quot;, prop.Name, name, ci.Name);                     \n                     break;\n                  }     \n               }\n               \n               if (! match) break;\n            }\n            // Get non-array values.\n            else {\n               Object specificValue = prop.GetValue(specificDtfi);\n               Object neutralValue = prop.GetValue(dtfi);\n                               \n               // Handle comparison of Calendar objects.\n               if (prop.Name == &quot;Calendar&quot;) { \n                  // The cultures have a different calendar type.\n                  if (specificValue.ToString() != neutralValue.ToString()) {\nConsole.WriteLine(&quot;   Different calendar types for {0} and {1}&quot;, name, ci.Name);\n                     match = false;\n                     break;\n                  }\n                   \n                  if (specificValue is GregorianCalendar) {\n                     if (((GregorianCalendar) specificValue).CalendarType != ((GregorianCalendar) neutralValue).CalendarType) {\nConsole.WriteLine(&quot;   Different Gregorian calendar types for {0} and {1}&quot;, name, ci.Name);\n                        match = false;\n                        break;\n                     }\n                  }\n               }\n               else if (! specificValue.Equals(neutralValue)) {\n                  match = false;\nConsole.WriteLine(&quot;   Different {0} values for {1} and {2}&quot;, prop.Name, name, ci.Name);                  \n                  break;   \n               }\n            }        \n         }\n         if (match) {\n            Console.WriteLine(&quot;DateTimeFormatInfo object for &#39;{0}&#39; matches &#39;{1}&#39;&quot;, \n                              name, ci.Name);\n            hasOneMatch = true;\n         }                                       \n      }\n      if (! hasOneMatch)\n         Console.WriteLine(&quot;DateTimeFormatInfo object for &#39;{0}&#39; --&gt; No Match&quot;, name);            \n\n      Console.WriteLine();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#6\">Imports System\nImports System.Collections\nImports System.Collections.Generic\nImports System.Globalization\nImports System.Reflection\n\nModule Example\n   Public Sub Main()\n      &#39; Get all the neutral cultures\n      Dim names As New List(Of String)\n      Array.ForEach(CultureInfo.GetCultures(CultureTypes.NeutralCultures),\n                    Sub(culture) names.Add(culture.Name))\n      names.Sort()\n      For Each name In names\n         &#39; Ignore the invariant culture.\n         If name = &quot;&quot; Then Continue For\n         \n         ListSimilarChildCultures(name)        \n      Next\n   End Sub\n\n   Private Sub ListSimilarChildCultures(name As String)\n      &#39; Create the neutral DateTimeFormatInfo object.\n      Dim dtfi As DateTimeFormatInfo = CultureInfo.GetCultureInfo(name).DateTimeFormat\n      &#39; Retrieve all specific cultures of the neutral culture.\n      Dim cultures() As CultureInfo = Array.FindAll(CultureInfo.GetCultures(CultureTypes.SpecificCultures), \n                               Function(culture) culture.Name.StartsWith(name + &quot;-&quot;, StringComparison.OrdinalIgnoreCase))\n      &#39; Create an array of DateTimeFormatInfo properties\n      Dim properties() As PropertyInfo = GetType(DateTimeFormatInfo).GetProperties(BindingFlags.Instance Or BindingFlags.Public)\n      Dim hasOneMatch As Boolean = False\n\n      For Each ci In cultures\n         Dim match As Boolean = True     \n         &#39; Get the DateTimeFormatInfo for a specific culture.\n         Dim specificDtfi As DateTimeFormatInfo = ci.DateTimeFormat\n         &#39; Compare the property values of the two.\n         For Each prop In properties\n            &#39; We&#39;re not interested in the value of IsReadOnly.     \n            If prop.Name = &quot;IsReadOnly&quot; Then Continue For\n            \n            &#39; For arrays, iterate the individual elements to see if they are the same.\n            If prop.PropertyType.IsArray Then \n               Dim nList As IList = CType(prop.GetValue(dtfi, Nothing), IList)\n               Dim sList As IList = CType(prop.GetValue(specificDtfi, Nothing), IList)\n               If nList.Count &lt;&gt; sList.Count Then\n                  match = false\nConsole.WriteLine(&quot;   Different n in {2} array for {0} and {1}&quot;, name, ci.Name, prop.Name)\n                  Exit For\n               End If \n\n               For ctr As Integer = 0 To nList.Count - 1\n                  If Not nList(ctr).Equals(sList(ctr)) \n                     match = false\nConsole.WriteLine(&quot;   {0} value different for {1} and {2}&quot;, prop.Name, name, ci.Name)                     \n                     Exit For\n                  End If     \n               Next\n               \n               If Not match Then Exit For\n            &#39; Get non-array values.\n            Else\n               Dim specificValue As Object = prop.GetValue(specificDtfi)\n               Dim neutralValue As Object = prop.GetValue(dtfi)\n                               \n               &#39; Handle comparison of Calendar objects.\n               If prop.Name = &quot;Calendar&quot; Then \n                  &#39; The cultures have a different calendar type.\n                  If specificValue.ToString() &lt;&gt; neutralValue.ToString() Then\nConsole.WriteLine(&quot;   Different calendar types for {0} and {1}&quot;, name, ci.Name)\n                     match = False\n                     Exit For\n                  End If\n                   \n                  If TypeOf specificValue Is GregorianCalendar Then\n                     If CType(specificValue, GregorianCalendar).CalendarType &lt;&gt; CType(neutralValue, GregorianCalendar).CalendarType Then\nConsole.WriteLine(&quot;   Different Gregorian calendar types for {0} and {1}&quot;, name, ci.Name)\n                        match = False\n                        Exit For\n                     End If\n                  End If\n               Else If Not specificValue.Equals(neutralValue) Then\n                  match = false\nConsole.WriteLine(&quot;   Different {0} values for {1} and {2}&quot;, prop.Name, name, ci.Name)                  \n                  Exit For   \n               End If\n            End If        \n         Next\n         If match Then\n            Console.WriteLine(&quot;DateTimeFormatInfo object for &#39;{0}&#39; matches &#39;{1}&#39;&quot;, \n                                      name, ci.Name)\n            hasOneMatch = True\n         End If                                       \n      Next\n      If Not hasOneMatch Then\n         Console.WriteLine(&quot;DateTimeFormatInfo object for &#39;{0}&#39; --&gt; No Match&quot;, name)            \n      End If\n      \n      Console.WriteLine()\n   End Sub\nEnd Module\n</code></pre><p><a name=\"instantiating_Current\"></a>   </p>\n<h3 id=\"instantiating-a-datetimeformatinfo-object-for-the-current-culture\">Instantiating a DateTimeFormatInfo object for the current culture</h3>\n<p> You can instantiate a DateTimeFormatInfo object that represents the formatting conventions of the current culture in the following ways:  </p>\n<ul>\n<li><p>By retrieving the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a> property. The returned DateTimeFormatInfo object is read-only.  </p>\n</li>\n<li><p>By retrieving the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property from the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that is returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property. The returned DateTimeFormatInfo object is read-only.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_GetInstance_\" data-linktype=\"relative-path\">GetInstance</a> method with a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current culture. The returned DateTimeFormatInfo object is read-only.  </p>\n<p>The following example uses each of these methods to instantiate a DateTimeFormatInfo object that represents the formatting conventions of the current culture. It then indicates whether the object is read-only.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#4\">      DateTimeFormatInfo dtfi;\n      \n      dtfi = DateTimeFormatInfo.CurrentInfo;\n      Console.WriteLine(dtfi.IsReadOnly);\n      \n      dtfi = CultureInfo.CurrentCulture.DateTimeFormat;\n      Console.WriteLine(dtfi.IsReadOnly);\n      \n      dtfi = DateTimeFormatInfo.GetInstance(CultureInfo.CurrentCulture);\n      Console.WriteLine(dtfi.IsReadOnly);\n      // The example displays the following output:\n      //     True\n      //     True\n      //     True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#4\">      Dim dtfi As DateTimeFormatInfo\n      \n      dtfi = DateTimeFormatInfo.CurrentInfo\n      Console.WriteLine(dtfi.IsReadOnly)\n      \n      dtfi = CultureInfo.CurrentCulture.DateTimeFormat\n      Console.WriteLine(dtfi.IsReadOnly)\n      \n      dtfi = DateTimeFormatInfo.GetInstance(CultureInfo.CurrentCulture)\n      Console.WriteLine(dtfi.IsReadOnly)\n      &#39; The example displays the following output:\n      &#39;     True\n      &#39;     True\n      &#39;     True\n</code></pre><p>You can create a writable DateTimeFormatInfo object that represents the conventions of the current thread culture in one of these ways:  </p>\n</li>\n<li><p>By retrieving a DateTimeFormatInfo object in any of the three previous ways and calling the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Clone_\" data-linktype=\"relative-path\">Clone</a> method on the returned DateTimeFormatInfo object. This creates a copy of the original DateTimeFormatInfo object, except that its <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a> property is <code>false</code>.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CreateSpecificCulture_\" data-linktype=\"relative-path\">CreateSpecificCulture</a> method to create a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the current culture, and then using its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property to retrieve the DateTimeFormatInfo object.  </p>\n<p>The following example illustrates each way of instantiating a read/write DateTimeFormatInfo object and displays the value of its <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#7\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTimeFormatInfo current1 = DateTimeFormatInfo.CurrentInfo;\n      current1 = (DateTimeFormatInfo) current1.Clone();\n      Console.WriteLine(current1.IsReadOnly);\n\n      CultureInfo culture2 = CultureInfo.CreateSpecificCulture(CultureInfo.CurrentCulture.Name);\n      DateTimeFormatInfo current2 = culture2.DateTimeFormat;\n      Console.WriteLine(current2.IsReadOnly);\n   }\n}\n// The example displays the following output:\n//       False\n//       False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#7\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim current1 As DateTimeFormatInfo = DateTimeFormatInfo.CurrentInfo\n      current1 = CType(current1.Clone(), DateTimeFormatInfo)\n      Console.WriteLine(current1.IsReadOnly)\n\n      Dim culture2 As CultureInfo = CultureInfo.CreateSpecificCulture(CultureInfo.CurrentCulture.Name)\n      Dim current2 As DateTimeFormatInfo = culture2.DateTimeFormat\n      Console.WriteLine(current2.IsReadOnly)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       False\n&#39;       False\n</code></pre><p>In Windows, the user can override some of the DateTimeFormatInfo property values used in formatting and parsing operations through the <strong>Region and Language</strong> application in Control Panel. For example, a user whose culture is English (United States) might choose to display long time values using a 24-hour clock (in the format HH:mm:ss) instead of the default 12-hour clock (in the format h:mm:ss tt). The DateTimeFormatInfo objects retrieved in the ways discussed previously all reflect these user overrides. If this is undesirable, you can create a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that does not reflect user overrides (and is also read/write instead of read-only) by calling the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">System.Globalization.CultureInfo.CultureInfo(String,Boolean)</a> constructor and supplying a value of <code>false</code> for the <code>useUserOverride</code> argument. The following example illustrates this for a system whose current culture is English (United States) and whose long time pattern has been changed from the default of h:mm:ss tt to HH:mm:ss.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#8\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim culture As CultureInfo\n      Dim dtfi As DateTimeFormatInfo\n      \n      culture = CultureInfo.CurrentCulture\n      dtfi = culture.DateTimeFormat\n      Console.WriteLine(&quot;Culture Name:      {0}&quot;, culture.Name)\n      Console.WriteLine(&quot;User Overrides:    {0}&quot;, culture.UseUserOverride)\n      Console.WriteLine(&quot;Long Time Pattern: {0}&quot;, culture.DateTimeFormat.LongTimePattern)\n      Console.WriteLine()\n            \n      culture = New CultureInfo(CultureInfo.CurrentCulture.Name, False)\n      Console.WriteLine(&quot;Culture Name:      {0}&quot;, culture.Name)\n      Console.WriteLine(&quot;User Overrides:    {0}&quot;, culture.UseUserOverride)\n      Console.WriteLine(&quot;Long Time Pattern: {0}&quot;, culture.DateTimeFormat.LongTimePattern)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Culture Name:      en-US\n&#39;       User Overrides:    True\n&#39;       Long Time Pattern: HH:mm:ss\n&#39;       \n&#39;       Culture Name:      en-US\n&#39;       User Overrides:    False\n&#39;       Long Time Pattern: h:mm:ss tt\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#8\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo culture;\n      DateTimeFormatInfo dtfi;\n      \n      culture = CultureInfo.CurrentCulture;\n      dtfi = culture.DateTimeFormat;\n      Console.WriteLine(&quot;Culture Name:      {0}&quot;, culture.Name);\n      Console.WriteLine(&quot;User Overrides:    {0}&quot;, culture.UseUserOverride);\n      Console.WriteLine(&quot;Long Time Pattern: {0}\\n&quot;, culture.DateTimeFormat.LongTimePattern);\n            \n      culture = new CultureInfo(CultureInfo.CurrentCulture.Name, false);\n      Console.WriteLine(&quot;Culture Name:      {0}&quot;,   culture.Name);\n      Console.WriteLine(&quot;User Overrides:    {0}&quot;,   culture.UseUserOverride);\n      Console.WriteLine(&quot;Long Time Pattern: {0}\\n&quot;, culture.DateTimeFormat.LongTimePattern);\n   }\n}\n// The example displays the following output:\n//       Culture Name:      en-US\n//       User Overrides:    True\n//       Long Time Pattern: HH:mm:ss\n//       \n//       Culture Name:      en-US\n//       User Overrides:    False\n//       Long Time Pattern: h:mm:ss tt\n</code></pre></li>\n</ul>\n<p><a name=\"dynamic\"></a>   </p>\n<h2 id=\"datetimeformatinfo-and-dynamic-data\">DateTimeFormatInfo and dynamic data</h2>\n<p> The culture-specific data for formatting date and time values provided by the DateTimeFormatInfo class is dynamic, just like cultural data provided by the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class. You should not make any assumptions about the stability of values for DateTimeFormatInfo objects that are associated with particular <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects. Only the data provided by the invariant culture and its associated DateTimeFormatInfo object is stable. Other data can change between application sessions or even while your application is running. There are four major sources of change:  </p>\n<ul>\n<li><p>System updates. Cultural preferences such as the preferred calendar or customary date and time formats change over time. When this happens, Windows Update includes changes to the DateTimeFormatInfo property value for a particular culture.  </p>\n</li>\n<li><p>Replacement cultures. The <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> class can be used to replace the data of an existing culture.  </p>\n</li>\n<li><p>Cascading changes to property values. A number of culture-related properties can change at run time, which, in turn, causes DateTimeFormatInfo data to change. For example, the current culture can be changed either programmatically or through user action. When this happens, the DateTimeFormatInfo object returned by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a> property changes to an object associated with the current culture. Similarly, a culture&#39;s calendar can change, which can result in changes to numerous DateTimeFormatInfo property values.  </p>\n</li>\n<li><p>User preferences. Users of your application might choose to override some of the values associated with the current system culture through the regional and language options in Control Panel. For example, users might choose to display the date in a different format. If the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_UseUserOverride_\" data-linktype=\"relative-path\">UseUserOverride</a> property is set to <code>true</code>, the properties of the DateTimeFormatInfo object is also retrieved from the user settings. If the user settings are incompatible with the culture associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object (for example, if the selected calendar is not one of the calendars indicated by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a> property), the results of the methods and the values of the properties are undefined.  </p>\n<p>To minimize the possibility of inconsistent data, all user-overridable properties of a DateTimeFormatInfo object are initialized when the object is created. There is still a possibility of inconsistency, because neither object creation nor the user override process is atomic and the relevant values can change during object creation. However, this situation should be extremely rare.  </p>\n<p>You can control whether user overrides are reflected in DateTimeFormatInfo objects that represent the same culture as the system culture. The following table lists the ways in which a DateTimeFormatInfo object can be retrieved and indicates whether the resulting object reflects user overrides.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Source of CultureInfo and DateTimeFormatInfo object</th>\n<th>Reflects user overrides</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>CultureInfo.CurrentCulture.DateTimeFormat</code> property</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a> property</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CreateSpecificCulture_\" data-linktype=\"relative-path\">CreateSpecificCulture</a> method</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultureInfo_\" data-linktype=\"relative-path\">GetCultureInfo</a> method</td>\n<td>No</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_\" data-linktype=\"relative-path\">System.Globalization.CultureInfo.CultureInfo(String)</a> constructor</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">System.Globalization.CultureInfo.CultureInfo(String,Boolean)</a> constructor</td>\n<td>Depends on value of <code>useUserOverride</code> parameter</td>\n</tr>\n</tbody>\n</table>\n<p> Unless there is a compelling reason to do otherwise, you should respect user overrides when you use the DateTimeFormatInfo object in client applications to format and parse user input or to display data. For server applications or unattended applications, you should not. However, if you are using the DateTimeFormatInfo object either explicitly or implicitly to persist date and time data in string form, you should either use a DateTimeFormatInfo object that reflects the formatting conventions of the invariant culture, or you should specify a custom date and time format string that you use regardless of culture.  </p>\n<p><a name=\"Formatting_dates_times\"></a>   </p>\n<h2 id=\"formatting-dates-and-times\">Formatting dates and times</h2>\n<p> A DateTimeFormatInfo object is used implicitly or explicitly in all date and time formatting operations. These include calls to the following methods:  </p>\n<ul>\n<li><p>All date and time formatting methods, such as <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString\" data-linktype=\"relative-path\">System.DateTime.ToString()</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_System_String_\" data-linktype=\"relative-path\">System.DateTimeOffset.ToString(String)</a>.  </p>\n</li>\n<li><p>The major composite formatting method, which is <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>.  </p>\n</li>\n<li><p>Other composite formatting methods, such as [Console.WriteLine(String,â€‚Object&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; and [StringBuilder.AppendFormat(String,â€‚Object&lt;xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;.  </p>\n<p>All date and time formatting operations make use of an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation. The <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface includes a single method, <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_System_Type_\" data-linktype=\"relative-path\">System.IFormatProvider.GetFormat(Type)</a>. This callback method is passed a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type needed to provide formatting information. The method returns either an instance of that type or <code>null</code> if it cannot provide an instance of the type. The .NET Framework includes two <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementations for formatting dates and times:  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class,  which represents a specific culture (or a specific language in a specific country/region). In a date and time formatting operation, the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns the DateTimeFormatInfo object associated with its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property.  </p>\n</li>\n<li><p>The DateTimeFormatInfo class, which provides information about the formatting conventions of its associated culture. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns an instance of itself.  </p>\n<p>If an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation is not provided to a formatting method explicitly, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property that represents the current thread culture is used.  </p>\n<p>The following example illustrates the relationship between the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface and the DateTimeFormatInfo class in formatting operations. It defines a custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method displays the type of the object requested by the formatting operation. If it is requesting a DateTimeFormatInfo object, the method provides the DateTimeFormatInfo object for the current thread culture. As the output from the example shows, the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.ToString(IFormatProvider)</a> method requests a DateTimeFormatInfo object to provide formatting information, whereas the [String.Format(IFormatProvider,â€‚String,â€‚Object&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; method requests <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> and DateTimeFormatInfo objects as well as an <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> implementation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#9\">Imports System.Globalization\n\nPublic Class CurrentCultureFormatProvider : Implements IFormatProvider\n   Public Function GetFormat(formatType As Type) As Object _\n                   Implements IFormatProvider.GetFormat\n      Console.WriteLine(&quot;Requesting an object of type {0}&quot;, \n                        formatType.Name)\n      If formatType Is GetType(NumberFormatInfo) Then\n         Return NumberFormatInfo.CurrentInfo\n      Else If formatType Is GetType(DateTimeFormatInfo) Then\n         Return DateTimeFormatInfo.CurrentInfo\n      Else\n         Return Nothing\n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim dateValue As New Date(2013, 05, 28, 13, 30, 0)\n      Dim value As String = dateValue.ToString(&quot;F&quot;, New CurrentCultureFormatProvider())\n      Console.WriteLine(value)\n      Console.WriteLine()\n      Dim composite As String = String.Format(New CurrentCultureFormatProvider, \n                                              &quot;Date: {0:d}   Amount: {1:C}   Description: {2}&quot;,\n                                              dateValue, 1264.03d, &quot;Service Charge&quot;)\n      Console.WriteLine(composite)\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Requesting an object of type DateTimeFormatInfo\n&#39;       Tuesday, May 28, 2013 1:30:00 PM\n&#39;       \n&#39;       Requesting an object of type ICustomFormatter\n&#39;       Requesting an object of type DateTimeFormatInfo\n&#39;       Requesting an object of type NumberFormatInfo\n&#39;       Date: 5/28/2013   Amount: $1,264.03   Description: Service Charge\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#9\">using System;\nusing System.Globalization;\n\npublic class CurrentCultureFormatProvider : IFormatProvider\n{\n   public Object GetFormat(Type formatType) \n   {\n      Console.WriteLine(&quot;Requesting an object of type {0}&quot;, \n                        formatType.Name);\n      if (formatType == typeof(NumberFormatInfo))\n         return NumberFormatInfo.CurrentInfo;\n      else if (formatType == typeof(DateTimeFormatInfo))\n         return DateTimeFormatInfo.CurrentInfo;\n      else\n         return null;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime dateValue = new DateTime(2013, 5, 28, 12, 30, 0);\n      string value = dateValue.ToString(&quot;F&quot;, new CurrentCultureFormatProvider());\n      Console.WriteLine(value);\n      Console.WriteLine();\n      string composite = String.Format(new CurrentCultureFormatProvider(), \n                                       &quot;Date: {0:d}   Amount: {1:C}   Description: {2}&quot;,\n                                       dateValue, 1264.03m, &quot;Service Charge&quot;);\n      Console.WriteLine(composite);\n      Console.WriteLine();\n   }\n}\n// The example displays output like the following:\n//       Requesting an object of type DateTimeFormatInfo\n//       Tuesday, May 28, 2013 1:30:00 PM\n//       \n//       Requesting an object of type ICustomFormatter\n//       Requesting an object of type DateTimeFormatInfo\n//       Requesting an object of type NumberFormatInfo\n//       Date: 5/28/2013   Amount: $1,264.03   Description: Service Charge\n</code></pre></li>\n</ul>\n<p><a name=\"properties\"></a>   </p>\n<h2 id=\"format-strings-and-datetimeformatinfo-properties\">Format strings and DateTimeFormatInfo properties</h2>\n<p> The DateTimeFormatInfo object includes three kinds of properties that are used in formatting operations with date and time values:  </p>\n<ul>\n<li><p>Calendar-related properties. Properties such as <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_\" data-linktype=\"relative-path\">AbbreviatedDayNames</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_\" data-linktype=\"relative-path\">AbbreviatedMonthNames</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_DayNames_\" data-linktype=\"relative-path\">DayNames</a>, and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_MonthNames_\" data-linktype=\"relative-path\">MonthNames</a>, are associated with the calendar used by the culture, which is defined by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property. These properties are used for long date and time formats.  </p>\n</li>\n<li><p>Properties that produce a standards-defined result string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_RFC1123Pattern_\" data-linktype=\"relative-path\">RFC1123Pattern</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_\" data-linktype=\"relative-path\">SortableDateTimePattern</a>, and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_\" data-linktype=\"relative-path\">UniversalSortableDateTimePattern</a> properties contain custom format strings that produce result strings defined by international standards. These properties are  read-only and cannot be modified.  </p>\n</li>\n<li><p>Properties that define culture-sensitive result strings. Some properties, such as <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FullDateTimePattern_\" data-linktype=\"relative-path\">FullDateTimePattern</a> and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortDatePattern_\" data-linktype=\"relative-path\">ShortDatePattern</a>, contain  <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">custom format strings</a> that specify the format of the result string. Others, such as <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AMDesignator_\" data-linktype=\"relative-path\">AMDesignator</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_DateSeparator_\" data-linktype=\"relative-path\">DateSeparator</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_PMDesignator_\" data-linktype=\"relative-path\">PMDesignator</a>, and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_TimeSeparator_\" data-linktype=\"relative-path\">TimeSeparator</a>, define culture-sensitive symbols or substrings that can be included in a result string.  </p>\n<p>The <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">standard date and time format strings</a>, such as &quot;d&quot;, &quot;D&quot;, &quot;f&quot;, and &quot;F&quot;, are aliases that correspond to particular DateTimeFormatInfo format pattern properties. Most of the  <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">custom date and time format strings</a> are related to strings or substrings that a formatting operation inserts into the result stream. The following table lists the standard and custom date and time format specifiers and their associated DateTimeFormatInfo properties. For details about how to use these format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. Note that each standard format string corresponds to a DateTimeFormatInfo property whose value is a custom date and time format string. The individual specifiers in this custom format string in turn correspond to other DateTimeFormatInfo properties. The table lists only the DateTimeFormatInfo properties for which the standard format strings are aliases, and does not list properties that may be accessed by custom format strings assigned to those aliased properties. In addition, the table lists only custom format specifiers that correspond to DateTimeFormatInfo properties.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Format specifier</th>\n<th>Associated properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;d&quot; (short date; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortDatePattern_\" data-linktype=\"relative-path\">ShortDatePattern</a>, to define the overall format of the result string.</td>\n</tr>\n<tr>\n<td>&quot;D&quot; (long date; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a>, to define the overall format of the result string.</td>\n</tr>\n<tr>\n<td>&quot;f&quot; (full date / short time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a>, to define the format of the date component of the result string.<br><br> <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortTimePattern_\" data-linktype=\"relative-path\">ShortTimePattern</a>, to define the format of the time component of the result string.</td>\n</tr>\n<tr>\n<td>&quot;F&quot; (full date / long time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a>, to define the format of the date component of the result string.<br><br> <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongTimePattern_\" data-linktype=\"relative-path\">LongTimePattern</a>, to define the format of the time component of the result string.</td>\n</tr>\n<tr>\n<td>&quot;g&quot; (general date / short time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortDatePattern_\" data-linktype=\"relative-path\">ShortDatePattern</a>, to define the format of the date component of the result string.<br><br> <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortTimePattern_\" data-linktype=\"relative-path\">ShortTimePattern</a>, to define the format of the time component of the result string.</td>\n</tr>\n<tr>\n<td>&quot;G&quot; (general date / long time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortDatePattern_\" data-linktype=\"relative-path\">ShortDatePattern</a>, to define the format of the date component of the result string.<br><br> <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongTimePattern_\" data-linktype=\"relative-path\">LongTimePattern</a>, to define the format of the time component of the result string.</td>\n</tr>\n<tr>\n<td>&quot;M&quot;, &quot;m&quot; (month/day; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_MonthDayPattern_\" data-linktype=\"relative-path\">MonthDayPattern</a>, to define the overall format of the result string.</td>\n</tr>\n<tr>\n<td>&quot;O&quot;, &quot;o&quot; (round-trip date/time; standard format string)</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>&quot;R&quot;, &quot;r&quot; (RFC1123; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_RFC1123Pattern_\" data-linktype=\"relative-path\">RFC1123Pattern</a>, to define a result string that conforms to the RFC 1123 standard. The property is read-only.</td>\n</tr>\n<tr>\n<td>&quot;s&quot; (sortable date/time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_\" data-linktype=\"relative-path\">SortableDateTimePattern</a>, to define a result string that conforms to the ISO 8601 standard. The property is read-only.</td>\n</tr>\n<tr>\n<td>&quot;t&quot; (short time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortTimePattern_\" data-linktype=\"relative-path\">ShortTimePattern</a>, to define the overall format of the result string.</td>\n</tr>\n<tr>\n<td>&quot;T&quot; (long time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongTimePattern_\" data-linktype=\"relative-path\">LongTimePattern</a>, to define the overall format of the result string.</td>\n</tr>\n<tr>\n<td>&quot;u&quot; (universal sortable date/time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_\" data-linktype=\"relative-path\">UniversalSortableDateTimePattern</a>, to define a result string that conforms to the ISO 8601 standard for coordinated universal time. The property is read-only.</td>\n</tr>\n<tr>\n<td>&quot;U&quot; (universal full date/time; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FullDateTimePattern_\" data-linktype=\"relative-path\">FullDateTimePattern</a>, to define the overall format of the result string.</td>\n</tr>\n<tr>\n<td>&quot;Y&quot;, &quot;y&quot; (year month; standard format string)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_YearMonthPattern_\" data-linktype=\"relative-path\">YearMonthPattern</a>, to define the overall format of the result string.</td>\n</tr>\n<tr>\n<td>&quot;ddd&quot; (custom format specifier)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_\" data-linktype=\"relative-path\">AbbreviatedDayNames</a>, to include the abbreviated name of the day of the week in the result string.</td>\n</tr>\n<tr>\n<td>&quot;g&quot;, &quot;gg&quot; (custom format specifier)</td>\n<td>Calls the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetEraName_\" data-linktype=\"relative-path\">GetEraName</a> method to insert the era name in the result string.</td>\n</tr>\n<tr>\n<td>&quot;MMM&quot; (custom format specifier)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_\" data-linktype=\"relative-path\">AbbreviatedMonthNames</a>, to include the abbreviated month name in the result string.</td>\n</tr>\n<tr>\n<td>&quot;MMMM&quot; (custom format specifier)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_MonthNames_\" data-linktype=\"relative-path\">MonthNames</a> or <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_\" data-linktype=\"relative-path\">MonthGenitiveNames</a>, to include the full month name in the result string.</td>\n</tr>\n<tr>\n<td>&quot;t&quot; (custom format specifier)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AMDesignator_\" data-linktype=\"relative-path\">AMDesignator</a> or <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_PMDesignator_\" data-linktype=\"relative-path\">PMDesignator</a>, to include the first character of the AM/PM designator in the result string.</td>\n</tr>\n<tr>\n<td>&quot;tt&quot; (custom format specifier)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AMDesignator_\" data-linktype=\"relative-path\">AMDesignator</a> or <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_PMDesignator_\" data-linktype=\"relative-path\">PMDesignator</a>, to include the full AM/PM designator in the result string.</td>\n</tr>\n<tr>\n<td>&quot;:&quot; (custom format specifier)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_TimeSeparator_\" data-linktype=\"relative-path\">TimeSeparator</a>, to include the time separator in the result string.</td>\n</tr>\n<tr>\n<td>&quot;/&quot; (custom format specifier)</td>\n<td><a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_DateSeparator_\" data-linktype=\"relative-path\">DateSeparator</a>, to include the date separator in the result string.</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"Modifying\"></a>   </p>\n<h2 id=\"modifying-datetimeformatinfo-properties\">Modifying DateTimeFormatInfo properties</h2>\n<p> You can change the result string produced by date and time format strings by modifying the associated properties of a writable DateTimeFormatInfo object. To determine if a DateTimeFormatInfo object is writable, use the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a> property. To customize a DateTimeFormatInfo object in this way:  </p>\n<ol>\n<li><p>Create a read/write copy of a DateTimeFormatInfo object whose formatting conventions you want to modify. (See the <a href=\"#instantiating\" data-linktype=\"self-bookmark\">Instantiating a DateTimeFormatInfo object</a> section.)  </p>\n</li>\n<li><p>Modify the property or properties that are used to produce the desired result string. (For information about how formatting methods use DateTimeFormatInfo properties to define result strings, see the previous section, <a href=\"#properties\" data-linktype=\"self-bookmark\">Format strings and DateTimeFormatInfo properties</a>.)  </p>\n</li>\n<li><p>Use the custom DateTimeFormatInfo object you created as the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> argument in calls to formatting methods.  </p>\n<p>There are two other ways to change the format of a result string:  </p>\n</li>\n</ol>\n<ul>\n<li><p>You can use the <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> class to define either a custom culture (a culture that has a unique name and that supplements existing cultures) or a replacement culture (one that is used instead of a specific culture). You can save and access this culture programmatically as you would any <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object supported by the .NET Framework.  </p>\n</li>\n<li><p>If the result string is not culture-sensitive and doesn&#39;t follow a predefined format, you can use a custom date and time format string. For example, if you are serializing date and time data in the format YYYYMMDDHHmmss, you can generate the result string by passing the custom format string to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_System_String_\" data-linktype=\"relative-path\">System.DateTime.ToString(String)</a> method, and you can  convert the result string back to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_ParseExact_\" data-linktype=\"relative-path\">ParseExact</a> method.  </p>\n</li>\n</ul>\n<h3 id=\"changing-the-short-date-pattern\">Changing the short date pattern</h3>\n<p> The following example changes the format of a result string produced by the &quot;d&quot; (short date) standard format string. It changes the associated <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortDatePattern_\" data-linktype=\"relative-path\">ShortDatePattern</a> property for the en-US or English (United States) culture from its default of &quot;M/d/yyyy&quot; to &quot;yyyy&#39;-&quot;MM&quot;-&quot;dd&quot; and uses the &quot;d&quot; standard format string to display the date both before and after the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortDatePattern_\" data-linktype=\"relative-path\">ShortDatePattern</a> property is changed.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#10\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime dateValue = new DateTime(2013, 8, 18); \n      CultureInfo enUS = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = enUS.DateTimeFormat;\n      \n      Console.WriteLine(&quot;Before modifying DateTimeFormatInfo object: &quot;);\n      Console.WriteLine(&quot;{0}: {1}\\n&quot;, dtfi.ShortDatePattern, \n                                    dateValue.ToString(&quot;d&quot;, enUS));\n\n      // Modify the short date pattern.\n      dtfi.ShortDatePattern = &quot;yyyy-MM-dd&quot;;\n      Console.WriteLine(&quot;After modifying DateTimeFormatInfo object: &quot;);\n      Console.WriteLine(&quot;{0}: {1}&quot;, dtfi.ShortDatePattern, \n                                    dateValue.ToString(&quot;d&quot;, enUS));\n   }\n}\n// The example displays the following output:\n//       Before modifying DateTimeFormatInfo object:\n//       M/d/yyyy: 8/18/2013\n//       \n//       After modifying DateTimeFormatInfo object:\n//       yyyy-MM-dd: 2013-08-18\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#10\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateValue As New Date(2013, 08, 18) \n      Dim enUS As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = enUS.DateTimeFormat\n      \n      Console.WriteLine(&quot;Before modifying DateTimeFormatInfo object: &quot;)\n      Console.WriteLine(&quot;{0}: {1}&quot;, dtfi.ShortDatePattern, \n                                    dateValue.ToString(&quot;d&quot;, enUS))\n      Console.WriteLine()\n      \n      &#39; Modify the short date pattern.\n      dtfi.ShortDatePattern = &quot;yyyy-MM-dd&quot;\n      Console.WriteLine(&quot;After modifying DateTimeFormatInfo object: &quot;)\n      Console.WriteLine(&quot;{0}: {1}&quot;, dtfi.ShortDatePattern, \n                                    dateValue.ToString(&quot;d&quot;, enUS))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Before modifying DateTimeFormatInfo object:\n&#39;       M/d/yyyy: 8/18/2013\n&#39;       \n&#39;       After modifying DateTimeFormatInfo object:\n&#39;       yyyy-MM-dd: 2013-08-18\n</code></pre><h3 id=\"changing-the-date-separator-character\">Changing the date separator character</h3>\n<p> The following example changes the date separator character in a DateTimeFormatInfo object that represents the formatting conventions of the fr-FR culture. The example uses the &quot;g&quot; standard format string to display the date both before and after the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_DateSeparator_\" data-linktype=\"relative-path\">DateSeparator</a> property is changed.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#12\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateValue As New Date(2013, 08, 28) \n      Dim frFR As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      Dim dtfi As DateTimeFormatInfo = frFR.DateTimeFormat\n      \n      Console.WriteLine(&quot;Before modifying DateSeparator property: {0}&quot;,\n                        dateValue.ToString(&quot;g&quot;, frFR))\n      \n      &#39; Modify the date separator.\n      dtfi.DateSeparator = &quot;-&quot;\n      Console.WriteLine(&quot;After modifying the DateSeparator property: {0}&quot;,\n                        dateValue.ToString(&quot;g&quot;, frFR))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Before modifying DateSeparator property: 28/08/2013 00:00\n&#39;       After modifying the DateSeparator property: 28-08-2013 00:00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#12\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime dateValue = new DateTime(2013, 08, 28); \n      CultureInfo frFR = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      DateTimeFormatInfo dtfi = frFR.DateTimeFormat;\n      \n      Console.WriteLine(&quot;Before modifying DateSeparator property: {0}&quot;,\n                        dateValue.ToString(&quot;g&quot;, frFR));\n      \n      // Modify the date separator.\n      dtfi.DateSeparator = &quot;-&quot;;\n      Console.WriteLine(&quot;After modifying the DateSeparator property: {0}&quot;,\n                        dateValue.ToString(&quot;g&quot;, frFR));\n   }\n}\n// The example displays the following output:\n//       Before modifying DateSeparator property: 18/08/2013 00:00\n//       After modifying the DateSeparator property: 18-08-2013 00:00\n</code></pre><h3 id=\"changing-day-name-abbreviations-and-the-long-date-pattern\">Changing day name abbreviations and the long date pattern</h3>\n<p> In some cases, the long date pattern, which typically displays the full day and month name along with the number of the day of the month and the year, may be too long. The following example shortens the long date pattern for the en-US culture to return a one-character or two-character day name abbreviation followed by the day number, the month name abbreviation, and the year. It does this by assigning shorter day name abbreviations to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_\" data-linktype=\"relative-path\">AbbreviatedDayNames</a> array, and by modifying the custom format string assigned to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> property. This affects the result strings returned by the &quot;D&quot; and &quot;f&quot; standard format strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#13\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime value = new DateTime(2013, 7, 9);\n      CultureInfo enUS = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = enUS.DateTimeFormat;\n      String[] formats = { &quot;D&quot;, &quot;F&quot;, &quot;f&quot; };\n\n      // Display date before modifying properties.\n      foreach (var fmt in formats)\n         Console.WriteLine(&quot;{0}: {1}&quot;, fmt, value.ToString(fmt, dtfi));\n\n      Console.WriteLine();\n      \n      // We don&#39;t want to change the FullDateTimePattern, so we need to save it.\n      String originalFullDateTimePattern = dtfi.FullDateTimePattern;\n      \n      // Modify day name abbreviations and long date pattern.\n      dtfi.AbbreviatedDayNames = new String[] { &quot;Su&quot;, &quot;M&quot;, &quot;Tu&quot;, &quot;W&quot;, &quot;Th&quot;, &quot;F&quot;, &quot;Sa&quot; };\n      dtfi.LongDatePattern = &quot;ddd dd-MMM-yyyy&quot;;\n      dtfi.FullDateTimePattern = originalFullDateTimePattern;\n      foreach (var fmt in formats)\n         Console.WriteLine(&quot;{0}: {1}&quot;, fmt, value.ToString(fmt, dtfi));\n\n   }\n}\n// The example displays the following output:\n//       D: Tuesday, July 09, 2013\n//       F: Tuesday, July 09, 2013 12:00:00 AM\n//       f: Tuesday, July 09, 2013 12:00 AM\n//       \n//       D: Tu 09-Jul-2013\n//       F: Tuesday, July 09, 2013 12:00:00 AM\n//       f: Tu 09-Jul-2013 12:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#13\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim value As New Date(2013, 7, 9)\n      Dim enUS As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = enUS.DateTimeFormat\n      Dim formats() As String = { &quot;D&quot;, &quot;F&quot;, &quot;f&quot; }\n\n      &#39; Display date before modifying properties.\n      For Each fmt In formats\n         Console.WriteLine(&quot;{0}: {1}&quot;, fmt, value.ToString(fmt, dtfi))\n      Next\n      Console.WriteLine()\n      \n      &#39; We don&#39;t want to change the FullDateTimePattern, so we need to save it.\n      Dim originalFullDateTimePattern As String = dtfi.FullDateTimePattern\n      \n      &#39; Modify day name abbreviations and long date pattern.\n      dtfi.AbbreviatedDayNames = { &quot;Su&quot;, &quot;M&quot;, &quot;Tu&quot;, &quot;W&quot;, &quot;Th&quot;, &quot;F&quot;, &quot;Sa&quot; }\n      dtfi.LongDatePattern = &quot;ddd dd-MMM-yyyy&quot;\n      dtfi.FullDateTimePattern = originalFullDateTimePattern\n      For Each fmt In formats\n         Console.WriteLine(&quot;{0}: {1}&quot;, fmt, value.ToString(fmt, dtfi))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       D: Tuesday, July 09, 2013\n&#39;       F: Tuesday, July 09, 2013 12:00:00 AM\n&#39;       f: Tuesday, July 09, 2013 12:00 AM\n&#39;       \n&#39;       D: Tu 09-Jul-2013\n&#39;       F: Tuesday, July 09, 2013 12:00:00 AM\n&#39;       f: Tu 09-Jul-2013 12:00 AM\n</code></pre><p> Ordinarily, the change to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> property also affects the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FullDateTimePattern_\" data-linktype=\"relative-path\">FullDateTimePattern</a> property, which in turn defines the result string returned by the &quot;F&quot; standard format string. To preserve the original full date and time pattern, the example reassigns the original custom format string assigned to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FullDateTimePattern_\" data-linktype=\"relative-path\">FullDateTimePattern</a> property after the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> property is modified.  </p>\n<h3 id=\"changing-from-a-12-hour-clock-to-a-24-hour-clock\">Changing from a 12-hour clock to a 24-hour clock</h3>\n<p> For many cultures in the .NET Framework, the time is expressed by using a 12-hour clock and an AM/PM designator. The following example defines a <code>ReplaceWith24HourClock</code> method that replaces any time format that uses a 12-hour clock with a format that uses a 24-hour clock.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#14\">using System;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo enUS = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = enUS.DateTimeFormat;\n\n      Console.WriteLine(&quot;Original Property Values:&quot;);\n      Console.WriteLine(&quot;ShortTimePattern: &quot; + dtfi.ShortTimePattern);\n      Console.WriteLine(&quot;LongTimePattern: &quot; + dtfi.LongTimePattern);\n      Console.WriteLine(&quot;FullDateTimePattern: &quot; + dtfi.FullDateTimePattern);\n      Console.WriteLine();\n      \n      dtfi.LongTimePattern = ReplaceWith24HourClock(dtfi.LongTimePattern);\n      dtfi.ShortTimePattern = ReplaceWith24HourClock(dtfi.ShortTimePattern);\n      \n      Console.WriteLine(&quot;Modififed Property Values:&quot;);\n      Console.WriteLine(&quot;ShortTimePattern: &quot; + dtfi.ShortTimePattern);\n      Console.WriteLine(&quot;LongTimePattern: &quot; + dtfi.LongTimePattern);\n      Console.WriteLine(&quot;FullDateTimePattern: &quot; + dtfi.FullDateTimePattern);\n   }     \n   \n   private static string ReplaceWith24HourClock(string fmt)\n   {\n      string pattern = @&quot;^(?&lt;openAMPM&gt;\\s*t+\\s*)? &quot; +\n                       @&quot;(?(openAMPM) h+(?&lt;nonHours&gt;[^ht]+)$ &quot; +\n                       @&quot;| \\s*h+(?&lt;nonHours&gt;[^ht]+)\\s*t+)&quot;;\n      return Regex.Replace(fmt, pattern, &quot;HH${nonHours}&quot;, \n                           RegexOptions.IgnorePatternWhitespace);   \n   }\n}\n// The example displays the following output:\n//       Original Property Values:\n//       ShortTimePattern: h:mm tt\n//       LongTimePattern: h:mm:ss tt\n//       FullDateTimePattern: dddd, MMMM dd, yyyy h:mm:ss tt\n//       \n//       Modififed Property Values:\n//       ShortTimePattern: HH:mm\n//       LongTimePattern: HH:mm:ss\n//       FullDateTimePattern: dddd, MMMM dd, yyyy HH:mm:ss\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#14\">Imports System.Globalization\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim enUS As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = enUS.DateTimeFormat\n\n      Console.WriteLine(&quot;Original Property Values:&quot;)\n      Console.WriteLine(&quot;ShortTimePattern: &quot; + dtfi.ShortTimePattern)\n      Console.WriteLine(&quot;LongTimePattern: &quot; + dtfi.LongTimePattern)\n      Console.WriteLine(&quot;FullDateTimePattern: &quot; + dtfi.FullDateTimePattern)\n      Console.WriteLine()\n      \n      dtfi.LongTimePattern = ReplaceWith24HourClock(dtfi.LongTimePattern)\n      dtfi.ShortTimePattern = ReplaceWith24HourClock(dtfi.ShortTimePattern)\n      \n      Console.WriteLine(&quot;Modififed Property Values:&quot;)\n      Console.WriteLine(&quot;ShortTimePattern: &quot; + dtfi.ShortTimePattern)\n      Console.WriteLine(&quot;LongTimePattern: &quot; + dtfi.LongTimePattern)\n      Console.WriteLine(&quot;FullDateTimePattern: &quot; + dtfi.FullDateTimePattern)\n   End Sub\n   \n   Private Function ReplaceWith24HourClock(fmt As String) As String\n      Dim pattern As String = &quot;^(?&lt;openAMPM&gt;\\s*t+\\s*)? &quot; +\n                              &quot;(?(openAMPM) h+(?&lt;nonHours&gt;[^ht]+)$ &quot; +\n                              &quot;| \\s*h+(?&lt;nonHours&gt;[^ht]+)\\s*t+)&quot;\n      Return Regex.Replace(fmt, pattern, &quot;HH${nonHours}&quot;, RegexOptions.IgnorePatternWhitespace)   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Original Property Values:\n&#39;       ShortTimePattern: h:mm tt\n&#39;       LongTimePattern: h:mm:ss tt\n&#39;       FullDateTimePattern: dddd, MMMM dd, yyyy h:mm:ss tt\n&#39;       \n&#39;       Modififed Property Values:\n&#39;       ShortTimePattern: HH:mm\n&#39;       LongTimePattern: HH:mm:ss\n&#39;       FullDateTimePattern: dddd, MMMM dd, yyyy HH:mm:ss\n</code></pre><p> The example uses a regular expression to modify the format string. The regular expression pattern <code>@&quot;^(?&lt;openAMPM&gt;\\s*t+\\s*)? (?(openAMPM) h+(?&lt;nonHours&gt;[^ht]+)$ | \\s*h+(?&lt;nonHours&gt;[^ht]+)\\s*t+)</code> is defined as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>^</code></td>\n<td>Begin the match at the beginning of the string.</td>\n</tr>\n<tr>\n<td><code>(?&lt;openAMPM&gt;\\s*t+\\s*)?</code></td>\n<td>Match zero or one occurrence of zero or more white-space characters, followed by the letter &quot;t&quot; one or more times, followed by zero or more white-space characters. This capturing group is named <code>openAMPM</code>.</td>\n</tr>\n<tr>\n<td><code>(?(openAMPM) h+(?&lt;nonHours&gt;[^ht]+)$</code></td>\n<td>If the <code>openAMPM</code> group has a match, match the letter &quot;h&quot; one or more times, followed by one or more characters that are neither &quot;h&quot; nor &quot;t&quot;. The match ends at the end of the string. All characters captured after &quot;h&quot; are included in a capturing group named <code>nonHours</code>.</td>\n</tr>\n<tr>\n<td><code>&amp;#124; \\s*h+(?&lt;nonHours&gt;[^ht]+)\\s*t+)</code></td>\n<td>If the <code>openAMPM</code> group does not have a match, match the letter &quot;h&quot; one or more times, followed by one or more characters that are neither &quot;h&quot; nor &quot;t&quot;, followed by zero or more white-space characters. Finally, match one or more occurrences of the letter &quot;t&quot;. All characters captured after &quot;h&quot; and before the white-spaces and &quot;t&quot; are included in a capturing group named <code>nonHours</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>nonHours</code> capturing group contains the minute and possibly the second component of a custom date and time format string, along with any time separator symbols. The replacement pattern <code>HH${nonHours}</code> prepends the substring &quot;HH&quot; to these elements.  </p>\n<h3 id=\"displaying-and-changing-the-era-in-a-date\">Displaying and changing the era in a date</h3>\n<p> The following example adds the &quot;g&quot; custom format specifier to the  <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> property of an object that represents the formatting conventions of the en-US culture. This addition affects the following three standard format strings:  </p>\n<ul>\n<li><p>The &quot;D&quot; (long date) standard format string, which maps directly to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> property.  </p>\n</li>\n<li><p>The &quot;f&quot; (full date / short time) standard format string, which produces a result string that concatenates the substrings produced by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortTimePattern_\" data-linktype=\"relative-path\">ShortTimePattern</a> properties.  </p>\n</li>\n<li><p>The &quot;F&quot; (full date / long time) standard format string, which maps directly to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FullDateTimePattern_\" data-linktype=\"relative-path\">FullDateTimePattern</a> property. Because we have not explicitly set this property value, it is generated dynamically by concatenating the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongTimePattern_\" data-linktype=\"relative-path\">LongTimePattern</a> properties.  </p>\n<p>The example also shows how to change the era name for a culture whose calendar has a single era. In this case, the en-US culture uses the Gregorian calendar, which is represented by a <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> object. The <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class supports a single era, which it names A.D. (Anno Domini). The example changes the era name to C.E. (Common Era) by replacing the &quot;g&quot; custom format specifier in the format string assigned to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FullDateTimePattern_\" data-linktype=\"relative-path\">FullDateTimePattern</a>property with a literal string. The use of a literal string is necessary, because the era name is typically returned by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetEraName_\" data-linktype=\"relative-path\">GetEraName</a> method from private data in the culture tables supplied by either the .NET Framework or the Windows operating system.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#11\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateValue As New Date(2013, 5, 18, 13, 30, 0)\n      Dim formats() As String = { &quot;D&quot;, &quot;f&quot;, &quot;F&quot; }      \n      \n      Dim enUS As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = enUS.DateTimeFormat\n      Dim originalLongDatePattern As String = dtfi.LongDatePattern\n\n      &#39; Display the default form of three long date formats.\n      For Each fmt In formats\n         Console.WriteLine(dateValue.ToString(fmt, dtfi))\n      Next\n      Console.WriteLine()\n      \n      &#39; Modify the long date pattern.\n      dtfi.LongDatePattern = originalLongDatePattern + &quot; g&quot;\n      For Each fmt In formats\n         Console.WriteLine(dateValue.ToString(fmt, dtfi))\n      Next\n      Console.WriteLine()\n      \n      &#39; Change A.D. to C.E. (for Common Era)\n      dtfi.LongDatePattern = originalLongDatePattern + &quot; &#39;C.E.&#39;&quot;\n      For Each fmt In formats\n         Console.WriteLine(dateValue.ToString(fmt, dtfi))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Saturday, May 18, 2013\n&#39;       Saturday, May 18, 2013 1:30 PM\n&#39;       Saturday, May 18, 2013 1:30:00 PM\n&#39;       \n&#39;       Saturday, May 18, 2013 A.D.\n&#39;       Saturday, May 18, 2013 A.D. 1:30 PM\n&#39;       Saturday, May 18, 2013 A.D. 1:30:00 PM\n&#39;       \n&#39;       Saturday, May 18, 2013 C.E.\n&#39;       Saturday, May 18, 2013 C.E. 1:30 PM\n&#39;       Saturday, May 18, 2013 C.E. 1:30:00 PM\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#11\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime dateValue = new DateTime(2013, 5, 18, 13, 30, 0);\n      String[] formats = { &quot;D&quot;, &quot;f&quot;, &quot;F&quot; };      \n      \n      CultureInfo enUS = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = enUS.DateTimeFormat;\n      String originalLongDatePattern = dtfi.LongDatePattern;\n\n      // Display the default form of three long date formats.\n      foreach (var fmt in formats)\n         Console.WriteLine(dateValue.ToString(fmt, dtfi));\n\n      Console.WriteLine();\n      \n      // Modify the long date pattern.\n      dtfi.LongDatePattern = originalLongDatePattern + &quot; g&quot;;\n      foreach (var fmt in formats)\n         Console.WriteLine(dateValue.ToString(fmt, dtfi));\n\n      Console.WriteLine();\n      \n      // Change A.D. to C.E. (for Common Era)\n      dtfi.LongDatePattern = originalLongDatePattern + @&quot; &#39;C.E.&#39;&quot;;\n      foreach (var fmt in formats)\n         Console.WriteLine(dateValue.ToString(fmt, dtfi));\n\n   }\n}\n// The example displays the following output:\n//       Saturday, May 18, 2013\n//       Saturday, May 18, 2013 1:30 PM\n//       Saturday, May 18, 2013 1:30:00 PM\n//       \n//       Saturday, May 18, 2013 A.D.\n//       Saturday, May 18, 2013 A.D. 1:30 PM\n//       Saturday, May 18, 2013 A.D. 1:30:00 PM\n//       \n//       Saturday, May 18, 2013 C.E.\n//       Saturday, May 18, 2013 C.E. 1:30 PM\n//       Saturday, May 18, 2013 C.E. 1:30:00 PM\n</code></pre></li>\n</ul>\n<h2 id=\"parsing-date-and-time-strings\">Parsing date and time strings</h2>\n<p> Parsing involves converting the string representation of a date and time to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> or <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value. Both of these types include the <code>Parse</code>, <code>TryParse</code>, <code>ParseExact</code>, and <code>TryParseExact</code> methods to support parsing operations. The <code>Parse</code> and <code>TryParse</code> methods convert a string that can have a variety of formats, whereas <code>ParseExact</code> and <code>TryParseExact</code> require that the string have a defined format or formats. If the parsing operation fails, <code>Parse</code> and <code>ParseExact</code> throw an exception, whereas <code>TryParse</code> and <code>TryParseExact</code> return <code>false</code>.  </p>\n<p> The parsing methods implicitly or explicitly use a <a class=\"xref\" href=\"system.globalization.datetimestyles\" data-linktype=\"relative-path\">DateTimeStyles</a> enumeration value to determine which style elements (such as leading, trailing, or inner white space) can be present in the string to be parsed, and how to interpret the parsed string or any missing elements. If you don&#39;t provide a <a class=\"xref\" href=\"system.globalization.datetimestyles\" data-linktype=\"relative-path\">DateTimeStyles</a> value when you call the <code>Parse</code> or <code>TryParse</code> method, the default is <a class=\"xref\" href=\"system.globalization.datetimestyles\" data-linktype=\"relative-path\">System.Globalization.DateTimeStyles</a>, which is a composite style that includes the <a class=\"xref\" href=\"system.globalization.datetimestyles\" data-linktype=\"relative-path\">System.Globalization.DateTimeStyles</a>, <a class=\"xref\" href=\"system.globalization.datetimestyles\" data-linktype=\"relative-path\">System.Globalization.DateTimeStyles</a>, and <a class=\"xref\" href=\"system.globalization.datetimestyles\" data-linktype=\"relative-path\">System.Globalization.DateTimeStyles</a> flags. For the <code>ParseExact</code> and <code>TryParseExact</code> methods, the default is <a class=\"xref\" href=\"system.globalization.datetimestyles\" data-linktype=\"relative-path\">System.Globalization.DateTimeStyles</a>; the input string must correspond precisely to a particular custom date and time format string.  </p>\n<p> The parsing methods also implicitly or explicitly use a DateTimeFormatInfo object that defines the specific symbols and patterns that can occur in the string to be parsed. If you don&#39;t provide a DateTimeFormatInfo object, the DateTimeFormatInfo object for the current thread culture is used by default. For more information about parsing date and time strings, see the individual parsing methods, such as <a class=\"xref\" href=\"system.datetime#System_DateTime_Parse_\" data-linktype=\"relative-path\">Parse</a>, <a class=\"xref\" href=\"system.datetime#System_DateTime_TryParse_\" data-linktype=\"relative-path\">TryParse</a>, <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ParseExact_\" data-linktype=\"relative-path\">ParseExact</a>, and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_TryParseExact_\" data-linktype=\"relative-path\">TryParseExact</a>.  </p>\n<p> The following example illustrates the culture-sensitive nature of parsing date and time strings. It tries to parse two date strings by using the conventions of the en-US, en-GB, fr-FR, and fi-FI cultures. The date that is interpreted as 8/18/2014 in the en-US culture throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> exception in the other three cultures because 18 is interpreted as the month number. 1/2/2015 is parsed as the second day of the first month in the en-US culture, but as the first day of the second month in the remaining cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#15\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] dateStrings = { &quot;08/18/2014&quot;, &quot;01/02/2015&quot; };\n      string[] cultureNames = { &quot;en-US&quot;, &quot;en-GB&quot;, &quot;fr-FR&quot;, &quot;fi-FI&quot; };\n      \n      foreach (var cultureName in cultureNames) {\n         CultureInfo culture = CultureInfo.CreateSpecificCulture(cultureName);\n         Console.WriteLine(&quot;Parsing strings using the {0} culture.&quot;, \n                           culture.Name);\n         foreach (var dateStr in dateStrings) {\n            try {\n               Console.WriteLine(String.Format(culture, \n                                 &quot;   &#39;{0}&#39; --&gt; {1:D}&quot;, dateStr, \n                                 DateTime.Parse(dateStr, culture)));\n            }\n            catch (FormatException) {\n               Console.WriteLine(&quot;   Unable to parse &#39;{0}&#39;&quot;, dateStr);\n            }\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       Parsing strings using the en-US culture.\n//          &#39;08/18/2014&#39; --&gt; Monday, August 18, 2014\n//          &#39;01/02/2015&#39; --&gt; Friday, January 02, 2015\n//       Parsing strings using the en-GB culture.\n//          Unable to parse &#39;08/18/2014&#39;\n//          &#39;01/02/2015&#39; --&gt; 01 February 2015\n//       Parsing strings using the fr-FR culture.\n//          Unable to parse &#39;08/18/2014&#39;\n//          &#39;01/02/2015&#39; --&gt; dimanche 1 f&#233;vrier 2015\n//       Parsing strings using the fi-FI culture.\n//          Unable to parse &#39;08/18/2014&#39;\n//          &#39;01/02/2015&#39; --&gt; 1. helmikuuta 2015\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#15\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateStrings() As String = { &quot;08/18/2014&quot;, &quot;01/02/2015&quot; }\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;en-GB&quot;, &quot;fr-FR&quot;, &quot;fi-FI&quot; }\n      \n      For Each cultureName In cultureNames\n         Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(cultureName)\n         Console.WriteLine(&quot;Parsing strings using the {0} culture.&quot;, \n                           culture.Name)\n         For Each dateStr In dateStrings\n            Try\n               Console.WriteLine(String.Format(culture, \n                                 &quot;   &#39;{0}&#39; --&gt; {1:D}&quot;, dateStr, \n                                 DateTime.Parse(dateStr, culture)))\n            Catch e As FormatException\n               Console.WriteLine(&quot;   Unable to parse &#39;{0}&#39;&quot;, dateStr)\n            End Try\n         Next\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Parsing strings using the en-US culture.\n&#39;          &#39;08/18/2014&#39; --&gt; Monday, August 18, 2014\n&#39;          &#39;01/02/2015&#39; --&gt; Friday, January 02, 2015\n&#39;       Parsing strings using the en-GB culture.\n&#39;          Unable to parse &#39;08/18/2014&#39;\n&#39;          &#39;01/02/2015&#39; --&gt; 01 February 2015\n&#39;       Parsing strings using the fr-FR culture.\n&#39;          Unable to parse &#39;08/18/2014&#39;\n&#39;          &#39;01/02/2015&#39; --&gt; dimanche 1 f&#233;vrier 2015\n&#39;       Parsing strings using the fi-FI culture.\n&#39;          Unable to parse &#39;08/18/2014&#39;\n&#39;          &#39;01/02/2015&#39; --&gt; 1. helmikuuta 2015\n</code></pre><p> Date and time strings are typically parsed for two reasons:  </p>\n<ul>\n<li><p>To convert user input into a date and time value.  </p>\n</li>\n<li><p>To round-trip a date and time value; that is, to deserialize a date and time value that was previously serialized as a string.  </p>\n<p>The following sections discuss these two operations in greater detail.  </p>\n</li>\n</ul>\n<h3 id=\"parsing-user-strings\">Parsing user strings</h3>\n<p> When you parse date and time strings input by the user, you should always instantiate a DateTimeFormatInfo object that reflects the user&#39;s cultural settings, including any customizations the user may have made. Otherwise, the  date and time object may have incorrect values. For information about how to instantiate a DateTimeFormatInfo object that reflects user cultural customizations, see the <a href=\"#dynamic\" data-linktype=\"self-bookmark\">DateTimeFormatInfo and dynamic data</a> section.  </p>\n<p> The following example illustrates the difference between a parsing operation that reflects user cultural settings and one that does not. In this case, the default system culture is en-US, but the user has used Control Panel, <strong>Region and Language</strong> to change the short date pattern from its default of &quot;M/d/yyyy&quot; to &quot;yy/MM/dd&quot;. When the user enters a string that reflects user settings, and the string is parsed by a DateTimeFormatInfo object that also reflects user settings (overrides), the parsing operation returns a correct result. However, when the string is parsed by a DateTimeFormatInfo object that reflects standard en-US cultural settings, the parsing method throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> exception because it interprets 14 as the number of the month, not the last two digits of the year.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#16\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string inputDate = &quot;14/05/10&quot;;\n      \n      CultureInfo[] cultures = { CultureInfo.GetCultureInfo(&quot;en-US&quot;), \n                                 CultureInfo.CreateSpecificCulture(&quot;en-US&quot;) };\n      \n      foreach (var culture in cultures) {\n         try {\n            Console.WriteLine(&quot;{0} culture reflects user overrides: {1}&quot;, \n                              culture.Name, culture.UseUserOverride);\n            DateTime occasion = DateTime.Parse(inputDate, culture);\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, inputDate, \n                              occasion.ToString(&quot;D&quot;, CultureInfo.InvariantCulture));\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, inputDate);                           \n         }   \n         Console.WriteLine();  \n      }\n   }\n}\n// The example displays the following output:\n//       en-US culture reflects user overrides: False\n//       Unable to parse &#39;14/05/10&#39;\n//       \n//       en-US culture reflects user overrides: True\n//       &#39;14/05/10&#39; --&gt; Saturday, 10 May 2014\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#16\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim inputDate As String = &quot;14/05/10&quot;\n      \n      Dim cultures() As CultureInfo = { CultureInfo.GetCultureInfo(&quot;en-US&quot;), \n                                        CultureInfo.CreateSpecificCulture(&quot;en-US&quot;) }\n      \n      For Each culture In cultures\n         Try\n            Console.WriteLine(&quot;{0} culture reflects user overrides: {1}&quot;, \n                              culture.Name, culture.UseUserOverride)\n            Dim occasion As DateTime = DateTime.Parse(inputDate, culture)\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, inputDate, \n                              occasion.ToString(&quot;D&quot;, CultureInfo.InvariantCulture))\n         Catch e As FormatException\n            Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, inputDate)                           \n         End Try   \n         Console.WriteLine()  \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       en-US culture reflects user overrides: False\n&#39;       Unable to parse &#39;14/05/10&#39;\n&#39;       \n&#39;       en-US culture reflects user overrides: True\n&#39;       &#39;14/05/10&#39; --&gt; Saturday, 10 May 2014\n</code></pre><h3 id=\"serializing-and-deserializing-date-and-time-data\">Serializing and deserializing date and time data</h3>\n<p> Serialized date and time data are expected to round-trip; that is, all serialized and deserialized values should be identical. If a date and time value represents a single moment in time, the deserialized value should represent the same moment in time regardless of the culture or time zone of the system on which it was restored. To round-trip date and time data successfully, you must use the conventions of the invariant culture, which is returned by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_InvariantInfo_\" data-linktype=\"relative-path\">InvariantInfo</a> property, to generate and parse the data. The formatting and parsing operations should never reflect the conventions of the default culture. If you use default cultural settings, the portability of the data is strictly limited; it can be successfully deserialized only on a thread whose cultural-specific settings are identical to those of the thread on which it was serialized. In some cases, this means that the data cannot even be successfully serialized and deserialized on the same system.  </p>\n<p> If the time component of a date and time value is significant, it should also be converted to UTC and serialized by using the &quot;o&quot; or &quot;r&quot; <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">standard format string</a>. The time data can then be restored by calling a parsing method and passing it the appropriate format string along with the invariant culture as the <code>provider</code> argument.  </p>\n<p> The following example illustrates the process of round-tripping a date and time value. It serializes a date and time on a system that observes U.S. Pacific time and whose current culture is en-US.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#17\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;.\\DateData.dat&quot;)\n      &#39; Define a date and time to serialize.\n      Dim originalDate As New Date(2014, 08, 18, 08, 16, 35)\n      &#39; Display information on the date and time.\n      Console.WriteLine(&quot;Date to serialize: {0:F}&quot;, originalDate)\n      Console.WriteLine(&quot;Current Culture:   {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)\n      Console.WriteLine(&quot;Time Zone:         {0}&quot;, \n                        TimeZoneInfo.Local.DisplayName)\n      &#39; Convert the date value to UTC.\n      Dim utcDate As Date = originalDate.ToUniversalTime()\n      &#39; Serialize the UTC value.\n      sw.Write(utcDate.ToString(&quot;o&quot;, DateTimeFormatInfo.InvariantInfo))\n      sw.Close()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Date to serialize: Monday, August 18, 2014 8:16:35 AM\n&#39;       Current Culture:   en-US\n&#39;       Time Zone:         (UTC-08:00) Pacific Time (US &amp; Canada)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#17\">using System;\nusing System.Globalization;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(@&quot;.\\DateData.dat&quot;);\n      // Define a date and time to serialize.\n      DateTime originalDate = new DateTime(2014, 08, 18, 08, 16, 35);\n      // Display information on the date and time.\n      Console.WriteLine(&quot;Date to serialize: {0:F}&quot;, originalDate);\n      Console.WriteLine(&quot;Current Culture:   {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);\n      Console.WriteLine(&quot;Time Zone:         {0}&quot;, \n                        TimeZoneInfo.Local.DisplayName);\n      // Convert the date value to UTC.\n      DateTime utcDate = originalDate.ToUniversalTime();\n      // Serialize the UTC value.\n      sw.Write(utcDate.ToString(&quot;o&quot;, DateTimeFormatInfo.InvariantInfo));\n      sw.Close();\n   }\n}\n// The example displays the following output:\n//       Date to serialize: Monday, August 18, 2014 8:16:35 AM\n//       Current Culture:   en-US\n//       Time Zone:         (UTC-08:00) Pacific Time (US &amp; Canada)\n</code></pre><p> It deserializes the data on a system in the Brussels, Copenhagen, Madrid and Paris time zone and whose current culture is fr-FR. The restored date is nine hours later than the original date, which reflects the time zone adjustment from eight hours behind UTC to one hour ahead of UTC. Both the original date and the restored date represent the same moment in time.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Class#18\">using System;\nusing System.Globalization;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Open the file and retrieve the date string.\n      StreamReader sr = new StreamReader(@&quot;.\\DateData.dat&quot;);             \n      String dateValue = sr.ReadToEnd();\n      \n      // Parse the date.\n      DateTime parsedDate = DateTime.ParseExact(dateValue, &quot;o&quot;, \n                            DateTimeFormatInfo.InvariantInfo);\n      // Convert it to local time.                             \n      DateTime restoredDate = parsedDate.ToLocalTime();\n      // Display information on the date and time.\n      Console.WriteLine(&quot;Deserialized date: {0:F}&quot;, restoredDate);\n      Console.WriteLine(&quot;Current Culture:   {0}&quot;, \n                        CultureInfo.CurrentCulture.Name);\n      Console.WriteLine(&quot;Time Zone:         {0}&quot;, \n                        TimeZoneInfo.Local.DisplayName);\n   }\n}\n// The example displays the following output:\n//    Deserialized date: lundi 18 ao&#251;t 2014 17:16:35\n//    Current Culture:   fr-FR\n//    Time Zone:         (UTC+01:00) Brussels, Copenhagen, Madrid, Paris\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Class#18\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      &#39; Open the file and retrieve the date string.\n      Dim sr As New StreamReader(&quot;.\\DateData.dat&quot;)             \n      Dim dateValue As String = sr.ReadToEnd()\n      \n      &#39; Parse the date.\n      Dim parsedDate As Date = Date.ParseExact(dateValue, &quot;o&quot;, \n                               DateTimeFormatInfo.InvariantInfo)\n      &#39; Convert it to local time.                             \n      Dim restoredDate As Date = parsedDate.ToLocalTime()\n      &#39; Display information on the date and time.\n      Console.WriteLine(&quot;Deserialized date: {0:F}&quot;, restoredDate)\n      Console.WriteLine(&quot;Current Culture:   {0}&quot;, \n                        CultureInfo.CurrentCulture.Name)\n      Console.WriteLine(&quot;Time Zone:         {0}&quot;, \n                        TimeZoneInfo.Local.DisplayName)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Deserialized date: lundi 18 ao&#251;t 2014 17:16:35\n&#39;    Current Culture:   fr-FR\n&#39;    Time Zone:         (UTC+01:00) Brussels, Copenhagen, Madrid, Paris\n</code></pre>\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo__ctor\" data-linktype=\"self-bookmark\">DateTimeFormatInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new writable instance of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> class that is culture-independent (invariant).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames\" data-linktype=\"self-bookmark\">AbbreviatedDayNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a one-dimensional array of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the culture-specific abbreviated names of the days of the week.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames\" data-linktype=\"self-bookmark\">AbbreviatedMonthGenitiveNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a string array of abbreviated month names associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames\" data-linktype=\"self-bookmark\">AbbreviatedMonthNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_AMDesignator\" data-linktype=\"self-bookmark\">AMDesignator</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the string designator for hours that are &quot;ante meridiem&quot; (before noon).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_Calendar\" data-linktype=\"self-bookmark\">Calendar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the calendar to use for the current culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_CalendarWeekRule\" data-linktype=\"self-bookmark\">CalendarWeekRule</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_CurrentInfo\" data-linktype=\"self-bookmark\">CurrentInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a read-only <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that formats values based on the current culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_DateSeparator\" data-linktype=\"self-bookmark\">DateSeparator</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the string that separates the components of a date, that is, the year, month, and day.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_DayNames\" data-linktype=\"self-bookmark\">DayNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a one-dimensional string array that contains the culture-specific full names of the days of the week.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_FirstDayOfWeek\" data-linktype=\"self-bookmark\">FirstDayOfWeek</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the first day of the week.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_FullDateTimePattern\" data-linktype=\"self-bookmark\">FullDateTimePattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the custom format string for a long date and long time value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_InvariantInfo\" data-linktype=\"self-bookmark\">InvariantInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default read-only <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is culture-independent (invariant).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_LongDatePattern\" data-linktype=\"self-bookmark\">LongDatePattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the custom format string for a long date value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_LongTimePattern\" data-linktype=\"self-bookmark\">LongTimePattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the custom format string for a long time value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_MonthDayPattern\" data-linktype=\"self-bookmark\">MonthDayPattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the custom format string for a month and day value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_MonthGenitiveNames\" data-linktype=\"self-bookmark\">MonthGenitiveNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a string array of month names associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_MonthNames\" data-linktype=\"self-bookmark\">MonthNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a one-dimensional array of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the culture-specific full names of the months.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_NativeCalendarName\" data-linktype=\"self-bookmark\">NativeCalendarName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the native name of the calendar associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_PMDesignator\" data-linktype=\"self-bookmark\">PMDesignator</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the string designator for hours that are &quot;post meridiem&quot; (after noon).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_RFC1123Pattern\" data-linktype=\"self-bookmark\">RFC1123Pattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_ShortDatePattern\" data-linktype=\"self-bookmark\">ShortDatePattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the custom format string for a short date value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_ShortestDayNames\" data-linktype=\"self-bookmark\">ShortestDayNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a string array of the shortest unique abbreviated day names associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_ShortTimePattern\" data-linktype=\"self-bookmark\">ShortTimePattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the custom format string for a short time value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_SortableDateTimePattern\" data-linktype=\"self-bookmark\">SortableDateTimePattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom format string for a sortable date and time value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_TimeSeparator\" data-linktype=\"self-bookmark\">TimeSeparator</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the string that separates the components of time, that is, the hour, minutes, and seconds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern\" data-linktype=\"self-bookmark\">UniversalSortableDateTimePattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the custom format string for a universal, sortable date and time string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_YearMonthPattern\" data-linktype=\"self-bookmark\">YearMonthPattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the custom format string for a year and month value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName_System_DayOfWeek_\" data-linktype=\"self-bookmark\">GetAbbreviatedDayName(DayOfWeek)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the culture-specific abbreviated name of the specified day of the week based on the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName_System_Int32_\" data-linktype=\"self-bookmark\">GetAbbreviatedEraName(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the string containing the abbreviated name of the specified era, if an abbreviation exists.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName_System_Int32_\" data-linktype=\"self-bookmark\">GetAbbreviatedMonthName(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the culture-specific abbreviated name of the specified month based on the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns\" data-linktype=\"self-bookmark\">GetAllDateTimePatterns()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the standard patterns in which date and time values can be formatted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_System_Char_\" data-linktype=\"self-bookmark\">GetAllDateTimePatterns(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the patterns in which date and time values can be formatted using the specified standard format string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetDayName_System_DayOfWeek_\" data-linktype=\"self-bookmark\">GetDayName(DayOfWeek)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the culture-specific full name of the specified day of the week based on the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetEra_System_String_\" data-linktype=\"self-bookmark\">GetEra(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the integer representing the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetEraName_System_Int32_\" data-linktype=\"self-bookmark\">GetEraName(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the string containing the name of the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetFormat_System_Type_\" data-linktype=\"self-bookmark\">GetFormat(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an object of the specified type that provides a date and time  formatting service.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetInstance_System_IFormatProvider_\" data-linktype=\"self-bookmark\">GetInstance(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object associated with the specified <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetMonthName_System_Int32_\" data-linktype=\"self-bookmark\">GetMonthName(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the culture-specific full name of the specified month based on the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_GetShortestDayName_System_DayOfWeek_\" data-linktype=\"self-bookmark\">GetShortestDayName(DayOfWeek)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains the shortest abbreviated day name for a specified day of the week associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_ReadOnly_System_Globalization_DateTimeFormatInfo_\" data-linktype=\"self-bookmark\">ReadOnly(DateTimeFormatInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a read-only <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> wrapper.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_DateTimeFormatInfo_SetAllDateTimePatterns_System_String___System_Char_\" data-linktype=\"self-bookmark\">SetAllDateTimePatterns(String[],Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the custom date and time format strings that correspond to a specified standard format string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo__ctor\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DateTimeFormatInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new writable instance of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> class that is culture-independent (invariant).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTimeFormatInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that represents the date and time information of the invariant culture. To create a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object for a specific culture, create a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object for that culture and retrieve the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by its <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property.  </p>\n<p> The properties of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object created by this constructor can be modified. However, you cannot modify the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property, because the invariant culture supports only a localized version of the Gregorian calendar. To create a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that uses a specific calendar, you must instantiate a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that supports that calendar and assign the calendar to the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbbreviatedDayNames</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a one-dimensional array of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the culture-specific abbreviated names of the days of the week.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] AbbreviatedDayNames { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A one-dimensional array of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the culture-specific abbreviated names of the days of the week. The array for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> contains &quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, and &quot;Sat&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to an array that is multidimensional or that has a length that is not exactly 7.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If setting this property, the array must be one-dimensional and must have exactly seven elements. The first element (the element at index zero) represents the first day of the week in the calendar defined by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property.  </p>\n<p> If a custom format string includes the &quot;ddd&quot; format specifier, the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> or <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> method includes the appropriate member of the AbbreviatedDayNames array in place of the &quot;ddd&quot; in the result string.  </p>\n<p> This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes. If the selected <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> does not support abbreviated day names, the array contains the full day names.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a read/write <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the English (United States) culture and assigns abbreviated day names to its AbbreviatedDayNames property. It then uses the &quot;ddd&quot; format specifier in a  to display the string representation of dates for one week beginning May 28, 2014.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo ci = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = ci.DateTimeFormat;\n      dtfi.AbbreviatedDayNames = new String[] { &quot;Su&quot;, &quot;M&quot;, &quot;Tu&quot;, &quot;W&quot;, \n                                                &quot;Th&quot;, &quot;F&quot;, &quot;Sa&quot; };  \n      DateTime dat = new DateTime(2014, 5, 28);\n\n      for (int ctr = 0; ctr &lt;= 6; ctr++) {\n         String output = String.Format(ci, &quot;{0:ddd MMM dd, yyyy}&quot;, dat.AddDays(ctr));\n         Console.WriteLine(output);\n      } \n   }\n}\n// The example displays the following output:\n//       W May 28, 2014\n//       Th May 29, 2014\n//       F May 30, 2014\n//       Sa May 31, 2014\n//       Su Jun 01, 2014\n//       M Jun 02, 2014\n//       Tu Jun 03, 2014\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim ci As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = ci.DateTimeFormat\n      dtfi.AbbreviatedDayNames = { &quot;Su&quot;, &quot;M&quot;, &quot;Tu&quot;, &quot;W&quot;, &quot;Th&quot;,  \n                                   &quot;F&quot;, &quot;Sa&quot; }  \n      Dim dat As Date = #05/28/2014#\n\n      For ctr As Integer = 0 To 6 \n         Dim output As String = String.Format(ci, &quot;{0:ddd MMM dd, yyyy}&quot;, dat.AddDays(ctr))\n         Console.WriteLine(output)\n      Next \n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       W May 28, 2014\n&#39;       Th May 29, 2014\n&#39;       F May 30, 2014\n&#39;       Sa May 31, 2014\n&#39;       Su Jun 01, 2014\n&#39;       M Jun 02, 2014\n&#39;       Tu Jun 03, 2014\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbbreviatedMonthGenitiveNames</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a string array of abbreviated month names associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] AbbreviatedMonthGenitiveNames { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of abbreviated month names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the array is multidimensional or has a length that is not exactly 13.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the array or one of the elements of the array is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In some languages, a month name that is part of a date appears in the genitive case. For example, a date in the ru-RU or Russian (Russia) culture consists of the day number and the genitive month name, such as 1 Ð¯Ð½Ð²Ð°Ñ€Ñ (1 January). For these cultures, if a custom format string includes the &quot;MMM&quot; format specifier, the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> or <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> method includes the appropriate member of the AbbreviatedMonthGenitiveNames array in place of the &quot;MMM&quot; in the result string.  </p>\n<p> In a set operation, the array must be one-dimensional with exactly 13 elements, because <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> objects accommodate calendars that have 13 months. For calendars that have 12 months, the thirteenth element should be <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. The first element (the element at index zero) represents the first month of the year defined by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property.  </p>\n<p> If you set the AbbreviatedMonthGenitiveNames property, you must also set the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_\" data-linktype=\"relative-path\">AbbreviatedMonthNames</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a read/write <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the English (United States) culture and assigns abbreviated genitive month names to its <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_\" data-linktype=\"relative-path\">AbbreviatedMonthNames</a> and AbbreviatedMonthGenitiveNames properties. It then displays the string representation of dates that include the abbreviated month name of each month in the culture&#39;s supported calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo ci = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = ci.DateTimeFormat;\n      dtfi.AbbreviatedMonthNames = new string[] { &quot;of Jan&quot;, &quot;of Feb&quot;, &quot;of Mar&quot;, \n                                                  &quot;of Apr&quot;, &quot;of May&quot;, &quot;of Jun&quot;, \n                                                  &quot;of Jul&quot;, &quot;of Aug&quot;, &quot;of Sep&quot;, \n                                                  &quot;of Oct&quot;, &quot;of Nov&quot;, &quot;of Dec&quot;, &quot;&quot; };  \n      dtfi.AbbreviatedMonthGenitiveNames = dtfi.AbbreviatedMonthNames;\n      DateTime dat = new DateTime(2012, 5, 28);\n      \n      for (int ctr = 0; ctr &lt; dtfi.Calendar.GetMonthsInYear(dat.Year); ctr++)\n         Console.WriteLine(dat.AddMonths(ctr).ToString(&quot;dd MMM yyyy&quot;, dtfi));\n   }\n}\n// The example displays the following output:\n//       28 of May 2012\n//       28 of Jun 2012\n//       28 of Jul 2012\n//       28 of Aug 2012\n//       28 of Sep 2012\n//       28 of Oct 2012\n//       28 of Nov 2012\n//       28 of Dec 2012\n//       28 of Jan 2013\n//       28 of Feb 2013\n//       28 of Mar 2013\n//       28 of Apr 2013\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim ci As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = ci.DateTimeFormat\n      dtfi.AbbreviatedMonthNames = { &quot;of Jan&quot;, &quot;of Feb&quot;, &quot;of Mar&quot;, \n                                     &quot;of Apr&quot;, &quot;of May&quot;, &quot;of Jun&quot;, \n                                     &quot;of Jul&quot;, &quot;of Aug&quot;, &quot;of Sep&quot;, \n                                     &quot;of Oct&quot;, &quot;of Nov&quot;, &quot;of Dec&quot;, &quot;&quot; }  \n      dtfi.AbbreviatedMonthGenitiveNames = dtfi.AbbreviatedMonthNames\n      Dim dat As Date = #05/28/2012#\n      \n      For ctr As Integer = 0 To dtfi.Calendar.GetMonthsInYear(dat.Year) - 1\n         Console.WriteLine(dat.AddMonths(ctr).ToString(&quot;dd MMM yyyy&quot;, dtfi))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       28 of May 2012\n&#39;       28 of Jun 2012\n&#39;       28 of Jul 2012\n&#39;       28 of Aug 2012\n&#39;       28 of Sep 2012\n&#39;       28 of Oct 2012\n&#39;       28 of Nov 2012\n&#39;       28 of Dec 2012\n&#39;       28 of Jan 2013\n&#39;       28 of Feb 2013\n&#39;       28 of Mar 2013\n&#39;       28 of Apr 2013\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AbbreviatedMonthNames</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] AbbreviatedMonthNames { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A one-dimensional string array with 13 elements that contains the culture-specific abbreviated names of the months. For 12-month calendars, the 13th element of the array is an empty string. The array for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> contains &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;, and &quot;&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to an array that is multidimensional or that has a length that is not exactly 13.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you set this property, the array must be one-dimensional with exactly 13 elements. <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> objects accommodate calendars with 13 months. The first element (the element at index zero) represents the first month of the year defined by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property.  </p>\n<p> If you set the AbbreviatedMonthNames property, you must also set the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_\" data-linktype=\"relative-path\">AbbreviatedMonthGenitiveNames</a> property. The AbbreviatedMonthNames and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_\" data-linktype=\"relative-path\">AbbreviatedMonthGenitiveNames</a> properties are used to format dates using the following format strings:  </p>\n<ul>\n<li><p>A standard date and time format string that aliases a custom format string that includes the &quot;MMM&quot; format specifier.  </p>\n</li>\n<li><p>A custom date and time format string that includes the &quot;MMM&quot; format specifier.  </p>\n<p>This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes. If the selected <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> does not support abbreviated month names, the array contains the full month names.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a read/write <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the English (United States) culture and assigns abbreviated genitive month names to its AbbreviatedMonthNames and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_\" data-linktype=\"relative-path\">AbbreviatedMonthGenitiveNames</a> properties. It then displays the string representation of dates that include the abbreviated name of each month in the culture&#39;s supported calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo ci = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = ci.DateTimeFormat;\n      dtfi.AbbreviatedMonthNames = new string[] { &quot;of Jan&quot;, &quot;of Feb&quot;, &quot;of Mar&quot;, \n                                                  &quot;of Apr&quot;, &quot;of May&quot;, &quot;of Jun&quot;, \n                                                  &quot;of Jul&quot;, &quot;of Aug&quot;, &quot;of Sep&quot;, \n                                                  &quot;of Oct&quot;, &quot;of Nov&quot;, &quot;of Dec&quot;, &quot;&quot; };  \n      dtfi.AbbreviatedMonthGenitiveNames = dtfi.AbbreviatedMonthNames;\n      DateTime dat = new DateTime(2012, 5, 28);\n      \n      for (int ctr = 0; ctr &lt; dtfi.Calendar.GetMonthsInYear(dat.Year); ctr++)\n         Console.WriteLine(dat.AddMonths(ctr).ToString(&quot;dd MMM yyyy&quot;, dtfi));\n   }\n}\n// The example displays the following output:\n//       28 of May 2012\n//       28 of Jun 2012\n//       28 of Jul 2012\n//       28 of Aug 2012\n//       28 of Sep 2012\n//       28 of Oct 2012\n//       28 of Nov 2012\n//       28 of Dec 2012\n//       28 of Jan 2013\n//       28 of Feb 2013\n//       28 of Mar 2013\n//       28 of Apr 2013\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim ci As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = ci.DateTimeFormat\n      dtfi.AbbreviatedMonthNames = { &quot;of Jan&quot;, &quot;of Feb&quot;, &quot;of Mar&quot;, \n                                     &quot;of Apr&quot;, &quot;of May&quot;, &quot;of Jun&quot;, \n                                     &quot;of Jul&quot;, &quot;of Aug&quot;, &quot;of Sep&quot;, \n                                     &quot;of Oct&quot;, &quot;of Nov&quot;, &quot;of Dec&quot;, &quot;&quot; }  \n      dtfi.AbbreviatedMonthGenitiveNames = dtfi.AbbreviatedMonthNames\n      Dim dat As Date = #05/28/2012#\n      \n      For ctr As Integer = 0 To dtfi.Calendar.GetMonthsInYear(dat.Year) - 1\n         Console.WriteLine(dat.AddMonths(ctr).ToString(&quot;dd MMM yyyy&quot;, dtfi))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       28 of May 2012\n&#39;       28 of Jun 2012\n&#39;       28 of Jul 2012\n&#39;       28 of Aug 2012\n&#39;       28 of Sep 2012\n&#39;       28 of Oct 2012\n&#39;       28 of Nov 2012\n&#39;       28 of Dec 2012\n&#39;       28 of Jan 2013\n&#39;       28 of Feb 2013\n&#39;       28 of Mar 2013\n&#39;       28 of Apr 2013\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_AMDesignator\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_AMDesignator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AMDesignator</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the string designator for hours that are &quot;ante meridiem&quot; (before noon).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string AMDesignator { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string designator for hours that are ante meridiem. The default for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> is &quot;AM&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>TheAMDesignator property is used for all times from 0:00:00 (midnight) to 11:59:59.999.  </p>\n<p> If a custom format string includes the &quot;tt&quot; format specifier and the time is before noon, the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> or <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> method includes the value of the AMDesignator property in place of &quot;tt&quot; in the result string. If the custom format string includes the &quot;t&quot; custom format specifier, only the first character of the AMDesignator property value is included. You should use &quot;tt&quot; for languages for which it is necessary to maintain the distinction between A.M. and P.M. An example is Japanese, in which the A.M. and P.M. designators differ in the second character instead of the first character.  </p>\n<p> For cultures that do not use an A.M. designator, this property returns an empty string.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_Calendar\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_Calendar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Calendar</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the calendar to use for the current culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Globalization.Calendar Calendar { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a></div>\r\n                  </div>\r\n                  <p>The calendar to use for the current culture. The default for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> is a <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to a <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object that is not valid for the current culture.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Calendar property accepts only calendars that are valid for the culture that is associated with the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object. The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a> property specifies the calendars that can be used by a particular culture, and the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property specifies the default calendar for the culture.  </p>\n<p> Changing the value of this property affects the following properties as well: <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_MonthNames_\" data-linktype=\"relative-path\">MonthNames</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_\" data-linktype=\"relative-path\">AbbreviatedMonthNames</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_DayNames_\" data-linktype=\"relative-path\">DayNames</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_\" data-linktype=\"relative-path\">AbbreviatedDayNames</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_CalendarWeekRule_\" data-linktype=\"relative-path\">CalendarWeekRule</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_\" data-linktype=\"relative-path\">FirstDayOfWeek</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FullDateTimePattern_\" data-linktype=\"relative-path\">FullDateTimePattern</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortDatePattern_\" data-linktype=\"relative-path\">ShortDatePattern</a>, <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_YearMonthPattern_\" data-linktype=\"relative-path\">YearMonthPattern</a>, and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_MonthDayPattern_\" data-linktype=\"relative-path\">MonthDayPattern</a>.  </p>\n<p> For example, if the culture of the current thread is Japanese, this property accepts <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a>, <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a><a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>, or <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a><a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>. When the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> is used, the default long date specifier is &quot;gg y&#39;\\x5e74&#39;M&#39;\\x6708&#39;d&#39;\\x65e5&#39;&quot;. When the <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a><a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>, is used, the default long date specifier is &quot;yyyy&#39;\\x5e74&#39;M&#39;\\x6708&#39;d&#39;\\x65e5&#39;&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>ChangeCalendar</code> method that changes a culture&#39;s current calendar to a specified calendar unless it is already the current calendar or if it is not supported by the culture. The code that calls the method instantiates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the Arabic (Egypt) culture and first attempts to change its calendar to the Japanese calendar. Because the Japanese calendar is not supported, the method makes not change the culture&#39;s calendar. However, because the Umm al-Qura calendar is a member of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a> collection, the method does succeed in making it the current calendar for the ar-EG culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.Calendar#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim ci As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;ar-EG&quot;)\n      Console.WriteLine(&quot;The current calendar for the {0} culture is {1}&quot;,\n                        ci.Name, \n                        CalendarUtilities.ShowCalendarName(ci.DateTimeFormat.Calendar))\n\n      CalendarUtilities.ChangeCalendar(ci, New JapaneseCalendar())\n      Console.WriteLine(&quot;The current calendar for the {0} culture is {1}&quot;,\n                        ci.Name, \n                        CalendarUtilities.ShowCalendarName(ci.DateTimeFormat.Calendar))\n      \n      CalendarUtilities.ChangeCalendar(ci, New UmAlQuraCalendar())\n      Console.WriteLine(&quot;The current calendar for the {0} culture is {1}&quot;,\n                        ci.Name, \n                        CalendarUtilities.ShowCalendarName(ci.DateTimeFormat.Calendar))\n   End Sub\nEnd Module\n\nPublic Class CalendarUtilities\n   Private newCal As Calendar\n   Private isGregorian As Boolean\n   \n   Public Shared Sub ChangeCalendar(ci As CultureInfo, cal As Calendar)\n      Dim util As New CalendarUtilities(cal)\n      \n      &#39; Is the new calendar already the current calendar?\n      If util.CalendarExists(ci.DateTimeFormat.Calendar) Then\n         Exit Sub\n      End If\n\n      &#39; Is the new calendar supported?\n      If Array.Exists(ci.OptionalCalendars, AddressOf util.CalendarExists) Then\n         ci.DateTimeFormat.Calendar = cal\n      End If\n   End Sub\n   \n   Private Sub New(cal As Calendar)\n      newCal = cal\n      \n      &#39; Is the new calendar a Gregorian calendar?\n      isGregorian = cal.GetType().Name.Contains(&quot;Gregorian&quot;)\n   End Sub\n   \n   Private Function CalendarExists(cal As Calendar) As Boolean\n      If cal.ToString() = newCal.ToString Then\n         If isGregorian Then\n            If CType(cal, GregorianCalendar).CalendarType = \n               CType(newCal, GregorianCalendar).CalendarType Then\n               Return True\n            End If\n         Else\n            Return True\n         End If\n      End If\n      Return False\n   End Function\n\n   Public Shared Function ShowCalendarName(cal As Calendar) As String\n      Dim calName As String = cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;)\n      If TypeOf cal Is GregorianCalendar Then\n         calName += &quot;, Type &quot; + CType(cal, GregorianCalendar).CalendarType.ToString()\n      End If\n      Return calName \n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;    The current calendar for the ar-EG culture is GregorianCalendar, Type Localized\n&#39;    The current calendar for the ar-EG culture is GregorianCalendar, Type Localized\n&#39;    The current calendar for the ar-EG culture is UmAlQuraCalendar\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.Calendar#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo ci = CultureInfo.CreateSpecificCulture(&quot;ar-EG&quot;);\n      Console.WriteLine(&quot;The current calendar for the {0} culture is {1}&quot;,\n                        ci.Name, \n                        CalendarUtilities.ShowCalendarName(ci.DateTimeFormat.Calendar));\n\n      CalendarUtilities.ChangeCalendar(ci, new JapaneseCalendar());\n      Console.WriteLine(&quot;The current calendar for the {0} culture is {1}&quot;,\n                        ci.Name, \n                        CalendarUtilities.ShowCalendarName(ci.DateTimeFormat.Calendar));\n      \n      CalendarUtilities.ChangeCalendar(ci, new UmAlQuraCalendar());\n      Console.WriteLine(&quot;The current calendar for the {0} culture is {1}&quot;,\n                        ci.Name, \n                        CalendarUtilities.ShowCalendarName(ci.DateTimeFormat.Calendar));\n   }\n}\n\npublic class CalendarUtilities\n{\n   private Calendar newCal;\n   private bool isGregorian;\n   \n   public static void ChangeCalendar(CultureInfo ci, Calendar cal)\n   {\n      CalendarUtilities util = new CalendarUtilities(cal);\n      \n      // Is the new calendar already the current calendar?\n      if (util.CalendarExists(ci.DateTimeFormat.Calendar))\n         return;\n\n      // Is the new calendar supported?\n      if (Array.Exists(ci.OptionalCalendars, util.CalendarExists))\n         ci.DateTimeFormat.Calendar = cal;\n   }\n   \n   private CalendarUtilities(Calendar cal)\n   {\n      newCal = cal;\n      \n      // Is the new calendar a Gregorian calendar?\n      isGregorian = cal.GetType().Name.Contains(&quot;Gregorian&quot;);\n   }\n   \n   private bool CalendarExists(Calendar cal)\n   {\n      if (cal.ToString() == newCal.ToString()) {\n         if (isGregorian) {\n            if (((GregorianCalendar) cal).CalendarType == \n               ((GregorianCalendar) newCal).CalendarType)\n               return true;\n         }\n         else {\n            return true;\n         }\n      }\n      return false;\n   }\n\n   public static string ShowCalendarName(Calendar cal)\n   {\n      string calName = cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;);\n      if (cal is GregorianCalendar)\n         calName += &quot;, Type &quot; + ((GregorianCalendar) cal).CalendarType.ToString();\n\n      return calName; \n   }\n}\n// The example displays the following output:\n//    The current calendar for the ar-EG culture is GregorianCalendar, Type Localized\n//    The current calendar for the ar-EG culture is GregorianCalendar, Type Localized\n//    The current calendar for the ar-EG culture is UmAlQuraCalendar\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_CalendarWeekRule\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_CalendarWeekRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CalendarWeekRule</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a></div>\r\n                  </div>\r\n                  <p>A value that determines the first calendar week of the year. The default for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> is <a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to a value that is not a valid <a class=\"xref\" href=\"system.globalization.calendarweekrule\" data-linktype=\"relative-path\">CalendarWeekRule</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_CurrentInfo\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_CurrentInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets a read-only <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that formats values based on the current culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object based on the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object for the current thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the CurrentInfo property reflects user overrides.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the CurrentInfo property to retrieve a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that represents the formatting conventions of the current culture, which in this case is the en-US culture. It then displays the format string and the result string for six formatting properties.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.CurrentInfo#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dat As New Date(2016, 05, 28, 10, 28, 0)\n      Dim dtfi As DateTimeFormatInfo = DateTimeFormatInfo.CurrentInfo\n      Console.WriteLine(&quot;Date and Time Formats for {0:u} in the {1} Culture:&quot;, \n                        dat, CultureInfo.CurrentCulture.Name) \n      Console.WriteLine()\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Long Date Pattern&quot;, \n                        dtfi.LongDatePattern, \n                        dat.ToString(dtfi.LongDatePattern))\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Long Time Pattern&quot;, \n                        dtfi.LongTimePattern, \n                        dat.ToString(dtfi.LongTimePattern))\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Month/Day Pattern&quot;, \n                        dtfi.MonthDayPattern, \n                        dat.ToString(dtfi.MonthDayPattern))\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Short Date Pattern&quot;, \n                        dtfi.ShortDatePattern, \n                        dat.ToString(dtfi.ShortDatePattern))\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Short Time Pattern&quot;, \n                        dtfi.ShortTimePattern, \n                        dat.ToString(dtfi.ShortTimePattern))\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Year/Month Pattern&quot;, \n                        dtfi.YearMonthPattern, \n                        dat.ToString(dtfi.YearMonthPattern))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Date and Time Formats for 2016-05-28 10:28:00Z in the en-US Culture:\n&#39;    \n&#39;    Long Date Pattern      dddd, MMMM d, yyyy   Saturday, May 28, 2016\n&#39;    Long Time Pattern      h:mm:ss tt           10:28:00 AM\n&#39;    Month/Day Pattern      MMMM d               May 28\n&#39;    Short Date Pattern     M/d/yyyy             5/28/2016\n&#39;    Short Time Pattern     h:mm tt              10:28 AM\n&#39;    Year/Month Pattern     MMMM yyyy            May 2016\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.CurrentInfo#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var date = new DateTime(2016, 05, 28, 10, 28, 0);\n      var dtfi = DateTimeFormatInfo.CurrentInfo;\n      Console.WriteLine(&quot;Date and Time Formats for {0:u} in the {1} Culture:<br>&quot;, \n                        date, CultureInfo.CurrentCulture.Name); \n\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Long Date Pattern&quot;, \n                        dtfi.LongDatePattern, \n                        date.ToString(dtfi.LongDatePattern));\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Long Time Pattern&quot;, \n                        dtfi.LongTimePattern, \n                        date.ToString(dtfi.LongTimePattern));\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Month/Day Pattern&quot;, \n                        dtfi.MonthDayPattern, \n                        date.ToString(dtfi.MonthDayPattern));\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Short Date Pattern&quot;, \n                        dtfi.ShortDatePattern, \n                        date.ToString(dtfi.ShortDatePattern));\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Short Time Pattern&quot;, \n                        dtfi.ShortTimePattern, \n                        date.ToString(dtfi.ShortTimePattern));\n      Console.WriteLine(&quot;{0,-22} {1,-20} {2,-30}&quot;, &quot;Year/Month Pattern&quot;, \n                        dtfi.YearMonthPattern, \n                        date.ToString(dtfi.YearMonthPattern));\n   }\n}\n// The example displays the following output:\n//    Date and Time Formats for 2016-05-28 10:28:00Z in the en-US Culture:\n//    \n//    Long Date Pattern      dddd, MMMM d, yyyy   Saturday, May 28, 2016\n//    Long Time Pattern      h:mm:ss tt           10:28:00 AM\n//    Month/Day Pattern      MMMM d               May 28\n//    Short Date Pattern     M/d/yyyy             5/28/2016\n//    Short Time Pattern     h:mm tt              10:28 AM\n//    Year/Month Pattern     MMMM yyyy            May 2016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_DateSeparator\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_DateSeparator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DateSeparator</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the string that separates the components of a date, that is, the year, month, and day.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DateSeparator { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string that separates the components of a date, that is, the year, month, and day. The default for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> is &quot;/&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a custom format string includes the &quot;/&quot; format specifier, the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> method displays the value of DateSeparator in place of the &quot;/&quot; in the result string.  </p>\n<p> The DateSeparator property defines the string that replaces the date separator (&quot;/&quot; custom date and time format specifier) in a result string in a formatting operation. It also defines the date separator string in a parsing operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object for the en-US culture, changes its date separator to &quot;-&quot;, and displays a date by using the &quot;d&quot;, &quot;G&quot;, and &quot;g&quot; standard format strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.DateSeparator#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime value = new DateTime(2013, 9, 8);\n      \n      string[] formats = { &quot;d&quot;, &quot;G&quot;, &quot;g&quot; };\n      CultureInfo culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = culture.DateTimeFormat;\n      dtfi.DateSeparator = &quot;-&quot;;\n      \n      foreach (var fmt in formats)\n         Console.WriteLine(&quot;{0}: {1}&quot;, fmt, value.ToString(fmt, dtfi));\n   }\n}\n// The example displays the following output:\n//       d: 9-8-2013\n//       G: 9-8-2013 12:00:00 AM\n//       g: 9-8-2013 12:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.DateSeparator#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim value As New Date(2013, 9, 8)\n      \n      Dim formats() As String = { &quot;d&quot;, &quot;G&quot;, &quot;g&quot; }\n      Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = culture.DateTimeFormat\n      dtfi.DateSeparator = &quot;-&quot;\n      \n      For Each fmt In formats\n         Console.WriteLine(&quot;{0}: {1}&quot;, fmt, value.ToString(fmt, dtfi))\n      Next      \n   End Sub\nEnd Module\n\n&#39; The example displays the following output:\n&#39;       d: 9-8-2013\n&#39;       G: 9-8-2013 12:00:00 AM\n&#39;       g: 9-8-2013 12:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_DayNames\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_DayNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DayNames</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a one-dimensional string array that contains the culture-specific full names of the days of the week.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] DayNames { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A one-dimensional string array that contains the culture-specific full names of the days of the week. The array for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> contains &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, and &quot;Saturday&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to an array that is multidimensional or that has a length that is not exactly 7.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If setting this property, the array must be one-dimensional and must have exactly seven elements. The first element (the element at index zero) represents the first day of the week in the calendar defined by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property.  </p>\n<p> If a custom format string includes the &quot;dddd&quot; format specifier, the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> method includes the value of the appropriate DayNames member in place of &quot;dddd&quot; in the result string.  </p>\n<p> This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_FirstDayOfWeek\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstDayOfWeek</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the first day of the week.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DayOfWeek FirstDayOfWeek { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </div>\r\n                  <p>An enumeration value that represents the first day of the week. The default for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> is <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to a value that is not a valid <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_FullDateTimePattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_FullDateTimePattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullDateTimePattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the custom format string for a long date and long time value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string FullDateTimePattern { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a long date and long time value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The &quot;F&quot; standard format string is an alias for the FullDateTimePattern property. In other words, the custom format string assigned to this property defines the format of the result string for the &quot;F&quot; standard format string. For more information, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a>.  </p>\n<p> The value of the FullDateTimePattern property is generated dynamically by concatenating the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> and <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongTimePattern_\" data-linktype=\"relative-path\">LongTimePattern</a> properties separated by a space. This dynamic assignment occurs under the following conditions:  </p>\n<ul>\n<li><p>If the property value is retrieved before it has been explicitly set.  </p>\n</li>\n<li><p>When the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongDatePattern_\" data-linktype=\"relative-path\">LongDatePattern</a> property changes.  </p>\n</li>\n<li><p>When the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_LongTimePattern_\" data-linktype=\"relative-path\">LongTimePattern</a> property changes.  </p>\n<p>This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of FullDateTimePattern for a few cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.FullDateTimePattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.  The question marks take the place of native script characters.\n\n CULTURE    PROPERTY VALUE\n  en-US     dddd, MMMM dd, yyyy h:mm:ss tt\n  ja-JP     yyyy&#39;?&#39;M&#39;?&#39;d&#39;?&#39; H:mm:ss\n  fr-FR     dddd d MMMM yyyy HH:mm:ss\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.FullDateTimePattern)\n\n   End Sub &#39;PrintPattern\n\nEnd Class &#39;SamplesDTFI \n\n&#39;This code produces the following output.  The question marks take the place of native script characters.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     dddd, MMMM dd, yyyy h:mm:ss tt\n&#39;  ja-JP     yyyy&#39;?&#39;M&#39;?&#39;d&#39;?&#39; H:mm:ss\n&#39;  fr-FR     dddd d MMMM yyyy HH:mm:ss\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;FullDateTimePattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.  The question marks take the place of native script characters.\n\nCULTURE    PROPERTY VALUE\nen-US     dddd, MMMM dd, yyyy h:mm:ss tt\nja-JP     yyyy&#39;?&#39;M&#39;?&#39;d&#39;?&#39; H:mm:ss\nfr-FR     dddd d MMMM yyyy HH:mm:ss\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_InvariantInfo\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_InvariantInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvariantInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default read-only <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is culture-independent (invariant).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a></div>\r\n                  </div>\r\n                  <p>A read-only object that is culture-independent (invariant).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property does not change, regardless of the current culture. Because of this, the invariant culture&#39;s <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object can be used to produce consistent, culture-independent results in parsing and formatting operations on data that is multi-cultural. For example, if date and time data from multiple cultures is to be persisted in string form, it can be formatted by using the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object of the invariant culture and saved. It can then be parsed by using the invariant culture&#39;s <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_IsReadOnly\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_LongDatePattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_LongDatePattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LongDatePattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the custom format string for a long date value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string LongDatePattern { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a long date value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LongDatePattern property defines the culture-specific format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;D&quot; standard format string. The following example illustrates the relationships among the following: the &quot;D&quot; standard format string, the custom format string returned by the LongDatePattern property, and  the culture-specific representation of a date.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.LongDatePattern#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = #11/12/2011#\n      Dim cultureNames() As String = { &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ru-RU&quot;, &quot;de-DE&quot; }\n      Console.WriteLine(&quot;{0,-7} {1,-20} {2:D}&quot;, &quot;Culture&quot;, &quot;Long Date Pattern&quot;, &quot;Date&quot;)\n      Console.WriteLine()\n      For Each cultureName In cultureNames\n         Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(cultureName)\n         Console.WriteLine(&quot;{0,-7} {1,-20} {2}&quot;, culture.Name, culture.DateTimeFormat.LongDatePattern, \n                           date1.ToString(&quot;D&quot;, culture))                 \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Culture Long Date Pattern    Date\n&#39;    en-US   dddd, MMMM dd, yyyy  Saturday, November 12, 2011\n&#39;    fr-FR   dddd d MMMM yyyy     samedi 12 novembre 2011\n&#39;    ru-RU   d MMMM yyyy &#39;Ð³.&#39;     12 Ð½Ð¾ÑÐ±Ñ€Ñ 2011 Ð³.\n&#39;    de-DE   dddd, d. MMMM yyyy   Samstag, 12. November 2011\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.LongDatePattern#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date1 = new DateTime(2001, 11, 12);\n      string[] cultureNames = { &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;ru-RU&quot;, &quot;de-DE&quot; };\n      Console.WriteLine(&quot;{0,-7} {1,-20} {2:D}\\n&quot;, &quot;Culture&quot;, &quot;Long Date Pattern&quot;, &quot;Date&quot;);\n      foreach (var cultureName in cultureNames) {\n         CultureInfo culture = CultureInfo.CreateSpecificCulture(cultureName);\n         Console.WriteLine(&quot;{0,-7} {1,-20} {2}&quot;, \n                           culture.Name, \n                           culture.DateTimeFormat.LongDatePattern, \n                           date1.ToString(&quot;D&quot;, culture));                 \n      }\n   }\n}\n// The example displays the following output:\n//    Culture Long Date Pattern    Date\n//    en-US   dddd, MMMM dd, yyyy  Saturday, November 12, 2011\n//    fr-FR   dddd d MMMM yyyy     samedi 12 novembre 2011\n//    ru-RU   d MMMM yyyy &#39;Ð³.&#39;     12 Ð½Ð¾ÑÐ±Ñ€Ñ 2011 Ð³.\n//    de-DE   dddd, d. MMMM yyyy   Samstag, 12. November 2011\n</code></pre><p> See <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a> for individual custom format specifiers that can be combined to construct custom format strings such as &quot;dddd, dd MMMM yyyy&quot;.  </p>\n<p> You should set the date separator in the long date pattern to an exact string instead of using the date separator placeholder. For example, to obtain the pattern MM-DD-yyyy, set the long date pattern to &quot;MM-DD-yyyy&quot;.  </p>\n<p> The value of this property may change if the calendar used by a culture changes. For instance, the following example shows how theLongDatePattern property of a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the Arabic (Syria) culture changes when the <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> object used by the culture changes.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.LongDatePattern#3\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = #8/7/2011#\n      Dim ci As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;ar-SY&quot;)\n      Dim sw As New StreamWriter(&quot;.\\arSYCalendars.txt&quot;) \n\n      sw.WriteLine(&quot;{0,-32} {1,-21} {2}&quot;, \n                   &quot;Calendar&quot;, &quot;Long Date Pattern&quot;, &quot;Example Date&quot;)\n      sw.WriteLine()\n      For Each cal As Calendar In ci.OptionalCalendars\n         ci.DateTimeFormat.Calendar = cal\n         sw.WriteLine(&quot;{0,-32} {1,-21} {2}&quot;, GetCalendarName(cal), \n                                             ci.DateTimeFormat.LongDatePattern,\n                                             date1.ToString(&quot;D&quot;, ci))\n      Next     \n      sw.Close()\n   End Sub\n   \n   Private Function GetCalendarName(cal As Calendar) As String\n      Dim calName As String\n      calName = cal.GetType().Name.Substring(0, cal.GetType().Name.IndexOf(&quot;Cal&quot;))\n      If calName.Equals(&quot;Gregorian&quot;) Then\n         Dim grCal As GregorianCalendar = DirectCast(cal, GregorianCalendar)\n         calName += String.Format(&quot;-{0}&quot;, grCal.CalendarType)    \n      End If\n      Return calName\n   End Function\nEnd Module\n&#39; The example generates the following output:\n&#39;    Calendar                         Long Date Pattern     Example Date\n&#39;    \n&#39;    Gregorian-Localized              dd MMMM, yyyy         07 Ø¢Ø¨, 2011\n&#39;    UmAlQura                         dd/MMMM/yyyy          07/Ø±Ù…Ø¶Ø§Ù†/1432\n&#39;    Hijri                            dd/MM/yyyy            08/09/1432\n&#39;    Gregorian-USEnglish              dddd, MMMM dd, yyyy   Sunday, August 07, 2011\n&#39;    Gregorian-MiddleEastFrench       dddd, MMMM dd, yyyy   dimanche, ao&#251;t 07, 2011\n&#39;    Gregorian-TransliteratedEnglish  dddd, MMMM dd, yyyy   Ø§Ù„Ø£Ø­Ø¯, Ø£ØºØ³Ø·Ø³ 07, 2011\n&#39;    Gregorian-TransliteratedFrench   dddd, MMMM dd, yyyy   Ø§Ù„Ø£Ø­Ø¯, Ø£ÙˆØª 07, 2011\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.LongDatePattern#3\">using System;\nusing System.Globalization;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date1 = new DateTime(2011, 8, 7);\n      CultureInfo ci = CultureInfo.CreateSpecificCulture(&quot;ar-SY&quot;);\n      StreamWriter sw = new StreamWriter(@&quot;.\\arSYCalendars.txt&quot;); \n\n      sw.WriteLine(&quot;{0,-32} {1,-21} {2}\\n&quot;, \n                   &quot;Calendar&quot;, &quot;Long Date Pattern&quot;, &quot;Example Date&quot;);\n      foreach (var cal in ci.OptionalCalendars) {\n         ci.DateTimeFormat.Calendar = cal;\n         sw.WriteLine(&quot;{0,-32} {1,-21} {2}&quot;, GetCalendarName(cal), \n                                             ci.DateTimeFormat.LongDatePattern,\n                                             date1.ToString(&quot;D&quot;, ci));\n      }     \n      sw.Close();\n   }\n\n   private static string GetCalendarName(Calendar cal)\n   {\n      string calName;\n      calName = cal.GetType().Name.Substring(0, cal.GetType().Name.IndexOf(&quot;Cal&quot;));\n      if (calName.Equals(&quot;Gregorian&quot;)) {\n         GregorianCalendar grCal = cal as GregorianCalendar;\n         calName += String.Format(&quot;-{0}&quot;, grCal.CalendarType);    \n      }\n      return calName;\n   }\n}\n// The example generates the following output:\n//    Calendar                         Long Date Pattern     Example Date\n//    \n//    Gregorian-Localized              dd MMMM, yyyy         07 Ø¢Ø¨, 2011\n//    UmAlQura                         dd/MMMM/yyyy          07/Ø±Ù…Ø¶Ø§Ù†/1432\n//    Hijri                            dd/MM/yyyy            08/09/1432\n//    Gregorian-USEnglish              dddd, MMMM dd, yyyy   Sunday, August 07, 2011\n//    Gregorian-MiddleEastFrench       dddd, MMMM dd, yyyy   dimanche, ao&#251;t 07, 2011\n//    Gregorian-TransliteratedEnglish  dddd, MMMM dd, yyyy   Ø§Ù„Ø£Ø­Ø¯, Ø£ØºØ³Ø·Ø³ 07, 2011\n//    Gregorian-TransliteratedFrench   dddd, MMMM dd, yyyy   Ø§Ù„Ø£Ø­Ø¯, Ø£ÙˆØª 07, 2011\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of the LongDatePattern property for a few cultures.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.LongDatePattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.LongDatePattern)\n\n   End Sub &#39;PrintPattern \n\nEnd Class &#39;SamplesDTFI\n\n&#39;This code produces the following output.  The question marks take the place of native script characters.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     dddd, MMMM dd, yyyy\n&#39;  ja-JP     yyyy&#39;?&#39;M&#39;?&#39;d&#39;?&#39;\n&#39;  fr-FR     dddd d MMMM yyyy\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.LongDatePattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.LongDatePattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.  The question marks take the place of native script characters.\n\n CULTURE    PROPERTY VALUE\n  en-US     dddd, MMMM dd, yyyy\n  ja-JP     yyyy&#39;?&#39;M&#39;?&#39;d&#39;?&#39;\n  fr-FR     dddd d MMMM yyyy\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.LongDatePattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;LongDatePattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.  The question marks take the place of native script characters.\n\nCULTURE    PROPERTY VALUE\nen-US     dddd, MMMM dd, yyyy\nja-JP     yyyy&#39;?&#39;M&#39;?&#39;d&#39;?&#39;\nfr-FR     dddd d MMMM yyyy\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_LongTimePattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_LongTimePattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LongTimePattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the custom format string for a long time value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string LongTimePattern { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The format pattern for a long time value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LongTimePattern property defines the culture-specific format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;T&quot; standard format string.  </p>\n<p> We recommend that you set the time separator in the long time pattern to an exact string instead of using the time separator placeholder. For example, to obtain the pattern h-mm-ss, set the long date pattern to &quot;h-mm-ss&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of LongTimePattern for a few cultures.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.LongTimePattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.LongTimePattern)\n\n   End Sub &#39;PrintPattern \n\nEnd Class &#39;SamplesDTFI\n\n&#39;This code produces the following output.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     h:mm:ss tt\n&#39;  ja-JP     H:mm:ss\n&#39;  fr-FR     HH:mm:ss\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.LongTimePattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;LongTimePattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.\n\nCULTURE    PROPERTY VALUE\nen-US     h:mm:ss tt\nja-JP     H:mm:ss\nfr-FR     HH:mm:ss\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.LongTimePattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.LongTimePattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n CULTURE    PROPERTY VALUE\n  en-US     h:mm:ss tt\n  ja-JP     H:mm:ss\n  fr-FR     HH:mm:ss\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_MonthDayPattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_MonthDayPattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonthDayPattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the custom format string for a month and day value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MonthDayPattern { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a month and day value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MonthDayPattern property defines the culture-specific format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;m&quot; and &quot;M&quot; standard format strings.  </p>\n<p> This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes.  </p>\n<p> We recommend that you set the date separator in the month and day pattern to an exact string instead of using the date separator placeholder. For example, to obtain the pattern MM-DD, set the month and day pattern to &quot;MM-DD&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of MonthDayPattern for a few cultures.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.MonthDayPattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;MonthDayPattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.  The question marks take the place of native script characters.\n\nCULTURE    PROPERTY VALUE\nen-US     MMMM dd\nja-JP     M&#39;?&#39;d&#39;?&#39;\nfr-FR     d MMMM\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.MonthDayPattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.MonthDayPattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.  The question marks take the place of native script characters.\n\n CULTURE    PROPERTY VALUE\n  en-US     MMMM dd\n  ja-JP     M&#39;?&#39;d&#39;?&#39;\n  fr-FR     d MMMM\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.MonthDayPattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.MonthDayPattern)\n\n   End Sub &#39;PrintPattern \n\nEnd Class &#39;SamplesDTFI\n\n&#39;This code produces the following output.  The question marks take the place of native script characters.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     MMMM dd\n&#39;  ja-JP     M&#39;?&#39;d&#39;?&#39;\n&#39;  fr-FR     d MMMM\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_MonthGenitiveNames\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonthGenitiveNames</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a string array of month names associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] MonthGenitiveNames { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array of month names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the array is multidimensional or has a length that is not exactly 13.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the array or one of its elements is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In some languages, a month name that is part of a date appears in the genitive case. For example, a date in the Russian (Russia) or &quot;ru-RU&quot;, culture consists of the day number and the genitive month name, such as 1 Ð¯Ð½Ð²Ð°Ñ€Ñ.  </p>\n<p> When this property is set, the array must be one-dimensional and must have exactly 13 elements. <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> objects accommodate calendars with 13 months. The first element (the element at index zero) represents the first month of the year defined by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property.If you set the MonthGenitiveNames property, you must also set the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_MonthNames_\" data-linktype=\"relative-path\">MonthNames</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates several methods and properties that specify date and time format patterns, native calendar name, and full and abbreviated month and day names.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.DTFI1#1\">// This code example demonstrates the DateTimeFormatInfo \n// MonthGenitiveNames, AbbreviatedMonthGenitiveNames, \n// ShortestDayNames, and NativeCalendarName properties, and\n// the GetShortestDayName() and SetAllDateTimePatterns() methods.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string[] myDateTimePatterns = new string[] {&quot;MM/dd/yy&quot;, &quot;MM/dd/yyyy&quot;};\n\n// Get the en-US culture.\n    CultureInfo ci = new CultureInfo(&quot;en-US&quot;);\n// Get the DateTimeFormatInfo for the en-US culture.\n    DateTimeFormatInfo dtfi = ci.DateTimeFormat;\n\n// Display the effective culture.\n    Console.WriteLine(&quot;This code example uses the {0} culture.&quot;, ci.Name);\n\n// Display the native calendar name.    \n    Console.WriteLine(&quot;<br>NativeCalendarName...&quot;);\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, dtfi.NativeCalendarName);\n\n// Display month genitive names.\n    Console.WriteLine(&quot;<br>MonthGenitiveNames...&quot;);\n    foreach (string name in dtfi.MonthGenitiveNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display abbreviated month genitive names.\n    Console.WriteLine(&quot;<br>AbbreviatedMonthGenitiveNames...&quot;);\n    foreach (string name in dtfi.AbbreviatedMonthGenitiveNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display shortest day names.\n    Console.WriteLine(&quot;<br>ShortestDayNames...&quot;);\n    foreach (string name in dtfi.ShortestDayNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display shortest day name for a particular day of the week.\n    Console.WriteLine(&quot;<br>GetShortestDayName(DayOfWeek.Sunday)...&quot;);\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, dtfi.GetShortestDayName(DayOfWeek.Sunday));\n\n// Display the initial DateTime format patterns for the &#39;d&#39; format specifier.\n    Console.WriteLine(&quot;<br>Initial DateTime format patterns for the &#39;d&#39; format specifier...&quot;);\n    foreach (string name in dtfi.GetAllDateTimePatterns(&#39;d&#39;)) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Change the initial DateTime format patterns for the &#39;d&#39; DateTime format specifier.\n    Console.WriteLine(&quot;<br>Change the initial DateTime format patterns for the <br>&quot; +\n                      &quot;&#39;d&#39; format specifier to my format patterns...&quot;);\n    dtfi.SetAllDateTimePatterns(myDateTimePatterns, &#39;d&#39;);\n\n// Display the new DateTime format patterns for the &#39;d&#39; format specifier.\n    Console.WriteLine(&quot;<br>New DateTime format patterns for the &#39;d&#39; format specifier...&quot;);\n    foreach (string name in dtfi.GetAllDateTimePatterns(&#39;d&#39;)) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n    }\n}\n/*\nThis code example produces the following results:\n\nThis code example uses the en-US culture.\n\nNativeCalendarName...\n&quot;Gregorian Calendar&quot;\n\nMonthGenitiveNames...\n&quot;January&quot;\n&quot;February&quot;\n&quot;March&quot;\n&quot;April&quot;\n&quot;May&quot;\n&quot;June&quot;\n&quot;July&quot;\n&quot;August&quot;\n&quot;September&quot;\n&quot;October&quot;\n&quot;November&quot;\n&quot;December&quot;\n&quot;&quot;\n\nAbbreviatedMonthGenitiveNames...\n&quot;Jan&quot;\n&quot;Feb&quot;\n&quot;Mar&quot;\n&quot;Apr&quot;\n&quot;May&quot;\n&quot;Jun&quot;\n&quot;Jul&quot;\n&quot;Aug&quot;\n&quot;Sep&quot;\n&quot;Oct&quot;\n&quot;Nov&quot;\n&quot;Dec&quot;\n&quot;&quot;\n\nShortestDayNames...\n&quot;Su&quot;\n&quot;Mo&quot;\n&quot;Tu&quot;\n&quot;We&quot;\n&quot;Th&quot;\n&quot;Fr&quot;\n&quot;Sa&quot;\n\nGetShortestDayName(DayOfWeek.Sunday)...\n&quot;Su&quot;\n\nInitial DateTime format patterns for the &#39;d&#39; format specifier...\n&quot;M/d/yyyy&quot;\n&quot;M/d/yy&quot;\n&quot;MM/dd/yy&quot;\n&quot;MM/dd/yyyy&quot;\n&quot;yy/MM/dd&quot;\n&quot;yyyy-MM-dd&quot;\n&quot;dd-MMM-yy&quot;\n\nChange the initial DateTime format patterns for the\n&#39;d&#39; format specifier to my format patterns...\n\nNew DateTime format patterns for the &#39;d&#39; format specifier...\n&quot;MM/dd/yy&quot;\n&quot;MM/dd/yyyy&quot;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.DTFI1#1\">\n&#39; This code example demonstrates the DateTimeFormatInfo \n&#39; MonthGenitiveNames, AbbreviatedMonthGenitiveNames, \n&#39; ShortestDayNames, and NativeCalendarName properties, and\n&#39; the GetShortestDayName() and SetAllDateTimePatterns() methods.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim myDateTimePatterns() As String = {&quot;MM/dd/yy&quot;, &quot;MM/dd/yyyy&quot;}\n        Dim name As String = &quot;&quot;\n        \n        &#39; Get the en-US culture.\n        Dim ci As New CultureInfo(&quot;en-US&quot;)\n        &#39; Get the DateTimeFormatInfo for the en-US culture.\n        Dim dtfi As DateTimeFormatInfo = ci.DateTimeFormat\n        \n        &#39; Display the effective culture.\n        Console.WriteLine(&quot;This code example uses the {0} culture.&quot;, ci.Name)\n        \n        &#39; Display the native calendar name.    \n        Console.WriteLine(vbCrLf &amp; &quot;NativeCalendarName...&quot;)\n        Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, dtfi.NativeCalendarName)\n        \n        &#39; Display month genitive names.\n        Console.WriteLine(vbCrLf &amp; &quot;MonthGenitiveNames...&quot;)\n        For Each name In dtfi.MonthGenitiveNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display abbreviated month genitive names.\n        Console.WriteLine(vbCrLf &amp; &quot;AbbreviatedMonthGenitiveNames...&quot;)\n        For Each name In dtfi.AbbreviatedMonthGenitiveNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display shortest day names.\n        Console.WriteLine(vbCrLf &amp; &quot;ShortestDayNames...&quot;)\n        For Each name In dtfi.ShortestDayNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display shortest day name for a particular day of the week.\n        Console.WriteLine(vbCrLf &amp; &quot;GetShortestDayName(DayOfWeek.Sunday)...&quot;)\n        Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, dtfi.GetShortestDayName(DayOfWeek.Sunday))\n        \n        &#39; Display the initial DateTime format patterns for the &#39;d&#39; format specifier.\n        Console.WriteLine(vbCrLf &amp; &quot;Initial DateTime format patterns for &quot; &amp; _\n                          &quot;the &#39;d&#39; format specifier...&quot;)\n        For Each name In dtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Change the initial DateTime format patterns for the &#39;d&#39; DateTime format specifier.\n        Console.WriteLine(vbCrLf &amp; &quot;Change the initial DateTime format patterns for the &quot; &amp; _\n                          vbCrLf &amp; &quot;&#39;d&#39; format specifier to my format patterns...&quot;)\n        dtfi.SetAllDateTimePatterns(myDateTimePatterns, &quot;d&quot;c)\n        \n        &#39; Display the new DateTime format patterns for the &#39;d&#39; format specifier.\n        Console.WriteLine(vbCrLf &amp; _\n                          &quot;New DateTime format patterns for the &#39;d&#39; format specifier...&quot;)\n        For Each name In dtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;This code example uses the en-US culture.\n&#39;\n&#39;NativeCalendarName...\n&#39;&quot;Gregorian Calendar&quot;\n&#39;\n&#39;MonthGenitiveNames...\n&#39;&quot;January&quot;\n&#39;&quot;February&quot;\n&#39;&quot;March&quot;\n&#39;&quot;April&quot;\n&#39;&quot;May&quot;\n&#39;&quot;June&quot;\n&#39;&quot;July&quot;\n&#39;&quot;August&quot;\n&#39;&quot;September&quot;\n&#39;&quot;October&quot;\n&#39;&quot;November&quot;\n&#39;&quot;December&quot;\n&#39;&quot;&quot;\n&#39;\n&#39;AbbreviatedMonthGenitiveNames...\n&#39;&quot;Jan&quot;\n&#39;&quot;Feb&quot;\n&#39;&quot;Mar&quot;\n&#39;&quot;Apr&quot;\n&#39;&quot;May&quot;\n&#39;&quot;Jun&quot;\n&#39;&quot;Jul&quot;\n&#39;&quot;Aug&quot;\n&#39;&quot;Sep&quot;\n&#39;&quot;Oct&quot;\n&#39;&quot;Nov&quot;\n&#39;&quot;Dec&quot;\n&#39;&quot;&quot;\n&#39;\n&#39;ShortestDayNames...\n&#39;&quot;Su&quot;\n&#39;&quot;Mo&quot;\n&#39;&quot;Tu&quot;\n&#39;&quot;We&quot;\n&#39;&quot;Th&quot;\n&#39;&quot;Fr&quot;\n&#39;&quot;Sa&quot;\n&#39;\n&#39;GetShortestDayName(DayOfWeek.Sunday)...\n&#39;&quot;Su&quot;\n&#39;\n&#39;Initial DateTime format patterns for the &#39;d&#39; format specifier...\n&#39;&quot;M/d/yyyy&quot;\n&#39;&quot;M/d/yy&quot;\n&#39;&quot;MM/dd/yy&quot;\n&#39;&quot;MM/dd/yyyy&quot;\n&#39;&quot;yy/MM/dd&quot;\n&#39;&quot;yyyy-MM-dd&quot;\n&#39;&quot;dd-MMM-yy&quot;\n&#39;\n&#39;Change the initial DateTime format patterns for the\n&#39;&#39;d&#39; format specifier to my format patterns...\n&#39;\n&#39;New DateTime format patterns for the &#39;d&#39; format specifier...\n&#39;&quot;MM/dd/yy&quot;\n&#39;&quot;MM/dd/yyyy&quot;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_MonthNames\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_MonthNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonthNames</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a one-dimensional array of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the culture-specific full names of the months.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] MonthNames { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A one-dimensional array of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the culture-specific full names of the months. In a 12-month calendar, the 13th element of the array is an empty string. The array for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> contains &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;, and &quot;&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to an array that is multidimensional or that has a length that is not exactly 13.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this property is set, the array must be one-dimensional and must have exactly 13 elements. <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> objects accommodate calendars with 13 months. The first element (the element at index zero) represents the first month of the year defined by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property.  </p>\n<p> If you set the MonthNames property, you must also set the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_\" data-linktype=\"relative-path\">MonthGenitiveNames</a> property.  </p>\n<p> If the custom pattern includes the format pattern &quot;MMMM&quot;, <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> displays the value of MonthNames in place of the &quot;MMMM&quot; in the format pattern.  </p>\n<p> This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_NativeCalendarName\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_NativeCalendarName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NativeCalendarName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the native name of the calendar associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string NativeCalendarName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The native name of the calendar used in the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object if that name is available, or the empty string (&quot;&quot;) if the native calendar name is not available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates several methods and properties that specify date and time format patterns, native calendar name, and full and abbreviated month and day names.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.DTFI1#1\">// This code example demonstrates the DateTimeFormatInfo \n// MonthGenitiveNames, AbbreviatedMonthGenitiveNames, \n// ShortestDayNames, and NativeCalendarName properties, and\n// the GetShortestDayName() and SetAllDateTimePatterns() methods.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string[] myDateTimePatterns = new string[] {&quot;MM/dd/yy&quot;, &quot;MM/dd/yyyy&quot;};\n\n// Get the en-US culture.\n    CultureInfo ci = new CultureInfo(&quot;en-US&quot;);\n// Get the DateTimeFormatInfo for the en-US culture.\n    DateTimeFormatInfo dtfi = ci.DateTimeFormat;\n\n// Display the effective culture.\n    Console.WriteLine(&quot;This code example uses the {0} culture.&quot;, ci.Name);\n\n// Display the native calendar name.    \n    Console.WriteLine(&quot;<br>NativeCalendarName...&quot;);\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, dtfi.NativeCalendarName);\n\n// Display month genitive names.\n    Console.WriteLine(&quot;<br>MonthGenitiveNames...&quot;);\n    foreach (string name in dtfi.MonthGenitiveNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display abbreviated month genitive names.\n    Console.WriteLine(&quot;<br>AbbreviatedMonthGenitiveNames...&quot;);\n    foreach (string name in dtfi.AbbreviatedMonthGenitiveNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display shortest day names.\n    Console.WriteLine(&quot;<br>ShortestDayNames...&quot;);\n    foreach (string name in dtfi.ShortestDayNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display shortest day name for a particular day of the week.\n    Console.WriteLine(&quot;<br>GetShortestDayName(DayOfWeek.Sunday)...&quot;);\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, dtfi.GetShortestDayName(DayOfWeek.Sunday));\n\n// Display the initial DateTime format patterns for the &#39;d&#39; format specifier.\n    Console.WriteLine(&quot;<br>Initial DateTime format patterns for the &#39;d&#39; format specifier...&quot;);\n    foreach (string name in dtfi.GetAllDateTimePatterns(&#39;d&#39;)) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Change the initial DateTime format patterns for the &#39;d&#39; DateTime format specifier.\n    Console.WriteLine(&quot;<br>Change the initial DateTime format patterns for the <br>&quot; +\n                      &quot;&#39;d&#39; format specifier to my format patterns...&quot;);\n    dtfi.SetAllDateTimePatterns(myDateTimePatterns, &#39;d&#39;);\n\n// Display the new DateTime format patterns for the &#39;d&#39; format specifier.\n    Console.WriteLine(&quot;<br>New DateTime format patterns for the &#39;d&#39; format specifier...&quot;);\n    foreach (string name in dtfi.GetAllDateTimePatterns(&#39;d&#39;)) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n    }\n}\n/*\nThis code example produces the following results:\n\nThis code example uses the en-US culture.\n\nNativeCalendarName...\n&quot;Gregorian Calendar&quot;\n\nMonthGenitiveNames...\n&quot;January&quot;\n&quot;February&quot;\n&quot;March&quot;\n&quot;April&quot;\n&quot;May&quot;\n&quot;June&quot;\n&quot;July&quot;\n&quot;August&quot;\n&quot;September&quot;\n&quot;October&quot;\n&quot;November&quot;\n&quot;December&quot;\n&quot;&quot;\n\nAbbreviatedMonthGenitiveNames...\n&quot;Jan&quot;\n&quot;Feb&quot;\n&quot;Mar&quot;\n&quot;Apr&quot;\n&quot;May&quot;\n&quot;Jun&quot;\n&quot;Jul&quot;\n&quot;Aug&quot;\n&quot;Sep&quot;\n&quot;Oct&quot;\n&quot;Nov&quot;\n&quot;Dec&quot;\n&quot;&quot;\n\nShortestDayNames...\n&quot;Su&quot;\n&quot;Mo&quot;\n&quot;Tu&quot;\n&quot;We&quot;\n&quot;Th&quot;\n&quot;Fr&quot;\n&quot;Sa&quot;\n\nGetShortestDayName(DayOfWeek.Sunday)...\n&quot;Su&quot;\n\nInitial DateTime format patterns for the &#39;d&#39; format specifier...\n&quot;M/d/yyyy&quot;\n&quot;M/d/yy&quot;\n&quot;MM/dd/yy&quot;\n&quot;MM/dd/yyyy&quot;\n&quot;yy/MM/dd&quot;\n&quot;yyyy-MM-dd&quot;\n&quot;dd-MMM-yy&quot;\n\nChange the initial DateTime format patterns for the\n&#39;d&#39; format specifier to my format patterns...\n\nNew DateTime format patterns for the &#39;d&#39; format specifier...\n&quot;MM/dd/yy&quot;\n&quot;MM/dd/yyyy&quot;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.DTFI1#1\">\n&#39; This code example demonstrates the DateTimeFormatInfo \n&#39; MonthGenitiveNames, AbbreviatedMonthGenitiveNames, \n&#39; ShortestDayNames, and NativeCalendarName properties, and\n&#39; the GetShortestDayName() and SetAllDateTimePatterns() methods.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim myDateTimePatterns() As String = {&quot;MM/dd/yy&quot;, &quot;MM/dd/yyyy&quot;}\n        Dim name As String = &quot;&quot;\n        \n        &#39; Get the en-US culture.\n        Dim ci As New CultureInfo(&quot;en-US&quot;)\n        &#39; Get the DateTimeFormatInfo for the en-US culture.\n        Dim dtfi As DateTimeFormatInfo = ci.DateTimeFormat\n        \n        &#39; Display the effective culture.\n        Console.WriteLine(&quot;This code example uses the {0} culture.&quot;, ci.Name)\n        \n        &#39; Display the native calendar name.    \n        Console.WriteLine(vbCrLf &amp; &quot;NativeCalendarName...&quot;)\n        Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, dtfi.NativeCalendarName)\n        \n        &#39; Display month genitive names.\n        Console.WriteLine(vbCrLf &amp; &quot;MonthGenitiveNames...&quot;)\n        For Each name In dtfi.MonthGenitiveNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display abbreviated month genitive names.\n        Console.WriteLine(vbCrLf &amp; &quot;AbbreviatedMonthGenitiveNames...&quot;)\n        For Each name In dtfi.AbbreviatedMonthGenitiveNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display shortest day names.\n        Console.WriteLine(vbCrLf &amp; &quot;ShortestDayNames...&quot;)\n        For Each name In dtfi.ShortestDayNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display shortest day name for a particular day of the week.\n        Console.WriteLine(vbCrLf &amp; &quot;GetShortestDayName(DayOfWeek.Sunday)...&quot;)\n        Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, dtfi.GetShortestDayName(DayOfWeek.Sunday))\n        \n        &#39; Display the initial DateTime format patterns for the &#39;d&#39; format specifier.\n        Console.WriteLine(vbCrLf &amp; &quot;Initial DateTime format patterns for &quot; &amp; _\n                          &quot;the &#39;d&#39; format specifier...&quot;)\n        For Each name In dtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Change the initial DateTime format patterns for the &#39;d&#39; DateTime format specifier.\n        Console.WriteLine(vbCrLf &amp; &quot;Change the initial DateTime format patterns for the &quot; &amp; _\n                          vbCrLf &amp; &quot;&#39;d&#39; format specifier to my format patterns...&quot;)\n        dtfi.SetAllDateTimePatterns(myDateTimePatterns, &quot;d&quot;c)\n        \n        &#39; Display the new DateTime format patterns for the &#39;d&#39; format specifier.\n        Console.WriteLine(vbCrLf &amp; _\n                          &quot;New DateTime format patterns for the &#39;d&#39; format specifier...&quot;)\n        For Each name In dtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;This code example uses the en-US culture.\n&#39;\n&#39;NativeCalendarName...\n&#39;&quot;Gregorian Calendar&quot;\n&#39;\n&#39;MonthGenitiveNames...\n&#39;&quot;January&quot;\n&#39;&quot;February&quot;\n&#39;&quot;March&quot;\n&#39;&quot;April&quot;\n&#39;&quot;May&quot;\n&#39;&quot;June&quot;\n&#39;&quot;July&quot;\n&#39;&quot;August&quot;\n&#39;&quot;September&quot;\n&#39;&quot;October&quot;\n&#39;&quot;November&quot;\n&#39;&quot;December&quot;\n&#39;&quot;&quot;\n&#39;\n&#39;AbbreviatedMonthGenitiveNames...\n&#39;&quot;Jan&quot;\n&#39;&quot;Feb&quot;\n&#39;&quot;Mar&quot;\n&#39;&quot;Apr&quot;\n&#39;&quot;May&quot;\n&#39;&quot;Jun&quot;\n&#39;&quot;Jul&quot;\n&#39;&quot;Aug&quot;\n&#39;&quot;Sep&quot;\n&#39;&quot;Oct&quot;\n&#39;&quot;Nov&quot;\n&#39;&quot;Dec&quot;\n&#39;&quot;&quot;\n&#39;\n&#39;ShortestDayNames...\n&#39;&quot;Su&quot;\n&#39;&quot;Mo&quot;\n&#39;&quot;Tu&quot;\n&#39;&quot;We&quot;\n&#39;&quot;Th&quot;\n&#39;&quot;Fr&quot;\n&#39;&quot;Sa&quot;\n&#39;\n&#39;GetShortestDayName(DayOfWeek.Sunday)...\n&#39;&quot;Su&quot;\n&#39;\n&#39;Initial DateTime format patterns for the &#39;d&#39; format specifier...\n&#39;&quot;M/d/yyyy&quot;\n&#39;&quot;M/d/yy&quot;\n&#39;&quot;MM/dd/yy&quot;\n&#39;&quot;MM/dd/yyyy&quot;\n&#39;&quot;yy/MM/dd&quot;\n&#39;&quot;yyyy-MM-dd&quot;\n&#39;&quot;dd-MMM-yy&quot;\n&#39;\n&#39;Change the initial DateTime format patterns for the\n&#39;&#39;d&#39; format specifier to my format patterns...\n&#39;\n&#39;New DateTime format patterns for the &#39;d&#39; format specifier...\n&#39;&quot;MM/dd/yy&quot;\n&#39;&quot;MM/dd/yyyy&quot;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_PMDesignator\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_PMDesignator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PMDesignator</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the string designator for hours that are &quot;post meridiem&quot; (after noon).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PMDesignator { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string designator for hours that are &quot;post meridiem&quot; (after noon). The default for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> is &quot;PM&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ThePMDesignator property is used for all times from 12:00:00 (noon) to 23:59:59.999.  </p>\n<p> If the custom pattern includes the format pattern &quot;tt&quot; and the time is after noon, <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> displays the value of PMDesignator in place of the &quot;tt&quot; in the format pattern. If the custom pattern includes the format pattern &quot;t&quot;, only the first character of PMDesignator is displayed. Your application should use &quot;tt&quot; for languages for which it is necessary to maintain the distinction between AM and PM. An example is Japanese, for which the AM and PM designators differ in the second character instead of the first character.  </p>\n<p> For cultures that do not use a PM designator, this property returns an empty string.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_RFC1123Pattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_RFC1123Pattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RFC1123Pattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string RFC1123Pattern { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a time value that is based on the IETF RFC 1123 specification.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RFC1123Pattern property defines the culture-specific format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;r&quot; and &quot;R&quot; standard format strings.  </p>\n<p> The RFC1123 pattern reflects a defined standard, and the property is read-only. Therefore, it is always the same, regardless of the culture. The custom format string is &quot;ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of RFC1123Pattern for a few cultures.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;RFC1123Pattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.\n\nCULTURE    PROPERTY VALUE\nen-US     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\nja-JP     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\nfr-FR     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.RFC1123Pattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n CULTURE    PROPERTY VALUE\n  en-US     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n  ja-JP     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n  fr-FR     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.RFC1123Pattern)\n\n   End Sub &#39;PrintPattern \n\nEnd Class &#39;SamplesDTFI\n\n&#39;This code produces the following output.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n&#39;  ja-JP     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n&#39;  fr-FR     ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_ShortDatePattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_ShortDatePattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShortDatePattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the custom format string for a short date value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ShortDatePattern { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a short date value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ShortDatePattern property defines the culture-specific format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;d&quot; standard format string.  </p>\n<p> This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of the ShortDatePattern property and the value of a date formatted using the ShortDatePattern property for a few cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.ShortDatePattern#1\">using System;\nusing System.Globalization;\n                                                                                               \npublic class SamplesDTFI  \n{\n   public static void Main()  \n   {\n      string[]  cultures = { &quot;en-US&quot;, &quot;ja-JP&quot;, &quot;fr-FR&quot; };\n      DateTime date1 = new DateTime(2011, 5, 1);\n\n      Console.WriteLine(&quot; {0,7} {1,19} {2,10}<br>&quot;, &quot;CULTURE&quot;, &quot;PROPERTY VALUE&quot;, &quot;DATE&quot;);\n\n      foreach (var culture in cultures) {\n         DateTimeFormatInfo dtfi = CultureInfo.CreateSpecificCulture(culture).DateTimeFormat;\n         Console.WriteLine(&quot; {0,7} {1,19} {2,10}&quot;, culture, \n                           dtfi.ShortDatePattern, \n                           date1.ToString(&quot;d&quot;, dtfi));\n      }\n   }\n}\n// The example displays the following output:\n//        CULTURE      PROPERTY VALUE       DATE\n//       \n//          en-US            M/d/yyyy   5/1/2011\n//          ja-JP          yyyy/MM/dd 2011/05/01\n//          fr-FR          dd/MM/yyyy 01/05/2011\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.ShortDatePattern#1\">Imports System.Globalization\n\nPublic Class SamplesDTFI\n   Public Shared Sub Main()\n      Dim cultures() As String = { &quot;en-US&quot;, &quot;ja-JP&quot;, &quot;fr-FR&quot; }\n      Dim date1 As Date = #05/01/2011#\n      \n      Console.WriteLine(&quot; {0,7} {1,19} {2,10}&quot;, &quot;CULTURE&quot;, &quot;PROPERTY VALUE&quot;, &quot;DATE&quot;)\n      Console.WriteLine()\n      \n      For Each culture As String In cultures\n         Dim dtfi As DateTimeFormatInfo = CultureInfo.CreateSpecificCulture(culture).DateTimeFormat\n         Console.WriteLine(&quot; {0,7} {1,19} {2,10}&quot;, culture, \n                           dtfi.ShortDatePattern, \n                           date1.ToString(&quot;d&quot;, dtfi))\n      Next                     \n   End Sub \nEnd Class\n&#39; The example displays the following output:\n&#39;        CULTURE      PROPERTY VALUE       DATE\n&#39;       \n&#39;          en-US            M/d/yyyy   5/1/2011\n&#39;          ja-JP          yyyy/MM/dd 2011/05/01\n&#39;          fr-FR          dd/MM/yyyy 01/05/2011\n</code></pre><p> The following example modifies the ShortDatePattern property of a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that represents the formatting conventions of the English (United States) culture. It also displays a date value twice, first to reflect the original ShortDatePattern property and then to reflect the new property value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.ShortDatePattern#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTimeFormatInfo dtfi = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;).DateTimeFormat;\n      DateTime date1 = new DateTime(2011, 5, 1);\n      Console.WriteLine(&quot;Original Short Date Pattern:&quot;);\n      Console.WriteLine(&quot;   {0}: {1}&quot;, dtfi.ShortDatePattern, \n                                       date1.ToString(&quot;d&quot;, dtfi));\n      dtfi.DateSeparator = &quot;-&quot;;\n      dtfi.ShortDatePattern = @&quot;yyyy/MM/dd&quot;;\n      Console.WriteLine(&quot;Revised Short Date Pattern:&quot;);\n      Console.WriteLine(&quot;   {0}: {1}&quot;, dtfi.ShortDatePattern, \n                                       date1.ToString(&quot;d&quot;, dtfi));\n   }\n}\n// The example displays the following output:\n//       Original Short Date Pattern:\n//          M/d/yyyy: 5/1/2011\n//       Revised Short Date Pattern:\n//          yyyy/MM/dd: 2011-05-01\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.ShortDatePattern#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dtfi As DateTimeFormatInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;).DateTimeFormat\n      Dim date1 As DateTime = #05/01/2011#\n      Console.WriteLine(&quot;Original Short Date Pattern:&quot;)\n      Console.WriteLine(&quot;   {0}: {1}&quot;, dtfi.ShortDatePattern, \n                                       date1.ToString(&quot;d&quot;, dtfi))\n      dtfi.DateSeparator = &quot;-&quot;\n      dtfi.ShortDatePattern = &quot;yyyy/MM/dd&quot;\n      Console.WriteLine(&quot;Revised Short Date Pattern:&quot;)\n      Console.WriteLine(&quot;   {0}: {1}&quot;, dtfi.ShortDatePattern, \n                                       date1.ToString(&quot;d&quot;, dtfi))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Original Short Date Pattern:\n&#39;       M/d/yyyy: 5/1/2011\n&#39;    Revised Short Date Pattern:\n&#39;       YYYY/MM/dd: 2011-05-01\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_ShortestDayNames\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_ShortestDayNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShortestDayNames</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a string array of the shortest unique abbreviated day names associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] ShortestDayNames { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array of day names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the array does not have exactly seven elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the value array or one of the elements of the value array is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates several methods and properties that specify date and time format patterns, native calendar name, and full and abbreviated month and day names.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.DTFI1#1\">// This code example demonstrates the DateTimeFormatInfo \n// MonthGenitiveNames, AbbreviatedMonthGenitiveNames, \n// ShortestDayNames, and NativeCalendarName properties, and\n// the GetShortestDayName() and SetAllDateTimePatterns() methods.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string[] myDateTimePatterns = new string[] {&quot;MM/dd/yy&quot;, &quot;MM/dd/yyyy&quot;};\n\n// Get the en-US culture.\n    CultureInfo ci = new CultureInfo(&quot;en-US&quot;);\n// Get the DateTimeFormatInfo for the en-US culture.\n    DateTimeFormatInfo dtfi = ci.DateTimeFormat;\n\n// Display the effective culture.\n    Console.WriteLine(&quot;This code example uses the {0} culture.&quot;, ci.Name);\n\n// Display the native calendar name.    \n    Console.WriteLine(&quot;<br>NativeCalendarName...&quot;);\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, dtfi.NativeCalendarName);\n\n// Display month genitive names.\n    Console.WriteLine(&quot;<br>MonthGenitiveNames...&quot;);\n    foreach (string name in dtfi.MonthGenitiveNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display abbreviated month genitive names.\n    Console.WriteLine(&quot;<br>AbbreviatedMonthGenitiveNames...&quot;);\n    foreach (string name in dtfi.AbbreviatedMonthGenitiveNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display shortest day names.\n    Console.WriteLine(&quot;<br>ShortestDayNames...&quot;);\n    foreach (string name in dtfi.ShortestDayNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display shortest day name for a particular day of the week.\n    Console.WriteLine(&quot;<br>GetShortestDayName(DayOfWeek.Sunday)...&quot;);\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, dtfi.GetShortestDayName(DayOfWeek.Sunday));\n\n// Display the initial DateTime format patterns for the &#39;d&#39; format specifier.\n    Console.WriteLine(&quot;<br>Initial DateTime format patterns for the &#39;d&#39; format specifier...&quot;);\n    foreach (string name in dtfi.GetAllDateTimePatterns(&#39;d&#39;)) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Change the initial DateTime format patterns for the &#39;d&#39; DateTime format specifier.\n    Console.WriteLine(&quot;<br>Change the initial DateTime format patterns for the <br>&quot; +\n                      &quot;&#39;d&#39; format specifier to my format patterns...&quot;);\n    dtfi.SetAllDateTimePatterns(myDateTimePatterns, &#39;d&#39;);\n\n// Display the new DateTime format patterns for the &#39;d&#39; format specifier.\n    Console.WriteLine(&quot;<br>New DateTime format patterns for the &#39;d&#39; format specifier...&quot;);\n    foreach (string name in dtfi.GetAllDateTimePatterns(&#39;d&#39;)) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n    }\n}\n/*\nThis code example produces the following results:\n\nThis code example uses the en-US culture.\n\nNativeCalendarName...\n&quot;Gregorian Calendar&quot;\n\nMonthGenitiveNames...\n&quot;January&quot;\n&quot;February&quot;\n&quot;March&quot;\n&quot;April&quot;\n&quot;May&quot;\n&quot;June&quot;\n&quot;July&quot;\n&quot;August&quot;\n&quot;September&quot;\n&quot;October&quot;\n&quot;November&quot;\n&quot;December&quot;\n&quot;&quot;\n\nAbbreviatedMonthGenitiveNames...\n&quot;Jan&quot;\n&quot;Feb&quot;\n&quot;Mar&quot;\n&quot;Apr&quot;\n&quot;May&quot;\n&quot;Jun&quot;\n&quot;Jul&quot;\n&quot;Aug&quot;\n&quot;Sep&quot;\n&quot;Oct&quot;\n&quot;Nov&quot;\n&quot;Dec&quot;\n&quot;&quot;\n\nShortestDayNames...\n&quot;Su&quot;\n&quot;Mo&quot;\n&quot;Tu&quot;\n&quot;We&quot;\n&quot;Th&quot;\n&quot;Fr&quot;\n&quot;Sa&quot;\n\nGetShortestDayName(DayOfWeek.Sunday)...\n&quot;Su&quot;\n\nInitial DateTime format patterns for the &#39;d&#39; format specifier...\n&quot;M/d/yyyy&quot;\n&quot;M/d/yy&quot;\n&quot;MM/dd/yy&quot;\n&quot;MM/dd/yyyy&quot;\n&quot;yy/MM/dd&quot;\n&quot;yyyy-MM-dd&quot;\n&quot;dd-MMM-yy&quot;\n\nChange the initial DateTime format patterns for the\n&#39;d&#39; format specifier to my format patterns...\n\nNew DateTime format patterns for the &#39;d&#39; format specifier...\n&quot;MM/dd/yy&quot;\n&quot;MM/dd/yyyy&quot;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.DTFI1#1\">\n&#39; This code example demonstrates the DateTimeFormatInfo \n&#39; MonthGenitiveNames, AbbreviatedMonthGenitiveNames, \n&#39; ShortestDayNames, and NativeCalendarName properties, and\n&#39; the GetShortestDayName() and SetAllDateTimePatterns() methods.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim myDateTimePatterns() As String = {&quot;MM/dd/yy&quot;, &quot;MM/dd/yyyy&quot;}\n        Dim name As String = &quot;&quot;\n        \n        &#39; Get the en-US culture.\n        Dim ci As New CultureInfo(&quot;en-US&quot;)\n        &#39; Get the DateTimeFormatInfo for the en-US culture.\n        Dim dtfi As DateTimeFormatInfo = ci.DateTimeFormat\n        \n        &#39; Display the effective culture.\n        Console.WriteLine(&quot;This code example uses the {0} culture.&quot;, ci.Name)\n        \n        &#39; Display the native calendar name.    \n        Console.WriteLine(vbCrLf &amp; &quot;NativeCalendarName...&quot;)\n        Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, dtfi.NativeCalendarName)\n        \n        &#39; Display month genitive names.\n        Console.WriteLine(vbCrLf &amp; &quot;MonthGenitiveNames...&quot;)\n        For Each name In dtfi.MonthGenitiveNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display abbreviated month genitive names.\n        Console.WriteLine(vbCrLf &amp; &quot;AbbreviatedMonthGenitiveNames...&quot;)\n        For Each name In dtfi.AbbreviatedMonthGenitiveNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display shortest day names.\n        Console.WriteLine(vbCrLf &amp; &quot;ShortestDayNames...&quot;)\n        For Each name In dtfi.ShortestDayNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display shortest day name for a particular day of the week.\n        Console.WriteLine(vbCrLf &amp; &quot;GetShortestDayName(DayOfWeek.Sunday)...&quot;)\n        Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, dtfi.GetShortestDayName(DayOfWeek.Sunday))\n        \n        &#39; Display the initial DateTime format patterns for the &#39;d&#39; format specifier.\n        Console.WriteLine(vbCrLf &amp; &quot;Initial DateTime format patterns for &quot; &amp; _\n                          &quot;the &#39;d&#39; format specifier...&quot;)\n        For Each name In dtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Change the initial DateTime format patterns for the &#39;d&#39; DateTime format specifier.\n        Console.WriteLine(vbCrLf &amp; &quot;Change the initial DateTime format patterns for the &quot; &amp; _\n                          vbCrLf &amp; &quot;&#39;d&#39; format specifier to my format patterns...&quot;)\n        dtfi.SetAllDateTimePatterns(myDateTimePatterns, &quot;d&quot;c)\n        \n        &#39; Display the new DateTime format patterns for the &#39;d&#39; format specifier.\n        Console.WriteLine(vbCrLf &amp; _\n                          &quot;New DateTime format patterns for the &#39;d&#39; format specifier...&quot;)\n        For Each name In dtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;This code example uses the en-US culture.\n&#39;\n&#39;NativeCalendarName...\n&#39;&quot;Gregorian Calendar&quot;\n&#39;\n&#39;MonthGenitiveNames...\n&#39;&quot;January&quot;\n&#39;&quot;February&quot;\n&#39;&quot;March&quot;\n&#39;&quot;April&quot;\n&#39;&quot;May&quot;\n&#39;&quot;June&quot;\n&#39;&quot;July&quot;\n&#39;&quot;August&quot;\n&#39;&quot;September&quot;\n&#39;&quot;October&quot;\n&#39;&quot;November&quot;\n&#39;&quot;December&quot;\n&#39;&quot;&quot;\n&#39;\n&#39;AbbreviatedMonthGenitiveNames...\n&#39;&quot;Jan&quot;\n&#39;&quot;Feb&quot;\n&#39;&quot;Mar&quot;\n&#39;&quot;Apr&quot;\n&#39;&quot;May&quot;\n&#39;&quot;Jun&quot;\n&#39;&quot;Jul&quot;\n&#39;&quot;Aug&quot;\n&#39;&quot;Sep&quot;\n&#39;&quot;Oct&quot;\n&#39;&quot;Nov&quot;\n&#39;&quot;Dec&quot;\n&#39;&quot;&quot;\n&#39;\n&#39;ShortestDayNames...\n&#39;&quot;Su&quot;\n&#39;&quot;Mo&quot;\n&#39;&quot;Tu&quot;\n&#39;&quot;We&quot;\n&#39;&quot;Th&quot;\n&#39;&quot;Fr&quot;\n&#39;&quot;Sa&quot;\n&#39;\n&#39;GetShortestDayName(DayOfWeek.Sunday)...\n&#39;&quot;Su&quot;\n&#39;\n&#39;Initial DateTime format patterns for the &#39;d&#39; format specifier...\n&#39;&quot;M/d/yyyy&quot;\n&#39;&quot;M/d/yy&quot;\n&#39;&quot;MM/dd/yy&quot;\n&#39;&quot;MM/dd/yyyy&quot;\n&#39;&quot;yy/MM/dd&quot;\n&#39;&quot;yyyy-MM-dd&quot;\n&#39;&quot;dd-MMM-yy&quot;\n&#39;\n&#39;Change the initial DateTime format patterns for the\n&#39;&#39;d&#39; format specifier to my format patterns...\n&#39;\n&#39;New DateTime format patterns for the &#39;d&#39; format specifier...\n&#39;&quot;MM/dd/yy&quot;\n&#39;&quot;MM/dd/yyyy&quot;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_ShortTimePattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_ShortTimePattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShortTimePattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the custom format string for a short time value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ShortTimePattern { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a short time value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ShortTimePattern property defines the culture-specific format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;t&quot; standard format string.  </p>\n<p> We recommend that you set the time separator in the short time pattern to an exact string instead of using the time separator placeholder. For example, to obtain the pattern h-mm-ss, set the short time pattern to &quot;h-mm-ss&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of ShortTimePattern for a few cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.ShortTimePattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.ShortTimePattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n CULTURE    PROPERTY VALUE\n  en-US     h:mm tt\n  ja-JP     H:mm\n  fr-FR     HH:mm\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.ShortTimePattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;ShortTimePattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.\n\nCULTURE    PROPERTY VALUE\nen-US     h:mm tt\nja-JP     H:mm\nfr-FR     HH:mm\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.ShortTimePattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.ShortTimePattern)\n\n   End Sub &#39;PrintPattern \n\nEnd Class &#39;SamplesDTFI\n\n&#39;This code produces the following output.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     h:mm tt\n&#39;  ja-JP     H:mm\n&#39;  fr-FR     HH:mm\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_SortableDateTimePattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortableDateTimePattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom format string for a sortable date and time value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SortableDateTimePattern { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a sortable date and time value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SortableDateTimePattern property defines the culture-specific format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;s&quot; standard format string.  </p>\n<p> The format string returned by the SortableDateTimePattern property reflects a defined standard (ISO 8601), and the property is read-only. Therefore, it is always the same, regardless of the culture. The custom format string is &quot;yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of SortableDateTimePattern for a few cultures.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.SortableDateTimePattern)\n\n   End Sub &#39;PrintPattern \n\nEnd Class &#39;SamplesDTFI\n\n&#39;This code produces the following output.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n&#39;  ja-JP     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n&#39;  fr-FR     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;SortableDateTimePattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.\n\nCULTURE    PROPERTY VALUE\nen-US     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\nja-JP     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\nfr-FR     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.SortableDateTimePattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n CULTURE    PROPERTY VALUE\n  en-US     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n  ja-JP     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n  fr-FR     yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_TimeSeparator\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_TimeSeparator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeSeparator</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the string that separates the components of time, that is, the hour, minutes, and seconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TimeSeparator { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string that separates the components of time. The default for <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.InvariantInfo*</span> is &quot;:&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the custom pattern includes the format pattern &quot;:&quot;, <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> displays the value of TimeSeparator in place of the &quot;:&quot; in the format pattern.  </p>\n<p> The time separator is derived from the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_ShortTimePattern_\" data-linktype=\"relative-path\">ShortTimePattern</a> property. We recommend that you set the time separator in short or long time patterns to an exact string instead of using the time separator placeholder. For example, to obtain the pattern h-mm-ss, set the pattern to &quot;h-mm-ss&quot;. This practice also enables you to set patterns such as &quot;h&#39;h &#39;mm&#39;m &#39;ss&#39;s&#39;&quot; (3h 36m 12s) that include multiple types of separators. The TimeSeparator property defines the string that replaces the time separator (&quot;:&quot; custom date and time format specifier) in a result string in a formatting operation. It also defines the time separator string in a parsing operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object for the en-US culture, changes its date separator to &quot;.&quot;, and displays a date by using the &quot;t&quot;, &quot;T&quot;, &quot;F&quot;, &quot;f&quot;, &quot;G&quot;, and &quot;g&quot; standard format strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.TimeSeparator#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime value = new DateTime(2013, 9, 8, 14, 30, 0);\n      \n      string[] formats = { &quot;t&quot;, &quot;T&quot;, &quot;f&quot;, &quot;F&quot;, &quot;G&quot;, &quot;g&quot; };\n      CultureInfo culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      DateTimeFormatInfo dtfi = culture.DateTimeFormat;\n      dtfi.TimeSeparator = &quot;.&quot;;\n      \n      foreach (var fmt in formats)\n         Console.WriteLine(&quot;{0}: {1}&quot;, fmt, value.ToString(fmt, dtfi));\n   }\n}\n// The example displays the following output:\n//       t: 2.30 PM\n//       T: 2.30.00 PM\n//       f: Sunday, September 08, 2013 2.30 PM\n//       F: Sunday, September 08, 2013 2.30.00 PM\n//       G: 9/8/2013 2.30.00 PM\n//       g: 9/8/2013 2.30 PM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.TimeSeparator#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim value As New Date(2013, 9, 8, 14, 30, 0)\n      \n      Dim formats() As String = { &quot;t&quot;, &quot;T&quot;, &quot;f&quot;, &quot;F&quot;, &quot;G&quot;, &quot;g&quot; }\n      Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Dim dtfi As DateTimeFormatInfo = culture.DateTimeFormat\n      dtfi.TimeSeparator = &quot;.&quot;\n      \n      For Each fmt In formats\n         Console.WriteLine(&quot;{0}: {1}&quot;, fmt, value.ToString(fmt, dtfi))\n      Next      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       t: 2.30 PM\n&#39;       T: 2.30.00 PM\n&#39;       f: Sunday, September 08, 2013 2.30 PM\n&#39;       F: Sunday, September 08, 2013 2.30.00 PM\n&#39;       G: 9/8/2013 2.30.00 PM\n&#39;       g: 9/8/2013 2.30 PM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UniversalSortableDateTimePattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets the custom format string for a universal, sortable date and time string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string UniversalSortableDateTimePattern { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a universal, sortable date and time string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UniversalSortableDateTimePattern property defines the format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;u&quot; standard format string. It can be used to display dates and times in a sortable order with the universal time designator &quot;Z&quot; at the end. The format is sortable because it uses leading zeros for year, month, day, hour, minute, and second. The custom format string (&quot;yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;&quot;) is the same regardless of culture or format provider.  </p>\n<p> The format string returned by the UniversalSortableDateTimePattern property reflects a defined standard, and the property is read-only. Therefore, it is always the same, regardless of the culture. The custom format string is &quot;yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of UniversalSortableDateTimePattern for a few cultures.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;UniversalSortableDateTimePattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.\n\nCULTURE    PROPERTY VALUE\nen-US     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\nja-JP     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\nfr-FR     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.UniversalSortableDateTimePattern)\n\n   End Sub &#39;PrintPattern \n\nEnd Class &#39;SamplesDTFI\n\n&#39;This code produces the following output.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n&#39;  ja-JP     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n&#39;  fr-FR     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.UniversalSortableDateTimePattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n CULTURE    PROPERTY VALUE\n  en-US     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n  ja-JP     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n  fr-FR     yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_YearMonthPattern\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_YearMonthPattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">YearMonthPattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the custom format string for a year and month value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string YearMonthPattern { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The custom format string for a year and month value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is being set to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is being set and the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The YearMonthPattern property defines the culture-specific format of date strings that are returned by calls to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_\" data-linktype=\"relative-path\">ToString</a> and <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_ToString_\" data-linktype=\"relative-path\">ToString</a> methods and by composite format strings that are supplied the &quot;y&quot; and &quot;Y&quot; standard format strings.  </p>\n<p> This property is affected if the value of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property changes.  </p>\n<p> We recommend that you set the date separator in the year month pattern to an exact string instead of using the date separator placeholder. For example, to get the pattern MM-yyyy, set the year month pattern to &quot;MM-yyyy&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the value of YearMonthPattern for a few cultures.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.DateTimeFormatInfo.YearMonthPattern#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintPattern( String^ myCulture )\n{\n   CultureInfo^ MyCI = gcnew CultureInfo( myCulture,false );\n   DateTimeFormatInfo^ myDTFI = MyCI-&gt;DateTimeFormat;\n   Console::WriteLine( &quot; {0} {1}&quot;, myCulture, myDTFI-&gt;YearMonthPattern );\n}\n\nint main()\n{\n   \n   // Displays the values of the pattern properties.\n   Console::WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n   PrintPattern( &quot;en-US&quot; );\n   PrintPattern( &quot;ja-JP&quot; );\n   PrintPattern( &quot;fr-FR&quot; );\n}\n\n/*\nThis code produces the following output.  The question marks take the place of native script characters.\n\nCULTURE    PROPERTY VALUE\nen-US     MMMM, yyyy\nja-JP     yyyy&#39;?&#39;M&#39;?&#39;\nfr-FR     MMMM yyyy\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.YearMonthPattern#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesDTFI  {\n\n   public static void Main()  {\n\n      // Displays the values of the pattern properties.\n      Console.WriteLine( &quot; CULTURE    PROPERTY VALUE&quot; );\n      PrintPattern( &quot;en-US&quot; );\n      PrintPattern( &quot;ja-JP&quot; );\n      PrintPattern( &quot;fr-FR&quot; );\n\n   }\n\n   public static void PrintPattern( String myCulture )  {\n\n      DateTimeFormatInfo myDTFI = new CultureInfo( myCulture, false ).DateTimeFormat;\n      Console.WriteLine( &quot;  {0}     {1}&quot;, myCulture, myDTFI.YearMonthPattern );\n\n   }\n\n}\n\n/*\nThis code produces the following output.  The question marks take the place of native script characters.\n\n CULTURE    PROPERTY VALUE\n  en-US     MMMM, yyyy\n  ja-JP     yyyy&#39;?&#39;M&#39;?&#39;\n  fr-FR     MMMM yyyy\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.YearMonthPattern#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesDTFI\n\n   Public Shared Sub Main()\n\n      &#39; Displays the values of the pattern properties.\n      Console.WriteLine(&quot; CULTURE    PROPERTY VALUE&quot;)\n      PrintPattern(&quot;en-US&quot;)\n      PrintPattern(&quot;ja-JP&quot;)\n      PrintPattern(&quot;fr-FR&quot;)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintPattern(myCulture As [String])\n\n      Dim myDTFI As DateTimeFormatInfo = New CultureInfo(myCulture, False).DateTimeFormat\n      Console.WriteLine(&quot;  {0}     {1}&quot;, myCulture, myDTFI.YearMonthPattern)\n\n   End Sub &#39;PrintPattern \n\nEnd Class &#39;SamplesDTFI\n\n&#39;This code produces the following output.  The question marks take the place of native script characters.\n&#39;\n&#39; CULTURE    PROPERTY VALUE\n&#39;  en-US     MMMM, yyyy\n&#39;  ja-JP     yyyy&#39;?&#39;M&#39;?&#39;\n&#39;  fr-FR     MMMM yyyy\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_Clone\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object copied from the original <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The clone is writable even if the original <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only. Therefore, the properties of the clone can be modified with user-defined patterns.  </p>\n<p> A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects. It refers to the original objects instead. In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName_System_DayOfWeek_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAbbreviatedDayName(DayOfWeek)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the culture-specific abbreviated name of the specified day of the week based on the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetAbbreviatedDayName (DayOfWeek dayofweek);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dayofweek</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The culture-specific abbreviated name of the day of the week represented by <code>dayofweek</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>dayofweek</code> is not a valid <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the default invariant <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object, this method returns a string from the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>:  </p>\n<table>\n<thead>\n<tr>\n<th><code>dayofweek</code></th>\n<th>Return Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sunday</td>\n<td>&quot;Sun&quot;</td>\n</tr>\n<tr>\n<td>Monday</td>\n<td>&quot;Mon&quot;</td>\n</tr>\n<tr>\n<td>Tuesday</td>\n<td>&quot;Tue&quot;</td>\n</tr>\n<tr>\n<td>Wednesday</td>\n<td>&quot;Wed&quot;</td>\n</tr>\n<tr>\n<td>Thursday</td>\n<td>&quot;Thu&quot;</td>\n</tr>\n<tr>\n<td>Friday</td>\n<td>&quot;Fri&quot;</td>\n</tr>\n<tr>\n<td>Saturday</td>\n<td>&quot;Sat&quot;</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAbbreviatedEraName(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the string containing the abbreviated name of the specified era, if an abbreviation exists.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetAbbreviatedEraName (int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The integer representing the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the abbreviated name of the specified era, if an abbreviation exists.  </p>\n<p> -or-  </p>\n<p> A string containing the full name of the era, if an abbreviation does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> does not represent a valid era in the calendar specified in the <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.Calendar*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The era name is the name a calendar uses to refer to a period of time reckoned from a fixed point or event. For example, &quot;A.D.&quot; or &quot;C.E.&quot; is the current era in the Gregorian calendar.  </p>\n<p> The valid values for <code>era</code> are listed in the <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_Eras_\" data-linktype=\"relative-path\">Eras</a> property of the appropriate class derived from <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a>. For example: <a class=\"xref\" href=\"system.globalization.japanesecalendar#System_Globalization_JapaneseCalendar_Eras_\" data-linktype=\"relative-path\">Eras</a> displays a list of eras that are supported by this implementation.  </p>\n<p> In the <a class=\"xref\" href=\"system.globalization.japanesecalendar\" data-linktype=\"relative-path\">JapaneseCalendar</a> class, the abbreviated era name is the first character of the full era name. This character is either the single-character case-insensitive Latin alphabet abbreviation or the single-character Kanji abbreviation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAbbreviatedMonthName(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the culture-specific abbreviated name of the specified month based on the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetAbbreviatedMonthName (int month);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 through 13 representing the name of the month to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The culture-specific abbreviated name of the month represented by <code>month</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>month</code> is less than 1 or greater than 13.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the default invariant <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object, this method returns a string from the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> object.  </p>\n<table>\n<thead>\n<tr>\n<th><code>month</code></th>\n<th>Return Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>&quot;Jan&quot;</td>\n</tr>\n<tr>\n<td>2</td>\n<td>&quot;Feb&quot;</td>\n</tr>\n<tr>\n<td>3</td>\n<td>&quot;Mar&quot;</td>\n</tr>\n<tr>\n<td>4</td>\n<td>&quot;Apr&quot;</td>\n</tr>\n<tr>\n<td>5</td>\n<td>&quot;May&quot;</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&quot;Jun&quot;</td>\n</tr>\n<tr>\n<td>7</td>\n<td>&quot;Jul&quot;</td>\n</tr>\n<tr>\n<td>8</td>\n<td>&quot;Aug&quot;</td>\n</tr>\n<tr>\n<td>9</td>\n<td>&quot;Sep&quot;</td>\n</tr>\n<tr>\n<td>10</td>\n<td>&quot;Oct&quot;</td>\n</tr>\n<tr>\n<td>11</td>\n<td>&quot;Nov&quot;</td>\n</tr>\n<tr>\n<td>12</td>\n<td>&quot;Dec&quot;</td>\n</tr>\n<tr>\n<td>13</td>\n<td>&quot;&quot;</td>\n</tr>\n</tbody>\n</table>\n<p> <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> objects can accommodate calendars with 13 months. For 12-month calendars, the empty string is always returned as the name of the 13th month.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAllDateTimePatterns()</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the standard patterns in which date and time values can be formatted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] GetAllDateTimePatterns ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the standard patterns in which date and time values can be formatted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns an array that contains all custom format strings that correspond to standard format strings. See <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> for a list of the standard format strings.  </p>\n<p> You can use the custom format strings in the array returned by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_\" data-linktype=\"relative-path\">GetAllDateTimePatterns</a> method in formatting operations. However, if you do, the string representation of a date and time value returned in that formatting operation cannot always be parsed successfully by the <code>Parse</code> and <code>TryParse</code> methods. Therefore, you cannot assume that the custom format strings returned by the GetAllDateTimePatterns method can be used to round-trip date and time values. The following example illustrates this problem. It retrieves a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that contains formatting information for the Italy (Italian) culture. It passes each custom format string in the array returned by the GetAllDateTimePatterns method to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_System_String_\" data-linktype=\"relative-path\">System.DateTime.ToString(String)</a> method to create the string representation of a date and time. This example then attempts to parse this value by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_TryParse_System_String_System_DateTime__\" data-linktype=\"relative-path\">System.DateTime.TryParse(String,DateTime)</a> method. As the output from the example shows, some of the custom format strings do not produce a date and time value that successfully round-trips.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo culture = CultureInfo.CreateSpecificCulture(&quot;it-IT&quot;);\n      DateTime date1 = new DateTime(2011, 02, 01, 7, 30, 45, 0);\n      DateTime date2;\n      int total = 0;\n      int noRoundTrip = 0;\n      \n      foreach (var fmt in culture.DateTimeFormat.GetAllDateTimePatterns()) {\n         total += 1;\n         if (! DateTime.TryParse(date1.ToString(fmt), out date2)) {\n            noRoundTrip++;\n            Console.WriteLine(&quot;Unable to parse {0:&quot; + fmt + &quot;} (format &#39;{1}&#39;)&quot;, \n                              date1, fmt);\n         }             \n      }\n      Console.WriteLine(&quot;\\nUnable to round-trip {0} of {1} format strings.&quot;,\n                        noRoundTrip, total);\n                        \n   }\n}\n// The example displays the following output:\n//    Unable to parse Tuesday 1 February 2011 7.30 (format &#39;dddd d MMMM yyyy H.mm&#39;)\n//    Unable to parse Tuesday 1 February 2011 07.30 (format &#39;dddd d MMMM yyyy HH.mm&#39;)\n//    Unable to parse 1-Feb-11 7.30 (format &#39;d-MMM-yy H.mm&#39;)\n//    Unable to parse 1-Feb-11 07.30 (format &#39;d-MMM-yy HH.mm&#39;)\n//    Unable to parse 1 February 2011 7.30 (format &#39;d MMMM yyyy H.mm&#39;)\n//    Unable to parse 1 February 2011 07.30 (format &#39;d MMMM yyyy HH.mm&#39;)\n//    Unable to parse Tuesday 1 February 2011 7.30.45 (format &#39;dddd d MMMM yyyy H.mm.ss&#39;)\n//    Unable to parse Tuesday 1 February 2011 07.30.45 (format &#39;dddd d MMMM yyyy HH.mm.ss&#39;)\n//    Unable to parse 1-Feb-11 7.30.45 (format &#39;d-MMM-yy H.mm.ss&#39;)\n//    Unable to parse 1-Feb-11 07.30.45 (format &#39;d-MMM-yy HH.mm.ss&#39;)\n//    Unable to parse 1 February 2011 7.30.45 (format &#39;d MMMM yyyy H.mm.ss&#39;)\n//    Unable to parse 1 February 2011 07.30.45 (format &#39;d MMMM yyyy HH.mm.ss&#39;)\n//    Unable to parse 01/02/2011 7.30 (format &#39;dd/MM/yyyy H.mm&#39;)\n//    Unable to parse 01/02/2011 07.30 (format &#39;dd/MM/yyyy HH.mm&#39;)\n//    Unable to parse 01/Feb/2011 7.30 (format &#39;dd/MMM/yyyy H.mm&#39;)\n//    Unable to parse 01/Feb/2011 07.30 (format &#39;dd/MMM/yyyy HH.mm&#39;)\n//    Unable to parse 01/02/11 7.30 (format &#39;dd/MM/yy H.mm&#39;)\n//    Unable to parse 01/02/11 07.30 (format &#39;dd/MM/yy HH.mm&#39;)\n//    Unable to parse 01.2.11 7.30 (format &#39;dd.M.yy H.mm&#39;)\n//    Unable to parse 01.2.11 07.30 (format &#39;dd.M.yy HH.mm&#39;)\n//    Unable to parse 1/2/11 7.30 (format &#39;d/M/yy H.mm&#39;)\n//    Unable to parse 1/2/11 07.30 (format &#39;d/M/yy HH.mm&#39;)\n//    Unable to parse 2011-02-01 7.30 (format &#39;yyyy-MM-dd H.mm&#39;)\n//    Unable to parse 2011-02-01 07.30 (format &#39;yyyy-MM-dd HH.mm&#39;)\n//    Unable to parse 01/02/2011 7.30.45 (format &#39;dd/MM/yyyy H.mm.ss&#39;)\n//    Unable to parse 01/02/2011 07.30.45 (format &#39;dd/MM/yyyy HH.mm.ss&#39;)\n//    Unable to parse 01/Feb/2011 7.30.45 (format &#39;dd/MMM/yyyy H.mm.ss&#39;)\n//    Unable to parse 01/Feb/2011 07.30.45 (format &#39;dd/MMM/yyyy HH.mm.ss&#39;)\n//    Unable to parse 01/02/11 7.30.45 (format &#39;dd/MM/yy H.mm.ss&#39;)\n//    Unable to parse 01/02/11 07.30.45 (format &#39;dd/MM/yy HH.mm.ss&#39;)\n//    Unable to parse 01.2.11 7.30.45 (format &#39;dd.M.yy H.mm.ss&#39;)\n//    Unable to parse 01.2.11 07.30.45 (format &#39;dd.M.yy HH.mm.ss&#39;)\n//    Unable to parse 1/2/11 7.30.45 (format &#39;d/M/yy H.mm.ss&#39;)\n//    Unable to parse 1/2/11 07.30.45 (format &#39;d/M/yy HH.mm.ss&#39;)\n//    Unable to parse 2011-02-01 7.30.45 (format &#39;yyyy-MM-dd H.mm.ss&#39;)\n//    Unable to parse 2011-02-01 07.30.45 (format &#39;yyyy-MM-dd HH.mm.ss&#39;)\n//    Unable to parse Tuesday 1 February 2011 7.30.45 (format &#39;dddd d MMMM yyyy H.mm.ss&#39;)\n//    Unable to parse Tuesday 1 February 2011 07.30.45 (format &#39;dddd d MMMM yyyy HH.mm.ss&#39;)\n//    Unable to parse 1-Feb-11 7.30.45 (format &#39;d-MMM-yy H.mm.ss&#39;)\n//    Unable to parse 1-Feb-11 07.30.45 (format &#39;d-MMM-yy HH.mm.ss&#39;)\n//    Unable to parse 1 February 2011 7.30.45 (format &#39;d MMMM yyyy H.mm.ss&#39;)\n//    Unable to parse 1 February 2011 07.30.45 (format &#39;d MMMM yyyy HH.mm.ss&#39;)\n//    \n//    Unable to round-trip 42 of 98 format strings.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;it-IT&quot;)\n      Dim date1 = New DateTime(2011, 02, 01, 7, 30, 45, 0)\n      Dim date2 As DateTime\n      Dim total, noRoundTrip As Integer\n      \n      For Each fmt In culture.DateTimeFormat.GetAllDateTimePatterns()\n         total += 1\n         If Not DateTime.TryParse(date1.ToString(fmt), date2)\n            noRoundTrip += 1\n            Console.WriteLine(&quot;Unable to parse {0:&quot; + fmt + &quot;} (format &#39;{1}&#39;)&quot;, \n                              date1, fmt)\n         End If             \n      Next\n      Console.WriteLine()\n      Console.WriteLine(&quot;Unable to round-trip {0} of {1} format strings.&quot;,\n                        noRoundTrip, total)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Unable to parse Tuesday 1 February 2011 7.30 (format &#39;dddd d MMMM yyyy H.mm&#39;)\n&#39;    Unable to parse Tuesday 1 February 2011 07.30 (format &#39;dddd d MMMM yyyy HH.mm&#39;)\n&#39;    Unable to parse 1-Feb-11 7.30 (format &#39;d-MMM-yy H.mm&#39;)\n&#39;    Unable to parse 1-Feb-11 07.30 (format &#39;d-MMM-yy HH.mm&#39;)\n&#39;    Unable to parse 1 February 2011 7.30 (format &#39;d MMMM yyyy H.mm&#39;)\n&#39;    Unable to parse 1 February 2011 07.30 (format &#39;d MMMM yyyy HH.mm&#39;)\n&#39;    Unable to parse Tuesday 1 February 2011 7.30.45 (format &#39;dddd d MMMM yyyy H.mm.ss&#39;)\n&#39;    Unable to parse Tuesday 1 February 2011 07.30.45 (format &#39;dddd d MMMM yyyy HH.mm.ss&#39;)\n&#39;    Unable to parse 1-Feb-11 7.30.45 (format &#39;d-MMM-yy H.mm.ss&#39;)\n&#39;    Unable to parse 1-Feb-11 07.30.45 (format &#39;d-MMM-yy HH.mm.ss&#39;)\n&#39;    Unable to parse 1 February 2011 7.30.45 (format &#39;d MMMM yyyy H.mm.ss&#39;)\n&#39;    Unable to parse 1 February 2011 07.30.45 (format &#39;d MMMM yyyy HH.mm.ss&#39;)\n&#39;    Unable to parse 01/02/2011 7.30 (format &#39;dd/MM/yyyy H.mm&#39;)\n&#39;    Unable to parse 01/02/2011 07.30 (format &#39;dd/MM/yyyy HH.mm&#39;)\n&#39;    Unable to parse 01/Feb/2011 7.30 (format &#39;dd/MMM/yyyy H.mm&#39;)\n&#39;    Unable to parse 01/Feb/2011 07.30 (format &#39;dd/MMM/yyyy HH.mm&#39;)\n&#39;    Unable to parse 01/02/11 7.30 (format &#39;dd/MM/yy H.mm&#39;)\n&#39;    Unable to parse 01/02/11 07.30 (format &#39;dd/MM/yy HH.mm&#39;)\n&#39;    Unable to parse 01.2.11 7.30 (format &#39;dd.M.yy H.mm&#39;)\n&#39;    Unable to parse 01.2.11 07.30 (format &#39;dd.M.yy HH.mm&#39;)\n&#39;    Unable to parse 1/2/11 7.30 (format &#39;d/M/yy H.mm&#39;)\n&#39;    Unable to parse 1/2/11 07.30 (format &#39;d/M/yy HH.mm&#39;)\n&#39;    Unable to parse 2011-02-01 7.30 (format &#39;yyyy-MM-dd H.mm&#39;)\n&#39;    Unable to parse 2011-02-01 07.30 (format &#39;yyyy-MM-dd HH.mm&#39;)\n&#39;    Unable to parse 01/02/2011 7.30.45 (format &#39;dd/MM/yyyy H.mm.ss&#39;)\n&#39;    Unable to parse 01/02/2011 07.30.45 (format &#39;dd/MM/yyyy HH.mm.ss&#39;)\n&#39;    Unable to parse 01/Feb/2011 7.30.45 (format &#39;dd/MMM/yyyy H.mm.ss&#39;)\n&#39;    Unable to parse 01/Feb/2011 07.30.45 (format &#39;dd/MMM/yyyy HH.mm.ss&#39;)\n&#39;    Unable to parse 01/02/11 7.30.45 (format &#39;dd/MM/yy H.mm.ss&#39;)\n&#39;    Unable to parse 01/02/11 07.30.45 (format &#39;dd/MM/yy HH.mm.ss&#39;)\n&#39;    Unable to parse 01.2.11 7.30.45 (format &#39;dd.M.yy H.mm.ss&#39;)\n&#39;    Unable to parse 01.2.11 07.30.45 (format &#39;dd.M.yy HH.mm.ss&#39;)\n&#39;    Unable to parse 1/2/11 7.30.45 (format &#39;d/M/yy H.mm.ss&#39;)\n&#39;    Unable to parse 1/2/11 07.30.45 (format &#39;d/M/yy HH.mm.ss&#39;)\n&#39;    Unable to parse 2011-02-01 7.30.45 (format &#39;yyyy-MM-dd H.mm.ss&#39;)\n&#39;    Unable to parse 2011-02-01 07.30.45 (format &#39;yyyy-MM-dd HH.mm.ss&#39;)\n&#39;    Unable to parse Tuesday 1 February 2011 7.30.45 (format &#39;dddd d MMMM yyyy H.mm.ss&#39;)\n&#39;    Unable to parse Tuesday 1 February 2011 07.30.45 (format &#39;dddd d MMMM yyyy HH.mm.ss&#39;)\n&#39;    Unable to parse 1-Feb-11 7.30.45 (format &#39;d-MMM-yy H.mm.ss&#39;)\n&#39;    Unable to parse 1-Feb-11 07.30.45 (format &#39;d-MMM-yy HH.mm.ss&#39;)\n&#39;    Unable to parse 1 February 2011 7.30.45 (format &#39;d MMMM yyyy H.mm.ss&#39;)\n&#39;    Unable to parse 1 February 2011 07.30.45 (format &#39;d MMMM yyyy HH.mm.ss&#39;)\n&#39;    \n&#39;    Unable to round-trip 42 of 98 format strings.\n</code></pre><p> To parse the string representation of a date and time that can be expressed in a number of predefined custom formats, call one of the following methods:  </p>\n<ul>\n<li><p>[DateTime.ParseExact(String,â€‚String&lt;xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;  </p>\n</li>\n<li><p>[DateTimeOffset.ParseExact(String,â€‚String&lt;xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;  </p>\n</li>\n<li><p>[DateTime.TryParseExact(String,â€‚String&lt;xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=fullName&gt;  </p>\n</li>\n<li><p>[DateTimeOffset.TryParseExact(String,â€‚String&lt;xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=fullName&gt;  </p>\n<p>The custom format strings in the array returned by the GetAllDateTimePatterns method depends on the current calendar of the culture for which the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object supplies formatting information. If the calendar changes, the array returned by this method also changes.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the date and time format strings for the invariant culture, as well as the result string that is produced when that format string is used to format a particular date.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = #08/28/2014 12:28:30PM#\n      Dim invDTF As New DateTimeFormatInfo()\n      Dim formats() As String = invDTF.GetAllDateTimePatterns()\n\n      Console.WriteLine(&quot;{0,-40} {1}&quot;, &quot;Pattern&quot;, &quot;Result String&quot;)\n      Console.WriteLine()\n      For Each fmt In formats\n         Console.WriteLine(&quot;{0,-40} {1}&quot;, fmt, date1.ToString(fmt))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Pattern                                  Result String\n&#39;\n&#39;    MM/dd/yyyy                               08/28/2014\n&#39;    yyyy-MM-dd                               2014-08-28\n&#39;    dddd, dd MMMM yyyy                       Thursday, 28 August 2014\n&#39;    dddd, dd MMMM yyyy HH:mm                 Thursday, 28 August 2014 12:28\n&#39;    dddd, dd MMMM yyyy hh:mm tt              Thursday, 28 August 2014 12:28 PM\n&#39;    dddd, dd MMMM yyyy H:mm                  Thursday, 28 August 2014 12:28\n&#39;    dddd, dd MMMM yyyy h:mm tt               Thursday, 28 August 2014 12:28 PM\n&#39;    dddd, dd MMMM yyyy HH:mm:ss              Thursday, 28 August 2014 12:28:30\n&#39;    MM/dd/yyyy HH:mm                         08/28/2014 12:28\n&#39;    MM/dd/yyyy hh:mm tt                      08/28/2014 12:28 PM\n&#39;    MM/dd/yyyy H:mm                          08/28/2014 12:28\n&#39;    MM/dd/yyyy h:mm tt                       08/28/2014 12:28 PM\n&#39;    yyyy-MM-dd HH:mm                         2014-08-28 12:28\n&#39;    yyyy-MM-dd hh:mm tt                      2014-08-28 12:28 PM\n&#39;    yyyy-MM-dd H:mm                          2014-08-28 12:28\n&#39;    yyyy-MM-dd h:mm tt                       2014-08-28 12:28 PM\n&#39;    MM/dd/yyyy HH:mm:ss                      08/28/2014 12:28:30\n&#39;    yyyy-MM-dd HH:mm:ss                      2014-08-28 12:28:30\n&#39;    MMMM dd                                  August 28\n&#39;    MMMM dd                                  August 28\n&#39;    yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss.fffffffK   2014-08-28T12:28:30.0000000\n&#39;    yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss.fffffffK   2014-08-28T12:28:30.0000000\n&#39;    ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;      Thu, 28 Aug 2014 12:28:30 GMT\n&#39;    ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;      Thu, 28 Aug 2014 12:28:30 GMT\n&#39;    yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss            2014-08-28T12:28:30\n&#39;    HH:mm                                    12:28\n&#39;    hh:mm tt                                 12:28 PM\n&#39;    H:mm                                     12:28\n&#39;    h:mm tt                                  12:28 PM\n&#39;    HH:mm:ss                                 12:28:30\n&#39;    yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;           2014-08-28 12:28:30Z\n&#39;    dddd, dd MMMM yyyy HH:mm:ss              Thursday, 28 August 2014 12:28:30\n&#39;    yyyy MMMM                                2014 August\n&#39;    yyyy MMMM                                2014 August\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date = new DateTime(2014, 8, 28, 12, 28, 30);\n      DateTimeFormatInfo invDTF = new DateTimeFormatInfo();\n      String[] formats = invDTF.GetAllDateTimePatterns();\n\n      Console.WriteLine(&quot;{0,-40} {1}<br>&quot;, &quot;Pattern&quot;, &quot;Result String&quot;);\n      foreach (var fmt in formats)\n         Console.WriteLine(&quot;{0,-40} {1}&quot;, fmt, date.ToString(fmt));\n   }\n}\n// The example displays the following output:\n//    Pattern                                  Result String\n//\n//    MM/dd/yyyy                               08/28/2014\n//    yyyy-MM-dd                               2014-08-28\n//    dddd, dd MMMM yyyy                       Thursday, 28 August 2014\n//    dddd, dd MMMM yyyy HH:mm                 Thursday, 28 August 2014 12:28\n//    dddd, dd MMMM yyyy hh:mm tt              Thursday, 28 August 2014 12:28 PM\n//    dddd, dd MMMM yyyy H:mm                  Thursday, 28 August 2014 12:28\n//    dddd, dd MMMM yyyy h:mm tt               Thursday, 28 August 2014 12:28 PM\n//    dddd, dd MMMM yyyy HH:mm:ss              Thursday, 28 August 2014 12:28:30\n//    MM/dd/yyyy HH:mm                         08/28/2014 12:28\n//    MM/dd/yyyy hh:mm tt                      08/28/2014 12:28 PM\n//    MM/dd/yyyy H:mm                          08/28/2014 12:28\n//    MM/dd/yyyy h:mm tt                       08/28/2014 12:28 PM\n//    yyyy-MM-dd HH:mm                         2014-08-28 12:28\n//    yyyy-MM-dd hh:mm tt                      2014-08-28 12:28 PM\n//    yyyy-MM-dd H:mm                          2014-08-28 12:28\n//    yyyy-MM-dd h:mm tt                       2014-08-28 12:28 PM\n//    MM/dd/yyyy HH:mm:ss                      08/28/2014 12:28:30\n//    yyyy-MM-dd HH:mm:ss                      2014-08-28 12:28:30\n//    MMMM dd                                  August 28\n//    MMMM dd                                  August 28\n//    yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss.fffffffK   2014-08-28T12:28:30.0000000\n//    yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss.fffffffK   2014-08-28T12:28:30.0000000\n//    ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;      Thu, 28 Aug 2014 12:28:30 GMT\n//    ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;      Thu, 28 Aug 2014 12:28:30 GMT\n//    yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss            2014-08-28T12:28:30\n//    HH:mm                                    12:28\n//    hh:mm tt                                 12:28 PM\n//    H:mm                                     12:28\n//    h:mm tt                                  12:28 PM\n//    HH:mm:ss                                 12:28:30\n//    yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;           2014-08-28 12:28:30Z\n//    dddd, dd MMMM yyyy HH:mm:ss              Thursday, 28 August 2014 12:28:30\n//    yyyy MMMM                                2014 August\n//    yyyy MMMM                                2014 August\n</code></pre><p> The example instantiates a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that represents the invariant culture by calling the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo__ctor_\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> constructor. It could also retrieve a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> that represents the invariant culture from the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_InvariantInfo_\" data-linktype=\"relative-path\">InvariantInfo</a> property.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_System_Char_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAllDateTimePatterns(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the patterns in which date and time values can be formatted using the specified standard format string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] GetAllDateTimePatterns (char format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array containing the standard patterns in which date and time values can be formatted using the specified format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is not a valid standard format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns an array containing the custom format strings that correspond to a particular standard format string. See <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> for a list of the standard format strings.  </p>\n<p> You can use the custom format strings in the array returned by the GetAllDateTimePatterns method in formatting operations. However, if you do, the string representation of a date and time value returned in that formatting operation cannot always be parsed successfully by the <code>Parse</code> and <code>TryParse</code> methods. Therefore, you cannot assume that the custom format strings returned by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_\" data-linktype=\"relative-path\">GetAllDateTimePatterns</a> method can be used to round-trip date and time values. The following example illustrates this problem. It retrieves a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that contains formatting information for the Russia (Russian) culture. It calls the GetAllDateTimePatterns method for each standard format string, and then passes each custom format string in the returned array to the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_System_String_\" data-linktype=\"relative-path\">System.DateTime.ToString(String)</a> method to create the string representation of a date and time. This example then attempts to parse this value by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_TryParse_System_String_System_DateTime__\" data-linktype=\"relative-path\">System.DateTime.TryParse(String,DateTime)</a> method. As the output from the example shows, some of the custom format strings do not produce a date and time value that successfully round-trips.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;ru-RU&quot;)\n      Dim formats() As String = { &quot;d&quot;, &quot;D&quot;, &quot;f&quot;, &quot;F&quot;, &quot;g&quot;, &quot;G&quot;, &quot;m&quot;,\n                                  &quot;o&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;T&quot;, &quot;u&quot;, &quot;U&quot;, &quot;y&quot; }\n      Dim date1 = New DateTime(2011, 02, 01, 7, 30, 45, 0)\n      Dim date2 As DateTime\n      Dim total, noRoundTrip As Integer\n\n      For Each fmt In formats\n         total = 0 : noRoundTrip = 0\n         For Each pattern In culture.DateTimeFormat.GetAllDateTimePatterns(CChar(fmt))\n            total += 1\n            If Not DateTime.TryParse(date1.ToString(pattern), date2)\n               noRoundTrip += 1\n               Console.WriteLine(&quot;Unable to parse {0:&quot; + pattern + &quot;} (format &#39;{1}&#39;)&quot;, \n                                 date1, pattern)\n            End If             \n         Next\n         If noRoundTrip &gt; 0 Then\n            Console.WriteLine(&quot;{0}: Unable to round-trip {1} of {2} format strings.&quot;,\n                              fmt, noRoundTrip, total)\n            Console.WriteLine()\n         Else\n            Console.WriteLine(&quot;{0}: All custom format strings round trip.&quot;, fmt)\n            Console.WriteLine()\n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    d: All custom format strings round trip.\n&#39;    \n&#39;    Unable to parse 1 February 2011 Ð³. (format &#39;d MMMM yyyy &#39;Ð³.&#39;&#39;)\n&#39;    Unable to parse 01 February 2011 Ð³. (format &#39;dd MMMM yyyy &#39;Ð³.&#39;&#39;)\n&#39;    D: Unable to round-trip 2 of 2 format strings.\n&#39;    \n&#39;    Unable to parse 1 February 2011 Ð³. 7:30 (format &#39;d MMMM yyyy &#39;Ð³.&#39; H:mm&#39;)\n&#39;    Unable to parse 1 February 2011 Ð³. 07:30 (format &#39;d MMMM yyyy &#39;Ð³.&#39; HH:mm&#39;)\n&#39;    Unable to parse 01 February 2011 Ð³. 7:30 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; H:mm&#39;)\n&#39;    Unable to parse 01 February 2011 Ð³. 07:30 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; HH:mm&#39;)\n&#39;    f: Unable to round-trip 4 of 4 format strings.\n&#39;    \n&#39;    Unable to parse 1 February 2011 Ð³. 7:30:45 (format &#39;d MMMM yyyy &#39;Ð³.&#39; H:mm:ss&#39;)\n&#39;    Unable to parse 1 February 2011 Ð³. 07:30:45 (format &#39;d MMMM yyyy &#39;Ð³.&#39; HH:mm:ss&#39;)\n&#39;    Unable to parse 01 February 2011 Ð³. 7:30:45 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; H:mm:ss&#39;)\n&#39;    Unable to parse 01 February 2011 Ð³. 07:30:45 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; HH:mm:ss&#39;)\n&#39;    F: Unable to round-trip 4 of 4 format strings.\n&#39;    \n&#39;    g: All custom format strings round trip.\n&#39;    \n&#39;    G: All custom format strings round trip.\n&#39;    \n&#39;    m: All custom format strings round trip.\n&#39;    \n&#39;    o: All custom format strings round trip.\n&#39;    \n&#39;    r: All custom format strings round trip.\n&#39;    \n&#39;    s: All custom format strings round trip.\n&#39;    \n&#39;    t: All custom format strings round trip.\n&#39;    \n&#39;    T: All custom format strings round trip.\n&#39;    \n&#39;    u: All custom format strings round trip.\n&#39;    \n&#39;    Unable to parse 1 February 2011 Ð³. 7:30:45 (format &#39;d MMMM yyyy &#39;Ð³.&#39; H:mm:ss&#39;)\n&#39;    Unable to parse 1 February 2011 Ð³. 07:30:45 (format &#39;d MMMM yyyy &#39;Ð³.&#39; HH:mm:ss&#39;)\n&#39;    Unable to parse 01 February 2011 Ð³. 7:30:45 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; H:mm:ss&#39;)\n&#39;    Unable to parse 01 February 2011 Ð³. 07:30:45 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; HH:mm:ss&#39;)\n&#39;    U: Unable to round-trip 4 of 4 format strings.\n&#39;    \n&#39;    y: All custom format strings round trip.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo culture = CultureInfo.CreateSpecificCulture(&quot;ru-RU&quot;);\n      char[] formats = { &#39;d&#39;, &#39;D&#39;, &#39;f&#39;, &#39;F&#39;, &#39;g&#39;, &#39;G&#39;, &#39;m&#39;, &#39;o&#39;, \n                           &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;T&#39;, &#39;u&#39;, &#39;U&#39;, &#39;y&#39; };\n      DateTime date1 = new DateTime(2011, 02, 01, 7, 30, 45, 0);\n      DateTime date2;\n      int total = 0;\n      int noRoundTrip = 0;\n\n      foreach (var fmt in formats) {\n         total = 0; \n         noRoundTrip = 0;\n         foreach (var pattern in culture.DateTimeFormat.GetAllDateTimePatterns(fmt)) {\n            total++;\n            if (! DateTime.TryParse(date1.ToString(pattern), out date2)) {\n               noRoundTrip++;\n               Console.WriteLine(&quot;Unable to parse {0:&quot; + pattern + &quot;} (format &#39;{1}&#39;)&quot;, \n                                 date1, pattern);\n            }             \n         }\n         if (noRoundTrip &gt; 0)\n            Console.WriteLine(&quot;{0}: Unable to round-trip {1} of {2} format strings.\\n&quot;,\n                              fmt, noRoundTrip, total);\n         else\n            Console.WriteLine(&quot;{0}: All custom format strings round trip.\\n&quot;, fmt);\n      }\n   }\n}\n// The example displays the following output:\n//    d: All custom format strings round trip.\n//    \n//    Unable to parse 1 February 2011 Ð³. (format &#39;d MMMM yyyy &#39;Ð³.&#39;&#39;)\n//    Unable to parse 01 February 2011 Ð³. (format &#39;dd MMMM yyyy &#39;Ð³.&#39;&#39;)\n//    D: Unable to round-trip 2 of 2 format strings.\n//    \n//    Unable to parse 1 February 2011 Ð³. 7:30 (format &#39;d MMMM yyyy &#39;Ð³.&#39; H:mm&#39;)\n//    Unable to parse 1 February 2011 Ð³. 07:30 (format &#39;d MMMM yyyy &#39;Ð³.&#39; HH:mm&#39;)\n//    Unable to parse 01 February 2011 Ð³. 7:30 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; H:mm&#39;)\n//    Unable to parse 01 February 2011 Ð³. 07:30 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; HH:mm&#39;)\n//    f: Unable to round-trip 4 of 4 format strings.\n//    \n//    Unable to parse 1 February 2011 Ð³. 7:30:45 (format &#39;d MMMM yyyy &#39;Ð³.&#39; H:mm:ss&#39;)\n//    Unable to parse 1 February 2011 Ð³. 07:30:45 (format &#39;d MMMM yyyy &#39;Ð³.&#39; HH:mm:ss&#39;)\n//    Unable to parse 01 February 2011 Ð³. 7:30:45 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; H:mm:ss&#39;)\n//    Unable to parse 01 February 2011 Ð³. 07:30:45 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; HH:mm:ss&#39;)\n//    F: Unable to round-trip 4 of 4 format strings.\n//    \n//    g: All custom format strings round trip.\n//    \n//    G: All custom format strings round trip.\n//    \n//    m: All custom format strings round trip.\n//    \n//    o: All custom format strings round trip.\n//    \n//    r: All custom format strings round trip.\n//    \n//    s: All custom format strings round trip.\n//    \n//    t: All custom format strings round trip.\n//    \n//    T: All custom format strings round trip.\n//    \n//    u: All custom format strings round trip.\n//    \n//    Unable to parse 1 February 2011 Ð³. 7:30:45 (format &#39;d MMMM yyyy &#39;Ð³.&#39; H:mm:ss&#39;)\n//    Unable to parse 1 February 2011 Ð³. 07:30:45 (format &#39;d MMMM yyyy &#39;Ð³.&#39; HH:mm:ss&#39;)\n//    Unable to parse 01 February 2011 Ð³. 7:30:45 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; H:mm:ss&#39;)\n//    Unable to parse 01 February 2011 Ð³. 07:30:45 (format &#39;dd MMMM yyyy &#39;Ð³.&#39; HH:mm:ss&#39;)\n//    U: Unable to round-trip 4 of 4 format strings.\n//    \n//    y: All custom format strings round trip.\n</code></pre><p> To parse the string representation of a date and time that can be expressed in a number of predefined custom formats, call one of the following methods:  </p>\n<ul>\n<li><p>[DateTime.ParseExact(String,â€‚String&lt;xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;  </p>\n</li>\n<li><p>[DateTimeOffset.ParseExact(String,â€‚String&lt;xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;  </p>\n</li>\n<li><p>[DateTime.TryParseExact(String,â€‚String&lt;xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=fullName&gt;  </p>\n</li>\n<li><p>[DateTimeOffset.TryParseExact(String,â€‚String&lt;xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=fullName&gt;  </p>\n<p>The custom format strings in the array returned by the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_\" data-linktype=\"relative-path\">GetAllDateTimePatterns</a> method depends on the current calendar of the culture for which the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object supplies formatting information. If the calendar changes, the array returned by this method also changes.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the date and time patterns for the current calendar.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Globalization;\npublic ref class SamplesDateTimeFormatInfo\n{\npublic:\n   static void Main()\n   {\n      \n      // Creates a new DateTimeFormatinfo.\n      DateTimeFormatInfo^ myDtfi = gcnew DateTimeFormatInfo;\n      \n      // Gets and prints all the patterns\n      array&lt;String^&gt;^myPatternsArray = myDtfi-&gt;GetAllDateTimePatterns();\n      Console::WriteLine(  &quot;ALL the patterns:&quot; );\n      PrintIndexAndValues( myPatternsArray );\n      \n      // Gets and prints the pattern(s) associated with some of the format characters.\n      myPatternsArray = myDtfi-&gt;GetAllDateTimePatterns( &#39;d&#39; );\n      Console::WriteLine(  &quot;The patterns for &#39;d&#39;:&quot; );\n      PrintIndexAndValues( myPatternsArray );\n      myPatternsArray = myDtfi-&gt;GetAllDateTimePatterns( &#39;D&#39; );\n      Console::WriteLine(  &quot;The patterns for &#39;D&#39;:&quot; );\n      PrintIndexAndValues( myPatternsArray );\n      myPatternsArray = myDtfi-&gt;GetAllDateTimePatterns( &#39;f&#39; );\n      Console::WriteLine(  &quot;The patterns for &#39;f&#39;:&quot; );\n      PrintIndexAndValues( myPatternsArray );\n      myPatternsArray = myDtfi-&gt;GetAllDateTimePatterns( &#39;F&#39; );\n      Console::WriteLine(  &quot;The patterns for &#39;F&#39;:&quot; );\n      PrintIndexAndValues( myPatternsArray );\n      myPatternsArray = myDtfi-&gt;GetAllDateTimePatterns( &#39;r&#39; );\n      Console::WriteLine(  &quot;The patterns for &#39;r&#39;:&quot; );\n      PrintIndexAndValues( myPatternsArray );\n      myPatternsArray = myDtfi-&gt;GetAllDateTimePatterns( &#39;R&#39; );\n      Console::WriteLine(  &quot;The patterns for &#39;R&#39;:&quot; );\n      PrintIndexAndValues( myPatternsArray );\n   }\n\n    public:\n       static void PrintIndexAndValues( array&lt;String^&gt;^myArray )  {\n       int i = 0;\n       for each ( String^ s in myArray )\n           Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, s );\n       Console::WriteLine();\n    }\n};\n\nint main()\n{\n   SamplesDateTimeFormatInfo::Main();\n}\n\n/* \nThis code produces the following output.\n\nALL the patterns:\n        [0]:    MM/dd/yyyy\n        [1]:    dddd, dd MMMM yyyy\n        [2]:    dddd, dd MMMM yyyy HH:mm\n        [3]:    dddd, dd MMMM yyyy hh:mm tt\n        [4]:    dddd, dd MMMM yyyy H:mm\n        [5]:    dddd, dd MMMM yyyy h:mm tt\n        [6]:    dddd, dd MMMM yyyy HH:mm:ss\n        [7]:    MM/dd/yyyy HH:mm\n        [8]:    MM/dd/yyyy hh:mm tt\n        [9]:    MM/dd/yyyy H:mm\n        [10]:   MM/dd/yyyy h:mm tt\n        [11]:   MM/dd/yyyy HH:mm:ss\n        [12]:   MMMM dd\n        [13]:   MMMM dd\n        [14]:   ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n        [15]:   ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n        [16]:   yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n        [17]:   HH:mm\n        [18]:   hh:mm tt\n        [19]:   H:mm\n        [20]:   h:mm tt\n        [21]:   HH:mm:ss\n        [22]:   yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n        [23]:   dddd, dd MMMM yyyy HH:mm:ss\n        [24]:   yyyy MMMM\n        [25]:   yyyy MMMM\n\nThe patterns for &#39;d&#39;:\n        [0]:    MM/dd/yyyy\n\nThe patterns for &#39;D&#39;:\n        [0]:    dddd, dd MMMM yyyy\n\nThe patterns for &#39;f&#39;:\n        [0]:    dddd, dd MMMM yyyy HH:mm\n        [1]:    dddd, dd MMMM yyyy hh:mm tt\n        [2]:    dddd, dd MMMM yyyy H:mm\n        [3]:    dddd, dd MMMM yyyy h:mm tt\n\nThe patterns for &#39;F&#39;:\n        [0]:    dddd, dd MMMM yyyy HH:mm:ss\n\nThe patterns for &#39;r&#39;:\n        [0]:    ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n\nThe patterns for &#39;R&#39;:\n        [0]:    ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1\"> using System;\n using System.Globalization;\n public class SamplesDateTimeFormatInfo  {\n \n    public static void Main()  {\n \n       // Creates a new DateTimeFormatinfo.\n       DateTimeFormatInfo myDtfi = new DateTimeFormatInfo();\n \n       // Gets and prints all the patterns.\n       String[] myPatternsArray = myDtfi.GetAllDateTimePatterns();\n       Console.WriteLine( &quot;ALL the patterns:&quot; );\n       PrintIndexAndValues( myPatternsArray );\n \n       // Gets and prints the pattern(s) associated with some of the format characters.\n       myPatternsArray = myDtfi.GetAllDateTimePatterns(&#39;d&#39;);\n       Console.WriteLine( &quot;The patterns for &#39;d&#39;:&quot; );\n       PrintIndexAndValues( myPatternsArray );\n \n       myPatternsArray = myDtfi.GetAllDateTimePatterns(&#39;D&#39;);\n       Console.WriteLine( &quot;The patterns for &#39;D&#39;:&quot; );\n       PrintIndexAndValues( myPatternsArray );\n \n       myPatternsArray = myDtfi.GetAllDateTimePatterns(&#39;f&#39;);\n       Console.WriteLine( &quot;The patterns for &#39;f&#39;:&quot; );\n       PrintIndexAndValues( myPatternsArray );\n \n       myPatternsArray = myDtfi.GetAllDateTimePatterns(&#39;F&#39;);\n       Console.WriteLine( &quot;The patterns for &#39;F&#39;:&quot; );\n       PrintIndexAndValues( myPatternsArray );\n \n       myPatternsArray = myDtfi.GetAllDateTimePatterns(&#39;r&#39;);\n       Console.WriteLine( &quot;The patterns for &#39;r&#39;:&quot; );\n       PrintIndexAndValues( myPatternsArray );\n \n       myPatternsArray = myDtfi.GetAllDateTimePatterns(&#39;R&#39;);\n       Console.WriteLine( &quot;The patterns for &#39;R&#39;:&quot; );\n       PrintIndexAndValues( myPatternsArray );\n    }\n \n    public static void PrintIndexAndValues( String[] myArray )  {\n       int i = 0;\n       foreach ( String s in myArray )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i++, s );\n       Console.WriteLine();\n    }\n }\n\n\n/* \nThis code produces the following output.\n\nALL the patterns:\n        [0]:    MM/dd/yyyy\n        [1]:    dddd, dd MMMM yyyy\n        [2]:    dddd, dd MMMM yyyy HH:mm\n        [3]:    dddd, dd MMMM yyyy hh:mm tt\n        [4]:    dddd, dd MMMM yyyy H:mm\n        [5]:    dddd, dd MMMM yyyy h:mm tt\n        [6]:    dddd, dd MMMM yyyy HH:mm:ss\n        [7]:    MM/dd/yyyy HH:mm\n        [8]:    MM/dd/yyyy hh:mm tt\n        [9]:    MM/dd/yyyy H:mm\n        [10]:   MM/dd/yyyy h:mm tt\n        [11]:   MM/dd/yyyy HH:mm:ss\n        [12]:   MMMM dd\n        [13]:   MMMM dd\n        [14]:   ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n        [15]:   ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n        [16]:   yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n        [17]:   HH:mm\n        [18]:   hh:mm tt\n        [19]:   H:mm\n        [20]:   h:mm tt\n        [21]:   HH:mm:ss\n        [22]:   yyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n        [23]:   dddd, dd MMMM yyyy HH:mm:ss\n        [24]:   yyyy MMMM\n        [25]:   yyyy MMMM\n\nThe patterns for &#39;d&#39;:\n        [0]:    MM/dd/yyyy\n\nThe patterns for &#39;D&#39;:\n        [0]:    dddd, dd MMMM yyyy\n\nThe patterns for &#39;f&#39;:\n        [0]:    dddd, dd MMMM yyyy HH:mm\n        [1]:    dddd, dd MMMM yyyy hh:mm tt\n        [2]:    dddd, dd MMMM yyyy H:mm\n        [3]:    dddd, dd MMMM yyyy h:mm tt\n\nThe patterns for &#39;F&#39;:\n        [0]:    dddd, dd MMMM yyyy HH:mm:ss\n\nThe patterns for &#39;r&#39;:\n        [0]:    ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n\nThe patterns for &#39;R&#39;:\n        [0]:    ddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesDateTimeFormatInfo    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates a new DateTimeFormatinfo.\n        Dim myDtfi As New DateTimeFormatInfo()\n        \n        &#39; Gets and prints all the patterns.\n        Dim myPatternsArray As String() = myDtfi.GetAllDateTimePatterns()\n        Console.WriteLine(&quot;ALL the patterns:&quot;)\n        PrintIndexAndValues(myPatternsArray)\n        \n        &#39; Gets and prints the pattern(s) associated with some of the format characters.\n        myPatternsArray = myDtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n        Console.WriteLine(&quot;The patterns for &#39;d&#39;:&quot;)\n        PrintIndexAndValues(myPatternsArray)\n        \n        myPatternsArray = myDtfi.GetAllDateTimePatterns(&quot;D&quot;c)\n        Console.WriteLine(&quot;The patterns for &#39;D&#39;:&quot;)\n        PrintIndexAndValues(myPatternsArray)\n        \n        myPatternsArray = myDtfi.GetAllDateTimePatterns(&quot;f&quot;c)\n        Console.WriteLine(&quot;The patterns for &#39;f&#39;:&quot;)\n        PrintIndexAndValues(myPatternsArray)\n        \n        myPatternsArray = myDtfi.GetAllDateTimePatterns(&quot;F&quot;c)\n        Console.WriteLine(&quot;The patterns for &#39;F&#39;:&quot;)\n        PrintIndexAndValues(myPatternsArray)\n        \n        myPatternsArray = myDtfi.GetAllDateTimePatterns(&quot;r&quot;c)\n        Console.WriteLine(&quot;The patterns for &#39;r&#39;:&quot;)\n        PrintIndexAndValues(myPatternsArray)\n        \n        myPatternsArray = myDtfi.GetAllDateTimePatterns(&quot;R&quot;c)\n        Console.WriteLine(&quot;The patterns for &#39;R&#39;:&quot;)\n        PrintIndexAndValues(myPatternsArray)\n    End Sub\n    \n    \n    Public Shared Sub PrintIndexAndValues(myArray() As String)\n        Dim i As Integer = 0\n        Dim s As String\n        For Each s In  myArray\n            Console.WriteLine(ControlChars.Tab + &quot;[{0}]:&quot; + ControlChars.Tab _\n               + &quot;{1}&quot;, i, s)\n            i += 1\n        Next s\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; ALL the patterns:\n&#39; \t[0]:\tMM/dd/yyyy\n&#39; \t[1]:\tdddd, dd MMMM yyyy\n&#39; \t[2]:\tdddd, dd MMMM yyyy HH:mm\n&#39; \t[3]:\tdddd, dd MMMM yyyy hh:mm tt\n&#39; \t[4]:\tdddd, dd MMMM yyyy H:mm\n&#39; \t[5]:\tdddd, dd MMMM yyyy h:mm tt\n&#39; \t[6]:\tdddd, dd MMMM yyyy HH:mm:ss\n&#39; \t[7]:\tMM/dd/yyyy HH:mm\n&#39; \t[8]:\tMM/dd/yyyy hh:mm tt\n&#39; \t[9]:\tMM/dd/yyyy H:mm\n&#39; \t[10]:\tMM/dd/yyyy h:mm tt\n&#39; \t[11]:\tMM/dd/yyyy HH:mm:ss\n&#39; \t[12]:\tMMMM dd\n&#39; \t[13]:\tMMMM dd\n&#39; \t[14]:\tddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n&#39; \t[15]:\tddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n&#39; \t[16]:\tyyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss\n&#39; \t[17]:\tHH:mm\n&#39; \t[18]:\thh:mm tt\n&#39; \t[19]:\tH:mm\n&#39; \t[20]:\th:mm tt\n&#39; \t[21]:\tHH:mm:ss\n&#39; \t[22]:\tyyyy&#39;-&#39;MM&#39;-&#39;dd HH&#39;:&#39;mm&#39;:&#39;ss&#39;Z&#39;\n&#39; \t[23]:\tdddd, dd MMMM yyyy HH:mm:ss\n&#39; \t[24]:\tyyyy MMMM\n&#39; \t[25]:\tyyyy MMMM\n&#39; \n&#39; The patterns for &#39;d&#39;:\n&#39; \t[0]:\tMM/dd/yyyy\n&#39; \n&#39; The patterns for &#39;D&#39;:\n&#39; \t[0]:\tdddd, dd MMMM yyyy\n&#39; \n&#39; The patterns for &#39;f&#39;:\n&#39; \t[0]:\tdddd, dd MMMM yyyy HH:mm\n&#39; \t[1]:\tdddd, dd MMMM yyyy hh:mm tt\n&#39; \t[2]:\tdddd, dd MMMM yyyy H:mm\n&#39; \t[3]:\tdddd, dd MMMM yyyy h:mm tt\n&#39; \n&#39; The patterns for &#39;F&#39;:\n&#39; \t[0]:\tdddd, dd MMMM yyyy HH:mm:ss\n&#39; \n&#39; The patterns for &#39;r&#39;:\n&#39; \t[0]:\tddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n&#39; \n&#39; The patterns for &#39;R&#39;:\n&#39; \t[0]:\tddd, dd MMM yyyy HH&#39;:&#39;mm&#39;:&#39;ss &#39;GMT&#39;\n&#39; \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetDayName_System_DayOfWeek_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetDayName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayName(DayOfWeek)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the culture-specific full name of the specified day of the week based on the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetDayName (DayOfWeek dayofweek);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dayofweek</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The culture-specific full name of the day of the week represented by <code>dayofweek</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>dayofweek</code> is not a valid <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the default invariant <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object, this method returns a string from the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> object.  </p>\n<table>\n<thead>\n<tr>\n<th><code>dayofweek</code></th>\n<th>Return Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sunday</td>\n<td>&quot;Sunday&quot;</td>\n</tr>\n<tr>\n<td>Monday</td>\n<td>&quot;Monday&quot;</td>\n</tr>\n<tr>\n<td>Tuesday</td>\n<td>&quot;Tuesday&quot;</td>\n</tr>\n<tr>\n<td>Wednesday</td>\n<td>&quot;Wednesday&quot;</td>\n</tr>\n<tr>\n<td>Thursday</td>\n<td>&quot;Thursday&quot;</td>\n</tr>\n<tr>\n<td>Friday</td>\n<td>&quot;Friday&quot;</td>\n</tr>\n<tr>\n<td>Saturday</td>\n<td>&quot;Saturday&quot;</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetEra_System_String_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetEra_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEra(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the integer representing the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetEra (string eraName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>eraName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string containing the name of the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The integer representing the era, if <code>eraName</code> is valid; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>eraName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The era name is the name a calendar uses to refer to a period of time reckoned from a fixed point or event. For example, &quot;A.D.&quot; or &quot;C.E.&quot; is the current era in the Gregorian calendar.  </p>\n<p> The comparison with <code>eraName</code> is case-insensitive, for example, &quot;A.D.&quot; is equivalent to &quot;a.d.&quot;.  </p>\n<p> GetEra ignores punctuation in abbreviated era names, only if the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> is selected in <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> and the culture uses &quot;A.D.&quot; as the era name, that is, &quot;A.D.&quot; is equivalent to &quot;AD&quot;.  </p>\n<p> GetEra compares <code>eraName</code> with the full era name returned by <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetEraName_\" data-linktype=\"relative-path\">GetEraName</a> and with the abbreviated era name returned by <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName_\" data-linktype=\"relative-path\">GetAbbreviatedEraName</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows that <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> ignores the punctuation in the era name, only if the calendar is Gregorian and the culture uses the era name &quot;A.D.&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar.GetEra#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Creates strings with punctuation and without.\n      String strADPunc = &quot;A.D.&quot;;\n      String strADNoPunc = &quot;AD&quot;;\n      String strCEPunc = &quot;C.E.&quot;;\n      String strCENoPunc = &quot;CE&quot;;\n\n      // Calls DTFI.GetEra for each culture that uses GregorianCalendar as the default calendar.\n      Console.WriteLine( &quot;            ----- AD -----  ----- CE -----&quot; );\n      Console.WriteLine( &quot;CULTURE     PUNC   NO PUNC  PUNC   NO PUNC  CALENDAR&quot; );\n      foreach ( CultureInfo myCI in CultureInfo.GetCultures( CultureTypes.SpecificCultures ) )  {\n         Console.Write( &quot;{0,-12}&quot;, myCI );\n         Console.Write( &quot;{0,-7}{1,-9}&quot;, myCI.DateTimeFormat.GetEra( strADPunc ), myCI.DateTimeFormat.GetEra( strADNoPunc ) );\n         Console.Write( &quot;{0,-7}{1,-9}&quot;, myCI.DateTimeFormat.GetEra( strCEPunc ), myCI.DateTimeFormat.GetEra( strCENoPunc ) );\n         Console.Write( &quot;{0}&quot;, myCI.Calendar );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\n            ----- AD -----  ----- CE -----\nCULTURE     PUNC   NO PUNC  PUNC   NO PUNC  CALENDAR\nar-SA       -1     -1       -1     -1       System.Globalization.HijriCalendar\nar-IQ       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-EG       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-LY       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-DZ       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-MA       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-TN       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-OM       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-YE       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-SY       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-JO       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-LB       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-KW       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-AE       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-BH       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-QA       1      1        -1     -1       System.Globalization.GregorianCalendar\nbg-BG       1      1        -1     -1       System.Globalization.GregorianCalendar\nca-ES       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nzh-TW       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nzh-CN       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nzh-HK       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nzh-SG       1      1        -1     -1       System.Globalization.GregorianCalendar\nzh-MO       1      1        -1     -1       System.Globalization.GregorianCalendar\ncs-CZ       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nda-DK       1      1        -1     -1       System.Globalization.GregorianCalendar\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar.GetEra#1\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates strings with punctuation and without.\n   String^ strADPunc = &quot;A.D.&quot;;\n   String^ strADNoPunc = &quot;AD&quot;;\n   String^ strCEPunc = &quot;C.E.&quot;;\n   String^ strCENoPunc = &quot;CE&quot;;\n   \n   // Calls DTFI::GetEra for each culture that uses GregorianCalendar as the default calendar.\n   Console::WriteLine( &quot;            ----- AD -----  ----- CE -----&quot; );\n   Console::WriteLine( &quot;CULTURE     PUNC   NO PUNC  PUNC   NO PUNC  CALENDAR&quot; );\n   IEnumerator^ en = CultureInfo::GetCultures( CultureTypes::SpecificCultures )-&gt;GetEnumerator();\n   while ( en-&gt;MoveNext() )\n   {\n      CultureInfo^ myCI = safe_cast&lt;CultureInfo^&gt;(en-&gt;Current);\n      Console::Write( &quot;{0, -12}&quot;, myCI );\n      Console::Write( &quot;{0,-7}{1,-9}&quot;, myCI-&gt;DateTimeFormat-&gt;GetEra( strADPunc ), myCI-&gt;DateTimeFormat-&gt;GetEra( strADNoPunc ) );\n      Console::Write( &quot;{0, -7}{1, -9}&quot;, myCI-&gt;DateTimeFormat-&gt;GetEra( strCEPunc ), myCI-&gt;DateTimeFormat-&gt;GetEra( strCENoPunc ) );\n      Console::Write( &quot;{0}&quot;, myCI-&gt;Calendar );\n      Console::WriteLine();\n   }\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\n            ----- AD -----  ----- CE -----\nCULTURE     PUNC   NO PUNC  PUNC   NO PUNC  CALENDAR\nar-SA       -1     -1       -1     -1       System.Globalization.HijriCalendar\nar-IQ       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-EG       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-LY       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-DZ       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-MA       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-TN       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-OM       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-YE       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-SY       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-JO       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-LB       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-KW       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-AE       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-BH       1      1        -1     -1       System.Globalization.GregorianCalendar\nar-QA       1      1        -1     -1       System.Globalization.GregorianCalendar\nbg-BG       1      1        -1     -1       System.Globalization.GregorianCalendar\nca-ES       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nzh-TW       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nzh-CN       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nzh-HK       1      1        -1     -1       System.Globalization.GregorianCalendar\nzh-SG       1      1        -1     -1       System.Globalization.GregorianCalendar\nzh-MO       1      1        -1     -1       System.Globalization.GregorianCalendar\ncs-CZ       -1     -1       -1     -1       System.Globalization.GregorianCalendar\nda-DK       1      1        -1     -1       System.Globalization.GregorianCalendar\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar.GetEra#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesGregorianCalendar\n\n   Public Shared Sub Main()\n\n      &#39; Creates strings with punctuation and without.\n      Dim strADPunc As [String] = &quot;A.D.&quot;\n      Dim strADNoPunc As [String] = &quot;AD&quot;\n      Dim strCEPunc As [String] = &quot;C.E.&quot;\n      Dim strCENoPunc As [String] = &quot;CE&quot;\n\n      &#39; Calls DTFI.GetEra for each culture that uses GregorianCalendar as the default calendar.\n      Console.WriteLine(&quot;            ----- AD -----  ----- CE -----&quot;)\n      Console.WriteLine(&quot;CULTURE     PUNC   NO PUNC  PUNC   NO PUNC  CALENDAR&quot;)\n      Dim myCI As CultureInfo\n      For Each myCI In  CultureInfo.GetCultures(CultureTypes.SpecificCultures)\n         Console.Write(&quot;{0,-12}&quot;, myCI)\n         Console.Write(&quot;{0,-7}{1,-9}&quot;, myCI.DateTimeFormat.GetEra(strADPunc), myCI.DateTimeFormat.GetEra(strADNoPunc))\n         Console.Write(&quot;{0,-7}{1,-9}&quot;, myCI.DateTimeFormat.GetEra(strCEPunc), myCI.DateTimeFormat.GetEra(strCENoPunc))\n         Console.Write(&quot;{0}&quot;, myCI.Calendar)\n         Console.WriteLine()\n      Next myCI\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesGregorianCalendar\n\n\n&#39;This code produces the following output.  This output has been cropped for brevity.\n&#39;\n&#39;            ----- AD -----  ----- CE -----\n&#39;CULTURE     PUNC   NO PUNC  PUNC   NO PUNC  CALENDAR\n&#39;ar-SA       -1     -1       -1     -1       System.Globalization.HijriCalendar\n&#39;ar-IQ       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-EG       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-LY       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-DZ       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-MA       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-TN       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-OM       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-YE       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-SY       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-JO       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-LB       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-KW       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-AE       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-BH       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ar-QA       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;bg-BG       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;ca-ES       -1     -1       -1     -1       System.Globalization.GregorianCalendar\n&#39;zh-TW       -1     -1       -1     -1       System.Globalization.GregorianCalendar\n&#39;zh-CN       -1     -1       -1     -1       System.Globalization.GregorianCalendar\n&#39;zh-HK       -1     -1       -1     -1       System.Globalization.GregorianCalendar\n&#39;zh-SG       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;zh-MO       1      1        -1     -1       System.Globalization.GregorianCalendar\n&#39;cs-CZ       -1     -1       -1     -1       System.Globalization.GregorianCalendar\n&#39;da-DK       1      1        -1     -1       System.Globalization.GregorianCalendar\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetEraName_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetEraName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEraName(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the string containing the name of the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetEraName (int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The integer representing the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the name of the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> does not represent a valid era in the calendar specified in the <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.Calendar*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The era name is the name a calendar uses to refer to a period of time reckoned from a fixed point or event. For example, &quot;A.D.&quot; or &quot;C.E.&quot; is the current era in the Gregorian calendar.  </p>\n<p> The valid values for <code>era</code> are listed in the <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_Eras_\" data-linktype=\"relative-path\">Eras</a> property of the appropriate class derived from <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a>. For example: <a class=\"xref\" href=\"system.globalization.japanesecalendar#System_Globalization_JapaneseCalendar_Eras_\" data-linktype=\"relative-path\">Eras</a> displays a list of eras that are supported by this implementation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetFormat_System_Type_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFormat(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an object of the specified type that provides a date and time  formatting service.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetFormat (Type formatType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the required formatting service.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The current  object, if <code>formatType</code> is the same as the type of the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a>; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Format(String, IFormatProvider)</code> method supported by the base data types invoke this method when the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is passed as the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter. This method implements <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetInstance_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInstance(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object associated with the specified <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> that gets the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to get <span class=\"xref\">stem.Globalization.DateTimeFormatInfo.CurrentInfo*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object associated with <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of <code>formatProvider</code> using an <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object as the <code>Type</code> parameter. If <code>formatProvider</code> is <code>null</code> or if <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> returns <code>null</code>, this method returns <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>.  </p>\n<p> Your application can get a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object for a specific culture using one of the following methods:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property.  </p>\n</li>\n<li><p>The GetInstance method, where <code>provider</code> is a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object.  </p>\n<p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object can be created only for the invariant culture or for specific cultures, not for neutral cultures.  </p>\n<p>For more information about the invariant culture, specific cultures, and neutral cultures, see the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class description.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetMonthName_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetMonthName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonthName(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the culture-specific full name of the specified month based on the culture associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetMonthName (int month);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 through 13 representing the name of the month to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The culture-specific full name of the month represented by <code>month</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>month</code> is less than 1 or greater than 13.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the default invariant <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object, this method returns a string from the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> object.  </p>\n<table>\n<thead>\n<tr>\n<th><code>month</code></th>\n<th>Return Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>&quot;January&quot;</td>\n</tr>\n<tr>\n<td>2</td>\n<td>&quot;February&quot;</td>\n</tr>\n<tr>\n<td>3</td>\n<td>&quot;March&quot;</td>\n</tr>\n<tr>\n<td>4</td>\n<td>&quot;April&quot;</td>\n</tr>\n<tr>\n<td>5</td>\n<td>&quot;May&quot;</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&quot;June&quot;</td>\n</tr>\n<tr>\n<td>7</td>\n<td>&quot;July&quot;</td>\n</tr>\n<tr>\n<td>8</td>\n<td>&quot;August&quot;</td>\n</tr>\n<tr>\n<td>9</td>\n<td>&quot;September&quot;</td>\n</tr>\n<tr>\n<td>10</td>\n<td>&quot;October&quot;</td>\n</tr>\n<tr>\n<td>11</td>\n<td>&quot;November&quot;</td>\n</tr>\n<tr>\n<td>12</td>\n<td>&quot;December&quot;</td>\n</tr>\n<tr>\n<td>13</td>\n<td>&quot;&quot;</td>\n</tr>\n</tbody>\n</table>\n<p> <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> objects can accommodate calendars with 13 months. For 12-month calendars, the empty string is always returned as the name of the 13th month.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_GetShortestDayName_System_DayOfWeek_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_GetShortestDayName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetShortestDayName(DayOfWeek)</div>        \r\n          </div>\r\n    \r\n            <p>Obtains the shortest abbreviated day name for a specified day of the week associated with the current <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetShortestDayName (DayOfWeek dayOfWeek);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dayOfWeek</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The abbreviated name of the week that corresponds to the <code>dayOfWeek</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>dayOfWeek</code> is not a value in the <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates several methods and properties that specify date and time format patterns, native calendar name, and full and abbreviated month and day names.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.DTFI1#1\">// This code example demonstrates the DateTimeFormatInfo \n// MonthGenitiveNames, AbbreviatedMonthGenitiveNames, \n// ShortestDayNames, and NativeCalendarName properties, and\n// the GetShortestDayName() and SetAllDateTimePatterns() methods.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string[] myDateTimePatterns = new string[] {&quot;MM/dd/yy&quot;, &quot;MM/dd/yyyy&quot;};\n\n// Get the en-US culture.\n    CultureInfo ci = new CultureInfo(&quot;en-US&quot;);\n// Get the DateTimeFormatInfo for the en-US culture.\n    DateTimeFormatInfo dtfi = ci.DateTimeFormat;\n\n// Display the effective culture.\n    Console.WriteLine(&quot;This code example uses the {0} culture.&quot;, ci.Name);\n\n// Display the native calendar name.    \n    Console.WriteLine(&quot;<br>NativeCalendarName...&quot;);\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, dtfi.NativeCalendarName);\n\n// Display month genitive names.\n    Console.WriteLine(&quot;<br>MonthGenitiveNames...&quot;);\n    foreach (string name in dtfi.MonthGenitiveNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display abbreviated month genitive names.\n    Console.WriteLine(&quot;<br>AbbreviatedMonthGenitiveNames...&quot;);\n    foreach (string name in dtfi.AbbreviatedMonthGenitiveNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display shortest day names.\n    Console.WriteLine(&quot;<br>ShortestDayNames...&quot;);\n    foreach (string name in dtfi.ShortestDayNames) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Display shortest day name for a particular day of the week.\n    Console.WriteLine(&quot;<br>GetShortestDayName(DayOfWeek.Sunday)...&quot;);\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, dtfi.GetShortestDayName(DayOfWeek.Sunday));\n\n// Display the initial DateTime format patterns for the &#39;d&#39; format specifier.\n    Console.WriteLine(&quot;<br>Initial DateTime format patterns for the &#39;d&#39; format specifier...&quot;);\n    foreach (string name in dtfi.GetAllDateTimePatterns(&#39;d&#39;)) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n\n// Change the initial DateTime format patterns for the &#39;d&#39; DateTime format specifier.\n    Console.WriteLine(&quot;<br>Change the initial DateTime format patterns for the <br>&quot; +\n                      &quot;&#39;d&#39; format specifier to my format patterns...&quot;);\n    dtfi.SetAllDateTimePatterns(myDateTimePatterns, &#39;d&#39;);\n\n// Display the new DateTime format patterns for the &#39;d&#39; format specifier.\n    Console.WriteLine(&quot;<br>New DateTime format patterns for the &#39;d&#39; format specifier...&quot;);\n    foreach (string name in dtfi.GetAllDateTimePatterns(&#39;d&#39;)) \n    {\n    Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, name);\n    }\n    }\n}\n/*\nThis code example produces the following results:\n\nThis code example uses the en-US culture.\n\nNativeCalendarName...\n&quot;Gregorian Calendar&quot;\n\nMonthGenitiveNames...\n&quot;January&quot;\n&quot;February&quot;\n&quot;March&quot;\n&quot;April&quot;\n&quot;May&quot;\n&quot;June&quot;\n&quot;July&quot;\n&quot;August&quot;\n&quot;September&quot;\n&quot;October&quot;\n&quot;November&quot;\n&quot;December&quot;\n&quot;&quot;\n\nAbbreviatedMonthGenitiveNames...\n&quot;Jan&quot;\n&quot;Feb&quot;\n&quot;Mar&quot;\n&quot;Apr&quot;\n&quot;May&quot;\n&quot;Jun&quot;\n&quot;Jul&quot;\n&quot;Aug&quot;\n&quot;Sep&quot;\n&quot;Oct&quot;\n&quot;Nov&quot;\n&quot;Dec&quot;\n&quot;&quot;\n\nShortestDayNames...\n&quot;Su&quot;\n&quot;Mo&quot;\n&quot;Tu&quot;\n&quot;We&quot;\n&quot;Th&quot;\n&quot;Fr&quot;\n&quot;Sa&quot;\n\nGetShortestDayName(DayOfWeek.Sunday)...\n&quot;Su&quot;\n\nInitial DateTime format patterns for the &#39;d&#39; format specifier...\n&quot;M/d/yyyy&quot;\n&quot;M/d/yy&quot;\n&quot;MM/dd/yy&quot;\n&quot;MM/dd/yyyy&quot;\n&quot;yy/MM/dd&quot;\n&quot;yyyy-MM-dd&quot;\n&quot;dd-MMM-yy&quot;\n\nChange the initial DateTime format patterns for the\n&#39;d&#39; format specifier to my format patterns...\n\nNew DateTime format patterns for the &#39;d&#39; format specifier...\n&quot;MM/dd/yy&quot;\n&quot;MM/dd/yyyy&quot;\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.DTFI1#1\">\n&#39; This code example demonstrates the DateTimeFormatInfo \n&#39; MonthGenitiveNames, AbbreviatedMonthGenitiveNames, \n&#39; ShortestDayNames, and NativeCalendarName properties, and\n&#39; the GetShortestDayName() and SetAllDateTimePatterns() methods.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        Dim myDateTimePatterns() As String = {&quot;MM/dd/yy&quot;, &quot;MM/dd/yyyy&quot;}\n        Dim name As String = &quot;&quot;\n        \n        &#39; Get the en-US culture.\n        Dim ci As New CultureInfo(&quot;en-US&quot;)\n        &#39; Get the DateTimeFormatInfo for the en-US culture.\n        Dim dtfi As DateTimeFormatInfo = ci.DateTimeFormat\n        \n        &#39; Display the effective culture.\n        Console.WriteLine(&quot;This code example uses the {0} culture.&quot;, ci.Name)\n        \n        &#39; Display the native calendar name.    \n        Console.WriteLine(vbCrLf &amp; &quot;NativeCalendarName...&quot;)\n        Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, dtfi.NativeCalendarName)\n        \n        &#39; Display month genitive names.\n        Console.WriteLine(vbCrLf &amp; &quot;MonthGenitiveNames...&quot;)\n        For Each name In dtfi.MonthGenitiveNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display abbreviated month genitive names.\n        Console.WriteLine(vbCrLf &amp; &quot;AbbreviatedMonthGenitiveNames...&quot;)\n        For Each name In dtfi.AbbreviatedMonthGenitiveNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display shortest day names.\n        Console.WriteLine(vbCrLf &amp; &quot;ShortestDayNames...&quot;)\n        For Each name In dtfi.ShortestDayNames\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Display shortest day name for a particular day of the week.\n        Console.WriteLine(vbCrLf &amp; &quot;GetShortestDayName(DayOfWeek.Sunday)...&quot;)\n        Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, dtfi.GetShortestDayName(DayOfWeek.Sunday))\n        \n        &#39; Display the initial DateTime format patterns for the &#39;d&#39; format specifier.\n        Console.WriteLine(vbCrLf &amp; &quot;Initial DateTime format patterns for &quot; &amp; _\n                          &quot;the &#39;d&#39; format specifier...&quot;)\n        For Each name In dtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n        \n        &#39; Change the initial DateTime format patterns for the &#39;d&#39; DateTime format specifier.\n        Console.WriteLine(vbCrLf &amp; &quot;Change the initial DateTime format patterns for the &quot; &amp; _\n                          vbCrLf &amp; &quot;&#39;d&#39; format specifier to my format patterns...&quot;)\n        dtfi.SetAllDateTimePatterns(myDateTimePatterns, &quot;d&quot;c)\n        \n        &#39; Display the new DateTime format patterns for the &#39;d&#39; format specifier.\n        Console.WriteLine(vbCrLf &amp; _\n                          &quot;New DateTime format patterns for the &#39;d&#39; format specifier...&quot;)\n        For Each name In dtfi.GetAllDateTimePatterns(&quot;d&quot;c)\n            Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, name)\n        Next name\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;This code example uses the en-US culture.\n&#39;\n&#39;NativeCalendarName...\n&#39;&quot;Gregorian Calendar&quot;\n&#39;\n&#39;MonthGenitiveNames...\n&#39;&quot;January&quot;\n&#39;&quot;February&quot;\n&#39;&quot;March&quot;\n&#39;&quot;April&quot;\n&#39;&quot;May&quot;\n&#39;&quot;June&quot;\n&#39;&quot;July&quot;\n&#39;&quot;August&quot;\n&#39;&quot;September&quot;\n&#39;&quot;October&quot;\n&#39;&quot;November&quot;\n&#39;&quot;December&quot;\n&#39;&quot;&quot;\n&#39;\n&#39;AbbreviatedMonthGenitiveNames...\n&#39;&quot;Jan&quot;\n&#39;&quot;Feb&quot;\n&#39;&quot;Mar&quot;\n&#39;&quot;Apr&quot;\n&#39;&quot;May&quot;\n&#39;&quot;Jun&quot;\n&#39;&quot;Jul&quot;\n&#39;&quot;Aug&quot;\n&#39;&quot;Sep&quot;\n&#39;&quot;Oct&quot;\n&#39;&quot;Nov&quot;\n&#39;&quot;Dec&quot;\n&#39;&quot;&quot;\n&#39;\n&#39;ShortestDayNames...\n&#39;&quot;Su&quot;\n&#39;&quot;Mo&quot;\n&#39;&quot;Tu&quot;\n&#39;&quot;We&quot;\n&#39;&quot;Th&quot;\n&#39;&quot;Fr&quot;\n&#39;&quot;Sa&quot;\n&#39;\n&#39;GetShortestDayName(DayOfWeek.Sunday)...\n&#39;&quot;Su&quot;\n&#39;\n&#39;Initial DateTime format patterns for the &#39;d&#39; format specifier...\n&#39;&quot;M/d/yyyy&quot;\n&#39;&quot;M/d/yy&quot;\n&#39;&quot;MM/dd/yy&quot;\n&#39;&quot;MM/dd/yyyy&quot;\n&#39;&quot;yy/MM/dd&quot;\n&#39;&quot;yyyy-MM-dd&quot;\n&#39;&quot;dd-MMM-yy&quot;\n&#39;\n&#39;Change the initial DateTime format patterns for the\n&#39;&#39;d&#39; format specifier to my format patterns...\n&#39;\n&#39;New DateTime format patterns for the &#39;d&#39; format specifier...\n&#39;&quot;MM/dd/yy&quot;\n&#39;&quot;MM/dd/yyyy&quot;\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_ReadOnly_System_Globalization_DateTimeFormatInfo_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_ReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnly(DateTimeFormatInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a read-only <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> wrapper.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dtfi</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object to wrap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> wrapper.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>dtfi</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This wrapper prevents any modifications to <code>dtfi</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_DateTimeFormatInfo_SetAllDateTimePatterns_System_String___System_Char_\">\r\n    \r\n            <a id=\"System_Globalization_DateTimeFormatInfo_SetAllDateTimePatterns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAllDateTimePatterns(String[],Char)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the custom date and time format strings that correspond to a specified standard format string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAllDateTimePatterns (string[] patterns, char format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>patterns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of custom format strings.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The standard format string associated with the custom format strings specified in the <code>patterns</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>patterns</code> is <code>null</code> or a zero-length array.  </p>\n<p> -or-  </p>\n<p> <code>format</code> is not a valid standard format string or is a standard format string whose patterns cannot be set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>patterns</code> has an array element whose value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SetAllDateTimePatterns method defines the custom format strings that correspond to a particular standard date and time format string. If a call to a date and time formatting method includes the standard date and time format string specified by <code>format</code>, the method uses the first element in the <code>patterns</code> array to define the format of the resulting string.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> The <code>Parse</code> and <code>TryParse</code> methods do not fully iterate all strings in <code>patterns</code> when parsing the string representation of a date and time. If you require a date and time string to have particular formats in a parsing operation, you should pass the array of valid formats to the [DateTime.ParseExact(String,â€‚String&lt;xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;, [DateTimeOffset.ParseExact(String,â€‚String&lt;xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;, [DateTime.TryParseExact(String,â€‚String&lt;xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=fullName&gt;, or [DateTimeOffset.TryParseExact(String,â€‚String&lt;xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=fullName&gt; method.  </p>\n</div>\n<p> You can define custom format strings that correspond to the &quot;d&quot;, &quot;D&quot;, &quot;t&quot;, &quot;T&quot;, and &quot;y&quot; or &quot;Y&quot; standard date and time format strings. If the value of <code>format</code> is any other standard format string, the SetAllDateTimePatterns method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If your custom date and time format strings include date separators, you should explicitly specify a date separator instead of relying on the parsing or formatting method that replaces the &quot;/&quot; custom format specifier with a particular date separator. For example, to obtain the pattern MM-DD-yyyy, use the pattern &quot;MM-DD-yyyy&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the &quot;en-US&quot; (English - United States) culture and uses it to parse an array of date and time strings using the &quot;Y&quot; standard format string. It then uses the SetAllDateTimePatterns method to associate a new custom format string with the &quot;Y&quot; standard format string, and then attempts to parse the array of date and time strings. Output from the example demonstrates that the new custom format string is used in both the parsing and formatting operations.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Use standard en-US culture.\n      Dim enUS As New CultureInfo(&quot;en-US&quot;)\n      \n      Dim values() As String = { &quot;December 2010&quot;, &quot;December, 2010&quot;,  \n                                 &quot;Dec-2010&quot;, &quot;December-2010&quot; } \n      \n      Console.WriteLine(&quot;Supported Y/y patterns for {0} culture:&quot;, enUS.Name)\n      For Each pattern In enUS.DateTimeFormat.GetAllDateTimePatterns(&quot;Y&quot;c)\n         Console.WriteLine(&quot;   &quot; + pattern)\n      Next \n      Console.WriteLine()\n      \n      &#39; Try to parse each date string using &quot;Y&quot; format specifier.\n      For Each value In values\n         Try\n            Dim dat As Date = Date.ParseExact(value, &quot;Y&quot;, enUS)\n            Console.WriteLine(String.Format(enUS, &quot;   Parsed {0} as {1:Y}&quot;, value, dat))\n         Catch e As FormatException\n            Console.WriteLine(&quot;   Cannot parse {0}&quot;, value)\n         End Try   \n      Next   \n      Console.WriteLine()\n      \n      &#39;Modify supported &quot;Y&quot; format.\n      enUS.DateTimeFormat.SetAllDateTimePatterns( { &quot;MMM-yyyy&quot; } , &quot;Y&quot;c)\n      \n      Console.WriteLine(&quot;New supported Y/y patterns for {0} culture:&quot;, enUS.Name)\n      For Each pattern In enUS.DateTimeFormat.GetAllDateTimePatterns(&quot;Y&quot;c)\n         Console.WriteLine(&quot;   &quot; + pattern)\n      Next \n      Console.WriteLine()\n\n      &#39; Try to parse each date string using &quot;Y&quot; format specifier.\n      For Each value In values\n         Try\n            Dim dat As Date = Date.ParseExact(value, &quot;Y&quot;, enUS)\n            Console.WriteLine(String.Format(enUS, &quot;   Parsed {0} as {1:Y}&quot;, value, dat))\n         Catch e As FormatException\n            Console.WriteLine(&quot;   Cannot parse {0}&quot;, value)\n         End Try   \n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Supported Y/y patterns for en-US culture:\n&#39;          MMMM, yyyy\n&#39;       \n&#39;          Cannot parse December 2010\n&#39;          Parsed December, 2010 as December, 2010\n&#39;          Cannot parse Dec-2010\n&#39;          Cannot parse December-2010\n&#39;       \n&#39;       New supported Y/y patterns for en-US culture:\n&#39;          MMM-yyyy\n&#39;       \n&#39;          Cannot parse December 2010\n&#39;          Cannot parse December, 2010\n&#39;          Parsed Dec-2010 as Dec-2010\n&#39;          Cannot parse December-2010\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Use standard en-US culture.\n      CultureInfo enUS = new CultureInfo(&quot;en-US&quot;);\n      \n      string[] values = { &quot;December 2010&quot;, &quot;December, 2010&quot;,  \n                          &quot;Dec-2010&quot;, &quot;December-2010&quot; }; \n      \n      Console.WriteLine(&quot;Supported Y/y patterns for {0} culture:&quot;, enUS.Name);\n      foreach (var pattern in enUS.DateTimeFormat.GetAllDateTimePatterns(&#39;Y&#39;))\n         Console.WriteLine(&quot;   &quot; + pattern);\n\n      Console.WriteLine();\n      \n      // Try to parse each date string using &quot;Y&quot; format specifier.\n      foreach (var value in values) {\n         try {\n            DateTime dat = DateTime.ParseExact(value, &quot;Y&quot;, enUS);\n            Console.WriteLine(String.Format(enUS, &quot;   Parsed {0} as {1:Y}&quot;, value, dat));\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;   Cannot parse {0}&quot;, value);\n         }   \n      }   \n      Console.WriteLine();\n      \n      //Modify supported &quot;Y&quot; format.\n      enUS.DateTimeFormat.SetAllDateTimePatterns( new string[] { &quot;MMM-yyyy&quot; } , &#39;Y&#39;);\n      \n      Console.WriteLine(&quot;New supported Y/y patterns for {0} culture:&quot;, enUS.Name);\n      foreach (var pattern in enUS.DateTimeFormat.GetAllDateTimePatterns(&#39;Y&#39;))\n         Console.WriteLine(&quot;   &quot; + pattern);\n\n      Console.WriteLine();\n\n      // Try to parse each date string using &quot;Y&quot; format specifier.\n      foreach (var value in values) {\n         try {\n            DateTime dat = DateTime.ParseExact(value, &quot;Y&quot;, enUS);\n            Console.WriteLine(String.Format(enUS, &quot;   Parsed {0} as {1:Y}&quot;, value, dat));\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;   Cannot parse {0}&quot;, value);\n         }   \n      }   \n   }\n}\n// The example displays the following output:\n//       Supported Y/y patterns for en-US culture:\n//          MMMM, yyyy\n//       \n//          Cannot parse December 2010\n//          Parsed December, 2010 as December, 2010\n//          Cannot parse Dec-2010\n//          Cannot parse December-2010\n//       \n//       New supported Y/y patterns for en-US culture:\n//          MMM-yyyy\n//       \n//          Cannot parse December 2010\n//          Cannot parse December, 2010\n//          Parsed Dec-2010 as Dec-2010\n//          Cannot parse December-2010\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.DateTimeFormatInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.DateTimeFormatInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.AMDesignator\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.Calendar\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.CalendarWeekRule\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.Clone\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.CurrentInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.DateSeparator\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.DayNames\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.FirstDayOfWeek\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.FullDateTimePattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetDayName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetEraName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetFormat\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetInstance\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetMonthName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.GetShortestDayName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.InvariantInfo\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.LongDatePattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.LongTimePattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.MonthDayPattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.MonthGenitiveNames\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.MonthNames\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.NativeCalendarName\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.PMDesignator\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.ReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.RFC1123Pattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.ShortDatePattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.ShortestDayNames\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.ShortTimePattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.SortableDateTimePattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.TimeSeparator\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern\">\r\n<meta name=\"APIName\" content=\"System.Globalization.DateTimeFormatInfo.YearMonthPattern\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2802d3d3-72b0-e0ab-52f4-b77dacee6c10\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides culture-specific information about the format of date and time values.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.DateTimeFormatInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.DateTimeFormatInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.DateTimeFormatInfo.yml","open_to_public_contributors":true,"api_name":["System.Globalization.DateTimeFormatInfo","System.Globalization.DateTimeFormatInfo..ctor","System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames","System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames","System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames","System.Globalization.DateTimeFormatInfo.AMDesignator","System.Globalization.DateTimeFormatInfo.Calendar","System.Globalization.DateTimeFormatInfo.CalendarWeekRule","System.Globalization.DateTimeFormatInfo.Clone","System.Globalization.DateTimeFormatInfo.CurrentInfo","System.Globalization.DateTimeFormatInfo.DateSeparator","System.Globalization.DateTimeFormatInfo.DayNames","System.Globalization.DateTimeFormatInfo.FirstDayOfWeek","System.Globalization.DateTimeFormatInfo.FullDateTimePattern","System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName","System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName","System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName","System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns","System.Globalization.DateTimeFormatInfo.GetDayName","System.Globalization.DateTimeFormatInfo.GetEra","System.Globalization.DateTimeFormatInfo.GetEraName","System.Globalization.DateTimeFormatInfo.GetFormat","System.Globalization.DateTimeFormatInfo.GetInstance","System.Globalization.DateTimeFormatInfo.GetMonthName","System.Globalization.DateTimeFormatInfo.GetShortestDayName","System.Globalization.DateTimeFormatInfo.InvariantInfo","System.Globalization.DateTimeFormatInfo.IsReadOnly","System.Globalization.DateTimeFormatInfo.LongDatePattern","System.Globalization.DateTimeFormatInfo.LongTimePattern","System.Globalization.DateTimeFormatInfo.MonthDayPattern","System.Globalization.DateTimeFormatInfo.MonthGenitiveNames","System.Globalization.DateTimeFormatInfo.MonthNames","System.Globalization.DateTimeFormatInfo.NativeCalendarName","System.Globalization.DateTimeFormatInfo.PMDesignator","System.Globalization.DateTimeFormatInfo.ReadOnly","System.Globalization.DateTimeFormatInfo.RFC1123Pattern","System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns","System.Globalization.DateTimeFormatInfo.ShortDatePattern","System.Globalization.DateTimeFormatInfo.ShortestDayNames","System.Globalization.DateTimeFormatInfo.ShortTimePattern","System.Globalization.DateTimeFormatInfo.SortableDateTimePattern","System.Globalization.DateTimeFormatInfo.TimeSeparator","System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern","System.Globalization.DateTimeFormatInfo.YearMonthPattern"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.DateTimeFormatInfo","System::Globalization::DateTimeFormatInfo","System.Globalization.DateTimeFormatInfo.#ctor","System::Globalization::DateTimeFormatInfo::#ctor","System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames","System::Globalization::DateTimeFormatInfo::AbbreviatedDayNames","System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames","System::Globalization::DateTimeFormatInfo::AbbreviatedMonthGenitiveNames","System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames","System::Globalization::DateTimeFormatInfo::AbbreviatedMonthNames","System.Globalization.DateTimeFormatInfo.AMDesignator","System::Globalization::DateTimeFormatInfo::AMDesignator","System.Globalization.DateTimeFormatInfo.Calendar","System::Globalization::DateTimeFormatInfo::Calendar","System.Globalization.DateTimeFormatInfo.CalendarWeekRule","System::Globalization::DateTimeFormatInfo::CalendarWeekRule","System.Globalization.DateTimeFormatInfo.Clone","System::Globalization::DateTimeFormatInfo::Clone","System.Globalization.DateTimeFormatInfo.CurrentInfo","System::Globalization::DateTimeFormatInfo::CurrentInfo","System.Globalization.DateTimeFormatInfo.DateSeparator","System::Globalization::DateTimeFormatInfo::DateSeparator","System.Globalization.DateTimeFormatInfo.DayNames","System::Globalization::DateTimeFormatInfo::DayNames","System.Globalization.DateTimeFormatInfo.FirstDayOfWeek","System::Globalization::DateTimeFormatInfo::FirstDayOfWeek","System.Globalization.DateTimeFormatInfo.FullDateTimePattern","System::Globalization::DateTimeFormatInfo::FullDateTimePattern","System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName","System::Globalization::DateTimeFormatInfo::GetAbbreviatedDayName","System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName","System::Globalization::DateTimeFormatInfo::GetAbbreviatedEraName","System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName","System::Globalization::DateTimeFormatInfo::GetAbbreviatedMonthName","System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns","System::Globalization::DateTimeFormatInfo::GetAllDateTimePatterns","System.Globalization.DateTimeFormatInfo.GetDayName","System::Globalization::DateTimeFormatInfo::GetDayName","System.Globalization.DateTimeFormatInfo.GetEra","System::Globalization::DateTimeFormatInfo::GetEra","System.Globalization.DateTimeFormatInfo.GetEraName","System::Globalization::DateTimeFormatInfo::GetEraName","System.Globalization.DateTimeFormatInfo.GetFormat","System::Globalization::DateTimeFormatInfo::GetFormat","System.Globalization.DateTimeFormatInfo.GetInstance","System::Globalization::DateTimeFormatInfo::GetInstance","System.Globalization.DateTimeFormatInfo.GetMonthName","System::Globalization::DateTimeFormatInfo::GetMonthName","System.Globalization.DateTimeFormatInfo.GetShortestDayName","System::Globalization::DateTimeFormatInfo::GetShortestDayName","System.Globalization.DateTimeFormatInfo.InvariantInfo","System::Globalization::DateTimeFormatInfo::InvariantInfo","System.Globalization.DateTimeFormatInfo.IsReadOnly","System::Globalization::DateTimeFormatInfo::IsReadOnly","System.Globalization.DateTimeFormatInfo.LongDatePattern","System::Globalization::DateTimeFormatInfo::LongDatePattern","System.Globalization.DateTimeFormatInfo.LongTimePattern","System::Globalization::DateTimeFormatInfo::LongTimePattern","System.Globalization.DateTimeFormatInfo.MonthDayPattern","System::Globalization::DateTimeFormatInfo::MonthDayPattern","System.Globalization.DateTimeFormatInfo.MonthGenitiveNames","System::Globalization::DateTimeFormatInfo::MonthGenitiveNames","System.Globalization.DateTimeFormatInfo.MonthNames","System::Globalization::DateTimeFormatInfo::MonthNames","System.Globalization.DateTimeFormatInfo.NativeCalendarName","System::Globalization::DateTimeFormatInfo::NativeCalendarName","System.Globalization.DateTimeFormatInfo.PMDesignator","System::Globalization::DateTimeFormatInfo::PMDesignator","System.Globalization.DateTimeFormatInfo.ReadOnly","System::Globalization::DateTimeFormatInfo::ReadOnly","System.Globalization.DateTimeFormatInfo.RFC1123Pattern","System::Globalization::DateTimeFormatInfo::RFC1123Pattern","System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns","System::Globalization::DateTimeFormatInfo::SetAllDateTimePatterns","System.Globalization.DateTimeFormatInfo.ShortDatePattern","System::Globalization::DateTimeFormatInfo::ShortDatePattern","System.Globalization.DateTimeFormatInfo.ShortestDayNames","System::Globalization::DateTimeFormatInfo::ShortestDayNames","System.Globalization.DateTimeFormatInfo.ShortTimePattern","System::Globalization::DateTimeFormatInfo::ShortTimePattern","System.Globalization.DateTimeFormatInfo.SortableDateTimePattern","System::Globalization::DateTimeFormatInfo::SortableDateTimePattern","System.Globalization.DateTimeFormatInfo.TimeSeparator","System::Globalization::DateTimeFormatInfo::TimeSeparator","System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern","System::Globalization::DateTimeFormatInfo::UniversalSortableDateTimePattern","System.Globalization.DateTimeFormatInfo.YearMonthPattern","System::Globalization::DateTimeFormatInfo::YearMonthPattern"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2802d3d3-72b0-e0ab-52f4-b77dacee6c10","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/DateTimeFormatInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DateTimeFormatInfo class | Microsoft Docs","_op_ogTitle":"DateTimeFormatInfo class","description":"Provides culture-specific information about the format of date and time values.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.DateTimeFormatInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.datetimeformatinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.datetimeformatinfo","fileRelativePath":"System.Globalization.DateTimeFormatInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}