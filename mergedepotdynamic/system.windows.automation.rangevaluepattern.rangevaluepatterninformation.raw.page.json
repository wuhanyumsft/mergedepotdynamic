{"content":"    \r\n    <h1 id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation\">\r\n      <span class=\"lang-csharp\">RangeValuePattern+RangeValuePatternInformation</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to the property values of a <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a> object using its <span class=\"xref\">stem.Windows.Automation.TransformPattern.Current*</span> or <span class=\"xref\">stem.Windows.Automation.TransformPattern.Cached*</span> accessors.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public struct RangeValuePattern.RangeValuePatternInformation</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RangeValuePattern+RangeValuePatternInformation</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that specifies whether the value of a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_LargeChange\" data-linktype=\"self-bookmark\">LargeChange</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the control-specific large-change value which is added to or subtracted from the <span class=\"xref\">stem.Windows.Automation.Provider.IRangeValueProvider.Value*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Maximum\" data-linktype=\"self-bookmark\">Maximum</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum range value supported by the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Minimum\" data-linktype=\"self-bookmark\">Minimum</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the minimum range value supported by the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_SmallChange\" data-linktype=\"self-bookmark\">SmallChange</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the small-change value, unique to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element, which is added to or subtracted from the elements <span class=\"xref\">stem.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current value of the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_IsReadOnly\">\r\n    \r\n            <a id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that specifies whether the value of a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value is read-only; <code>false</code> if it can be modified. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A control should have its <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_IsEnabledProperty\" data-linktype=\"relative-path\">IsEnabledProperty</a> set to <code>true</code> and its <a class=\"xref\" href=\"system.windows.automation.valuepattern#System_Windows_Automation_ValuePattern_IsReadOnlyProperty\" data-linktype=\"relative-path\">IsReadOnlyProperty</a> set to <code>false</code> prior to the creation of a <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> that supports the <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a>control pattern has its value incremented or decremented by the control-specific <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern.rangevaluepatterninformation#System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_LargeChange_\" data-linktype=\"relative-path\">LargeChange</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#103LargeChange\">SetRangeValue(targetControl[0], rangeValuePattern.Current.LargeChange, -1);\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#103LargeChange\">SetRangeValue(targetControl(0), rangeValuePattern.Current.LargeChange, - 1)\n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Sets the range value of the control of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;rangeValue&quot;&gt;\n/// The value (either relative or absolute) to set the control to.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;rangeDirection&quot;&gt;\n/// The value used to specify the direction of adjustment.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetRangeValue(\n    AutomationElement targetControl,\n    double rangeValue,\n    double rangeDirection)\n{\n    if (targetControl == null || rangeValue == 0 || rangeDirection == 0)\n    {\n        throw new ArgumentException(&quot;Argument cannot be null or zero.&quot;);\n    }\n\n    RangeValuePattern rangeValuePattern =\n        GetRangeValuePattern(targetControl);\n\n    if (rangeValuePattern.Current.IsReadOnly)\n    {\n        throw new InvalidOperationException(&quot;Control is read-only.&quot;);\n    }\n\n    rangeValue = rangeValue * Math.Sign(rangeDirection);\n\n    try\n    {\n        if ((rangeValue &lt;= rangeValuePattern.Current.Maximum) ||\n            (rangeValue &gt;= rangeValuePattern.Current.Minimum))\n        {\n            rangeValuePattern.SetValue(rangeValue);\n        }\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // TO DO: Error handling.\n    }\n    catch (ArgumentException)\n    {\n        // TO DO: Error handling.\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#103\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Sets the range value of the control of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeValue&quot;&gt;\n&#39;&#39;&#39; The value (either relative or absolute) to set the control to.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeDirection&quot;&gt;\n&#39;&#39;&#39; The value used to specify the direction of adjustment.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Overloads Sub SetRangeValue( _\nByVal targetControl As AutomationElement, _\nByVal rangeValue As Double, ByVal rangeDirection As Double)\n    If targetControl Is Nothing OrElse _\n    rangeValue = 0 OrElse rangeDirection = 0 Then\n        Throw New ArgumentException(&quot;Argument cannot be null or zero.&quot;)\n    End If\n\n    Dim rangeValuePattern As RangeValuePattern = _\n    GetRangeValuePattern(targetControl)\n\n    If rangeValuePattern.Current.IsReadOnly Then\n        Throw New InvalidOperationException(&quot;Control is read-only.&quot;)\n    End If\n\n    rangeValue = rangeValue * Math.Sign(rangeDirection)\n\n    Try\n        If rangeValue &lt;= rangeValuePattern.Current.Maximum OrElse _\n        rangeValue &gt;= rangeValuePattern.Current.Minimum Then\n            rangeValuePattern.SetValue(rangeValue)\n        End If\n    Catch exc As ArgumentOutOfRangeException\n        &#39; TO DO: Error handling.\n    Catch exc As ArgumentException\n        &#39; TO DO: Error handling.\n    End Try\n\nEnd Sub &#39;SetRangeValue\n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a RangeValuePattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A RangeValuePattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate RangeValuePattern GetRangeValuePattern(\n    AutomationElement targetControl)\n{\n    RangeValuePattern rangeValuePattern = null;\n\n    try\n    {\n        rangeValuePattern =\n            targetControl.GetCurrentPattern(\n            RangeValuePattern.Pattern)\n            as RangeValuePattern;\n    }\n    // Object doesn&#39;t support the \n    // RangeValuePattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return rangeValuePattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a RangeValuePattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A RangeValuePattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetRangeValuePattern( _\nByVal targetControl As AutomationElement) As RangeValuePattern\n    Dim rangeValuePattern As RangeValuePattern = Nothing\n\n    Try\n        rangeValuePattern = DirectCast( _\n        targetControl.GetCurrentPattern(rangeValuePattern.Pattern), _\n        RangeValuePattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; RangeValuePattern control pattern\n        Return Nothing\n    End Try\n\n    Return rangeValuePattern\n\nEnd Function &#39;GetRangeValuePattern    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_LargeChange\">\r\n    \r\n            <a id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_LargeChange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LargeChange</div>        \r\n          </div>\r\n    \r\n            <p>Gets the control-specific large-change value which is added to or subtracted from the <span class=\"xref\">stem.Windows.Automation.Provider.IRangeValueProvider.Value*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double LargeChange { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The large-change value or <code>null</code> if the element does not support LargeChange. The default value is 0.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> that supports the <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a>control pattern has its value incremented or decremented by the control-specific LargeChange value.  </p>\n<pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#103LargeChange\">SetRangeValue(targetControl[0], rangeValuePattern.Current.LargeChange, -1);\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#103LargeChange\">SetRangeValue(targetControl(0), rangeValuePattern.Current.LargeChange, - 1)\n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Sets the range value of the control of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;rangeValue&quot;&gt;\n/// The value (either relative or absolute) to set the control to.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;rangeDirection&quot;&gt;\n/// The value used to specify the direction of adjustment.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetRangeValue(\n    AutomationElement targetControl,\n    double rangeValue,\n    double rangeDirection)\n{\n    if (targetControl == null || rangeValue == 0 || rangeDirection == 0)\n    {\n        throw new ArgumentException(&quot;Argument cannot be null or zero.&quot;);\n    }\n\n    RangeValuePattern rangeValuePattern =\n        GetRangeValuePattern(targetControl);\n\n    if (rangeValuePattern.Current.IsReadOnly)\n    {\n        throw new InvalidOperationException(&quot;Control is read-only.&quot;);\n    }\n\n    rangeValue = rangeValue * Math.Sign(rangeDirection);\n\n    try\n    {\n        if ((rangeValue &lt;= rangeValuePattern.Current.Maximum) ||\n            (rangeValue &gt;= rangeValuePattern.Current.Minimum))\n        {\n            rangeValuePattern.SetValue(rangeValue);\n        }\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // TO DO: Error handling.\n    }\n    catch (ArgumentException)\n    {\n        // TO DO: Error handling.\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#103\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Sets the range value of the control of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeValue&quot;&gt;\n&#39;&#39;&#39; The value (either relative or absolute) to set the control to.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeDirection&quot;&gt;\n&#39;&#39;&#39; The value used to specify the direction of adjustment.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Overloads Sub SetRangeValue( _\nByVal targetControl As AutomationElement, _\nByVal rangeValue As Double, ByVal rangeDirection As Double)\n    If targetControl Is Nothing OrElse _\n    rangeValue = 0 OrElse rangeDirection = 0 Then\n        Throw New ArgumentException(&quot;Argument cannot be null or zero.&quot;)\n    End If\n\n    Dim rangeValuePattern As RangeValuePattern = _\n    GetRangeValuePattern(targetControl)\n\n    If rangeValuePattern.Current.IsReadOnly Then\n        Throw New InvalidOperationException(&quot;Control is read-only.&quot;)\n    End If\n\n    rangeValue = rangeValue * Math.Sign(rangeDirection)\n\n    Try\n        If rangeValue &lt;= rangeValuePattern.Current.Maximum OrElse _\n        rangeValue &gt;= rangeValuePattern.Current.Minimum Then\n            rangeValuePattern.SetValue(rangeValue)\n        End If\n    Catch exc As ArgumentOutOfRangeException\n        &#39; TO DO: Error handling.\n    Catch exc As ArgumentException\n        &#39; TO DO: Error handling.\n    End Try\n\nEnd Sub &#39;SetRangeValue\n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a RangeValuePattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A RangeValuePattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate RangeValuePattern GetRangeValuePattern(\n    AutomationElement targetControl)\n{\n    RangeValuePattern rangeValuePattern = null;\n\n    try\n    {\n        rangeValuePattern =\n            targetControl.GetCurrentPattern(\n            RangeValuePattern.Pattern)\n            as RangeValuePattern;\n    }\n    // Object doesn&#39;t support the \n    // RangeValuePattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return rangeValuePattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a RangeValuePattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A RangeValuePattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetRangeValuePattern( _\nByVal targetControl As AutomationElement) As RangeValuePattern\n    Dim rangeValuePattern As RangeValuePattern = Nothing\n\n    Try\n        rangeValuePattern = DirectCast( _\n        targetControl.GetCurrentPattern(rangeValuePattern.Pattern), _\n        RangeValuePattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; RangeValuePattern control pattern\n        Return Nothing\n    End Try\n\n    Return rangeValuePattern\n\nEnd Function &#39;GetRangeValuePattern    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Maximum\">\r\n    \r\n            <a id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Maximum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Maximum</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum range value supported by the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Maximum { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The maximum value supported by the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element or <code>null</code> if the element does not support Maximum. The default value is 0.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> that supports the <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a>control pattern has its value set to the control-specific maximum value.  </p>\n<pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#104Maximum\">SetRangeValue(targetControl[0], rangeValuePattern.Current.Maximum);\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#104Maximum\">    SetRangeValue(targetControl(0), rangeValuePattern.Current.Maximum)\n\nEnd Sub &#39;New\n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#104\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Sets the range value of the control of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;rangeValue&quot;&gt;\n/// The value (either relative or absolute) to set the control to.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetRangeValue(\n    AutomationElement targetControl,\n    double rangeValue)\n{\n    if (targetControl == null)\n    {\n        throw new ArgumentException(&quot;Argument cannot be null.&quot;);\n    }\n\n    RangeValuePattern rangeValuePattern =\n        GetRangeValuePattern(targetControl);\n\n    if (rangeValuePattern.Current.IsReadOnly)\n    {\n        throw new InvalidOperationException(&quot;Control is read-only.&quot;);\n    }\n\n    try\n    {\n        rangeValuePattern.SetValue(rangeValue);\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // TO DO: Error handling.\n    }\n    catch (ArgumentException)\n    {\n        // TO DO: Error handling.\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#104\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Sets the range value of the control of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeValue&quot;&gt;\n&#39;&#39;&#39; The value (either relative or absolute) to set the control to.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Overloads Sub SetRangeValue( _\nByVal targetControl As AutomationElement, ByVal rangeValue As Double)\n    If targetControl Is Nothing Then\n        Throw New ArgumentException(&quot;Argument cannot be null.&quot;)\n    End If\n\n    Dim rangeValuePattern As RangeValuePattern = _\n    GetRangeValuePattern(targetControl)\n\n    If rangeValuePattern.Current.IsReadOnly Then\n        Throw New InvalidOperationException(&quot;Control is read-only.&quot;)\n    End If\n\n    Try\n        rangeValuePattern.SetValue(rangeValue)\n    Catch exc As ArgumentOutOfRangeException\n        &#39; TO DO: Error handling.\n    Catch exc As ArgumentException\n        &#39; TO DO: Error handling.\n    End Try\n\nEnd Sub &#39;SetRangeValue \n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a RangeValuePattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A RangeValuePattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate RangeValuePattern GetRangeValuePattern(\n    AutomationElement targetControl)\n{\n    RangeValuePattern rangeValuePattern = null;\n\n    try\n    {\n        rangeValuePattern =\n            targetControl.GetCurrentPattern(\n            RangeValuePattern.Pattern)\n            as RangeValuePattern;\n    }\n    // Object doesn&#39;t support the \n    // RangeValuePattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return rangeValuePattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a RangeValuePattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A RangeValuePattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetRangeValuePattern( _\nByVal targetControl As AutomationElement) As RangeValuePattern\n    Dim rangeValuePattern As RangeValuePattern = Nothing\n\n    Try\n        rangeValuePattern = DirectCast( _\n        targetControl.GetCurrentPattern(rangeValuePattern.Pattern), _\n        RangeValuePattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; RangeValuePattern control pattern\n        Return Nothing\n    End Try\n\n    Return rangeValuePattern\n\nEnd Function &#39;GetRangeValuePattern    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Minimum\">\r\n    \r\n            <a id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Minimum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Minimum</div>        \r\n          </div>\r\n    \r\n            <p>Gets the minimum range value supported by the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Minimum { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The minimum value supported by the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element or <code>null</code> if the element does not support Minimum. The default value is 0.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> that supports the <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a>control pattern has its value set to the control-specific minimum value.  </p>\n<pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#104Minimum\">SetRangeValue(targetControl[0], rangeValuePattern.Current.Minimum);\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#104Minimum\">SetRangeValue(targetControl(0), rangeValuePattern.Current.Minimum)\n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#104\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Sets the range value of the control of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;rangeValue&quot;&gt;\n/// The value (either relative or absolute) to set the control to.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetRangeValue(\n    AutomationElement targetControl,\n    double rangeValue)\n{\n    if (targetControl == null)\n    {\n        throw new ArgumentException(&quot;Argument cannot be null.&quot;);\n    }\n\n    RangeValuePattern rangeValuePattern =\n        GetRangeValuePattern(targetControl);\n\n    if (rangeValuePattern.Current.IsReadOnly)\n    {\n        throw new InvalidOperationException(&quot;Control is read-only.&quot;);\n    }\n\n    try\n    {\n        rangeValuePattern.SetValue(rangeValue);\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // TO DO: Error handling.\n    }\n    catch (ArgumentException)\n    {\n        // TO DO: Error handling.\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#104\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Sets the range value of the control of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeValue&quot;&gt;\n&#39;&#39;&#39; The value (either relative or absolute) to set the control to.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Overloads Sub SetRangeValue( _\nByVal targetControl As AutomationElement, ByVal rangeValue As Double)\n    If targetControl Is Nothing Then\n        Throw New ArgumentException(&quot;Argument cannot be null.&quot;)\n    End If\n\n    Dim rangeValuePattern As RangeValuePattern = _\n    GetRangeValuePattern(targetControl)\n\n    If rangeValuePattern.Current.IsReadOnly Then\n        Throw New InvalidOperationException(&quot;Control is read-only.&quot;)\n    End If\n\n    Try\n        rangeValuePattern.SetValue(rangeValue)\n    Catch exc As ArgumentOutOfRangeException\n        &#39; TO DO: Error handling.\n    Catch exc As ArgumentException\n        &#39; TO DO: Error handling.\n    End Try\n\nEnd Sub &#39;SetRangeValue \n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a RangeValuePattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A RangeValuePattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate RangeValuePattern GetRangeValuePattern(\n    AutomationElement targetControl)\n{\n    RangeValuePattern rangeValuePattern = null;\n\n    try\n    {\n        rangeValuePattern =\n            targetControl.GetCurrentPattern(\n            RangeValuePattern.Pattern)\n            as RangeValuePattern;\n    }\n    // Object doesn&#39;t support the \n    // RangeValuePattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return rangeValuePattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a RangeValuePattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A RangeValuePattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetRangeValuePattern( _\nByVal targetControl As AutomationElement) As RangeValuePattern\n    Dim rangeValuePattern As RangeValuePattern = Nothing\n\n    Try\n        rangeValuePattern = DirectCast( _\n        targetControl.GetCurrentPattern(rangeValuePattern.Pattern), _\n        RangeValuePattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; RangeValuePattern control pattern\n        Return Nothing\n    End Try\n\n    Return rangeValuePattern\n\nEnd Function &#39;GetRangeValuePattern    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_SmallChange\">\r\n    \r\n            <a id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_SmallChange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SmallChange</div>        \r\n          </div>\r\n    \r\n            <p>Gets the small-change value, unique to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element, which is added to or subtracted from the elements <span class=\"xref\">stem.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double SmallChange { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The small-change value unique to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element or <code>null</code> if the element does not support SmallChange. The default value is 0.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> that supports the <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a>control pattern has its value incremented or decremented by the control-specific SmallChange value.  </p>\n<pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#103SmallChange\">SetRangeValue(targetControl[0], rangeValuePattern.Current.SmallChange, 1);\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#103SmallChange\">SetRangeValue(targetControl(0), rangeValuePattern.Current.SmallChange, 1)\n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Sets the range value of the control of interest.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;rangeValue&quot;&gt;\n/// The value (either relative or absolute) to set the control to.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;rangeDirection&quot;&gt;\n/// The value used to specify the direction of adjustment.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetRangeValue(\n    AutomationElement targetControl,\n    double rangeValue,\n    double rangeDirection)\n{\n    if (targetControl == null || rangeValue == 0 || rangeDirection == 0)\n    {\n        throw new ArgumentException(&quot;Argument cannot be null or zero.&quot;);\n    }\n\n    RangeValuePattern rangeValuePattern =\n        GetRangeValuePattern(targetControl);\n\n    if (rangeValuePattern.Current.IsReadOnly)\n    {\n        throw new InvalidOperationException(&quot;Control is read-only.&quot;);\n    }\n\n    rangeValue = rangeValue * Math.Sign(rangeDirection);\n\n    try\n    {\n        if ((rangeValue &lt;= rangeValuePattern.Current.Maximum) ||\n            (rangeValue &gt;= rangeValuePattern.Current.Minimum))\n        {\n            rangeValuePattern.SetValue(rangeValue);\n        }\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // TO DO: Error handling.\n    }\n    catch (ArgumentException)\n    {\n        // TO DO: Error handling.\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#103\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Sets the range value of the control of interest.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeValue&quot;&gt;\n&#39;&#39;&#39; The value (either relative or absolute) to set the control to.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeDirection&quot;&gt;\n&#39;&#39;&#39; The value used to specify the direction of adjustment.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Overloads Sub SetRangeValue( _\nByVal targetControl As AutomationElement, _\nByVal rangeValue As Double, ByVal rangeDirection As Double)\n    If targetControl Is Nothing OrElse _\n    rangeValue = 0 OrElse rangeDirection = 0 Then\n        Throw New ArgumentException(&quot;Argument cannot be null or zero.&quot;)\n    End If\n\n    Dim rangeValuePattern As RangeValuePattern = _\n    GetRangeValuePattern(targetControl)\n\n    If rangeValuePattern.Current.IsReadOnly Then\n        Throw New InvalidOperationException(&quot;Control is read-only.&quot;)\n    End If\n\n    rangeValue = rangeValue * Math.Sign(rangeDirection)\n\n    Try\n        If rangeValue &lt;= rangeValuePattern.Current.Maximum OrElse _\n        rangeValue &gt;= rangeValuePattern.Current.Minimum Then\n            rangeValuePattern.SetValue(rangeValue)\n        End If\n    Catch exc As ArgumentOutOfRangeException\n        &#39; TO DO: Error handling.\n    Catch exc As ArgumentException\n        &#39; TO DO: Error handling.\n    End Try\n\nEnd Sub &#39;SetRangeValue\n</code></pre><pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a RangeValuePattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A RangeValuePattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate RangeValuePattern GetRangeValuePattern(\n    AutomationElement targetControl)\n{\n    RangeValuePattern rangeValuePattern = null;\n\n    try\n    {\n        rangeValuePattern =\n            targetControl.GetCurrentPattern(\n            RangeValuePattern.Pattern)\n            as RangeValuePattern;\n    }\n    // Object doesn&#39;t support the \n    // RangeValuePattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return rangeValuePattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a RangeValuePattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A RangeValuePattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetRangeValuePattern( _\nByVal targetControl As AutomationElement) As RangeValuePattern\n    Dim rangeValuePattern As RangeValuePattern = Nothing\n\n    Try\n        rangeValuePattern = DirectCast( _\n        targetControl.GetCurrentPattern(rangeValuePattern.Pattern), _\n        RangeValuePattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; RangeValuePattern control pattern\n        Return Nothing\n    End Try\n\n    Return rangeValuePattern\n\nEnd Function &#39;GetRangeValuePattern    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Value\">\r\n    \r\n            <a id=\"System_Windows_Automation_RangeValuePattern_RangeValuePatternInformation_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current value of the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Value { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The current value of the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element or <code>null</code> if the element does not support Value. The default value is 0.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, a <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a> object obtained from a target control is passed into a function that retrieves the current <a class=\"xref\" href=\"system.windows.automation.rangevaluepattern\" data-linktype=\"relative-path\">RangeValuePattern</a> property values.  </p>\n<pre><code class=\"lang-cs\" name=\"UIARangeValuePattern_snip#102\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Gets the current property values from target.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;rangeValuePattern&quot;&gt;\n/// A RangeValuePattern control pattern obtained from \n/// an automation element representing a target control.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;automationProperty&quot;&gt;\n/// The automation property of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate object GetRangeValueProperty(\n    RangeValuePattern rangeValuePattern,\n    AutomationProperty automationProperty)\n{\n    if (rangeValuePattern == null || automationProperty == null)\n    {\n        throw new ArgumentException(&quot;Argument cannot be null.&quot;);\n    }\n\n    if (automationProperty.Id ==\n        RangeValuePattern.MinimumProperty.Id)\n    {\n        return rangeValuePattern.Current.Minimum;\n    }\n    if (automationProperty.Id ==\n        RangeValuePattern.MaximumProperty.Id)\n    {\n        return rangeValuePattern.Current.Maximum;\n    }\n    if (automationProperty.Id ==\n        RangeValuePattern.SmallChangeProperty.Id)\n    {\n        return rangeValuePattern.Current.SmallChange;\n    }\n    if (automationProperty.Id ==\n        RangeValuePattern.LargeChangeProperty.Id)\n    {\n        return rangeValuePattern.Current.LargeChange;\n    }\n    if (automationProperty.Id ==\n        RangeValuePattern.ValueProperty.Id)\n    {\n        return rangeValuePattern.Current.Value;\n    }\n    return null;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIARangeValuePattern_snip#102\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Gets the current property values from target.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;rangeValuePattern&quot;&gt;\n&#39;&#39;&#39; A RangeValuePattern control pattern obtained from \n&#39;&#39;&#39; an automation element representing a target control.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;automationProperty&quot;&gt;\n&#39;&#39;&#39; The automation property of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetRangeValueProperty( _\nByVal rangeValuePattern As RangeValuePattern, _\nByVal automationProperty As AutomationProperty) As Object\n    If (rangeValuePattern Is Nothing Or _\n    automationProperty Is Nothing) Then\n        Throw New ArgumentException(&quot;Argument cannot be null.&quot;)\n    End If\n\n    If automationProperty.Id = _\n    rangeValuePattern.MinimumProperty.Id Then\n        Return rangeValuePattern.Current.Minimum\n    End If\n    If automationProperty.Id = _\n    rangeValuePattern.MaximumProperty.Id Then\n        Return rangeValuePattern.Current.Maximum\n    End If\n    If automationProperty.Id = _\n    rangeValuePattern.SmallChangeProperty.Id Then\n        Return rangeValuePattern.Current.SmallChange\n    End If\n    If automationProperty.Id = _\n    rangeValuePattern.LargeChangeProperty.Id Then\n        Return rangeValuePattern.Current.LargeChange\n    End If\n    If automationProperty.Id = _\n    rangeValuePattern.ValueProperty.Id Then\n        Return rangeValuePattern.Current.Value\n    End If\n    Return Nothing\n\nEnd Function &#39;GetRangeValueProperty    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.LargeChange\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.Maximum\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.Minimum\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.SmallChange\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.Value\">\r\n<meta name=\"APILocation\" content=\"UIAutomationClient.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a4d7b554-e4f5-6f47-4648-863e7c83493a\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Windows.Automation\\RangeValuePattern+RangeValuePatternInformation.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to the property values of a  object using its  or  accessors.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Automation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.yml","open_to_public_contributors":true,"api_name":["System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation","System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.IsReadOnly","System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.LargeChange","System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.Maximum","System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.Minimum","System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.SmallChange","System.Windows.Automation.RangeValuePattern+RangeValuePatternInformation.Value"],"api_location":["UIAutomationClient.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation","System::Windows::Automation::RangeValuePattern::RangeValuePatternInformation","System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.IsReadOnly","System::Windows::Automation::RangeValuePattern::RangeValuePatternInformation::IsReadOnly","System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.LargeChange","System::Windows::Automation::RangeValuePattern::RangeValuePatternInformation::LargeChange","System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Maximum","System::Windows::Automation::RangeValuePattern::RangeValuePatternInformation::Maximum","System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Minimum","System::Windows::Automation::RangeValuePattern::RangeValuePatternInformation::Minimum","System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.SmallChange","System::Windows::Automation::RangeValuePattern::RangeValuePatternInformation::SmallChange","System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value","System::Windows::Automation::RangeValuePattern::RangeValuePatternInformation::Value"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a4d7b554-e4f5-6f47-4648-863e7c83493a","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Windows.Automation\\RangeValuePattern+RangeValuePatternInformation.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Automation/RangeValuePattern+RangeValuePatternInformation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RangeValuePattern+RangeValuePatternInformation struct | Microsoft Docs","_op_ogTitle":"RangeValuePattern+RangeValuePatternInformation struct","description":"Provides access to the property values of a  object using its  or  accessors.\n","toc_asset_id":"_splitted/System.Windows.Automation/toc.json","toc_rel":"_splitted/System.Windows.Automation/toc.json","source_url":"","ms.assetid":"System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.rangevaluepattern.rangevaluepatterninformation","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.rangevaluepattern.rangevaluepatterninformation","fileRelativePath":"System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.html"},"themesRelativePathToOutputRoot":"_themes/"}