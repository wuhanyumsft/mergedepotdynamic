{"content":"    \r\n    <h1 id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs\">\r\n      <span class=\"lang-csharp\">DataGridViewCellFormattingEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class DataGridViewCellFormattingEventArgs : System.Windows.Forms.ConvertEventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.converteventargs\" data-linktype=\"relative-path\">System.Windows.Forms.ConvertEventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataGridViewCellFormattingEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_DesiredType\" data-linktype=\"relative-path\">DesiredType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value\" data-linktype=\"relative-path\">Value</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event to customize the conversion of a cell value into a format suitable for display or to customize the appearance of a cell depending on its state or value.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event occurs every time each cell is painted, so you should avoid lengthy processing when handling this event. This event also occurs when the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_FormattedValue_\" data-linktype=\"relative-path\">FormattedValue</a> is retrieved or its <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_GetFormattedValue_\" data-linktype=\"relative-path\">GetFormattedValue</a> method is called.  </p>\n<p> When you handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event, the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> property is initialized with the cell value. If you provide custom conversion from the cell value to the display value, set the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> property to the converted value, ensuring that the new value is of the type specified by the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_FormattedValueType_\" data-linktype=\"relative-path\">FormattedValueType</a> property. To indicate that no further value formatting is necessary, set the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied_\" data-linktype=\"relative-path\">FormattingApplied</a> property to <code>true</code>.  </p>\n<p> When the event handler completes, if the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> is <code>null</code> or is not of the correct type, or the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied_\" data-linktype=\"relative-path\">FormattingApplied</a> property is <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> is formatted using the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_DataSourceNullValue_\" data-linktype=\"relative-path\">DataSourceNullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> properties of the cell style returned by the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_CellStyle_\" data-linktype=\"relative-path\">CellStyle</a> property, which is initialized using the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_InheritedStyle_\" data-linktype=\"relative-path\">InheritedStyle</a> property.  </p>\n<p> Regardless of the value of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied_\" data-linktype=\"relative-path\">FormattingApplied</a> property, the display properties of the object returned by the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_CellStyle_\" data-linktype=\"relative-path\">CellStyle</a> property are used to render the cell.  </p>\n<p> For more information about custom formatting using the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event, see <a href=\"../Topic/How%20to:%20Customize%20Data%20Formatting%20in%20the%20Windows%20Forms%20DataGridView%20Control.md\" data-linktype=\"relative-path\">How to: Customize Data Formatting in the Windows Forms DataGridView Control</a>.  </p>\n<p> To avoid performance penalties when handling this event, access the cell through the parameters of the event handler rather than accessing the cell directly.  </p>\n<p> To customize the conversion of a formatted, user-specified value into an actual cell value, handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">CellParsing</a> event.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellFormattingEventArgs__ctor_System_Int32_System_Int32_System_Object_System_Type_System_Windows_Forms_DataGridViewCellStyle_\" data-linktype=\"self-bookmark\">DataGridViewCellFormattingEventArgs(Int32,Int32,Object,Type,DataGridViewCellStyle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs\" data-linktype=\"relative-path\">DataGridViewCellFormattingEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellFormattingEventArgs_CellStyle\" data-linktype=\"self-bookmark\">CellStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the style of the cell that is being formatted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellFormattingEventArgs_ColumnIndex\" data-linktype=\"self-bookmark\">ColumnIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the column index of the cell that is being formatted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied\" data-linktype=\"self-bookmark\">FormattingApplied</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the cell value has been successfully formatted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellFormattingEventArgs_RowIndex\" data-linktype=\"self-bookmark\">RowIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the row index of the cell that is being formatted.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs__ctor_System_Int32_System_Int32_System_Object_System_Type_System_Windows_Forms_DataGridViewCellStyle_\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataGridViewCellFormattingEventArgs(Int32,Int32,Object,Type,DataGridViewCellStyle)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs\" data-linktype=\"relative-path\">DataGridViewCellFormattingEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataGridViewCellFormattingEventArgs (int columnIndex, int rowIndex, object value, Type desiredType, System.Windows.Forms.DataGridViewCellStyle cellStyle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>columnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The column index of the cell that caused the event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The row index of the cell that caused the event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cell&#39;s contents.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>desiredType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to convert <code>value</code> to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cellStyle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle\" data-linktype=\"relative-path\">DataGridViewCellStyle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The style of the cell that caused the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>columnIndex</code> is less than -1  </p>\n<p> -or-  </p>\n<p> <code>rowIndex</code> is less than -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>desiredType</code> parameter represents the type that the <code>value</code> parameter should be converted to, and <code>desiredType</code> is assigned the cell&#39;s <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_FormattedValueType_\" data-linktype=\"relative-path\">FormattedValueType</a> property. For example, if a cell is formatting picture names as bitmaps, <code>value</code> is the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the picture name, and <code>desiredType</code> is a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the <a class=\"xref\" href=\"system.drawing.bitmap\" data-linktype=\"relative-path\">Bitmap</a> type.  </p>\n<p> If the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event handler does not set the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> property to a type that can be displayed by the cell, the cell contents will be formatted using the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use a <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs\" data-linktype=\"relative-path\">DataGridViewCellFormattingEventArgs</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.GridViewUnbound#1\">    Private Sub dataGridView1_CellFormatting(ByVal sender As Object, _\n        ByVal e As DataGridViewCellFormattingEventArgs) _\n        Handles dataGridView1.CellFormatting\n        &#39; If the column is the Artist column, check the\n        &#39; value.\n        If Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Artist&quot; Then\n            If e.Value IsNot Nothing Then\n\n                &#39; Check for the string &quot;pink&quot; in the cell.\n                Dim stringValue As String = _\n                CType(e.Value, String)\n                stringValue = stringValue.ToLower()\n                If ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1)) Then\n                    e.CellStyle.BackColor = Color.Pink\n                End If\n\n            End If\n        ElseIf Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Release Date&quot; Then\n            ShortFormDateFormat(e)\n        End If\n    End Sub\n\n    &#39;Even though the date internaly stores the year as YYYY, using formatting, the\n    &#39;UI can have the format in YY.  \n    Private Shared Sub ShortFormDateFormat(ByVal formatting As DataGridViewCellFormattingEventArgs)\n        If formatting.Value IsNot Nothing Then\n            Try\n                Dim dateString As System.Text.StringBuilder = New System.Text.StringBuilder()\n                Dim theDate As Date = DateTime.Parse(formatting.Value.ToString())\n\n                dateString.Append(theDate.Month)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Day)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Year.ToString().Substring(2))\n                formatting.Value = dateString.ToString()\n                formatting.FormattingApplied = True\n            Catch notInDateFormat As FormatException\n                &#39; Set to false in case there are other handlers interested trying to\n                &#39; format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = False\n            End Try\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.GridViewUnbound#1\">   void dataGridView1_CellFormatting( Object^ /*sender*/, DataGridViewCellFormattingEventArgs^ e )\n   {\n      // If the column is the Artist column, check the\n      // value.\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Artist&quot; ) )\n      {\n         if ( e-&gt;Value != nullptr )\n         {\n            // Check for the string &quot;pink&quot; in the cell.\n            String^ stringValue = dynamic_cast&lt;String^&gt;(e-&gt;Value);\n            stringValue = stringValue-&gt;ToLower();\n            if ( (stringValue-&gt;IndexOf( &quot;pink&quot; ) &gt; -1) )\n            {\n               DataGridViewCellStyle^ pinkStyle = gcnew DataGridViewCellStyle;\n\n               //Change the style of the cell.\n               pinkStyle-&gt;BackColor = Color::Pink;\n               pinkStyle-&gt;ForeColor = Color::Black;\n               pinkStyle-&gt;Font = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,8,FontStyle::Bold );\n               e-&gt;CellStyle = pinkStyle;\n            }\n            \n         }\n      }\n      else\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Release Date&quot; ) )\n      {\n         ShortFormDateFormat( e );\n      }\n   }\n\n\n   //Even though the date internaly stores the year as YYYY, using formatting, the\n   //UI can have the format in YY.  \n   void ShortFormDateFormat( DataGridViewCellFormattingEventArgs^ formatting )\n   {\n      if ( formatting-&gt;Value != nullptr )\n      {\n         try\n         {\n            System::Text::StringBuilder^ dateString = gcnew System::Text::StringBuilder;\n            DateTime theDate = DateTime::Parse( formatting-&gt;Value-&gt;ToString() );\n            dateString-&gt;Append( theDate.Month );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Day );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Year.ToString()-&gt;Substring( 2 ) );\n            formatting-&gt;Value = dateString-&gt;ToString();\n            formatting-&gt;FormattingApplied = true;\n         }\n         catch ( Exception^ /*notInDateFormat*/ ) \n         {\n            // Set to false in case there are other handlers interested trying to\n            // format this DataGridViewCellFormattingEventArgs instance.\n            formatting-&gt;FormattingApplied = false;\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.GridViewUnbound#1\">    private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\n    {\n        // If the column is the Artist column, check the\n        // value.\n        if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Artist&quot;)\n        {\n            if (e.Value != null)\n            {\n                // Check for the string &quot;pink&quot; in the cell.\n                string stringValue = (string)e.Value;\n                stringValue = stringValue.ToLower();\n                if ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1))\n                {\n                    e.CellStyle.BackColor = Color.Pink;\n                }\n\n            }\n        }\n        else if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Release Date&quot;)\n        {\n            ShortFormDateFormat(e);\n        }\n    }\n\n    //Even though the date internaly stores the year as YYYY, using formatting, the\n    //UI can have the format in YY.  \n    private static void ShortFormDateFormat(DataGridViewCellFormattingEventArgs formatting)\n    {\n        if (formatting.Value != null)\n        {\n            try\n            {\n                System.Text.StringBuilder dateString = new System.Text.StringBuilder();\n                DateTime theDate = DateTime.Parse(formatting.Value.ToString());\n\n                dateString.Append(theDate.Month);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Day);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Year.ToString().Substring(2));\n                formatting.Value = dateString.ToString();\n                formatting.FormattingApplied = true;\n            }\n            catch (FormatException)\n            {\n                // Set to false in case there are other handlers interested trying to\n                // format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = false;\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs_CellStyle\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs_CellStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CellStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the style of the cell that is being formatted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.DataGridViewCellStyle CellStyle { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle\" data-linktype=\"relative-path\">DataGridViewCellStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle\" data-linktype=\"relative-path\">DataGridViewCellStyle</a> that represents the display style of the cell being formatted. The default is the value of the cell&#39;s <span class=\"xref\">stem.Windows.Forms.DataGridViewCell.InheritedStyle*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting the properties of the object returned by the CellStyle property will change how the cell and its contents are displayed. To avoid performance penalties, use this property to change the cell styles rather than accessing the cell directly.  </p>\n<p> For more information about cell styles, see <a href=\"../Topic/Cell%20Styles%20in%20the%20Windows%20Forms%20DataGridView%20Control.md\" data-linktype=\"relative-path\">Cell Styles in the Windows Forms DataGridView Control</a></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the CellStyle property to color the background of cells that contain the string &quot;Pink&quot; to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Pink_\" data-linktype=\"relative-path\">Pink</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.GridViewUnbound#1\">    Private Sub dataGridView1_CellFormatting(ByVal sender As Object, _\n        ByVal e As DataGridViewCellFormattingEventArgs) _\n        Handles dataGridView1.CellFormatting\n        &#39; If the column is the Artist column, check the\n        &#39; value.\n        If Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Artist&quot; Then\n            If e.Value IsNot Nothing Then\n\n                &#39; Check for the string &quot;pink&quot; in the cell.\n                Dim stringValue As String = _\n                CType(e.Value, String)\n                stringValue = stringValue.ToLower()\n                If ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1)) Then\n                    e.CellStyle.BackColor = Color.Pink\n                End If\n\n            End If\n        ElseIf Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Release Date&quot; Then\n            ShortFormDateFormat(e)\n        End If\n    End Sub\n\n    &#39;Even though the date internaly stores the year as YYYY, using formatting, the\n    &#39;UI can have the format in YY.  \n    Private Shared Sub ShortFormDateFormat(ByVal formatting As DataGridViewCellFormattingEventArgs)\n        If formatting.Value IsNot Nothing Then\n            Try\n                Dim dateString As System.Text.StringBuilder = New System.Text.StringBuilder()\n                Dim theDate As Date = DateTime.Parse(formatting.Value.ToString())\n\n                dateString.Append(theDate.Month)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Day)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Year.ToString().Substring(2))\n                formatting.Value = dateString.ToString()\n                formatting.FormattingApplied = True\n            Catch notInDateFormat As FormatException\n                &#39; Set to false in case there are other handlers interested trying to\n                &#39; format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = False\n            End Try\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.GridViewUnbound#1\">   void dataGridView1_CellFormatting( Object^ /*sender*/, DataGridViewCellFormattingEventArgs^ e )\n   {\n      // If the column is the Artist column, check the\n      // value.\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Artist&quot; ) )\n      {\n         if ( e-&gt;Value != nullptr )\n         {\n            // Check for the string &quot;pink&quot; in the cell.\n            String^ stringValue = dynamic_cast&lt;String^&gt;(e-&gt;Value);\n            stringValue = stringValue-&gt;ToLower();\n            if ( (stringValue-&gt;IndexOf( &quot;pink&quot; ) &gt; -1) )\n            {\n               DataGridViewCellStyle^ pinkStyle = gcnew DataGridViewCellStyle;\n\n               //Change the style of the cell.\n               pinkStyle-&gt;BackColor = Color::Pink;\n               pinkStyle-&gt;ForeColor = Color::Black;\n               pinkStyle-&gt;Font = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,8,FontStyle::Bold );\n               e-&gt;CellStyle = pinkStyle;\n            }\n            \n         }\n      }\n      else\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Release Date&quot; ) )\n      {\n         ShortFormDateFormat( e );\n      }\n   }\n\n\n   //Even though the date internaly stores the year as YYYY, using formatting, the\n   //UI can have the format in YY.  \n   void ShortFormDateFormat( DataGridViewCellFormattingEventArgs^ formatting )\n   {\n      if ( formatting-&gt;Value != nullptr )\n      {\n         try\n         {\n            System::Text::StringBuilder^ dateString = gcnew System::Text::StringBuilder;\n            DateTime theDate = DateTime::Parse( formatting-&gt;Value-&gt;ToString() );\n            dateString-&gt;Append( theDate.Month );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Day );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Year.ToString()-&gt;Substring( 2 ) );\n            formatting-&gt;Value = dateString-&gt;ToString();\n            formatting-&gt;FormattingApplied = true;\n         }\n         catch ( Exception^ /*notInDateFormat*/ ) \n         {\n            // Set to false in case there are other handlers interested trying to\n            // format this DataGridViewCellFormattingEventArgs instance.\n            formatting-&gt;FormattingApplied = false;\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.GridViewUnbound#1\">    private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\n    {\n        // If the column is the Artist column, check the\n        // value.\n        if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Artist&quot;)\n        {\n            if (e.Value != null)\n            {\n                // Check for the string &quot;pink&quot; in the cell.\n                string stringValue = (string)e.Value;\n                stringValue = stringValue.ToLower();\n                if ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1))\n                {\n                    e.CellStyle.BackColor = Color.Pink;\n                }\n\n            }\n        }\n        else if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Release Date&quot;)\n        {\n            ShortFormDateFormat(e);\n        }\n    }\n\n    //Even though the date internaly stores the year as YYYY, using formatting, the\n    //UI can have the format in YY.  \n    private static void ShortFormDateFormat(DataGridViewCellFormattingEventArgs formatting)\n    {\n        if (formatting.Value != null)\n        {\n            try\n            {\n                System.Text.StringBuilder dateString = new System.Text.StringBuilder();\n                DateTime theDate = DateTime.Parse(formatting.Value.ToString());\n\n                dateString.Append(theDate.Month);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Day);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Year.ToString().Substring(2));\n                formatting.Value = dateString.ToString();\n                formatting.FormattingApplied = true;\n            }\n            catch (FormatException)\n            {\n                // Set to false in case there are other handlers interested trying to\n                // format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = false;\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs_ColumnIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs_ColumnIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the column index of the cell that is being formatted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ColumnIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The column index of the cell that is being formatted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ColumnIndex property to obtain an index into the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_Columns_\" data-linktype=\"relative-path\">Columns</a> property of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ColumnIndex property to retrieve column properties.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.GridViewUnbound#1\">    Private Sub dataGridView1_CellFormatting(ByVal sender As Object, _\n        ByVal e As DataGridViewCellFormattingEventArgs) _\n        Handles dataGridView1.CellFormatting\n        &#39; If the column is the Artist column, check the\n        &#39; value.\n        If Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Artist&quot; Then\n            If e.Value IsNot Nothing Then\n\n                &#39; Check for the string &quot;pink&quot; in the cell.\n                Dim stringValue As String = _\n                CType(e.Value, String)\n                stringValue = stringValue.ToLower()\n                If ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1)) Then\n                    e.CellStyle.BackColor = Color.Pink\n                End If\n\n            End If\n        ElseIf Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Release Date&quot; Then\n            ShortFormDateFormat(e)\n        End If\n    End Sub\n\n    &#39;Even though the date internaly stores the year as YYYY, using formatting, the\n    &#39;UI can have the format in YY.  \n    Private Shared Sub ShortFormDateFormat(ByVal formatting As DataGridViewCellFormattingEventArgs)\n        If formatting.Value IsNot Nothing Then\n            Try\n                Dim dateString As System.Text.StringBuilder = New System.Text.StringBuilder()\n                Dim theDate As Date = DateTime.Parse(formatting.Value.ToString())\n\n                dateString.Append(theDate.Month)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Day)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Year.ToString().Substring(2))\n                formatting.Value = dateString.ToString()\n                formatting.FormattingApplied = True\n            Catch notInDateFormat As FormatException\n                &#39; Set to false in case there are other handlers interested trying to\n                &#39; format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = False\n            End Try\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.GridViewUnbound#1\">   void dataGridView1_CellFormatting( Object^ /*sender*/, DataGridViewCellFormattingEventArgs^ e )\n   {\n      // If the column is the Artist column, check the\n      // value.\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Artist&quot; ) )\n      {\n         if ( e-&gt;Value != nullptr )\n         {\n            // Check for the string &quot;pink&quot; in the cell.\n            String^ stringValue = dynamic_cast&lt;String^&gt;(e-&gt;Value);\n            stringValue = stringValue-&gt;ToLower();\n            if ( (stringValue-&gt;IndexOf( &quot;pink&quot; ) &gt; -1) )\n            {\n               DataGridViewCellStyle^ pinkStyle = gcnew DataGridViewCellStyle;\n\n               //Change the style of the cell.\n               pinkStyle-&gt;BackColor = Color::Pink;\n               pinkStyle-&gt;ForeColor = Color::Black;\n               pinkStyle-&gt;Font = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,8,FontStyle::Bold );\n               e-&gt;CellStyle = pinkStyle;\n            }\n            \n         }\n      }\n      else\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Release Date&quot; ) )\n      {\n         ShortFormDateFormat( e );\n      }\n   }\n\n\n   //Even though the date internaly stores the year as YYYY, using formatting, the\n   //UI can have the format in YY.  \n   void ShortFormDateFormat( DataGridViewCellFormattingEventArgs^ formatting )\n   {\n      if ( formatting-&gt;Value != nullptr )\n      {\n         try\n         {\n            System::Text::StringBuilder^ dateString = gcnew System::Text::StringBuilder;\n            DateTime theDate = DateTime::Parse( formatting-&gt;Value-&gt;ToString() );\n            dateString-&gt;Append( theDate.Month );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Day );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Year.ToString()-&gt;Substring( 2 ) );\n            formatting-&gt;Value = dateString-&gt;ToString();\n            formatting-&gt;FormattingApplied = true;\n         }\n         catch ( Exception^ /*notInDateFormat*/ ) \n         {\n            // Set to false in case there are other handlers interested trying to\n            // format this DataGridViewCellFormattingEventArgs instance.\n            formatting-&gt;FormattingApplied = false;\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.GridViewUnbound#1\">    private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\n    {\n        // If the column is the Artist column, check the\n        // value.\n        if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Artist&quot;)\n        {\n            if (e.Value != null)\n            {\n                // Check for the string &quot;pink&quot; in the cell.\n                string stringValue = (string)e.Value;\n                stringValue = stringValue.ToLower();\n                if ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1))\n                {\n                    e.CellStyle.BackColor = Color.Pink;\n                }\n\n            }\n        }\n        else if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Release Date&quot;)\n        {\n            ShortFormDateFormat(e);\n        }\n    }\n\n    //Even though the date internaly stores the year as YYYY, using formatting, the\n    //UI can have the format in YY.  \n    private static void ShortFormDateFormat(DataGridViewCellFormattingEventArgs formatting)\n    {\n        if (formatting.Value != null)\n        {\n            try\n            {\n                System.Text.StringBuilder dateString = new System.Text.StringBuilder();\n                DateTime theDate = DateTime.Parse(formatting.Value.ToString());\n\n                dateString.Append(theDate.Month);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Day);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Year.ToString().Substring(2));\n                formatting.Value = dateString.ToString();\n                formatting.FormattingApplied = true;\n            }\n            catch (FormatException)\n            {\n                // Set to false in case there are other handlers interested trying to\n                // format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = false;\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs_FormattingApplied_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FormattingApplied</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the cell value has been successfully formatted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool FormattingApplied { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the formatting for the cell value has been handled; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When handling the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event, set the FormattingApplied property to <code>true</code> after setting the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> property if no further value formatting is required. If the FormattingApplied property value is <code>false</code> when the event handler exits, the formatting will be applied to the value as indicated by the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_DataSourceNullValue_\" data-linktype=\"relative-path\">DataSourceNullValue</a> properties of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle\" data-linktype=\"relative-path\">DataGridViewCellStyle</a> object returned by the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellformattingeventargs#System_Windows_Forms_DataGridViewCellFormattingEventArgs_CellStyle_\" data-linktype=\"relative-path\">CellStyle</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the FormattingApplied property to <code>true</code> to signal that formatting for this cell is finished.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.GridViewUnbound#1\">    Private Sub dataGridView1_CellFormatting(ByVal sender As Object, _\n        ByVal e As DataGridViewCellFormattingEventArgs) _\n        Handles dataGridView1.CellFormatting\n        &#39; If the column is the Artist column, check the\n        &#39; value.\n        If Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Artist&quot; Then\n            If e.Value IsNot Nothing Then\n\n                &#39; Check for the string &quot;pink&quot; in the cell.\n                Dim stringValue As String = _\n                CType(e.Value, String)\n                stringValue = stringValue.ToLower()\n                If ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1)) Then\n                    e.CellStyle.BackColor = Color.Pink\n                End If\n\n            End If\n        ElseIf Me.dataGridView1.Columns(e.ColumnIndex).Name _\n            = &quot;Release Date&quot; Then\n            ShortFormDateFormat(e)\n        End If\n    End Sub\n\n    &#39;Even though the date internaly stores the year as YYYY, using formatting, the\n    &#39;UI can have the format in YY.  \n    Private Shared Sub ShortFormDateFormat(ByVal formatting As DataGridViewCellFormattingEventArgs)\n        If formatting.Value IsNot Nothing Then\n            Try\n                Dim dateString As System.Text.StringBuilder = New System.Text.StringBuilder()\n                Dim theDate As Date = DateTime.Parse(formatting.Value.ToString())\n\n                dateString.Append(theDate.Month)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Day)\n                dateString.Append(&quot;/&quot;)\n                dateString.Append(theDate.Year.ToString().Substring(2))\n                formatting.Value = dateString.ToString()\n                formatting.FormattingApplied = True\n            Catch notInDateFormat As FormatException\n                &#39; Set to false in case there are other handlers interested trying to\n                &#39; format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = False\n            End Try\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.GridViewUnbound#1\">   void dataGridView1_CellFormatting( Object^ /*sender*/, DataGridViewCellFormattingEventArgs^ e )\n   {\n      // If the column is the Artist column, check the\n      // value.\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Artist&quot; ) )\n      {\n         if ( e-&gt;Value != nullptr )\n         {\n            // Check for the string &quot;pink&quot; in the cell.\n            String^ stringValue = dynamic_cast&lt;String^&gt;(e-&gt;Value);\n            stringValue = stringValue-&gt;ToLower();\n            if ( (stringValue-&gt;IndexOf( &quot;pink&quot; ) &gt; -1) )\n            {\n               DataGridViewCellStyle^ pinkStyle = gcnew DataGridViewCellStyle;\n\n               //Change the style of the cell.\n               pinkStyle-&gt;BackColor = Color::Pink;\n               pinkStyle-&gt;ForeColor = Color::Black;\n               pinkStyle-&gt;Font = gcnew System::Drawing::Font( &quot;Times New Roman&quot;,8,FontStyle::Bold );\n               e-&gt;CellStyle = pinkStyle;\n            }\n            \n         }\n      }\n      else\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Release Date&quot; ) )\n      {\n         ShortFormDateFormat( e );\n      }\n   }\n\n\n   //Even though the date internaly stores the year as YYYY, using formatting, the\n   //UI can have the format in YY.  \n   void ShortFormDateFormat( DataGridViewCellFormattingEventArgs^ formatting )\n   {\n      if ( formatting-&gt;Value != nullptr )\n      {\n         try\n         {\n            System::Text::StringBuilder^ dateString = gcnew System::Text::StringBuilder;\n            DateTime theDate = DateTime::Parse( formatting-&gt;Value-&gt;ToString() );\n            dateString-&gt;Append( theDate.Month );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Day );\n            dateString-&gt;Append( &quot;/&quot; );\n            dateString-&gt;Append( theDate.Year.ToString()-&gt;Substring( 2 ) );\n            formatting-&gt;Value = dateString-&gt;ToString();\n            formatting-&gt;FormattingApplied = true;\n         }\n         catch ( Exception^ /*notInDateFormat*/ ) \n         {\n            // Set to false in case there are other handlers interested trying to\n            // format this DataGridViewCellFormattingEventArgs instance.\n            formatting-&gt;FormattingApplied = false;\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.GridViewUnbound#1\">    private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\n    {\n        // If the column is the Artist column, check the\n        // value.\n        if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Artist&quot;)\n        {\n            if (e.Value != null)\n            {\n                // Check for the string &quot;pink&quot; in the cell.\n                string stringValue = (string)e.Value;\n                stringValue = stringValue.ToLower();\n                if ((stringValue.IndexOf(&quot;pink&quot;) &gt; -1))\n                {\n                    e.CellStyle.BackColor = Color.Pink;\n                }\n\n            }\n        }\n        else if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Release Date&quot;)\n        {\n            ShortFormDateFormat(e);\n        }\n    }\n\n    //Even though the date internaly stores the year as YYYY, using formatting, the\n    //UI can have the format in YY.  \n    private static void ShortFormDateFormat(DataGridViewCellFormattingEventArgs formatting)\n    {\n        if (formatting.Value != null)\n        {\n            try\n            {\n                System.Text.StringBuilder dateString = new System.Text.StringBuilder();\n                DateTime theDate = DateTime.Parse(formatting.Value.ToString());\n\n                dateString.Append(theDate.Month);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Day);\n                dateString.Append(&quot;/&quot;);\n                dateString.Append(theDate.Year.ToString().Substring(2));\n                formatting.Value = dateString.ToString();\n                formatting.FormattingApplied = true;\n            }\n            catch (FormatException)\n            {\n                // Set to false in case there are other handlers interested trying to\n                // format this DataGridViewCellFormattingEventArgs instance.\n                formatting.FormattingApplied = false;\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs_RowIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellFormattingEventArgs_RowIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the row index of the cell that is being formatted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RowIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The row index of the cell that is being formatted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the RowIndex property to obtain an index into the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_Rows_\" data-linktype=\"relative-path\">Rows</a> property of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the RowIndex property to retrieve the cell being formatted. The cell reference is then used to set the cell&#39;s ToolTip text.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.DataGridViewCell.ToolTipText#1\">    // Sets the ToolTip text for cells in the Rating column.\n    void dataGridView1_CellFormatting(Object^ /*sender*/, \n        DataGridViewCellFormattingEventArgs^ e)\n    {\n        if ( (e-&gt;ColumnIndex == this-&gt;dataGridView1-&gt;Columns[&quot;Rating&quot;]-&gt;Index)\n            &amp;&amp; e-&gt;Value != nullptr )\n        {\n            DataGridViewCell^ cell = \n                this-&gt;dataGridView1-&gt;Rows[e-&gt;RowIndex]-&gt;Cells[e-&gt;ColumnIndex];\n            if (e-&gt;Value-&gt;Equals(&quot;*&quot;))\n            {                \n                cell-&gt;ToolTipText = &quot;very bad&quot;;\n            }\n            else if (e-&gt;Value-&gt;Equals(&quot;**&quot;))\n            {\n                cell-&gt;ToolTipText = &quot;bad&quot;;\n            }\n            else if (e-&gt;Value-&gt;Equals(&quot;***&quot;))\n            {\n                cell-&gt;ToolTipText = &quot;good&quot;;\n            }\n            else if (e-&gt;Value-&gt;Equals(&quot;****&quot;))\n            {\n                cell-&gt;ToolTipText = &quot;very good&quot;;\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.DataGridViewCell.ToolTipText#1\">    // Sets the ToolTip text for cells in the Rating column.\n    void dataGridView1_CellFormatting(object sender, \n        DataGridViewCellFormattingEventArgs e)\n    {\n        if ( (e.ColumnIndex == this.dataGridView1.Columns[&quot;Rating&quot;].Index)\n            &amp;&amp; e.Value != null )\n        {\n            DataGridViewCell cell = \n                this.dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex];\n            if (e.Value.Equals(&quot;*&quot;))\n            {                \n                cell.ToolTipText = &quot;very bad&quot;;\n            }\n            else if (e.Value.Equals(&quot;**&quot;))\n            {\n                cell.ToolTipText = &quot;bad&quot;;\n            }\n            else if (e.Value.Equals(&quot;***&quot;))\n            {\n                cell.ToolTipText = &quot;good&quot;;\n            }\n            else if (e.Value.Equals(&quot;****&quot;))\n            {\n                cell.ToolTipText = &quot;very good&quot;;\n            }\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.DataGridViewCell.ToolTipText#1\">    &#39; Sets the ToolTip text for cells in the Rating column.\n    Sub dataGridView1_CellFormatting(ByVal sender As Object, _\n        ByVal e As DataGridViewCellFormattingEventArgs) _\n        Handles dataGridView1.CellFormatting\n\n        If e.ColumnIndex = Me.dataGridView1.Columns(&quot;Rating&quot;).Index _\n            AndAlso (e.Value IsNot Nothing) Then\n\n            With Me.dataGridView1.Rows(e.RowIndex).Cells(e.ColumnIndex)\n\n                If e.Value.Equals(&quot;*&quot;) Then\n                    .ToolTipText = &quot;very bad&quot;\n                ElseIf e.Value.Equals(&quot;**&quot;) Then\n                    .ToolTipText = &quot;bad&quot;\n                ElseIf e.Value.Equals(&quot;***&quot;) Then\n                    .ToolTipText = &quot;good&quot;\n                ElseIf e.Value.Equals(&quot;****&quot;) Then\n                    .ToolTipText = &quot;very good&quot;\n                End If\n\n            End With\n\n        End If\n\n    End Sub &#39;dataGridView1_CellFormatting\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DataGridViewCellFormattingEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DataGridViewCellFormattingEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventArgs.ColumnIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventArgs.RowIndex\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6b1c5cb9-d51a-ea05-3b9c-4e5b80018f42\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\DataGridViewCellFormattingEventArgs.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DataGridViewCellFormattingEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DataGridViewCellFormattingEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DataGridViewCellFormattingEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.DataGridViewCellFormattingEventArgs","System.Windows.Forms.DataGridViewCellFormattingEventArgs..ctor","System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle","System.Windows.Forms.DataGridViewCellFormattingEventArgs.ColumnIndex","System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied","System.Windows.Forms.DataGridViewCellFormattingEventArgs.RowIndex"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DataGridViewCellFormattingEventArgs","System::Windows::Forms::DataGridViewCellFormattingEventArgs","System.Windows.Forms.DataGridViewCellFormattingEventArgs.#ctor","System::Windows::Forms::DataGridViewCellFormattingEventArgs::#ctor","System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle","System::Windows::Forms::DataGridViewCellFormattingEventArgs::CellStyle","System.Windows.Forms.DataGridViewCellFormattingEventArgs.ColumnIndex","System::Windows::Forms::DataGridViewCellFormattingEventArgs::ColumnIndex","System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied","System::Windows::Forms::DataGridViewCellFormattingEventArgs::FormattingApplied","System.Windows.Forms.DataGridViewCellFormattingEventArgs.RowIndex","System::Windows::Forms::DataGridViewCellFormattingEventArgs::RowIndex"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6b1c5cb9-d51a-ea05-3b9c-4e5b80018f42","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\DataGridViewCellFormattingEventArgs.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/DataGridViewCellFormattingEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridViewCellFormattingEventArgs class | Microsoft Docs","_op_ogTitle":"DataGridViewCellFormattingEventArgs class","description":"Provides data for the  event of a .\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DataGridViewCellFormattingEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.datagridviewcellformattingeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.datagridviewcellformattingeventargs","fileRelativePath":"System.Windows.Forms.DataGridViewCellFormattingEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}