{"content":"    \r\n    <h1 id=\"System_Collections_Specialized_StringDictionary\">\r\n      <span class=\"lang-csharp\">StringDictionary</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Implements a hash table with the key and the value strongly typed to be strings rather than objects.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.Design.Serialization.DesignerSerializer(&quot;System.Diagnostics.Design.StringDictionaryCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, &quot;System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\npublic class StringDictionary : System.Collections.IEnumerable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StringDictionary</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A key cannot be <code>null</code>, but a value can.  </p>\n<p> The key is handled in a case-insensitive manner; it is translated to lowercase before it is used with the string dictionary.  </p>\n<p> In .NET Framework version 1.0, this class uses culture-sensitive string comparisons. However, in .NET Framework version 1.1 and later, this class uses <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> when comparing strings. For more information about how culture affects comparisons and sorting, see <a href=\"../Topic/Performing%20Culture-Insensitive%20String%20Operations.md\" data-linktype=\"relative-path\">Performing Culture-Insensitive String Operations</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary__ctor\" data-linktype=\"self-bookmark\">StringDictionary()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of key/value pairs in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_IsSynchronized\" data-linktype=\"self-bookmark\">IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_Item_System_String_\" data-linktype=\"self-bookmark\">Item(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value associated with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_Keys\" data-linktype=\"self-bookmark\">Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of keys in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_SyncRoot\" data-linktype=\"self-bookmark\">SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_Values\" data-linktype=\"self-bookmark\">Values</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of values in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_Add_System_String_System_String_\" data-linktype=\"self-bookmark\">Add(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an entry with the specified key and value into the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all entries from the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_ContainsKey_System_String_\" data-linktype=\"self-bookmark\">ContainsKey(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines if the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> contains a specific key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_ContainsValue_System_String_\" data-linktype=\"self-bookmark\">ContainsValue(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines if the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> contains a specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the string dictionary values to a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the string dictionary.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringDictionary_Remove_System_String_\" data-linktype=\"self-bookmark\">Remove(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the entry with the specified key from the string dictionary.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary__ctor\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringDictionary()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringDictionary ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates several of the properties and methods of <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintKeysAndValues2( StringDictionary^ myCol );\nvoid PrintKeysAndValues3( StringDictionary^ myCol );\n\nint main()\n{\n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n   PrintKeysAndValues2( myCol );\n\n   // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n   Console::WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n   PrintKeysAndValues3( myCol );\n\n   // Copies the StringDictionary to an array with DictionaryEntry elements.\n   array&lt;DictionaryEntry&gt;^myArr = gcnew array&lt;DictionaryEntry&gt;(myCol-&gt;Count);\n   myCol-&gt;CopyTo( myArr, 0 );\n\n   // Displays the values in the array.\n   Console::WriteLine( &quot;Displays the elements in the array:&quot; );\n   Console::WriteLine( &quot;   KEY        VALUE&quot; );\n   for ( int i = 0; i &lt; myArr-&gt;Length; i++ )\n      Console::WriteLine( &quot;   {0,-10} {1}&quot;, myArr[ i ].Key, myArr[ i ].Value );\n   Console::WriteLine();\n\n   // Searches for a value.\n   if ( myCol-&gt;ContainsValue( &quot;amarillo&quot; ) )\n      Console::WriteLine( &quot;The collection contains the value \\&quot;amarillo\\&quot;.&quot; );\n   else\n      Console::WriteLine( &quot;The collection does not contain the value \\&quot;amarillo\\&quot;.&quot; );\n\n   Console::WriteLine();\n   \n   // Searches for a key and deletes it.\n   if ( myCol-&gt;ContainsKey( &quot;green&quot; ) )\n      myCol-&gt;Remove( &quot;green&quot; );\n\n   Console::WriteLine( &quot;The collection contains the following elements after removing \\&quot;green\\&quot;:&quot; );\n   PrintKeysAndValues2( myCol );\n\n   // Clears the entire collection.\n   myCol-&gt;Clear();\n   Console::WriteLine( &quot;The collection contains the following elements after it is cleared:&quot; );\n   PrintKeysAndValues2( myCol );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( StringDictionary^ myCol )\n{\n   IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   DictionaryEntry de;\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      de =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n   }\n\n   Console::WriteLine();\n}\n\n// Uses the Keys, Values, Count, and Item properties.\nvoid PrintKeysAndValues3( StringDictionary^ myCol )\n{\n   array&lt;String^&gt;^myKeys = gcnew array&lt;String^&gt;(myCol-&gt;Count);\n   myCol-&gt;Keys-&gt;CopyTo( myKeys, 0 );\n   Console::WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[ i ], myCol[ myKeys[ i ] ] );\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\nDisplays the elements in the array:\n   KEY        VALUE\n   red        rojo\n   blue       azul\n   green      verde\n\nThe collection does not contain the value &quot;amarillo&quot;.\n\nThe collection contains the following elements after removing &quot;green&quot;:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n\nThe collection contains the following elements after it is cleared:\n   KEY                       VALUE\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Displays the elements using foreach:&quot; );\n      PrintKeysAndValues1( myCol );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n      PrintKeysAndValues2( myCol );\n\n      // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n      PrintKeysAndValues3( myCol );\n\n      // Copies the StringDictionary to an array with DictionaryEntry elements.\n      DictionaryEntry[] myArr = new DictionaryEntry[myCol.Count];\n      myCol.CopyTo( myArr, 0 );\n\n      // Displays the values in the array.\n      Console.WriteLine( &quot;Displays the elements in the array:&quot; );\n      Console.WriteLine( &quot;   KEY        VALUE&quot; );\n      for ( int i = 0; i &lt; myArr.Length; i++ )\n         Console.WriteLine( &quot;   {0,-10} {1}&quot;, myArr[i].Key, myArr[i].Value );\n      Console.WriteLine();\n\n      // Searches for a value.\n      if ( myCol.ContainsValue( &quot;amarillo&quot; ) )\n         Console.WriteLine( &quot;The collection contains the value \\&quot;amarillo\\&quot;.&quot; );\n      else\n         Console.WriteLine( &quot;The collection does not contain the value \\&quot;amarillo\\&quot;.&quot; );\n      Console.WriteLine();\n\n      // Searches for a key and deletes it.\n      if ( myCol.ContainsKey( &quot;green&quot; ) )\n         myCol.Remove( &quot;green&quot; );\n      Console.WriteLine( &quot;The collection contains the following elements after removing \\&quot;green\\&quot;:&quot; );\n      PrintKeysAndValues1( myCol );\n\n      // Clears the entire collection.\n      myCol.Clear();\n      Console.WriteLine( &quot;The collection contains the following elements after it is cleared:&quot; );\n      PrintKeysAndValues1( myCol );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( StringDictionary myCol )  {\n      IEnumerator myEnumerator = myCol.GetEnumerator();\n      DictionaryEntry de;\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      while ( myEnumerator.MoveNext() )  {\n         de = (DictionaryEntry) myEnumerator.Current;\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys, Values, Count, and Item properties.\n   public static void PrintKeysAndValues3( StringDictionary myCol )  {\n      String[] myKeys = new String[myCol.Count];\n      myCol.Keys.CopyTo( myKeys, 0 );\n\n      Console.WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[i], myCol[myKeys[i]] );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using foreach:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\nDisplays the elements in the array:\n   KEY        VALUE\n   red        rojo\n   blue       azul\n   green      verde\n\nThe collection does not contain the value &quot;amarillo&quot;.\n\nThe collection contains the following elements after removing &quot;green&quot;:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n\nThe collection contains the following elements after it is cleared:\n   KEY                       VALUE\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Displays the elements using For Each:&quot;)\n      PrintKeysAndValues1(myCol)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Displays the elements using the IEnumerator:&quot;)\n      PrintKeysAndValues2(myCol)\n\n      &#39; Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine(&quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot;)\n      PrintKeysAndValues3(myCol)\n\n      &#39; Copies the StringDictionary to an array with DictionaryEntry elements.\n      Dim myArr(myCol.Count) As DictionaryEntry\n      myCol.CopyTo(myArr, 0)\n\n      &#39; Displays the values in the array.\n      Console.WriteLine(&quot;Displays the elements in the array:&quot;)\n      Console.WriteLine(&quot;   KEY        VALUE&quot;)\n      Dim i As Integer\n      For i = 0 To myArr.Length - 1\n         Console.WriteLine(&quot;   {0,-10} {1}&quot;, myArr(i).Key, myArr(i).Value)\n      Next i\n      Console.WriteLine()\n\n      &#39; Searches for a value.\n      If myCol.ContainsValue(&quot;amarillo&quot;) Then\n         Console.WriteLine(&quot;The collection contains the value &quot;&quot;amarillo&quot;&quot;.&quot;)\n      Else\n         Console.WriteLine(&quot;The collection does not contain the value &quot;&quot;amarillo&quot;&quot;.&quot;)\n      End If\n      Console.WriteLine()\n\n      &#39; Searches for a key and deletes it.\n      If myCol.ContainsKey(&quot;green&quot;) Then\n         myCol.Remove(&quot;green&quot;)\n      End If\n      Console.WriteLine(&quot;The collection contains the following elements after removing &quot;&quot;green&quot;&quot;:&quot;)\n      PrintKeysAndValues1(myCol)\n\n      &#39; Clears the entire collection.\n      myCol.Clear()\n      Console.WriteLine(&quot;The collection contains the following elements after it is cleared:&quot;)\n      PrintKeysAndValues1(myCol)\n\n   End Sub &#39;Main\n\n\n   &#39; Uses the For Each statement which hides the complexity of the enumerator.\n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues1(myCol As StringDictionary)\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      Dim de As DictionaryEntry\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues1\n\n\n   &#39; Uses the enumerator. \n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues2(myCol As StringDictionary)\n      Dim myEnumerator As IEnumerator = myCol.GetEnumerator()\n      Dim de As DictionaryEntry\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      While myEnumerator.MoveNext()\n         de = CType(myEnumerator.Current, DictionaryEntry)\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      End While\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues2\n\n\n   &#39; Uses the Keys, Values, Count, and Item properties.\n   Public Shared Sub PrintKeysAndValues3(myCol As StringDictionary)\n      Dim myKeys(myCol.Count) As String\n      myCol.Keys.CopyTo(myKeys, 0)\n\n      Console.WriteLine(&quot;   INDEX KEY                       VALUE&quot;)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys(i), myCol(myKeys(i)))\n      Next i\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Displays the elements using For Each:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the IEnumerator:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the Keys, Values, Count, and Item properties:\n&#39;   INDEX KEY                       VALUE\n&#39;   0     red                       rojo\n&#39;   1     blue                      azul\n&#39;   2     green                     verde\n&#39;\n&#39;Displays the elements in the array:\n&#39;   KEY        VALUE\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;   green      verde\n&#39;\n&#39;\n&#39;The collection does not contain the value &quot;amarillo&quot;.\n&#39;\n&#39;The collection contains the following elements after removing &quot;green&quot;:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;\n&#39;The collection contains the following elements after it is cleared:\n&#39;   KEY                       VALUE\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_Count\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of key/value pairs in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of key/value pairs in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the elements of a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\nvoid PrintKeysAndValues1( StringDictionary^ myCol );\nvoid PrintKeysAndValues2( StringDictionary^ myCol );\nvoid PrintKeysAndValues3( StringDictionary^ myCol );\n\nint main()\n{\n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Display the contents of the collection using for each. This is the preferred method.\n   Console::WriteLine( &quot;Displays the elements using for each:&quot; );\n   PrintKeysAndValues1( myCol );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n   PrintKeysAndValues2( myCol );\n   \n   // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n   Console::WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n   PrintKeysAndValues3( myCol );\n}\n\n// Uses the for each statement which hides the complexity of the enumerator.\n// NOTE: The for each statement is the preferred way of enumerating the contents of a collection.\nvoid PrintKeysAndValues1( StringDictionary^ myCol )  {\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   for each ( DictionaryEntry^ de in myCol )\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( StringDictionary^ myCol )\n{\n   IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   DictionaryEntry^ de;\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      de =  (DictionaryEntry^)(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n   Console::WriteLine();\n}\n\n// Uses the Keys, Values, Count, and Item properties.\nvoid PrintKeysAndValues3( StringDictionary^ myCol )\n{\n   array&lt;String^&gt;^myKeys = gcnew array&lt;String^&gt;(myCol-&gt;Count);\n   myCol-&gt;Keys-&gt;CopyTo( myKeys, 0 );\n   Console::WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[ i ], myCol[ myKeys[ i ] ] );\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using for each:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Displays the elements using foreach:&quot; );\n      PrintKeysAndValues1( myCol );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n      PrintKeysAndValues2( myCol );\n\n      // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n      PrintKeysAndValues3( myCol );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( StringDictionary myCol )  {\n      IEnumerator myEnumerator = myCol.GetEnumerator();\n      DictionaryEntry de;\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      while ( myEnumerator.MoveNext() )  {\n         de = (DictionaryEntry) myEnumerator.Current;\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys, Values, Count, and Item properties.\n   public static void PrintKeysAndValues3( StringDictionary myCol )  {\n      String[] myKeys = new String[myCol.Count];\n      myCol.Keys.CopyTo( myKeys, 0 );\n\n      Console.WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[i], myCol[myKeys[i]] );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using foreach:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Displays the elements using For Each:&quot;)\n      PrintKeysAndValues1(myCol)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Displays the elements using the IEnumerator:&quot;)\n      PrintKeysAndValues2(myCol)\n\n      &#39; Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine(&quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot;)\n      PrintKeysAndValues3(myCol)\n\n   End Sub &#39;Main\n\n\n   &#39; Uses the For Each statement which hides the complexity of the enumerator.\n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues1(myCol As StringDictionary)\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      Dim de As DictionaryEntry\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues1\n\n\n   &#39; Uses the enumerator. \n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues2(myCol As StringDictionary)\n      Dim myEnumerator As IEnumerator = myCol.GetEnumerator()\n      Dim de As DictionaryEntry\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      While myEnumerator.MoveNext()\n         de = CType(myEnumerator.Current, DictionaryEntry)\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      End While\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues2\n\n\n   &#39; Uses the Keys, Values, Count, and Item properties.\n   Public Shared Sub PrintKeysAndValues3(myCol As StringDictionary)\n      Dim myKeys(myCol.Count) As String\n      myCol.Keys.CopyTo(myKeys, 0)\n\n      Console.WriteLine(&quot;   INDEX KEY                       VALUE&quot;)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys(i), myCol(myKeys(i)))\n      Next i\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Displays the elements using For Each:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the IEnumerator:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the Keys, Values, Count, and Item properties:\n&#39;   INDEX KEY                       VALUE\n&#39;   0     red                       rojo\n&#39;   1     blue                      azul\n&#39;   2     green                     verde\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> is synchronized (thread safe); otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> instance is not synchronized. Derived classes can provide a synchronized version of the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> using the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary#2\">        StringDictionary^ myCollection = gcnew StringDictionary();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary#2\">        StringDictionary myCollection = new StringDictionary();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (Object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary#2\">        Dim myCollection As New StringDictionary()\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_Item_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value associated with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string this[string key] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key whose value to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value associated with the specified key. If the specified key is not found, Get returns <code>null</code>, and Set creates a new entry with the specified key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The key is handled in a case-insensitive manner; it is translated to lowercase before it is used.  </p>\n<p> A key cannot be <code>null</code>, but a value can. To distinguish between <code>null</code> that is returned because the specified key is not found and <code>null</code> that is returned because the value of the specified key is <code>null</code>, use the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a> method to determine if the key exists in the list.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the elements of a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\nvoid PrintKeysAndValues1( StringDictionary^ myCol );\nvoid PrintKeysAndValues2( StringDictionary^ myCol );\nvoid PrintKeysAndValues3( StringDictionary^ myCol );\n\nint main()\n{\n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Display the contents of the collection using for each. This is the preferred method.\n   Console::WriteLine( &quot;Displays the elements using for each:&quot; );\n   PrintKeysAndValues1( myCol );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n   PrintKeysAndValues2( myCol );\n   \n   // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n   Console::WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n   PrintKeysAndValues3( myCol );\n}\n\n// Uses the for each statement which hides the complexity of the enumerator.\n// NOTE: The for each statement is the preferred way of enumerating the contents of a collection.\nvoid PrintKeysAndValues1( StringDictionary^ myCol )  {\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   for each ( DictionaryEntry^ de in myCol )\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( StringDictionary^ myCol )\n{\n   IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   DictionaryEntry^ de;\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      de =  (DictionaryEntry^)(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n   Console::WriteLine();\n}\n\n// Uses the Keys, Values, Count, and Item properties.\nvoid PrintKeysAndValues3( StringDictionary^ myCol )\n{\n   array&lt;String^&gt;^myKeys = gcnew array&lt;String^&gt;(myCol-&gt;Count);\n   myCol-&gt;Keys-&gt;CopyTo( myKeys, 0 );\n   Console::WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[ i ], myCol[ myKeys[ i ] ] );\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using for each:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Displays the elements using foreach:&quot; );\n      PrintKeysAndValues1( myCol );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n      PrintKeysAndValues2( myCol );\n\n      // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n      PrintKeysAndValues3( myCol );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( StringDictionary myCol )  {\n      IEnumerator myEnumerator = myCol.GetEnumerator();\n      DictionaryEntry de;\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      while ( myEnumerator.MoveNext() )  {\n         de = (DictionaryEntry) myEnumerator.Current;\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys, Values, Count, and Item properties.\n   public static void PrintKeysAndValues3( StringDictionary myCol )  {\n      String[] myKeys = new String[myCol.Count];\n      myCol.Keys.CopyTo( myKeys, 0 );\n\n      Console.WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[i], myCol[myKeys[i]] );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using foreach:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Displays the elements using For Each:&quot;)\n      PrintKeysAndValues1(myCol)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Displays the elements using the IEnumerator:&quot;)\n      PrintKeysAndValues2(myCol)\n\n      &#39; Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine(&quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot;)\n      PrintKeysAndValues3(myCol)\n\n   End Sub &#39;Main\n\n\n   &#39; Uses the For Each statement which hides the complexity of the enumerator.\n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues1(myCol As StringDictionary)\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      Dim de As DictionaryEntry\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues1\n\n\n   &#39; Uses the enumerator. \n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues2(myCol As StringDictionary)\n      Dim myEnumerator As IEnumerator = myCol.GetEnumerator()\n      Dim de As DictionaryEntry\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      While myEnumerator.MoveNext()\n         de = CType(myEnumerator.Current, DictionaryEntry)\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      End While\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues2\n\n\n   &#39; Uses the Keys, Values, Count, and Item properties.\n   Public Shared Sub PrintKeysAndValues3(myCol As StringDictionary)\n      Dim myKeys(myCol.Count) As String\n      myCol.Keys.CopyTo(myKeys, 0)\n\n      Console.WriteLine(&quot;   INDEX KEY                       VALUE&quot;)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys(i), myCol(myKeys(i)))\n      Next i\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Displays the elements using For Each:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the IEnumerator:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the Keys, Values, Count, and Item properties:\n&#39;   INDEX KEY                       VALUE\n&#39;   0     red                       rojo\n&#39;   1     blue                      azul\n&#39;   2     green                     verde\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_Keys\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of keys in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.ICollection Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> that provides the keys in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is unspecified, but it is the same order as the associated values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> returned by the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_Values_\" data-linktype=\"relative-path\">Values</a> method.  </p>\n<p> The returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is not a static copy; instead, the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> refers back to the keys in the original <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>. Therefore, changes to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> continue to be reflected in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the elements of a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\nvoid PrintKeysAndValues1( StringDictionary^ myCol );\nvoid PrintKeysAndValues2( StringDictionary^ myCol );\nvoid PrintKeysAndValues3( StringDictionary^ myCol );\n\nint main()\n{\n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Display the contents of the collection using for each. This is the preferred method.\n   Console::WriteLine( &quot;Displays the elements using for each:&quot; );\n   PrintKeysAndValues1( myCol );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n   PrintKeysAndValues2( myCol );\n   \n   // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n   Console::WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n   PrintKeysAndValues3( myCol );\n}\n\n// Uses the for each statement which hides the complexity of the enumerator.\n// NOTE: The for each statement is the preferred way of enumerating the contents of a collection.\nvoid PrintKeysAndValues1( StringDictionary^ myCol )  {\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   for each ( DictionaryEntry^ de in myCol )\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( StringDictionary^ myCol )\n{\n   IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   DictionaryEntry^ de;\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      de =  (DictionaryEntry^)(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n   Console::WriteLine();\n}\n\n// Uses the Keys, Values, Count, and Item properties.\nvoid PrintKeysAndValues3( StringDictionary^ myCol )\n{\n   array&lt;String^&gt;^myKeys = gcnew array&lt;String^&gt;(myCol-&gt;Count);\n   myCol-&gt;Keys-&gt;CopyTo( myKeys, 0 );\n   Console::WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[ i ], myCol[ myKeys[ i ] ] );\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using for each:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Displays the elements using foreach:&quot; );\n      PrintKeysAndValues1( myCol );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n      PrintKeysAndValues2( myCol );\n\n      // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n      PrintKeysAndValues3( myCol );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( StringDictionary myCol )  {\n      IEnumerator myEnumerator = myCol.GetEnumerator();\n      DictionaryEntry de;\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      while ( myEnumerator.MoveNext() )  {\n         de = (DictionaryEntry) myEnumerator.Current;\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys, Values, Count, and Item properties.\n   public static void PrintKeysAndValues3( StringDictionary myCol )  {\n      String[] myKeys = new String[myCol.Count];\n      myCol.Keys.CopyTo( myKeys, 0 );\n\n      Console.WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[i], myCol[myKeys[i]] );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using foreach:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Displays the elements using For Each:&quot;)\n      PrintKeysAndValues1(myCol)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Displays the elements using the IEnumerator:&quot;)\n      PrintKeysAndValues2(myCol)\n\n      &#39; Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine(&quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot;)\n      PrintKeysAndValues3(myCol)\n\n   End Sub &#39;Main\n\n\n   &#39; Uses the For Each statement which hides the complexity of the enumerator.\n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues1(myCol As StringDictionary)\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      Dim de As DictionaryEntry\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues1\n\n\n   &#39; Uses the enumerator. \n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues2(myCol As StringDictionary)\n      Dim myEnumerator As IEnumerator = myCol.GetEnumerator()\n      Dim de As DictionaryEntry\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      While myEnumerator.MoveNext()\n         de = CType(myEnumerator.Current, DictionaryEntry)\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      End While\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues2\n\n\n   &#39; Uses the Keys, Values, Count, and Item properties.\n   Public Shared Sub PrintKeysAndValues3(myCol As StringDictionary)\n      Dim myKeys(myCol.Count) As String\n      myCol.Keys.CopyTo(myKeys, 0)\n\n      Console.WriteLine(&quot;   INDEX KEY                       VALUE&quot;)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys(i), myCol(myKeys(i)))\n      Next i\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Displays the elements using For Each:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the IEnumerator:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the Keys, Values, Count, and Item properties:\n&#39;   INDEX KEY                       VALUE\n&#39;   0     red                       rojo\n&#39;   1     blue                      azul\n&#39;   2     green                     verde\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>, not directly on the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary#2\">        StringDictionary^ myCollection = gcnew StringDictionary();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary#2\">        StringDictionary myCollection = new StringDictionary();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (Object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary#2\">        Dim myCollection As New StringDictionary()\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_Values\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Values</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of values in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.ICollection Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> that provides the values in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is unspecified, but it is the same order as the associated keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> returned by the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_Keys_\" data-linktype=\"relative-path\">Keys</a> method.  </p>\n<p> The returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is not a static copy; instead, the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> refers back to the values in the original <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>. Therefore, changes to the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> continue to be reflected in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the elements of a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#2\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary\n    Public Shared Sub Main()\n        &#39; Creates and initializes a new StringDictionary.\n        Dim myCol As New StringDictionary()\n        myCol.Add( &quot;red&quot;, &quot;rojo&quot; )\n        myCol.Add( &quot;green&quot;, &quot;verde&quot; )\n        myCol.Add( &quot;blue&quot;, &quot;azul&quot; )\n\n        Console.WriteLine(&quot;VALUES&quot;)\n        For Each val As String In myCol.Values\n            Console.WriteLine(val)\n        Next val\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39;\n&#39; VALUES\n&#39; verde\n&#39; rojo\n&#39; azul\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class SamplesStringDictionary\n{\npublic:\n    static void Main()\n    {\n        // Creates and initializes a new StringDictionary.\n        StringDictionary^ myCol = gcnew StringDictionary();\n        myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n        myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n        myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n\n        Console::WriteLine(&quot;VALUES&quot;);\n        for each (String^ val in myCol-&gt;Values)\n        {\n            Console::WriteLine(val);\n        }\n    }\n};\n\nint main()\n{\n    SamplesStringDictionary::Main();\n}\n// This code produces the following output.\n// VALUE\n// verde\n// rojo\n// azul\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#2\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary\n{\n    public static void Main()\n    {\n        // Creates and initializes a new StringDictionary.\n        StringDictionary myCol = new StringDictionary();\n        myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n        myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n        myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n        Console.WriteLine(&quot;VALUES&quot;);\n        foreach (string val in myCol.Values)\n        {\n            Console.WriteLine(val);\n        }\n    }\n}\n// This code produces the following output.\n// VALUE\n// verde\n// rojo\n// azul\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_Add_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an entry with the specified key and value into the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Add (string key, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the entry to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the entry to add. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An entry with the same key already exists in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The key is handled in a case-insensitive manner; it is translated to lowercase before it is added to the string dictionary.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to add and remove elements from a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintKeysAndValues( StringDictionary^ myCol )\n{\n   Console::WriteLine( &quot;   KEY        VALUE&quot; );\n   IEnumerator^ enum0 = myCol-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      DictionaryEntry^ de = safe_cast&lt;DictionaryEntry^&gt;(enum0-&gt;Current);\n      Console::WriteLine( &quot;   {0,-10} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Displays the values in the StringDictionary.\n   Console::WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n   PrintKeysAndValues( myCol );\n   \n   // Deletes an element.\n   myCol-&gt;Remove( &quot;green&quot; );\n   Console::WriteLine( &quot;The collection contains the following elements after removing \\&quot;green\\&quot;:&quot; );\n   PrintKeysAndValues( myCol );\n   \n   // Clears the entire collection.\n   myCol-&gt;Clear();\n   Console::WriteLine( &quot;The collection contains the following elements after it is cleared:&quot; );\n   PrintKeysAndValues( myCol );\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after removing &quot;green&quot;:\n   KEY        VALUE\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after it is cleared:\n   KEY        VALUE\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Displays the values in the StringDictionary.\n      Console.WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n      PrintKeysAndValues( myCol );\n\n      // Deletes an element.\n      myCol.Remove( &quot;green&quot; );\n      Console.WriteLine( &quot;The collection contains the following elements after removing \\&quot;green\\&quot;:&quot; );\n      PrintKeysAndValues( myCol );\n\n      // Clears the entire collection.\n      myCol.Clear();\n      Console.WriteLine( &quot;The collection contains the following elements after it is cleared:&quot; );\n      PrintKeysAndValues( myCol );\n\n   }\n\n   public static void PrintKeysAndValues( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY        VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-10} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after removing &quot;green&quot;:\n   KEY        VALUE\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after it is cleared:\n   KEY        VALUE\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Displays the values in the StringDictionary.\n      Console.WriteLine(&quot;Initial contents of the StringDictionary:&quot;)\n      PrintKeysAndValues(myCol)\n\n      &#39; Deletes an element.\n      myCol.Remove(&quot;green&quot;)\n      Console.WriteLine(&quot;The collection contains the following elements after removing &quot;&quot;green&quot;&quot;:&quot;)\n      PrintKeysAndValues(myCol)\n\n      &#39; Clears the entire collection.\n      myCol.Clear()\n      Console.WriteLine(&quot;The collection contains the following elements after it is cleared:&quot;)\n      PrintKeysAndValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As StringDictionary)\n      Dim de As DictionaryEntry\n\n      Console.WriteLine(&quot;   KEY        VALUE&quot;)\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-10} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringDictionary:\n&#39;   KEY        VALUE\n&#39;   green      verde\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;\n&#39;The collection contains the following elements after removing &quot;green&quot;:\n&#39;   KEY        VALUE\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;\n&#39;The collection contains the following elements after it is cleared:\n&#39;   KEY        VALUE\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_Clear\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all entries from the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to add and remove elements from a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintKeysAndValues( StringDictionary^ myCol )\n{\n   Console::WriteLine( &quot;   KEY        VALUE&quot; );\n   IEnumerator^ enum0 = myCol-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      DictionaryEntry^ de = safe_cast&lt;DictionaryEntry^&gt;(enum0-&gt;Current);\n      Console::WriteLine( &quot;   {0,-10} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Displays the values in the StringDictionary.\n   Console::WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n   PrintKeysAndValues( myCol );\n   \n   // Deletes an element.\n   myCol-&gt;Remove( &quot;green&quot; );\n   Console::WriteLine( &quot;The collection contains the following elements after removing \\&quot;green\\&quot;:&quot; );\n   PrintKeysAndValues( myCol );\n   \n   // Clears the entire collection.\n   myCol-&gt;Clear();\n   Console::WriteLine( &quot;The collection contains the following elements after it is cleared:&quot; );\n   PrintKeysAndValues( myCol );\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after removing &quot;green&quot;:\n   KEY        VALUE\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after it is cleared:\n   KEY        VALUE\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Displays the values in the StringDictionary.\n      Console.WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n      PrintKeysAndValues( myCol );\n\n      // Deletes an element.\n      myCol.Remove( &quot;green&quot; );\n      Console.WriteLine( &quot;The collection contains the following elements after removing \\&quot;green\\&quot;:&quot; );\n      PrintKeysAndValues( myCol );\n\n      // Clears the entire collection.\n      myCol.Clear();\n      Console.WriteLine( &quot;The collection contains the following elements after it is cleared:&quot; );\n      PrintKeysAndValues( myCol );\n\n   }\n\n   public static void PrintKeysAndValues( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY        VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-10} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after removing &quot;green&quot;:\n   KEY        VALUE\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after it is cleared:\n   KEY        VALUE\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Displays the values in the StringDictionary.\n      Console.WriteLine(&quot;Initial contents of the StringDictionary:&quot;)\n      PrintKeysAndValues(myCol)\n\n      &#39; Deletes an element.\n      myCol.Remove(&quot;green&quot;)\n      Console.WriteLine(&quot;The collection contains the following elements after removing &quot;&quot;green&quot;&quot;:&quot;)\n      PrintKeysAndValues(myCol)\n\n      &#39; Clears the entire collection.\n      myCol.Clear()\n      Console.WriteLine(&quot;The collection contains the following elements after it is cleared:&quot;)\n      PrintKeysAndValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As StringDictionary)\n      Dim de As DictionaryEntry\n\n      Console.WriteLine(&quot;   KEY        VALUE&quot;)\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-10} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringDictionary:\n&#39;   KEY        VALUE\n&#39;   green      verde\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;\n&#39;The collection contains the following elements after removing &quot;green&quot;:\n&#39;   KEY        VALUE\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;\n&#39;The collection contains the following elements after it is cleared:\n&#39;   KEY        VALUE\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_ContainsKey_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_ContainsKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsKey(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines if the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> contains a specific key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ContainsKey (string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> contains an entry with the specified key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The key is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The key is handled in a case-insensitive manner; it is translated to lowercase before it is used.  </p>\n<p> This method is an O(1) operation.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether <code>item</code> exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example searches for an element in a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_Contains#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintKeysAndValues( StringDictionary^ myCol )\n{\n   Console::WriteLine( &quot;   KEY        VALUE&quot; );\n   IEnumerator^ enum0 = myCol-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      DictionaryEntry^ de = safe_cast&lt;DictionaryEntry^&gt;(enum0-&gt;Current);\n      Console::WriteLine( &quot;   {0,-10} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Displays the values in the StringDictionary.\n   Console::WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n   PrintKeysAndValues( myCol );\n   \n   // Searches for a key.\n   if ( myCol-&gt;ContainsKey( &quot;red&quot; ) )\n      Console::WriteLine( &quot;The collection contains the key \\&quot;red\\&quot;.&quot; );\n   else\n      Console::WriteLine( &quot;The collection does not contain the key \\&quot;red\\&quot;.&quot; );\n\n   Console::WriteLine();\n   \n   // Searches for a value.\n   if ( myCol-&gt;ContainsValue( &quot;amarillo&quot; ) )\n      Console::WriteLine( &quot;The collection contains the value \\&quot;amarillo\\&quot;.&quot; );\n   else\n      Console::WriteLine( &quot;The collection does not contain the value \\&quot;amarillo\\&quot;.&quot; );\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the key &quot;red&quot;.\n\nThe collection does not contain the value &quot;amarillo&quot;.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_Contains#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Displays the values in the StringDictionary.\n      Console.WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n      PrintKeysAndValues( myCol );\n\n      // Searches for a key.\n      if ( myCol.ContainsKey( &quot;red&quot; ) )\n         Console.WriteLine( &quot;The collection contains the key \\&quot;red\\&quot;.&quot; );\n      else\n         Console.WriteLine( &quot;The collection does not contain the key \\&quot;red\\&quot;.&quot; );\n      Console.WriteLine();\n\n      // Searches for a value.\n      if ( myCol.ContainsValue( &quot;amarillo&quot; ) )\n         Console.WriteLine( &quot;The collection contains the value \\&quot;amarillo\\&quot;.&quot; );\n      else\n         Console.WriteLine( &quot;The collection does not contain the value \\&quot;amarillo\\&quot;.&quot; );\n      Console.WriteLine();\n\n   }\n\n   public static void PrintKeysAndValues( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY        VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-10} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the key &quot;red&quot;.\n\nThe collection does not contain the value &quot;amarillo&quot;.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_Contains#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Displays the values in the StringDictionary.\n      Console.WriteLine(&quot;Initial contents of the StringDictionary:&quot;)\n      PrintKeysAndValues(myCol)\n\n      &#39; Searches for a key.\n      If myCol.ContainsKey(&quot;red&quot;) Then\n         Console.WriteLine(&quot;The collection contains the key &quot;&quot;red&quot;&quot;.&quot;)\n      Else\n         Console.WriteLine(&quot;The collection does not contain the key &quot;&quot;red&quot;&quot;.&quot;)\n      End If\n      Console.WriteLine()\n\n      &#39; Searches for a value.\n      If myCol.ContainsValue(&quot;amarillo&quot;) Then\n         Console.WriteLine(&quot;The collection contains the value &quot;&quot;amarillo&quot;&quot;.&quot;)\n      Else\n         Console.WriteLine(&quot;The collection does not contain the value &quot;&quot;amarillo&quot;&quot;.&quot;)\n      End If\n      Console.WriteLine()\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As StringDictionary)\n      Dim de As DictionaryEntry\n\n      Console.WriteLine(&quot;   KEY        VALUE&quot;)\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-10} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringDictionary:\n&#39;   KEY        VALUE\n&#39;   green      verde\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;\n&#39;The collection contains the key &quot;red&quot;.\n&#39;\n&#39;The collection does not contain the value &quot;amarillo&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_ContainsValue_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_ContainsValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsValue(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines if the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> contains a specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ContainsValue (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to locate in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> contains an element with the specified value; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The values of the elements of the StringDictionary are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<p> This method performs a linear search; therefore, the average execution time is proportional to <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_Count_\" data-linktype=\"relative-path\">Count</a>. That is, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether <code>item</code> exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example searches for an element in a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_Contains#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintKeysAndValues( StringDictionary^ myCol )\n{\n   Console::WriteLine( &quot;   KEY        VALUE&quot; );\n   IEnumerator^ enum0 = myCol-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      DictionaryEntry^ de = safe_cast&lt;DictionaryEntry^&gt;(enum0-&gt;Current);\n      Console::WriteLine( &quot;   {0,-10} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Displays the values in the StringDictionary.\n   Console::WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n   PrintKeysAndValues( myCol );\n   \n   // Searches for a key.\n   if ( myCol-&gt;ContainsKey( &quot;red&quot; ) )\n      Console::WriteLine( &quot;The collection contains the key \\&quot;red\\&quot;.&quot; );\n   else\n      Console::WriteLine( &quot;The collection does not contain the key \\&quot;red\\&quot;.&quot; );\n\n   Console::WriteLine();\n   \n   // Searches for a value.\n   if ( myCol-&gt;ContainsValue( &quot;amarillo&quot; ) )\n      Console::WriteLine( &quot;The collection contains the value \\&quot;amarillo\\&quot;.&quot; );\n   else\n      Console::WriteLine( &quot;The collection does not contain the value \\&quot;amarillo\\&quot;.&quot; );\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the key &quot;red&quot;.\n\nThe collection does not contain the value &quot;amarillo&quot;.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_Contains#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Displays the values in the StringDictionary.\n      Console.WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n      PrintKeysAndValues( myCol );\n\n      // Searches for a key.\n      if ( myCol.ContainsKey( &quot;red&quot; ) )\n         Console.WriteLine( &quot;The collection contains the key \\&quot;red\\&quot;.&quot; );\n      else\n         Console.WriteLine( &quot;The collection does not contain the key \\&quot;red\\&quot;.&quot; );\n      Console.WriteLine();\n\n      // Searches for a value.\n      if ( myCol.ContainsValue( &quot;amarillo&quot; ) )\n         Console.WriteLine( &quot;The collection contains the value \\&quot;amarillo\\&quot;.&quot; );\n      else\n         Console.WriteLine( &quot;The collection does not contain the value \\&quot;amarillo\\&quot;.&quot; );\n      Console.WriteLine();\n\n   }\n\n   public static void PrintKeysAndValues( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY        VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-10} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the key &quot;red&quot;.\n\nThe collection does not contain the value &quot;amarillo&quot;.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_Contains#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Displays the values in the StringDictionary.\n      Console.WriteLine(&quot;Initial contents of the StringDictionary:&quot;)\n      PrintKeysAndValues(myCol)\n\n      &#39; Searches for a key.\n      If myCol.ContainsKey(&quot;red&quot;) Then\n         Console.WriteLine(&quot;The collection contains the key &quot;&quot;red&quot;&quot;.&quot;)\n      Else\n         Console.WriteLine(&quot;The collection does not contain the key &quot;&quot;red&quot;&quot;.&quot;)\n      End If\n      Console.WriteLine()\n\n      &#39; Searches for a value.\n      If myCol.ContainsValue(&quot;amarillo&quot;) Then\n         Console.WriteLine(&quot;The collection contains the value &quot;&quot;amarillo&quot;&quot;.&quot;)\n      Else\n         Console.WriteLine(&quot;The collection does not contain the value &quot;&quot;amarillo&quot;&quot;.&quot;)\n      End If\n      Console.WriteLine()\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As StringDictionary)\n      Dim de As DictionaryEntry\n\n      Console.WriteLine(&quot;   KEY        VALUE&quot;)\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-10} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringDictionary:\n&#39;   KEY        VALUE\n&#39;   green      verde\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;\n&#39;The collection contains the key &quot;red&quot;.\n&#39;\n&#39;The collection does not contain the value &quot;amarillo&quot;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the string dictionary values to a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the values copied from the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index in the array where copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> is greater than the available space from <code>index</code> to the end of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CopyTo copies objects that can be typecast to <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">System.Collections.DictionaryEntry</a>. <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> contains both the key and the value.  </p>\n<p> The elements copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> are sorted in the same order that the enumerator iterates through the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringdictionary#System_Collections_Specialized_StringDictionary_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how a StringDictionary can be copied to an array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringDictionary.CopyTo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid main()\n{\n   \n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Displays the values in the StringDictionary.\n   Console::WriteLine( &quot;KEYS&nbsp;&nbsp;&nbsp;&nbsp;VALUES in the StringDictionary&quot; );\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      DictionaryEntry^ myDE = safe_cast&lt;DictionaryEntry^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myDE-&gt;Key, myDE-&gt;Value );\n      Console::WriteLine();\n      \n      // Creates an array with DictionaryEntry elements.\n      array&lt;DictionaryEntry&gt;^myArr = gcnew array&lt;DictionaryEntry&gt;(3);\n      \n      // Copies the StringDictionary to the array.\n      myCol-&gt;CopyTo( myArr, 0 );\n      \n      // Displays the values in the array.\n      Console::WriteLine( &quot;KEYS&nbsp;&nbsp;&nbsp;&nbsp;VALUES in the array&quot; );\n      for ( int i = 0; i &lt; myArr-&gt;Length; i++ )\n         Console::WriteLine( &quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myArr[ i ].Key, myArr[ i ].Value );\n      Console::WriteLine();\n   }\n}\n\n/*\nThis code produces the following output.\n\nKEYS    VALUES in the StringDictionary\ngreen   verde\nred     rojo\nblue    azul\n\nKEYS    VALUES in the array\ngreen   verde\nred     rojo\nblue    azul\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringDictionary.CopyTo#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Displays the values in the StringDictionary.\n      Console.WriteLine( &quot;KEYS&nbsp;&nbsp;&nbsp;&nbsp;VALUES in the StringDictionary&quot; );\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n\n      // Creates an array with DictionaryEntry elements.\n      DictionaryEntry[] myArr = { new DictionaryEntry(), new DictionaryEntry(), new DictionaryEntry() };\n\n      // Copies the StringDictionary to the array.\n      myCol.CopyTo( myArr, 0 );\n\n      // Displays the values in the array.\n      Console.WriteLine( &quot;KEYS&nbsp;&nbsp;&nbsp;&nbsp;VALUES in the array&quot; );\n      for ( int i = 0; i &lt; myArr.Length; i++ )\n         Console.WriteLine( &quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myArr[i].Key, myArr[i].Value );\n      Console.WriteLine();\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nKEYS    VALUES in the StringDictionary\ngreen   verde\nred     rojo\nblue    azul\n\nKEYS    VALUES in the array\ngreen   verde\nred     rojo\nblue    azul\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringDictionary.CopyTo#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports Microsoft.VisualBasic\n\nPublic Class SamplesStringDictionary\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Displays the values in the StringDictionary.\n      Console.WriteLine(&quot;KEYS&quot; + ControlChars.Tab + &quot;VALUES in the StringDictionary&quot;)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n         Console.WriteLine(&quot;{0}&quot; + ControlChars.Tab + &quot;{1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n\n      &#39; Creates an array with DictionaryEntry elements.\n      Dim myArr As DictionaryEntry() =  {New DictionaryEntry(), New DictionaryEntry(), New DictionaryEntry()}\n\n      &#39; Copies the StringDictionary to the array.\n      myCol.CopyTo(myArr, 0)\n\n      &#39; Displays the values in the array.\n      Console.WriteLine(&quot;KEYS&quot; + ControlChars.Tab + &quot;VALUES in the array&quot;)\n      Dim i As Integer\n      For i = 0 To myArr.Length - 1\n         Console.WriteLine(&quot;{0}&quot; + ControlChars.Tab + &quot;{1}&quot;, myArr(i).Key, myArr(i).Value)\n      Next i\n      Console.WriteLine()\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesStringDictionary\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;KEYS    VALUES in the StringDictionary\n&#39;green   verde\n&#39;red     rojo\n&#39;blue    azul\n&#39;\n&#39;KEYS    VALUES in the array\n&#39;green   verde\n&#39;red     rojo\n&#39;blue    azul\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the string dictionary.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates through the string dictionary.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enumerates the elements of a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\nvoid PrintKeysAndValues1( StringDictionary^ myCol );\nvoid PrintKeysAndValues2( StringDictionary^ myCol );\nvoid PrintKeysAndValues3( StringDictionary^ myCol );\n\nint main()\n{\n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Display the contents of the collection using for each. This is the preferred method.\n   Console::WriteLine( &quot;Displays the elements using for each:&quot; );\n   PrintKeysAndValues1( myCol );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n   PrintKeysAndValues2( myCol );\n   \n   // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n   Console::WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n   PrintKeysAndValues3( myCol );\n}\n\n// Uses the for each statement which hides the complexity of the enumerator.\n// NOTE: The for each statement is the preferred way of enumerating the contents of a collection.\nvoid PrintKeysAndValues1( StringDictionary^ myCol )  {\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   for each ( DictionaryEntry^ de in myCol )\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( StringDictionary^ myCol )\n{\n   IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   DictionaryEntry^ de;\n   Console::WriteLine( &quot;   KEY                       VALUE&quot; );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      de =  (DictionaryEntry^)(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-25} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n   Console::WriteLine();\n}\n\n// Uses the Keys, Values, Count, and Item properties.\nvoid PrintKeysAndValues3( StringDictionary^ myCol )\n{\n   array&lt;String^&gt;^myKeys = gcnew array&lt;String^&gt;(myCol-&gt;Count);\n   myCol-&gt;Keys-&gt;CopyTo( myKeys, 0 );\n   Console::WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[ i ], myCol[ myKeys[ i ] ] );\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using for each:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Displays the elements using foreach:&quot; );\n      PrintKeysAndValues1( myCol );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Displays the elements using the IEnumerator:&quot; );\n      PrintKeysAndValues2( myCol );\n\n      // Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine( &quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot; );\n      PrintKeysAndValues3( myCol );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( StringDictionary myCol )  {\n      IEnumerator myEnumerator = myCol.GetEnumerator();\n      DictionaryEntry de;\n      Console.WriteLine( &quot;   KEY                       VALUE&quot; );\n      while ( myEnumerator.MoveNext() )  {\n         de = (DictionaryEntry) myEnumerator.Current;\n         Console.WriteLine( &quot;   {0,-25} {1}&quot;, de.Key, de.Value );\n      }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys, Values, Count, and Item properties.\n   public static void PrintKeysAndValues3( StringDictionary myCol )  {\n      String[] myKeys = new String[myCol.Count];\n      myCol.Keys.CopyTo( myKeys, 0 );\n\n      Console.WriteLine( &quot;   INDEX KEY                       VALUE&quot; );\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys[i], myCol[myKeys[i]] );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nDisplays the elements using foreach:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the IEnumerator:\n   KEY                       VALUE\n   red                       rojo\n   blue                      azul\n   green                     verde\n\nDisplays the elements using the Keys, Values, Count, and Item properties:\n   INDEX KEY                       VALUE\n   0     red                       rojo\n   1     blue                      azul\n   2     green                     verde\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_Enumeration#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Displays the elements using For Each:&quot;)\n      PrintKeysAndValues1(myCol)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Displays the elements using the IEnumerator:&quot;)\n      PrintKeysAndValues2(myCol)\n\n      &#39; Display the contents of the collection using the Keys, Values, Count, and Item properties.\n      Console.WriteLine(&quot;Displays the elements using the Keys, Values, Count, and Item properties:&quot;)\n      PrintKeysAndValues3(myCol)\n\n   End Sub &#39;Main\n\n\n   &#39; Uses the For Each statement which hides the complexity of the enumerator.\n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues1(myCol As StringDictionary)\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      Dim de As DictionaryEntry\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues1\n\n\n   &#39; Uses the enumerator. \n   &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n   Public Shared Sub PrintKeysAndValues2(myCol As StringDictionary)\n      Dim myEnumerator As IEnumerator = myCol.GetEnumerator()\n      Dim de As DictionaryEntry\n      Console.WriteLine(&quot;   KEY                       VALUE&quot;)\n      While myEnumerator.MoveNext()\n         de = CType(myEnumerator.Current, DictionaryEntry)\n         Console.WriteLine(&quot;   {0,-25} {1}&quot;, de.Key, de.Value)\n      End While\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues2\n\n\n   &#39; Uses the Keys, Values, Count, and Item properties.\n   Public Shared Sub PrintKeysAndValues3(myCol As StringDictionary)\n      Dim myKeys(myCol.Count) As String\n      myCol.Keys.CopyTo(myKeys, 0)\n\n      Console.WriteLine(&quot;   INDEX KEY                       VALUE&quot;)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;   {0,-5} {1,-25} {2}&quot;, i, myKeys(i), myCol(myKeys(i)))\n      Next i\n      Console.WriteLine()\n   End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Displays the elements using For Each:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the IEnumerator:\n&#39;   KEY                       VALUE\n&#39;   red                       rojo\n&#39;   blue                      azul\n&#39;   green                     verde\n&#39;\n&#39;Displays the elements using the Keys, Values, Count, and Item properties:\n&#39;   INDEX KEY                       VALUE\n&#39;   0     red                       rojo\n&#39;   1     blue                      azul\n&#39;   2     green                     verde\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringDictionary_Remove_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringDictionary_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(String)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the entry with the specified key from the string dictionary.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Remove (string key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the entry to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The key is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> does not contain an element with the specified key, the <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a> remains unchanged. No exception is thrown.  </p>\n<p> The key is handled in a case-insensitive manner; it is translated to lowercase before it is used to find the entry to remove from the string dictionary.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to add and remove elements from a <a class=\"xref\" href=\"system.collections.specialized.stringdictionary\" data-linktype=\"relative-path\">StringDictionary</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintKeysAndValues( StringDictionary^ myCol )\n{\n   Console::WriteLine( &quot;   KEY        VALUE&quot; );\n   IEnumerator^ enum0 = myCol-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      DictionaryEntry^ de = safe_cast&lt;DictionaryEntry^&gt;(enum0-&gt;Current);\n      Console::WriteLine( &quot;   {0,-10} {1}&quot;, de-&gt;Key, de-&gt;Value );\n   }\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new StringDictionary.\n   StringDictionary^ myCol = gcnew StringDictionary;\n   myCol-&gt;Add( &quot;red&quot;, &quot;rojo&quot; );\n   myCol-&gt;Add( &quot;green&quot;, &quot;verde&quot; );\n   myCol-&gt;Add( &quot;blue&quot;, &quot;azul&quot; );\n   \n   // Displays the values in the StringDictionary.\n   Console::WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n   PrintKeysAndValues( myCol );\n   \n   // Deletes an element.\n   myCol-&gt;Remove( &quot;green&quot; );\n   Console::WriteLine( &quot;The collection contains the following elements after removing \\&quot;green\\&quot;:&quot; );\n   PrintKeysAndValues( myCol );\n   \n   // Clears the entire collection.\n   myCol-&gt;Clear();\n   Console::WriteLine( &quot;The collection contains the following elements after it is cleared:&quot; );\n   PrintKeysAndValues( myCol );\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after removing &quot;green&quot;:\n   KEY        VALUE\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after it is cleared:\n   KEY        VALUE\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringDictionary  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringDictionary.\n      StringDictionary myCol = new StringDictionary();\n      myCol.Add( &quot;red&quot;, &quot;rojo&quot; );\n      myCol.Add( &quot;green&quot;, &quot;verde&quot; );\n      myCol.Add( &quot;blue&quot;, &quot;azul&quot; );\n\n      // Displays the values in the StringDictionary.\n      Console.WriteLine( &quot;Initial contents of the StringDictionary:&quot; );\n      PrintKeysAndValues( myCol );\n\n      // Deletes an element.\n      myCol.Remove( &quot;green&quot; );\n      Console.WriteLine( &quot;The collection contains the following elements after removing \\&quot;green\\&quot;:&quot; );\n      PrintKeysAndValues( myCol );\n\n      // Clears the entire collection.\n      myCol.Clear();\n      Console.WriteLine( &quot;The collection contains the following elements after it is cleared:&quot; );\n      PrintKeysAndValues( myCol );\n\n   }\n\n   public static void PrintKeysAndValues( StringDictionary myCol )  {\n      Console.WriteLine( &quot;   KEY        VALUE&quot; );\n      foreach ( DictionaryEntry de in myCol )\n         Console.WriteLine( &quot;   {0,-10} {1}&quot;, de.Key, de.Value );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringDictionary:\n   KEY        VALUE\n   green      verde\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after removing &quot;green&quot;:\n   KEY        VALUE\n   red        rojo\n   blue       azul\n\nThe collection contains the following elements after it is cleared:\n   KEY        VALUE\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collection.Specialized.StringDictionary_AddRemove#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringDictionary   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringDictionary.\n      Dim myCol As New StringDictionary()\n      myCol.Add(&quot;red&quot;, &quot;rojo&quot;)\n      myCol.Add(&quot;green&quot;, &quot;verde&quot;)\n      myCol.Add(&quot;blue&quot;, &quot;azul&quot;)\n\n      &#39; Displays the values in the StringDictionary.\n      Console.WriteLine(&quot;Initial contents of the StringDictionary:&quot;)\n      PrintKeysAndValues(myCol)\n\n      &#39; Deletes an element.\n      myCol.Remove(&quot;green&quot;)\n      Console.WriteLine(&quot;The collection contains the following elements after removing &quot;&quot;green&quot;&quot;:&quot;)\n      PrintKeysAndValues(myCol)\n\n      &#39; Clears the entire collection.\n      myCol.Clear()\n      Console.WriteLine(&quot;The collection contains the following elements after it is cleared:&quot;)\n      PrintKeysAndValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As StringDictionary)\n      Dim de As DictionaryEntry\n\n      Console.WriteLine(&quot;   KEY        VALUE&quot;)\n      For Each de In  myCol\n         Console.WriteLine(&quot;   {0,-10} {1}&quot;, de.Key, de.Value)\n      Next de\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesStringDictionary \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringDictionary:\n&#39;   KEY        VALUE\n&#39;   green      verde\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;\n&#39;The collection contains the following elements after removing &quot;green&quot;:\n&#39;   KEY        VALUE\n&#39;   red        rojo\n&#39;   blue       azul\n&#39;\n&#39;The collection contains the following elements after it is cleared:\n&#39;   KEY        VALUE\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Specialized.StringDictionary.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Specialized.StringDictionary.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.ContainsKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.ContainsValue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringDictionary.Values\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"347315a3-47b3-766f-08e2-03afaea03802\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.Specialized\\StringDictionary.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements a hash table with the key and the value strongly typed to be strings rather than objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Specialized/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Specialized.StringDictionary\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Specialized.StringDictionary.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Specialized.StringDictionary.yml","open_to_public_contributors":true,"api_name":["System.Collections.Specialized.StringDictionary","System.Collections.Specialized.StringDictionary..ctor","System.Collections.Specialized.StringDictionary.Add","System.Collections.Specialized.StringDictionary.Clear","System.Collections.Specialized.StringDictionary.ContainsKey","System.Collections.Specialized.StringDictionary.ContainsValue","System.Collections.Specialized.StringDictionary.CopyTo","System.Collections.Specialized.StringDictionary.Count","System.Collections.Specialized.StringDictionary.GetEnumerator","System.Collections.Specialized.StringDictionary.IsSynchronized","System.Collections.Specialized.StringDictionary.Item","System.Collections.Specialized.StringDictionary.Keys","System.Collections.Specialized.StringDictionary.Remove","System.Collections.Specialized.StringDictionary.SyncRoot","System.Collections.Specialized.StringDictionary.Values"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Specialized.StringDictionary","System::Collections::Specialized::StringDictionary","System.Collections.Specialized.StringDictionary.#ctor","System::Collections::Specialized::StringDictionary::#ctor","System.Collections.Specialized.StringDictionary.Add","System::Collections::Specialized::StringDictionary::Add","System.Collections.Specialized.StringDictionary.Clear","System::Collections::Specialized::StringDictionary::Clear","System.Collections.Specialized.StringDictionary.ContainsKey","System::Collections::Specialized::StringDictionary::ContainsKey","System.Collections.Specialized.StringDictionary.ContainsValue","System::Collections::Specialized::StringDictionary::ContainsValue","System.Collections.Specialized.StringDictionary.CopyTo","System::Collections::Specialized::StringDictionary::CopyTo","System.Collections.Specialized.StringDictionary.Count","System::Collections::Specialized::StringDictionary::Count","System.Collections.Specialized.StringDictionary.GetEnumerator","System::Collections::Specialized::StringDictionary::GetEnumerator","System.Collections.Specialized.StringDictionary.IsSynchronized","System::Collections::Specialized::StringDictionary::IsSynchronized","System.Collections.Specialized.StringDictionary.Item","System::Collections::Specialized::StringDictionary::Item","System.Collections.Specialized.StringDictionary.Keys","System::Collections::Specialized::StringDictionary::Keys","System.Collections.Specialized.StringDictionary.Remove","System::Collections::Specialized::StringDictionary::Remove","System.Collections.Specialized.StringDictionary.SyncRoot","System::Collections::Specialized::StringDictionary::SyncRoot","System.Collections.Specialized.StringDictionary.Values","System::Collections::Specialized::StringDictionary::Values"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"347315a3-47b3-766f-08e2-03afaea03802","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.Specialized\\StringDictionary.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Specialized/StringDictionary.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StringDictionary class | Microsoft Docs","_op_ogTitle":"StringDictionary class","description":"Implements a hash table with the key and the value strongly typed to be strings rather than objects.\n","toc_asset_id":"_splitted/System.Collections.Specialized/toc.json","toc_rel":"_splitted/System.Collections.Specialized/toc.json","source_url":"","ms.assetid":"System.Collections.Specialized.StringDictionary","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.specialized.stringdictionary","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.specialized.stringdictionary","fileRelativePath":"System.Collections.Specialized.StringDictionary.html"},"themesRelativePathToOutputRoot":"_themes/"}