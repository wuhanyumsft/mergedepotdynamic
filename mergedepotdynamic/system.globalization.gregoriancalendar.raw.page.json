{"content":"    \r\n    <h1 id=\"System_Globalization_GregorianCalendar\">\r\n      <span class=\"lang-csharp\">GregorianCalendar</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the Gregorian calendar.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class GregorianCalendar : System.Globalization.Calendar</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">System.Globalization.Calendar</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">GregorianCalendar</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddDays_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddDays(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddHours_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddHours(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddMilliseconds_System_DateTime_System_Double_\" data-linktype=\"relative-path\">AddMilliseconds(DateTime,Double)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddMinutes_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddMinutes(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddSeconds_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddSeconds(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddWeeks_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddWeeks(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_Clone\" data-linktype=\"relative-path\">Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_CurrentEra\" data-linktype=\"relative-path\">CurrentEra</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_DaysInYearBeforeMinSupportedYear\" data-linktype=\"relative-path\">DaysInYearBeforeMinSupportedYear</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInMonth_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetDaysInMonth(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInYear_System_Int32_\" data-linktype=\"relative-path\">GetDaysInYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetHour_System_DateTime_\" data-linktype=\"relative-path\">GetHour(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetLeapMonth_System_Int32_\" data-linktype=\"relative-path\">GetLeapMonth(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMilliseconds_System_DateTime_\" data-linktype=\"relative-path\">GetMilliseconds(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMinute_System_DateTime_\" data-linktype=\"relative-path\">GetMinute(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMonthsInYear_System_Int32_\" data-linktype=\"relative-path\">GetMonthsInYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetSecond_System_DateTime_\" data-linktype=\"relative-path\">GetSecond(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetWeekOfYear_System_DateTime_System_Globalization_CalendarWeekRule_System_DayOfWeek_\" data-linktype=\"relative-path\">GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapDay_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IsLeapDay(Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapMonth_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IsLeapMonth(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapYear_System_Int32_\" data-linktype=\"relative-path\">IsLeapYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsReadOnly\" data-linktype=\"relative-path\">IsReadOnly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ReadOnly_System_Globalization_Calendar_\" data-linktype=\"relative-path\">ReadOnly(Calendar)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the GregorianCalendar class recognizes only the current era (A.D. or C.E.).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For information about using the GregorianCalendar class and the other calendar classes in the .NET Framework, see <a href=\"../Topic/Working%20with%20Calendars.md\" data-linktype=\"relative-path\">Working with Calendars</a>.  </p>\n</div>\n<p> A leap year in the Gregorian calendar is defined as a year that is evenly divisible by 4, unless it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  </p>\n<p> The Gregorian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days). February has 29 days during leap years and 28 during common years.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> By default, all <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> and <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> values express dates and times in the Gregorian calendar.  </p>\n</div>\n<p> The Gregorian calendar was developed as a replacement for the Julian calendar (which is represented by the <a class=\"xref\" href=\"system.globalization.juliancalendar\" data-linktype=\"relative-path\">JulianCalendar</a> class) and was first introduced in a small number of cultures on October 15, 1582. When working with historic dates that precede a culture&#39;s adoption of the Gregorian calendar, you should use the original calendar if it is available in the .NET Framework. For example, Denmark changed from the Julian calendar to the Gregorian calendar on February 19 (in the Julian calendar) or March 1 (in the Gregorian calendar) of 1700. In this case, for dates before the adoption of the Gregorian calendar, you should use the Julian calendar. However, note that no culture offers intrinsic support for the <a class=\"xref\" href=\"system.globalization.juliancalendar\" data-linktype=\"relative-path\">JulianCalendar</a> class. You must use the <a class=\"xref\" href=\"system.globalization.juliancalendar\" data-linktype=\"relative-path\">JulianCalendar</a> class as a standalone calendar. For more information, see .  </p>\n<p> The following example illustrates that February 18, 1700 in the Julian calendar, which is the last day the Julian calendar was officially used in Denmark, is one day earlier than March 1, 1700 in the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar.Class#1\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;da-DK&quot;);\n      \n      JulianCalendar jc = new JulianCalendar();\n      DateTime lastDate = new DateTime(1700, 2, 18, jc);\n      Console.WriteLine(&quot;Last date (Gregorian): {0:d}&quot;, lastDate);\n      Console.WriteLine(&quot;Last date (Julian): {0}-{1}-{2}\\n&quot;, jc.GetDayOfMonth(lastDate),\n                        jc.GetMonth(lastDate), jc.GetYear(lastDate));\n      \n      DateTime firstDate = lastDate.AddDays(1);\n      Console.WriteLine(&quot;First date (Gregorian): {0:d}&quot;, firstDate);\n      Console.WriteLine(&quot;First date (Julian): {0}-{1}-{2}&quot;,  jc.GetDayOfMonth(firstDate),\n                        jc.GetMonth(firstDate), jc.GetYear(firstDate));\n   }\n}\n// The example displays the following output:\n//       Last date (Gregorian): 28-02-1700\n//       Last date (Julian): 18-2-1700\n//       \n//       First date (Gregorian): 01-03-1700\n//       First date (Julian): 19-2-1700\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar.Class#1\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;da-DK&quot;)\n      \n      Dim jc As New JulianCalendar()\n      Dim lastDate As New DateTime(1700, 2, 18, jc)\n      Console.WriteLine(&quot;Last date (Gregorian): {0:d}&quot;, lastDate)\n      Console.WriteLine(&quot;Last date (Julian): {0}-{1}-{2}&quot;, jc.GetDayOfMonth(lastDate),\n                        jc.GetMonth(lastDate), jc.GetYear(lastDate))\n      Console.WriteLine()\n      \n      Dim firstDate As DateTime = lastDate.AddDays(1)\n      Console.WriteLine(&quot;First date (Gregorian): {0:d}&quot;, firstDate)\n      Console.WriteLine(&quot;First date (Julian): {0}-{1}-{2}&quot;,  jc.GetDayOfMonth(firstDate),\n                        jc.GetMonth(firstDate), jc.GetYear(firstDate))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Last date (Gregorian): 28-02-1700\n&#39;       Last date (Julian): 18-2-1700\n&#39;       \n&#39;       First date (Gregorian): 01-03-1700\n&#39;       First date (Julian): 19-2-1700\n</code></pre><p> Each <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> supports a set of calendars. The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property returns the default calendar for the culture, and the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_OptionalCalendars_\" data-linktype=\"relative-path\">OptionalCalendars</a> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>, the application can set the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property to a new <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a>.  </p>\n<p> <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_GetEra_\" data-linktype=\"relative-path\">GetEra</a> ignores punctuation in abbreviated era names, only if the GregorianCalendar is selected in <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> and the culture uses &quot;A.D.&quot; as the era name, that is, &quot;A.D.&quot; is equivalent to &quot;AD&quot;.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar__ctor\" data-linktype=\"self-bookmark\">GregorianCalendar()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class using the default <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar__ctor_System_Globalization_GregorianCalendarTypes_\" data-linktype=\"self-bookmark\">GregorianCalendar(GregorianCalendarTypes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class using the specified <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_ADEra\" data-linktype=\"self-bookmark\">ADEra</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the current era. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_AlgorithmType\" data-linktype=\"self-bookmark\">AlgorithmType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_CalendarType\" data-linktype=\"self-bookmark\">CalendarType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value that denotes the language version of the current <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_Eras\" data-linktype=\"self-bookmark\">Eras</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of eras in the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_MaxSupportedDateTime\" data-linktype=\"self-bookmark\">MaxSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the latest date and time supported by the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_MinSupportedDateTime\" data-linktype=\"self-bookmark\">MinSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the earliest date and time supported by the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_TwoDigitYearMax\" data-linktype=\"self-bookmark\">TwoDigitYearMax</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_AddMonths_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddMonths(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of months away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_AddYears_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddYears(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of years away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetDayOfMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetDayOfWeek_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfWeek(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetDayOfYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of days in the specified month in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetDaysInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of days in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetEra_System_DateTime_\" data-linktype=\"self-bookmark\">GetEra(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetLeapMonth_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetLeapMonth(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetMonthsInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetMonthsInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of months in the specified year in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_GetYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapDay(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified date in the specified era is a leap day.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_IsLeapYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified year in the specified era is a leap year.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_GregorianCalendar_ToFourDigitYear_System_Int32_\" data-linktype=\"self-bookmark\">ToFourDigitYear(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified year to a four-digit year by using the <span class=\"xref\">stem.Globalization.GregorianCalendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar__ctor\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GregorianCalendar()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class using the default <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public GregorianCalendar ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value is <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a>. If the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a> property of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> is set to a <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> that is created with this constructor, the dates and times are localized in the language associated with the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example prints a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> using a <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> that is localized.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendarLocalized#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesGregorianCalendar\n\n   Public Shared Sub Main()\n      &#39; Creates and initializes three different CultureInfo.\n      Dim myCIdeDE As New CultureInfo(&quot;de-DE&quot;, False)\n      Dim myCIenUS As New CultureInfo(&quot;en-US&quot;, False)\n      Dim myCIfrFR As New CultureInfo(&quot;fr-FR&quot;, False)\n      Dim myCIruRU As New CultureInfo(&quot;ru-RU&quot;, False)\n\n      &#39; Creates a Localized GregorianCalendar.\n      &#39; GregorianCalendarTypes.Localized is the default when using the GregorianCalendar constructor without parameters.\n      Dim myCal = New GregorianCalendar()\n\n      &#39; Sets the DateTimeFormatInfo.Calendar property to a Localized GregorianCalendar.\n      &#39; Localized GregorianCalendar is the default calendar for de-DE, en-US, and fr-FR,\n      myCIruRU.DateTimeFormat.Calendar = myCal\n\n      &#39; Creates a DateTime.\n      Dim myDT As New DateTime(2002, 1, 3, 13, 30, 45)\n\n      &#39; Displays the DateTime.\n      Console.WriteLine(&quot;de-DE: {0}&quot;, myDT.ToString(&quot;F&quot;, myCIdeDE))\n      Console.WriteLine(&quot;en-US: {0}&quot;, myDT.ToString(&quot;F&quot;, myCIenUS))\n      Console.WriteLine(&quot;fr-FR: {0}&quot;, myDT.ToString(&quot;F&quot;, myCIfrFR))\n      Console.WriteLine(&quot;ru-RU: {0}&quot;, myDT.ToString(&quot;F&quot;, myCIruRU))\n   End Sub\nEnd Class\n&#39; This example displays the following output:\n&#39;    de-DE: Donnerstag, 3. Januar 2002 13:30:45\n&#39;    en-US: Thursday, January 03, 2002 1:30:45 PM\n&#39;    fr-FR: jeudi 3 janvier 2002 13:30:45\n&#39;    ru-RU: 3 ÑÐ½Ð²Ð°Ñ€Ñ 2002 Ð³. 13:30:45\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendarLocalized#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes four different CultureInfo objects.\n      CultureInfo myCIdeDE = new CultureInfo(&quot;de-DE&quot;, false);\n      CultureInfo myCIenUS = new CultureInfo(&quot;en-US&quot;, false);\n      CultureInfo myCIfrFR = new CultureInfo(&quot;fr-FR&quot;, false);\n      CultureInfo myCIruRU = new CultureInfo(&quot;ru-RU&quot;, false);\n\n      // Creates a Localized GregorianCalendar.\n      // GregorianCalendarTypes.Localized is the default when using the GregorianCalendar constructor without parameters.\n      Calendar myCal = new GregorianCalendar();\n\n      // Sets the DateTimeFormatInfo.Calendar property to a Localized GregorianCalendar.\n      // Localized GregorianCalendar is the default calendar for de-DE, en-US, and fr-FR,\n      myCIruRU.DateTimeFormat.Calendar = myCal;\n\n      // Creates a DateTime.\n      DateTime myDT = new DateTime( 2002, 1, 3, 13, 30, 45 );\n\n      // Displays the DateTime.\n      Console.WriteLine( &quot;de-DE: {0}&quot;, myDT.ToString( &quot;F&quot;, myCIdeDE ) );\n      Console.WriteLine( &quot;en-US: {0}&quot;, myDT.ToString( &quot;F&quot;, myCIenUS ) );\n      Console.WriteLine( &quot;fr-FR: {0}&quot;, myDT.ToString( &quot;F&quot;, myCIfrFR ) );\n      Console.WriteLine( &quot;ru-RU: {0}&quot;, myDT.ToString( &quot;F&quot;, myCIruRU ) );\n   }\n}\n/*\nThe example displays the following output:\n   de-DE: Donnerstag, 3. Januar 2002 13:30:45\n   en-US: Thursday, January 03, 2002 1:30:45 PM\n   fr-FR: jeudi 3 janvier 2002 13:30:45\n   ru-RU: 3 ÑÐ½Ð²Ð°Ñ€Ñ 2002 Ð³. 13:30:45\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendarLocalized#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes three different CultureInfo.\n   CultureInfo^ myCIdeDE = gcnew CultureInfo( &quot;de-DE&quot;,false );\n   CultureInfo^ myCIenUS = gcnew CultureInfo( &quot;en-US&quot;,false );\n   CultureInfo^ myCIfrFR = gcnew CultureInfo( &quot;fr-FR&quot;,false );\n   CultureInfo^ myCIruRU = gcnew CultureInfo( &quot;ru-RU&quot;,false );\n   \n   // Creates a Localized GregorianCalendar.\n   // GregorianCalendarTypes::Localized is the default when using the GregorianCalendar constructor with-&gt;Item[Out] parameters.\n   Calendar^ myCal = gcnew GregorianCalendar;\n   \n   // Sets the DateTimeFormatInfo::Calendar property to a Localized GregorianCalendar.\n   // Localized GregorianCalendar is the default calendar for de-DE, en-US, and fr-FR,\n   myCIruRU-&gt;DateTimeFormat-&gt;Calendar = myCal;\n   \n   // Creates a DateTime.\n   DateTime myDT = DateTime(2002,1,3,13,30,45);\n   \n   // Displays the DateTime.\n   Console::WriteLine( &quot;de-DE: {0}&quot;, myDT.ToString( &quot;F&quot;, myCIdeDE ) );\n   Console::WriteLine( &quot;en-US: {0}&quot;, myDT.ToString( &quot;F&quot;, myCIenUS ) );\n   Console::WriteLine( &quot;fr-FR: {0}&quot;, myDT.ToString( &quot;F&quot;, myCIfrFR ) );\n   Console::WriteLine( &quot;ru-RU: {0}&quot;, myDT.ToString( &quot;F&quot;, myCIruRU ) );\n}\n\n/*\nThe example displays the following output:\n   de-DE: Donnerstag, 3. Januar 2002 13:30:45\n   en-US: Thursday, January 03, 2002 1:30:45 PM\n   fr-FR: jeudi 3 janvier 2002 13:30:45\n   ru-RU: 3 ÑÐ½Ð²Ð°Ñ€Ñ 2002 Ð³. 13:30:45\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar__ctor_System_Globalization_GregorianCalendarTypes_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GregorianCalendar(GregorianCalendarTypes)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class using the specified <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public GregorianCalendar (System.Globalization.GregorianCalendarTypes type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value that denotes which language version of the calendar to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is not a member of the <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_ADEra\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ADEra</div>        \r\n          </div>\r\n    \r\n            <p>Represents the current era. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int ADEra = 1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class recognizes only the current era (A.D. or C.E.). This field always returns 1.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_AlgorithmType\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_AlgorithmType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlgorithmType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a></div>\r\n                  </div>\r\n                  <p>Always returns <a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses reflection to instantiate each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> type found in the .NET Framework and displays the value of its <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AlgorithmType_\" data-linktype=\"relative-path\">AlgorithmType</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AlgorithmType#1\">using System;\nusing System.Collections;\nusing System.Globalization;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = Assembly.GetAssembly(typeof(Calendar));\n      Type[] types = assem.GetExportedTypes();\n      Type[] calendars = Array.FindAll(types, IsValidCalendar);\n      Array.Sort(calendars, new CalendarComparer());\n\n      Console.WriteLine(&quot;{0,-30} {1}<br>&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;);\n      foreach (var cal in calendars) {\n         // Instantiate a calendar object.\n         ConstructorInfo ctor = cal.GetConstructor( new Type[] {} );\n         Calendar calObj = (Calendar) ctor.Invoke( new Type[] {} ); \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty,\n                                           null, calObj, null));\n      }\n   }\n\n   private static bool IsValidCalendar(Type t)\n   {\n        if (t.IsSubclassOf(typeof(Calendar)))\n            if (t.IsAbstract)\n                return false;\n            else\n                return true;\n        else\n            return false;\n   }\n}\n\npublic class CalendarComparer : IComparer\n{\n   public int Compare(object x, object y)\n   {\n      Type tX = (Type) x;\n      Type tY = (Type) y;\n\n      return tX.Name.CompareTo(tY.Name);\n   }\n}\n// The example displays the following output:\n//       Calendar                       Algorithm Type\n//       \n//       ChineseLunisolarCalendar       LunisolarCalendar\n//       GregorianCalendar              SolarCalendar\n//       HebrewCalendar                 LunisolarCalendar\n//       HijriCalendar                  LunarCalendar\n//       JapaneseCalendar               SolarCalendar\n//       JapaneseLunisolarCalendar      LunisolarCalendar\n//       JulianCalendar                 SolarCalendar\n//       KoreanCalendar                 SolarCalendar\n//       KoreanLunisolarCalendar        LunisolarCalendar\n//       PersianCalendar                SolarCalendar\n//       TaiwanCalendar                 SolarCalendar\n//       TaiwanLunisolarCalendar        LunisolarCalendar\n//       ThaiBuddhistCalendar           SolarCalendar\n//       UmAlQuraCalendar               LunarCalendar\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AlgorithmType#1\">Imports System.Collections\nImports System.Globalization\nImports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = Assembly.GetAssembly(GetType(Calendar))\n      Dim types() As Type = assem.GetExportedTypes()\n      Dim calendars() As Type = Array.FindAll(types, AddressOf IsValidCalendar)\n      Array.Sort(calendars, New CalendarComparer())\n\n      Console.WriteLine(&quot;{0,-30} {1}&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;)\n      Console.WriteLine()\n      For Each cal In calendars\n         &#39; Instantiate a calendar object.\n         Dim ctor As ConstructorInfo = cal.GetConstructor( {} )\n         Dim calObj As Calendar = CType(ctor.Invoke( {} ), Calendar) \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.GetProperty,\n                                           Nothing, calObj, Nothing))\n      Next\n   End Sub\n   \n   Private Function IsValidCalendar(ByVal t As Type) As Boolean\n        If t.IsSubClassOf(GetType(Calendar)) Then\n            If t.IsAbstract Then\n                Return False\n            Else\n                Return True\n            End If\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n\nPublic Class CalendarComparer : Implements IComparer\n   Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer _\n                  Implements IComparer.Compare\n      Dim tX As Type = DirectCast(x, Type)\n      Dim tY As Type = DirectCast(y, Type)\n\n      Return tX.Name.CompareTo(tY.Name)\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;       Calendar                       Algorithm Type\n&#39;       \n&#39;       ChineseLunisolarCalendar       LunisolarCalendar\n&#39;       GregorianCalendar              SolarCalendar\n&#39;       HebrewCalendar                 LunisolarCalendar\n&#39;       HijriCalendar                  LunarCalendar\n&#39;       JapaneseCalendar               SolarCalendar\n&#39;       JapaneseLunisolarCalendar      LunisolarCalendar\n&#39;       JulianCalendar                 SolarCalendar\n&#39;       KoreanCalendar                 SolarCalendar\n&#39;       KoreanLunisolarCalendar        LunisolarCalendar\n&#39;       PersianCalendar                SolarCalendar\n&#39;       TaiwanCalendar                 SolarCalendar\n&#39;       TaiwanLunisolarCalendar        LunisolarCalendar\n&#39;       ThaiBuddhistCalendar           SolarCalendar\n&#39;       UmAlQuraCalendar               LunarCalendar\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_CalendarType\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_CalendarType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CalendarType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value that denotes the language version of the current <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Globalization.GregorianCalendarTypes CalendarType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> value that denotes the language version of the current <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified in a set operation is not a member of the <a class=\"xref\" href=\"system.globalization.gregoriancalendartypes\" data-linktype=\"relative-path\">GregorianCalendarTypes</a> enumeration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the current instance is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to determine the GregorianCalendar language version supported by the culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendarTypes#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCultureInfo\n\n   Public Shared Sub Main()\n\n      &#39; Gets the calendars supported by the ar-SA culture.\n      Dim myOptCals As Calendar() = New CultureInfo(&quot;ar-SA&quot;).OptionalCalendars\n\n      &#39; Checks which ones are GregorianCalendar then determines the GregorianCalendar version.\n      Console.WriteLine(&quot;The ar-SA culture supports the following calendars:&quot;)\n      Dim cal As Calendar\n      For Each cal In  myOptCals\n         If cal.GetType() Is GetType(GregorianCalendar)  Then\n            Dim myGreCal As GregorianCalendar = CType(cal, GregorianCalendar)\n            Dim calType As GregorianCalendarTypes = myGreCal.CalendarType\n            Console.WriteLine(&quot;   {0} ({1})&quot;, cal, calType)\n         Else\n            Console.WriteLine(&quot;   {0}&quot;, cal)\n         End If\n      Next cal\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCultureInfo\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The ar-SA culture supports the following calendars:\n&#39;   System.Globalization.HijriCalendar\n&#39;   System.Globalization.GregorianCalendar (USEnglish)\n&#39;   System.Globalization.GregorianCalendar (MiddleEastFrench)\n&#39;   System.Globalization.GregorianCalendar (Arabic)\n&#39;   System.Globalization.GregorianCalendar (Localized)\n&#39;   System.Globalization.GregorianCalendar (TransliteratedFrench)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendarTypes#1\">using namespace System;\nusing namespace System::Globalization;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Calendar* myOptCals[] = new CultureInfo(S&quot;ar-SA&quot;) -&gt; OptionalCalendars;\n   CultureInfo^ MyCI = gcnew CultureInfo( &quot;ar-SA&quot; );\n   array&lt;Calendar^&gt;^myOptCals = MyCI-&gt;OptionalCalendars;\n   \n   // Checks which ones are GregorianCalendar then determines the GregorianCalendar version.\n   Console::WriteLine( &quot;The ar-SA culture supports the following calendars:&quot; );\n   IEnumerator^ myEnum = myOptCals-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Calendar^ cal = safe_cast&lt;Calendar^&gt;(myEnum-&gt;Current);\n      if ( cal-&gt;GetType() == GregorianCalendar::typeid )\n      {\n         GregorianCalendar^ myGreCal = dynamic_cast&lt;GregorianCalendar^&gt;(cal);\n         GregorianCalendarTypes calType = myGreCal-&gt;CalendarType;\n         Console::WriteLine( &quot; {0} ( {1})&quot;, cal, calType );\n      }\n      else\n            Console::WriteLine( &quot; {0}&quot;, cal );\n   }\n}\n\n/*\nThis code produces the following output.\n\nThe ar-SA culture supports the following calendars:\n System.Globalization.HijriCalendar\n System.Globalization.GregorianCalendar ( USEnglish)\n System.Globalization.GregorianCalendar ( MiddleEastFrench)\n System.Globalization.GregorianCalendar ( Arabic)\n System.Globalization.GregorianCalendar ( Localized)\n System.Globalization.GregorianCalendar ( TransliteratedFrench)\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendarTypes#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCultureInfo  {\n\n   public static void Main()  {\n\n      // Gets the calendars supported by the ar-SA culture.\n      Calendar[] myOptCals = new CultureInfo(&quot;ar-SA&quot;).OptionalCalendars;\n\n      // Checks which ones are GregorianCalendar then determines the GregorianCalendar version.\n      Console.WriteLine( &quot;The ar-SA culture supports the following calendars:&quot; );\n      foreach ( Calendar cal in myOptCals )  {\n         if ( cal.GetType() == typeof( GregorianCalendar ) )  {\n            GregorianCalendar myGreCal = (GregorianCalendar) cal;\n            GregorianCalendarTypes calType = myGreCal.CalendarType;\n            Console.WriteLine( &quot;   {0} ({1})&quot;, cal, calType );\n         }\n         else  {\n            Console.WriteLine( &quot;   {0}&quot;, cal );\n         }\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nThe ar-SA culture supports the following calendars:\n   System.Globalization.HijriCalendar\n   System.Globalization.GregorianCalendar (USEnglish)\n   System.Globalization.GregorianCalendar (MiddleEastFrench)\n   System.Globalization.GregorianCalendar (Arabic)\n   System.Globalization.GregorianCalendar (Localized)\n   System.Globalization.GregorianCalendar (TransliteratedFrench)\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_Eras\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_Eras_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Eras</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of eras in the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int[] Eras { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </div>\r\n                  <p>An array of integers that represents the eras in the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class recognizes only the current era (A.D. or C.E.). This property always returns an array with only one element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_MaxSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_MaxSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the latest date and time supported by the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime MaxSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The latest date and time supported by the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> type, which is the last moment of December 31, 9999 C.E. and is equivalent to <a class=\"xref\" href=\"system.datetime#System_DateTime_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets the minimum value and the maximum value of the calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_MinMax#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Create an instance of the calendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n      Console.WriteLine( myCal.ToString() );\n\n      // Display the MinSupportedDateTime.\n      DateTime myMin = myCal.MinSupportedDateTime;\n      Console.WriteLine( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin) );\n\n      // Display the MaxSupportedDateTime.\n      DateTime myMax = myCal.MaxSupportedDateTime;\n      Console.WriteLine( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.GregorianCalendar\nMinSupportedDateTime: 01/01/0001\nMaxSupportedDateTime: 12/31/9999\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_MinMax#1\">using namespace System;\nusing namespace System::Globalization;\n\nint main()\n{\n   // Create an instance of the calendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   Console::WriteLine( myCal );\n   \n   // Display the MinSupportedDateTime.\n   DateTime myMin = myCal-&gt;MinSupportedDateTime;\n   Console::WriteLine( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMin ), myCal-&gt;GetDayOfMonth( myMin ), myCal-&gt;GetYear( myMin ) );\n   \n   // Display the MaxSupportedDateTime.\n   DateTime myMax = myCal-&gt;MaxSupportedDateTime;\n   Console::WriteLine( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMax ), myCal-&gt;GetDayOfMonth( myMax ), myCal-&gt;GetYear( myMax ) );\n}\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.GregorianCalendar\nMinSupportedDateTime: 01/01/0001\nMaxSupportedDateTime: 12/31/9999\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_MinMax#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Create an instance of the calendar.\n      Dim myCal As New GregorianCalendar()\n      Console.WriteLine(myCal.ToString())\n\n      &#39; Display the MinSupportedDateTime.\n      Dim myMin As DateTime = myCal.MinSupportedDateTime\n      Console.WriteLine(&quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin))\n\n      &#39; Display the MaxSupportedDateTime.\n      Dim myMax As DateTime = myCal.MaxSupportedDateTime\n      Console.WriteLine(&quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCalendar\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Globalization.GregorianCalendar\n&#39;MinSupportedDateTime: 01/01/0001\n&#39;MaxSupportedDateTime: 12/31/9999\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_MinSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_MinSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the earliest date and time supported by the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime MinSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The earliest date and time supported by the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> type, which is the first moment of January 1, 0001 C.E. and is equivalent to <a class=\"xref\" href=\"system.datetime#System_DateTime_MinValue\" data-linktype=\"relative-path\">MinValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although the value of the MinSupportedDateTime property is the first moment of January 1, 0001 C.E., the Gregorian calendar was not introduced until October 15, 1582, and its adoption throughout the European continent and worldwide was slow. Until they adopted the Gregorian calendar, most cultures in the European, American, and Australian continents used the Julian calendar, which is represented by the <a class=\"xref\" href=\"system.globalization.juliancalendar\" data-linktype=\"relative-path\">JulianCalendar</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets the minimum value and the maximum value of the calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_MinMax#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesCalendar  {\n\n   public static void Main()  {\n\n      // Create an instance of the calendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n      Console.WriteLine( myCal.ToString() );\n\n      // Display the MinSupportedDateTime.\n      DateTime myMin = myCal.MinSupportedDateTime;\n      Console.WriteLine( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin) );\n\n      // Display the MaxSupportedDateTime.\n      DateTime myMax = myCal.MaxSupportedDateTime;\n      Console.WriteLine( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax) );\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.GregorianCalendar\nMinSupportedDateTime: 01/01/0001\nMaxSupportedDateTime: 12/31/9999\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_MinMax#1\">using namespace System;\nusing namespace System::Globalization;\n\nint main()\n{\n   // Create an instance of the calendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   Console::WriteLine( myCal );\n   \n   // Display the MinSupportedDateTime.\n   DateTime myMin = myCal-&gt;MinSupportedDateTime;\n   Console::WriteLine( &quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMin ), myCal-&gt;GetDayOfMonth( myMin ), myCal-&gt;GetYear( myMin ) );\n   \n   // Display the MaxSupportedDateTime.\n   DateTime myMax = myCal-&gt;MaxSupportedDateTime;\n   Console::WriteLine( &quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal-&gt;GetMonth( myMax ), myCal-&gt;GetDayOfMonth( myMax ), myCal-&gt;GetYear( myMax ) );\n}\n\n/*\nThis code produces the following output.\n\nSystem.Globalization.GregorianCalendar\nMinSupportedDateTime: 01/01/0001\nMaxSupportedDateTime: 12/31/9999\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_MinMax#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Create an instance of the calendar.\n      Dim myCal As New GregorianCalendar()\n      Console.WriteLine(myCal.ToString())\n\n      &#39; Display the MinSupportedDateTime.\n      Dim myMin As DateTime = myCal.MinSupportedDateTime\n      Console.WriteLine(&quot;MinSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMin), myCal.GetDayOfMonth(myMin), myCal.GetYear(myMin))\n\n      &#39; Display the MaxSupportedDateTime.\n      Dim myMax As DateTime = myCal.MaxSupportedDateTime\n      Console.WriteLine(&quot;MaxSupportedDateTime: {0:D2}/{1:D2}/{2:D4}&quot;, myCal.GetMonth(myMax), myCal.GetDayOfMonth(myMax), myCal.GetYear(myMax))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesCalendar\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.Globalization.GregorianCalendar\n&#39;MinSupportedDateTime: 01/01/0001\n&#39;MaxSupportedDateTime: 12/31/9999\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_TwoDigitYearMax\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_TwoDigitYearMax_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TwoDigitYearMax</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int TwoDigitYearMax { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified in a set operation is less than 99.  </p>\n<p> -or-  </p>\n<p> The value specified in a set operation is greater than <code>MaxSupportedDateTime.Year</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the current instance is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  </p>\n<p> The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>. The <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class does not detect changes in the system settings automatically.  </p>\n<p> The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_AddMonths_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_AddMonths_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMonths(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of months away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime AddMonths (DateTime time, int months);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add months.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>months</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of months to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of months to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>months</code> is less than -120000.  </p>\n<p> -or-  </p>\n<p> <code>months</code> is greater than 120000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. This implementation supports only the current era. Therefore, <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the <code>months</code> parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.  </p>\n<p> If the value of the <code>months</code> parameter is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesGregorianCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesGregorianCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       2002\n\n&#39;   Month:      4\n\n&#39;   DayOfYear:  93\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       2005\n\n&#39;   Month:      2\n\n&#39;   DayOfYear:  34\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Thursday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_AddYears_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_AddYears_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddYears(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is the specified number of years away from the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime AddYears (DateTime time, int years);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to which to add years.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>years</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of years to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that results from adding the specified number of years to the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is outside the supported range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. This implementation supports only the current era. Therefore, <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of <code>years</code> is 1, the resulting date will be the 28th day of February in the following year.  </p>\n<p> If <code>years</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesGregorianCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesGregorianCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       2002\n\n&#39;   Month:      4\n\n&#39;   DayOfYear:  93\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       2005\n\n&#39;   Month:      2\n\n&#39;   DayOfYear:  34\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Thursday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetDayOfMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetDayOfMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDayOfMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 31 that represents the day of the month in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesGregorianCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesGregorianCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       2002\n\n&#39;   Month:      4\n\n&#39;   DayOfYear:  93\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       2005\n\n&#39;   Month:      2\n\n&#39;   DayOfYear:  34\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Thursday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetDayOfWeek_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetDayOfWeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfWeek(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the week in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DayOfWeek GetDayOfWeek (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value that represents the day of the week in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesGregorianCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesGregorianCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       2002\n\n&#39;   Month:      4\n\n&#39;   DayOfYear:  93\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       2005\n\n&#39;   Month:      2\n\n&#39;   DayOfYear:  34\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Thursday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetDayOfYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetDayOfYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the day of the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDayOfYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 366 that represents the day of the year in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <a class=\"xref\" href=\"system.globalization.gregoriancalendar#System_Globalization_GregorianCalendar_GetDaysInYear_\" data-linktype=\"relative-path\">GetDaysInYear</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesGregorianCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesGregorianCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       2002\n\n&#39;   Month:      4\n\n&#39;   DayOfYear:  93\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       2005\n\n&#39;   Month:      2\n\n&#39;   DayOfYear:  34\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Thursday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetDaysInMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of days in the specified month in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDaysInMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 12 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified month in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, this method returns 28 or 29 for February (<code>month</code> = 2), depending on whether <code>year</code> is a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls GetDaysInMonth for the second month in each of five years in each era.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar.GetDaysInMonth#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInMonth( y, 2, GregorianCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInMonth( y, 2, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     28      28      28      29      28\nEra 1:          28      28      28      29      28\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar.GetDaysInMonth#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInMonth( y, 2, GregorianCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 2001; y &lt;= 2005; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInMonth( y, 2, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     28      28      28      29      28\nEra 1:          28      28      28      29      28\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar.GetDaysInMonth#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesGregorianCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInMonth(y, 2, GregorianCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 2001 To 2005\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInMonth(y, 2, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesGregorianCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            2001    2002    2003    2004    2005\n\n&#39;CurrentEra:     28      28      28      29      28\n\n&#39;Era 1:          28      28      28      29      28\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetDaysInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetDaysInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of days in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDaysInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, this method returns 365 or 366, depending on whether <code>year</code> is a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls GetDaysInYear for five years in each era.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar.GetDaysInYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInYear( y, GregorianCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetDaysInYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     365     365     365     366     365\nEra 1:          365     365     365     366     365\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar.GetDaysInYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInYear( y, GregorianCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 2001; y &lt;= 2005; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetDaysInYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     365     365     365     366     365\nEra 1:          365     365     365     366     365\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar.GetDaysInYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesGregorianCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInYear(y, GregorianCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 2001 To 2005\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetDaysInYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesGregorianCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            2001    2002    2003    2004    2005\n\n&#39;CurrentEra:     365     365     365     366     365\n\n&#39;Era 1:          365     365     365     366     365\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetEra_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetEra_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEra(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the era in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetEra (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the era in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <a class=\"xref\" href=\"system.globalization.gregoriancalendar\" data-linktype=\"relative-path\">GregorianCalendar</a> class recognizes only the current era (A.D. or C.E.).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesGregorianCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesGregorianCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       2002\n\n&#39;   Month:      4\n\n&#39;   DayOfYear:  93\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       2005\n\n&#39;   Month:      2\n\n&#39;   DayOfYear:  34\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Thursday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetLeapMonth_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLeapMonth(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetLeapMonth (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify either <a class=\"xref\" href=\"system.globalization.gregoriancalendar#System_Globalization_GregorianCalendar_ADEra\" data-linktype=\"relative-path\">ADEra</a> or <code>GregorianCalendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Always 0 because the Gregorian calendar does not recognize leap months.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is not <a class=\"xref\" href=\"system.globalization.gregoriancalendar#System_Globalization_GregorianCalendar_ADEra\" data-linktype=\"relative-path\">ADEra</a> or <code>GregorianCalendar.Eras[Calendar.CurrentEra]</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the month in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 to 12 that represents the month in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesGregorianCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesGregorianCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       2002\n\n&#39;   Month:      4\n\n&#39;   DayOfYear:  93\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       2005\n\n&#39;   Month:      2\n\n&#39;   DayOfYear:  34\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Thursday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetMonthsInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetMonthsInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonthsInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of months in the specified year in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMonthsInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of months in the specified year in the specified era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls GetMonthsInYear for five years in each era.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar.GetMonthsInYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Displays the value of the CurrentEra property.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetMonthsInYear( y, GregorianCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Displays the values in the Eras property.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 2001; y &lt;= 2005; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.GetMonthsInYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     12      12      12      12      12\nEra 1:          12      12      12      12      12\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar.GetMonthsInYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Displays the value of the CurrentEra property.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetMonthsInYear( y, GregorianCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Displays the values in the Eras property.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;GetMonthsInYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     12      12      12      12      12\nEra 1:          12      12      12      12      12\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar.GetMonthsInYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesGregorianCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the value of the CurrentEra property.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetMonthsInYear(y, GregorianCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Displays the values in the Eras property.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 2001 To 2005\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.GetMonthsInYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesGregorianCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            2001    2002    2003    2004    2005\n\n&#39;CurrentEra:     12      12      12      12      12\n\n&#39;Era 1:          12      12      12      12      12\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_GetYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_GetYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the year in the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the year in <code>time</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Gregorian calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      DateTime myDT = new DateTime( 2002, 4, 3, new GregorianCalendar() );\n\n      // Creates an instance of the GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n      DisplayValues( myCal, myDT );\n\n      // Adds two years and ten months.\n      myDT = myCal.AddYears( myDT, 2 );\n      myDT = myCal.AddMonths( myDT, 10 );\n\n      // Displays the values of the DateTime.\n      Console.WriteLine( &quot;After adding two years and ten months:&quot; );\n      DisplayValues( myCal, myDT );\n\n   }\n\n   public static void DisplayValues( Calendar myCal, DateTime myDT )  {\n      Console.WriteLine( &quot;   Era:        {0}&quot;, myCal.GetEra( myDT ) );\n      Console.WriteLine( &quot;   Year:       {0}&quot;, myCal.GetYear( myDT ) );\n      Console.WriteLine( &quot;   Month:      {0}&quot;, myCal.GetMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear( myDT ) );\n      Console.WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth( myDT ) );\n      Console.WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek( myDT ) );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">Imports System\nImports System.Globalization\n\n\nPublic Class SamplesGregorianCalendar   \n\n   Public Shared Sub Main()\n\n      &#39; Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n      Dim myDT As New DateTime(2002, 4, 3, New GregorianCalendar())\n\n      &#39; Creates an instance of the GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;April 3, 2002 of the Gregorian calendar:&quot;)\n      DisplayValues(myCal, myDT)\n\n      &#39; Adds two years and ten months.\n      myDT = myCal.AddYears(myDT, 2)\n      myDT = myCal.AddMonths(myDT, 10)\n\n      &#39; Displays the values of the DateTime.\n      Console.WriteLine(&quot;After adding two years and ten months:&quot;)\n      DisplayValues(myCal, myDT)\n\n   End Sub &#39;Main\n\n   Public Shared Sub DisplayValues(myCal As Calendar, myDT As DateTime)\n      Console.WriteLine(&quot;   Era:        {0}&quot;, myCal.GetEra(myDT))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, myCal.GetYear(myDT))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, myCal.GetMonth(myDT))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, myCal.GetDayOfYear(myDT))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, myCal.GetDayOfMonth(myDT))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, myCal.GetDayOfWeek(myDT))\n      Console.WriteLine()\n   End Sub &#39;DisplayValues\n\nEnd Class &#39;SamplesGregorianCalendar \n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;April 3, 2002 of the Gregorian calendar:\n\n&#39;   Era:        1\n\n&#39;   Year:       2002\n\n&#39;   Month:      4\n\n&#39;   DayOfYear:  93\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Wednesday\n\n&#39;\n\n&#39;After adding two years and ten months:\n\n&#39;   Era:        1\n\n&#39;   Year:       2005\n\n&#39;   Month:      2\n\n&#39;   DayOfYear:  34\n\n&#39;   DayOfMonth: 3\n\n&#39;   DayOfWeek:  Thursday\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar_AddGet#1\">using namespace System;\nusing namespace System::Globalization;\nvoid DisplayValues( Calendar^ myCal, DateTime myDT )\n{\n   Console::WriteLine( &quot;   Era:        {0}&quot;, myCal-&gt;GetEra( myDT ) );\n   Console::WriteLine( &quot;   Year:       {0}&quot;, myCal-&gt;GetYear( myDT ) );\n   Console::WriteLine( &quot;   Month:      {0}&quot;, myCal-&gt;GetMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfYear:  {0}&quot;, myCal-&gt;GetDayOfYear( myDT ) );\n   Console::WriteLine( &quot;   DayOfMonth: {0}&quot;, myCal-&gt;GetDayOfMonth( myDT ) );\n   Console::WriteLine( &quot;   DayOfWeek:  {0}&quot;, myCal-&gt;GetDayOfWeek( myDT ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Sets a DateTime to April 3, 2002 of the Gregorian calendar.\n   DateTime myDT = DateTime(2002,4,3,gcnew GregorianCalendar);\n   \n   // Creates an instance of the GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;April 3, 2002 of the Gregorian calendar:&quot; );\n   DisplayValues( myCal, myDT );\n   \n   // Adds two years and ten months.\n   myDT = myCal-&gt;AddYears( myDT, 2 );\n   myDT = myCal-&gt;AddMonths( myDT, 10 );\n   \n   // Displays the values of the DateTime.\n   Console::WriteLine( &quot;After adding two years and ten months:&quot; );\n   DisplayValues( myCal, myDT );\n}\n\n/*\nThis code produces the following output.\n\nApril 3, 2002 of the Gregorian calendar:\n   Era:        1\n   Year:       2002\n   Month:      4\n   DayOfYear:  93\n   DayOfMonth: 3\n   DayOfWeek:  Wednesday\n\nAfter adding two years and ten months:\n   Era:        1\n   Year:       2005\n   Month:      2\n   DayOfYear:  34\n   DayOfMonth: 3\n   DayOfWeek:  Thursday\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_IsLeapDay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapDay(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified date in the specified era is a leap day.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapDay (int year, int month, int day, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 12 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 31 that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified day is a leap day; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>day</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  </p>\n<p> A leap day is a day that occurs only in a leap year. In the Gregorian calendar, the 29th day of February is the only leap day.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar.IsLeapDay#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Creates a holder for the last day of the second month (February).\n   int iLastDay;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Checks five years in the current era.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n   {\n      iLastDay = myCal-&gt;GetDaysInMonth( y, 2, GregorianCalendar::CurrentEra );\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapDay( y, 2, iLastDay, GregorianCalendar::CurrentEra ) );\n\n   }\n   Console::WriteLine();\n   \n   // Checks five years in each of the eras.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n      {\n         iLastDay = myCal-&gt;GetDaysInMonth( y, 2, myCal-&gt;Eras[ i ] );\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapDay( y, 2, iLastDay, myCal-&gt;Eras[ i ] ) );\n\n      }\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     False   False   False   True    False\nEra 1:          False   False   False   True    False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar.IsLeapDay#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesGregorianCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Creates a holder for the last day of the second month (February).\n      Dim iLastDay As Integer\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in the current era.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 2001 To 2005\n         iLastDay = myCal.GetDaysInMonth(y, 2, GregorianCalendar.CurrentEra)\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapDay(y, 2, iLastDay, GregorianCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in each of the eras.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 2001 To 2005\n            iLastDay = myCal.GetDaysInMonth(y, 2, myCal.Eras(i))\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapDay(y, 2, iLastDay, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesGregorianCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            2001    2002    2003    2004    2005\n\n&#39;CurrentEra:     False   False   False   True    False\n\n&#39;Era 1:          False   False   False   True    False\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar.IsLeapDay#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Creates a holder for the last day of the second month (February).\n      int iLastDay;\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Checks five years in the current era.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )  {\n         iLastDay = myCal.GetDaysInMonth( y, 2, GregorianCalendar.CurrentEra );\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapDay( y, 2, iLastDay, GregorianCalendar.CurrentEra ) );\n      }\n      Console.WriteLine();\n\n      // Checks five years in each of the eras.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 2001; y &lt;= 2005; y++ )  {\n            iLastDay = myCal.GetDaysInMonth( y, 2, myCal.Eras[i] );\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapDay( y, 2, iLastDay, myCal.Eras[i] ) );\n         }\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     False   False   False   True    False\nEra 1:          False   False   False   True    False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_IsLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 12 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This method always returns <code>false</code>, unless overridden by a derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.  </p>\n<p> A leap month is an entire month that occurs only in a leap year. The Gregorian calendar does not have any leap months.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls IsLeapMonth for all the months in five years in the current era.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar.IsLeapMonth#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Checks all the months in five years in the current era.\n   int iMonthsInYear;\n   for ( int y = 2001; y &lt;= 2005; y++ )\n   {\n      Console::Write( &quot; {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, y );\n      iMonthsInYear = myCal-&gt;GetMonthsInYear( y, GregorianCalendar::CurrentEra );\n      for ( int m = 1; m &lt;= iMonthsInYear; m++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapMonth( y, m, GregorianCalendar::CurrentEra ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\n2001:           False   False   False   False   False   False   False   False   False   False   False   False\n2002:           False   False   False   False   False   False   False   False   False   False   False   False\n2003:           False   False   False   False   False   False   False   False   False   False   False   False\n2004:           False   False   False   False   False   False   False   False   False   False   False   False\n2005:           False   False   False   False   False   False   False   False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar.IsLeapMonth#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Checks all the months in five years in the current era.\n      int iMonthsInYear;\n      for ( int y = 2001; y &lt;= 2005; y++ )  {\n         Console.Write( &quot;{0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, y );\n         iMonthsInYear = myCal.GetMonthsInYear( y, GregorianCalendar.CurrentEra );\n         for ( int m = 1; m &lt;= iMonthsInYear; m++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapMonth( y, m, GregorianCalendar.CurrentEra ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\n2001:           False   False   False   False   False   False   False   False   False   False   False   False\n2002:           False   False   False   False   False   False   False   False   False   False   False   False\n2003:           False   False   False   False   False   False   False   False   False   False   False   False\n2004:           False   False   False   False   False   False   False   False   False   False   False   False\n2005:           False   False   False   False   False   False   False   False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar.IsLeapMonth#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesGregorianCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Checks all the months in five years in the current era.\n      Dim iMonthsInYear As Integer\n      Dim y As Integer\n      For y = 2001 To 2005\n         Console.Write(&quot;{0}:&quot; + ControlChars.Tab, y)\n         iMonthsInYear = myCal.GetMonthsInYear(y, GregorianCalendar.CurrentEra)\n         Dim m As Integer\n         For m = 1 To iMonthsInYear\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapMonth(y, m, GregorianCalendar.CurrentEra))\n         Next m\n         Console.WriteLine()\n      Next y\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesGregorianCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;2001:           False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;2002:           False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;2003:           False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;2004:           False   False   False   False   False   False   False   False   False   False   False   False\n\n&#39;2005:           False   False   False   False   False   False   False   False   False   False   False   False\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_IsLeapYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_IsLeapYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified year in the specified era is a leap year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified year is a leap year; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls IsLeapYear for five years in each of the eras.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.GregorianCalendar.IsLeapYear#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesGregorianCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a GregorianCalendar.\n      GregorianCalendar myCal = new GregorianCalendar();\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Checks five years in the current era.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapYear( y, GregorianCalendar.CurrentEra ) );\n      Console.WriteLine();\n\n      // Checks five years in each of the eras.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 2001; y &lt;= 2005; y++ )\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapYear( y, myCal.Eras[i] ) );\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     False   False   False   True    False\nEra 1:          False   False   False   True    False\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.GregorianCalendar.IsLeapYear#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a GregorianCalendar.\n   GregorianCalendar^ myCal = gcnew GregorianCalendar;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Checks five years in the current era.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 2001; y &lt;= 2005; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapYear( y, GregorianCalendar::CurrentEra ) );\n   Console::WriteLine();\n   \n   // Checks five years in each of the eras.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 2001; y &lt;= 2005; y++ )\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapYear( y, myCal-&gt;Eras[ i ] ) );\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            2001    2002    2003    2004    2005\nCurrentEra:     False   False   False   True    False\nEra 1:          False   False   False   True    False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.GregorianCalendar.IsLeapYear#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesGregorianCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a GregorianCalendar.\n      Dim myCal As New GregorianCalendar()\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in the current era.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 2001 To 2005\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapYear(y, GregorianCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in each of the eras.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 2001 To 2005\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapYear(y, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesGregorianCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n&#39;YEAR            2001    2002    2003    2004    2005\n\n&#39;CurrentEra:     False   False   False   True    False\n\n&#39;Era 1:          False   False   False   True    False\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 12 that represents the month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 to 31 that represents the day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hour</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 23 that represents the hour.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the minute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 59 that represents the second.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecond</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 to 999 that represents the millisecond.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer that represents the era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>year</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>month</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>day</code> is outside the range supported by the calendar.  </p>\n<p> -or-  </p>\n<p> <code>hour</code> is less than zero or greater than 23.  </p>\n<p> -or-  </p>\n<p> <code>minute</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>second</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>millisecond</code> is less than zero or greater than 999.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_GregorianCalendar_ToFourDigitYear_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_GregorianCalendar_ToFourDigitYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToFourDigitYear(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified year to a four-digit year by using the <span class=\"xref\">stem.Globalization.GregorianCalendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ToFourDigitYear (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A two-digit or four-digit integer that represents the year to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that contains the four-digit representation of <code>year</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by the calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.globalization.gregoriancalendar#System_Globalization_GregorianCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the two-digit <code>year</code> within that 100-year range. For example, if <a class=\"xref\" href=\"system.globalization.gregoriancalendar#System_Globalization_GregorianCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.  </p>\n<p> ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <a class=\"xref\" href=\"system.globalization.gregoriancalendar#System_Globalization_GregorianCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.GregorianCalendar.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.GregorianCalendar.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.AddMonths\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.AddYears\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.ADEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.AlgorithmType\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.CalendarType\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.Eras\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetDayOfMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetDayOfWeek\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetDayOfYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetDaysInMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetDaysInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetMonthsInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.GetYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.IsLeapDay\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.IsLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.IsLeapYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.MaxSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.MinSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.ToFourDigitYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.GregorianCalendar.TwoDigitYearMax\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a7bc7523-af4a-595d-14d6-0f1ec277b9d2\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\GregorianCalendar.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the Gregorian calendar.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.GregorianCalendar\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.GregorianCalendar.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.GregorianCalendar.yml","open_to_public_contributors":true,"api_name":["System.Globalization.GregorianCalendar","System.Globalization.GregorianCalendar..ctor","System.Globalization.GregorianCalendar.AddMonths","System.Globalization.GregorianCalendar.AddYears","System.Globalization.GregorianCalendar.ADEra","System.Globalization.GregorianCalendar.AlgorithmType","System.Globalization.GregorianCalendar.CalendarType","System.Globalization.GregorianCalendar.Eras","System.Globalization.GregorianCalendar.GetDayOfMonth","System.Globalization.GregorianCalendar.GetDayOfWeek","System.Globalization.GregorianCalendar.GetDayOfYear","System.Globalization.GregorianCalendar.GetDaysInMonth","System.Globalization.GregorianCalendar.GetDaysInYear","System.Globalization.GregorianCalendar.GetEra","System.Globalization.GregorianCalendar.GetLeapMonth","System.Globalization.GregorianCalendar.GetMonth","System.Globalization.GregorianCalendar.GetMonthsInYear","System.Globalization.GregorianCalendar.GetYear","System.Globalization.GregorianCalendar.IsLeapDay","System.Globalization.GregorianCalendar.IsLeapMonth","System.Globalization.GregorianCalendar.IsLeapYear","System.Globalization.GregorianCalendar.MaxSupportedDateTime","System.Globalization.GregorianCalendar.MinSupportedDateTime","System.Globalization.GregorianCalendar.ToDateTime","System.Globalization.GregorianCalendar.ToFourDigitYear","System.Globalization.GregorianCalendar.TwoDigitYearMax"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.GregorianCalendar","System::Globalization::GregorianCalendar","System.Globalization.GregorianCalendar.#ctor","System::Globalization::GregorianCalendar::#ctor","System.Globalization.GregorianCalendar.AddMonths","System::Globalization::GregorianCalendar::AddMonths","System.Globalization.GregorianCalendar.AddYears","System::Globalization::GregorianCalendar::AddYears","System.Globalization.GregorianCalendar.ADEra","System::Globalization::GregorianCalendar::ADEra","System.Globalization.GregorianCalendar.AlgorithmType","System::Globalization::GregorianCalendar::AlgorithmType","System.Globalization.GregorianCalendar.CalendarType","System::Globalization::GregorianCalendar::CalendarType","System.Globalization.GregorianCalendar.Eras","System::Globalization::GregorianCalendar::Eras","System.Globalization.GregorianCalendar.GetDayOfMonth","System::Globalization::GregorianCalendar::GetDayOfMonth","System.Globalization.GregorianCalendar.GetDayOfWeek","System::Globalization::GregorianCalendar::GetDayOfWeek","System.Globalization.GregorianCalendar.GetDayOfYear","System::Globalization::GregorianCalendar::GetDayOfYear","System.Globalization.GregorianCalendar.GetDaysInMonth","System::Globalization::GregorianCalendar::GetDaysInMonth","System.Globalization.GregorianCalendar.GetDaysInYear","System::Globalization::GregorianCalendar::GetDaysInYear","System.Globalization.GregorianCalendar.GetEra","System::Globalization::GregorianCalendar::GetEra","System.Globalization.GregorianCalendar.GetLeapMonth","System::Globalization::GregorianCalendar::GetLeapMonth","System.Globalization.GregorianCalendar.GetMonth","System::Globalization::GregorianCalendar::GetMonth","System.Globalization.GregorianCalendar.GetMonthsInYear","System::Globalization::GregorianCalendar::GetMonthsInYear","System.Globalization.GregorianCalendar.GetYear","System::Globalization::GregorianCalendar::GetYear","System.Globalization.GregorianCalendar.IsLeapDay","System::Globalization::GregorianCalendar::IsLeapDay","System.Globalization.GregorianCalendar.IsLeapMonth","System::Globalization::GregorianCalendar::IsLeapMonth","System.Globalization.GregorianCalendar.IsLeapYear","System::Globalization::GregorianCalendar::IsLeapYear","System.Globalization.GregorianCalendar.MaxSupportedDateTime","System::Globalization::GregorianCalendar::MaxSupportedDateTime","System.Globalization.GregorianCalendar.MinSupportedDateTime","System::Globalization::GregorianCalendar::MinSupportedDateTime","System.Globalization.GregorianCalendar.ToDateTime","System::Globalization::GregorianCalendar::ToDateTime","System.Globalization.GregorianCalendar.ToFourDigitYear","System::Globalization::GregorianCalendar::ToFourDigitYear","System.Globalization.GregorianCalendar.TwoDigitYearMax","System::Globalization::GregorianCalendar::TwoDigitYearMax"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a7bc7523-af4a-595d-14d6-0f1ec277b9d2","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\GregorianCalendar.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/GregorianCalendar.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GregorianCalendar class | Microsoft Docs","_op_ogTitle":"GregorianCalendar class","description":"Represents the Gregorian calendar.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.GregorianCalendar","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.gregoriancalendar","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.gregoriancalendar","fileRelativePath":"System.Globalization.GregorianCalendar.html"},"themesRelativePathToOutputRoot":"_themes/"}