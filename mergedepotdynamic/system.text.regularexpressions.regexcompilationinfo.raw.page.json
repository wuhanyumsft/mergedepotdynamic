{"content":"    \r\n    <h1 id=\"System_Text_RegularExpressions_RegexCompilationInfo\">\r\n      <span class=\"lang-csharp\">RegexCompilationInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about a regular expression that is used to compile a regular expression to a stand-alone assembly.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class RegexCompilationInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RegexCompilationInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>An array of RegexCompilationInfo objects is passed to the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method to provide information about each regular expression to be included in the assembly. Each compiled regular expression that is included in the assembly is represented as a class derived from <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a>. The properties of the RegexCompilationInfo type define the regular expression&#39;s class name, its fully qualified name (that is, its namespace and its type name), its regular expression pattern, any additional options (such as whether the regular expression is case-insensitive), and a time-out interval that specifies how long the regular expression engine should search for a match.  </p>\n<p> You can instantiate a RegexCompilationInfo object by calling its overloaded class constructor.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_RegexCompilationInfo__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">RegexCompilationInfo(String,RegexOptions,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> class that contains information about a regular expression to be included in an assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_RegexCompilationInfo__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_String_System_String_System_Boolean_System_TimeSpan_\" data-linktype=\"self-bookmark\">RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> class that contains information about a regular expression with a specified time-out value to be included in an assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_RegexCompilationInfo_IsPublic\" data-linktype=\"self-bookmark\">IsPublic</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the compiled regular expression has public visibility.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_RegexCompilationInfo_MatchTimeout\" data-linktype=\"self-bookmark\">MatchTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the regular expression&#39;s default time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_RegexCompilationInfo_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the type that represents the compiled regular expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_RegexCompilationInfo_Namespace\" data-linktype=\"self-bookmark\">Namespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the namespace to which the new type belongs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_RegexCompilationInfo_Options\" data-linktype=\"self-bookmark\">Options</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the options to use when compiling the regular expression.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_RegexCompilationInfo_Pattern\" data-linktype=\"self-bookmark\">Pattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the regular expression to compile.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_RegexCompilationInfo__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_RegexCompilationInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegexCompilationInfo(String,RegexOptions,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> class that contains information about a regular expression to be included in an assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The regular expression to compile.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The regular expression options to use when compiling the regular expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the type that represents the compiled regular expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fullnamespace</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace to which the new type belongs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ispublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the compiled regular expression publicly visible; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>pattern</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>fullnamespace</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each parameter of the RegexCompilationInfo constructor directly corresponds to a property of the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> class. Because all properties are read/write, their values can also be assigned directly.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method generates an assembly that contains compiled regular expressions. Therefore, you should not specify <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> as one of the values of <code>options</code>.  </p>\n<p> If <code>ispublic</code> is <code>true</code>, the compiled regular expression class is given public accessibility. That is, it can be instantiated from code that executes in any assembly. If <code>ispublic</code> is <code>false</code>, the compiled regular expression class is given <code>internal</code> (in C#) or <code>Friend</code> (in Visual Basic) accessibility. That is, it can be instantiated only from code that executes in the same assembly as the regular expression class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates and uses a compiled regular expression in two steps.  </p>\n<p> In the first step, compile and execute the following code example. The RegexCompilationInfo constructor in the code example defines a compiled regular expression. The result of executing the code is an assembly named FishRegex.dll that contains a compiled regular expression type named <code>FishRegex</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.txt.rgxCompInfo#1\">// This code example demonstrates the RegexCompilationInfo constructor\n// and the Regex.CompileToAssembly() method.\n// compile: csc genFishRegex.cs\n\nnamespace MyApp\n{\n    using System;\n    using System.Reflection;\n    using System.Text.RegularExpressions;\n    class GenFishRegEx\n    {\n        public static void Main()\n        {\n// Pattern = Group matches one or more word characters, \n//           one or more white space characters, \n//           group matches the string &quot;fish&quot;.\n        string pat = @&quot;(\\w+)\\s+(fish)&quot;;\n\n// Create the compilation information.\n// Case-insensitive matching; type name = &quot;FishRegex&quot;; \n// namespace = &quot;MyApp&quot;; type is public.\n        RegexCompilationInfo rci = new RegexCompilationInfo(\n                    pat, RegexOptions.IgnoreCase, \n                    &quot;FishRegex&quot;, &quot;MyApp&quot;, true);\n\n// Setup to compile.\n        AssemblyName an = new AssemblyName();\n        an.Name = &quot;FishRegex&quot;;\n        RegexCompilationInfo[] rciList = { rci };\n\n// Compile the regular expression.\n        Regex.CompileToAssembly(rciList, an);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.txt.rgxCompInfo#1\">&#39; This code example demonstrates the RegexCompilationInfo constructor\n&#39; and the Regex.CompileToAssembly() method.\n&#39; compile: csc genFishRegex.cs\n\nImports System.Reflection\nImports System.Text.RegularExpressions\n\nClass GenFishRegEx\n    Public Shared Sub Main() \n        &#39; Pattern = Group matches one or more word characters, \n        &#39;           one or more white space characters, \n        &#39;           group matches the string &quot;fish&quot;.\n        Dim pat As String = &quot;(\\w+)\\s+(fish)&quot;\n        \n        &#39; Create the compilation information.\n        &#39; Case-insensitive matching; type name = &quot;FishRegex&quot;; \n        &#39; namespace = &quot;MyApp&quot;; type is public.\n        Dim rci As New RegexCompilationInfo(pat, RegexOptions.IgnoreCase, _\n                                            &quot;FishRegex&quot;, &quot;MyApp&quot;, True)\n        \n        &#39; Setup to compile.\n        Dim an As New AssemblyName()\n        an.Name = &quot;FishRegex&quot;\n        Dim rciList As RegexCompilationInfo() = New RegexCompilationInfo() { rci }\n        \n        &#39; Compile the regular expression.\n        Regex.CompileToAssembly(rciList, an)\n    \n    End Sub &#39;Main\nEnd Class &#39;GenFishRegEx\n</code></pre><p> In the second step, compile the following code example using a reference to FishRegex.dll, and then run the resulting executable file. The executable file matches a target string by using the <code>FishRegex</code> type, and displays the match, group, capture group, and index position of the matches in the target string.  </p>\n<pre><code class=\"lang-vb\" name=\"sys.txt.rgxCompInfo#2\">&#39; This code example demonstrates the RegexCompilationInfo constructor.\n&#39; Execute this code example after executing genFishRegex.exe.\n&#39; compile: vbc /r:FishRegex.dll useFishRegex.vb\n\nImports System.Reflection\nImports System.Text.RegularExpressions\n\nClass UseFishRegEx\n    Public Shared Sub Main() \n        &#39; Match against the following target string.\n        Dim targetString As String = &quot;One fish two fish red fish blue fish&quot;\n        Dim matchCount As Integer = 0\n        Dim f As New MyApp.FishRegex()\n        \n        &#39; Display the target string.\n        Console.WriteLine(vbLf &amp; &quot;Input string = &quot;&quot;&quot; &amp; targetString &amp; &quot;&quot;&quot;&quot;)\n        \n        &#39; Display each match, capture group, capture, and match position.\n        Dim m As Match\n        For Each m In f.Matches(targetString)\n            matchCount = matchCount + 1\n            Console.WriteLine(vbLf &amp; &quot;Match(&quot; &amp; matchCount &amp; &quot;)&quot;)\n\n            Dim i As Integer\n            For i = 1 to 2\n                Dim g As Group = m.Groups(i)\n                Console.WriteLine(&quot;Group(&quot; &amp; i &amp; &quot;) = &quot;&quot;&quot; &amp; g.ToString() &amp; &quot;&quot;&quot;&quot;)\n                Dim cc As CaptureCollection = g.Captures\n                Dim j As Integer\n                For j = 0 To cc.Count-1\n                    Dim c As Capture = cc(j)\n                    System.Console.WriteLine(&quot;Capture(&quot; &amp; j &amp; &quot;) = &quot;&quot;&quot; &amp; c.ToString() &amp; _\n                                             &quot;&quot;&quot;, Position = &quot; &amp; c.Index)\n                Next j\n            Next i\n        Next m\n    End Sub &#39;Main\nEnd Class &#39;UseFishRegEx\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Input string = &quot;One fish two fish red fish blue fish&quot;\n&#39;\n&#39;Match(1)\n&#39;Group(1) = &quot;One&quot;\n&#39;Capture(0) = &quot;One&quot;, Position = 0\n&#39;Group(2) = &quot;fish&quot;\n&#39;Capture(0) = &quot;fish&quot;, Position = 4\n&#39;\n&#39;Match(2)\n&#39;Group(1) = &quot;two&quot;\n&#39;Capture(0) = &quot;two&quot;, Position = 9\n&#39;Group(2) = &quot;fish&quot;\n&#39;Capture(0) = &quot;fish&quot;, Position = 13\n&#39;\n&#39;Match(3)\n&#39;Group(1) = &quot;red&quot;\n&#39;Capture(0) = &quot;red&quot;, Position = 18\n&#39;Group(2) = &quot;fish&quot;\n&#39;Capture(0) = &quot;fish&quot;, Position = 22\n&#39;\n&#39;Match(4)\n&#39;Group(1) = &quot;blue&quot;\n&#39;Capture(0) = &quot;blue&quot;, Position = 27\n&#39;Group(2) = &quot;fish&quot;\n&#39;Capture(0) = &quot;fish&quot;, Position = 32\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"sys.txt.rgxCompInfo#2\">// This code example demonstrates the RegexCompilationInfo constructor.\n// Execute this code example after executing genFishRegex.exe.\n// compile: csc /r:FishRegex.dll useFishRegex.cs\n\nnamespace MyApp\n  {\n  using System;\n  using System.Reflection;\n  using System.Text.RegularExpressions;\n\n  class UseFishRegEx\n    {\n    public static void Main()\n      {\n// Match against the following target string.\n      string targetString = &quot;One fish two fish red fish blue fish&quot;;\n      int matchCount = 0;\n      FishRegex f = new FishRegex();\n\n// Display the target string.\n      Console.WriteLine(&quot;<br>Input string = \\&quot;&quot; + targetString + &quot;\\&quot;&quot;);\n\n// Display each match, capture group, capture, and match position.\n      foreach (Match m in f.Matches(targetString))\n\t{\n\tConsole.WriteLine(&quot;<br>Match(&quot; + (++matchCount) + &quot;)&quot;);\n\tfor (int i = 1; i &lt;= 2; i++)\n\t  {\n\t  Group g = m.Groups[i];\n\t  Console.WriteLine(&quot;Group(&quot; + i + &quot;) = \\&quot;&quot; + g + &quot;\\&quot;&quot;);\n\t  CaptureCollection cc = g.Captures;\n\t  for (int j = 0; j &lt; cc.Count; j++)\n\t    {\n\t    Capture c = cc[j];\n\t    System.Console.WriteLine(\n\t      &quot;Capture(&quot; + j + &quot;) = \\&quot;&quot; + c + &quot;\\&quot;, Position = &quot; + c.Index);\n\t    }\n\t  }\n\t}\n      }\n    }\n  }\n\n/*\nThis code example produces the following results:\n\nInput string = &quot;One fish two fish red fish blue fish&quot;\n\nMatch(1)\nGroup(1) = &quot;One&quot;\nCapture(0) = &quot;One&quot;, Position = 0\nGroup(2) = &quot;fish&quot;\nCapture(0) = &quot;fish&quot;, Position = 4\n\nMatch(2)\nGroup(1) = &quot;two&quot;\nCapture(0) = &quot;two&quot;, Position = 9\nGroup(2) = &quot;fish&quot;\nCapture(0) = &quot;fish&quot;, Position = 13\n\nMatch(3)\nGroup(1) = &quot;red&quot;\nCapture(0) = &quot;red&quot;, Position = 18\nGroup(2) = &quot;fish&quot;\nCapture(0) = &quot;fish&quot;, Position = 22\n\nMatch(4)\nGroup(1) = &quot;blue&quot;\nCapture(0) = &quot;blue&quot;, Position = 27\nGroup(2) = &quot;fish&quot;\nCapture(0) = &quot;fish&quot;, Position = 32\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_RegexCompilationInfo__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_String_System_String_System_Boolean_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_RegexCompilationInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> class that contains information about a regular expression with a specified time-out value to be included in an assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The regular expression to compile.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The regular expression options to use when compiling the regular expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the type that represents the compiled regular expression.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fullnamespace</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace to which the new type belongs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ispublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the compiled regular expression publicly visible; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>matchTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The default time-out interval for the regular expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>pattern</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>fullnamespace</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each parameter of the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo#System_Text_RegularExpressions_RegexCompilationInfo__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_String_System_String_System_Boolean_\" data-linktype=\"relative-path\">RegexCompilationInfo(String,RegexOptions,String,String,Boolean)</a> constructor directly corresponds to a property of the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> class. Because all properties are read/write, their values can also be assigned directly.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method generates an assembly that contains compiled regular expressions. Therefore, you should not specify <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> as one of the values of <code>options</code>.  </p>\n<p> If <code>ispublic</code> is <code>true</code>, the compiled regular expression class is given public accessibility. That is, it can be instantiated from code that executes in any assembly. If <code>ispublic</code> is <code>false</code>, the compiled regular expression class is given <code>internal</code> (in C#) or <code>Friend</code> (in Visual Basic) accessibility. That is, it can be instantiated only from code that executes in the same assembly as the regular expression class.  </p>\n<p> The <code>matchTimeout</code> parameter defines the default time-out interval for the compiled regular expression. This value represents the approximate amount of time that a compiled regular expression object will execute a single matching operation before the operation times out and the regular expression engine throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception during its next timing check. For additional information about the time-out value, see the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo#System_Text_RegularExpressions_RegexCompilationInfo_MatchTimeout_\" data-linktype=\"relative-path\">MatchTimeout</a> property.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> We recommend that you always set a default time-out value for a compiled regular expression. Consumers of your regular expression library can override that time-out value by passing a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value that represents the new time-out interval to this constructor overload.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a single compiled regular expression named <code>DuplicateChars</code> that identifies two or more occurrences of the same character in an input string. The compiled regular expression has a default time-out of 2 seconds. When you execute the example, it creates a class library named RegexLib.dll that contains the compiled regular expression.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1\">using System;\nusing System.Reflection;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n        // Match two or more occurrences of the same character.\n        string pattern = @&quot;(\\w)\\1+&quot;;\n        \n        // Use case-insensitive matching. \n        var rci = new RegexCompilationInfo(pattern, RegexOptions.IgnoreCase,\n                                           &quot;DuplicateChars&quot;, &quot;CustomRegexes&quot;, \n                                           true, TimeSpan.FromSeconds(2));\n\n        // Define an assembly to contain the compiled regular expression.\n        var an = new AssemblyName();\n        an.Name = &quot;RegexLib&quot;;\n        RegexCompilationInfo[] rciList = { rci };\n\n        // Compile the regular expression and create the assembly.\n        Regex.CompileToAssembly(rciList, an);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1\">Imports System.Reflection\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n        &#39; Match two or more occurrences of the same character.\n        Dim pattern As String = &quot;(\\w)\\1+&quot;\n        \n        &#39; Use case-insensitive matching. \n        Dim rci As New RegexCompilationInfo(pattern, RegexOptions.IgnoreCase,\n                                            &quot;DuplicateChars&quot;, &quot;CustomRegexes&quot;, \n                                            True, TimeSpan.FromSeconds(2))\n\n        &#39; Define an assembly to contain the compiled regular expression.\n        Dim an As New AssemblyName()\n        an.Name = &quot;RegexLib&quot;\n        Dim rciList As RegexCompilationInfo() = New RegexCompilationInfo() { rci }\n\n        &#39; Compile the regular expression and create the assembly.\n        Regex.CompileToAssembly(rciList, an)\n   End Sub\nEnd Module\n</code></pre><p> The regular expression pattern <code>(\\w)\\1+</code> is defined as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(\\w)</code></td>\n<td>Match any word character and assign it to the first capturing group.</td>\n</tr>\n<tr>\n<td><code>\\1+</code></td>\n<td>Match one or more occurrences of the value of the first captured group.</td>\n</tr>\n</tbody>\n</table>\n<p> The following example uses the <code>DuplicatedChars</code> regular expression to identify duplicate characters in a string array. When it calls the <code>DuplicatedChars</code> constructor, it changes the time-out interval to .5 seconds.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2\">using CustomRegexes;\nusing System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var rgx = new DuplicateChars(TimeSpan.FromSeconds(.5));\n      \n      string[] values = { &quot;Greeeeeat&quot;, &quot;seed&quot;, &quot;deed&quot;, &quot;beam&quot;, \n                          &quot;loop&quot;, &quot;Aardvark&quot; };\n      // Display regex information.\n      Console.WriteLine(&quot;Regular Expression Pattern: {0}&quot;, rgx);\n      Console.WriteLine(&quot;Regex timeout value: {0} seconds<br>&quot;, \n                        rgx.MatchTimeout.TotalSeconds);\n      \n      // Display matching information.\n      foreach (var value in values) {\n         Match m = rgx.Match(value);\n         if (m.Success)\n            Console.WriteLine(&quot;&#39;{0}&#39; found in &#39;{1}&#39; at positions {2}-{3}&quot;,\n                              m.Value, value, m.Index, m.Index + m.Length - 1);\n         else\n            Console.WriteLine(&quot;No match found in &#39;{0}&#39;&quot;, value);\n      }                                                         \n   }\n}\n// The example displays the following output:\n//       Regular Expression Pattern: (\\w)\\1+\n//       Regex timeout value: 0.5 seconds\n//       \n//       //eeeee// found in //Greeeeeat// at positions 2-6\n//       //ee// found in //seed// at positions 1-2\n//       //ee// found in //deed// at positions 1-2\n//       No match found in //beam//\n//       //oo// found in //loop// at positions 1-2\n//       //Aa// found in //Aardvark// at positions 0-1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2\">Imports CustomRegexes\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim rgx As New DuplicateChars(TimeSpan.FromSeconds(.5))\n      \n      Dim values() As String = { &quot;Greeeeeat&quot;, &quot;seed&quot;, &quot;deed&quot;, &quot;beam&quot;, \n                                 &quot;loop&quot;, &quot;Aardvark&quot; }\n      &#39; Display regex information.\n      Console.WriteLine(&quot;Regular Expression Pattern: {0}&quot;, rgx)\n      Console.WriteLine(&quot;Regex timeout value: {0} seconds&quot;, \n                        rgx.MatchTimeout.TotalSeconds)\n      Console.WriteLine()\n      \n      &#39; Display matching information.\n      For Each value In values\n         Dim m As Match = rgx.Match(value)\n         If m.Success Then\n            Console.WriteLine(&quot;&#39;{0}&#39; found in &#39;{1}&#39; at positions {2}-{3}&quot;,\n                              m.Value, value, m.Index, m.Index + m.Length - 1)\n         Else\n            Console.WriteLine(&quot;No match found in &#39;{0}&#39;&quot;, value)\n         End If   \n      Next                                                         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Regular Expression Pattern: (\\w)\\1+\n&#39;       Regex timeout value: 0.5 seconds\n&#39;       \n&#39;       &#39;eeeee&#39; found in &#39;Greeeeeat&#39; at positions 2-6\n&#39;       &#39;ee&#39; found in &#39;seed&#39; at positions 1-2\n&#39;       &#39;ee&#39; found in &#39;deed&#39; at positions 1-2\n&#39;       No match found in &#39;beam&#39;\n&#39;       &#39;oo&#39; found in &#39;loop&#39; at positions 1-2\n&#39;       &#39;Aa&#39; found in &#39;Aardvark&#39; at positions 0-1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_RegexCompilationInfo_IsPublic\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_RegexCompilationInfo_IsPublic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPublic</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the compiled regular expression has public visibility.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsPublic { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the regular expression has public visibility; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the IsPublic property is <code>false</code>, the regular expression class defined by the current instance can be instantiated only by code that is executing in the assembly that contains the class. However, because the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method generates an assembly that contains only compiled regular expressions and does not allow additional code to be added, there is generally no reason to assign this property a value of <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_RegexCompilationInfo_MatchTimeout\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_RegexCompilationInfo_MatchTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MatchTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the regular expression&#39;s default time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan MatchTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>The default maximum time interval that can elapse in a pattern-matching operation before a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> is thrown, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> if time-outs are disabled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MatchTimeout property defines the default time-out interval for the compiled regular expression. This value represents the approximate amount of time that a compiled regular expression will execute a single matching operation before the operation times out and the regular expression engine throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception during its next timing check.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> We recommend that you always set a default time-out value for a compiled regular expression. Consumers of your regular expression library can override that time-out value by passing a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value that represents the new time-out interval to the compiled regular expression&#39;s class constructor.  </p>\n</div>\n<p> You can assign a default time-out value to a <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> object in any of the following ways:  </p>\n<ul>\n<li><p>By calling the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_SetData_\" data-linktype=\"relative-path\">SetData</a> method and providing the string representation of a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value for the &quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot; property.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo#System_Text_RegularExpressions_RegexCompilationInfo__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_String_System_String_System_Boolean_System_TimeSpan_\" data-linktype=\"relative-path\">RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)</a> constructor and providing a value for the <code>matchTimeout</code> parameter.  </p>\n</li>\n<li><p>By setting the value of this property.  </p>\n<p>To set a reasonable time-out interval, consider the following factors:  </p>\n</li>\n<li><p>The length and complexity of the regular expression pattern. Longer and more complex regular expressions require more time than shorter and simpler ones.  </p>\n</li>\n<li><p>The expected machine load. Processing takes more time on systems with high CPU and memory utilization.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a single compiled regular expression named <code>DuplicateChars</code> that identifies two or more occurrences of the same character in an input string. The compiled regular expression has a default time-out of 2 seconds. When you execute the example, it creates a class library named RegexLib.dll that contains the compiled regular expression.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1\">using System;\nusing System.Reflection;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n        // Match two or more occurrences of the same character.\n        string pattern = @&quot;(\\w)\\1+&quot;;\n        \n        // Use case-insensitive matching. \n        var rci = new RegexCompilationInfo(pattern, RegexOptions.IgnoreCase,\n                                           &quot;DuplicateChars&quot;, &quot;CustomRegexes&quot;, \n                                           true, TimeSpan.FromSeconds(2));\n\n        // Define an assembly to contain the compiled regular expression.\n        var an = new AssemblyName();\n        an.Name = &quot;RegexLib&quot;;\n        RegexCompilationInfo[] rciList = { rci };\n\n        // Compile the regular expression and create the assembly.\n        Regex.CompileToAssembly(rciList, an);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1\">Imports System.Reflection\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n        &#39; Match two or more occurrences of the same character.\n        Dim pattern As String = &quot;(\\w)\\1+&quot;\n        \n        &#39; Use case-insensitive matching. \n        Dim rci As New RegexCompilationInfo(pattern, RegexOptions.IgnoreCase,\n                                            &quot;DuplicateChars&quot;, &quot;CustomRegexes&quot;, \n                                            True, TimeSpan.FromSeconds(2))\n\n        &#39; Define an assembly to contain the compiled regular expression.\n        Dim an As New AssemblyName()\n        an.Name = &quot;RegexLib&quot;\n        Dim rciList As RegexCompilationInfo() = New RegexCompilationInfo() { rci }\n\n        &#39; Compile the regular expression and create the assembly.\n        Regex.CompileToAssembly(rciList, an)\n   End Sub\nEnd Module\n</code></pre><p> The regular expression pattern <code>(\\w)\\1+</code> is defined as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(\\w)</code></td>\n<td>Match any word character and assign it to the first capturing group.</td>\n</tr>\n<tr>\n<td><code>\\1+</code></td>\n<td>Match one or more occurrences of the value of the first captured group.</td>\n</tr>\n</tbody>\n</table>\n<p> The following example uses the <code>DuplicatedChars</code> regular expression to identify duplicate characters in a string array. When it calls the <code>DuplicatedChars</code> constructor, it changes the time-out interval to .5 seconds.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2\">using CustomRegexes;\nusing System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var rgx = new DuplicateChars(TimeSpan.FromSeconds(.5));\n      \n      string[] values = { &quot;Greeeeeat&quot;, &quot;seed&quot;, &quot;deed&quot;, &quot;beam&quot;, \n                          &quot;loop&quot;, &quot;Aardvark&quot; };\n      // Display regex information.\n      Console.WriteLine(&quot;Regular Expression Pattern: {0}&quot;, rgx);\n      Console.WriteLine(&quot;Regex timeout value: {0} seconds<br>&quot;, \n                        rgx.MatchTimeout.TotalSeconds);\n      \n      // Display matching information.\n      foreach (var value in values) {\n         Match m = rgx.Match(value);\n         if (m.Success)\n            Console.WriteLine(&quot;&#39;{0}&#39; found in &#39;{1}&#39; at positions {2}-{3}&quot;,\n                              m.Value, value, m.Index, m.Index + m.Length - 1);\n         else\n            Console.WriteLine(&quot;No match found in &#39;{0}&#39;&quot;, value);\n      }                                                         \n   }\n}\n// The example displays the following output:\n//       Regular Expression Pattern: (\\w)\\1+\n//       Regex timeout value: 0.5 seconds\n//       \n//       //eeeee// found in //Greeeeeat// at positions 2-6\n//       //ee// found in //seed// at positions 1-2\n//       //ee// found in //deed// at positions 1-2\n//       No match found in //beam//\n//       //oo// found in //loop// at positions 1-2\n//       //Aa// found in //Aardvark// at positions 0-1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2\">Imports CustomRegexes\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim rgx As New DuplicateChars(TimeSpan.FromSeconds(.5))\n      \n      Dim values() As String = { &quot;Greeeeeat&quot;, &quot;seed&quot;, &quot;deed&quot;, &quot;beam&quot;, \n                                 &quot;loop&quot;, &quot;Aardvark&quot; }\n      &#39; Display regex information.\n      Console.WriteLine(&quot;Regular Expression Pattern: {0}&quot;, rgx)\n      Console.WriteLine(&quot;Regex timeout value: {0} seconds&quot;, \n                        rgx.MatchTimeout.TotalSeconds)\n      Console.WriteLine()\n      \n      &#39; Display matching information.\n      For Each value In values\n         Dim m As Match = rgx.Match(value)\n         If m.Success Then\n            Console.WriteLine(&quot;&#39;{0}&#39; found in &#39;{1}&#39; at positions {2}-{3}&quot;,\n                              m.Value, value, m.Index, m.Index + m.Length - 1)\n         Else\n            Console.WriteLine(&quot;No match found in &#39;{0}&#39;&quot;, value)\n         End If   \n      Next                                                         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Regular Expression Pattern: (\\w)\\1+\n&#39;       Regex timeout value: 0.5 seconds\n&#39;       \n&#39;       &#39;eeeee&#39; found in &#39;Greeeeeat&#39; at positions 2-6\n&#39;       &#39;ee&#39; found in &#39;seed&#39; at positions 1-2\n&#39;       &#39;ee&#39; found in &#39;deed&#39; at positions 1-2\n&#39;       No match found in &#39;beam&#39;\n&#39;       &#39;oo&#39; found in &#39;loop&#39; at positions 1-2\n&#39;       &#39;Aa&#39; found in &#39;Aardvark&#39; at positions 0-1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_RegexCompilationInfo_Name\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_RegexCompilationInfo_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the type that represents the compiled regular expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the new type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value for this property is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value for this property is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> class is used to define a compiled regular expression, which is represented as a class derived from <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a>. The Name property defines the class name of the regular expression type, and the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo#System_Text_RegularExpressions_RegexCompilationInfo_Namespace_\" data-linktype=\"relative-path\">Namespace</a> and Name properties together define its fully qualified name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_RegexCompilationInfo_Namespace\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_RegexCompilationInfo_Namespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespace</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the namespace to which the new type belongs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Namespace { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The namespace of the new type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value for this property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> class is used to define a compiled regular expression, which is represented as a class derived from <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a>. The Namespace property defines the namespace that contains the compiled regular expression type, and the Namespace and <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo#System_Text_RegularExpressions_RegexCompilationInfo_Name_\" data-linktype=\"relative-path\">Name</a> properties together define its fully qualified name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_RegexCompilationInfo_Options\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_RegexCompilationInfo_Options_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Options</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the options to use when compiling the regular expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.RegularExpressions.RegexOptions Options { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of the enumeration values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method generates an assembly that contains compiled regular expressions. Therefore, you do not have to specify <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> as one of the values of this property. If it is present, the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> option is ignored.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_RegexCompilationInfo_Pattern\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_RegexCompilationInfo_Pattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the regular expression to compile.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Pattern { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The regular expression to compile.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value for this property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Pattern property can contain any valid regular expression. If the value of the Pattern property is not a syntactically correct regular expression pattern, the call to the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.RegexCompilationInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.RegexCompilationInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexCompilationInfo\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexCompilationInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexCompilationInfo.IsPublic\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexCompilationInfo.Name\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexCompilationInfo.Namespace\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexCompilationInfo.Options\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexCompilationInfo.Pattern\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ed8882eb-a75e-cc52-b005-bdf02e6d7800\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about a regular expression that is used to compile a regular expression to a stand-alone assembly.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text.RegularExpressions/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.RegularExpressions.RegexCompilationInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.RegexCompilationInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.RegexCompilationInfo.yml","open_to_public_contributors":true,"api_name":["System.Text.RegularExpressions.RegexCompilationInfo","System.Text.RegularExpressions.RegexCompilationInfo..ctor","System.Text.RegularExpressions.RegexCompilationInfo.IsPublic","System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout","System.Text.RegularExpressions.RegexCompilationInfo.Name","System.Text.RegularExpressions.RegexCompilationInfo.Namespace","System.Text.RegularExpressions.RegexCompilationInfo.Options","System.Text.RegularExpressions.RegexCompilationInfo.Pattern"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.RegularExpressions.RegexCompilationInfo","System::Text::RegularExpressions::RegexCompilationInfo","System.Text.RegularExpressions.RegexCompilationInfo.#ctor","System::Text::RegularExpressions::RegexCompilationInfo::#ctor","System.Text.RegularExpressions.RegexCompilationInfo.IsPublic","System::Text::RegularExpressions::RegexCompilationInfo::IsPublic","System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout","System::Text::RegularExpressions::RegexCompilationInfo::MatchTimeout","System.Text.RegularExpressions.RegexCompilationInfo.Name","System::Text::RegularExpressions::RegexCompilationInfo::Name","System.Text.RegularExpressions.RegexCompilationInfo.Namespace","System::Text::RegularExpressions::RegexCompilationInfo::Namespace","System.Text.RegularExpressions.RegexCompilationInfo.Options","System::Text::RegularExpressions::RegexCompilationInfo::Options","System.Text.RegularExpressions.RegexCompilationInfo.Pattern","System::Text::RegularExpressions::RegexCompilationInfo::Pattern"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ed8882eb-a75e-cc52-b005-bdf02e6d7800","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text.RegularExpressions/RegexCompilationInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RegexCompilationInfo class | Microsoft Docs","_op_ogTitle":"RegexCompilationInfo class","description":"Provides information about a regular expression that is used to compile a regular expression to a stand-alone assembly.\n","toc_asset_id":"_splitted/System.Text.RegularExpressions/toc.json","toc_rel":"_splitted/System.Text.RegularExpressions/toc.json","source_url":"","ms.assetid":"System.Text.RegularExpressions.RegexCompilationInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.regexcompilationinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.regexcompilationinfo","fileRelativePath":"System.Text.RegularExpressions.RegexCompilationInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}