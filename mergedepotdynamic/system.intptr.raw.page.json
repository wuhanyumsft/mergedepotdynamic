{"content":"    \r\n    <h1 id=\"System_IntPtr\">\r\n      <span class=\"lang-csharp\">IntPtr</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>A platform-specific type that is used to represent a pointer or a handle.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct IntPtr : System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">IntPtr</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The IntPtr type is designed to be an integer whose size is platform-specific. That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.  </p>\n<p> The IntPtr type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.  </p>\n<p> IntPtr objects can also be used to hold handles. For example, instances of IntPtr are used extensively in the <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">System.IO.FileStream</a> class to hold file handles.  </p>\n<p> The IntPtr type is CLS-compliant, while the <a class=\"xref\" href=\"system.uintptr\" data-linktype=\"relative-path\">UIntPtr</a> type is not. Only the IntPtr type is used in the common language runtime. The <a class=\"xref\" href=\"system.uintptr\" data-linktype=\"relative-path\">UIntPtr</a> type is provided mostly to maintain architectural symmetry with the IntPtr type.  </p>\n<p> This type implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr__ctor_System_Int32_\" data-linktype=\"self-bookmark\">IntPtr(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> using the specified 32-bit pointer or handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr__ctor_System_Int64_\" data-linktype=\"self-bookmark\">IntPtr(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> using the specified 64-bit pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr__ctor_System_Void__\" data-linktype=\"self-bookmark\">IntPtr(Void*)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> using the specified pointer to an unspecified type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_Zero\" data-linktype=\"self-bookmark\">Zero</a></div>\r\n          </td>\r\n            <td>\r\n            <p>A read-only field that represents a pointer or handle that has been initialized to zero.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_Size\" data-linktype=\"self-bookmark\">Size</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size of this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_Add_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Add(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an offset to the value of a pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_Subtract_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">Subtract(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts an offset from the value of a pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_ToInt32\" data-linktype=\"self-bookmark\">ToInt32()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of this instance to a 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_ToInt64\" data-linktype=\"self-bookmark\">ToInt64()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of this instance to a 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_ToPointer\" data-linktype=\"self-bookmark\">ToPointer()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of this instance to a pointer to an unspecified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Addition_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">op_Addition(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an offset to the value of a pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Equality_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">op_Equality(IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified instances of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Explicit_System_Int32_to_System_IntPtr_\" data-linktype=\"self-bookmark\">op_Explicit(Int32)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Explicit_System_Int64_to_System_IntPtr_\" data-linktype=\"self-bookmark\">op_Explicit(Int64)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Explicit_System_IntPtr_to_System_Int32_\" data-linktype=\"self-bookmark\">op_Explicit(IntPtr)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Explicit_System_IntPtr_to_System_Int64_\" data-linktype=\"self-bookmark\">op_Explicit(IntPtr)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Explicit_System_IntPtr_to_System_Void__\" data-linktype=\"self-bookmark\">op_Explicit(IntPtr)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Explicit_System_Void__to_System_IntPtr_\" data-linktype=\"self-bookmark\">op_Explicit(Void*)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Inequality_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">op_Inequality(IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether two specified instances of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_op_Subtraction_System_IntPtr_System_Int32_\" data-linktype=\"self-bookmark\">op_Subtraction(IntPtr,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts an offset from the value of a pointer.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IntPtr_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data needed to serialize the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_IntPtr__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IntPtr(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> using the specified 32-bit pointer or handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer or handle contained in a 32-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr__ctor_System_Int64_\">\r\n    \r\n            <a id=\"System_IntPtr__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IntPtr(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> using the specified 64-bit pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer or handle contained in a 64-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>On a 32-bit platform, <code>value</code> is too large or too small to represent as an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An exception is only thrown if the value of <code>value</code> requires more bits than the current platform supports.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr__ctor_System_Void__\">\r\n    \r\n            <a id=\"System_IntPtr__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IntPtr(Void*)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> using the specified pointer to an unspecified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr (void* value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an unspecified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_Zero\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Zero</div>        \r\n          </div>\r\n    \r\n            <p>A read-only field that represents a pointer or handle that has been initialized to zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly IntPtr Zero;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this field is not equivalent to <code>null</code>. Use this field to efficiently determine whether an instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> has been set to a value other than zero.  </p>\n<p> For example, assume the variable, ip, is an instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a>. You can determine if it has been set by comparing it to the value returned by a constructor, for example: &quot; <code>if ip != new IntPtr(0)...</code> &quot;. However, invoking a constructor to get an unintialized pointer is inefficient. It is better to code either &quot; <code>if ip != IntPtr.Zero...</code> &quot;, or &quot; <code>if !IntPtr.Zero.Equals(ip)...</code> &quot;.  </p>\n<p> When calling the Windows API from managed code, you can pass Zero instead of <code>null</code> if an argument is expected to be either a pointer or a <code>null</code>. For example, the following call to the Windows <code>CreateFile</code> function supplies Zero for the <code>pSecurityAttributes</code> and <code>hTemplateFile</code> argument values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IntPtr.Zero#2\">using Microsoft.Win32.SafeHandles;\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n   private const uint GENERIC_READ = 0x80000000;\n   private const uint OPEN_EXISTING = 3; \n   private const uint FILE_ATTRIBUTE_NORMAL = 128;\n   private const uint FILE_FLAG_OVERLAPPED = 0x40000000;\n\n   [DllImport(&quot;kernel32.dll&quot;, SetLastError = true, CharSet = CharSet.Unicode)]\n   private static extern Microsoft.Win32.SafeHandles.SafeFileHandle CreateFile(\n            string lpFileName, System.UInt32 dwDesiredAccess, System.UInt32 dwShareMode, \n            IntPtr pSecurityAttributes, System.UInt32 dwCreationDisposition, \n            System.UInt32 dwFlagsAndAttributes, IntPtr hTemplateFile);\n\n   public static void Main()\n   {\n      SafeFileHandle hnd = CreateFile(&quot;CallOfTheWild.txt&quot;, GENERIC_READ, 0, \n                                      IntPtr.Zero, OPEN_EXISTING,\n                                      FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, \n                                      IntPtr.Zero);\n      if (hnd.IsInvalid) {\n            Exception ex = Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error());\n            Console.WriteLine(&quot;Attempt to open file failed:&quot;);\n            Console.WriteLine(&quot;  {0}&quot;, ex.Message);\n            return;           \n      }                        \n      else {\n         Console.WriteLine(&quot;File successfully opened.&quot;);\n         hnd.Close();     \n      }\n   }\n}\n// If the file cannot be found, the example displays the following output:\n//    Attempt to open file failed:\n//      The system cannot find the file specified. (Exception from HRESULT: 0x80070002)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IntPtr.Zero#2\">Imports Microsoft.Win32.SafeHandles\nImports System\nImports System.Runtime.InteropServices\n\nModule Example\n   Private Const GENERIC_READ As UInteger = 2147483648\n   Private Const OPEN_EXISTING As UInteger = 3 \n   Private Const FILE_ATTRIBUTE_NORMAL As UInteger = 128\n   Private Const FILE_FLAG_OVERLAPPED As UInteger = &amp;h40000000\n\n   Private Declare Auto Function CreateFile Lib &quot;Kernel32&quot; Alias &quot;CreateFileW&quot; (\n            lpFileName As String, dwDesiredAccess As UInt32, \n            dwShareMode As UInt32, pSecurityAttributes As IntPtr, \n            dwCreationDisposition As UInt32, dwFlagsAndAttributes As UInt32, \n            hTemplateFile As IntPtr) As SafeFileHandle\n\n   Public Sub Main()\n      Dim hnd As SafeFileHandle = CreateFile(&quot;CallOfTheWild.txt&quot;, GENERIC_READ, 0, \n                                             IntPtr.Zero, OPEN_EXISTING,\n                                             FILE_ATTRIBUTE_NORMAL Or FILE_FLAG_OVERLAPPED, \n                                             IntPtr.Zero)\n      If hnd.IsInvalid Then\n         Dim ex As Exception = Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error())\n         Console.WriteLine(&quot;Attempt to open file failed:&quot;)\n         Console.WriteLine(&quot;  {0}&quot;, ex.Message)\n         Return           \n      Else \n         Console.WriteLine(&quot;File successfully opened.&quot;)\n         hnd.Close()     \n      End If\n   End Sub\nEnd Module\n&#39; If the file cannot be found, the example displays the following output:\n&#39;    Attempt to open file failed:\n&#39;      The system cannot find the file specified. (Exception from HRESULT: 0x80070002)\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> Although Zero is equivalent to <code>null</code> for Windows API functions with parameters or return values that can be either pointers or <code>null</code>, Zero is not equivalent to <code>null</code>. Passing <code>null</code> to the <code>IntPtr.Zero.Equals</code> method always returns <code>false</code>.  </p>\n</div>\n<p> You can also test for a <code>null</code> return value from Windows API function calls that return either a pointer or a <code>null</code> by comparing the returned value with Zero. For example, the call to the <code>GetWindow</code> function in the following example tries to retrieve the handle of a non-existent window. If it were called from unmanaged code, the function would return <code>null</code>, but when it is called from managed code, it returns Zero.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IntPtr.Zero#1\">using System;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n   private const int GW_OWNER = 4;\n    \n   [DllImport(&quot;user32&quot;, CharSet=CharSet.Auto, SetLastError=true, ExactSpelling=true)]\n   public static extern IntPtr GetWindow(IntPtr hwnd, int wFlag);   \n   \n   public static void Main()\n   {\n      IntPtr hwnd = new IntPtr(3);\n      IntPtr hOwner = GetWindow(hwnd, GW_OWNER);\n      if (hOwner == IntPtr.Zero)\n         Console.WriteLine(&quot;Window not found.&quot;);\n   }\n}\n// The example displays the following output:\n//        Window not found.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IntPtr.Zero#1\">Module Example\n   Private Const GW_OWNER As Integer = 4\n\n   Private Declare Function GetWindow Lib &quot;user32&quot; (hWnd As IntPtr, \n                            wFlag As Integer) As IntPtr \n\n   Public Sub Main()\n      Dim hwnd = new IntPtr(3)\n      Dim hOwner As IntPtr = GetWindow(hwnd, GW_OWNER)\n      If hOwner = IntPtr.Zero Then\n         Console.WriteLine(&quot;Window not found.&quot;)\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Window not found.\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_Size\">\r\n    \r\n            <a id=\"System_IntPtr_Size_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Size</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size of this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Size { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size of a pointer or handle in this process, measured in bytes. The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process. You can define the process type by setting the <code>/platform</code> switch when you compile your code with the C# and Visual Basic compilers.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_Add_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_IntPtr_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an offset to the value of a pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr Add (IntPtr pointer, int offset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pointer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pointer to add the offset to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A new pointer that reflects the addition of <code>offset</code> to <code>pointer</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Add method does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, the addition operation is performed in an unchecked context.  </p>\n<p> Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object that points to the beginning of a ten-element array, and then calls the Add method to iterate the elements in the array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IntPtr.Add#1\">Imports System.Runtime.InteropServices\n\nModule Example\n   Public Sub Main()\n      Dim arr() As Integer = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n      Dim ptr As IntPtr = Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0)\n\n      For ctr As Integer= 0 To arr.Length - 1\n         Dim newPtr As IntPtr = IntPtr.Add(ptr, ctr * Len(arr(0)))\n         Console.Write(&quot;{0}   &quot;, Marshal.ReadInt32(newPtr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       2   4   6   8   10   12   14   16   18   20\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IntPtr.Add#1\">using System;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] arr = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n      unsafe {\n         fixed(int* parr = arr) {\n            IntPtr ptr = new IntPtr(parr);\n            // Get the size of an array element.\n            int size = sizeof(int);\n            for (int ctr = 0; ctr &lt; arr.Length; ctr++)\n            {\n               IntPtr newPtr = IntPtr.Add(ptr, ctr * size);\n               Console.Write(&quot;{0}   &quot;, Marshal.ReadInt32(newPtr));\n            }\n         }      \n      }\n   }\n}\n// The example displays the following output:\n//       2   4   6   8   10   12   14   16   18   20\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_IntPtr_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is an instance of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> and equals the value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_GetHashCode\">\r\n    \r\n            <a id=\"System_IntPtr_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_Subtract_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_IntPtr_Subtract_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Subtract(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts an offset from the value of a pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr Subtract (IntPtr pointer, int offset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pointer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pointer to subtract the offset from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset to subtract.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A new pointer that reflects the subtraction of <code>offset</code> from <code>pointer</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Subtract method does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, the subtraction operation is performed in an unchecked context.  </p>\n<p> Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object that points to the end of a ten-element array, and then calls the Subtract method to iterate the elements in the array in reverse order.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IntPtr.Subtract#1\">using System;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] arr = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20};\n      // Get the size of a single array element.\n      int size = sizeof(int);\n      unsafe {\n         fixed(int* pend = &amp;arr[arr.GetUpperBound(0)]) {\n            IntPtr ptr = new IntPtr(pend);\n            for (int ctr = 0; ctr &lt; arr.Length; ctr++)\n            {\n               IntPtr newPtr = IntPtr.Subtract(ptr, ctr * size);\n               Console.Write(&quot;{0}   &quot;, Marshal.ReadInt32(newPtr));\n            }\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       20   18   16   14   12   10   8   6   4   2\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IntPtr.Subtract#1\">Imports System.Runtime.InteropServices\n\nModule Example\n   Public Sub Main()\n      Dim arr() As Integer = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20}\n      Dim ptr As IntPtr = Marshal.UnsafeAddrOfPinnedArrayElement(arr, arr.Length - 1)\n      Dim size As Integer = Len(arr(0))\n\n      For ctr As Integer = 0 To arr.Length - 1\n         Dim newPtr As IntPtr = IntPtr.Subtract(ptr, ctr * size)\n         Console.Write(&quot;{0}   &quot;, Marshal.ReadInt32(newPtr))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       20   18   16   14   12   10   8   6   4   2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_ToInt32\">\r\n    \r\n            <a id=\"System_IntPtr_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of this instance to a 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ToInt32 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer equal to the value of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_ToInt64\">\r\n    \r\n            <a id=\"System_IntPtr_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of this instance to a 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long ToInt64 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer equal to the value of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_ToPointer\">\r\n    \r\n            <a id=\"System_IntPtr_ToPointer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToPointer()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of this instance to a pointer to an unspecified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void* ToPointer ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>*</div>\r\n                  </div>\r\n                  <p>A pointer to <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>; that is, a pointer to memory containing data of an unspecified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses managed pointers to reverse the characters in an array. After it initializes a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object and gets its length, it does the following:  </p>\n<ul>\n<li><p>Calls the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi_\" data-linktype=\"relative-path\">StringToHGlobalAnsi</a> method to copy the Unicode string to unmanaged memory as ANSI (one-byte) characters. The method returns an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object that points to the beginning of the unmanaged string.  </p>\n</li>\n<li><p>Calls the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_AllocHGlobal_\" data-linktype=\"relative-path\">AllocHGlobal</a> method to allocate the same number of bytes as the unmanaged string occupies. The method returns an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object that points to the beginning of the unmanaged block of memory.  </p>\n</li>\n<li><p>Calls the ToPointer method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and adds one less than the length of the string to the starting address of the ANSI string. Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.  </p>\n</li>\n<li><p>Uses a loop to copy each character from the string to the unmanaged block of memory. After each copy operation, it decrements the pointer to the address of the next location in the unmanaged ANSI string and increments the pointer to the next address in the unmanaged block.  </p>\n</li>\n<li><p>Calls the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_PtrToStringAnsi_\" data-linktype=\"relative-path\">PtrToStringAnsi</a> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.  </p>\n</li>\n<li><p>After displaying the original and reversed strings, calls the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_FreeHGlobal_\" data-linktype=\"relative-path\">FreeHGlobal</a> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IntPtr.ToPointer#1\">using System;\nusing System.Runtime.InteropServices;\n\nclass NotTooSafeStringReverse\n{\n    static public void Main()\n    {\n        string stringA = &quot;I seem to be turned around!&quot;;\n        int copylen = stringA.Length;\n\n        // Allocate HGlobal memory for source and destination strings\n        IntPtr sptr = Marshal.StringToHGlobalAnsi(stringA);\n        IntPtr dptr = Marshal.AllocHGlobal(copylen + 1);\n\n        // The unsafe section where byte pointers are used.\n        unsafe\n        {\n            byte *src = (byte *)sptr.ToPointer();\n            byte *dst = (byte *)dptr.ToPointer();\n\n            if (copylen &gt; 0)\n            {\n                // set the source pointer to the end of the string\n                // to do a reverse copy.\n                src += copylen - 1;\n\n                while (copylen-- &gt; 0)\n                {\n                    *dst++ = *src--;\n                }\n                *dst = 0;\n            }\n        }\n        string stringB = Marshal.PtrToStringAnsi(dptr);\n\n        Console.WriteLine(&quot;Original:<br>{0}<br>&quot;, stringA);\n        Console.WriteLine(&quot;Reversed:<br>{0}&quot;, stringB);\n\n        // Free HGlobal memory\n        Marshal.FreeHGlobal(dptr);\n        Marshal.FreeHGlobal(sptr);\n    }\n}\n\n// The progam has the following output:\n//\n// Original:\n// I seem to be turned around!\n//\n// Reversed:\n// !dnuora denrut eb ot mees I\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IntPtr.ToPointer#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\n\nclass NotTooSafeStringReverse\n{\npublic:\n    static void Main()\n    {\n        String^ stringA = &quot;I seem to be turned around!&quot;;\n        int copylen = stringA-&gt;Length;\n\n        // Allocate HGlobal memory for source and destination strings\n        IntPtr sptr = Marshal::StringToHGlobalAnsi(stringA);\n        IntPtr dptr = Marshal::AllocHGlobal(copylen + 1);\n\n        char *src = (char *)sptr.ToPointer();\n        char *dst = (char *)dptr.ToPointer();\n\n        if (copylen &gt; 0)\n        {\n            // set the source pointer to the end of the string\n            // to do a reverse copy.\n            src += copylen - 1;\n\n            while (copylen-- &gt; 0)\n            {\n                *dst++ = *src--;\n            }\n            *dst = 0;\n        }\n        String^ stringB = Marshal::PtrToStringAnsi(dptr);\n\n        Console::WriteLine(&quot;Original:<br>{0}<br>&quot;, stringA);\n        Console::WriteLine(&quot;Reversed:<br>{0}&quot;, stringB);\n\n        // Free HGlobal memory\n        Marshal::FreeHGlobal(dptr);\n        Marshal::FreeHGlobal(sptr);\n    }\n};\n\nint main()\n{\n    NotTooSafeStringReverse::Main();\n}\n\n// The progam has the following output:\n//\n// Original:\n// I seem to be turned around!\n//\n// Reversed:\n// !dnuora denrut eb ot mees I\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_ToString\">\r\n    \r\n            <a id=\"System_IntPtr_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of the <a class=\"xref\" href=\"system.intptr#System_IntPtr_Size_\" data-linktype=\"relative-path\">Size</a> property for this instance is 4, then this method is equivalent to <a class=\"xref\" href=\"system.int32#System_Int32_ToString_\" data-linktype=\"relative-path\">ToString</a>; otherwise, this method is equivalent to <a class=\"xref\" href=\"system.int64#System_Int64_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_ToString_System_String_\">\r\n    \r\n            <a id=\"System_IntPtr_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A format specification that governs how the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object is converted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>format</code> parameter is <code>null</code> or an empty string (&quot;&quot;), the return value is formatted with the general format specifier (&quot;G&quot;). For more information about numeric format specifiers, see the <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> topic.  </p>\n<p> The return value is formatted using the invariant culture.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Addition_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Addition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Addition(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an offset to the value of a pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr op_Addition (IntPtr pointer, int offset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pointer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pointer to add the offset to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A new pointer that reflects the addition of <code>offset</code> to <code>pointer</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Addition method defines the addition operation for <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> objects. It enables code such as the following.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IntPtr.op_Addition#1\">      int[] arr = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n      unsafe {\n         fixed(int* parr = arr)\n         {\n             IntPtr ptr = new IntPtr(parr);\n             for (int ctr = 0; ctr &lt; arr.Length; ctr++)\n             {\n                IntPtr newPtr = ptr + ctr * sizeof(Int32);\n                Console.Write(&quot;{0}   &quot;, Marshal.ReadInt32(newPtr));\n             } \n         }\n      }  \n      // The example displays the following output:\n      //       2   4   6   8   10   12   14   16   18   20         \n</code></pre><pre><code class=\"lang-vb\" name=\"System.IntPtr.op_Addition#1\">      Dim arr() As Integer = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n      Dim ptr As IntPtr = Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0)\n      For ctr As Integer = 0 To arr.Length - 1\n         Dim newPtr As IntPtr = ptr + ctr * Len(arr(0))\n         Console.WriteLine(&quot;{0}   &quot;, Marshal.ReadInt32(newPtr))\n      Next\n      &#39; The example displays the following output:\n      &#39;       2   4   6   8   10   12   14   16   18   20\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.intptr#System_IntPtr_Add_\" data-linktype=\"relative-path\">Add</a> method instead.  </p>\n<p> The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Equality_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified instances of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (IntPtr value1, IntPtr value2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first pointer or handle to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second pointer or handle to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value1</code> equals <code>value2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Explicit_System_Int32_to_System_IntPtr_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Int32)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr op_Explicit (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Explicit_System_Int64_to_System_IntPtr_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Int64)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr op_Explicit (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Explicit_System_IntPtr_to_System_Int32_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(IntPtr)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int op_Explicit (IntPtr value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Explicit_System_IntPtr_to_System_Int64_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(IntPtr)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long op_Explicit (IntPtr value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Explicit_System_IntPtr_to_System_Void__\">\r\n    \r\n            <a id=\"System_IntPtr_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(IntPtr)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void* op_Explicit (IntPtr value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>*</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Explicit_System_Void__to_System_IntPtr_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Void*)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr op_Explicit (void* value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Inequality_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether two specified instances of <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (IntPtr value1, IntPtr value2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first pointer or handle to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second pointer or handle to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value1</code> does not equal <code>value2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_op_Subtraction_System_IntPtr_System_Int32_\">\r\n    \r\n            <a id=\"System_IntPtr_op_Subtraction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Subtraction(IntPtr,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts an offset from the value of a pointer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static IntPtr op_Subtraction (IntPtr pointer, int offset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pointer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pointer to subtract the offset from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset to subtract.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A new pointer that reflects the subtraction of <code>offset</code> from <code>pointer</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Subtraction method defines the subtraction operation for <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> objects. It enables code such as the following.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IntPtr.op_Addition#2\">      int[] arr = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20};\n      unsafe {            \n         fixed(int* parr = &amp;arr[arr.GetUpperBound(0)])\n         {\n            IntPtr ptr = new IntPtr(parr);\n            for (int ctr = 0; ctr &lt;= arr.GetUpperBound(0); ctr++)\n            {\n               IntPtr newPtr = ptr - ctr * sizeof(Int32);\n               Console.Write(&quot;{0}   &quot;, Marshal.ReadInt32(newPtr));\n            }\n         }\n      }   \n      // The example displays the following output:\n      //       20   18   16   14   12   10   8   6   4   2      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.IntPtr.op_Addition#2\">      Dim arr() As Integer = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n      Dim ptr As IntPtr = Marshal.UnsafeAddrOfPinnedArrayElement(arr, arr.GetUpperBound(0))\n      For ctr As Integer= 0 To arr.GetUpperBound(0)\n         Dim newPtr As IntPtr = ptr - ctr * Len(arr(0))\n         Console.Write(&quot;{0}   &quot;, Marshal.ReadInt32(newPtr))\n      Next\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.intptr#System_IntPtr_Subtract_\" data-linktype=\"relative-path\">Subtract</a> method instead.  </p>\n<p> The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IntPtr_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_IntPtr_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data needed to serialize the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object to populate with data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination for this serialization. (This parameter is not used; specify <code>null</code>.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>info</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This  method populates the <code>info</code> parameter with the value of the current <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IntPtr.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IntPtr.yml\">\r\n<meta name=\"APIName\" content=\"System.IntPtr\">\r\n<meta name=\"APIName\" content=\"System.IntPtr..ctor\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.Add\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.Equals\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_Addition\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_op_Addition\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.op_op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.Size\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.Subtract\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.ISerializable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.ToPointer\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.ToString\">\r\n<meta name=\"APIName\" content=\"System.IntPtr.Zero\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9623c413-68cb-0116-6919-58c0d1ce944b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"A platform-specific type that is used to represent a pointer or a handle.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IntPtr\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IntPtr.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IntPtr.yml","open_to_public_contributors":true,"api_name":["System.IntPtr","System.IntPtr..ctor","System.IntPtr.Add","System.IntPtr.Equals","System.IntPtr.GetHashCode","System.IntPtr.op_Addition","System.IntPtr.op_op_Addition","System.IntPtr.op_Equality","System.IntPtr.op_op_Equality","System.IntPtr.op_Explicit","System.IntPtr.op_op_Explicit","System.IntPtr.op_Inequality","System.IntPtr.op_op_Inequality","System.IntPtr.op_Subtraction","System.IntPtr.op_op_Subtraction","System.IntPtr.Size","System.IntPtr.Subtract","System.IntPtr.ISerializable.GetObjectData","System.IntPtr.ToInt32","System.IntPtr.ToInt64","System.IntPtr.ToPointer","System.IntPtr.ToString","System.IntPtr.Zero"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IntPtr","System::IntPtr","System.IntPtr.#ctor","System::IntPtr::#ctor","System.IntPtr.Add","System::IntPtr::Add","System.IntPtr.Equals","System::IntPtr::Equals","System.IntPtr.GetHashCode","System::IntPtr::GetHashCode","System.IntPtr.op_Addition","System::IntPtr::op_Addition","System.IntPtr.op_Equality","System::IntPtr::op_Equality","System.IntPtr.op_Explicit","System::IntPtr::op_Explicit","System.IntPtr.op_Inequality","System::IntPtr::op_Inequality","System.IntPtr.op_Subtraction","System::IntPtr::op_Subtraction","System.IntPtr.Size","System::IntPtr::Size","System.IntPtr.Subtract","System::IntPtr::Subtract","System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData","System::IntPtr::System#Runtime#Serialization#ISerializable#GetObjectData","System.IntPtr.ToInt32","System::IntPtr::ToInt32","System.IntPtr.ToInt64","System::IntPtr::ToInt64","System.IntPtr.ToPointer","System::IntPtr::ToPointer","System.IntPtr.ToString","System::IntPtr::ToString","System.IntPtr.Zero","System::IntPtr::Zero"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9623c413-68cb-0116-6919-58c0d1ce944b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/IntPtr.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IntPtr struct | Microsoft Docs","_op_ogTitle":"IntPtr struct","description":"A platform-specific type that is used to represent a pointer or a handle.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.IntPtr","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.intptr","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.intptr","fileRelativePath":"System.IntPtr.html"},"themesRelativePathToOutputRoot":"_themes/"}