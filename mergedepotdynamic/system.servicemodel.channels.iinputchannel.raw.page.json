{"content":"    \r\n    <h1 id=\"System_ServiceModel_Channels_IInputChannel\">\r\n      <span class=\"lang-csharp\">IInputChannel</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines the interface that a channel must implement to receive a message.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IInputChannel : System.ServiceModel.Channels.IChannel</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The IInputChannel contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.  </p>\n<p> The pull model is used typically with an IInputChannel to receive messages: you call <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> (to &quot;pull&quot; a message out of the channel) and then wait for a message to arrive. An alternative usage pattern is to call <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_BeginWaitForMessage_System_TimeSpan_System_AsyncCallback_System_Object_\" data-linktype=\"relative-path\">BeginWaitForMessage(TimeSpan,AsyncCallback,Object)</a> or <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_BeginWaitForMessage_System_TimeSpan_System_AsyncCallback_System_Object_\" data-linktype=\"relative-path\">BeginWaitForMessage(TimeSpan,AsyncCallback,Object)</a>, and then call <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_System_TimeSpan_\" data-linktype=\"relative-path\">Receive(TimeSpan)</a>. This approach is common for transactional usages where you start the transaction between the calls to <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_WaitForMessage_System_TimeSpan_\" data-linktype=\"relative-path\">WaitForMessage(TimeSpan)</a> and <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a>.  </p>\n<p> An IInputChannel is not necessarily bound to a single sender. Other channels and channel interfaces can provide a correlation between particular senders and an IInputChannel, but the base contract makes no such restriction. An implementation can create a new IInputChannel for each message or reuse the same IInputChannel for multiple messages and senders.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_LocalAddress\" data-linktype=\"self-bookmark\">LocalAddress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the address on which the input channel receives messages.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_BeginReceive_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginReceive(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous operation to receive a message that has a state object associated with it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_BeginReceive_System_TimeSpan_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginReceive(TimeSpan,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_BeginTryReceive_System_TimeSpan_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginTryReceive(TimeSpan,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_BeginWaitForMessage_System_TimeSpan_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginWaitForMessage(TimeSpan,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_EndReceive_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndReceive(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes an asynchronous operation to receive a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_EndTryReceive_System_IAsyncResult_System_ServiceModel_Channels_Message__\" data-linktype=\"self-bookmark\">EndTryReceive(IAsyncResult,Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes the specified asynchronous operation to receive a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_EndWaitForMessage_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndWaitForMessage(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes the specified asynchronous wait-for-a-message operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_Receive\" data-linktype=\"self-bookmark\">Receive()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the message received, if one is available. If a message is not available, blocks for a default interval of time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_Receive_System_TimeSpan_\" data-linktype=\"self-bookmark\">Receive(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the message received, if one is available. If a message is not available, blocks for a specified interval of time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_TryReceive_System_TimeSpan_System_ServiceModel_Channels_Message__\" data-linktype=\"self-bookmark\">TryReceive(TimeSpan,Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tries to receive a message within a specified interval of time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Channels_IInputChannel_WaitForMessage_System_TimeSpan_\" data-linktype=\"self-bookmark\">WaitForMessage(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether a message has arrived within a specified interval of time.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_LocalAddress\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_LocalAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalAddress</div>        \r\n          </div>\r\n    \r\n            <p>Gets the address on which the input channel receives messages.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.ServiceModel.EndpointAddress LocalAddress { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.endpointaddress\" data-linktype=\"relative-path\">EndpointAddress</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.servicemodel.endpointaddress\" data-linktype=\"relative-path\">EndpointAddress</a> on which the input channel receives messages.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is <code>null</code>.  </p>\n<p> This property can be used by higher-level channels for correlation purposes. For example, if a higher-level channel implements request-reply on top of a <a class=\"xref\" href=\"system.servicemodel.channels.iduplexchannel\" data-linktype=\"relative-path\">IDuplexChannel</a>, it can use the LocalAddress property in the WS-Addressing ReplyTo header.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this property:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#12\">        public EndpointAddress LocalAddress\n        {\n            get\n            {\n                return this.InnerChannel.LocalAddress;\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_BeginReceive_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_BeginReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginReceive(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous operation to receive a message that has a state object associated with it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginReceive (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that receives the notification of the asynchronous operation completion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object, specified by the application, that contains state information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the asynchronous message reception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the asynchronous BeginReceive method when you want the application processing to continue without waiting for the request to be received. Use the synchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <code>timeout</code> has been exceeded. The asynchronous operation is available with or without an explicit timeout.  </p>\n<p> This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until a message becomes available in the channel.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#15\">        public IAsyncResult BeginReceive(AsyncCallback callback, object state)\n        {\n            return BeginReceive(DefaultReceiveTimeout, callback, state);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_BeginReceive_System_TimeSpan_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_BeginReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginReceive(TimeSpan,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that specifies the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that receives the notification of the asynchronous operation completion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object, specified by the application, that contains state information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the asynchronous receive operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a></div>\r\n                  </div>\r\n                  <p>The specified <code>timeout</code> is exceeded before the operation is completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The timeout specified is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the asynchronous BeginReceive method when you want the application processing to continue without waiting for the request to be received. Use the synchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <code>timeout</code> has been exceeded. The asynchronous operation is available with or without an explicit timeout.  </p>\n<p> The operation is not complete until either a message becomes available in the channel or the time out occurs.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#16\">        public IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state)\n        {\n            ReceiveAsyncResult&lt;TChannel&gt; result = new ReceiveAsyncResult&lt;TChannel&gt;(this, timeout, callback, state);\n            result.Begin();\n            return result;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_BeginTryReceive_System_TimeSpan_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_BeginTryReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginTryReceive(TimeSpan,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that specifies the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that receives the notification of the asynchronous operation completion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object, specified by the application, that contains state information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the asynchronous receive operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a></div>\r\n                  </div>\r\n                  <p>The specified <code>timeout</code> is exceeded before the operation is completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The timeout specified is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the asynchronous BeginTryReceive method when you want the application processing to continue without waiting. Use the synchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_TryReceive_System_TimeSpan_System_ServiceModel_Channels_Message__\" data-linktype=\"relative-path\">TryReceive(TimeSpan,Message)</a> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.  </p>\n<p> The operation is not complete until either a message becomes available in the channel or the timeout occurs.  </p>\n<p> If you are going to handle timeouts and not just re-throw or wrap the <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a>, then you should call BeginTryReceive instead of <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> If you are not going to treat timeouts specially then just call <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>, otherwise you lose error information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#19\">        public IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state)\n        {\n            TryReceiveAsyncResult&lt;TChannel&gt; result = new TryReceiveAsyncResult&lt;TChannel&gt;(this, timeout, callback, state);\n            result.Begin();\n            return result;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_BeginWaitForMessage_System_TimeSpan_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_BeginWaitForMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginWaitForMessage(TimeSpan,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that specifies the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that receives the notification of the asynchronous operation completion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object, specified by the application, that contains state information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the asynchronous operation to wait for a message to arrive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a></div>\r\n                  </div>\r\n                  <p>The specified <code>timeout</code> is exceeded before the operation is completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The timeout specified is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the asynchronous BeginWaitForMessage method if you need the application processing to continue without waiting for the message to arrive. Use the synchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_WaitForMessage_System_TimeSpan_\" data-linktype=\"relative-path\">WaitForMessage(TimeSpan)</a> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified <code>timeout</code>.  </p>\n<p> This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the channel or the time out occurs.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#22\">        public IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state)\n        {\n            return this.InnerChannel.BeginWaitForMessage(timeout, callback, state);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_EndReceive_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_EndReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndReceive(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Completes an asynchronous operation to receive a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by a call to one of the <span class=\"xref\">stem.ServiceModel.Channels.IInputChannel.BeginReceive*</span> methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a> received.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#17\">        public Message EndReceive(IAsyncResult result)\n        {\n            return ReceiveAsyncResult&lt;TChannel&gt;.End(result);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_EndTryReceive_System_IAsyncResult_System_ServiceModel_Channels_Message__\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_EndTryReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndTryReceive(IAsyncResult,Message)</div>        \r\n          </div>\r\n    \r\n            <p>Completes the specified asynchronous operation to receive a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by a call to the <span class=\"xref\">stem.ServiceModel.Channels.IInputChannel.BeginTryReceive*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a> received.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a message is received before the specified interval of time elapses; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#20\">        public bool EndTryReceive(IAsyncResult result, out Message message)\n        {\n            return TryReceiveAsyncResult&lt;TChannel&gt;.End(result, out message);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_EndWaitForMessage_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_EndWaitForMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndWaitForMessage(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Completes the specified asynchronous wait-for-a-message operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EndWaitForMessage (IAsyncResult result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the <span class=\"xref\">stem.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)</span> operation to finish, and from which to retrieve an end result.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a message has arrived before the <code>timeout</code> has been exceeded; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#23\">        public bool EndWaitForMessage(IAsyncResult result)\n        {\n            return this.InnerChannel.EndWaitForMessage(result);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_Receive\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the message received, if one is available. If a message is not available, blocks for a default interval of time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.ServiceModel.Channels.Message Receive ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a> received.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the synchronous Receive method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <code>timeout</code>. Use the asynchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> method when you want the application processing to continue without waiting for the request to be received.  </p>\n<p> The synchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> operation is available with or without an explicit timeout.  </p>\n<p> If a message is not available, it blocks until one is available or until the timeout is exceeded.  </p>\n<p> Receive can be called multiple times or concurrently. Only one Receive call can complete for each message received.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#13\">        public Message Receive()\n        {\n            return Receive(DefaultReceiveTimeout);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_Receive_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the message received, if one is available. If a message is not available, blocks for a specified interval of time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that specifies how long the receive operation has to complete before timing out and throwing a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a> received.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a></div>\r\n                  </div>\r\n                  <p>The specified <code>timeout</code> is exceeded before the operation is completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The timeout specified is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the synchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <code>timeout</code>. Use the asynchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> method when you want the application processing to continue without waiting for the request to be received.  </p>\n<p> The synchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> operation is available with or without an explicit timeout.  </p>\n<p> If a message is not available, it blocks until one is available or until the timeout is exceeded.  </p>\n<p> <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> can be called multiple times or concurrently. Only one <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> call can complete for each message received.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#14\">        public Message Receive(TimeSpan timeout)\n        {\n            Message message;\n            while (true)\n            {\n                message = this.InnerChannel.Receive(timeout);\n                if (ProcessReceivedMessage(ref message))\n                {\n                    break;\n                }\n            }\n\n            return message;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_TryReceive_System_TimeSpan_System_ServiceModel_Channels_Message__\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_TryReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryReceive(TimeSpan,Message)</div>        \r\n          </div>\r\n    \r\n            <p>Tries to receive a message within a specified interval of time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by a call to one of the <span class=\"xref\">stem.ServiceModel.Channels.IInputChannel.BeginReceive*</span> methods.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a> received.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a message is received before the <code>timeout</code> has been exceeded; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a></div>\r\n                  </div>\r\n                  <p>The specified <code>timeout</code> is exceeded before the operation is completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The timeout specified is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you are going to handle timeouts and not just re-throw or wrap the <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a>, then you should call TryReceive instead of <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a>.  </p>\n<p> If you are not going to treat timeouts specially then just call <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a>, otherwise you will lose error information.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#18\">        public bool TryReceive(TimeSpan timeout, out Message message)\n        {\n            bool result;\n            while (true)\n            {\n                result = this.InnerChannel.TryReceive(timeout, out message);\n                if (ProcessReceivedMessage(ref message))\n                {\n                    break;\n                }\n            }\n\n            return result;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Channels_IInputChannel_WaitForMessage_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_ServiceModel_Channels_IInputChannel_WaitForMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForMessage(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether a message has arrived within a specified interval of time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool WaitForMessage (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> specifies the maximum interval of time to wait for a message to arrive before timing out.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a message has arrived before the <code>timeout</code> has been exceeded; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a></div>\r\n                  </div>\r\n                  <p>The specified <code>timeout</code> is exceeded before the operation is completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The timeout specified is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling WaitForMessage does not result in a message being received or processed in any other way.  </p>\n<p> The WaitForMessage method exists primarily for transacted scenarios where the user wants to receive the message using a transaction. When using just <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> normally for this, the user must create the transaction and then call <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> and hope the message arrives before the transaction times out, which may not be possible.  </p>\n<p> Instead, the user can call WaitForMessage with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_Receive_\" data-linktype=\"relative-path\">Receive</a> and be confident that they can get the message back before the transaction expires.  </p>\n<p> This method is synchronous, so it blocks the current thread until a message is available or the time out occurs. Use WaitForMessage when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified <code>timeout</code>. If you need the application processing to continue without waiting, use the asynchronous <a class=\"xref\" href=\"system.servicemodel.channels.iinputchannel#System_ServiceModel_Channels_IInputChannel_BeginWaitForMessage_System_TimeSpan_System_AsyncCallback_System_Object_\" data-linktype=\"relative-path\">BeginWaitForMessage(TimeSpan,AsyncCallback,Object)</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code illustrates how to implement this method:  </p>\n<pre><code class=\"lang-cs\" name=\"S_UE_MessageInterceptor#21\">        public bool WaitForMessage(TimeSpan timeout)\n        {\n            return this.InnerChannel.WaitForMessage(timeout);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ServiceModel.Channels.IInputChannel.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ServiceModel.Channels.IInputChannel.yml\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.BeginReceive\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.BeginTryReceive\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.EndReceive\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.EndTryReceive\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.EndWaitForMessage\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.LocalAddress\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.Receive\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.TryReceive\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Channels.IInputChannel.WaitForMessage\">\r\n<meta name=\"APILocation\" content=\"System.ServiceModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"065c2890-cbc0-964b-0594-07dcdd66a7b6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.ServiceModel.Channels\\IInputChannel.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the interface that a channel must implement to receive a message.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.ServiceModel.Channels/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ServiceModel.Channels.IInputChannel\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ServiceModel.Channels.IInputChannel.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ServiceModel.Channels.IInputChannel.yml","open_to_public_contributors":true,"api_name":["System.ServiceModel.Channels.IInputChannel","System.ServiceModel.Channels.IInputChannel.BeginReceive","System.ServiceModel.Channels.IInputChannel.BeginTryReceive","System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage","System.ServiceModel.Channels.IInputChannel.EndReceive","System.ServiceModel.Channels.IInputChannel.EndTryReceive","System.ServiceModel.Channels.IInputChannel.EndWaitForMessage","System.ServiceModel.Channels.IInputChannel.LocalAddress","System.ServiceModel.Channels.IInputChannel.Receive","System.ServiceModel.Channels.IInputChannel.TryReceive","System.ServiceModel.Channels.IInputChannel.WaitForMessage"],"api_location":["System.ServiceModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ServiceModel.Channels.IInputChannel","System::ServiceModel::Channels::IInputChannel","System.ServiceModel.Channels.IInputChannel.BeginReceive","System::ServiceModel::Channels::IInputChannel::BeginReceive","System.ServiceModel.Channels.IInputChannel.BeginTryReceive","System::ServiceModel::Channels::IInputChannel::BeginTryReceive","System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage","System::ServiceModel::Channels::IInputChannel::BeginWaitForMessage","System.ServiceModel.Channels.IInputChannel.EndReceive","System::ServiceModel::Channels::IInputChannel::EndReceive","System.ServiceModel.Channels.IInputChannel.EndTryReceive","System::ServiceModel::Channels::IInputChannel::EndTryReceive","System.ServiceModel.Channels.IInputChannel.EndWaitForMessage","System::ServiceModel::Channels::IInputChannel::EndWaitForMessage","System.ServiceModel.Channels.IInputChannel.LocalAddress","System::ServiceModel::Channels::IInputChannel::LocalAddress","System.ServiceModel.Channels.IInputChannel.Receive","System::ServiceModel::Channels::IInputChannel::Receive","System.ServiceModel.Channels.IInputChannel.TryReceive","System::ServiceModel::Channels::IInputChannel::TryReceive","System.ServiceModel.Channels.IInputChannel.WaitForMessage","System::ServiceModel::Channels::IInputChannel::WaitForMessage"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"065c2890-cbc0-964b-0594-07dcdd66a7b6","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.ServiceModel.Channels\\IInputChannel.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.ServiceModel.Channels/IInputChannel.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IInputChannel interface | Microsoft Docs","_op_ogTitle":"IInputChannel interface","description":"Defines the interface that a channel must implement to receive a message.\n","toc_asset_id":"_splitted/System.ServiceModel.Channels/toc.json","toc_rel":"_splitted/System.ServiceModel.Channels/toc.json","source_url":"","ms.assetid":"System.ServiceModel.Channels.IInputChannel","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.servicemodel.channels.iinputchannel","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.servicemodel.channels.iinputchannel","fileRelativePath":"System.ServiceModel.Channels.IInputChannel.html"},"themesRelativePathToOutputRoot":"_themes/"}