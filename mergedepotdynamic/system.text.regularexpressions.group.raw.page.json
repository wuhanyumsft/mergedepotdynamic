{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Group</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the results from a single capturing group.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class Group : System.Text.RegularExpressions.Capture</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Capture</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Group</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Index\" data-linktype=\"relative-path\">Index</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Length\" data-linktype=\"relative-path\">Length</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value\" data-linktype=\"relative-path\">Value</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A capturing group can capture zero, one, or more strings in a single match because of quantifiers. (For more information, see <a href=\"../Topic/Quantifiers%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Quantifiers</a>.) All the substrings matched by a single capturing group are available from the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> property. Information about the last substring captured can be accessed directly from the <code>Value</code> and <code>Index</code> properties. (That is, the Group instance is equivalent to the last item of the collection returned by the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> property, which reflects the last capture made by the capturing group.)  </p>\n<p> An example helps to clarify this relationship between a Group object and the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">System.Text.RegularExpressions.CaptureCollection</a> that is returned by the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> property. The regular expression pattern <code>(\\b(\\w+?)[,:;]?\\s?)+[?.!]</code> matches entire sentences. The regular expression is defined as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\b</code></td>\n<td>Begin the match at a word boundary.</td>\n</tr>\n<tr>\n<td><code>(\\w+?)</code></td>\n<td>Match one or more word characters, but as few characters as possible. This is the second (inner) capturing group. (The first capturing group includes the <code>\\b</code> language element.)</td>\n</tr>\n<tr>\n<td><code>[,:;]?</code></td>\n<td>Match zero or one occurrence of a comma, colon, or semicolon.</td>\n</tr>\n<tr>\n<td><code>\\s?</code></td>\n<td>Match zero or one occurrence of a white-space character.</td>\n</tr>\n<tr>\n<td><code>(\\b(\\w+?)[,:;]?\\s?)+</code></td>\n<td>Match the pattern consisting of a word boundary, one or more word characters, a punctuation symbol, and a white-space character one or more times. This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>[?.!]</code></td>\n<td>Match any occurrence of a period, question mark, or exclamation point.</td>\n</tr>\n</tbody>\n</table>\n<p> In this regular expression pattern, the subpattern <code>(\\w+?)</code> is designed to match multiple words within a sentence. However, the value of the Group object represents only the last match that <code>(\\w+?)</code> captures, whereas the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> property returns a <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a> that represents all captured text. As the output shows, the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a> for the second capturing group contains four objects. The last of these corresponds to the Group object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Group.Class#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;(\\b(\\w+?)[,:;]?\\s?)+[?.!]&quot;;\n      string input = &quot;This is one sentence. This is a second sentence.&quot;;\n\n      Match match = Regex.Match(input, pattern);\n      Console.WriteLine(&quot;Match: &quot; + match.Value);\n      int groupCtr = 0;\n      foreach (Group group in match.Groups)\n      {\n         groupCtr++;\n         Console.WriteLine(&quot;   Group {0}: &#39;{1}&#39;&quot;, groupCtr, group.Value);\n         int captureCtr = 0;\n         foreach (Capture capture in group.Captures)\n         {\n            captureCtr++;\n            Console.WriteLine(&quot;      Capture {0}: &#39;{1}&#39;&quot;, captureCtr, capture.Value);\n         }\n      }   \n   }\n}\n// The example displays the following output:\n//       Match: This is one sentence.\n//          Group 1: &#39;This is one sentence.&#39;\n//             Capture 1: &#39;This is one sentence.&#39;\n//          Group 2: &#39;sentence&#39;\n//             Capture 1: &#39;This &#39;\n//             Capture 2: &#39;is &#39;\n//             Capture 3: &#39;one &#39;\n//             Capture 4: &#39;sentence&#39;\n//          Group 3: &#39;sentence&#39;\n//             Capture 1: &#39;This&#39;\n//             Capture 2: &#39;is&#39;\n//             Capture 3: &#39;one&#39;\n//             Capture 4: &#39;sentence&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Group.Class#1\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;(\\b(\\w+?)[,:;]?\\s?)+[?.!]&quot;\n      Dim input As String = &quot;This is one sentence. This is a second sentence.&quot;\n\n      Dim match As Match = Regex.Match(input, pattern)\n      Console.WriteLine(&quot;Match: &quot; + match.Value)\n      Dim groupCtr As Integer = 0\n      For Each group As Group In match.Groups\n         groupCtr += 1\n         Console.WriteLine(&quot;   Group {0}: &#39;{1}&#39;&quot;, groupCtr, group.Value)\n         Dim captureCtr As Integer = 0\n         For Each capture As Capture In group.Captures\n            captureCtr += 1\n            Console.WriteLine(&quot;      Capture {0}: &#39;{1}&#39;&quot;, captureCtr, capture.Value)\n         Next\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Match: This is one sentence.\n&#39;          Group 1: &#39;This is one sentence.&#39;\n&#39;             Capture 1: &#39;This is one sentence.&#39;\n&#39;          Group 2: &#39;sentence&#39;\n&#39;             Capture 1: &#39;This &#39;\n&#39;             Capture 2: &#39;is &#39;\n&#39;             Capture 3: &#39;one &#39;\n&#39;             Capture 4: &#39;sentence&#39;\n&#39;          Group 3: &#39;sentence&#39;\n&#39;             Capture 1: &#39;This&#39;\n&#39;             Capture 2: &#39;is&#39;\n&#39;             Capture 3: &#39;one&#39;\n&#39;             Capture 4: &#39;sentence&#39;\n</code></pre>\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Group_Captures\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Captures</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> option). The collection may have zero or more items.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Text.RegularExpressions.CaptureCollection Captures { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The collection of substrings matched by the group.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If a quantifier is not applied to a capturing group, the collection returned by the Captures property contains a single <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> object that provides information about the same substring as the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object. This is illustrated in the following example. It defines a regular expression, <code>\\b(\\w+)\\b</code>, that extracts a single word from a sentence. The <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object captures the word &quot;This&quot;, and the single object in the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a> contains information about the same capture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Group.Captures#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;\\b(\\w+)\\b&quot;;\n      string input = &quot;This is one sentence.&quot;;\n      Match match = Regex.Match(input, pattern);\n      if (match.Success) {\n         Console.WriteLine(&quot;Matched text: {0}&quot;, match.Value);\n         for (int ctr = 1; ctr &lt;= match.Groups.Count - 1; ctr++) {\n            Console.WriteLine(&quot;   Group {0}:  {1}&quot;, ctr, match.Groups[ctr].Value);\n            int captureCtr = 0;\n            foreach (Capture capture in match.Groups[ctr].Captures) {\n               Console.WriteLine(&quot;      Capture {0}: {1}&quot;, \n                                 captureCtr, capture.Value);\n               captureCtr += 1;                  \n            }\n         }\n      }   \n   }\n}\n// The example displays the following output:\n//       Matched text: This\n//          Group 1:  This\n//             Capture 0: This\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Group.Captures#1\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;\\b(\\w+)\\b&quot;\n      Dim input As String = &quot;This is one sentence.&quot;\n      Dim match As Match = Regex.Match(input, pattern)\n      If match.Success Then\n         Console.WriteLine(&quot;Matched text: {0}&quot;, match.Value)\n         For ctr As Integer = 1 To match.Groups.Count - 1\n            Console.WriteLine(&quot;   Group {0}:  {1}&quot;, ctr, match.Groups(ctr).Value)\n            Dim captureCtr As Integer = 0\n            For Each capture As Capture In match.Groups(ctr).Captures\n               Console.WriteLine(&quot;      Capture {0}: {1}&quot;, _\n                                 captureCtr, capture.Value)\n               captureCtr += 1                  \n            Next\n         Next\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Matched text: This\n&#39;          Group 1:  This\n&#39;             Capture 0: This\n</code></pre><p> The real utility of the Captures property occurs when a quantifier is applied to a capturing group so that the group captures multiple substrings in a single regular expression. In this case, the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object contains information about the last captured substring, whereas the Captures property contains information about all the substrings captured by the group. In the following example, the regular expression <code>\\b(\\w+\\s*)+\\.</code> matches an entire sentence that ends in a period. The group <code>(\\w+\\s*)+</code> captures the individual words in the collection. Because the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> collection contains information only about the last captured substring, it captures the last word in the sentence, &quot;sentence&quot;. However, each word captured by the group is available from the collection returned by the Captures property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Group.Captures#2\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;This is a sentence. This is another sentence.&quot;;\n      string pattern = @&quot;\\b(\\w+\\s*)+\\.&quot;;\n      Match match = Regex.Match(input, pattern);\n      if (match.Success) {\n         Console.WriteLine(&quot;Matched text: {0}&quot;, match.Value);\n         for (int ctr = 1; ctr &lt; match.Groups.Count; ctr++) {\n            Console.WriteLine(&quot;   Group {0}:  {1}&quot;, ctr, match.Groups[ctr].Value);\n            int captureCtr = 0;\n            foreach (Capture capture in match.Groups[ctr].Captures) {\n               Console.WriteLine(&quot;      Capture {0}: {1}&quot;, \n                                 captureCtr, capture.Value);\n               captureCtr++; \n            }\n         }\n      }   \n   }\n}\n// The example displays the following output:\n//       Matched text: This is a sentence.\n//          Group 1:  sentence\n//             Capture 0: This\n//             Capture 1: is\n//             Capture 2: a\n//             Capture 3: sentence\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Group.Captures#2\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;This is a sentence. This is another sentence.&quot;\n      Dim pattern As String = &quot;\\b(\\w+\\s*)+\\.&quot;\n      Dim match As Match = Regex.Match(input, pattern)\n      If match.Success Then\n         Console.WriteLine(&quot;Matched text: {0}&quot;, match.Value)\n         For ctr As Integer = 1 To match.Groups.Count - 1\n            Console.WriteLine(&quot;   Group {0}:  {1}&quot;, ctr, match.Groups(ctr).Value)\n            Dim captureCtr As Integer = 0\n            For Each capture As Capture In match.Groups(ctr).Captures\n               Console.WriteLine(&quot;      Capture {0}: {1}&quot;, _\n                                 captureCtr, capture.Value)\n               captureCtr += 1                  \n            Next\n         Next\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Matched text: This is a sentence.\n&#39;          Group 1:  sentence\n&#39;             Capture 0: This\n&#39;             Capture 1: is\n&#39;             Capture 2: a\n&#39;             Capture 3: sentence\n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Group_Success\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Success</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the match is successful.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Success { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the match is successful; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>Success</code> property is true if at least one substring was captured by this group. It is equivalent to the Boolean expression (Group.Captures.Count &gt; 0).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Group_Synchronized_System_Text_RegularExpressions_Group_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Synchronized(Group)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <code>Group</code> object equivalent to the one supplied that is safe to share between multiple threads.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Text.RegularExpressions.Group Synchronized (System.Text.RegularExpressions.Group inner);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>inner</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A regular expression <code>Group</code> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>inner</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.Group.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.Group.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Group\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Group.Captures\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Group.Success\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Group.Synchronized\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"da61b305-3d71-bf02-3ed0-94b6a597823d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the results from a single capturing group.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text.RegularExpressions/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.RegularExpressions.Group\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.Group.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.Group.yml","open_to_public_contributors":true,"api_name":["System.Text.RegularExpressions.Group","System.Text.RegularExpressions.Group.Captures","System.Text.RegularExpressions.Group.Success","System.Text.RegularExpressions.Group.Synchronized"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.RegularExpressions.Group","System::Text::RegularExpressions::Group","System.Text.RegularExpressions.Group.Captures","System::Text::RegularExpressions::Group::Captures","System.Text.RegularExpressions.Group.Success","System::Text::RegularExpressions::Group::Success","System.Text.RegularExpressions.Group.Synchronized","System::Text::RegularExpressions::Group::Synchronized"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"da61b305-3d71-bf02-3ed0-94b6a597823d","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text.RegularExpressions/Group.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Group class | Microsoft Docs","_op_ogTitle":"Group class","description":"Represents the results from a single capturing group.\n","toc_asset_id":"_splitted/System.Text.RegularExpressions/toc.json","toc_rel":"_splitted/System.Text.RegularExpressions/toc.json","source_url":"","ms.assetid":"System.Text.RegularExpressions.Group","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.group","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.group","fileRelativePath":"System.Text.RegularExpressions.Group.html"},"themesRelativePathToOutputRoot":"_themes/"}