{"content":"    \r\n    <h1 id=\"System_Security_Permissions_SecurityPermission\">\r\n      <span class=\"lang-csharp\">SecurityPermission</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Describes a set of security permissions applied to code. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class SecurityPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">System.Security.CodeAccessPermission</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SecurityPermission</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert\" data-linktype=\"relative-path\">Assert()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand\" data-linktype=\"relative-path\">Demand()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny\" data-linktype=\"relative-path\">Deny()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_PermitOnly\" data-linktype=\"relative-path\">PermitOnly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAll\" data-linktype=\"relative-path\">RevertAll()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAssert\" data-linktype=\"relative-path\">RevertAssert()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertDeny\" data-linktype=\"relative-path\">RevertDeny()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertPermitOnly\" data-linktype=\"relative-path\">RevertPermitOnly()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This permission uses the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> enumeration. The values for this enumeration can be found in its documentation.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission__ctor_System_Security_Permissions_PermissionState_\" data-linktype=\"self-bookmark\">SecurityPermission(PermissionState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> class with either restricted or unrestricted permission as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission__ctor_System_Security_Permissions_SecurityPermissionFlag_\" data-linktype=\"self-bookmark\">SecurityPermission(SecurityPermissionFlag)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> class with the specified initial set state of the flags.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission_Flags\" data-linktype=\"self-bookmark\">Flags</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the security permission flags.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns an identical copy of the current permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission_FromXml_System_Security_SecurityElement_\" data-linktype=\"self-bookmark\">FromXml(SecurityElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reconstructs a permission with a specified state from an XML encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission_Intersect_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Intersect(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns a permission that is the intersection of the current permission and the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission_IsSubsetOf_System_Security_IPermission_\" data-linktype=\"self-bookmark\">IsSubsetOf(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current permission is a subset of the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission_IsUnrestricted\" data-linktype=\"self-bookmark\">IsUnrestricted()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether the current permission is unrestricted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission_ToXml\" data-linktype=\"self-bookmark\">ToXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an XML encoding of the permission and its current state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Permissions_SecurityPermission_Union_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Union(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a permission that is the union of the current permission and the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission__ctor_System_Security_Permissions_PermissionState_\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecurityPermission(PermissionState)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> class with either restricted or unrestricted permission as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SecurityPermission (System.Security.Permissions.PermissionState state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>state</code> parameter is not a valid value of <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Creates either fully restricted (<code>None</code>) or <code>Unrestricted</code> access to all security permissions.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission__ctor_System_Security_Permissions_SecurityPermissionFlag_\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SecurityPermission(SecurityPermissionFlag)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> class with the specified initial set state of the flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SecurityPermission (System.Security.Permissions.SecurityPermissionFlag flag);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>flag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>flag</code> parameter is not a valid value of <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the use of the SecurityPermission constructor to create instances of the <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> class that are used to demand security permissions.  For the complete code example, see the <a class=\"xref\" href=\"system.security.permissions.securitypermissionattribute#System_Security_Permissions_SecurityPermissionAttribute__ctor_System_Security_Permissions_SecurityAction_\" data-linktype=\"relative-path\">SecurityPermissionAttribute(SecurityAction)</a> constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.SecurityPermissionAttribute#18\">    public static void DemandSecurityPermissions()\n    {\n        Console.WriteLine(&quot;<br>Executing DemandSecurityPermissions.<br>&quot;);\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Assertion);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Assertion&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Assertion succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Assertion failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlAppDomain);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlAppDomain&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlAppDomain succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlAppDomain failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlDomainPolicy);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlDomainPolicy&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlEvidence);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlEvidence&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlEvidence succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlEvidence failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlPolicy);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPolicy&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPolicy succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPolicy failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlPrincipal);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPrincipal&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPrincipal succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPrincipal failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.ControlThread);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlThread&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlThread succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlThread failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Execution);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Execution&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Execution succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Execution failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.Infrastructure);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Infrastructure&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Infrastructure succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Infrastructure failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.RemotingConfiguration);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.RemotingConfiguration&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.RemotingConfiguration succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.RemotingConfiguration failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.SerializationFormatter);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SerializationFormatter&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SerializationFormatter succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SerializationFormatter failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.SkipVerification);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SkipVerification&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SkipVerification succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SkipVerification failed: &quot; + e.Message);\n        }\n        try\n        {\n            SecurityPermission sp =\n                new SecurityPermission(SecurityPermissionFlag.UnmanagedCode);\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.UnmanagedCode&quot;);\n            sp.Demand();\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.UnmanagedCode succeeded.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.UnmanagedCode failed: &quot; + e.Message);\n        }\n\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.SecurityPermissionAttribute#18\">   static void DemandSecurityPermissions()\n   {\n      Console::WriteLine( &quot;<br>Executing DemandSecurityPermissions.<br>&quot; );\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Assertion );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Assertion&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Assertion succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Assertion failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlAppDomain );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlAppDomain&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlAppDomain succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlAppDomain failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlDomainPolicy );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlDomainPolicy&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlDomainPolicy succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlDomainPolicy failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlEvidence );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlEvidence&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlEvidence succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlEvidence failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlPolicy );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlPolicy&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPolicy succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPolicy failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlPrincipal );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlPrincipal&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPrincipal succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlPrincipal failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::ControlThread );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::ControlThread&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlThread succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::ControlThread failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Execution );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Execution&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Execution succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Execution failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::Infrastructure );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::Infrastructure&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Infrastructure succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::Infrastructure failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::RemotingConfiguration );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::RemotingConfiguration&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::RemotingConfiguration succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::RemotingConfiguration failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::SerializationFormatter );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::SerializationFormatter&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SerializationFormatter succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SerializationFormatter failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::SkipVerification );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::SkipVerification&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SkipVerification succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::SkipVerification failed: {0}&quot;, e-&gt;Message );\n      }\n\n      try\n      {\n         SecurityPermission^ sp = gcnew SecurityPermission( SecurityPermissionFlag::UnmanagedCode );\n         Console::WriteLine( &quot;Demanding SecurityPermissionFlag::UnmanagedCode&quot; );\n         sp-&gt;Demand();\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::UnmanagedCode succeeded.&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Demand for SecurityPermissionFlag::UnmanagedCode failed: {0}&quot;, e-&gt;Message );\n      }\n\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.SecurityPermissionAttribute#18\">    Public Shared Sub DemandSecurityPermissions()\n        Console.WriteLine(ControlChars.Lf &amp; &quot;Executing DemandSecurityPermissions.&quot; &amp; ControlChars.Lf)\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Assertion)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Assertion&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Assertion succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Assertion failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlAppDomain)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlAppDomain&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlAppDomain succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlAppDomain failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlDomainPolicy)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlDomainPolicy&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlDomainPolicy failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlEvidence)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlEvidence&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlEvidence succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlEvidence failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlPolicy)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPolicy&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPolicy succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlPolicy failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlPrincipal)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlPrincipal&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlPrincipal succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlPrincipal failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.ControlThread)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.ControlThread&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.ControlThread succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.ControlThread failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Execution)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Execution&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Execution succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Execution failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.Infrastructure)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.Infrastructure&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.Infrastructure succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.Infrastructure failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.RemotingConfiguration)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.RemotingConfiguration&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.RemotingConfiguration succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.RemotingConfiguration failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.SerializationFormatter)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SerializationFormatter&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SerializationFormatter succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.SerializationFormatter failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.SkipVerification)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.SkipVerification&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.SkipVerification succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.SkipVerification failed: &quot; &amp; e.Message))\n        End Try\n        Try\n            Dim sp As New SecurityPermission(SecurityPermissionFlag.UnmanagedCode)\n            Console.WriteLine(&quot;Demanding SecurityPermissionFlag.UnmanagedCode&quot;)\n            sp.Demand()\n            Console.WriteLine(&quot;Demand for SecurityPermissionFlag.UnmanagedCode succeeded.&quot;)\n        Catch e As Exception\n            Console.WriteLine((&quot;Demand for SecurityPermissionFlag.UnmanagedCode failed: &quot; &amp; e.Message))\n        End Try\n    End Sub &#39;DemandSecurityPermissions\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission_Flags\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission_Flags_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flags</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the security permission flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a></div>\r\n                  </div>\r\n                  <p>The state of the current permission, represented by a bitwise OR combination of any permission bits defined by <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An attempt is made to set this property to an invalid value. See <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> for the valid values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Individual permission bits can be determined by performing an AND operation against this value and checking for nonzero.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission_Copy\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns an identical copy of the current permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A copy of the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A copy of a permission represents the same access to resources as the original permission.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission_FromXml_System_Security_SecurityElement_\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission_FromXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXml(SecurityElement)</div>        \r\n          </div>\r\n    \r\n            <p>Reconstructs a permission with a specified state from an XML encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void FromXml (System.Security.SecurityElement esd);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>esd</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML encoding to use to reconstruct the permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>esd</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>esd</code> parameter is not a valid permission element.  </p>\n<p> -or-  </p>\n<p> The <code>esd</code> parameter&#39;s version number is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission_Intersect_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission_Intersect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns a permission that is the intersection of the current permission and the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Intersect (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission to intersect with the current permission. It must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new permission object that represents the intersection of the current permission and the specified permission. This new permission is <code>null</code> if the intersection is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will pass the intersection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission_IsSubsetOf_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission_IsSubsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubsetOf(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current permission is a subset of the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSubsetOf (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current permission is a subset of the specified permission; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\. If this method returns <code>true</code>, the current permission represents no more access to the protected resource than does the specified permission.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission_IsUnrestricted\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission_IsUnrestricted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUnrestricted()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether the current permission is unrestricted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsUnrestricted ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current permission is unrestricted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An unrestricted permission represents access to any and all resources protected by the permission.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission_ToXml\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission_ToXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXml()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an XML encoding of the permission and its current state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.SecurityElement ToXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>An XML encoding of the permission, including any state information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Permissions_SecurityPermission_Union_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_Permissions_SecurityPermission_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a permission that is the union of the current permission and the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.IPermission Union (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission to combine with the current permission. It must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new permission that represents the union of the current permission and the specified permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Permissions.SecurityPermission.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Permissions.SecurityPermission.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission.Flags\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission.FromXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission.Intersect\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission.IsSubsetOf\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission.IsUnrestricted\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission.ToXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.SecurityPermission.Union\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"028e26e7-f689-6fc4-e8a1-10fb76deaaf9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes a set of security permissions applied to code. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Permissions/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Permissions.SecurityPermission\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Permissions.SecurityPermission.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Permissions.SecurityPermission.yml","open_to_public_contributors":true,"api_name":["System.Security.Permissions.SecurityPermission","System.Security.Permissions.SecurityPermission..ctor","System.Security.Permissions.SecurityPermission.Copy","System.Security.Permissions.SecurityPermission.Flags","System.Security.Permissions.SecurityPermission.FromXml","System.Security.Permissions.SecurityPermission.Intersect","System.Security.Permissions.SecurityPermission.IsSubsetOf","System.Security.Permissions.SecurityPermission.IsUnrestricted","System.Security.Permissions.SecurityPermission.ToXml","System.Security.Permissions.SecurityPermission.Union"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Permissions.SecurityPermission","System::Security::Permissions::SecurityPermission","System.Security.Permissions.SecurityPermission.#ctor","System::Security::Permissions::SecurityPermission::#ctor","System.Security.Permissions.SecurityPermission.Copy","System::Security::Permissions::SecurityPermission::Copy","System.Security.Permissions.SecurityPermission.Flags","System::Security::Permissions::SecurityPermission::Flags","System.Security.Permissions.SecurityPermission.FromXml","System::Security::Permissions::SecurityPermission::FromXml","System.Security.Permissions.SecurityPermission.Intersect","System::Security::Permissions::SecurityPermission::Intersect","System.Security.Permissions.SecurityPermission.IsSubsetOf","System::Security::Permissions::SecurityPermission::IsSubsetOf","System.Security.Permissions.SecurityPermission.IsUnrestricted","System::Security::Permissions::SecurityPermission::IsUnrestricted","System.Security.Permissions.SecurityPermission.ToXml","System::Security::Permissions::SecurityPermission::ToXml","System.Security.Permissions.SecurityPermission.Union","System::Security::Permissions::SecurityPermission::Union"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"028e26e7-f689-6fc4-e8a1-10fb76deaaf9","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Permissions/SecurityPermission.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SecurityPermission class | Microsoft Docs","_op_ogTitle":"SecurityPermission class","description":"Describes a set of security permissions applied to code. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.Permissions/toc.json","toc_rel":"_splitted/System.Security.Permissions/toc.json","source_url":"","ms.assetid":"System.Security.Permissions.SecurityPermission","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.permissions.securitypermission","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.permissions.securitypermission","fileRelativePath":"System.Security.Permissions.SecurityPermission.html"},"themesRelativePathToOutputRoot":"_themes/"}