{"content":"    \r\n    <h1 id=\"System_Threading_Tasks_Task\">\r\n      <span class=\"lang-csharp\">Task</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an asynchronous operation.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))]\npublic class Task : IAsyncResult, IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Task</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The Task class represents a single operation that does not return a value and that usually executes asynchronously. Task objects are one of the central components of the  <a href=\"../Topic/Task-based%20Asynchronous%20Pattern%20(TAP).md\" data-linktype=\"relative-path\">task-based asynchronous pattern</a> first introduced in the .NET Framework 4. Because the work performed by a Task object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property, as well as the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsCanceled_\" data-linktype=\"relative-path\">IsCanceled</a>, <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a>, and <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsFaulted_\" data-linktype=\"relative-path\">IsFaulted</a> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.  </p>\n<p> For operations that return values, you use the <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> class.  </p>\n<p> In this section:  </p>\n<p> <a href=\"#Creating\" data-linktype=\"self-bookmark\">Creating and executing a task</a><br> <a href=\"#Separating\" data-linktype=\"self-bookmark\">Separating task creation and execution</a><br> <a href=\"#WaitingForOne\" data-linktype=\"self-bookmark\">Waiting for one or more tasks to complete</a><br> <a href=\"#Culture\" data-linktype=\"self-bookmark\">Tasks and culture</a><br> <a href=\"#Debugger\" data-linktype=\"self-bookmark\">For debugger developers</a>  </p>\n<p><a name=\"Creating\"></a>   </p>\n<h2 id=\"creating-and-executing-a-task\">Creating and executing a task</h2>\n<p> Task instances may be created in a variety of ways. The most common approach, which is available starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE -->, is to call the static <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_\" data-linktype=\"relative-path\">Run</a> method. The <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_\" data-linktype=\"relative-path\">Run</a> method provides a simple way to start a task using default values and without requiring additional parameters. The following example uses the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_System_Action_\" data-linktype=\"relative-path\">Run(Action)</a> method to start a task that loops and then displays the number of loop iterations:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#6\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Task t = Task.Run( () =&gt; {\n                                  // Just loop.\n                                  int ctr = 0;\n                                  for (ctr = 0; ctr &lt;= 1000000; ctr++)\n                                  {}\n                                  Console.WriteLine(&quot;Finished {0} loop iterations&quot;,\n                                                    ctr);\n                               } );\n      t.Wait();\n   }\n}\n// The example displays the following output:\n//        Finished 1000001 loop iterations\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#6\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t As Task = Task.Run(Sub()\n                                  &#39; Just loop.\n                                  Dim ctr As Integer = 0\n                                  For ctr = 0 to 1000000\n                                  Next\n                                  Console.WriteLine(&quot;Finished {0} loop iterations&quot;,\n                                                    ctr)\n                               End Sub)\n      t.Wait()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Finished 1000001 loop iterations\n</code></pre><p> An alternative, and the most common method to start a task in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, is the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method. The <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Factory_\" data-linktype=\"relative-path\">Factory</a> property returns a <a class=\"xref\" href=\"system.threading.tasks.taskfactory\" data-linktype=\"relative-path\">TaskFactory</a> object. Overloads of the <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method let you specify parameters to pass to the task creation options and a task scheduler. The following example uses the <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method to start a task. It is functionally equivalent to the code in the previous example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#7\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Task t = Task.Factory.StartNew( () =&gt; {\n                                  // Just loop.\n                                  int ctr = 0;\n                                  for (ctr = 0; ctr &lt;= 1000000; ctr++)\n                                  {}\n                                  Console.WriteLine(&quot;Finished {0} loop iterations&quot;,\n                                                    ctr);\n                               } );\n      t.Wait();\n   }\n}\n// The example displays the following output:\n//        Finished 1000001 loop iterations\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#7\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t As Task = Task.Factory.StartNew(Sub()\n                                  &#39; Just loop.\n                                  Dim ctr As Integer = 0\n                                  For ctr = 0 to 1000000\n                                  Next\n                                  Console.WriteLine(&quot;Finished {0} loop iterations&quot;,\n                                                    ctr)\n                               End Sub)\n      t.Wait()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Finished 1000001 loop iterations\n</code></pre><p> For more complete examples, see <a href=\"../Topic/Task-based%20Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Task-based Asynchronous Programming</a>.  </p>\n<p><a name=\"Separating\"></a>   </p>\n<h2 id=\"separating-task-creation-and-execution\">Separating task creation and execution</h2>\n<p> The Task class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_\" data-linktype=\"relative-path\">Run</a> or <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Start_\" data-linktype=\"relative-path\">Start</a> method to schedule the task for execution at a later time.  </p>\n<p><a name=\"WaitingForOne\"></a>   </p>\n<h2 id=\"waiting-for-one-or-more-tasks-to-complete\">Waiting for one or more tasks to complete</h2>\n<p> Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated. In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution. In others,   your application&#39;s logic may require that the calling thread continue execution only when one or more tasks has completed execution. You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a <code>Wait</code> method to wait for one or more tasks to complete.  </p>\n<p> To wait for a single task to complete, you can call its <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method. A call to the  <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method blocks the calling thread until the single class instance has completed execution.  </p>\n<p> The following example calls the parameterless <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait\" data-linktype=\"relative-path\">Wait()</a> method to wait unconditionally until a task completes. The task simulates work by calling the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> method to sleep for two seconds.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#8\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      &#39; Wait on a single task with no timeout specified.\n      Dim taskA = Task.Run( Sub() Thread.Sleep(2000))\n      Console.WriteLine(&quot;taskA Status: {0}&quot;, taskA.Status)\n      Try\n        taskA.Wait()\n        Console.WriteLine(&quot;taskA Status: {0}&quot;, taskA.Status)\n      Catch e As AggregateException\n         Console.WriteLine(&quot;Exception in taskA.&quot;)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     taskA Status: WaitingToRun\n&#39;     taskA Status: RanToCompletion\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#8\">using System;   \nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static Random rand = new Random();\n\n    static void Main()\n    {\n        // Wait on a single task with no timeout specified.\n        Task taskA = Task.Run( () =&gt; Thread.Sleep(2000));\n        Console.WriteLine(&quot;taskA Status: {0}&quot;, taskA.Status);\n        try {\n          taskA.Wait();\n          Console.WriteLine(&quot;taskA Status: {0}&quot;, taskA.Status);\n       } \n       catch (AggregateException) {\n          Console.WriteLine(&quot;Exception in taskA.&quot;);\n       }   \n    }    \n}\n// The example displays output like the following:\n//     taskA Status: WaitingToRun\n//     taskA Status: RanToCompletion\n</code></pre><p> You can also conditionally wait for a task to complete. The  <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_System_Int32_\" data-linktype=\"relative-path\">Wait(Int32)</a> and <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_System_TimeSpan_\" data-linktype=\"relative-path\">Wait(TimeSpan)</a> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first. Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#9\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Wait on a single task with a timeout specified.\n      Task taskA = Task.Run( () =&gt; Thread.Sleep(2000));\n      try {\n        taskA.Wait(1000);       // Wait for 1 second.\n        bool completed = taskA.IsCompleted;\n        Console.WriteLine(&quot;Task A completed: {0}, Status: {1}&quot;,\n                         completed, taskA.Status);\n        if (! completed)\n           Console.WriteLine(&quot;Timed out before task A completed.&quot;);                 \n       }\n       catch (AggregateException) {\n          Console.WriteLine(&quot;Exception in taskA.&quot;);\n       }   \n   }\n}\n// The example displays output like the following:\n//     Task A completed: False, Status: Running\n//     Timed out before task A completed.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#9\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      &#39; Wait on a single task with a timeout specified.\n      Dim taskA As Task = Task.Run( Sub() Thread.Sleep(2000))\n      Try\n         taskA.Wait(1000)        &#39; Wait for 1 second.\n         Dim completed As Boolean = taskA.IsCompleted\n         Console.WriteLine(&quot;Task.Completed: {0}, Status: {1}&quot;,\n                           completed, taskA.Status)\n         If Not completed Then \n            Console.WriteLine(&quot;Timed out before task A completed.&quot;)\n         End If                     \n      Catch e As AggregateException\n         Console.WriteLine(&quot;Exception in taskA.&quot;)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Task A completed: False, Status: Running\n&#39;     Timed out before task A completed.\n</code></pre><p> You can also supply a cancellation token by calling the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Wait(CancellationToken)</a> and  <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Wait(Int32,CancellationToken)</a> methods. If the  token&#39;s <a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_IsCancellationRequested_\" data-linktype=\"relative-path\">IsCancellationRequested</a> property is <code>true</code>, the wait is cancelled; if it becomes true while the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method terminates.  </p>\n<p> In some cases, you may want to wait for the first of a series of executing tasks to complete, but don&#39;t care which task it is.  For this purpose, you can call one of the overloads of the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a> method.  The following example creates three tasks, each of which sleeps for an interval determine by a random number generator. The [WaitAny(Task&lt;xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29&gt; method waits for the first task to complete. The example then displays information about the status of all three tasks.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#10\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new Task[3];\n      var rnd = new Random();\n      for (int ctr = 0; ctr &lt;= 2; ctr++)\n         tasks[ctr] = Task.Run( () =&gt; Thread.Sleep(rnd.Next(500, 3000)));\n\n      try {\n         int index = Task.WaitAny(tasks);\n         Console.WriteLine(&quot;Task #{0} completed first.\\n&quot;, tasks[index].Id);\n         Console.WriteLine(&quot;Status of all tasks:&quot;);\n         foreach (var t in tasks)\n            Console.WriteLine(&quot;   Task #{0}: {1}&quot;, t.Id, t.Status);\n      }\n      catch (AggregateException) {\n         Console.WriteLine(&quot;An exception occurred.&quot;);\n      }\n   }\n}\n// The example displays output like the following:\n//     Task #1 completed first.\n//     \n//     Status of all tasks:\n//        Task #3: Running\n//        Task #1: RanToCompletion\n//        Task #4: Running\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#10\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim tasks(2) As Task\n      Dim rnd As New Random()\n      For ctr As Integer = 0 To 2\n         tasks(ctr) = Task.Run( Sub()  Thread.Sleep(rnd.Next(500, 3000)))\n      Next\n      \n      Try \n         Dim index As Integer= Task.WaitAny(tasks)\n         Console.WriteLine(&quot;Task #{0} completed first.&quot;, tasks(index).Id)\n         Console.WriteLine()\n         Console.WriteLine(&quot;Status of all tasks:&quot;)\n         For Each t in tasks\n            Console.WriteLine(&quot;   Task #{0}: {1}&quot;, t.Id, t.Status)\n         Next   \n      Catch e As AggregateException\n         Console.WriteLine(&quot;An exception occurred.&quot;)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     Task #1 completed first.\n&#39;     \n&#39;     Status of all tasks:\n&#39;        Task #3: Running\n&#39;        Task #1: RanToCompletion\n&#39;        Task #4: Running\n</code></pre><p> You can also wait for all of a series of tasks to complete by calling the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a> method. The following example creates ten tasks, waits for all ten to complete, and then displays their status.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#11\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      &#39; Wait for all tasks to complete.\n      Dim tasks(9) As Task\n      For i As Integer = 0 To 9\n          tasks(i) = Task.Run( Sub() Thread.Sleep(2000) )\n      Next\n      Try \n         Task.WaitAll(tasks)\n      Catch ae As AggregateException\n         Console.WriteLine(&quot;One or more exceptions occurred: &quot;)\n         For Each ex In ae.Flatten().InnerExceptions\n            Console.WriteLine(&quot;   {0}&quot;, ex.Message)\n         Next\n      End Try   \n\n      Console.WriteLine(&quot;Status of completed tasks:&quot;)\n      For Each t in tasks\n         Console.WriteLine(&quot;   Task #{0}: {1}&quot;, t.Id, t.Status)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Status of completed tasks:\n&#39;        Task #2: RanToCompletion\n&#39;        Task #1: RanToCompletion\n&#39;        Task #3: RanToCompletion\n&#39;        Task #4: RanToCompletion\n&#39;        Task #6: RanToCompletion\n&#39;        Task #5: RanToCompletion\n&#39;        Task #7: RanToCompletion\n&#39;        Task #8: RanToCompletion\n&#39;        Task #9: RanToCompletion\n&#39;        Task #10: RanToCompletion\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#11\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Wait for all tasks to complete.\n      Task[] tasks = new Task[10];\n      for (int i = 0; i &lt; 10; i++)\n      {\n          tasks[i] = Task.Run(() =&gt; Thread.Sleep(2000));\n      }\n      try {\n         Task.WaitAll(tasks);\n      }\n      catch (AggregateException ae) {\n         Console.WriteLine(&quot;One or more exceptions occurred: &quot;);\n         foreach (var ex in ae.Flatten().InnerExceptions)\n            Console.WriteLine(&quot;   {0}&quot;, ex.Message);\n      }   \n\n      Console.WriteLine(&quot;Status of completed tasks:&quot;);\n      foreach (var t in tasks)\n         Console.WriteLine(&quot;   Task #{0}: {1}&quot;, t.Id, t.Status);\n   }\n}\n// The example displays the following output:\n//     Status of completed tasks:\n//        Task #2: RanToCompletion\n//        Task #1: RanToCompletion\n//        Task #3: RanToCompletion\n//        Task #4: RanToCompletion\n//        Task #6: RanToCompletion\n//        Task #5: RanToCompletion\n//        Task #7: RanToCompletion\n//        Task #8: RanToCompletion\n//        Task #9: RanToCompletion\n//        Task #10: RanToCompletion\n</code></pre><p> Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the <code>Wait</code> method, as the following example shows. It launches 12 tasks, three of which complete normally and three of which throw an exception. Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing. Exceptions are thrown in the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a> method call and are handled by a <code>try</code>/<code>catch</code> block.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#12\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a cancellation token and cancel it.\n      var source1 = new CancellationTokenSource();\n      var token1 = source1.Token;\n      source1.Cancel();\n      // Create a cancellation token for later cancellation.\n      var source2 = new CancellationTokenSource();\n      var token2 = source2.Token;\n       \n      // Create a series of tasks that will complete, be cancelled, \n      // timeout, or throw an exception.\n      Task[] tasks = new Task[12];\n      for (int i = 0; i &lt; 12; i++)\n      {\n          switch (i % 4) \n          {\n             // Task should run to completion.\n             case 0:\n                tasks[i] = Task.Run(() =&gt; Thread.Sleep(2000));\n                break;\n             // Task should be set to canceled state.\n             case 1:   \n                tasks[i] = Task.Run( () =&gt; Thread.Sleep(2000),\n                         token1);\n                break;         \n             case 2:\n                // Task should throw an exception.\n                tasks[i] = Task.Run( () =&gt; { throw new NotSupportedException(); } );\n                break;\n             case 3:\n                // Task should examine cancellation token.\n                tasks[i] = Task.Run( () =&gt; { Thread.Sleep(2000); \n                                             if (token2.IsCancellationRequested)\n                                                token2.ThrowIfCancellationRequested();\n                                             Thread.Sleep(500); }, token2);   \n                break;\n          }\n      }\n      Thread.Sleep(250);\n      source2.Cancel();\n       \n      try {\n         Task.WaitAll(tasks);\n      }\n      catch (AggregateException ae) {\n          Console.WriteLine(&quot;One or more exceptions occurred:&quot;);\n          foreach (var ex in ae.InnerExceptions)\n             Console.WriteLine(&quot;   {0}: {1}&quot;, ex.GetType().Name, ex.Message);\n       }   \n\n      Console.WriteLine(&quot;\\nStatus of tasks:&quot;);\n      foreach (var t in tasks) {\n         Console.WriteLine(&quot;   Task #{0}: {1}&quot;, t.Id, t.Status);\n         if (t.Exception != null) {\n            foreach (var ex in t.Exception.InnerExceptions)\n               Console.WriteLine(&quot;      {0}: {1}&quot;, ex.GetType().Name,\n                                 ex.Message);\n         }\n      }\n   }\n}\n// The example displays output like the following:\n//   One or more exceptions occurred:\n//      TaskCanceledException: A task was canceled.\n//      NotSupportedException: Specified method is not supported.\n//      TaskCanceledException: A task was canceled.\n//      TaskCanceledException: A task was canceled.\n//      NotSupportedException: Specified method is not supported.\n//      TaskCanceledException: A task was canceled.\n//      TaskCanceledException: A task was canceled.\n//      NotSupportedException: Specified method is not supported.\n//      TaskCanceledException: A task was canceled.\n//   \n//   Status of tasks:\n//      Task #13: RanToCompletion\n//      Task #1: Canceled\n//      Task #3: Faulted\n//         NotSupportedException: Specified method is not supported.\n//      Task #8: Canceled\n//      Task #14: RanToCompletion\n//      Task #4: Canceled\n//      Task #6: Faulted\n//         NotSupportedException: Specified method is not supported.\n//      Task #7: Canceled\n//      Task #15: RanToCompletion\n//      Task #9: Canceled\n//      Task #11: Faulted\n//         NotSupportedException: Specified method is not supported.\n//      Task #12: Canceled\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#12\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      &#39; Create a cancellation token and cancel it.\n      Dim source1 As New CancellationTokenSource()\n      Dim token1 As CancellationToken = source1.Token\n      source1.Cancel()\n      &#39; Create a cancellation token for later cancellation.\n      Dim source2 As New CancellationTokenSource()\n      Dim token2 As CancellationToken = source2.Token\n       \n      &#39; Create a series of tasks that will complete, be cancelled, \n      &#39; timeout, or throw an exception.\n      Dim tasks(11) As Task\n      For i As Integer = 0 To 11\n          Select Case i Mod 4 \n             &#39; Task should run to completion.\n             Case 0\n                tasks(i) = Task.Run( Sub() Thread.Sleep(2000))\n             &#39; Task should be set to canceled state.\n             Case 1   \n                tasks(i) = Task.Run( Sub() Thread.Sleep(2000), token1)\n             Case 2\n                &#39; Task should throw an exception.\n                tasks(i) = Task.Run( Sub() \n                                        Throw New NotSupportedException() \n                                     End Sub)\n             Case 3\n                &#39; Task should examine cancellation token.\n                tasks(i) = Task.Run( Sub() \n                                        Thread.Sleep(2000) \n                                        If token2.IsCancellationRequested\n                                           token2.ThrowIfCancellationRequested()\n                                        End If\n                                        Thread.Sleep(500) \n                                     End Sub, token2)   \n          End Select\n      Next\n      Thread.Sleep(250)\n      source2.Cancel()\n       \n      Try \n         Task.WaitAll(tasks)\n      Catch ae As AggregateException\n         Console.WriteLine(&quot;One or more exceptions occurred:&quot;)\n         For Each ex in ae.InnerExceptions\n             Console.WriteLine(&quot;   {0}: {1}&quot;, ex.GetType().Name, ex.Message)\n         Next\n      End Try   \n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Status of tasks:&quot;)\n      For Each t in tasks\n         Console.WriteLine(&quot;   Task #{0}: {1}&quot;, t.Id, t.Status)\n         If t.Exception IsNot Nothing Then\n            For Each ex in t.Exception.InnerExceptions\n               Console.WriteLine(&quot;      {0}: {1}&quot;, ex.GetType().Name,\n                                 ex.Message)\n            Next\n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;   One or more exceptions occurred:\n&#39;      TaskCanceledException: A task was canceled.\n&#39;      NotSupportedException: Specified method is not supported.\n&#39;      TaskCanceledException: A task was canceled.\n&#39;      TaskCanceledException: A task was canceled.\n&#39;      NotSupportedException: Specified method is not supported.\n&#39;      TaskCanceledException: A task was canceled.\n&#39;      TaskCanceledException: A task was canceled.\n&#39;      NotSupportedException: Specified method is not supported.\n&#39;      TaskCanceledException: A task was canceled.\n&#39;   \n&#39;   Status of tasks:\n&#39;      Task #13: RanToCompletion\n&#39;      Task #1: Canceled\n&#39;      Task #3: Faulted\n&#39;         NotSupportedException: Specified method is not supported.\n&#39;      Task #8: Canceled\n&#39;      Task #14: RanToCompletion\n&#39;      Task #4: Canceled\n&#39;      Task #6: Faulted\n&#39;         NotSupportedException: Specified method is not supported.\n&#39;      Task #7: Canceled\n&#39;      Task #15: RanToCompletion\n&#39;      Task #9: Canceled\n&#39;      Task #11: Faulted\n&#39;         NotSupportedException: Specified method is not supported.\n&#39;      Task #12: Canceled\n</code></pre><p> For more information on exception handling in task-based asynchronous operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.  </p>\n<p><a name=\"Culture\"></a>   </p>\n<h2 id=\"tasks-and-culture\">Tasks and culture</h2>\n<p> Starting with desktop apps that target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v46-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE -->, the culture of the thread that creates and invokes a task becomes part of the thread&#39;s context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v46-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE -->, the culture of the task is the culture of the thread on which the task executes. For more information, see the &quot;Culture and task-based asynchronous operations&quot; section in the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> topic.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Store apps follow the Windows Runtime in setting and getting the default culture.  </p>\n</div>\n<p><a name=\"Debugger\"></a>   </p>\n<h2 id=\"for-debugger-developers\">For debugger developers</h2>\n<p> For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release). The <code>m_taskId</code> field serves as the backing store for the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Id_\" data-linktype=\"relative-path\">Id</a> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property&#39;s getter method (the <code>s_taskIdCounter</code> counter is used to retrieve the next available ID for a task). Similarly, the <code>m_stateFlags</code> field stores information about the current lifecycle stage of the task, information also accessible through the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property. The <code>m_action</code> field stores a reference to the task&#39;s delegate, and the <code>m_stateObject</code> field stores the async state passed to the task by the developer. Finally, for debuggers that parse stack frames, the <code>InternalWait</code> method serves a potential marker for when a task is entering a wait operation.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task__ctor_System_Action_\" data-linktype=\"self-bookmark\">Task(Action)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task__ctor_System_Action_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Task(Action,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action and <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task__ctor_System_Action_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"self-bookmark\">Task(Action,TaskCreationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action and creation options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task__ctor_System_Action_System_Object__System_Object_\" data-linktype=\"self-bookmark\">Task(Action&lt;Object&gt;,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action and state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task__ctor_System_Action_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"self-bookmark\">Task(Action,CancellationToken,TaskCreationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action and creation options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task__ctor_System_Action_System_Object__System_Object_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Task(Action&lt;Object&gt;,Object,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action, state, and options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task__ctor_System_Action_System_Object__System_Object_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"self-bookmark\">Task(Action&lt;Object&gt;,Object,TaskCreationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action, state, and options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task__ctor_System_Action_System_Object__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"self-bookmark\">Task(Action&lt;Object&gt;,Object,CancellationToken,TaskCreationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action, state, and options.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_AsyncState\" data-linktype=\"self-bookmark\">AsyncState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the state object supplied when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> was created, or null if none was supplied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_CompletedTask\" data-linktype=\"self-bookmark\">CompletedTask</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a task that has already completed successfully.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_CreationOptions\" data-linktype=\"self-bookmark\">CreationOptions</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to create this task.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_CurrentId\" data-linktype=\"self-bookmark\">CurrentId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the ID of the currently executing <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Exception\" data-linktype=\"self-bookmark\">Exception</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> that caused the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to end prematurely. If the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completed successfully or has not yet thrown any exceptions, this will return <code>null</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Factory\" data-linktype=\"self-bookmark\">Factory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to factory methods for creating and configuring <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> and <span class=\"xref\">stem.Threading.Tasks.Task`1</span> instances.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an ID for this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_IsCanceled\" data-linktype=\"self-bookmark\">IsCanceled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance has completed execution due to being canceled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_IsCompleted\" data-linktype=\"self-bookmark\">IsCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_IsFaulted\" data-linktype=\"self-bookmark\">IsFaulted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completed due to an unhandled exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Status\" data-linktype=\"self-bookmark\">Status</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> of this task.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ConfigureAwait_System_Boolean_\" data-linktype=\"self-bookmark\">ConfigureAwait(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Configures an awaiter used to await this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task,Object&gt;,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that receives caller-supplied state information and executes when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&gt;,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that receives a cancellation token and executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&gt;,TaskContinuationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target task completes according to the specified <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&gt;,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation uses a specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task,Object&gt;,Object,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task,Object&gt;,Object,TaskContinuationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that receives caller-supplied state information and executes when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation executes based on a set of specified conditions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task,Object&gt;,Object,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation uses a specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target task competes according to the specified <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>. The continuation receives a cancellation token and uses a specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task,Object&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes and returns a value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value. The continuation receives a cancellation token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,TaskContinuationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes according to the specified continuation options and returns a value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value. The continuation uses a specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,TaskContinuationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes based on the specified task continuation options when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation receives caller-supplied state information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation receives caller-supplied state information and uses a specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes based on the specified task continuation options when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Delay_System_Int32_\" data-linktype=\"self-bookmark\">Delay(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that completes after a time delay.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Delay_System_TimeSpan_\" data-linktype=\"self-bookmark\">Delay(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that completes after a specified time interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Delay_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Delay(Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a cancellable task that completes after a time delay.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Delay_System_TimeSpan_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Delay(TimeSpan,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a cancellable task that completes after a specified time interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Disposes the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>, releasing all of its unmanaged resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_FromCanceled_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">FromCanceled(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that&#39;s completed due to cancellation with a specified cancellation token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_FromCanceled__1_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">FromCanceled&lt;TResult&gt;(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Threading.Tasks.Task`1</span> that&#39;s completed due to cancellation with a specified cancellation token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_FromException_System_Exception_\" data-linktype=\"self-bookmark\">FromException(Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that has completed with a specified exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_FromException__1_System_Exception_\" data-linktype=\"self-bookmark\">FromException&lt;TResult&gt;(Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Threading.Tasks.Task`1</span> that&#39;s completed with a specified exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_FromResult__1___0_\" data-linktype=\"self-bookmark\">FromResult&lt;TResult&gt;(TResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <span class=\"xref\">stem.Threading.Tasks.Task`1</span> that&#39;s completed successfully with the specified result.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_GetAwaiter\" data-linktype=\"self-bookmark\">GetAwaiter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an awaiter used to await this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Run_System_Action_\" data-linktype=\"self-bookmark\">Run(Action)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Queues the specified work to run on the thread pool and returns a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object that represents that work.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Run_System_Func_System_Threading_Tasks_Task__\" data-linktype=\"self-bookmark\">Run(Func&lt;Task&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <code>function</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Run_System_Action_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Run(Action,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Queues the specified work to run on the thread pool and returns a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object that represents that work. A cancellation token allows the work to be cancelled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Run_System_Func_System_Threading_Tasks_Task__System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Run(Func&lt;Task&gt;,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Queues the specified work to run on the thread pool and returns a proxy for the task returned by <code>function</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Run__1_System_Func_System_Threading_Tasks_Task___0___\" data-linktype=\"self-bookmark\">Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Queues the specified work to run on the thread pool and returns a proxy for the <code>Task(TResult)</code> returned by <code>function</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Run__1_System_Func___0__\" data-linktype=\"self-bookmark\">Run&lt;TResult&gt;(Func&lt;TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Queues the specified work to run on the thread pool and returns a <span class=\"xref\">stem.Threading.Tasks.Task`1</span> object that represents that work.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Run__1_System_Func_System_Threading_Tasks_Task___0___System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Queues the specified work to run on the thread pool and returns a proxy for the <code>Task(TResult)</code> returned by <code>function</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Run__1_System_Func___0__System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Run&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Queues the specified work to run on the thread pool and returns a <code>Task(TResult)</code> object that represents that work. A cancellation token allows the work to be cancelled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_RunSynchronously\" data-linktype=\"self-bookmark\">RunSynchronously()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Runs the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> synchronously on the current <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_RunSynchronously_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">RunSynchronously(TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Runs the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> synchronously on the <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> provided.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Start\" data-linktype=\"self-bookmark\">Start()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>, scheduling it for execution to the current <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Start_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">Start(TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>, scheduling it for execution to the specified <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Wait\" data-linktype=\"self-bookmark\">Wait()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Wait_System_Int32_\" data-linktype=\"self-bookmark\">Wait(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution within a specified number of milliseconds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Wait_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Wait(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution. The wait terminates if a cancellation token is canceled before the task completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Wait_System_TimeSpan_\" data-linktype=\"self-bookmark\">Wait(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution within a specified time interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Wait_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Wait(Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___\" data-linktype=\"self-bookmark\">WaitAll(Task[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for all of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Int32_\" data-linktype=\"self-bookmark\">WaitAll(Task[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for all of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified number of milliseconds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WaitAll(Task[],CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for all of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution unless the wait is cancelled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_TimeSpan_\" data-linktype=\"self-bookmark\">WaitAll(Task[],TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for all of the provided cancellable <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified time interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WaitAll(Task[],Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for all of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___\" data-linktype=\"self-bookmark\">WaitAny(Task[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Int32_\" data-linktype=\"self-bookmark\">WaitAny(Task[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified number of milliseconds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WaitAny(Task[],CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution unless the wait is cancelled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_TimeSpan_\" data-linktype=\"self-bookmark\">WaitAny(Task[],TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified time interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Int32_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WaitAny(Task[],Int32,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WhenAll_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task__\" data-linktype=\"self-bookmark\">WhenAll(IEnumerable&lt;Task&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that will complete when all of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in an enumerable collection have completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WhenAll_System_Threading_Tasks_Task___\" data-linktype=\"self-bookmark\">WhenAll(Task[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that will complete when all of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in an array have completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WhenAll__1_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task___0___\" data-linktype=\"self-bookmark\">WhenAll&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that will complete when all of the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> objects in an enumerable collection have completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WhenAll__1_System_Threading_Tasks_Task___0____\" data-linktype=\"self-bookmark\">WhenAll&lt;TResult&gt;(Task&lt;TResult&gt;[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that will complete when all of the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> objects in an array have completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WhenAny_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task__\" data-linktype=\"self-bookmark\">WhenAny(IEnumerable&lt;Task&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WhenAny_System_Threading_Tasks_Task___\" data-linktype=\"self-bookmark\">WhenAny(Task[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WhenAny__1_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task___0___\" data-linktype=\"self-bookmark\">WhenAny&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_WhenAny__1_System_Threading_Tasks_Task___0____\" data-linktype=\"self-bookmark\">WhenAny&lt;TResult&gt;(Task&lt;TResult&gt;[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_Yield\" data-linktype=\"self-bookmark\">Yield()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an awaitable task that asynchronously yields back to the current context when awaited.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_System_IAsyncResult_AsyncWaitHandle\" data-linktype=\"self-bookmark\">IAsyncResult.AsyncWaitHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> that can be used to wait for the task to complete.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_System_IAsyncResult_CompletedSynchronously\" data-linktype=\"self-bookmark\">IAsyncResult.CompletedSynchronously</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an indication of whether the operation completed synchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task__ctor_System_Action_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task(Action)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Action action);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_System_Action_\" data-linktype=\"relative-path\">System.Threading.Tasks.Task.Run(Action)</a> or <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Task constructor to create tasks that retrieve the filenames in specified directories. All tasks write the file names to a single <a class=\"xref\" href=\"system.collections.concurrent.concurrentbag-1\" data-linktype=\"relative-path\">ConcurrentBag&lt;T&gt;</a> object. The example then calls the [WaitAll(Task&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt; method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <a class=\"xref\" href=\"system.collections.concurrent.concurrentbag-1\" data-linktype=\"relative-path\">ConcurrentBag&lt;T&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Ctor#1\">using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var list = new ConcurrentBag&lt;string&gt;();\n      string[] dirNames = { &quot;.&quot;, &quot;..&quot; };\n      List&lt;Task&gt; tasks = new List&lt;Task&gt;();\n      foreach (var dirName in dirNames) {\n         Task t = new Task( () =&gt; { foreach(var path in Directory.GetFiles(dirName))\n                                    list.Add(path); }  );\n         tasks.Add(t);\n         t.Start();\n      }\n      Task.WaitAll(tasks.ToArray());\n      foreach (Task t in tasks)\n         Console.WriteLine(&quot;Task {0} Status: {1}&quot;, t.Id, t.Status);\n         \n      Console.WriteLine(&quot;Number of files read: {0}&quot;, list.Count);\n   }\n}\n// The example displays output like the following:\n//       Task 1 Status: RanToCompletion\n//       Task 2 Status: RanToCompletion\n//       Number of files read: 23\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Ctor#1\">Imports System.Collections.Concurrent\nImports System.Collections.Generic\nImports System.IO\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim list As New ConcurrentBag(Of String)()\n      Dim dirNames() As String = { &quot;.&quot;, &quot;..&quot; }\n      Dim tasks As New List(Of Task)()\n      For Each dirName In dirNames \n         Dim t As New Task( Sub()\n                               For Each path In Directory.GetFiles(dirName)\n                                  list.Add(path)\n                               Next\n                            End Sub  )\n         tasks.Add(t)\n         t.Start()\n      Next\n      Task.WaitAll(tasks.ToArray())\n      For Each t In tasks\n         Console.WriteLine(&quot;Task {0} Status: {1}&quot;, t.Id, t.Status)\n      Next   \n      Console.WriteLine(&quot;Number of files read: {0}&quot;, list.Count)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Task 1 Status: RanToCompletion\n&#39;       Task 2 Status: RanToCompletion\n&#39;       Number of files read: 23\n</code></pre><p> The following example is identical, except that it used the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_System_Action_\" data-linktype=\"relative-path\">Run(Action)</a> method to instantiate and run the task in a single operation. The method returns the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object that represents the task.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#1\">using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var list = new ConcurrentBag&lt;string&gt;();\n      string[] dirNames = { &quot;.&quot;, &quot;..&quot; };\n      List&lt;Task&gt; tasks = new List&lt;Task&gt;();\n      foreach (var dirName in dirNames) {\n         Task t = Task.Run( () =&gt; { foreach(var path in Directory.GetFiles(dirName)) \n                                       list.Add(path); }  );\n         tasks.Add(t);\n      }\n      Task.WaitAll(tasks.ToArray());\n      foreach (Task t in tasks)\n         Console.WriteLine(&quot;Task {0} Status: {1}&quot;, t.Id, t.Status);\n         \n      Console.WriteLine(&quot;Number of files read: {0}&quot;, list.Count);\n   }\n}\n// The example displays output like the following:\n//       Task 1 Status: RanToCompletion\n//       Task 2 Status: RanToCompletion\n//       Number of files read: 23\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#1\">Imports System.Collections.Concurrent\nImports System.Collections.Generic\nImports System.IO\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim list As New ConcurrentBag(Of String)()\n      Dim dirNames() As String = { &quot;.&quot;, &quot;..&quot; }\n      Dim tasks As New List(Of Task)()\n      For Each dirName In dirNames \n         Dim t As Task = Task.Run( Sub()\n                                      For Each path In Directory.GetFiles(dirName) \n                                         list.Add(path)\n                                      Next\n                                   End Sub  )\n         tasks.Add(t)\n      Next\n      Task.WaitAll(tasks.ToArray())\n      For Each t In tasks\n         Console.WriteLine(&quot;Task {0} Status: {1}&quot;, t.Id, t.Status)\n      Next   \n      Console.WriteLine(&quot;Number of files read: {0}&quot;, list.Count)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Task 1 Status: RanToCompletion\n&#39;       Task 2 Status: RanToCompletion\n&#39;       Number of files read: 23\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task__ctor_System_Action_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task(Action,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action and <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Action action, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that the new  task will observe.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_System_Action_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Threading.Tasks.Task.Run(Action,CancellationToken)</a> and <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action,CancellationToken)</a> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.  </p>\n<p> For more information, see <a href=\"../Topic/Task-based%20Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Task Parallelism (Task Parallel Library)</a> and <a href=\"../Topic/Cancellation%20in%20Managed%20Threads.md\" data-linktype=\"relative-path\">Cancellation in Managed Threads</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Task constructor to create a task that iterates the files in the C:\\Windows\\System32 directory. The lambda expression calls the &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method to add information about each  file to a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object. Each detached nested task invoked by the &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; loop checks the state of the cancellation token and, if cancellation is requested, calls the <a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_ThrowIfCancellationRequested_\" data-linktype=\"relative-path\">ThrowIfCancellationRequested</a> method. The <a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_ThrowIfCancellationRequested_\" data-linktype=\"relative-path\">ThrowIfCancellationRequested</a> method throws an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> exception that is handled in a <code>catch</code> block when the calling thread calls the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method.  The <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Start_\" data-linktype=\"relative-path\">Start</a> method is then called to start the task.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.ctor#4\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tokenSource = new CancellationTokenSource();\n      var token = tokenSource.Token;\n      var files = new List&lt;Tuple&lt;string, string, long, DateTime&gt;&gt;();\n      \n      var t = new Task(() =&gt; { string dir = &quot;C:\\\\Windows\\\\System32\\\\&quot;;\n                               object obj = new Object();\n                               if (Directory.Exists(dir)) {\n                                  Parallel.ForEach(Directory.GetFiles(dir),\n                                  f =&gt; {\n                                          if (token.IsCancellationRequested)\n                                             token.ThrowIfCancellationRequested();\n                                          var fi = new FileInfo(f);\n                                          lock(obj) {\n                                             files.Add(Tuple.Create(fi.Name, fi.DirectoryName, fi.Length, fi.LastWriteTimeUtc));          \n                                          }\n                                     });\n                                }\n                              } , token);\n      t.Start();\n      tokenSource.Cancel();\n      try {\n         t.Wait(); \n         Console.WriteLine(&quot;Retrieved information for {0} files.&quot;, files.Count);\n      }\n      catch (AggregateException e) {\n         Console.WriteLine(&quot;Exception messages:&quot;);\n         foreach (var ie in e.InnerExceptions)\n            Console.WriteLine(&quot;   {0}: {1}&quot;, ie.GetType().Name, ie.Message);\n\n         Console.WriteLine(&quot;<br>Task status: {0}&quot;, t.Status);       \n      }\n      finally {\n         tokenSource.Dispose();\n      }\n   }\n}\n// The example displays the following output:\n//       Exception messages:\n//          TaskCanceledException: A task was canceled.\n//       \n//       Task status: Canceled\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.ctor#4\">Imports System.Collections.Generic\nImports System.IO\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim tokenSource As New CancellationTokenSource()\n      Dim token As CancellationToken = tokenSource.Token\n      Dim files As New List(Of Tuple(Of String, String, Long, Date))()\n      Dim t As New Task(Sub()\n                           Dim dir As String = &quot;C:\\Windows\\System32\\&quot;\n                           Dim obj As New Object()\n                           If Directory.Exists(dir)Then\n                              Parallel.ForEach(Directory.GetFiles(dir), \n                                 Sub(f)\n                                    If token.IsCancellationRequested Then\n                                       token.ThrowIfCancellationRequested()\n                                    End If  \n                                    Dim fi As New FileInfo(f)\n                                    SyncLock(obj)\n                                       files.Add(Tuple.Create(fi.Name, fi.DirectoryName, fi.Length, fi.LastWriteTimeUtc))          \n                                    End SyncLock\n                                 End Sub)\n                           End If\n                        End Sub, token)\n      t.Start()\n      tokenSource.Cancel()\n      Try\n         t.Wait() \n         Console.WriteLine(&quot;Retrieved information for {0} files.&quot;, files.Count)\n      Catch e As AggregateException\n         Console.WriteLine(&quot;Exception messages:&quot;)\n         For Each ie As Exception In e.InnerExceptions\n            Console.WriteLine(&quot;   {0}:{1}&quot;, ie.GetType().Name, ie.Message)\n         Next\n         Console.WriteLine()\n         Console.WriteLine(&quot;Task status: {0}&quot;, t.Status)       \n      Finally\n         tokenSource.Dispose()\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Exception messages:\n&#39;          TaskCanceledException: A task was canceled.\n&#39;       \n&#39;       Task status: Canceled\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task__ctor_System_Action_System_Threading_Tasks_TaskCreationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task(Action,TaskCreationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action and creation options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to customize the task&#39;s behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>creationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action,TaskCreationOptions)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task__ctor_System_Action_System_Object__System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task(Action&lt;Object&gt;,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action and state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Action&lt;object&gt; action, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the action.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_System_Object__System_Object_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action&lt;Object&gt;,Object)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of 6-letter words. Each word is then passed as an argument to the Task constructor, whose <a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a> delegate scrambles the characters in the word, then displays the original word and its scrambled version.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.ctor#3\">Imports System.Collections.Generic\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim tasks As New List(Of Task)()\n      Dim rnd As New Random()\n      Dim lockObj As New Object()\n      Dim words6() As String = { &quot;reason&quot;, &quot;editor&quot;, &quot;rioter&quot;, &quot;rental&quot;,\n                                 &quot;senior&quot;, &quot;regain&quot;, &quot;ordain&quot;, &quot;rained&quot; }\n\n      For Each word6 in words6\n         Dim t As New Task( Sub(word)\n                               Dim chars() As Char = word.ToString().ToCharArray()\n                               Dim order(chars.Length - 1) As Double\n                               SyncLock lockObj\n                                  For ctr As Integer = 0 To order.Length - 1\n                                     order(ctr) = rnd.NextDouble()\n                                  Next\n                               End SyncLock\n                               Array.Sort(order, chars)\n                               Console.WriteLine(&quot;{0} --&gt; {1}&quot;, word,\n                                                 New String(chars))\n                            End Sub, word6)\n         t.Start()\n         tasks.Add(t)\n      Next\n      Task.WaitAll(tasks.ToArray())\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       regain --&gt; irnaeg\n&#39;       ordain --&gt; rioadn\n&#39;       reason --&gt; soearn\n&#39;       rained --&gt; rinade\n&#39;       rioter --&gt; itrore\n&#39;       senior --&gt; norise\n&#39;       rental --&gt; atnerl\n&#39;       editor --&gt; oteird\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.ctor#3\">using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new List&lt;Task&gt;();\n      Random rnd = new Random();\n      Object lockObj = new Object();\n      String[] words6 = { &quot;reason&quot;, &quot;editor&quot;, &quot;rioter&quot;, &quot;rental&quot;,\n                          &quot;senior&quot;, &quot;regain&quot;, &quot;ordain&quot;, &quot;rained&quot; };\n\n      foreach (var word6 in words6) {\n         Task t = new Task( (word) =&gt; { Char[] chars = word.ToString().ToCharArray();\n                                        double[] order = new double[chars.Length];\n                                        lock (lockObj) {\n                                           for (int ctr = 0; ctr &lt; order.Length; ctr++)\n                                              order[ctr] = rnd.NextDouble();\n                                           }\n                                        Array.Sort(order, chars);\n                                        Console.WriteLine(&quot;{0} --&gt; {1}&quot;, word,\n                                                          new String(chars));\n                                      }, word6);\n         t.Start();\n         tasks.Add(t);\n      }\n      Task.WaitAll(tasks.ToArray());\n   }\n}\n// The example displays output like the following:\n//    regain --&gt; irnaeg\n//    ordain --&gt; rioadn\n//    reason --&gt; soearn\n//    rained --&gt; rinade\n//    rioter --&gt; itrore\n//    senior --&gt; norise\n//    rental --&gt; atnerl\n//    editor --&gt; oteird\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task__ctor_System_Action_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task(Action,CancellationToken,TaskCreationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action and creation options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> that the new task will observe.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to customize the task&#39;s behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created <code>cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>creationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action,CancellationToken,TaskCreationOptions,TaskScheduler)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.  </p>\n<p> For more information, see <a href=\"../Topic/Task-based%20Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Task Parallelism (Task Parallel Library)</a> and <a href=\"../Topic/Task%20Cancellation.md\" data-linktype=\"relative-path\">Task Cancellation</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task__ctor_System_Action_System_Object__System_Object_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task(Action&lt;Object&gt;,Object,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action, state, and options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> that that the new task will observe.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created <code>cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_System_Object__System_Object_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action&lt;Object&gt;,Object,CancellationToken)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task__ctor_System_Action_System_Object__System_Object_System_Threading_Tasks_TaskCreationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task(Action&lt;Object&gt;,Object,TaskCreationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action, state, and options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to customize the task&#39;s behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>creationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_System_Object__System_Object_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action&lt;Object&gt;,Object,TaskCreationOptions)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task__ctor_System_Action_System_Object__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task(Action&lt;Object&gt;,Object,CancellationToken,TaskCreationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> with the specified action, state, and options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> that that the new task will observe..</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to customize the task&#39;s behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created <code>cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>creationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_System_Object__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action&lt;Object&gt;,Object,CancellationToken,TaskCreationOptions,TaskScheduler)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_AsyncState\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_AsyncState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsyncState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the state object supplied when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> was created, or null if none was supplied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object AsyncState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents the state data that was passed in to the task when it was created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Cast the object back to the original type to retrieve its data.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_CompletedTask\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_CompletedTask_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompletedTask</div>        \r\n          </div>\r\n    \r\n            <p>Gets a task that has already completed successfully.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task CompletedTask { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>The successfully completed task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns a task whose <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property is set to <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a>. To create task that returns a value and runs to completion, call the &lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt; method.  </p>\n<p> Repeated attempts to retrieve this property value may not always return the same instance.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_CreationOptions\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_CreationOptions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreationOptions</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to create this task.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to create this task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_CurrentId\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_CurrentId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentId</div>        \r\n          </div>\r\n    \r\n            <p>Returns the ID of the currently executing <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; CurrentId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>An integer that was assigned by the system to the currently-executing task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CurrentId is a <code>static</code> (<code>Shared</code> in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing. It differs from the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Id_\" data-linktype=\"relative-path\">Id</a> property, which returns the identifier of a particular <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance. If you attempt to retrieve the CurrentId value from outside the code that a task is executing, the property returns <code>null</code>.  </p>\n<p> Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Exception\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Exception_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exception</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> that caused the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to end prematurely. If the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completed successfully or has not yet thrown any exceptions, this will return <code>null</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AggregateException Exception { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> that caused the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to end prematurely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> in calls to <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> or in accesses to the Exception property. Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread. For more information and an example, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling (Task Parallel Library)</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Factory\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Factory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Factory</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to factory methods for creating and configuring <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> and <span class=\"xref\">stem.Threading.Tasks.Task`1</span> instances.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.TaskFactory Factory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskfactory\" data-linktype=\"relative-path\">TaskFactory</a></div>\r\n                  </div>\r\n                  <p>A factory object that can create a variety of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> and <span class=\"xref\">stem.Threading.Tasks.Task`1</span> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns a default instance of the <a class=\"xref\" href=\"system.threading.tasks.taskfactory\" data-linktype=\"relative-path\">TaskFactory</a> class that is identical to the one created by calling the parameterless <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory__ctor\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.TaskFactory()</a> constructor. It has the following property values:  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_CancellationToken_\" data-linktype=\"relative-path\">CancellationToken</a></td>\n<td><a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_None_\" data-linktype=\"relative-path\">None</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_ContinuationOptions_\" data-linktype=\"relative-path\">ContinuationOptions</a></td>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskContinuationOptions</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_CreationOptions_\" data-linktype=\"relative-path\">CreationOptions</a></td>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskCreationOptions</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_Scheduler_\" data-linktype=\"relative-path\">Scheduler</a></td>\n<td><code>null</code>, or <a class=\"xref\" href=\"system.threading.tasks.taskscheduler#System_Threading_Tasks_TaskScheduler_Current_\" data-linktype=\"relative-path\">Current</a></td>\n</tr>\n</tbody>\n</table>\n<p> The most common use of this property is to create and start a new task in a single call to the <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE -->, the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_\" data-linktype=\"relative-path\">Run</a> method provides the easiest way to create a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object with default configuration values.  </p>\n</div>\n<p> The following example uses the static Factory property to make two calls to the <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method. The first populates an array with the names of files in the user&#39;s MyDocuments directory, while the second populates an array with the names of subdirectories of the user&#39;s MyDocuments directory. It then calls the [TaskFactory.ContinueWhenAll(Task[],â€‚Action&lt;Task&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName&gt; method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Factory#1\">using System;\nusing System.IO;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Task[] tasks = new Task[2];\n      String[] files = null;\n      String[] dirs = null;\n      String docsDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\n\n      tasks[0] = Task.Factory.StartNew( () =&gt; files = Directory.GetFiles(docsDirectory));\n      tasks[1] = Task.Factory.StartNew( () =&gt; dirs = Directory.GetDirectories(docsDirectory));\n\n      Task.Factory.ContinueWhenAll(tasks, completedTasks =&gt; {\n                                             Console.WriteLine(&quot;{0} contains: &quot;, docsDirectory);\n                                             Console.WriteLine(&quot;   {0} subdirectories&quot;, dirs.Length);\n                                             Console.WriteLine(&quot;   {0} files&quot;, files.Length);\n                                          } );\n   }\n}\n// The example displays output like the following:\n//       C:\\Users\\&lt;username&gt;\\Documents contains:\n//          24 subdirectories\n//          16 files\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Factory#1\">Imports System.IO\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim tasks(1) As Task\n      Dim files() As String = Nothing\n      Dim dirs() As String = Nothing\n      Dim docsDirectory As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)\n      \n      tasks(0) = Task.Factory.StartNew( Sub()\n                                           files = Directory.GetFiles(docsDirectory)\n                                        End Sub )\n      tasks(1) = Task.Factory.StartNew( Sub()\n                                           dirs = Directory.GetDirectories(docsDirectory)\n                                        End Sub )\n      Task.Factory.ContinueWhenAll(tasks, Sub(completedTasks)\n                                             Console.WriteLine(&quot;{0} contains: &quot;, docsDirectory)\n                                             Console.WriteLine(&quot;   {0} subdirectories&quot;, dirs.Length)\n                                             Console.WriteLine(&quot;   {0} files&quot;, files.Length)\n                                          End Sub)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       C:\\Users\\&lt;username&gt;\\Documents contains:\n&#39;          24 subdirectories\n&#39;          16 files\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Id\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets an ID for this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Id { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The identifier that is assigned by the system to this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created. Note that although collisions are very rare, task identifiers are not guaranteed to be unique.  </p>\n<p> To get the task ID of the currently executing task from within code that that task is executing, use the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CurrentId_\" data-linktype=\"relative-path\">CurrentId</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_IsCanceled\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_IsCanceled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCanceled</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance has completed execution due to being canceled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsCanceled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the task has completed due to being canceled; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will complete in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state under any of the following conditions:  </p>\n<ul>\n<li><p>Its <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_CancellationToken_\" data-linktype=\"relative-path\">CancellationToken</a> was marked for cancellation before the task started executing,  </p>\n</li>\n<li><p>The task acknowledged the cancellation request on its already signaled <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_CancellationToken_\" data-linktype=\"relative-path\">CancellationToken</a> by throwing an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> that bears the same <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a>.  </p>\n</li>\n<li><p>The task acknowledged the cancellation request on its already signaled <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_CancellationToken_\" data-linktype=\"relative-path\">CancellationToken</a> by calling the <a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_ThrowIfCancellationRequested_\" data-linktype=\"relative-path\">ThrowIfCancellationRequested</a> method on the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a>.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Retrieving the value of the IsCanceled property does not block the calling thread until the task has completed.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_IsCompleted\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_IsCompleted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsCompleted { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the task has completed; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>IsCompleted will return <code>true</code> when the task is in one of the three final states: <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>, <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>, or <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Retrieving the value of the IsCompleted property does not block the calling thread until the task has completed.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_IsFaulted\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_IsFaulted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFaulted</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completed due to an unhandled exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFaulted { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the task has thrown an unhandled exception; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If IsFaulted is <code>true</code>, the task&#39;s <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> is equal to <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>, and its <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Exception_\" data-linktype=\"relative-path\">Exception</a> property will be non-null.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Retrieving the value of the IsFaulted property does not block the calling thread until the task has completed.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Status\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Status_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Status</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> of this task.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.TaskStatus Status { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> of this task instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of the Status property does not block the calling thread until the task has completed.  </p>\n<p> For more information and an example, see <a href=\"../Topic/Chaining%20Tasks%20by%20Using%20Continuation%20Tasks.md\" data-linktype=\"relative-path\">Chaining Tasks by Using Continuation Tasks</a> and <a href=\"../Topic/How%20to:%20Cancel%20a%20Task%20and%20Its%20Children.md\" data-linktype=\"relative-path\">How to: Cancel a Task and Its Children</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million. When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled. The example then examines the Status property of each task to indicate whether it completed successfully or was cancelled. For those that completed, it displays the value returned by the task.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#7\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new List&lt;Task&lt;int&gt;&gt;();\n      var source = new CancellationTokenSource();\n      var token = source.Token;\n      int completedIterations = 0;\n\n      for (int n = 0; n &lt;= 19; n++)\n         tasks.Add(Task.Run( () =&gt; { int iterations = 0;\n                                     for (int ctr = 1; ctr &lt;= 2000000; ctr++) {\n                                         token.ThrowIfCancellationRequested();\n                                         iterations++;\n                                     }\n                                     Interlocked.Increment(ref completedIterations);\n                                     if (completedIterations &gt;= 10)\n                                        source.Cancel();\n                                     return iterations; }, token));\n\n      Console.WriteLine(&quot;Waiting for the first 10 tasks to complete...<br>&quot;);\n      try  {\n         Task.WaitAll(tasks.ToArray());\n      }\n      catch (AggregateException) {\n         Console.WriteLine(&quot;Status of tasks:<br>&quot;);\n         Console.WriteLine(&quot;{0,10} {1,20} {2,14:N0}&quot;, &quot;Task Id&quot;,\n                           &quot;Status&quot;, &quot;Iterations&quot;);\n         foreach (var t in tasks)\n            Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;,\n                              t.Id, t.Status,\n                              t.Status != TaskStatus.Canceled ? t.Result.ToString(&quot;N0&quot;) : &quot;n/a&quot;);\n      }\n   }\n}\n// The example displays output like the following:\n//    Waiting for the first 10 tasks to complete...\n//    Status of tasks:\n//\n//       Task Id               Status     Iterations\n//             1      RanToCompletion      2,000,000\n//             2      RanToCompletion      2,000,000\n//             3      RanToCompletion      2,000,000\n//             4      RanToCompletion      2,000,000\n//             5      RanToCompletion      2,000,000\n//             6      RanToCompletion      2,000,000\n//             7      RanToCompletion      2,000,000\n//             8      RanToCompletion      2,000,000\n//             9      RanToCompletion      2,000,000\n//            10             Canceled            n/a\n//            11             Canceled            n/a\n//            12             Canceled            n/a\n//            13             Canceled            n/a\n//            14             Canceled            n/a\n//            15             Canceled            n/a\n//            16      RanToCompletion      2,000,000\n//            17             Canceled            n/a\n//            18             Canceled            n/a\n//            19             Canceled            n/a\n//            20             Canceled            n/a\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#7\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n\n   Public Sub Main()\n      Dim tasks As New List(Of Task(Of Integer))()\n      Dim source As New CancellationTokenSource\n      Dim token As CancellationToken = source.Token\n      Dim completedIterations As Integer = 0\n      \n      For n As Integer = 0 To 19\n         tasks.Add(Task.Run( Function()\n                                Dim iterations As Integer= 0\n                                For ctr As Long = 1 To 2000000\n                                   token.ThrowIfCancellationRequested()\n                                   iterations += 1\n                                Next\n                                Interlocked.Increment(completedIterations)\n                                If completedIterations &gt;= 10 Then source.Cancel()\n                                Return iterations\n                             End Function, token))\n      Next\n\n      Console.WriteLine(&quot;Waiting for the first 10 tasks to complete... &quot;)\n      Try\n         Task.WaitAll(tasks.ToArray())\n      Catch e As AggregateException\n         Console.WriteLine(&quot;Status of tasks:&quot;)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;, &quot;Task Id&quot;,\n                           &quot;Status&quot;, &quot;Iterations&quot;)\n         For Each t In tasks\n            Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;,\n                              t.Id, t.Status,\n                              If(t.Status &lt;&gt; TaskStatus.Canceled,\n                                 t.Result.ToString(&quot;N0&quot;), &quot;n/a&quot;))\n         Next\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Waiting for the first 10 tasks to complete...\n&#39;    Status of tasks:\n&#39;\n&#39;       Task Id               Status     Iterations\n&#39;             1      RanToCompletion      2,000,000\n&#39;             2      RanToCompletion      2,000,000\n&#39;             3      RanToCompletion      2,000,000\n&#39;             4      RanToCompletion      2,000,000\n&#39;             5      RanToCompletion      2,000,000\n&#39;             6      RanToCompletion      2,000,000\n&#39;             7      RanToCompletion      2,000,000\n&#39;             8      RanToCompletion      2,000,000\n&#39;             9      RanToCompletion      2,000,000\n&#39;            10             Canceled            n/a\n&#39;            11             Canceled            n/a\n&#39;            12             Canceled            n/a\n&#39;            13             Canceled            n/a\n&#39;            14             Canceled            n/a\n&#39;            15             Canceled            n/a\n&#39;            16      RanToCompletion      2,000,000\n&#39;            17             Canceled            n/a\n&#39;            18             Canceled            n/a\n&#39;            19             Canceled            n/a\n&#39;            20             Canceled            n/a\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ConfigureAwait_System_Boolean_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ConfigureAwait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConfigureAwait(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Configures an awaiter used to await this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continueOnCapturedContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to attempt to marshal the continuation back to the original context captured; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.configuredtaskawaitable\" data-linktype=\"relative-path\">ConfiguredTaskAwaitable</a></div>\r\n                  </div>\r\n                  <p>An object used to await this task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a task that populates an array with 100 random date and time values. It uses the ContinueWith method to select the earliest and the latest date values once the array is fully populated.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.ContinueWith#1\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim firstTask = Task.Factory.StartNew( Function()\n                               Dim rnd As New Random()\n                               Dim dates(99) As Date\n                               Dim buffer(7) As Byte\n                               Dim ctr As Integer = dates.GetLowerBound(0)\n                               Do While ctr &lt;= dates.GetUpperBound(0)\n                                  rnd.NextBytes(buffer)\n                                  Dim ticks As Long = BitConverter.ToInt64(buffer, 0)\n                                  If ticks &lt;= DateTime.MinValue.Ticks Or ticks &gt;= DateTime.MaxValue.Ticks Then Continue Do\n\n                                  dates(ctr) = New Date(ticks)\n                                  ctr += 1\n                               Loop\n                               Return dates\n                            End Function )\n                         \n      Dim continuationTask As Task = firstTask.ContinueWith( Sub(antecedent)\n                             Dim dates() As Date = antecedent.Result\n                             Dim earliest As Date = dates(0)\n                             Dim latest As Date = earliest\n                             \n                             For ctr As Integer = dates.GetLowerBound(0) + 1 To dates.GetUpperBound(0)\n                                If dates(ctr) &lt; earliest Then earliest = dates(ctr)\n                                If dates(ctr) &gt; latest Then latest = dates(ctr)\n                             Next\n                             Console.WriteLine(&quot;Earliest date: {0}&quot;, earliest)\n                             Console.WriteLine(&quot;Latest date: {0}&quot;, latest)\n                          End Sub)                      \n      &#39; Since a console application otherwise terminates, wait for the continuation to complete.\n      continuationTask.Wait()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Earliest date: 2/11/0110 12:03:41 PM\n&#39;       Latest date: 7/29/9989 2:14:49 PM\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.ContinueWith#1\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var firstTask = Task.Factory.StartNew( () =&gt; {\n                               Random rnd = new Random();\n                               DateTime[] dates = new DateTime[100];\n                               Byte[] buffer = new Byte[8];\n                               int ctr = dates.GetLowerBound(0);\n                               while (ctr &lt;= dates.GetUpperBound(0)) {\n                                  rnd.NextBytes(buffer);\n                                  long ticks = BitConverter.ToInt64(buffer, 0);\n                                  if (ticks &lt;= DateTime.MinValue.Ticks | ticks &gt;= DateTime.MaxValue.Ticks)\n                                     continue;\n\n                                  dates[ctr] = new DateTime(ticks);\n                                  ctr++;\n                               }\n                               return dates;\n                            } ); \n                         \n      Task continuationTask = firstTask.ContinueWith( (antecedent) =&gt; {\n                             DateTime[] dates = antecedent.Result;\n                             DateTime earliest = dates[0];\n                             DateTime latest = earliest;\n                             \n                             for (int ctr = dates.GetLowerBound(0) + 1; ctr &lt;= dates.GetUpperBound(0); ctr++) {\n                                if (dates[ctr] &lt; earliest) earliest = dates[ctr];\n                                if (dates[ctr] &gt; latest) latest = dates[ctr];\n                             }\n                             Console.WriteLine(&quot;Earliest date: {0}&quot;, earliest);\n                             Console.WriteLine(&quot;Latest date: {0}&quot;, latest);\n                          } );                      \n      // Since a console application otherwise terminates, wait for the continuation to complete.\n     continuationTask.Wait();\n   }\n}\n// The example displays output like the following:\n//       Earliest date: 2/11/0110 12:03:41 PM\n//       Latest date: 7/29/9989 2:14:49 PM\n</code></pre><p> Because a console application may terminate before the continuation task executes, the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait\" data-linktype=\"relative-path\">Wait()</a> method is called to ensure that the continuation finishes executing before the example ends.  </p>\n<p> For an additional example, see <a href=\"../Topic/Chaining%20Tasks%20by%20Using%20Continuation%20Tasks.md\" data-linktype=\"relative-path\">Chaining Tasks by Using Continuation Tasks</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task,Object&gt;,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that receives caller-supplied state information and executes when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&gt;,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that receives a cancellation token and executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created the token has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_Tasks_TaskContinuationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&gt;,TaskContinuationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target task completes according to the specified <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run according to the specified <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates using <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a> to specify that a continuation task should run synchronously when the antecedent task completes. (If the specified task has already completed by the time <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_\" data-linktype=\"relative-path\">ContinueWith</a> is called, the synchronous continuation will run on the thread calling <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_\" data-linktype=\"relative-path\">ContinueWith</a>.)  </p>\n<pre><code class=\"lang-c#\">\npublic class TaskCounter  \n{  \n   private volatile int _count;  \n\n   public void Track(Task t)  \n   {  \n      if (t == null) throw new ArgumentNullException(&quot;t&quot;);  \n      Interlocked.Increment(ref _count);  \n      t.ContinueWith(ct =&gt; Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  \n   }  \n\n   public int NumberOfActiveTasks { get { return _count; } }  \n}\n</code></pre><pre><code class=\"lang-vb\">\nPublic Class TaskCounter  \n   Private _count as Integer  \n\n   Public Sub Track(ByVal t as Task)  \n      If t is Nothing Then Throw New ArgumentNullException(&quot;t&quot;)  \n      Interlocked.Increment(_count)  \n      t.ContinueWith(Sub(ct)  \n                        Interlocked.Decrement(_count)  \n                     End Sub,  \n                     TaskContinuationOptions.ExecuteSynchronously)  \n   End Sub  \n\n   Public ReadOnly Property NumberOfActiveTasks As Integer  \n      Get  \n         Return _count  \n      End Get  \n   End Property  \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&gt;,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation uses a specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task,Object&gt;,Object,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_Tasks_TaskContinuationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task,Object&gt;,Object,TaskContinuationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that receives caller-supplied state information and executes when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation executes based on a set of specified conditions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task,Object&gt;,Object,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation uses a specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target task competes according to the specified <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>. The continuation receives a cancellation token and uses a specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run according to the specified <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created the token has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.  </p>\n<p> -or-  </p>\n<p> The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed. If the criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following is an example of using ContinueWith to run work both in the background and on the user interface threads.  </p>\n<pre><code class=\"lang-c#\">\nprivate void Button1_Click(object sender, EventArgs e)  \n{  \n   var backgroundScheduler = TaskScheduler.Default;  \n   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  \n   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  \n                         backgroundScheduler).  \n   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  \n                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  \n                             backgroundScheduler).  \n                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  \n}\n</code></pre><pre><code class=\"lang-vb\">\nPrivate Sub Button1_Click(ByVal sender As System.Object,   \n                          ByVal e As System.EventArgs) Handles Button1.Click  \n   Dim backgroundScheduler = TaskScheduler.Default  \n   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  \n\n   Task.Factory.StartNew(Sub()  \n                           DoBackgroundComputation()  \n                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  \n                            UpdateUI()  \n                         End Sub, uiScheduler).ContinueWith(Sub(t)  \n                            DoAnotherBackgroundComputation()  \n                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  \n                            UpdateUIAgain()  \n                         End Sub, uiScheduler)  \nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task,Object&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its  execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has  completed. If the criteria specified through the <code>continuationOptions</code> parameter  are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes and returns a value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the ContinueWith method:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#03\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule ContinuationDemo\n\n    &#39; Demonstrated features:\n    &#39;   Task.Factory\n    &#39;   Task.ContinueWith()\n    &#39;   Task.Wait()\n    &#39; Expected results:\n    &#39;   A sequence of three unrelated tasks is created and executed in this order - alpha, beta, gamma.\n    &#39;   A sequence of three related tasks is created - each task negates its argument and passes is to the next task: 5, -5, 5 is printed.\n    &#39;   A sequence of three unrelated tasks is created where tasks have different types.\n    &#39; Documentation:\n    &#39;   http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskfactory_members(VS.100).aspx\n    Sub Main()\n        Dim action As Action(Of String) = Sub(str) Console.WriteLine(&quot;Task={0}, str={1}, Thread={2}&quot;, Task.CurrentId, str, Thread.CurrentThread.ManagedThreadId)\n\n        &#39; Creating a sequence of action tasks (that return no result).\n        Console.WriteLine(&quot;Creating a sequence of action tasks (that return no result)&quot;)\n        &#39; Continuations ignore antecedent data\n        Task.Factory.StartNew(Sub() action(&quot;alpha&quot;)).ContinueWith(Sub(antecendent) action(&quot;beta&quot;)).ContinueWith(Sub(antecendent) action(&quot;gamma&quot;)).Wait()\n\n\n        Dim negate As Func(Of Integer, Integer) = Function(n)\n                                                      Console.WriteLine(&quot;Task={0}, n={1}, -n={2}, Thread={3}&quot;, Task.CurrentId, n, -n, Thread.CurrentThread.ManagedThreadId)\n                                                      Return -n\n                                                  End Function\n\n        &#39; Creating a sequence of function tasks where each continuation uses the result from its antecendent\n        Console.WriteLine(vbLf &amp; &quot;Creating a sequence of function tasks where each continuation uses the result from its antecendent&quot;)\n        Task(Of Integer).Factory.StartNew(Function() negate(5)).ContinueWith(Function(antecendent) negate(antecendent.Result)).ContinueWith(Function(antecendent) negate(antecendent.Result)).Wait()\n\n\n        &#39; Creating a sequence of tasks where you can mix and match the types\n        Console.WriteLine(vbLf &amp; &quot;Creating a sequence of tasks where you can mix and match the types&quot;)\n        Task(Of Integer).Factory.StartNew(Function() negate(6)).ContinueWith(Sub(antecendent) action(&quot;x&quot;)).ContinueWith(Function(antecendent) negate(7)).Wait()\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#03\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass ContinuationSimpleDemo\n{\n    // Demonstrated features:\n    // \t\tTask.Factory\n    //\t\tTask.ContinueWith()\n    //\t\tTask.Wait()\n    // Expected results:\n    // \t\tA sequence of three unrelated tasks is created and executed in this order - alpha, beta, gamma.\n    //\t\tA sequence of three related tasks is created - each task negates its argument and passes is to the next task: 5, -5, 5 is printed.\n    //\t\tA sequence of three unrelated tasks is created where tasks have different types.\n    // Documentation:\n    //\t\thttp://msdn.microsoft.com/en-us/library/system.threading.tasks.taskfactory_members(VS.100).aspx\n    static void Main()\n    {\n        Action&lt;string&gt; action =\n            (str) =&gt;\n                Console.WriteLine(&quot;Task={0}, str={1}, Thread={2}&quot;, Task.CurrentId, str, Thread.CurrentThread.ManagedThreadId);\n\n        // Creating a sequence of action tasks (that return no result).\n        Console.WriteLine(&quot;Creating a sequence of action tasks (that return no result)&quot;);\n        Task.Factory.StartNew(() =&gt; action(&quot;alpha&quot;))\n            .ContinueWith(antecendent =&gt; action(&quot;beta&quot;))        // Antecedent data is ignored\n            .ContinueWith(antecendent =&gt; action(&quot;gamma&quot;))\n            .Wait();\n\n\n        Func&lt;int, int&gt; negate =\n            (n) =&gt;\n            {\n                Console.WriteLine(&quot;Task={0}, n={1}, -n={2}, Thread={3}&quot;, Task.CurrentId, n, -n, Thread.CurrentThread.ManagedThreadId);\n                return -n;\n            };\n\n        // Creating a sequence of function tasks where each continuation uses the result from its antecendent\n        Console.WriteLine(&quot;<br>Creating a sequence of function tasks where each continuation uses the result from its antecendent&quot;);\n        Task&lt;int&gt;.Factory.StartNew(() =&gt; negate(5))\n            .ContinueWith(antecendent =&gt; negate(antecendent.Result))\t\t// Antecedent result feeds into continuation\n            .ContinueWith(antecendent =&gt; negate(antecendent.Result))\n            .Wait();\n\n\n        // Creating a sequence of tasks where you can mix and match the types\n        Console.WriteLine(&quot;<br>Creating a sequence of tasks where you can mix and match the types&quot;);\n        Task&lt;int&gt;.Factory.StartNew(() =&gt; negate(6))\n            .ContinueWith(antecendent =&gt; action(&quot;x&quot;))\n            .ContinueWith(antecendent =&gt; negate(7))\n            .Wait();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value. The continuation receives a cancellation token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created the token has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_Tasks_TaskContinuationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,TaskContinuationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes according to the specified continuation options and returns a value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run according to the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value. The continuation uses a specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.  </p>\n<p> -or-  </p>\n<p> The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_Tasks_TaskContinuationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,TaskContinuationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes based on the specified task continuation options when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation receives caller-supplied state information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. The continuation receives caller-supplied state information and uses a specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run according to the specified <code>continuationOptions.</code> When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created the token has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.  </p>\n<p> -or-  </p>\n<p> The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed. If the criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the ContinueWith method with continuation options:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#04\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass ContinuationOptionsDemo\n{\n    // Demonstrated features:\n    //      TaskContinuationOptions\n    //\t\tTask.ContinueWith()\n    // \t\tTask.Factory\n    //\t\tTask.Wait()\n    // Expected results:\n    // \t\tThis sample demonstrates branched continuation sequences - Task+Commit or Task+Rollback.\n    //      Notice that no if statements are used.\n    //\t\tThe first sequence is successful - tran1 and commitTran1 are executed. rollbackTran1 is canceled.\n    //\t\tThe second sequence is unsuccessful - tran2 and rollbackTran2 are executed. tran2 is faulted, and commitTran2 is canceled.\n    // Documentation:\n    //\t\thttp://msdn.microsoft.com/en-us/library/system.threading.tasks.taskcontinuationoptions(VS.100).aspx\n    static void Main()\n    {\n        Action success = () =&gt; Console.WriteLine(&quot;Task={0}, Thread={1}: Begin successful transaction&quot;,\n                                                Task.CurrentId, Thread.CurrentThread.ManagedThreadId);\n        Action failure = () =&gt;\n        {\n            Console.WriteLine(&quot;Task={0}, Thread={1}: Begin transaction and encounter an error&quot;,\n                                Task.CurrentId, Thread.CurrentThread.ManagedThreadId);\n            throw new InvalidOperationException(&quot;SIMULATED EXCEPTION&quot;);\n        };\n\n        Action&lt;Task&gt; commit = (antecendent) =&gt; Console.WriteLine(&quot;Task={0}, Thread={1}: Commit transaction&quot;,\n                                                                Task.CurrentId, Thread.CurrentThread.ManagedThreadId);\n        Action&lt;Task&gt; rollback = (antecendent) =&gt;\n        {\n            // &quot;Observe&quot; your antecedent&#39;s exception so as to avoid an exception\n            // being thrown on the finalizer thread\n            var unused = antecendent.Exception;\n\n            Console.WriteLine(&quot;Task={0}, Thread={1}: Rollback transaction&quot;,\n                  Task.CurrentId, Thread.CurrentThread.ManagedThreadId);\n        };\n\n        // Successful transaction - Begin + Commit\n        Console.WriteLine(&quot;Demonstrating a successful transaction&quot;);\n\n        // Initial task\n        // Treated as &quot;fire-and-forget&quot; -- any exceptions will be cleaned up in rollback continuation\n        Task tran1 = Task.Factory.StartNew(success);\n\n        // The following task gets scheduled only if tran1 completes successfully\n        var commitTran1 = tran1.ContinueWith(commit, TaskContinuationOptions.OnlyOnRanToCompletion);\n\n        // The following task gets scheduled only if tran1 DOES NOT complete successfully\n        var rollbackTran1 = tran1.ContinueWith(rollback, TaskContinuationOptions.NotOnRanToCompletion);\n\n        // For demo purposes, wait for the sample to complete\n        commitTran1.Wait();\n\n        // -----------------------------------------------------------------------------------\n\n\n        // Failed transaction - Begin + exception + Rollback\n        Console.WriteLine(&quot;<br>Demonstrating a failed transaction&quot;);\n\n        // Initial task\n        // Treated as &quot;fire-and-forget&quot; -- any exceptions will be cleaned up in rollback continuation\n        Task tran2 = Task.Factory.StartNew(failure);\n\n        // The following task gets scheduled only if tran2 completes successfully\n        var commitTran2 = tran2.ContinueWith(commit, TaskContinuationOptions.OnlyOnRanToCompletion);\n\n        // The following task gets scheduled only if tran2 DOES NOT complete successfully\n        var rollbackTran2 = tran2.ContinueWith(rollback, TaskContinuationOptions.NotOnRanToCompletion);\n\n        // For demo purposes, wait for the sample to complete\n        rollbackTran2.Wait();\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#04\">Imports System.Threading\nImports System.Threading.Tasks\nModule ContuationOptionsDemo\n    &#39; Demonstrated features:\n    &#39;   TaskContinuationOptions\n    &#39;   Task.ContinueWith()\n    &#39;   Task.Factory\n    &#39;   Task.Wait()\n    &#39; Expected results:\n    &#39;   This sample demonstrates branched continuation sequences - Task+Commit or Task+Rollback.\n    &#39;   Notice that no if statements are used.\n    &#39;   The first sequence is successful - tran1 and commitTran1 are executed. rollbackTran1 is canceled.\n    &#39;   The second sequence is unsuccessful - tran2 and rollbackTran2 are executed. tran2 is faulted, and commitTran2 is canceled.\n    &#39; Documentation:\n    &#39;   http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskcontinuationoptions(VS.100).aspx\n    Private Sub Main()\n        Dim success As Action = Sub()\n                                    Console.WriteLine(&quot;Task={0}, Thread={1}: Begin successful transaction&quot;, Task.CurrentId, Thread.CurrentThread.ManagedThreadId)\n                                End Sub\n\n        Dim failure As Action = Sub()\n                                    Console.WriteLine(&quot;Task={0}, Thread={1}: Begin transaction and encounter an error&quot;, Task.CurrentId, Thread.CurrentThread.ManagedThreadId)\n                                    Throw New InvalidOperationException(&quot;SIMULATED EXCEPTION&quot;)\n                                End Sub\n\n        Dim commit As Action(Of Task) = Sub(antecendent)\n                                            Console.WriteLine(&quot;Task={0}, Thread={1}: Commit transaction&quot;, Task.CurrentId, Thread.CurrentThread.ManagedThreadId)\n                                        End Sub\n\n        Dim rollback As Action(Of Task) = Sub(antecendent)\n                                              &#39; &quot;Observe&quot; your antecedent&#39;s exception so as to avoid an exception\n                                              &#39; being thrown on the finalizer thread\n                                              Dim unused = antecendent.Exception\n\n                                              Console.WriteLine(&quot;Task={0}, Thread={1}: Rollback transaction&quot;, Task.CurrentId, Thread.CurrentThread.ManagedThreadId)\n                                          End Sub\n\n        &#39; Successful transaction - Begin + Commit\n        Console.WriteLine(&quot;Demonstrating a successful transaction&quot;)\n\n        &#39; Initial task\n        &#39; Treated as &quot;fire-and-forget&quot; -- any exceptions will be cleaned up in rollback continuation\n        Dim tran1 As Task = Task.Factory.StartNew(success)\n\n        &#39; The following task gets scheduled only if tran1 completes successfully\n        Dim commitTran1 = tran1.ContinueWith(commit, TaskContinuationOptions.OnlyOnRanToCompletion)\n\n        &#39; The following task gets scheduled only if tran1 DOES NOT complete successfully\n        Dim rollbackTran1 = tran1.ContinueWith(rollback, TaskContinuationOptions.NotOnRanToCompletion)\n\n        &#39; For demo purposes, wait for the sample to complete\n        commitTran1.Wait()\n\n        &#39; -----------------------------------------------------------------------------------\n\n\n        &#39; Failed transaction - Begin + exception + Rollback \n        Console.WriteLine(vbLf &amp; &quot;Demonstrating a failed transaction&quot;)\n\n        &#39; Initial task\n        &#39; Treated as &quot;fire-and-forget&quot; -- any exceptions will be cleaned up in rollback continuation\n        Dim tran2 As Task = Task.Factory.StartNew(failure)\n\n        &#39; The following task gets scheduled only if tran2 completes successfully\n        Dim commitTran2 = tran2.ContinueWith(commit, TaskContinuationOptions.OnlyOnRanToCompletion)\n\n        &#39; The following task gets scheduled only if tran2 DOES NOT complete successfully\n        Dim rollbackTran2 = tran2.ContinueWith(rollback, TaskContinuationOptions.NotOnRanToCompletion)\n\n        &#39; For demo purposes, wait for the sample to complete\n        rollbackTran2.Wait()\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_ContinueWith_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes based on the specified task continuation options when the target <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its  execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has  completed. If the criteria specified through the <code>continuationOptions</code> parameter  are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Delay_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Delay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delay(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that completes after a time delay.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Delay (int millisecondsDelay);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsDelay</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the time delay.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>millisecondsDelay</code> argument is less than -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Delay method is typically used to delay the operation of all or part of a task for a specified time interval. Most commonly, the time delay is introduced:  </p>\n<ul>\n<li><p>At the beginning of the task, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Delay#5\">      Dim sw As Stopwatch = Stopwatch.StartNew()\n      Dim delay1 = Task.Delay(1000)\n      Dim delay2 = delay1.ContinueWith( Function(antecedent)\n                              sw.Stop()\n                              Return sw.ElapsedMilliseconds\n                            End Function)\n\n      Console.WriteLine(&quot;Elapsed milliseconds: {0}&quot;, delay2.Result)\n      &#39; The example displays output like the following:\n      &#39;        Elapsed milliseconds: 1013\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Delay#5\">      Stopwatch sw = Stopwatch.StartNew();\n      var delay = Task.Delay(1000).ContinueWith(_ =&gt;\n                                 { sw.Stop();\n                                   return sw.ElapsedMilliseconds; } );\n\n      Console.WriteLine(&quot;Elapsed milliseconds: {0}&quot;, delay.Result);\n      // The example displays output like the following:\n      //        Elapsed milliseconds: 1013\n</code></pre></li>\n<li><p>Sometime while the task is executing. In this case, the call to the Delay method executes as a child task within a task, as the following example shows. Note that since the task that calls the Delay method executes asynchronously, the parent task must wait for it to complete by using the <code>await</code> keyword.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Delay#7\">      Dim delay = Task.Run( Async Function()\n                               Dim sw As Stopwatch = Stopwatch.StartNew()\n                               Await Task.Delay(2500)\n                               sw.Stop()\n                               Return sw.ElapsedMilliseconds\n                            End Function )\n\n      Console.WriteLine(&quot;Elapsed milliseconds: {0}&quot;, delay.Result)\n      &#39; The example displays output like the following:\n      &#39;        Elapsed milliseconds: 2501\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Delay#7\">      var delay = Task.Run( async () =&gt; { Stopwatch sw = Stopwatch.StartNew();\n                                          await Task.Delay(2500);\n                                          sw.Stop();\n                                          return sw.ElapsedMilliseconds; });\n\n      Console.WriteLine(&quot;Elapsed milliseconds: {0}&quot;, delay.Result);\n      // The example displays output like the following:\n      //        Elapsed milliseconds: 2501\n</code></pre><p>After the specified time delay, the task is completed in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<p>This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the <code>millisecondsDelay</code> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a simple use of the Delay method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Delay#1\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var t = Task.Run(async delegate\n              {\n                 await Task.Delay(1000);\n                 return 42;\n              });\n      t.Wait();\n      Console.WriteLine(&quot;Task t Status: {0}, Result: {1}&quot;,\n                        t.Status, t.Result);\n   }\n}\n// The example displays the following output:\n//        Task t Status: RanToCompletion, Result: 42\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Delay#1\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t = Task.Run(Async Function()\n                                Await Task.Delay(1000)\n                                Return 42\n                       End Function)\n      t.Wait()\n      Console.WriteLine(&quot;Task t Status: {0}, Result: {1}&quot;,\n                        t.Status, t.Result)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Task t Status: RanToCompletion, Result: 42\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Delay_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Delay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delay(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that completes after a specified time interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Delay (TimeSpan delay);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delay</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time span to wait before completing the returned task, or <code>TimeSpan.FromMilliseconds(-1)</code> to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the time delay.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>delay</code> represents a negative time interval other than <code>TimeSpan.FromMillseconds(-1)</code>.  </p>\n<p> -or-  </p>\n<p> The <code>delay</code> argument&#39;s <span class=\"xref\">stem.TimeSpan.TotalMilliseconds*</span> property is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After the specified time delay, the task is completed in <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<p> For usage scenarios and additional examples, see the documentation for the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_Int32_\" data-linktype=\"relative-path\">Delay(Int32)</a> overload.  </p>\n<p> This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the <code>delay</code> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a simple use of the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_\" data-linktype=\"relative-path\">Delay</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Delay#2\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var t = Task.Run(async delegate\n              {\n                 await Task.Delay(TimeSpan.FromSeconds(1.5));\n                 return 42;\n              });\n      t.Wait();\n      Console.WriteLine(&quot;Task t Status: {0}, Result: {1}&quot;,\n                        t.Status, t.Result);\n   }\n}\n// The example displays the following output:\n//        Task t Status: RanToCompletion, Result: 42\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Delay#2\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t = Task.Run(Async Function()\n                                Await Task.Delay(TimeSpan.FromSeconds(1.5))\n                                Return 42\n                       End Function)\n      t.Wait()\n      Console.WriteLine(&quot;Task t Status: {0}, Result: {1}&quot;,\n                        t.Status, t.Result)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Task t Status: RanToCompletion, Result: 42\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Delay_System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Delay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delay(Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a cancellable task that completes after a time delay.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsDelay</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation token that will be checked prior to completing the returned task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the time delay.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>millisecondsDelay</code> argument is less than -1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a></div>\r\n                  </div>\r\n                  <p>The task has been canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <code>cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the cancellation token is signaled before the specified time delay, a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> exception results, and the task is completed in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  Otherwise, the task is completed in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state once the specified time delay has elapsed.  </p>\n<p> For usage scenarios and additional examples, see the documentation for the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_Int32_\" data-linktype=\"relative-path\">Delay(Int32)</a> overload.  </p>\n<p> This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the <code>millisecondsDelay</code> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example launches a task that includes a call to the Delay method with a one second delay. Before the delay interval elapses, the token is cancelled. The output from the example shows that, as a result, a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> is thrown, and the tasks&#39; <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property is set to <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Delay#3\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CancellationTokenSource source = new CancellationTokenSource();\n\n      var t = Task.Run(async delegate\n              {\n                 await Task.Delay(1000, source.Token);\n                 return 42;\n              });\n      source.Cancel();\n      try {\n         t.Wait();\n      }\n      catch (AggregateException ae) {\n         foreach (var e in ae.InnerExceptions)\n            Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message);\n      }\n      Console.Write(&quot;Task t Status: {0}&quot;, t.Status);\n      if (t.Status == TaskStatus.RanToCompletion)\n         Console.Write(&quot;, Result: {0}&quot;, t.Result);\n      source.Dispose();\n   }\n}\n// The example displays the following output:\n//       TaskCanceledException: A task was canceled.\n//       Task t Status: Canceled\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Delay#3\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim source As New CancellationTokenSource()\n      \n      Dim t = Task.Run(Async Function()\n                                Await Task.Delay(1000, source.Token)\n                                Return 42\n                       End Function)\n      source.Cancel()\n      Try\n         t.Wait()\n      Catch ae As AggregateException\n         For Each e In ae.InnerExceptions\n            Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message)\n         Next\n      End Try\n      Console.Write(&quot;Task t Status: {0}&quot;, t.Status)\n      If t.Status = TaskStatus.RanToCompletion Then\n         Console.Write(&quot;, Result: {0}&quot;, t.Result)\n      End If\n      source.Dispose()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       TaskCanceledException: A task was canceled.\n&#39;       Task t Status: Canceled\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Delay_System_TimeSpan_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Delay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delay(TimeSpan,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a cancellable task that completes after a specified time interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>delay</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time span to wait before completing the returned task, or <code>TimeSpan.FromMilliseconds(-1)</code> to wait indefinitely.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation token that will be checked prior to completing the returned task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the time delay.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>delay</code> represents a negative time interval other than <code>TimeSpan.FromMillseconds(-1)</code>.  </p>\n<p> -or-  </p>\n<p> The <code>delay</code> argument&#39;s <span class=\"xref\">stem.TimeSpan.TotalMilliseconds*</span> property is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a></div>\r\n                  </div>\r\n                  <p>The task has been canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <code>cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the cancellation token is signaled before the specified time delay, a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> exception results, and the task is completed in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  Otherwise, the task is completed in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state once the specified time delay has elapsed.  </p>\n<p> For usage scenarios and additional examples, see the documentation for the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_Int32_\" data-linktype=\"relative-path\">Delay(Int32)</a> overload.  </p>\n<p> This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the <code>delay</code> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example launches a task that includes a call to the Delay method with a one-and-a-half second delay. Before the delay interval elapses, the token is cancelled. The output from the example shows that, as a result, a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> is thrown, and the tasks&#39; <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property is set to <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Delay#4\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CancellationTokenSource source = new CancellationTokenSource();\n\n      var t = Task.Run(async delegate\n              {\n                 await Task.Delay(TimeSpan.FromSeconds(1.5), source.Token);\n                 return 42;\n              });\n      source.Cancel();\n      try {\n         t.Wait();\n      }\n      catch (AggregateException ae) {\n         foreach (var e in ae.InnerExceptions)\n            Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message);\n      }\n      Console.Write(&quot;Task t Status: {0}&quot;, t.Status);\n      if (t.Status == TaskStatus.RanToCompletion)\n         Console.Write(&quot;, Result: {0}&quot;, t.Result);\n      source.Dispose();\n   }\n}\n// The example displays output like the following:\n//       TaskCanceledException: A task was canceled.\n//       Task t Status: Canceled\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Delay#4\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim source As New CancellationTokenSource()\n      \n      Dim t = Task.Run(Async Function()\n                                Await Task.Delay(TimeSpan.FromSeconds(1.5),\n                                                 source.Token)\n                                Return 42\n                       End Function)\n      source.Cancel()\n      Try\n         t.Wait()\n      Catch ae As AggregateException\n         For Each e In ae.InnerExceptions\n            Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message)\n         Next\n      End Try\n      Console.Write(&quot;Task t Status: {0}&quot;, t.Status)\n      If t.Status = TaskStatus.RanToCompletion Then\n         Console.Write(&quot;, Result: {0}&quot;, t.Result)\n      End If\n      source.Dispose()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       TaskCanceledException: A task was canceled.\n&#39;       Task t Status: Canceled\n</code></pre><p> Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled. Although the 1.5 second delay from the call to the Delay method makes that assumption likely, it is nevertheless possible that the call to the Delay method could return before the token is cancelled. In that case, the example produces the following output:  </p>\n<pre><code>Task t Status: RanToCompletion, Result: 42\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Dispose\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The task is not in one of the final states: <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>, <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>, or <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> class implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface because internally it uses resources that also implement <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a>. However, particularly if your app targets the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE --> or later, there is no need to call Dispose unless performance or scalability testing indicates that, based on your usage patterns, your app&#39;s performance would be improved by disposing of tasks. For more information, see <a href=\"http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx\" data-linktype=\"external\">Do I need to dispose of Tasks?</a> in the Parallel Programming with .NET blog.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Disposes the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>, releasing all of its unmanaged resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value that indicates whether this method is being called due to a call to <span class=\"xref\">stem.Threading.Tasks.Task.Dispose*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The task is not in one of the final states: <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>, <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>, or <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> class implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface because internally it uses resources that also implement <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a>. However, particularly if your app targets the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE --> or later, there is no need to call <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Dispose_\" data-linktype=\"relative-path\">Dispose</a> unless performance or scalability testing indicates that, based on your usage patterns, your app&#39;s performance would be improved by disposing of tasks. For more information, see <a href=\"http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx\" data-linktype=\"external\">Do I need to dispose of Tasks?</a> in the Parallel Programming with .NET blog.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_FromCanceled_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_FromCanceled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromCanceled(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that&#39;s completed due to cancellation with a specified cancellation token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation token with which to complete the task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>The canceled task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Cancellation has not been requested for <code>cancellationToken</code>; its <span class=\"xref\">stem.Threading.CancellationToken.IsCancellationRequested*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_FromCanceled__1_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_FromCanceled_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromCanceled&lt;TResult&gt;(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Threading.Tasks.Task`1</span> that&#39;s completed due to cancellation with a specified cancellation token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult&gt; FromCanceled&lt;TResult&gt; (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation token with which to complete the task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>The canceled task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Cancellation has not been requested for <code>cancellationToken</code>; its <span class=\"xref\">stem.Threading.CancellationToken.IsCancellationRequested*</span> property is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_FromException_System_Exception_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_FromException_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromException(Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> that has completed with a specified exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task FromException (Exception exception);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>exception</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception with which to complete the task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>The faulted task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object whose <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property is <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> and whose <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Exception_\" data-linktype=\"relative-path\">Exception</a> property contains <code>exception</code>. The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. For an example, see the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_FromException__1_System_Exception_\" data-linktype=\"relative-path\">FromException&lt;TResult&gt;(Exception)</a> overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_FromException__1_System_Exception_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_FromException_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromException&lt;TResult&gt;(Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Threading.Tasks.Task`1</span> that&#39;s completed with a specified exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult&gt; FromException&lt;TResult&gt; (Exception exception);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>exception</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception with which to complete the task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>The faulted task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object whose <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property is <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> and whose <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Exception_\" data-linktype=\"relative-path\">Exception</a> property contains <code>exception</code>. The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. The example provides an illustration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument. Rather than executing a longer code path that instantiates a <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object and retrieves the value of its <a class=\"xref\" href=\"system.io.fileinfo#System_IO_FileInfo_Length_\" data-linktype=\"relative-path\">Length</a> property for each file in the directory, the example simply calls the FromException(TResult) method to create a faulted task if a particular subdirectory does not exist.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.FromResult#1\">Imports System.Collections.Generic\nImports System.IO\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim args() As String = Environment.GetCommandLineArgs()\n      If args.Length &gt; 1 Then\n         Dim tasks As New List(Of Task(Of Long))\n         For ctr = 1 To args.Length - 1\n            tasks.Add(GetFileLengthsAsync(args(ctr)))\n         Next\n         Try\n            Task.WaitAll(tasks.ToArray())\n         &#39; Ignore exceptions here.\n         Catch e As AggregateException\n         End Try\n\n         For ctr As Integer = 0 To tasks.Count - 1\n            If tasks(ctr).Status = TaskStatus.Faulted Then\n               Console.WriteLine(&quot;{0} does not exist&quot;, args(ctr + 1))\n            Else\n               Console.WriteLine(&quot;{0:N0} bytes in files in &#39;{1}&#39;&quot;,\n                                 tasks(ctr).Result, args(ctr + 1))\n            End If\n         Next\n      Else\n         Console.WriteLine(&quot;Syntax error: Include one or more file paths.&quot;)\n      End If\n   End Sub\n   \n   Private Function GetFileLengthsAsync(filePath As String) As Task(Of Long)\n      If Not Directory.Exists(filePath) Then\n         Return Task.FromException(Of Long)(\n                     New DirectoryNotFoundException(&quot;Invalid directory name.&quot;))\n      Else\n         Dim files As String() = Directory.GetFiles(filePath)\n         If files.Length = 0 Then\n            Return Task.FromResult(0L)\n         Else\n            Return Task.Run( Function()\n                                Dim total As Long = 0\n                                Dim lockObj As New Object\n                                Parallel.ForEach(files, Sub(fileName)\n                                                           Dim fs As New FileStream(fileName, FileMode.Open,\n                                                                     FileAccess.Read, FileShare.ReadWrite,\n                                                                     256, True)\n                                                           Dim length As Long = fs.Length\n                                                           Interlocked.Add(total, length)\n                                                           fs.Close()\n                                                        End Sub)\n                                Return total\n                             End Function )\n         End If\n      End If\n   End Function\nEnd Module\n&#39; When launched with the following command line arguments:\n&#39;      subdir . newsubdir\n&#39; the example displays output like the following:\n&#39;       0 bytes in files in &#39;subdir&#39;\n&#39;       2,059 bytes in files in &#39;.&#39;\n&#39;       newsubdir does not exist\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.FromResult#1\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] args = Environment.GetCommandLineArgs();\n      if (args.Length &gt; 1) {\n         List&lt;Task&lt;long&gt;&gt; tasks = new List&lt;Task&lt;long&gt;&gt;();\n         for (int ctr = 1; ctr &lt; args.Length; ctr++)\n            tasks.Add(GetFileLengthsAsync(args[ctr]));\n\n         try {\n            Task.WaitAll(tasks.ToArray());\n         }\n         // Ignore exceptions here.\n         catch (AggregateException) {}\n\n         for (int ctr = 0 ; ctr &lt; tasks.Count; ctr++) {\n            if (tasks[ctr].Status == TaskStatus.Faulted)\n               Console.WriteLine(&quot;{0} does not exist&quot;, args[ctr + 1]);\n            else\n               Console.WriteLine(&quot;{0:N0} bytes in files in &#39;{1}&#39;&quot;,\n                                 tasks[ctr].Result, args[ctr + 1]);\n         }\n      }\n      else {\n         Console.WriteLine(&quot;Syntax error: Include one or more file paths.&quot;);\n      }\n   }\n\n   private static Task&lt;long&gt; GetFileLengthsAsync(string filePath)\n   {\n      if (! Directory.Exists(filePath)) {\n         return Task.FromException&lt;long&gt;(\n                     new DirectoryNotFoundException(&quot;Invalid directory name.&quot;));\n      }\n      else {\n         string[] files = Directory.GetFiles(filePath);\n         if (files.Length == 0)\n            return Task.FromResult(0L);\n         else\n            return Task.Run( () =&gt; { long total = 0;\n                                     Parallel.ForEach(files, (fileName) =&gt; {\n                                                 var fs = new FileStream(fileName, FileMode.Open,\n                                                                         FileAccess.Read, FileShare.ReadWrite,\n                                                                         256, true);\n                                                 long length = fs.Length;\n                                                 Interlocked.Add(ref total, length);\n                                                 fs.Close(); } );\n                                     return total;\n                                   } );\n      }\n   }\n}\n// When launched with the following command line arguments:\n//      subdir . newsubdir\n// the example displays output like the following:\n//       0 bytes in files in &#39;subdir&#39;\n//       2,059 bytes in files in &#39;.&#39;\n//       newsubdir does not exist\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_FromResult__1___0_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_FromResult_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromResult&lt;TResult&gt;(TResult)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <span class=\"xref\">stem.Threading.Tasks.Task`1</span> that&#39;s completed successfully with the specified result.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult&gt; FromResult&lt;TResult&gt; (TResult result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The result to store into the completed task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>The successfully completed task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object whose <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Result_\" data-linktype=\"relative-path\">Result</a> property is <code>result</code> and whose <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property is <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a>. The method is commonly used when the return value of a task is immediately known without executing a longer code path. The example provides an illustration.  </p>\n<p> To create a Task object that does not return a value, retrieve the Task object from the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CompletedTask_\" data-linktype=\"relative-path\">CompletedTask</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument. Rather than executing a longer code path that instantiates a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object and retrieves the value of its <a class=\"xref\" href=\"system.io.filestream#System_IO_FileStream_Length_\" data-linktype=\"relative-path\">Length</a> property for each file in the directory, the example simply calls the FromResult(TResult) method to create a task whose <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Result_\" data-linktype=\"relative-path\">Result</a> property is zero (0) if a directory has no files.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.FromResult#1\">Imports System.Collections.Generic\nImports System.IO\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim args() As String = Environment.GetCommandLineArgs()\n      If args.Length &gt; 1 Then\n         Dim tasks As New List(Of Task(Of Long))\n         For ctr = 1 To args.Length - 1\n            tasks.Add(GetFileLengthsAsync(args(ctr)))\n         Next\n         Try\n            Task.WaitAll(tasks.ToArray())\n         &#39; Ignore exceptions here.\n         Catch e As AggregateException\n         End Try\n\n         For ctr As Integer = 0 To tasks.Count - 1\n            If tasks(ctr).Status = TaskStatus.Faulted Then\n               Console.WriteLine(&quot;{0} does not exist&quot;, args(ctr + 1))\n            Else\n               Console.WriteLine(&quot;{0:N0} bytes in files in &#39;{1}&#39;&quot;,\n                                 tasks(ctr).Result, args(ctr + 1))\n            End If\n         Next\n      Else\n         Console.WriteLine(&quot;Syntax error: Include one or more file paths.&quot;)\n      End If\n   End Sub\n   \n   Private Function GetFileLengthsAsync(filePath As String) As Task(Of Long)\n      If Not Directory.Exists(filePath) Then\n         Return Task.FromException(Of Long)(\n                     New DirectoryNotFoundException(&quot;Invalid directory name.&quot;))\n      Else\n         Dim files As String() = Directory.GetFiles(filePath)\n         If files.Length = 0 Then\n            Return Task.FromResult(0L)\n         Else\n            Return Task.Run( Function()\n                                Dim total As Long = 0\n                                Dim lockObj As New Object\n                                Parallel.ForEach(files, Sub(fileName)\n                                                           Dim fs As New FileStream(fileName, FileMode.Open,\n                                                                     FileAccess.Read, FileShare.ReadWrite,\n                                                                     256, True)\n                                                           Dim length As Long = fs.Length\n                                                           Interlocked.Add(total, length)\n                                                           fs.Close()\n                                                        End Sub)\n                                Return total\n                             End Function )\n         End If\n      End If\n   End Function\nEnd Module\n&#39; When launched with the following command line arguments:\n&#39;      subdir . newsubdir\n&#39; the example displays output like the following:\n&#39;       0 bytes in files in &#39;subdir&#39;\n&#39;       2,059 bytes in files in &#39;.&#39;\n&#39;       newsubdir does not exist\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.FromResult#1\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] args = Environment.GetCommandLineArgs();\n      if (args.Length &gt; 1) {\n         List&lt;Task&lt;long&gt;&gt; tasks = new List&lt;Task&lt;long&gt;&gt;();\n         for (int ctr = 1; ctr &lt; args.Length; ctr++)\n            tasks.Add(GetFileLengthsAsync(args[ctr]));\n\n         try {\n            Task.WaitAll(tasks.ToArray());\n         }\n         // Ignore exceptions here.\n         catch (AggregateException) {}\n\n         for (int ctr = 0 ; ctr &lt; tasks.Count; ctr++) {\n            if (tasks[ctr].Status == TaskStatus.Faulted)\n               Console.WriteLine(&quot;{0} does not exist&quot;, args[ctr + 1]);\n            else\n               Console.WriteLine(&quot;{0:N0} bytes in files in &#39;{1}&#39;&quot;,\n                                 tasks[ctr].Result, args[ctr + 1]);\n         }\n      }\n      else {\n         Console.WriteLine(&quot;Syntax error: Include one or more file paths.&quot;);\n      }\n   }\n\n   private static Task&lt;long&gt; GetFileLengthsAsync(string filePath)\n   {\n      if (! Directory.Exists(filePath)) {\n         return Task.FromException&lt;long&gt;(\n                     new DirectoryNotFoundException(&quot;Invalid directory name.&quot;));\n      }\n      else {\n         string[] files = Directory.GetFiles(filePath);\n         if (files.Length == 0)\n            return Task.FromResult(0L);\n         else\n            return Task.Run( () =&gt; { long total = 0;\n                                     Parallel.ForEach(files, (fileName) =&gt; {\n                                                 var fs = new FileStream(fileName, FileMode.Open,\n                                                                         FileAccess.Read, FileShare.ReadWrite,\n                                                                         256, true);\n                                                 long length = fs.Length;\n                                                 Interlocked.Add(ref total, length);\n                                                 fs.Close(); } );\n                                     return total;\n                                   } );\n      }\n   }\n}\n// When launched with the following command line arguments:\n//      subdir . newsubdir\n// the example displays output like the following:\n//       0 bytes in files in &#39;subdir&#39;\n//       2,059 bytes in files in &#39;.&#39;\n//       newsubdir does not exist\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_GetAwaiter\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_GetAwaiter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAwaiter()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an awaiter used to await this <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.taskawaiter\" data-linktype=\"relative-path\">TaskAwaiter</a></div>\r\n                  </div>\r\n                  <p>An awaiter instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is intended for compiler use rather than for use in application code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Run_System_Action_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Run_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run(Action)</div>        \r\n          </div>\r\n    \r\n            <p>Queues the specified work to run on the thread pool and returns a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object that represents that work.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Run (Action action);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The work to execute asynchronously</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the work queued to execute in the ThreadPool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> parameter was <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Run method allows you to create and execute a task in a single method call and is a simpler alternative to the <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method. It creates a task with the following default values:  </p>\n<ul>\n<li><p>Its cancellation token is <a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_None_\" data-linktype=\"relative-path\">None</a>.  </p>\n</li>\n<li><p>Its <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CreationOptions_\" data-linktype=\"relative-path\">CreationOptions</a> property value is <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskCreationOptions</a>.  </p>\n</li>\n<li><p>It uses the default task scheduler.  </p>\n<p>For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>ShowThreadInfo</code> method  that displays the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ManagedThreadId_\" data-linktype=\"relative-path\">ManagedThreadId</a>of the current thread. It is called directly from the application thread, and is called from the <a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a> delegate passed to the Run method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#11\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      ShowThreadInfo(&quot;Application&quot;);\n\n      var t = Task.Run(() =&gt; ShowThreadInfo(&quot;Task&quot;) );\n      t.Wait();\n   }\n\n   static void ShowThreadInfo(String s)\n   {\n      Console.WriteLine(&quot;{0} Thread ID: {1}&quot;,\n                        s, Thread.CurrentThread.ManagedThreadId);\n   }\n}\n// The example displays the following output:\n//       Application thread ID: 1\n//       Task thread ID: 3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#11\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      ShowThreadInfo(&quot;Application&quot;)\n\n      Dim t As Task = Task.Run(Sub() ShowThreadInfo(&quot;Task&quot;) )\n      t.Wait()\n   End Sub\n   \n   Private Sub ShowThreadInfo(s As String)\n      Console.WriteLine(&quot;{0} Thread ID: {1}&quot;,\n                        s, Thread.CurrentThread.ManagedThreadId)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Application thread ID: 1\n&#39;    Task thread ID: 3\n</code></pre><p> The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#3\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;Application thread ID: {0}&quot;,\n                        Thread.CurrentThread.ManagedThreadId);\n      var t = Task.Run(() =&gt; {  Console.WriteLine(&quot;Task thread ID: {0}&quot;,\n                                   Thread.CurrentThread.ManagedThreadId);\n                             } );\n      t.Wait();\n   }\n}\n// The example displays the following output:\n//       Application thread ID: 1\n//       Task thread ID: 3\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#3\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Console.WriteLine(&quot;Application thread ID: {0}&quot;,\n                        Thread.CurrentThread.ManagedThreadId)\n      Dim t As Task = Task.Run(Sub()\n                                  Console.WriteLine(&quot;Task thread ID: {0}&quot;,\n                                                    Thread.CurrentThread.ManagedThreadId)\n                               End Sub)\n      t.Wait()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Application thread ID: 1\n&#39;    Task thread ID: 3\n</code></pre><p> The examples show that the asynchronous task executes on a different thread than the main application thread.  </p>\n<p> The call to the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method ensures that the task completes and displays its output before the application ends. Otherwise, it is possible that the <code>Main</code> method will complete before the task finishes.  </p>\n<p> The following example illustrates the Run method. It defines an array of directory names and starts a separate task to retrieve the file names in each directory. All tasks write the file names to a single <a class=\"xref\" href=\"system.collections.concurrent.concurrentbag-1\" data-linktype=\"relative-path\">ConcurrentBag&lt;T&gt;</a> object. The example then calls the [WaitAll(Task&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt; method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <a class=\"xref\" href=\"system.collections.concurrent.concurrentbag-1\" data-linktype=\"relative-path\">ConcurrentBag&lt;T&gt;</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#1\">using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var list = new ConcurrentBag&lt;string&gt;();\n      string[] dirNames = { &quot;.&quot;, &quot;..&quot; };\n      List&lt;Task&gt; tasks = new List&lt;Task&gt;();\n      foreach (var dirName in dirNames) {\n         Task t = Task.Run( () =&gt; { foreach(var path in Directory.GetFiles(dirName)) \n                                       list.Add(path); }  );\n         tasks.Add(t);\n      }\n      Task.WaitAll(tasks.ToArray());\n      foreach (Task t in tasks)\n         Console.WriteLine(&quot;Task {0} Status: {1}&quot;, t.Id, t.Status);\n         \n      Console.WriteLine(&quot;Number of files read: {0}&quot;, list.Count);\n   }\n}\n// The example displays output like the following:\n//       Task 1 Status: RanToCompletion\n//       Task 2 Status: RanToCompletion\n//       Number of files read: 23\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#1\">Imports System.Collections.Concurrent\nImports System.Collections.Generic\nImports System.IO\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim list As New ConcurrentBag(Of String)()\n      Dim dirNames() As String = { &quot;.&quot;, &quot;..&quot; }\n      Dim tasks As New List(Of Task)()\n      For Each dirName In dirNames \n         Dim t As Task = Task.Run( Sub()\n                                      For Each path In Directory.GetFiles(dirName) \n                                         list.Add(path)\n                                      Next\n                                   End Sub  )\n         tasks.Add(t)\n      Next\n      Task.WaitAll(tasks.ToArray())\n      For Each t In tasks\n         Console.WriteLine(&quot;Task {0} Status: {1}&quot;, t.Id, t.Status)\n      Next   \n      Console.WriteLine(&quot;Number of files read: {0}&quot;, list.Count)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Task 1 Status: RanToCompletion\n&#39;       Task 2 Status: RanToCompletion\n&#39;       Number of files read: 23\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Run_System_Func_System_Threading_Tasks_Task__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Run_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run(Func&lt;Task&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <code>function</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The work to execute asynchronously</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents a proxy for the task returned by <code>function</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> parameter was <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Run_System_Action_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Run_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run(Action,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Queues the specified work to run on the thread pool and returns a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object that represents that work. A cancellation token allows the work to be cancelled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The work to execute asynchronously</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A cancellation token that can be used to cancel the work</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the work queued to execute in the thread pool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> parameter was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a></div>\r\n                  </div>\r\n                  <p>The task has been canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with <code>cancellationToken</code> was disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> state and throws a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> exception.  </p>\n<p> The Run method is a simpler alternative to the <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action,CancellationToken)</a> method. It creates a task with the following default values:  </p>\n<ul>\n<li><p>Its <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CreationOptions_\" data-linktype=\"relative-path\">CreationOptions</a> property value is <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskCreationOptions</a>.  </p>\n</li>\n<li><p>It uses the default task scheduler.  </p>\n<p>For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Run method to create a task that iterates the files in the C:\\Windows\\System32 directory. The lambda expression calls the &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method to add information about each  file to a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object. Each detached nested task invoked by the &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; loop checks the state of the cancellation token and, if cancellation is requested, calls the <a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_ThrowIfCancellationRequested_\" data-linktype=\"relative-path\">ThrowIfCancellationRequested</a> method. The <a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_ThrowIfCancellationRequested_\" data-linktype=\"relative-path\">ThrowIfCancellationRequested</a> method throws an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> exception that is handled in a <code>catch</code> block when the calling thread calls the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#4\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tokenSource = new CancellationTokenSource();\n      var token = tokenSource.Token;\n      var files = new List&lt;Tuple&lt;string, string, long, DateTime&gt;&gt;();\n\n      var t = Task.Run( () =&gt; { string dir = &quot;C:\\\\Windows\\\\System32\\\\&quot;;\n                                object obj = new Object();\n                                if (Directory.Exists(dir)) {\n                                   Parallel.ForEach(Directory.GetFiles(dir),\n                                   f =&gt; {\n                                           if (token.IsCancellationRequested)\n                                              token.ThrowIfCancellationRequested();\n                                           var fi = new FileInfo(f);\n                                           lock(obj) {\n                                              files.Add(Tuple.Create(fi.Name, fi.DirectoryName, fi.Length, fi.LastWriteTimeUtc));          \n                                           }\n                                      });\n                                 }\n                              }\n                        , token);\n      tokenSource.Cancel();\n      try {\n         t.Wait(); \n         Console.WriteLine(&quot;Retrieved information for {0} files.&quot;, files.Count);\n      }\n      catch (AggregateException e) {\n         Console.WriteLine(&quot;Exception messages:&quot;);\n         foreach (var ie in e.InnerExceptions)\n            Console.WriteLine(&quot;   {0}: {1}&quot;, ie.GetType().Name, ie.Message);\n\n         Console.WriteLine(&quot;<br>Task status: {0}&quot;, t.Status);       \n      }\n      finally {\n         tokenSource.Dispose();\n      }\n   }\n}\n// The example displays the following output:\n//       Exception messages:\n//          TaskCanceledException: A task was canceled.\n//       \n//       Task status: Canceled\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#4\">Imports System.Collections.Generic\nImports System.IO\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim tokenSource As New CancellationTokenSource()\n      Dim token As CancellationToken = tokenSource.Token\n      Dim files As New List(Of Tuple(Of String, String, Long, Date))()\n\n      Dim t As Task = Task.Run( Sub()\n                                   Dim dir As String = &quot;C:\\Windows\\System32\\&quot;\n                                   Dim obj As New Object()\n                                   If Directory.Exists(dir)Then\n                                      Parallel.ForEach(Directory.GetFiles(dir), \n                                         Sub(f)\n                                            If token.IsCancellationRequested Then\n                                               token.ThrowIfCancellationRequested()\n                                            End If  \n                                            Dim fi As New FileInfo(f)\n                                            SyncLock(obj)\n                                              files.Add(Tuple.Create(fi.Name, fi.DirectoryName, fi.Length, fi.LastWriteTimeUtc))          \n                                            End SyncLock\n                                         End Sub)\n                                   End If\n                                End Sub, token)\n      tokenSource.Cancel()\n      Try\n         t.Wait() \n         Console.WriteLine(&quot;Retrieved information for {0} files.&quot;, files.Count)\n      Catch e As AggregateException\n         Console.WriteLine(&quot;Exception messages:&quot;)\n         For Each ie As Exception In e.InnerExceptions\n            Console.WriteLine(&quot;   {0}:{1}&quot;, ie.GetType().Name, ie.Message)\n         Next\n         Console.WriteLine()\n         Console.WriteLine(&quot;Task status: {0}&quot;, t.Status)       \n      Finally\n         tokenSource.Dispose()\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Exception messages:\n&#39;          TaskCanceledException: A task was canceled.\n&#39;       \n&#39;       Task status: Canceled\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Run_System_Func_System_Threading_Tasks_Task__System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Run_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run(Func&lt;Task&gt;,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Queues the specified work to run on the thread pool and returns a proxy for the task returned by <code>function</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The work to execute asynchronously.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A cancellation token that should be used to cancel the work.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents a proxy for the task returned by <code>function</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> parameter was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a></div>\r\n                  </div>\r\n                  <p>The task has been canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with <code>cancellationToken</code> was disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Run__1_System_Func_System_Threading_Tasks_Task___0___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Run_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Queues the specified work to run on the thread pool and returns a proxy for the <code>Task(TResult)</code> returned by <code>function</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The work to execute asynchronously</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A <code>Task(TResult)</code> that represents a proxy for the <code>Task(TResult)</code> returned by <code>function</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> parameter was <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Run__1_System_Func___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Run_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run&lt;TResult&gt;(Func&lt;TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Queues the specified work to run on the thread pool and returns a <span class=\"xref\">stem.Threading.Tasks.Task`1</span> object that represents that work.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The work to execute asynchronously.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A task object that represents the work queued to execute in the thread pool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Run(TResult) method is a simpler alternative to the <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_System_Action_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew(Action)</a> method. It creates a task with the following default values:  </p>\n<ul>\n<li><p>Its cancellation token is <a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_None_\" data-linktype=\"relative-path\">None</a>.  </p>\n</li>\n<li><p>Its <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CreationOptions_\" data-linktype=\"relative-path\">CreationOptions</a> property value is <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskCreationOptions</a>.  </p>\n</li>\n<li><p>It uses the default task scheduler.  </p>\n<p>For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example counts the approximate number of words in text files that represent published books. Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression. The [WaitAll(Task&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29&gt; method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#2\">using System;\nusing System.IO;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;\\p{P}*\\s+&quot;;\n      string[] titles = { &quot;Sister Carrie&quot;, &quot;The Financier&quot; };\n      Task&lt;int&gt;[] tasks = new Task&lt;int&gt;[titles.Length];\n\n      for (int ctr = 0; ctr &lt; titles.Length; ctr++) {\n         string s = titles[ctr];\n         tasks[ctr] = Task.Run( () =&gt; {\n                                   // Number of words.\n                                   int nWords = 0;\n                                   // Create filename from title.\n                                   string fn = s + &quot;.txt&quot;;\n                                   if (File.Exists(fn)) {\n                                      StreamReader sr = new StreamReader(fn);\n                                      string input = sr.ReadToEndAsync().Result;\n                                      nWords = Regex.Matches(input, pattern).Count;\n                                   }\n                                   return nWords;\n                                } );\n      }\n      Task.WaitAll(tasks);\n\n      Console.WriteLine(&quot;Word Counts:<br>&quot;);\n      for (int ctr = 0; ctr &lt; titles.Length; ctr++)\n         Console.WriteLine(&quot;{0}: {1,10:N0} words&quot;, titles[ctr], tasks[ctr].Result);\n   }\n}\n// The example displays the following output:\n//       Sister Carrie:    159,374 words\n//       The Financier:    196,362 words\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#2\">Imports System.IO\nImports System.Text.RegularExpressions\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;\\p{P}*\\s+&quot;\n      Dim titles() As String = { &quot;Sister Carrie&quot;,\n                                 &quot;The Financier&quot; }\n      Dim tasks(titles.Length - 1) As Task(Of Integer)\n\n      For ctr As Integer = 0 To titles.Length - 1\n         Dim s As String = titles(ctr)\n         tasks(ctr) = Task.Run( Function()\n                                   &#39; Number of words.\n                                   Dim nWords As Integer = 0\n                                   &#39; Create filename from title.\n                                   Dim fn As String = s + &quot;.txt&quot;\n                                   If File.Exists(fn) Then\n                                      Dim sr As New StreamReader(fn)\n                                      Dim input As String = sr.ReadToEndAsync().Result\n                                      nWords = Regex.Matches(input, pattern).Count\n                                   End If\n                                   Return nWords\n                                End Function)\n      Next\n      Task.WaitAll(tasks)\n\n      Console.WriteLine(&quot;Word Counts:&quot;)\n      Console.WriteLine()\n      For ctr As Integer = 0 To titles.Length - 1\n         Console.WriteLine(&quot;{0}: {1,10:N0} words&quot;, titles(ctr), tasks(ctr).Result)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Sister Carrie:    159,374 words\n&#39;       The Financier:    196,362 words\n</code></pre><p> The regular expression <code>\\p{P}*\\s+</code> matches zero, one, or more punctuation characters followed by one or more whitespace characters. It assumes that the total number of matches equals the approximate word count.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Run__1_System_Func_System_Threading_Tasks_Task___0___System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Run_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Queues the specified work to run on the thread pool and returns a proxy for the <code>Task(TResult)</code> returned by <code>function</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The work to execute asynchronously</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A cancellation token that should be used to cancel the work</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A <code>Task(TResult)</code> that represents a proxy for the <code>Task(TResult)</code> returned by <code>function</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> parameter was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a></div>\r\n                  </div>\r\n                  <p>The task has been canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with <code>cancellationToken</code> was disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Run__1_System_Func___0__System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Run_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Run&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Queues the specified work to run on the thread pool and returns a <code>Task(TResult)</code> object that represents that work. A cancellation token allows the work to be cancelled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The work to execute asynchronously</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A cancellation token that should be used to cancel the work</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A <code>Task(TResult)</code> that represents the work queued to execute in the thread pool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a></div>\r\n                  </div>\r\n                  <p>The task has been canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with <code>cancellationToken</code> was disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">TaskStatus</a> state and throws a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> exception.  </p>\n<p> The Run(TResult) method is a simpler alternative to the <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method. It creates a task with the following default values:  </p>\n<ul>\n<li><p>Its <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CreationOptions_\" data-linktype=\"relative-path\">CreationOptions</a> property value is <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskCreationOptions</a>.  </p>\n</li>\n<li><p>It uses the default task scheduler.  </p>\n<p>For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million. When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled. The example shows possible output.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#7\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new List&lt;Task&lt;int&gt;&gt;();\n      var source = new CancellationTokenSource();\n      var token = source.Token;\n      int completedIterations = 0;\n\n      for (int n = 0; n &lt;= 19; n++)\n         tasks.Add(Task.Run( () =&gt; { int iterations = 0;\n                                     for (int ctr = 1; ctr &lt;= 2000000; ctr++) {\n                                         token.ThrowIfCancellationRequested();\n                                         iterations++;\n                                     }\n                                     Interlocked.Increment(ref completedIterations);\n                                     if (completedIterations &gt;= 10)\n                                        source.Cancel();\n                                     return iterations; }, token));\n\n      Console.WriteLine(&quot;Waiting for the first 10 tasks to complete...<br>&quot;);\n      try  {\n         Task.WaitAll(tasks.ToArray());\n      }\n      catch (AggregateException) {\n         Console.WriteLine(&quot;Status of tasks:<br>&quot;);\n         Console.WriteLine(&quot;{0,10} {1,20} {2,14:N0}&quot;, &quot;Task Id&quot;,\n                           &quot;Status&quot;, &quot;Iterations&quot;);\n         foreach (var t in tasks)\n            Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;,\n                              t.Id, t.Status,\n                              t.Status != TaskStatus.Canceled ? t.Result.ToString(&quot;N0&quot;) : &quot;n/a&quot;);\n      }\n   }\n}\n// The example displays output like the following:\n//    Waiting for the first 10 tasks to complete...\n//    Status of tasks:\n//\n//       Task Id               Status     Iterations\n//             1      RanToCompletion      2,000,000\n//             2      RanToCompletion      2,000,000\n//             3      RanToCompletion      2,000,000\n//             4      RanToCompletion      2,000,000\n//             5      RanToCompletion      2,000,000\n//             6      RanToCompletion      2,000,000\n//             7      RanToCompletion      2,000,000\n//             8      RanToCompletion      2,000,000\n//             9      RanToCompletion      2,000,000\n//            10             Canceled            n/a\n//            11             Canceled            n/a\n//            12             Canceled            n/a\n//            13             Canceled            n/a\n//            14             Canceled            n/a\n//            15             Canceled            n/a\n//            16      RanToCompletion      2,000,000\n//            17             Canceled            n/a\n//            18             Canceled            n/a\n//            19             Canceled            n/a\n//            20             Canceled            n/a\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#7\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n\n   Public Sub Main()\n      Dim tasks As New List(Of Task(Of Integer))()\n      Dim source As New CancellationTokenSource\n      Dim token As CancellationToken = source.Token\n      Dim completedIterations As Integer = 0\n      \n      For n As Integer = 0 To 19\n         tasks.Add(Task.Run( Function()\n                                Dim iterations As Integer= 0\n                                For ctr As Long = 1 To 2000000\n                                   token.ThrowIfCancellationRequested()\n                                   iterations += 1\n                                Next\n                                Interlocked.Increment(completedIterations)\n                                If completedIterations &gt;= 10 Then source.Cancel()\n                                Return iterations\n                             End Function, token))\n      Next\n\n      Console.WriteLine(&quot;Waiting for the first 10 tasks to complete... &quot;)\n      Try\n         Task.WaitAll(tasks.ToArray())\n      Catch e As AggregateException\n         Console.WriteLine(&quot;Status of tasks:&quot;)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;, &quot;Task Id&quot;,\n                           &quot;Status&quot;, &quot;Iterations&quot;)\n         For Each t In tasks\n            Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;,\n                              t.Id, t.Status,\n                              If(t.Status &lt;&gt; TaskStatus.Canceled,\n                                 t.Result.ToString(&quot;N0&quot;), &quot;n/a&quot;))\n         Next\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Waiting for the first 10 tasks to complete...\n&#39;    Status of tasks:\n&#39;\n&#39;       Task Id               Status     Iterations\n&#39;             1      RanToCompletion      2,000,000\n&#39;             2      RanToCompletion      2,000,000\n&#39;             3      RanToCompletion      2,000,000\n&#39;             4      RanToCompletion      2,000,000\n&#39;             5      RanToCompletion      2,000,000\n&#39;             6      RanToCompletion      2,000,000\n&#39;             7      RanToCompletion      2,000,000\n&#39;             8      RanToCompletion      2,000,000\n&#39;             9      RanToCompletion      2,000,000\n&#39;            10             Canceled            n/a\n&#39;            11             Canceled            n/a\n&#39;            12             Canceled            n/a\n&#39;            13             Canceled            n/a\n&#39;            14             Canceled            n/a\n&#39;            15             Canceled            n/a\n&#39;            16      RanToCompletion      2,000,000\n&#39;            17             Canceled            n/a\n&#39;            18             Canceled            n/a\n&#39;            19             Canceled            n/a\n&#39;            20             Canceled            n/a\n</code></pre><p> Instead of using the <a class=\"xref\" href=\"system.aggregateexception#System_AggregateException_InnerExceptions_\" data-linktype=\"relative-path\">InnerExceptions</a> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled. For those that have completed, it displays the value returned by the task.  </p>\n<p> Because cancellation is cooperative, each task can decide how to respond to cancellation. The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they&#39;ve completed rather than throw an exception.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#28\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new List&lt;Task&lt;int&gt;&gt;();\n      var source = new CancellationTokenSource();\n      var token = source.Token;\n      int completedIterations = 0;\n\n      for (int n = 0; n &lt;= 19; n++)\n         tasks.Add(Task.Run( () =&gt; { int iterations = 0;\n                                     for (int ctr = 1; ctr &lt;= 2000000; ctr++) {\n                                         if (token.IsCancellationRequested)\n                                            return iterations;\n                                         iterations++;\n                                     }\n                                     Interlocked.Increment(ref completedIterations);\n                                     if (completedIterations &gt;= 10)\n                                        source.Cancel();\n                                     return iterations; }, token));\n\n      Console.WriteLine(&quot;Waiting for the first 10 tasks to complete...<br>&quot;);\n      try  {\n         Task.WaitAll(tasks.ToArray());\n      }\n      catch (AggregateException) {\n         Console.WriteLine(&quot;Status of tasks:<br>&quot;);\n         Console.WriteLine(&quot;{0,10} {1,20} {2,14:N0}&quot;, &quot;Task Id&quot;,\n                           &quot;Status&quot;, &quot;Iterations&quot;);\n         foreach (var t in tasks)\n            Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;,\n                              t.Id, t.Status,\n                              t.Status != TaskStatus.Canceled ? t.Result.ToString(&quot;N0&quot;) : &quot;n/a&quot;);\n      }\n   }\n}\n// The example displays output like the following:\n//    Status of tasks:\n//\n//       Task Id               Status     Iterations\n//             1      RanToCompletion      2,000,000\n//             2      RanToCompletion      2,000,000\n//             3      RanToCompletion      2,000,000\n//             4      RanToCompletion      2,000,000\n//             5      RanToCompletion      2,000,000\n//             6      RanToCompletion      2,000,000\n//             7      RanToCompletion      2,000,000\n//             8      RanToCompletion      2,000,000\n//             9      RanToCompletion      2,000,000\n//            10      RanToCompletion      1,658,326\n//            11      RanToCompletion      1,988,506\n//            12      RanToCompletion      2,000,000\n//            13      RanToCompletion      1,942,246\n//            14      RanToCompletion        950,108\n//            15      RanToCompletion      1,837,832\n//            16      RanToCompletion      1,687,182\n//            17      RanToCompletion        194,548\n//            18             Canceled    Not Started\n//            19             Canceled    Not Started\n//            20             Canceled    Not Started\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#28\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n\n   Public Sub Main()\n      Dim tasks As New List(Of Task(Of Integer))()\n      Dim source As New CancellationTokenSource\n      Dim token As CancellationToken = source.Token\n      Dim completedIterations As Integer = 0\n      \n      For n As Integer = 0 To 19\n         tasks.Add(Task.Run( Function()\n                                Dim iterations As Integer= 0\n                                For ctr As Long = 1 To 2000000\n                                   If token.IsCancellationRequested Then\n                                      Return iterations\n                                   End If\n                                   iterations += 1\n                                Next\n                                Interlocked.Increment(completedIterations)\n                                If completedIterations &gt;= 10 Then source.Cancel()\n                                Return iterations\n                             End Function, token))\n      Next\n\n      Try\n         Task.WaitAll(tasks.ToArray())\n      Catch e As AggregateException\n         Console.WriteLine(&quot;Status of tasks:&quot;)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0,10} {1,20} {2,14:N0}&quot;, &quot;Task Id&quot;,\n                           &quot;Status&quot;, &quot;Iterations&quot;)\n         For Each t In tasks\n            Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;,\n                              t.Id, t.Status,\n                              If(t.Status &lt;&gt; TaskStatus.Canceled,\n                                 t.Result.ToString(&quot;N0&quot;), &quot;Not Started&quot;))\n         Next\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Status of tasks:\n&#39;\n&#39;       Task Id               Status     Iterations\n&#39;             1      RanToCompletion      2,000,000\n&#39;             2      RanToCompletion      2,000,000\n&#39;             3      RanToCompletion      2,000,000\n&#39;             4      RanToCompletion      2,000,000\n&#39;             5      RanToCompletion      2,000,000\n&#39;             6      RanToCompletion      2,000,000\n&#39;             7      RanToCompletion      2,000,000\n&#39;             8      RanToCompletion      2,000,000\n&#39;             9      RanToCompletion      2,000,000\n&#39;            10      RanToCompletion      1,658,326\n&#39;            11      RanToCompletion      1,988,506\n&#39;            12      RanToCompletion      2,000,000\n&#39;            13      RanToCompletion      1,942,246\n&#39;            14      RanToCompletion        950,108\n&#39;            15      RanToCompletion      1,837,832\n&#39;            16      RanToCompletion      1,687,182\n&#39;            17      RanToCompletion        194,548\n&#39;            18             Canceled    Not Started\n&#39;            19             Canceled    Not Started\n&#39;            20             Canceled    Not Started\n</code></pre><p> The example still must handle the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_RunSynchronously\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_RunSynchronously_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RunSynchronously()</div>        \r\n          </div>\r\n    \r\n            <p>Runs the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> synchronously on the current <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RunSynchronously ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn&#39;t support direct scheduling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread. Tasks executed by calling the RunSynchronously method are associated with the current <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> and are run on the calling thread. If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution. Even though the task runs synchronously, the calling thread should still call <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> to handle any exceptions that the task might throw.  For more information on exception handling, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.  </p>\n<p> Tasks executed by calling the RunSynchronously method are instantiated by calling a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> or <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> class constructor. The task to be run synchronously must be in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares a task executed by calling the RunSynchronously method with one executed asynchronously. In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running. The task calculates the sum of the integers between 1 and 1,000,000. As the output from the example shows, the task executed by calling the RunSynchronously method runs on the application thread, while the asynchronous task does not.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.RunSynchronously#1\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Console.WriteLine(&quot;Application executing on thread {0}&quot;,\n                        Thread.CurrentThread.ManagedThreadId)\n      Dim asyncTask = Task.Run( Function()\n                                   Console.WriteLine(&quot;Task {0} (asyncTask) executing on Thread {1}&quot;,\n                                                     Task.CurrentId,\n                                                     Thread.CurrentThread.ManagedThreadId)\n                                   Dim sum As Long = 0\n                                   For ctr As Integer = 1 To 1000000\n                                      sum += ctr\n                                   Next\n                                   Return sum\n                                End Function)\n      Dim syncTask As New Task(Of Long)( Function()\n                                            Console.WriteLine(&quot;Task {0} (syncTask) executing on Thread {1}&quot;,\n                                                              Task.CurrentId,\n                                                              Thread.CurrentThread.ManagedThreadId)\n                                            Dim sum As Long = 0\n                                            For ctr As Integer = 1 To 1000000\n                                               sum += ctr\n                                            Next\n                                            Return sum\n                                         End Function)\n      syncTask.RunSynchronously()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Task {0} returned {1:N0}&quot;, syncTask.Id, syncTask.Result)\n      Console.WriteLine(&quot;Task {0} returned {1:N0}&quot;, asyncTask.Id, asyncTask.Result)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Application executing on thread 1\n&#39;       Task 1 (syncTask) executing on Thread 1\n&#39;       Task 2 (asyncTask) executing on Thread 3\n&#39;       1 status: RanToCompletion\n&#39;       2 status: RanToCompletion\n&#39;\n&#39;       Task 2 returned 500,000,500,000\n&#39;       Task 1 returned 500,000,500,000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.RunSynchronously#1\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;Application executing on thread {0}&quot;,\n                        Thread.CurrentThread.ManagedThreadId);\n      var asyncTask = Task.Run( () =&gt; {  Console.WriteLine(&quot;Task {0} (asyncTask) executing on Thread {1}&quot;,\n                                                           Task.CurrentId,\n                                                           Thread.CurrentThread.ManagedThreadId);\n                                         long sum = 0;\n                                         for (int ctr = 1; ctr &lt;= 1000000; ctr++ )\n                                            sum += ctr;\n                                         return sum;\n                                      });\n      var syncTask = new Task&lt;long&gt;( () =&gt;  { Console.WriteLine(&quot;Task {0} (syncTask) executing on Thread {1}&quot;,\n                                                                 Task.CurrentId,\n                                                                 Thread.CurrentThread.ManagedThreadId);\n                                              long sum = 0;\n                                              for (int ctr = 1; ctr &lt;= 1000000; ctr++ )\n                                                 sum += ctr;\n                                              return sum;\n                                            });\n      syncTask.RunSynchronously();\n      Console.WriteLine();\n      Console.WriteLine(&quot;Task {0} returned {1:N0}&quot;, syncTask.Id, syncTask.Result);\n      Console.WriteLine(&quot;Task {0} returned {1:N0}&quot;, asyncTask.Id, asyncTask.Result);\n   }\n}\n// The example displays the following output:\n//       Application executing on thread 1\n//       Task 1 (syncTask) executing on Thread 1\n//       Task 2 (asyncTask) executing on Thread 3\n//       1 status: RanToCompletion\n//       2 status: RanToCompletion\n//\n//       Task 2 returned 500,000,500,000\n//       Task 1 returned 500,000,500,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_RunSynchronously_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_RunSynchronously_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RunSynchronously(TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Runs the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> synchronously on the <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> provided.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The scheduler on which to attempt to run this task inline.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn&#39;t support direct scheduling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Tasks executed by calling the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_RunSynchronously_\" data-linktype=\"relative-path\">RunSynchronously</a> method are instantiated by calling a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> or <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> class constructor. The task to be run synchronously must be in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.  </p>\n<p> If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution. Because of this, the calling thread does not need to call a method such as <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> to ensure that the task has completed execution. For more information on exception handling for task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Start\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start()</div>        \r\n          </div>\r\n    \r\n            <p>Starts the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>, scheduling it for execution to the current <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Start ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn&#39;t support direct scheduling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A task may be started and run only once. Any attempts to schedule a task a second time will result in an exception.  </p>\n<p> The Start is used to execute a task that has been created by calling one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> constructors. Typically, you do this when you need to separate the task&#39;s creation from its execution, such as when you conditionally execute tasks that you&#39;ve created. For the more common case in which you don&#39;t need to separate  task instantiation from execution, we recommend that you call an overload of the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_\" data-linktype=\"relative-path\">Run</a> or <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method.  </p>\n<p> For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task__ctor_System_Action_\" data-linktype=\"relative-path\">Task(Action)</a> constructor to instantiate a new <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object that displays its task ID and managed thread ID and then executes a loop. It then calls the Start method to execute the task.  Since this is a console app, the call to the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method is necessary to prevent the app from terminating before the task finishes execution.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Start#1\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var t = new Task( () =&gt; { Console.WriteLine(&quot;Task {0} running on thread {1}&quot;,\n                                                  Task.CurrentId, Thread.CurrentThread.ManagedThreadId);\n                                for (int ctr = 1; ctr &lt;= 10; ctr++)\n                                   Console.WriteLine(&quot;   Iteration {0}&quot;, ctr); } \n                        );\n      t.Start();\n      t.Wait();   \n   }\n}\n// The example displays output like the following:\n//     Task 1 running on thread 3\n//        Iteration 1\n//        Iteration 2\n//        Iteration 3\n//        Iteration 4\n//        Iteration 5\n//        Iteration 6\n//        Iteration 7\n//        Iteration 8\n//        Iteration 9\n//        Iteration 10\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Start#1\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t As New Task(Sub()\n                           Console.WriteLine(&quot;Task {0} running on thread {1}&quot;,\n                                             Task.CurrentId, Thread.CurrentThread.ManagedThreadId )\n                           For ctr As Integer = 1 To 10\n                              Console.WriteLine(&quot;   Iteration {0}&quot;, ctr)\n                           Next   \n                        End Sub)\n      t.Start\n      t.Wait()   \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     Task 1 running on thread 3\n&#39;        Iteration 1\n&#39;        Iteration 2\n&#39;        Iteration 3\n&#39;        Iteration 4\n&#39;        Iteration 5\n&#39;        Iteration 6\n&#39;        Iteration 7\n&#39;        Iteration 8\n&#39;        Iteration 9\n&#39;        Iteration 10\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Start_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start(TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Starts the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>, scheduling it for execution to the specified <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Start (System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> with which to associate and execute this task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn&#39;t support direct scheduling.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instance has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskschedulerexception\" data-linktype=\"relative-path\">TaskSchedulerException</a></div>\r\n                  </div>\r\n                  <p>The scheduler was unable to queue this task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A task may only be started and run only once. Any attempts to schedule a task a second time will result in an exception.  </p>\n<p> For information on handling exceptions thrown by task operations, see <a href=\"../Topic/Exception%20Handling%20(Task%20Parallel%20Library).md\" data-linktype=\"relative-path\">Exception Handling</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Wait\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait()</div>        \r\n          </div>\r\n    \r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Wait ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The task was canceled. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> object.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of the task. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains information about the exception or exceptions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> is a synchronization method that causes the calling thread to wait until the current task has completed. If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread. If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes. For more information, see <a href=\"http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx\" data-linktype=\"external\">Task.Wait and &quot;Inlining&quot;</a> in the Parallel Programming with .NET blog.  </p>\n<p> For more information and an example, see <a href=\"../Topic/How%20to:%20Wait%20on%20One%20or%20More%20Tasks%20to%20Complete.md\" data-linktype=\"relative-path\">How to: Wait on One or More Tasks to Complete</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts a task that generates one million random integers between 0 and 100 and computes their mean. The example uses the Wait method to ensure that the task completes before the application terminates. Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Wait#1\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Task t = Task.Run( () =&gt; {\n                            Random rnd = new Random();\n                            long sum = 0;\n                            int n = 1000000;\n                            for (int ctr = 1; ctr &lt;= n; ctr++) {\n                               int number = rnd.Next(0, 101);\n                               sum += number;\n                            }\n                            Console.WriteLine(&quot;Total:   {0:N0}&quot;, sum);\n                            Console.WriteLine(&quot;Mean:    {0:N2}&quot;, sum/n);\n                            Console.WriteLine(&quot;N:       {0:N0}&quot;, n);   \n                         } );\n     t.Wait();\n   }\n}\n// The example displays output similar to the following:\n//       Total:   50,015,714\n//       Mean:    50.02\n//       N:       1,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Wait#1\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t As Task = Task.Run( Sub()\n                                   Dim rnd As New Random()\n                                   Dim sum As Long\n                                   Dim n As Integer = 1000000\n                                   For ctr As Integer = 1 To n\n                                      Dim number As Integer = rnd.Next(0, 101)\n                                      sum += number\n                                   Next\n                                   Console.WriteLine(&quot;Total:   {0:N0}&quot;, sum)\n                                   Console.WriteLine(&quot;Mean:    {0:N2}&quot;, sum/n)\n                                   Console.WriteLine(&quot;N:       {0:N0}&quot;, n)   \n                                End Sub)\n     t.Wait()\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       Total:   50,015,714\n&#39;       Mean:    50.02\n&#39;       N:       1,000,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Wait_System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution within a specified number of milliseconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Wait (int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1) to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completed execution within the allotted time; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The task was canceled. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> object.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of the task. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains information about the exception or exceptions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Wait is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  </p>\n<ul>\n<li><p>The task completes successfully.  </p>\n</li>\n<li><p>The task itself is canceled or throws an exception. In this case, you handle an <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> exception. The <a class=\"xref\" href=\"system.aggregateexception#System_AggregateException_InnerExceptions_\" data-linktype=\"relative-path\">InnerExceptions</a> property contains details about the exception or exceptions.  </p>\n</li>\n<li><p>The interval defined by <code>millisecondsTimeout</code> elapses. In this case, the current thread resumes execution and the method returns <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts a task that generates five million random integers between 0 and 100 and computes their mean. The example uses the Wait method to wait for the application to complete within 150 milliseconds. If the application completes normally, the task displays the sum and mean of the random numbers that it has generated. If the timeout interval has elapsed, the example displays a message before it terminates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Wait#5\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t As Task = Task.Run( Sub()\n                                   Dim rnd As New Random()\n                                   Dim sum As Long\n                                   Dim n As Integer = 5000000\n                                   For ctr As Integer = 1 To n\n                                      Dim number As Integer = rnd.Next(0, 101)\n                                      sum += number\n                                   Next\n                                   Console.WriteLine(&quot;Total:   {0:N0}&quot;, sum)\n                                   Console.WriteLine(&quot;Mean:    {0:N2}&quot;, sum/n)\n                                   Console.WriteLine(&quot;N:       {0:N0}&quot;, n)   \n                                End Sub)\n     If Not t.Wait(150) Then\n        Console.WriteLine(&quot;The timeout interval elapsed.&quot;)\n     End If\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       Total:   50,015,714\n&#39;       Mean:    50.02\n&#39;       N:       1,000,000\n&#39; Or it displays the following output:\n&#39;       The timeout interval elapsed.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Wait#5\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Task t = Task.Run( () =&gt; {\n                            Random rnd = new Random();\n                            long sum = 0;\n                            int n = 5000000;\n                            for (int ctr = 1; ctr &lt;= n; ctr++) {\n                               int number = rnd.Next(0, 101);\n                               sum += number;\n                            }\n                            Console.WriteLine(&quot;Total:   {0:N0}&quot;, sum);\n                            Console.WriteLine(&quot;Mean:    {0:N2}&quot;, sum/n);\n                            Console.WriteLine(&quot;N:       {0:N0}&quot;, n);   \n                         } );\n     if (! t.Wait(150))\n        Console.WriteLine(&quot;The timeout interval elapsed.&quot;);\n   }\n}\n// The example displays output similar to the following:\n//       Total:   50,015,714\n//       Mean:    50.02\n//       N:       1,000,000\n// Or it displays the following output:\n//      The timeout interval elapsed.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Wait_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution. The wait terminates if a cancellation token is canceled before the task completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Wait (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A cancellation token to observe while waiting for the task to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <code>cancellationToken</code> was canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The task has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The task was canceled. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> object.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of the task. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains information about the exception or exceptions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Wait method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:  </p>\n<ul>\n<li><p>The task completes.  </p>\n</li>\n<li><p>The cancellation token is canceled. In this case, the call to the Wait method throws an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a>.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Canceling the <code>cancellationToken</code> cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the <code>cancellationToken</code> object to this method simply allows the wait to be canceled.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the simple use of a cancellation token to cancel waiting for a task&#39;s completion. A task is launched, calls the <a class=\"xref\" href=\"system.threading.cancellationtokensource#System_Threading_CancellationTokenSource_Cancel_\" data-linktype=\"relative-path\">Cancel</a> method to cancel any of the token source&#39;s cancellation tokens, and then delays for five seconds. Note that the task itself has not been passed the cancellation token and is not cancelable. The application thread calls the task&#39;s Wait method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> is thrown. The exception handler reports the exception and then sleeps for six seconds. As the output from the example shows, that delay allows the task to complete in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Wait#3\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim ts As New CancellationTokenSource()\n\n      Dim t = Task.Run( Sub()\n                           Console.WriteLine(&quot;Calling Cancel...&quot;)\n                           ts.Cancel()\n                           Task.Delay(5000).Wait()\n                           Console.WriteLine(&quot;Task ended delay...&quot;)\n                        End Sub)\n      Try\n         Console.WriteLine(&quot;About to wait for the task to complete...&quot;)\n         t.Wait(ts.Token)\n      Catch e As OperationCanceledException\n         Console.WriteLine(&quot;{0}: The wait has been canceled. Task status: {1:G}&quot;,\n                           e.GetType().Name, t.Status)\n         Thread.Sleep(6000)\n         Console.WriteLine(&quot;After sleeping, the task status:  {0:G}&quot;, t.Status)\n      End Try\n      ts.Dispose()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    About to wait for the task to complete...\n&#39;    Calling Cancel...\n&#39;    OperationCanceledException: The wait has been canceled. Task status: Running\n&#39;    Task ended delay...\n&#39;    After sleeping, the task status:  RanToCompletion\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Wait#3\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CancellationTokenSource ts = new CancellationTokenSource();\n\n      Task t = Task.Run( () =&gt; { Console.WriteLine(&quot;Calling Cancel...&quot;);\n                                 ts.Cancel();\n                                 Task.Delay(5000).Wait();\n                                 Console.WriteLine(&quot;Task ended delay...&quot;);\n                               });\n      try {\n         Console.WriteLine(&quot;About to wait for the task to complete...&quot;);\n         t.Wait(ts.Token);\n      }\n      catch (OperationCanceledException e) {\n         Console.WriteLine(&quot;{0}: The wait has been canceled. Task status: {1:G}&quot;,\n                           e.GetType().Name, t.Status);\n         Thread.Sleep(6000);\n         Console.WriteLine(&quot;After sleeping, the task status:  {0:G}&quot;, t.Status);\n      }\n      ts.Dispose();\n   }\n}\n// The example displays output like the following:\n//    About to wait for the task to complete...\n//    Calling Cancel...\n//    OperationCanceledException: The wait has been canceled. Task status: Running\n//    Task ended delay...\n//    After sleeping, the task status:  RanToCompletion\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Wait_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution within a specified time interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Wait (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents the number of milliseconds to wait, or a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents -1 milliseconds to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completed execution within the allotted time; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  </p>\n<p> -or-  </p>\n<p> <code>timeout</code> is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The task was canceled. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> object.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of the task. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains information about the exception or exceptions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Wait is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  </p>\n<ul>\n<li><p>The task completes successfully.  </p>\n</li>\n<li><p>The task itself is canceled or throws an exception. In this case, you handle an <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> exception. The <a class=\"xref\" href=\"system.aggregateexception#System_AggregateException_InnerExceptions_\" data-linktype=\"relative-path\">InnerExceptions</a> property contains details about the exception or exceptions.  </p>\n</li>\n<li><p>The interval defined by <code>timeout</code> elapses. In this case, the current thread resumes execution and the method returns <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts a task that generates five million random integers between 0 and 100 and computes their mean. The example uses the Wait method to wait for the application to complete within 150 milliseconds. If the application completes normally, the task displays the sum and mean of the random numbers that it has generated. If the timeout interval has elapsed, the example displays a message before it terminates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Wait#6\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Task t = Task.Run( () =&gt; {\n                            Random rnd = new Random();\n                            long sum = 0;\n                            int n = 5000000;\n                            for (int ctr = 1; ctr &lt;= n; ctr++) {\n                               int number = rnd.Next(0, 101);\n                               sum += number;\n                            }\n                            Console.WriteLine(&quot;Total:   {0:N0}&quot;, sum);\n                            Console.WriteLine(&quot;Mean:    {0:N2}&quot;, sum/n);\n                            Console.WriteLine(&quot;N:       {0:N0}&quot;, n);   \n                         } );\n     TimeSpan ts = TimeSpan.FromMilliseconds(150);\n     if (! t.Wait(ts))\n        Console.WriteLine(&quot;The timeout interval elapsed.&quot;);\n   }\n}\n// The example displays output similar to the following:\n//       Total:   50,015,714\n//       Mean:    50.02\n//       N:       1,000,000\n// Or it displays the following output:\n//      The timeout interval elapsed.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Wait#6\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t As Task = Task.Run( Sub()\n                                   Dim rnd As New Random()\n                                   Dim sum As Long\n                                   Dim n As Integer = 5000000\n                                   For ctr As Integer = 1 To n\n                                      Dim number As Integer = rnd.Next(0, 101)\n                                      sum += number\n                                   Next\n                                   Console.WriteLine(&quot;Total:   {0:N0}&quot;, sum)\n                                   Console.WriteLine(&quot;Mean:    {0:N2}&quot;, sum/n)\n                                   Console.WriteLine(&quot;N:       {0:N0}&quot;, n)   \n                                End Sub)\n     Dim ts As TimeSpan = TimeSpan.FromMilliseconds(150)\n     If Not t.Wait(ts) Then\n        Console.WriteLine(&quot;The timeout interval elapsed.&quot;)\n     End If\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       Total:   50,015,714\n&#39;       Mean:    50.02\n&#39;       N:       1,000,000\n&#39; Or it displays the following output:\n&#39;       The timeout interval elapsed.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Wait_System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Wait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Wait(Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1) to wait indefinitely.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A cancellation token to observe while waiting for the task to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> completed execution within the allotted time; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <code>cancellationToken</code> was canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The task was canceled. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> object.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of the task. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains information about the exception or exceptions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Wait is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  </p>\n<ul>\n<li><p>The task completes successfully.  </p>\n</li>\n<li><p>The task itself is canceled or throws an exception. In this case, you handle an <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> exception. The <a class=\"xref\" href=\"system.aggregateexception#System_AggregateException_InnerExceptions_\" data-linktype=\"relative-path\">InnerExceptions</a> property contains details about the exception or exceptions.  </p>\n</li>\n<li><p>The <code>cancellationToken</code> cancellation token is canceled. In this case, the call to the Wait method throws an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a>.  </p>\n</li>\n<li><p>The interval defined by <code>millisecondsTimeout</code> elapses. In this case, the current thread resumes execution and the method returns <code>false</code>.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Canceling the <code>cancellationToken</code> cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the <code>cancellationToken</code> object to this method simply allows the wait to be canceled based on some condition.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Wait method to provide both a timeout value and a cancellation token that can end the wait for a task&#39;s completion. A new thread is started and executes the <code>CancelToken</code> method, which pauses and then calls the <a class=\"xref\" href=\"system.threading.cancellationtokensource#System_Threading_CancellationTokenSource_Cancel_\" data-linktype=\"relative-path\">Cancel</a> method to cancel the cancellation tokens. A task is then launched and delays for 5 seconds. The Wait method is then called to wait for the task&#39;s completion and is provided both a brief timeout value and a cancellation token.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Wait#4\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CancellationTokenSource ts = new CancellationTokenSource();\n      Thread thread = new Thread(CancelToken);\n      thread.Start(ts);\n\n      Task t = Task.Run( () =&gt; { Task.Delay(5000).Wait();\n                                 Console.WriteLine(&quot;Task ended delay...&quot;);\n                               });\n      try {\n         Console.WriteLine(&quot;About to wait completion of task {0}&quot;, t.Id);\n         bool result = t.Wait(1510, ts.Token);\n         Console.WriteLine(&quot;Wait completed normally: {0}&quot;, result);\n         Console.WriteLine(&quot;The task status:  {0:G}&quot;, t.Status);\n      }\n      catch (OperationCanceledException e) {\n         Console.WriteLine(&quot;{0}: The wait has been canceled. Task status: {1:G}&quot;,\n                           e.GetType().Name, t.Status);\n         Thread.Sleep(4000);\n         Console.WriteLine(&quot;After sleeping, the task status:  {0:G}&quot;, t.Status);\n         ts.Dispose();\n      }\n   }\n\n   private static void CancelToken(Object obj)\n   {\n      Thread.Sleep(1500);\n      Console.WriteLine(&quot;Canceling the cancellation token from thread {0}...&quot;,\n                        Thread.CurrentThread.ManagedThreadId);\n      CancellationTokenSource source = obj as CancellationTokenSource;\n      if (source != null) source.Cancel();\n   }\n}\n// The example displays output like the following if the wait is canceled by\n// the cancellation token:\n//    About to wait completion of task 1\n//    Canceling the cancellation token from thread 3...\n//    OperationCanceledException: The wait has been canceled. Task status: Running\n//    Task ended delay...\n//    After sleeping, the task status:  RanToCompletion\n// The example displays output like the following if the wait is canceled by\n// the timeout interval expiring:\n//    About to wait completion of task 1\n//    Wait completed normally: False\n//    The task status:  Running\n//    Canceling the cancellation token from thread 3...\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Wait#4\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim ts As New CancellationTokenSource()\n      Dim thread As New Thread(AddressOf CancelToken)\n      thread.Start(ts)\n\n      Dim t As Task = Task.Run( Sub()\n                                   Task.Delay(5000).Wait()\n                                    Console.WriteLine(&quot;Task ended delay...&quot;)\n                                End Sub)\n      Try\n         Console.WriteLine(&quot;About to wait completion of task {0}&quot;, t.Id)\n         Dim result As Boolean = t.Wait(1510, ts.Token)\n         Console.WriteLine(&quot;Wait completed normally: {0}&quot;, result)\n         Console.WriteLine(&quot;The task status:  {0:G}&quot;, t.Status)\n      Catch e As OperationCanceledException\n         Console.WriteLine(&quot;{0}: The wait has been canceled. Task status: {1:G}&quot;,\n                           e.GetType().Name, t.Status)\n         Thread.Sleep(4000)\n         Console.WriteLine(&quot;After sleeping, the task status:  {0:G}&quot;, t.Status)\n         ts.Dispose()\n      End Try\n   End Sub\n\n   Private Sub CancelToken(obj As Object)\n      Thread.Sleep(1500)\n      Console.WriteLine(&quot;Canceling the cancellation token from thread {0}...&quot;,\n                        Thread.CurrentThread.ManagedThreadId)\n\n      If TypeOf obj Is CancellationTokenSource Then\n         Dim source As CancellationTokenSource = CType(obj, CancellationTokenSource)\n         source.Cancel()\n      End If\n   End Sub\nEnd Module\n&#39; The example displays output like the following if the wait is canceled by\n&#39; the cancellation token:\n&#39;    About to wait completion of task 1\n&#39;    Canceling the cancellation token from thread 3...\n&#39;    OperationCanceledException: The wait has been canceled. Task status: Running\n&#39;    Task ended delay...\n&#39;    After sleeping, the task status:  RanToCompletion\n&#39; The example displays output like the following if the wait is canceled by\n&#39; the timeout interval expiring:\n&#39;    About to wait completion of task 1\n&#39;    Wait completed normally: False\n&#39;    The task status:  Running\n&#39;    Canceling the cancellation token from thread 3...\n</code></pre><p> Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAll(Task[])</div>        \r\n          </div>\r\n    \r\n            <p>Waits for all of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WaitAll (System.Threading.Tasks.Task[] tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>One or more of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in <code>tasks</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.  </p>\n<p> -or-  </p>\n<p> The <code>tasks</code> argument is an empty array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>At least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances was canceled. If a task was canceled, the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> exception contains an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> exception in its <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of at least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example starts 10 tasks, each of which is passed an index as a state object. Tasks with an index from two to five throw exceptions. The call to the WaitAll method wraps all exceptions in an <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> object and propagates it to the calling thread.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task#02\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Example\n{\n    static void Main()\n    {\n        var tasks = new List&lt;Task&lt;int&gt;&gt;();\n         \n        // Define a delegate that prints and returns the system tick count\n        Func&lt;object, int&gt; action = (object obj) =&gt;\n        {\n            int i = (int)obj;\n\n            // Make each thread sleep a different time in order to return a different tick count\n            Thread.Sleep(i * 100);\n\n            // The tasks that receive an argument between 2 and 5 throw exceptions\n            if (2 &lt;= i &amp;&amp; i &lt;= 5)\n            {\n                throw new InvalidOperationException(&quot;SIMULATED EXCEPTION&quot;);\n            }\n\n            int tickCount = Environment.TickCount;\n            Console.WriteLine(&quot;Task={0}, i={1}, TickCount={2}, Thread={3}&quot;, Task.CurrentId, i, tickCount, Thread.CurrentThread.ManagedThreadId);\n\n            return tickCount;\n        };\n\n        // Construct started tasks\n        for (int i = 0; i &lt; 10; i++)\n        {\n            int index = i;\n            tasks.Add(Task&lt;int&gt;.Factory.StartNew(action, index));\n        }\n\n        try\n        {\n            // Wait for all the tasks to finish.\n            Task.WaitAll(tasks.ToArray());\n\n            // We should never get to this point\n            Console.WriteLine(&quot;WaitAll() has not thrown exceptions. THIS WAS NOT EXPECTED.&quot;);\n        }\n        catch (AggregateException e)\n        {\n            Console.WriteLine(&quot;<br>The following exceptions have been thrown by WaitAll(): (THIS WAS EXPECTED)&quot;);\n            for (int j = 0; j &lt; e.InnerExceptions.Count; j++)\n            {\n                Console.WriteLine(&quot;<br>-------------------------------------------------<br>{0}&quot;, e.InnerExceptions[j].ToString());\n            }\n        }\n    }\n}\n// The example displays output like the following:\n//     Task=1, i=0, TickCount=1203822250, Thread=3\n//     Task=2, i=1, TickCount=1203822359, Thread=4\n//     Task=7, i=6, TickCount=1203823484, Thread=3\n//     Task=8, i=7, TickCount=1203823890, Thread=4\n//     Task=9, i=8, TickCount=1203824296, Thread=3\n//     Task=10, i=9, TickCount=1203824796, Thread=4\n//     \n//     The following exceptions have been thrown by WaitAll(): (THIS WAS EXPECTED)\n//     \n//     -------------------------------------------------\n//     System.InvalidOperationException: SIMULATED EXCEPTION\n//        at Example.&lt;Main&gt;b__0(Object obj)\n//        at System.Threading.Tasks.Task`1.InnerInvoke()\n//        at System.Threading.Tasks.Task.Execute()\n//     \n//     -------------------------------------------------\n//     System.InvalidOperationException: SIMULATED EXCEPTION\n//        at Example.&lt;Main&gt;b__0(Object obj)\n//        at System.Threading.Tasks.Task`1.InnerInvoke()\n//        at System.Threading.Tasks.Task.Execute()\n//     \n//     -------------------------------------------------\n//     System.InvalidOperationException: SIMULATED EXCEPTION\n//        at Example.&lt;Main&gt;b__0(Object obj)\n//        at System.Threading.Tasks.Task`1.InnerInvoke()\n//        at System.Threading.Tasks.Task.Execute()\n//     \n//     -------------------------------------------------\n//     System.InvalidOperationException: SIMULATED EXCEPTION\n//        at Example.&lt;Main&gt;b__0(Object obj)\n//        at System.Threading.Tasks.Task`1.InnerInvoke()\n//        at System.Threading.Tasks.Task.Execute()\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task#02\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\nModule WaitAllDemo\n    Sub Main()\n        Dim tasks As New List(Of Task(Of Integer))()\n        &#39; Define a delegate that prints and returns the system tick count\n        Dim action As Func(Of Object, Integer) = Function(obj As Object)\n                                                     Dim i As Integer = CInt(obj)\n\n                                                     &#39; Make each thread sleep a different time in order to return a different tick count\n                                                     Thread.Sleep(i * 100)\n\n                                                     &#39; The tasks that receive an argument between 2 and 5 throw exceptions\n                                                     If 2 &lt;= i AndAlso i &lt;= 5 Then\n                                                         Throw New InvalidOperationException(&quot;SIMULATED EXCEPTION&quot;)\n                                                     End If\n\n                                                     Dim tickCount As Integer = Environment.TickCount\n                                                     Console.WriteLine(&quot;Task={0}, i={1}, TickCount={2}, Thread={3}&quot;, Task.CurrentId, i, tickCount, Thread.CurrentThread.ManagedThreadId)\n\n                                                     Return tickCount\n                                                 End Function\n\n        &#39; Construct started tasks\n        For i As Integer = 0 To 9\n            Dim index As Integer = i\n            tasks.Add(Task(Of Integer).Factory.StartNew(action, index))\n        Next\n\n        Try\n            &#39; Wait for all the tasks to finish.\n            Task.WaitAll(tasks.ToArray())\n\n            &#39; We should never get to this point\n            Console.WriteLine(&quot;WaitAll() has not thrown exceptions. THIS WAS NOT EXPECTED.&quot;)\n        Catch e As AggregateException\n            Console.WriteLine(vbLf &amp; &quot;The following exceptions have been thrown by WaitAll(): (THIS WAS EXPECTED)&quot;)\n            For j As Integer = 0 To e.InnerExceptions.Count - 1\n                Console.WriteLine(vbLf &amp; &quot;-------------------------------------------------&quot; &amp; vbLf &amp; &quot;{0}&quot;, e.InnerExceptions(j).ToString())\n            Next\n        End Try\n    End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     Task=1, i=0, TickCount=1203822250, Thread=3\n&#39;     Task=2, i=1, TickCount=1203822359, Thread=4\n&#39;     Task=7, i=6, TickCount=1203823484, Thread=3\n&#39;     Task=8, i=7, TickCount=1203823890, Thread=4\n&#39;     Task=9, i=8, TickCount=1203824296, Thread=3\n&#39;     Task=10, i=9, TickCount=1203824796, Thread=4\n&#39;     \n&#39;     The following exceptions have been thrown by WaitAll(): (THIS WAS EXPECTED)\n&#39;     \n&#39;     -------------------------------------------------\n&#39;     System.InvalidOperationException: SIMULATED EXCEPTION\n&#39;        at Example.&lt;Main&gt;b__0(Object obj)\n&#39;        at System.Threading.Tasks.Task`1.InnerInvoke()\n&#39;        at System.Threading.Tasks.Task.Execute()\n&#39;     \n&#39;     -------------------------------------------------\n&#39;     System.InvalidOperationException: SIMULATED EXCEPTION\n&#39;        at Example.&lt;Main&gt;b__0(Object obj)\n&#39;        at System.Threading.Tasks.Task`1.InnerInvoke()\n&#39;        at System.Threading.Tasks.Task.Execute()\n&#39;     \n&#39;     -------------------------------------------------\n&#39;     System.InvalidOperationException: SIMULATED EXCEPTION\n&#39;        at Example.&lt;Main&gt;b__0(Object obj)\n&#39;        at System.Threading.Tasks.Task`1.InnerInvoke()\n&#39;        at System.Threading.Tasks.Task.Execute()\n&#39;     \n&#39;     -------------------------------------------------\n&#39;     System.InvalidOperationException: SIMULATED EXCEPTION\n&#39;        at Example.&lt;Main&gt;b__0(Object obj)\n&#39;        at System.Threading.Tasks.Task`1.InnerInvoke()\n&#39;        at System.Threading.Tasks.Task.Execute()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAll(Task[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for all of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified number of milliseconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1) to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if all of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances completed execution within the allotted time; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>One or more of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in <code>tasks</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>At least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances was canceled. If a task was canceled, the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> contains an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> in its <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of at least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.  </p>\n<p> -or-  </p>\n<p> The <code>tasks</code> argument is an empty array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAll(Task[],CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for all of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution unless the wait is cancelled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> to observe while waiting for the tasks to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <code>cancellationToken</code> was canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>At least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances was canceled. If a task was canceled, the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> contains an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> in its <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of at least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.  </p>\n<p> -or-  </p>\n<p> The <code>tasks</code> argument is an empty array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>One or more of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in <code>tasks</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>cancellationToken</code> argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> as noted above.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAll(Task[],TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for all of the provided cancellable <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified time interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents the number of milliseconds to wait, or a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents -1 milliseconds to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if all of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances completed execution within the allotted time; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>One or more of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in <code>tasks</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>At least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances was canceled. If a task was canceled, the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> contains an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> in its <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of at least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  </p>\n<p> -or-  </p>\n<p> <code>timeout</code> is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.  </p>\n<p> -or-  </p>\n<p> The <code>tasks</code> argument is an empty array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAll(Task[],Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for all of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1) to wait indefinitely.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> to observe while waiting for the tasks to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if all of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances completed execution within the allotted time; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>One or more of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in <code>tasks</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>At least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances was canceled. If a task was canceled, the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> contains an <a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a> in its <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of at least one of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.  </p>\n<p> -or-  </p>\n<p> The <code>tasks</code> argument is an empty array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <code>cancellationToken</code> was canceled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>cancellationToken</code> argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> noted above.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAny(Task[])</div>        \r\n          </div>\r\n    \r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WaitAny (System.Threading.Tasks.Task[] tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object in the <code>tasks</code> array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds. The WaitAny method then waits for any of the tasks to complete. The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.WaitAny#1\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Task[] tasks = new Task[5];\n      for (int ctr = 0; ctr &lt;= 4; ctr++) {\n         int factor = ctr;\n         tasks[ctr] = Task.Run(() =&gt; Thread.Sleep(factor * 250 + 50));\n      }\n      int index = Task.WaitAny(tasks);\n      Console.WriteLine(&quot;Wait ended because task #{0} completed.&quot;,\n                        tasks[index].Id);\n      Console.WriteLine(&quot;<br>Current Status of Tasks:&quot;);\n      foreach (var t in tasks)\n         Console.WriteLine(&quot;   Task {0}: {1}&quot;, t.Id, t.Status);\n   }\n}\n// The example displays output like the following:\n//       Wait ended because task #1 completed.\n//\n//       Current Status of Tasks:\n//          Task 1: RanToCompletion\n//          Task 2: Running\n//          Task 3: Running\n//          Task 4: Running\n//          Task 5: Running\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.WaitAny#1\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim tasks(4) As Task\n      For ctr As Integer = 0 To 4\n         Dim factor As Integer = ctr\n         tasks(ctr) = Task.Run(Sub() Thread.Sleep(factor * 250 + 50))\n      Next\n      Dim index As Integer = Task.WaitAny(tasks)\n\n      Console.WriteLine(&quot;Wait ended because task #{0} completed.&quot;,\n                        tasks(index).Id)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current Status of Tasks:&quot;)\n      For Each t In tasks\n         Console.WriteLine(&quot;   Task {0}: {1}&quot;, t.Id, t.Status)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Wait ended because task #1 completed.\n&#39;\n&#39;       Current Status of Tasks:\n&#39;          Task 1: RanToCompletion\n&#39;          Task 2: Running\n&#39;          Task 3: Running\n&#39;          Task 4: Running\n&#39;          Task 5: Running\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAny(Task[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified number of milliseconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1) to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAny(Task[],CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution unless the wait is cancelled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> to observe while waiting for a task to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the completed task in the <code>tasks</code> array argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <code>cancellationToken</code> was canceled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAny(Task[],TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified time interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents the number of milliseconds to wait, or a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents -1 milliseconds to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  </p>\n<p> -or-  </p>\n<p> <code>timeout</code> is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Int32_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WaitAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitAny(Task[],Int32,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Waits for any of the provided <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instances on which to wait.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1) to wait indefinitely.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Threading.Tasks.TaskFactory.CancellationToken*</span> to observe while waiting for a task to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument contains a null element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <code>cancellationToken</code> was canceled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WhenAll_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WhenAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhenAll(IEnumerable&lt;Task&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that will complete when all of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in an enumerable collection have completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tasks to wait on for completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the completion of all of the supplied tasks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> collection contained a <code>null</code> task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The overloads of the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_\" data-linktype=\"relative-path\">WhenAll</a> method that return a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The call to WhenAll method does not block the calling thread.  </p>\n</div>\n<p> If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  </p>\n<p> If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<p> If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<p> If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state before it&#39;s returned to the caller.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a set of tasks that ping the URLs in an array. The tasks are stored in a <code>List&lt;Task&gt;</code> collection that is passed to the WhenAll method. After the call to the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method ensures that all threads have completed, the example examines the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property to determine whether any tasks have faulted.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.WhenAll#4\">using System;\nusing System.Collections.Generic;\nusing System.Net.NetworkInformation;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int failed = 0;\n      var tasks = new List&lt;Task&gt;();\n      String[] urls = { &quot;www.adatum.com&quot;, &quot;www.cohovineyard.com&quot;,\n                        &quot;www.cohowinery.com&quot;, &quot;www.northwindtraders.com&quot;,\n                        &quot;www.contoso.com&quot; };\n      \n      foreach (var value in urls) {\n         var url = value;\n         tasks.Add(Task.Run( () =&gt; { var png = new Ping();\n                                     try {\n                                        var reply = png.Send(url);\n                                        if (! (reply.Status == IPStatus.Success)) {\n                                           Interlocked.Increment(ref failed);\n                                           throw new TimeoutException(&quot;Unable to reach &quot; + url + &quot;.&quot;);\n                                        }\n                                     }\n                                     catch (PingException) {\n                                        Interlocked.Increment(ref failed);\n                                        throw;\n                                     }\n                                   }));\n      }\n      Task t = Task.WhenAll(tasks);\n      try {\n         t.Wait();\n      }\n      catch {}   \n\n      if (t.Status == TaskStatus.RanToCompletion)\n         Console.WriteLine(&quot;All ping attempts succeeded.&quot;);\n      else if (t.Status == TaskStatus.Faulted)\n         Console.WriteLine(&quot;{0} ping attempts failed&quot;, failed);      \n   }\n}\n// The example displays output like the following:\n//       5 ping attempts failed\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.WhenAll#4\">Imports System.Collections.Generic\nImports System.Net.NetworkInformation\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim failed As Integer = 0\n      Dim tasks As New List(Of Task)()\n      Dim urls() As String = { &quot;www.adatum.com&quot;, &quot;www.cohovineyard.com&quot;,\n                              &quot;www.cohowinery.com&quot;, &quot;www.northwindtraders.com&quot;,\n                              &quot;www.contoso.com&quot; }\n      \n      For Each value In urls\n         Dim url As String = value\n         tasks.Add(Task.Run( Sub()\n                                Dim png As New Ping()\n                                Try\n                                   Dim reply = png.Send(url)\n                                   If Not reply.Status = IPStatus.Success Then\n                                      Interlocked.Increment(failed)\n                                      Throw New TimeoutException(&quot;Unable to reach &quot; + url + &quot;.&quot;)\n                                   End If\n                                   Catch e As PingException\n                                      Interlocked.Increment(failed)\n                                      Throw\n                                   End Try\n                             End Sub))\n      Next\n      Dim t As Task = Task.WhenAll(tasks)\n      Try\n         t.Wait()\n      Catch\n      End Try   \n\n      If t.Status = TaskStatus.RanToCompletion\n         Console.WriteLine(&quot;All ping attempts succeeded.&quot;)\n      ElseIf t.Status = TaskStatus.Faulted\n         Console.WriteLine(&quot;{0} ping attempts failed&quot;, failed)      \n      End If\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     5 ping attempts failed\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WhenAll_System_Threading_Tasks_Task___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WhenAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhenAll(Task[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that will complete when all of the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> objects in an array have completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task WhenAll (System.Threading.Tasks.Task[] tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tasks to wait on for completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task that represents the completion of all of the supplied tasks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> array contained a <code>null</code> task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The overloads of the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_\" data-linktype=\"relative-path\">WhenAll</a> method that return a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The call to WhenAll method does not block the calling thread.  </p>\n</div>\n<p> If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  </p>\n<p> If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<p> If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<p> If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state before it&#39;s returned to the caller.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a set of tasks that ping the URLs in an array. The tasks are stored in a <code>List&lt;Task&gt;</code> collection that is converted to an array and passed to the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task__\" data-linktype=\"relative-path\">WhenAll(IEnumerable&lt;Task&gt;)</a> method. After the call to the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method ensures that all threads have completed, the example examines the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property to determine whether any tasks have faulted.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.WhenAll#3\">Imports System.Collections.Generic\nImports System.Net.NetworkInformation\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim failed As Integer = 0\n      Dim tasks As New List(Of Task)()\n      Dim urls() As String = { &quot;www.adatum.com&quot;, &quot;www.cohovineyard.com&quot;,\n                              &quot;www.cohowinery.com&quot;, &quot;www.northwindtraders.com&quot;,\n                              &quot;www.contoso.com&quot; }\n      \n      For Each value In urls\n         Dim url As String = value\n         tasks.Add(Task.Run( Sub()\n                                Dim png As New Ping()\n                                Try\n                                   Dim reply = png.Send(url)\n                                   If Not reply.Status = IPStatus.Success Then\n                                      Interlocked.Increment(failed)\n                                      Throw New TimeoutException(&quot;Unable to reach &quot; + url + &quot;.&quot;)\n                                   End If\n                                   Catch e As PingException\n                                      Interlocked.Increment(failed)\n                                      Throw\n                                   End Try\n                             End Sub))\n      Next\n      Dim t As Task = Task.WhenAll(tasks.ToArray())\n      Try\n         t.Wait()\n      Catch\n      End Try   \n\n      If t.Status = TaskStatus.RanToCompletion\n         Console.WriteLine(&quot;All ping attempts succeeded.&quot;)\n      ElseIf t.Status = TaskStatus.Faulted\n         Console.WriteLine(&quot;{0} ping attempts failed&quot;, failed)      \n      End If\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     5 ping attempts failed\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.WhenAll#3\">using System;\nusing System.Collections.Generic;\nusing System.Net.NetworkInformation;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int failed = 0;\n      var tasks = new List&lt;Task&gt;();\n      String[] urls = { &quot;www.adatum.com&quot;, &quot;www.cohovineyard.com&quot;,\n                        &quot;www.cohowinery.com&quot;, &quot;www.northwindtraders.com&quot;,\n                        &quot;www.contoso.com&quot; };\n      \n      foreach (var value in urls) {\n         var url = value;\n         tasks.Add(Task.Run( () =&gt; { var png = new Ping();\n                                     try {\n                                        var reply = png.Send(url);\n                                        if (! (reply.Status == IPStatus.Success)) {\n                                           Interlocked.Increment(ref failed);\n                                           throw new TimeoutException(&quot;Unable to reach &quot; + url + &quot;.&quot;);\n                                        }\n                                     }\n                                     catch (PingException) {\n                                        Interlocked.Increment(ref failed);\n                                        throw;\n                                     }\n                                   }));\n      }\n      Task t = Task.WhenAll(tasks.ToArray());\n      try {\n         t.Wait();\n      }\n      catch {}   \n\n      if (t.Status == TaskStatus.RanToCompletion)\n         Console.WriteLine(&quot;All ping attempts succeeded.&quot;);\n      else if (t.Status == TaskStatus.Faulted)\n         Console.WriteLine(&quot;{0} ping attempts failed&quot;, failed);      \n   }\n}\n// The example displays output like the following:\n//       5 ping attempts failed\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WhenAll__1_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task___0___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WhenAll_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhenAll&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that will complete when all of the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> objects in an enumerable collection have completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tasks to wait on for completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult[]</span>[]&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the completion of all of the supplied tasks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> collection contained a <code>null</code> task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The call to WhenAll(TResult) method does not block the calling thread. However, a call to the returned <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Result_\" data-linktype=\"relative-path\">Result</a> property does block the calling thread.  </p>\n<p> If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  </p>\n<p> If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<p> If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  The <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Result_\" data-linktype=\"relative-path\">Result</a> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task&#39;s <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Result_\" data-linktype=\"relative-path\">Result</a> property will return an <code>TResult[]</code> where <code>arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)</code>.  </p>\n<p> If the <code>tasks</code> argument contains no tasks, the returned task will immediately transition to a <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state before it&#39;s returned to the caller. The returned <code>TResult[]</code> will be an array of 0 elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean. The <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_Int32_\" data-linktype=\"relative-path\">Delay(Int32)</a> method is used to delay instantiation of the random number generators so that they are not created with identical seed values. The call to the WhenAll(TResult) method then returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> array that contains the mean computed by each task. These are then used to calculate the overall mean.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.WhenAll#1\">using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new List&lt;Task&lt;long&gt;&gt;();\n      for (int ctr = 1; ctr &lt;= 10; ctr++) {\n         int delayInterval = 18 * ctr;\n         tasks.Add(Task.Run(async () =&gt; { long total = 0;\n                                          await Task.Delay(delayInterval);\n                                          var rnd = new Random();\n                                          // Generate 1,000 random numbers.\n                                          for (int n = 1; n &lt;= 1000; n++)\n                                             total += rnd.Next(0, 1000);\n                                          return total; } ));\n      }\n      var continuation = Task.WhenAll(tasks);\n      try {\n         continuation.Wait();\n      }\n      catch (AggregateException)\n      { }\n   \n      if (continuation.Status == TaskStatus.RanToCompletion) {\n         long grandTotal = 0;\n         foreach (var result in continuation.Result) {\n            grandTotal += result;\n            Console.WriteLine(&quot;Mean: {0:N2}, n = 1,000&quot;, result/1000.0);\n         }\n   \n         Console.WriteLine(&quot;<br>Mean of Means: {0:N2}, n = 10,000&quot;,\n                           grandTotal/10000);\n      }\n      // Display information on faulted tasks.\n      else {\n         foreach (var t in tasks) {\n            Console.WriteLine(&quot;Task {0}: {1}&quot;, t.Id, t.Status);\n         }\n      }\n   }\n}\n// The example displays output like the following:\n//       Mean: 506.34, n = 1,000\n//       Mean: 504.69, n = 1,000\n//       Mean: 489.32, n = 1,000\n//       Mean: 505.96, n = 1,000\n//       Mean: 515.31, n = 1,000\n//       Mean: 499.94, n = 1,000\n//       Mean: 496.92, n = 1,000\n//       Mean: 508.58, n = 1,000\n//       Mean: 494.88, n = 1,000\n//       Mean: 493.53, n = 1,000\n//\n//       Mean of Means: 501.55, n = 10,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.WhenAll#1\">Imports System.Collections.Generic\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim tasks As New List(Of Task(Of Long))()\n      For ctr As Integer = 1 To 10\n         Dim delayInterval As Integer = 18 * ctr\n         tasks.Add(Task.Run(Async Function()\n                               Dim total As Long = 0\n                               Await Task.Delay(delayInterval)\n                               Dim rnd As New Random()\n                               &#39; Generate 1,000 random numbers.\n                               For n As Integer = 1 To 1000\n                                  total += rnd.Next(0, 1000)\n                               Next\n                               Return total\n                            End Function))\n      Next\n      Dim continuation = Task.WhenAll(tasks)\n      Try\n         continuation.Wait()\n      Catch ae As AggregateException\n      End Try\n      \n      If continuation.Status = TaskStatus.RanToCompletion Then\n         Dim grandTotal As Long = 0\n         For Each result in continuation.Result\n            grandTotal += result\n            Console.WriteLine(&quot;Mean: {0:N2}, n = 1,000&quot;, result/1000)\n         Next\n         Console.WriteLine()\n         Console.WriteLine(&quot;Mean of Means: {0:N2}, n = 10,000&quot;,\n                           grandTotal/10000)\n      &#39; Display information on faulted tasks.\n      Else \n         For Each t In tasks\n            Console.WriteLine(&quot;Task {0}: {1}&quot;, t.Id, t.Status)\n         Next\n      End If\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Mean: 506.34, n = 1,000\n&#39;       Mean: 504.69, n = 1,000\n&#39;       Mean: 489.32, n = 1,000\n&#39;       Mean: 505.96, n = 1,000\n&#39;       Mean: 515.31, n = 1,000\n&#39;       Mean: 499.94, n = 1,000\n&#39;       Mean: 496.92, n = 1,000\n&#39;       Mean: 508.58, n = 1,000\n&#39;       Mean: 494.88, n = 1,000\n&#39;       Mean: 493.53, n = 1,000\n&#39;\n&#39;       Mean of Means: 501.55, n = 10,000\n</code></pre><p> In this case, the ten individual tasks are stored in a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object. <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> implements the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WhenAll__1_System_Threading_Tasks_Task___0____\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WhenAll_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhenAll&lt;TResult&gt;(Task&lt;TResult&gt;[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that will complete when all of the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> objects in an array have completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tasks to wait on for completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult[]</span>[]&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the completion of all of the supplied tasks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> array contained a <code>null</code> task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The call to WhenAll(TResult) method does not block the calling thread. However, a call to the returned <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Result_\" data-linktype=\"relative-path\">Result</a> property does block the calling thread.  </p>\n<p> If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  </p>\n<p> If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  </p>\n<p> If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state.  The <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Result_\" data-linktype=\"relative-path\">Result</a> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task&#39;s <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Result_\" data-linktype=\"relative-path\">Result</a> will return an <code>TResult[]</code> where <code>arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)</code>.  </p>\n<p> If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <a class=\"xref\" href=\"system.threading.tasks.taskstatus\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskStatus</a> state before it&#39;s returned to the caller.  The returned <code>TResult[]</code> will be an array of 0 elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean. In this case, the ten individual tasks are stored in a <code>Task&lt;Int64&gt;</code> array.  The <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_Int32_\" data-linktype=\"relative-path\">Delay(Int32)</a> method is used to delay instantiation of the random number generators so that they are not created with identical seed values. The call to the WhenAll(TResult) method then returns an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> array that contains the mean computed by each task. These are then used to calculate the overall mean.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.WhenAll#2\">using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new Task&lt;long&gt;[10];\n      for (int ctr = 1; ctr &lt;= 10; ctr++) {\n         int delayInterval = 18 * ctr;\n         tasks[ctr - 1] = Task.Run(async () =&gt; { long total = 0;\n                                                 await Task.Delay(delayInterval);\n                                                 var rnd = new Random();\n                                                 // Generate 1,000 random numbers.\n                                                 for (int n = 1; n &lt;= 1000; n++)\n                                                    total += rnd.Next(0, 1000);\n\n                                                 return total; } );\n      }\n      var continuation = Task.WhenAll(tasks);\n      try {\n         continuation.Wait();\n      }\n      catch (AggregateException)\n      {}\n   \n      if (continuation.Status == TaskStatus.RanToCompletion) {\n         long grandTotal = 0;\n         foreach (var result in continuation.Result) {\n            grandTotal += result;\n            Console.WriteLine(&quot;Mean: {0:N2}, n = 1,000&quot;, result/1000.0);\n         }\n   \n         Console.WriteLine(&quot;<br>Mean of Means: {0:N2}, n = 10,000&quot;,\n                           grandTotal/10000);\n      }\n      // Display information on faulted tasks.\n      else { \n         foreach (var t in tasks)\n            Console.WriteLine(&quot;Task {0}: {1}&quot;, t.Id, t.Status);\n      }\n   \n   }\n}\n// The example displays output like the following:\n//       Mean: 506.38, n = 1,000\n//       Mean: 501.01, n = 1,000\n//       Mean: 505.36, n = 1,000\n//       Mean: 492.00, n = 1,000\n//       Mean: 508.36, n = 1,000\n//       Mean: 503.99, n = 1,000\n//       Mean: 504.95, n = 1,000\n//       Mean: 508.58, n = 1,000\n//       Mean: 490.23, n = 1,000\n//       Mean: 501.59, n = 1,000\n//\n//       Mean of Means: 502.00, n = 10,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.WhenAll#2\">Imports System.Collections.Generic\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim tasks(9) As Task(Of Long)\n      For ctr As Integer = 1 To 10\n         Dim delayInterval As Integer = 18 * ctr\n         tasks(ctr - 1) =Task.Run(Async Function()\n                                     Dim total As Long = 0\n                                     Await Task.Delay(delayInterval)\n                                     Dim rnd As New Random()\n                                     &#39; Generate 1,000 random numbers.\n                                     For n As Integer = 1 To 1000\n                                        total += rnd.Next(0, 1000)\n                                     Next\n                                     Return total\n                                  End Function)\n      Next\n      Dim continuation = Task.WhenAll(tasks)\n      Try\n         continuation.Wait()\n      Catch ae As AggregateException\n      End Try\n         \n      If continuation.Status = TaskStatus.RanToCompletion Then\n         Dim grandTotal As Long = 0\n         For Each result in continuation.Result\n            grandTotal += result\n            Console.WriteLine(&quot;Mean: {0:N2}, n = 1,000&quot;, result/1000)\n         Next\n         Console.WriteLine()\n         Console.WriteLine(&quot;Mean of Means: {0:N2}, n = 10,000&quot;,\n                           grandTotal/10000)\n      &#39; Display information on faulted tasks.\n      Else \n         For Each t In tasks\n            Console.WriteLine(&quot;Task {0}: {1}&quot;, t.Id, t.Status)\n         Next\n      End If\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Mean: 506.38, n = 1,000\n&#39;       Mean: 501.01, n = 1,000\n&#39;       Mean: 505.36, n = 1,000\n&#39;       Mean: 492.00, n = 1,000\n&#39;       Mean: 508.36, n = 1,000\n&#39;       Mean: 503.99, n = 1,000\n&#39;       Mean: 504.95, n = 1,000\n&#39;       Mean: 508.58, n = 1,000\n&#39;       Mean: 490.23, n = 1,000\n&#39;       Mean: 501.59, n = 1,000\n&#39;\n&#39;       Mean of Means: 502.00, n = 10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WhenAny_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WhenAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhenAny(IEnumerable&lt;Task&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tasks to wait on for completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the completion of one of the supplied tasks.  The return task&#39;s Result is the task that completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> array contained a null task, or was empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the <code>RanToCompletion</code> state  with its Result set to the first task to complete.  This is true even if the first task to complete ended in the <code>Canceled</code> or <code>Faulted</code> state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WhenAny_System_Threading_Tasks_Task___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WhenAny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhenAny(Task[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Threading.Tasks.Task[] tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tasks to wait on for completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the completion of one of the supplied tasks.  The return task&#39;s Result is the task that completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument was null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> array contained a null task, or was empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the <code>RanToCompletion</code> state   with its <code>Result</code> set to the first task to complete.  This is true even if the first task to complete ended in the <code>Canceled</code> or <code>Faulted</code> state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WhenAny__1_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task___0___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WhenAny_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhenAny&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tasks to wait on for completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the completion of one of the supplied tasks.  The return task&#39;s Result is the task that completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument was <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> array contained a null task, or was empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_WhenAny__1_System_Threading_Tasks_Task___0____\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_WhenAny_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WhenAny&lt;TResult&gt;(Task&lt;TResult&gt;[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tasks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The tasks to wait on for completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>A task that represents the completion of one of the supplied tasks.  The return task&#39;s Result is the task that completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> argument was null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>tasks</code> array contained a null task, or was empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_Yield\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_Yield_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Yield()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an awaitable task that asynchronously yields back to the current context when awaited.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Runtime.CompilerServices.YieldAwaitable Yield ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.yieldawaitable\" data-linktype=\"relative-path\">YieldAwaitable</a></div>\r\n                  </div>\r\n                  <p>A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use <code>await Task.Yield();</code> in an asynchronous method to force the method to complete asynchronously. If there is a current synchronization context (<a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a> object), this will post the remainder of the methodâ€™s execution back to that context. However, the context will decide how to prioritize this work relative to other work that may be pending. The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work. For this reason, do not rely on <code>await Task.Yield();</code> to keep a UI responsive.  For more information, see the entry <a href=\"http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx\" data-linktype=\"external\">Useful Abstractions Enabled with ContinueWith</a> in the Parallel Programming with .NET blog.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_System_IAsyncResult_AsyncWaitHandle\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_System_IAsyncResult_AsyncWaitHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IAsyncResult.AsyncWaitHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> that can be used to wait for the task to complete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> that can be used to wait for the task to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the wait functionality provided by <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> is preferable to using <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> for similar functionality. For more information, see the &quot;Waiting on Tasks&quot; section in <a href=\"../Topic/Task-based%20Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Task-based Asynchronous Programming</a> and <a href=\"../Topic/Using%20TPL%20with%20Other%20Asynchronous%20Patterns.md\" data-linktype=\"relative-path\">Using TPL with Other Asynchronous Patterns</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_System_IAsyncResult_CompletedSynchronously\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_System_IAsyncResult_CompletedSynchronously_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IAsyncResult.CompletedSynchronously</div>        \r\n          </div>\r\n    \r\n            <p>Gets an indication of whether the operation completed synchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.IAsyncResult.CompletedSynchronously { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operation completed synchronously; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Tasks.Task.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.Task.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.AsyncState\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.CompletedTask\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.ConfigureAwait\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.ContinueWith\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.ContinueWith&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.CreationOptions\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.CurrentId\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Delay\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Exception\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Factory\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.FromCanceled\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.FromCanceled&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.FromException\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.FromException&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.FromResult&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.GetAwaiter\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Id\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.IsCanceled\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.IsCompleted\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.IsFaulted\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Run\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Run&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.RunSynchronously\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Start\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Status\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.IAsyncResult.AsyncWaitHandle\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.IAsyncResult.CompletedSynchronously\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Wait\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.WaitAll\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.WaitAny\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.WhenAll\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.WhenAll&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.WhenAny\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.WhenAny&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task.Yield\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"baef49fe-df14-c10c-74c0-d9c8847d784e\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Threading.Tasks\\Task.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an asynchronous operation.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading.Tasks/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Tasks.Task\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Tasks.Task.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.Task.yml","open_to_public_contributors":true,"api_name":["System.Threading.Tasks.Task","System.Threading.Tasks.Task..ctor","System.Threading.Tasks.Task.AsyncState","System.Threading.Tasks.Task.CompletedTask","System.Threading.Tasks.Task.ConfigureAwait","System.Threading.Tasks.Task.ContinueWith","System.Threading.Tasks.Task.ContinueWith<TResult>","System.Threading.Tasks.Task.CreationOptions","System.Threading.Tasks.Task.CurrentId","System.Threading.Tasks.Task.Delay","System.Threading.Tasks.Task.Dispose","System.Threading.Tasks.Task.Exception","System.Threading.Tasks.Task.Factory","System.Threading.Tasks.Task.FromCanceled","System.Threading.Tasks.Task.FromCanceled<TResult>","System.Threading.Tasks.Task.FromException","System.Threading.Tasks.Task.FromException<TResult>","System.Threading.Tasks.Task.FromResult<TResult>","System.Threading.Tasks.Task.GetAwaiter","System.Threading.Tasks.Task.Id","System.Threading.Tasks.Task.IsCanceled","System.Threading.Tasks.Task.IsCompleted","System.Threading.Tasks.Task.IsFaulted","System.Threading.Tasks.Task.Run","System.Threading.Tasks.Task.Run<TResult>","System.Threading.Tasks.Task.RunSynchronously","System.Threading.Tasks.Task.Start","System.Threading.Tasks.Task.Status","System.Threading.Tasks.Task.IAsyncResult.AsyncWaitHandle","System.Threading.Tasks.Task.IAsyncResult.CompletedSynchronously","System.Threading.Tasks.Task.Wait","System.Threading.Tasks.Task.WaitAll","System.Threading.Tasks.Task.WaitAny","System.Threading.Tasks.Task.WhenAll","System.Threading.Tasks.Task.WhenAll<TResult>","System.Threading.Tasks.Task.WhenAny","System.Threading.Tasks.Task.WhenAny<TResult>","System.Threading.Tasks.Task.Yield"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Tasks.Task","System::Threading::Tasks::Task","System.Threading.Tasks.Task.#ctor","System::Threading::Tasks::Task::#ctor","System.Threading.Tasks.Task.AsyncState","System::Threading::Tasks::Task::AsyncState","System.Threading.Tasks.Task.CompletedTask","System::Threading::Tasks::Task::CompletedTask","System.Threading.Tasks.Task.ConfigureAwait","System::Threading::Tasks::Task::ConfigureAwait","System.Threading.Tasks.Task.ContinueWith","System::Threading::Tasks::Task::ContinueWith","System.Threading.Tasks.Task.ContinueWith``1","System::Threading::Tasks::Task::ContinueWith``1","System.Threading.Tasks.Task.CreationOptions","System::Threading::Tasks::Task::CreationOptions","System.Threading.Tasks.Task.CurrentId","System::Threading::Tasks::Task::CurrentId","System.Threading.Tasks.Task.Delay","System::Threading::Tasks::Task::Delay","System.Threading.Tasks.Task.Dispose","System::Threading::Tasks::Task::Dispose","System.Threading.Tasks.Task.Exception","System::Threading::Tasks::Task::Exception","System.Threading.Tasks.Task.Factory","System::Threading::Tasks::Task::Factory","System.Threading.Tasks.Task.FromCanceled","System::Threading::Tasks::Task::FromCanceled","System.Threading.Tasks.Task.FromCanceled``1","System::Threading::Tasks::Task::FromCanceled``1","System.Threading.Tasks.Task.FromException","System::Threading::Tasks::Task::FromException","System.Threading.Tasks.Task.FromException``1","System::Threading::Tasks::Task::FromException``1","System.Threading.Tasks.Task.FromResult``1","System::Threading::Tasks::Task::FromResult``1","System.Threading.Tasks.Task.GetAwaiter","System::Threading::Tasks::Task::GetAwaiter","System.Threading.Tasks.Task.Id","System::Threading::Tasks::Task::Id","System.Threading.Tasks.Task.IsCanceled","System::Threading::Tasks::Task::IsCanceled","System.Threading.Tasks.Task.IsCompleted","System::Threading::Tasks::Task::IsCompleted","System.Threading.Tasks.Task.IsFaulted","System::Threading::Tasks::Task::IsFaulted","System.Threading.Tasks.Task.Run","System::Threading::Tasks::Task::Run","System.Threading.Tasks.Task.Run``1","System::Threading::Tasks::Task::Run``1","System.Threading.Tasks.Task.RunSynchronously","System::Threading::Tasks::Task::RunSynchronously","System.Threading.Tasks.Task.Start","System::Threading::Tasks::Task::Start","System.Threading.Tasks.Task.Status","System::Threading::Tasks::Task::Status","System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle","System::Threading::Tasks::Task::System#IAsyncResult#AsyncWaitHandle","System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously","System::Threading::Tasks::Task::System#IAsyncResult#CompletedSynchronously","System.Threading.Tasks.Task.Wait","System::Threading::Tasks::Task::Wait","System.Threading.Tasks.Task.WaitAll","System::Threading::Tasks::Task::WaitAll","System.Threading.Tasks.Task.WaitAny","System::Threading::Tasks::Task::WaitAny","System.Threading.Tasks.Task.WhenAll","System::Threading::Tasks::Task::WhenAll","System.Threading.Tasks.Task.WhenAll``1","System::Threading::Tasks::Task::WhenAll``1","System.Threading.Tasks.Task.WhenAny","System::Threading::Tasks::Task::WhenAny","System.Threading.Tasks.Task.WhenAny``1","System::Threading::Tasks::Task::WhenAny``1","System.Threading.Tasks.Task.Yield","System::Threading::Tasks::Task::Yield"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"baef49fe-df14-c10c-74c0-d9c8847d784e","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Threading.Tasks\\Task.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading.Tasks/Task.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Task class | Microsoft Docs","_op_ogTitle":"Task class","description":"Represents an asynchronous operation.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Threading.Tasks/toc.json","toc_rel":"_splitted/System.Threading.Tasks/toc.json","source_url":"","ms.assetid":"System.Threading.Tasks.Task","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.task","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.task","fileRelativePath":"System.Threading.Tasks.Task.html"},"themesRelativePathToOutputRoot":"_themes/"}