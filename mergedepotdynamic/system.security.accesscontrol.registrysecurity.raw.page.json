{"content":"    \r\n    <h1 id=\"System_Security_AccessControl_RegistrySecurity\">\r\n      <span class=\"lang-csharp\">RegistrySecurity</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the Windows access control security for a registry key. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity\" data-linktype=\"relative-path\">ObjectSecurity</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity\" data-linktype=\"relative-path\">CommonObjectSecurity</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity\" data-linktype=\"relative-path\">System.Security.AccessControl.NativeObjectSecurity</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RegistrySecurity</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_AddAccessRule_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">AddAccessRule(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_AddAuditRule_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">AddAuditRule(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_GetAccessRules_System_Boolean_System_Boolean_System_Type_\" data-linktype=\"relative-path\">GetAccessRules(Boolean,Boolean,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_GetAuditRules_System_Boolean_System_Boolean_System_Type_\" data-linktype=\"relative-path\">GetAuditRules(Boolean,Boolean,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_ModifyAccess_System_Security_AccessControl_AccessControlModification_System_Security_AccessControl_AccessRule_System_Boolean__\" data-linktype=\"relative-path\">ModifyAccess(AccessControlModification,AccessRule,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_ModifyAudit_System_Security_AccessControl_AccessControlModification_System_Security_AccessControl_AuditRule_System_Boolean__\" data-linktype=\"relative-path\">ModifyAudit(AccessControlModification,AuditRule,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAccessRule_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">RemoveAccessRule(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAccessRuleAll_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">RemoveAccessRuleAll(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAccessRuleSpecific_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">RemoveAccessRuleSpecific(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAuditRule_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">RemoveAuditRule(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAuditRuleAll_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">RemoveAuditRuleAll(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAuditRuleSpecific_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">RemoveAuditRuleSpecific(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_ResetAccessRule_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">ResetAccessRule(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_SetAccessRule_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">SetAccessRule(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_SetAuditRule_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">SetAuditRule(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity#System_Security_AccessControl_NativeObjectSecurity_Persist_System_Runtime_InteropServices_SafeHandle_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">Persist(SafeHandle,AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity#System_Security_AccessControl_NativeObjectSecurity_Persist_System_Runtime_InteropServices_SafeHandle_System_Security_AccessControl_AccessControlSections_System_Object_\" data-linktype=\"relative-path\">Persist(SafeHandle,AccessControlSections,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity#System_Security_AccessControl_NativeObjectSecurity_Persist_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">Persist(String,AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity#System_Security_AccessControl_NativeObjectSecurity_Persist_System_String_System_Security_AccessControl_AccessControlSections_System_Object_\" data-linktype=\"relative-path\">Persist(String,AccessControlSections,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AccessRulesModified\" data-linktype=\"relative-path\">AccessRulesModified</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AreAccessRulesCanonical\" data-linktype=\"relative-path\">AreAccessRulesCanonical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AreAccessRulesProtected\" data-linktype=\"relative-path\">AreAccessRulesProtected</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AreAuditRulesCanonical\" data-linktype=\"relative-path\">AreAuditRulesCanonical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AreAuditRulesProtected\" data-linktype=\"relative-path\">AreAuditRulesProtected</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AuditRulesModified\" data-linktype=\"relative-path\">AuditRulesModified</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetGroup_System_Type_\" data-linktype=\"relative-path\">GetGroup(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetOwner_System_Type_\" data-linktype=\"relative-path\">GetOwner(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorBinaryForm\" data-linktype=\"relative-path\">GetSecurityDescriptorBinaryForm()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorSddlForm_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">GetSecurityDescriptorSddlForm(AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GroupModified\" data-linktype=\"relative-path\">GroupModified</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_IsContainer\" data-linktype=\"relative-path\">IsContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_IsDS\" data-linktype=\"relative-path\">IsDS</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_IsSddlConversionSupported\" data-linktype=\"relative-path\">IsSddlConversionSupported()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_ModifyAccessRule_System_Security_AccessControl_AccessControlModification_System_Security_AccessControl_AccessRule_System_Boolean__\" data-linktype=\"relative-path\">ModifyAccessRule(AccessControlModification,AccessRule,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_ModifyAuditRule_System_Security_AccessControl_AccessControlModification_System_Security_AccessControl_AuditRule_System_Boolean__\" data-linktype=\"relative-path\">ModifyAuditRule(AccessControlModification,AuditRule,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_OwnerModified\" data-linktype=\"relative-path\">OwnerModified</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_Persist_System_Boolean_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">Persist(Boolean,String,AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_PurgeAccessRules_System_Security_Principal_IdentityReference_\" data-linktype=\"relative-path\">PurgeAccessRules(IdentityReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_PurgeAuditRules_System_Security_Principal_IdentityReference_\" data-linktype=\"relative-path\">PurgeAuditRules(IdentityReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_ReadLock\" data-linktype=\"relative-path\">ReadLock()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_ReadUnlock\" data-linktype=\"relative-path\">ReadUnlock()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetAccessRuleProtection_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">SetAccessRuleProtection(Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetAuditRuleProtection_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">SetAuditRuleProtection(Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetGroup_System_Security_Principal_IdentityReference_\" data-linktype=\"relative-path\">SetGroup(IdentityReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetOwner_System_Security_Principal_IdentityReference_\" data-linktype=\"relative-path\">SetOwner(IdentityReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorBinaryForm_System_Byte___\" data-linktype=\"relative-path\">SetSecurityDescriptorBinaryForm(Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorBinaryForm_System_Byte___System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">SetSecurityDescriptorBinaryForm(Byte[],AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_System_String_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm(String,AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_WriteLock\" data-linktype=\"relative-path\">WriteLock()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_WriteUnlock\" data-linktype=\"relative-path\">WriteUnlock()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A RegistrySecurity object specifies access rights for a registry key, and also specifies how access attempts are audited. Access rights to the registry key are expressed as rules, with each access rule represented by a <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> object. Each auditing rule is represented by a <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> object.  </p>\n<p> This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> or <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> object might represent more than one ACE.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.  </p>\n</div>\n<p> The RegistrySecurity, <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a>, and <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:  </p>\n<ul>\n<li><p>Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new RegistrySecurity object always starts with an empty DACL, which denies all access for all users.  </p>\n</li>\n<li><p>Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. RegistrySecurity objects maintain the correct order internally.  </p>\n</li>\n<li><p>Manipulating security descriptor flags, which should be under resource manager control only.  </p>\n</li>\n<li><p>Creating invalid combinations of ACE flags.  </p>\n</li>\n<li><p>Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.  </p>\n</li>\n<li><p>Inserting meaningless ACEs into ACLs.  </p>\n<p>The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:  </p>\n</li>\n<li><p>Low-level tasks that are normally performed by the resource manager.  </p>\n</li>\n<li><p>Adding or removing access control entries in ways that do not maintain the canonical ordering.  </p>\n<p>To modify Windows access control security for a registry key, use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to get the RegistrySecurity object. Modify the security object by adding and removing rules, and then use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method to reattach it.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Changes you make to a RegistrySecurity object do not affect the access levels of the registry key until you call the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method to assign the altered security object to the registry key.  </p>\n</div>\n<p> To copy access control security from one registry key to another, use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to get a RegistrySecurity object representing the access and audit rules for the first registry key, and then use the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method to assign those rules to the second registry key. You can also assign the rules to a second registry key with an <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_OpenSubKey_\" data-linktype=\"relative-path\">OpenSubKey</a> or <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_CreateSubKey_\" data-linktype=\"relative-path\">CreateSubKey</a> method that takes a RegistrySecurity object parameter.  </p>\n<p> Users with an investment in the security descriptor definition language (SDDL) can use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm</a> method to set access rules for a registry key, and the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorSddlForm</a> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity__ctor\" data-linktype=\"self-bookmark\">RegistrySecurity()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> class with default values.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_AccessRightType\" data-linktype=\"self-bookmark\">AccessRightType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the enumeration type that the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> class uses to represent access rights.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_AccessRuleType\" data-linktype=\"self-bookmark\">AccessRuleType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type that the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> class uses to represent access rules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_AuditRuleType\" data-linktype=\"self-bookmark\">AuditRuleType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type that the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> class uses to represent audit rules.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_AccessRuleFactory_System_Security_Principal_IdentityReference_System_Int32_System_Boolean_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AccessControlType_\" data-linktype=\"self-bookmark\">AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_AddAccessRule_System_Security_AccessControl_RegistryAccessRule_\" data-linktype=\"self-bookmark\">AddAccessRule(RegistryAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_AddAuditRule_System_Security_AccessControl_RegistryAuditRule_\" data-linktype=\"self-bookmark\">AddAuditRule(RegistryAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_AuditRuleFactory_System_Security_Principal_IdentityReference_System_Int32_System_Boolean_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AuditFlags_\" data-linktype=\"self-bookmark\">AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_RemoveAccessRule_System_Security_AccessControl_RegistryAccessRule_\" data-linktype=\"self-bookmark\">RemoveAccessRule(RegistryAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an access control rule with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_RemoveAccessRuleAll_System_Security_AccessControl_RegistryAccessRule_\" data-linktype=\"self-bookmark\">RemoveAccessRuleAll(RegistryAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for all access control rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule and, if found, removes them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_RemoveAccessRuleSpecific_System_Security_AccessControl_RegistryAccessRule_\" data-linktype=\"self-bookmark\">RemoveAccessRuleSpecific(RegistryAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_RemoveAuditRule_System_Security_AccessControl_RegistryAuditRule_\" data-linktype=\"self-bookmark\">RemoveAuditRule(RegistryAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_RemoveAuditRuleAll_System_Security_AccessControl_RegistryAuditRule_\" data-linktype=\"self-bookmark\">RemoveAuditRuleAll(RegistryAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_RemoveAuditRuleSpecific_System_Security_AccessControl_RegistryAuditRule_\" data-linktype=\"self-bookmark\">RemoveAuditRuleSpecific(RegistryAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_ResetAccessRule_System_Security_AccessControl_RegistryAccessRule_\" data-linktype=\"self-bookmark\">ResetAccessRule(RegistryAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all access control rules with the same user as the specified rule, regardless of <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, and then adds the specified rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_SetAccessRule_System_Security_AccessControl_RegistryAccessRule_\" data-linktype=\"self-bookmark\">SetAccessRule(RegistryAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all access control rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule, and then adds the specified rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_RegistrySecurity_SetAuditRule_System_Security_AccessControl_RegistryAuditRule_\" data-linktype=\"self-bookmark\">SetAuditRule(RegistryAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all audit rules with the same user as the specified rule, regardless of the <a class=\"xref\" href=\"system.security.accesscontrol.auditflags\" data-linktype=\"relative-path\">AuditFlags</a> value, and then adds the specified rule.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity__ctor\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegistrySecurity()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> class with default values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RegistrySecurity ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A new <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_AccessRightType\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_AccessRightType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessRightType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the enumeration type that the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> class uses to represent access rights.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type AccessRightType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes that derive from the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity\" data-linktype=\"relative-path\">ObjectSecurity</a> class override the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AccessRightType_\" data-linktype=\"relative-path\">AccessRightType</a> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_AccessRuleType\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_AccessRuleType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessRuleType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type that the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> class uses to represent access rules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type AccessRuleType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes that derive from the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity\" data-linktype=\"relative-path\">ObjectSecurity</a> class override the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AccessRuleType_\" data-linktype=\"relative-path\">AccessRuleType</a> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_AuditRuleType\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_AuditRuleType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuditRuleType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type that the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> class uses to represent audit rules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type AuditRuleType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes that derive from the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity\" data-linktype=\"relative-path\">ObjectSecurity</a> class override the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AuditRuleType_\" data-linktype=\"relative-path\">AuditRuleType</a> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_AccessRuleFactory_System_Security_Principal_IdentityReference_System_Int32_System_Boolean_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AccessControlType_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_AccessRuleFactory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>identityReference</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.identityreference\" data-linktype=\"relative-path\">IdentityReference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.security.principal.identityreference\" data-linktype=\"relative-path\">IdentityReference</a> that identifies the user or group the rule applies to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>accessMask</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> values specifying the access rights to allow or deny, cast to an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isInherited</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether the rule is inherited.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inheritanceFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a> values specifying how the rule is inherited by subkeys.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propagationFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.propagationflags\" data-linktype=\"relative-path\">PropagationFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.propagationflags\" data-linktype=\"relative-path\">PropagationFlags</a> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <code>inheritanceFlags</code> is <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> values specifying whether the rights are allowed or denied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accessrule\" data-linktype=\"relative-path\">AccessRule</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> object representing the specified rights for the specified user.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>type</code> specifies an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>identityReference</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>accessMask</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>identityReference</code> is neither of type <a class=\"xref\" href=\"system.security.principal.securityidentifier\" data-linktype=\"relative-path\">SecurityIdentifier</a>, nor of a type such as <a class=\"xref\" href=\"system.security.principal.ntaccount\" data-linktype=\"relative-path\">NTAccount</a> that can be converted to type <a class=\"xref\" href=\"system.security.principal.securityidentifier\" data-linktype=\"relative-path\">SecurityIdentifier</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The recommended way to create access control rules is to use the constructors of the <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Although you can specify the <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">System.Security.AccessControl.InheritanceFlags</a> flag, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a> flag. Finally, specifying the <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_AddAccessRule_System_Security_AccessControl_RegistryAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_AddAccessRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAccessRule(RegistryAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access control rule to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddAccessRule method searches for rules with the same user or group and the same <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> as <code>rule</code>. If none are found, <code>rule</code> is added. If a matching rule is found, the rights in <code>rule</code> are merged with the existing rule.  </p>\n<p> Rules cannot be merged if they have different inheritance flags. For example, if a user is allowed read access with no inheritance flags, and AddAccessRule is used to add a rule giving the user write access with inheritance for subkeys (<a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">System.Security.AccessControl.InheritanceFlags</a>), the two rules cannot be merged.  </p>\n<p> Rules with different <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> values are never merged.  </p>\n<p> Rules express rights in the most economical way. For example, if a user has <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a>, <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights, and you add a rule allowing <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights, the user has all the constituent parts of <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights. If you query the user&#39;s rights, you will see a rule containing <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights. Similarly, if you remove <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights, the other constituents of <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> rights will reappear.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates registry access rules and adds them to a <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object. Examples that attach security objects can be found in <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a>.  </p>\n</div>\n<p> A code example that demonstrates inheritance and propagation flags can be found in the <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.RegistrySecurity.AddAccessRule#1\">using System;\nusing Microsoft.Win32;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a string representing the current user.\n        string user = Environment.UserDomainName + &quot;\\\\&quot;\n            + Environment.UserName;\n\n        // Create a security object that grants no access.\n        RegistrySecurity mSec = new RegistrySecurity();\n\n        // Add a rule that grants the current user the \n        // right to read the key.\n        RegistryAccessRule rule = new RegistryAccessRule(user, \n            RegistryRights.ReadKey, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the \n        // right to change permissions on the Registry.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.ChangePermissions, \n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Add a rule that allows the current user the \n        // right to read permissions on the Registry. This \n        // rule is merged with the existing Allow rule.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.WriteKey, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(RegistrySecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach( RegistryAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)) )\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights);\n            Console.WriteLine();\n        }\n    }\n}\n\n/* This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: ReadKey\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: SetValue, CreateSubKey, ReadKey\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.RegistrySecurity.AddAccessRule#1\">Imports System\nImports Microsoft.Win32\nImports System.Security.AccessControl\nImports System.Security.Principal\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Create a string representing the current user.\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New RegistrySecurity()\n\n        &#39; Add a rule that grants the current user the \n        &#39; right to read the key.\n        Dim rule As New RegistryAccessRule(user, _\n            RegistryRights.ReadKey, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the \n        &#39; right to change permissions on the Registry.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.ChangePermissions, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Add a rule that allows the current user the \n        &#39; right to read permissions on the Registry. This \n        &#39; rule is merged with the existing Allow rule.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.WriteKey, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        ShowSecurity(mSec)\n\n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As RegistrySecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As RegistryAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: ReadKey\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: SetValue, CreateSubKey, ReadKey\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_AddAuditRule_System_Security_AccessControl_RegistryAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_AddAuditRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAuditRule(RegistryAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The audit rule to add. The user specified by this rule determines the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddAuditRule method searches for rules with the same user or group as <code>rule</code>. If none are found, <code>rule</code> is added. If a matching rule is found, the flags in <code>rule</code> are merged into the existing rule.  </p>\n<p> Rules cannot be merged if they have different inheritance flags. For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and AddAuditRule is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">System.Security.AccessControl.InheritanceFlags</a>), the two rules cannot be merged.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_AuditRuleFactory_System_Security_Principal_IdentityReference_System_Int32_System_Boolean_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AuditFlags_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_AuditRuleFactory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>identityReference</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.identityreference\" data-linktype=\"relative-path\">IdentityReference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.security.principal.identityreference\" data-linktype=\"relative-path\">IdentityReference</a> that identifies the user or group the rule applies to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>accessMask</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> values specifying the access rights to audit, cast to an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isInherited</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether the rule is inherited.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inheritanceFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a> values specifying how the rule is inherited by subkeys.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propagationFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.propagationflags\" data-linktype=\"relative-path\">PropagationFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.propagationflags\" data-linktype=\"relative-path\">PropagationFlags</a> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <code>inheritanceFlags</code> is <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.auditflags\" data-linktype=\"relative-path\">AuditFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.auditflags\" data-linktype=\"relative-path\">AuditFlags</a> values specifying whether to audit successful access, failed access, or both.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.auditrule\" data-linktype=\"relative-path\">AuditRule</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> object representing the specified audit rule for the specified user, with the specified flags. The return type of the method is the base class, <a class=\"xref\" href=\"system.security.accesscontrol.auditrule\" data-linktype=\"relative-path\">AuditRule</a>, but the return value can be cast safely to the derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>flags</code> specifies an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>identityReference</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>accessMask</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>identityReference</code> is neither of type <a class=\"xref\" href=\"system.security.principal.securityidentifier\" data-linktype=\"relative-path\">SecurityIdentifier</a>, nor of a type such as <a class=\"xref\" href=\"system.security.principal.ntaccount\" data-linktype=\"relative-path\">NTAccount</a> that can be converted to type <a class=\"xref\" href=\"system.security.principal.securityidentifier\" data-linktype=\"relative-path\">SecurityIdentifier</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The recommended way to create audit rules is to use the constructors of the <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Although you can specify the <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">System.Security.AccessControl.InheritanceFlags</a> flag, there is no point in doing so. For the purposes of audit control, the name/value pairs in a subkey are not separate objects. The audit rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a> flag. Finally, specifying the <a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_RemoveAccessRule_System_Security_AccessControl_RegistryAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_RemoveAccessRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAccessRule(RegistryAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an access control rule with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> that specifies the user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a compatible rule is found; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> is searched for a rule that has the same user and the same <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> value as <code>rule</code>. If no such rule is found, no action is taken, and the method returns <code>false</code>. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <code>rule</code>. If no compatible rule is found, no action is taken, and the method returns <code>false</code>. If a rule with compatible flags is found, the rights specified in <code>rule</code> are removed from the compatible rule, and the method returns <code>true</code>. If <code>rule</code> specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how the RemoveAccessRule method removes rights from a compatible rule, and how the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity#System_Security_AccessControl_RegistrySecurity_AddAccessRule_\" data-linktype=\"relative-path\">AddAccessRule</a> method merges rights with compatible rules.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object and adds a rule that allows the current user <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">System.Security.AccessControl.RegistryRights</a> rights. The example then creates a rule that grants the user <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">System.Security.AccessControl.RegistryRights</a>, with the same inheritance and propagation rights as the first rule, and uses the RemoveAccessRule method to remove this new rule from the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object. <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> is a constituent of <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a>, so it is removed from the compatible rule. The rules in the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object are displayed, showing the remaining constituents of <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a>.  </p>\n<p> The example code then calls the RemoveAccessRule method to merge the <a class=\"xref\" href=\"system.security.accesscontrol.registryrights\" data-linktype=\"relative-path\">RegistryRights</a> right back into the rule in the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object. The second example in this section attaches a security object, and so do the examples in <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a><a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1\">Option Explicit\nImports System\nImports System.Security.AccessControl\nImports System.Security.Principal\nImports System.Security\nImports Microsoft.Win32\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New RegistrySecurity()\n\n        &#39; Add a rule that grants the current user ReadKey\n        &#39; rights. ReadKey is a combination of four other \n        &#39; rights. The rule is inherited by all \n        &#39; contained subkeys.\n        Dim rule As New RegistryAccessRule(user, _\n            RegistryRights.ReadKey, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.None, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Create a rule that allows the current user only the \n        &#39; right to query the key/value pairs of a key, using  \n        &#39; the same inheritance and propagation flags as the\n        &#39; first rule. QueryValues is a constituent of \n        &#39; ReadKey, so when this rule is removed, using the \n        &#39; RemoveAccessRule method, ReadKey is broken into\n        &#39; its constituent parts.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.QueryValues, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.None, _\n            AccessControlType.Allow)\n        mSec.RemoveAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Add the second rule back. It merges with the \n        &#39; existing rule, so that the rule is now displayed\n        &#39; as ReadKey.\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As RegistrySecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As RegistryAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights)\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags)\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags)\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: EnumerateSubKeys, Notify, ReadPermissions\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: ReadKey\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1\">\nusing System;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\nusing System.Security;\nusing Microsoft.Win32;\n\npublic class Example\n{\n\n    public static void Main()\n    {\n\n        string user = Environment.UserDomainName + &quot;\\\\&quot;\n            + Environment.UserName;\n\n        // Create a security object that grants no access.\n        RegistrySecurity mSec = new RegistrySecurity();\n\n        // Add a rule that grants the current user ReadKey\n        // rights. ReadKey is a combination of four other \n        // rights. The rule is inherited by all \n        // contained subkeys.\n        RegistryAccessRule rule = new RegistryAccessRule(user, \n            RegistryRights.ReadKey, \n            InheritanceFlags.ContainerInherit, \n            PropagationFlags.None, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Create a rule that allows the current user only the \n        // right to query the key/value pairs of a key, using  \n        // the same inheritance and propagation flags as the\n        // first rule. QueryValues is a constituent of \n        // ReadKey, so when this rule is removed, using the \n        // RemoveAccessRule method, ReadKey is broken into\n        // its constituent parts.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.QueryValues, \n            InheritanceFlags.ContainerInherit, \n            PropagationFlags.None, \n            AccessControlType.Allow);\n        mSec.RemoveAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Add the second rule back. It merges with the \n        // existing rule, so that the rule is now displayed\n        // as ReadKey.\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(RegistrySecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach( RegistryAccessRule ar in security.GetAccessRules(true, true, typeof(NTAccount)) )\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights);\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags);\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags);\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited);\n            Console.WriteLine();\n        }\n    }\n}\n\n/* This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: EnumerateSubKeys, Notify, ReadPermissions\n Inheritance: ContainerInherit\n Propagation: None\n   Inherited? False\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: ReadKey\n Inheritance: ContainerInherit\n Propagation: None\n   Inherited? False\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_RemoveAccessRuleAll_System_Security_AccessControl_RegistryAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_RemoveAccessRuleAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAccessRuleAll(RegistryAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for all access control rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule and, if found, removes them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> that specifies the user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> is searched for rules that have the same user and the same <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> value as <code>rule</code>. Any rights, inheritance flags, or propagation flags specified by <code>rule</code> are ignored when performing this search. If no matching rules are found, no action is taken.  </p>\n<p> For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> object that specifies the user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">System.Security.AccessControl.AccessControlType</a>, with any arbitrary rights and flags, and passing that rule to the RemoveAccessRuleAll method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, ignoring rights and flags.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user to take ownership, and passes that rule to the RemoveAccessRuleAll method to remove the two rules that allow access.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object. See the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method and the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1\">Option Explicit\nImports System\nImports System.Security.AccessControl\nImports System.Security.Principal\nImports System.Security\nImports Microsoft.Win32\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New RegistrySecurity()\n\n        &#39; Add a rule that grants the current user the right\n        &#39; to read and enumerate the name/value pairs in a key, \n        &#39; to read its access and audit rules, to enumerate\n        &#39; its subkeys, to create subkeys, and to delete the key. \n        &#39; The rule is inherited by all contained subkeys.\n        &#39;\n        Dim rule As New RegistryAccessRule(user, _\n            RegistryRights.ReadKey Or RegistryRights.WriteKey _\n                Or RegistryRights.Delete, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.None, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that allows the current user the right\n        &#39; right to set the name/value pairs in a key. \n        &#39; This rule is inherited by contained subkeys, but\n        &#39; propagation flags limit it to immediate child \n        &#39; subkeys.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.ChangePermissions, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.InheritOnly Or PropagationFlags.NoPropagateInherit, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the right\n        &#39; to set the name/value pairs in a key. This rule\n        &#39; has no inheritance or propagation flags, so it \n        &#39; affects only the key itself.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.SetValue, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Create a rule that allows the current user the \n        &#39; right to change the ownership of the key, with\n        &#39; no inheritance or propagation flags. The rights\n        &#39; and flags are ignored by RemoveAccessRuleAll,\n        &#39; and all rules that allow access for the current\n        &#39; user are removed.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.TakeOwnership, _\n            AccessControlType.Allow)\n        mSec.RemoveAccessRuleAll(rule)\n\n        &#39; Show that all rules that allow access have been \n        &#39; removed.\n        ShowSecurity(mSec)\n\n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As RegistrySecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As RegistryAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights)\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags)\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags)\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: SetValue\n&#39; Inheritance: None\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: SetValue, CreateSubKey, Delete, ReadKey\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: ChangePermissions\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: NoPropagateInherit, InheritOnly\n&#39;   Inherited? False\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: SetValue\n&#39; Inheritance: None\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1\">\nusing System;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\nusing System.Security;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string user = Environment.UserDomainName + &quot;\\\\&quot;\n            + Environment.UserName;\n\n        // Create a security object that grants no access.\n        RegistrySecurity mSec = new RegistrySecurity();\n\n        // Add a rule that grants the current user the right\n        // to read and enumerate the name/value pairs in a key, \n        // to read its access and audit rules, to enumerate\n        // its subkeys, to create subkeys, and to delete the key. \n        // The rule is inherited by all contained subkeys.\n        //\n        RegistryAccessRule rule = new RegistryAccessRule(user, \n            RegistryRights.ReadKey | RegistryRights.WriteKey\n                | RegistryRights.Delete, \n            InheritanceFlags.ContainerInherit, \n            PropagationFlags.None, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that allows the current user the right\n        // right to set the name/value pairs in a key. \n        // This rule is inherited by contained subkeys, but\n        // propagation flags limit it to immediate child \n        // subkeys.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.ChangePermissions,\n            InheritanceFlags.ContainerInherit,\n            PropagationFlags.InheritOnly | PropagationFlags.NoPropagateInherit, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the right\n        // to set the name/value pairs in a key. This rule\n        // has no inheritance or propagation flags, so it \n        // affects only the key itself.\n        rule = new RegistryAccessRule(user,\n            RegistryRights.SetValue,\n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Create a rule that allows the current user the \n        // right to change the ownership of the key, with\n        // no inheritance or propagation flags. The rights\n        // and flags are ignored by RemoveAccessRuleAll,\n        // and all rules that allow access for the current\n        // user are removed.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.TakeOwnership, \n            AccessControlType.Allow);\n        mSec.RemoveAccessRuleAll(rule);\n\n        // Show that all rules that allow access have been \n        // removed.\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(RegistrySecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach( RegistryAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)) )\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights);\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags);\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags);\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited);\n            Console.WriteLine();\n        }\n    }\n}\n\n/* This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: SetValue\n Inheritance: None\n Propagation: None\n   Inherited? False\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: SetValue, CreateSubKey, Delete, ReadKey\n Inheritance: ContainerInherit\n Propagation: None\n   Inherited? False\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: ChangePermissions\n Inheritance: ContainerInherit\n Propagation: NoPropagateInherit, InheritOnly\n   Inherited? False\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: SetValue\n Inheritance: None\n Propagation: None\n   Inherited? False\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_RemoveAccessRuleSpecific_System_Security_AccessControl_RegistryAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_RemoveAccessRuleSpecific_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAccessRuleSpecific(RegistryAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The rule is removed only if it exactly matches <code>rule</code> in all details, including flags. Other rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> are not affected.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAccessRuleSpecific method cannot remove it.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that the RemoveAccessRuleSpecific method removes a rule only if it matches exactly.  </p>\n<p> The example creates two rules that allow different rights. The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first. The example calls the RemoveAccessRuleSpecific method, specifying the first rule, but because the rules are merged there is no rule that matches. The example then calls the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity#System_Security_AccessControl_RegistrySecurity_RemoveAccessRule_\" data-linktype=\"relative-path\">RemoveAccessRule</a> method to the remove the second rule from the merged rule, and finally calls the RemoveAccessRuleSpecific method to remove the first rule.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object. See the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method and the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1\">Option Explicit\nImports System\nImports System.Security.AccessControl\nImports System.Security.Principal\nImports System.Security\nImports Microsoft.Win32\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New RegistrySecurity()\n\n        &#39; Add a rule that grants the current user the right\n        &#39; to read and enumerate the name/value pairs in a key, \n        &#39; to read its access and audit rules, to enumerate\n        &#39; its subkeys, to create subkeys, and to delete the key. \n        &#39; The rule is inherited by all contained subkeys.\n        &#39;\n        Dim rule1 As New RegistryAccessRule(user, _\n            RegistryRights.ReadKey Or RegistryRights.WriteKey _\n                Or RegistryRights.Delete, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.None, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule1)\n\n        &#39; Add a rule that allows the current user the right\n        &#39; right to take ownership of a key, using the same \n        &#39; inheritance and propagation flags. This rule \n        &#39; merges with the first rule.\n        Dim rule2 As New RegistryAccessRule(user, _\n            RegistryRights.ChangePermissions, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.None, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule2)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Attempt to use RemoveRuleSpecific to remove the\n        &#39; first rule. The removal fails, because the rule\n        &#39; in the RegistrySecurity object has been altered.\n        mSec.RemoveAccessRuleSpecific(rule1)\n\n        &#39; Show that the rule was not removed.\n        ShowSecurity(mSec)\n\n        &#39; Use the RemoveAccessRule method to remove rule2,\n        &#39; and then use RemoveAccessRuleSpecific to remove\n        &#39; rule1.\n        mSec.RemoveAccessRule(rule2)\n        mSec.RemoveAccessRuleSpecific(rule1)\n\n        &#39; Show that the rules have been removed.\n        ShowSecurity(mSec)\n\n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As RegistrySecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As RegistryAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights)\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags)\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags)\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: SetValue, CreateSubKey, Delete, ReadKey, ChangePermissions\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: SetValue, CreateSubKey, Delete, ReadKey, ChangePermissions\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1\">\nusing System;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\nusing System.Security;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string user = Environment.UserDomainName + &quot;\\\\&quot;\n            + Environment.UserName;\n\n        // Create a security object that grants no access.\n        RegistrySecurity mSec = new RegistrySecurity();\n\n        // Add a rule that grants the current user the right\n        // to read and enumerate the name/value pairs in a key, \n        // to read its access and audit rules, to enumerate\n        // its subkeys, to create subkeys, and to delete the key. \n        // The rule is inherited by all contained subkeys.\n        //\n        RegistryAccessRule rule1 = new RegistryAccessRule(user, \n            RegistryRights.ReadKey | RegistryRights.WriteKey\n                | RegistryRights.Delete, \n            InheritanceFlags.ContainerInherit, \n            PropagationFlags.None, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule1);\n\n        // Add a rule that allows the current user the right\n        // right to take ownership of a key, using the same \n        // inheritance and propagation flags. This rule \n        // merges with the first rule.\n        RegistryAccessRule rule2 = new RegistryAccessRule(user, \n            RegistryRights.ChangePermissions, \n            InheritanceFlags.ContainerInherit,\n            PropagationFlags.None, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule2);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Attempt to use RemoveRuleSpecific to remove the\n        // first rule. The removal fails, because the rule\n        // in the RegistrySecurity object has been altered.\n        mSec.RemoveAccessRuleSpecific(rule1);\n\n        // Show that the rule was not removed.\n        ShowSecurity(mSec);\n\n        // Use the RemoveAccessRule method to remove rule2,\n        // and then use RemoveAccessRuleSpecific to remove\n        // rule1.\n        mSec.RemoveAccessRule(rule2);\n        mSec.RemoveAccessRuleSpecific(rule1);\n\n        // Show that the rules have been removed.\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(RegistrySecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach( RegistryAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)) )\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights);\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags);\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags);\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited);\n            Console.WriteLine();\n        }\n    }\n}\n\n/* This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: SetValue, CreateSubKey, Delete, ReadKey, ChangePermissions\n Inheritance: ContainerInherit\n Propagation: None\n   Inherited? False\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: SetValue, CreateSubKey, Delete, ReadKey, ChangePermissions\n Inheritance: ContainerInherit\n Propagation: None\n   Inherited? False\n\n\nCurrent access rules:\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_RemoveAuditRule_System_Security_AccessControl_RegistryAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_RemoveAuditRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAuditRule(RegistryAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a compatible rule is found; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> is searched for an audit rule that has the same user as <code>rule</code>. If no such rule is found, no action is taken, and the method returns <code>false</code>. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <code>rule</code>. If no compatible rule is found, no action is taken, and the method returns <code>false</code>. If a rule with compatible flags is found, the rights specified in <code>rule</code> are removed from the compatible rule, and the method returns <code>true</code>. If <code>rule</code> specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_RemoveAuditRuleAll_System_Security_AccessControl_RegistryAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_RemoveAuditRuleAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAuditRuleAll(RegistryAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> that specifies the user to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> is searched for audit rules that have the same user as <code>rule</code>. Any rights, inheritance flags, or propagation flags specified by <code>rule</code> are ignored when performing this search. If no matching rules are found, no action is taken.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_RemoveAuditRuleSpecific_System_Security_AccessControl_RegistryAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_RemoveAuditRuleSpecific_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAuditRuleSpecific(RegistryAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> to be removed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The rule is removed only if it exactly matches <code>rule</code> in all details, including flags. Other audit rules for the same user are not affected.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAuditRuleSpecific method cannot remove it.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_ResetAccessRule_System_Security_AccessControl_RegistryAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_ResetAccessRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetAccessRule(RegistryAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all access control rules with the same user as the specified rule, regardless of <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, and then adds the specified rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> to add. The user specified by this rule determines the rules to remove before this rule is added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are no access rules whose user matches the specified rule, <code>rule</code> is added.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user only to read the key, and uses the ResetAccessRule method to remove the all rules for the user and replace them with the new rule.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object. See the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method and the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1\">\nusing System;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\nusing System.Security;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string user = Environment.UserDomainName + &quot;\\\\&quot;\n            + Environment.UserName;\n\n        // Create a security object that grants no access.\n        RegistrySecurity mSec = new RegistrySecurity();\n\n        // Add a rule that grants the current user the right\n        // to read and enumerate the name/value pairs in a key, \n        // to read its access and audit rules, to enumerate\n        // its subkeys, to create subkeys, and to delete the key. \n        // The rule is inherited by all contained subkeys.\n        //\n        RegistryAccessRule rule = new RegistryAccessRule(user, \n            RegistryRights.ReadKey | RegistryRights.WriteKey\n                | RegistryRights.Delete, \n            InheritanceFlags.ContainerInherit, \n            PropagationFlags.None, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that allows the current user the right\n        // right to set the name/value pairs in a key. \n        // This rule is inherited by contained subkeys, but\n        // propagation flags limit it to immediate child \n        // subkeys.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.ChangePermissions,\n            InheritanceFlags.ContainerInherit,\n            PropagationFlags.InheritOnly | PropagationFlags.NoPropagateInherit, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the right\n        // to set the name/value pairs in a key. This rule\n        // has no inheritance or propagation flags, so it \n        // affects only the key itself.\n        rule = new RegistryAccessRule(user,\n            RegistryRights.SetValue,\n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Create a rule that allows the current user  \n        // only read access to a key, with no inheritance \n        // or propagation flags. ResetAccessRule removes\n        // all the existing rules for the current user, \n        // replacing them with this rule.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.ReadKey, \n            AccessControlType.Allow);\n        mSec.ResetAccessRule(rule);\n\n        // Display the rules in the security object.\n        // removed.\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(RegistrySecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach( RegistryAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)) )\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights);\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags);\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags);\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited);\n            Console.WriteLine();\n        }\n    }\n}\n\n/* This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: SetValue\n Inheritance: None\n Propagation: None\n   Inherited? False\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: SetValue, CreateSubKey, Delete, ReadKey\n Inheritance: ContainerInherit\n Propagation: None\n   Inherited? False\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: ChangePermissions\n Inheritance: ContainerInherit\n Propagation: NoPropagateInherit, InheritOnly\n   Inherited? False\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: ReadKey\n Inheritance: None\n Propagation: None\n   Inherited? False\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1\">Option Explicit\nImports System\nImports System.Security.AccessControl\nImports System.Security.Principal\nImports System.Security\nImports Microsoft.Win32\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New RegistrySecurity()\n\n        &#39; Add a rule that grants the current user the right\n        &#39; to read and enumerate the name/value pairs in a key, \n        &#39; to read its access and audit rules, to enumerate\n        &#39; its subkeys, to create subkeys, and to delete the key. \n        &#39; The rule is inherited by all contained subkeys.\n        &#39;\n        Dim rule As New RegistryAccessRule(user, _\n            RegistryRights.ReadKey Or RegistryRights.WriteKey _\n                Or RegistryRights.Delete, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.None, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that allows the current user the right\n        &#39; right to set the name/value pairs in a key. \n        &#39; This rule is inherited by contained subkeys, but\n        &#39; propagation flags limit it to immediate child \n        &#39; subkeys.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.ChangePermissions, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.InheritOnly Or PropagationFlags.NoPropagateInherit, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the right\n        &#39; to set the name/value pairs in a key. This rule\n        &#39; has no inheritance or propagation flags, so it \n        &#39; affects only the key itself.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.SetValue, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Create a rule that allows the current user  \n        &#39; only read access to a key, with no inheritance \n        &#39; or propagation flags. ResetAccessRule removes\n        &#39; all the existing rules for the current user, \n        &#39; replacing them with this rule.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.ReadKey, _\n            AccessControlType.Allow)\n        mSec.ResetAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As RegistrySecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As RegistryAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights)\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags)\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags)\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: SetValue\n&#39; Inheritance: None\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: SetValue, CreateSubKey, Delete, ReadKey\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: ChangePermissions\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: NoPropagateInherit, InheritOnly\n&#39;   Inherited? False\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: ReadKey\n&#39; Inheritance: None\n&#39; Propagation: None\n&#39;   Inherited? False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_SetAccessRule_System_Security_AccessControl_RegistryAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_SetAccessRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAccessRule(RegistryAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all access control rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule, and then adds the specified rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> to add. The user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> of this rule determine the rules to remove before this rule is added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the specified rule has <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, the effect of this method is to remove all <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rules for the specified user, replacing them with the specified rule. If the specified rule has <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, all <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rules for the specified user are replaced with the specified rule.  </p>\n<p> If there are no rules whose user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> match the specified rule, <code>rule</code> is added.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that the SetAccessRule method removes all rules that match both the user and the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> of <code>rule</code>, ignoring rights and flags, and replaces them with <code>rule</code>.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user only to read the key, and uses the SetAccessRule method to remove the two rules that allow access and to replace them with the new rule. The rule that denies access is not affected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"microsoft.win32.registrykey\" data-linktype=\"relative-path\">RegistryKey</a> object. See the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method and the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.RegistrySecurity.SetAccessRule#1\">Option Explicit\nImports System\nImports System.Security.AccessControl\nImports System.Security.Principal\nImports System.Security\nImports Microsoft.Win32\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New RegistrySecurity()\n\n        &#39; Add a rule that grants the current user the right\n        &#39; to read and enumerate the name/value pairs in a key, \n        &#39; to read its access and audit rules, to enumerate\n        &#39; its subkeys, to create subkeys, and to delete the key. \n        &#39; The rule is inherited by all contained subkeys.\n        &#39;\n        Dim rule As New RegistryAccessRule(user, _\n            RegistryRights.ReadKey Or RegistryRights.WriteKey _\n                Or RegistryRights.Delete, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.None, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that allows the current user the right\n        &#39; right to set the name/value pairs in a key. \n        &#39; This rule is inherited by contained subkeys, but\n        &#39; propagation flags limit it to immediate child \n        &#39; subkeys.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.ChangePermissions, _\n            InheritanceFlags.ContainerInherit, _\n            PropagationFlags.InheritOnly Or PropagationFlags.NoPropagateInherit, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the right\n        &#39; to set the name/value pairs in a key. This rule\n        &#39; has no inheritance or propagation flags, so it \n        &#39; affects only the key itself.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.SetValue, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Create a rule that allows the current user  \n        &#39; only read access to a key, with no inheritance \n        &#39; or propagation flags. SetAccessRule removes\n        &#39; all the existing rules that allow access for\n        &#39; the current user, replacing them with this\n        &#39; rule. Rules that deny access do not match,\n        &#39; and so are not affected.\n        rule = New RegistryAccessRule(user, _\n            RegistryRights.ReadKey, _\n            AccessControlType.Allow)\n        mSec.SetAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As RegistrySecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As RegistryAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights)\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags)\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags)\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: SetValue\n&#39; Inheritance: None\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: SetValue, CreateSubKey, Delete, ReadKey\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: ChangePermissions\n&#39; Inheritance: ContainerInherit\n&#39; Propagation: NoPropagateInherit, InheritOnly\n&#39;   Inherited? False\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: SetValue\n&#39; Inheritance: None\n&#39; Propagation: None\n&#39;   Inherited? False\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: ReadKey\n&#39; Inheritance: None\n&#39; Propagation: None\n&#39;   Inherited? False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.RegistrySecurity.SetAccessRule#1\">\nusing System;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\nusing System.Security;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string user = Environment.UserDomainName + &quot;\\\\&quot;\n            + Environment.UserName;\n\n        // Create a security object that grants no access.\n        RegistrySecurity mSec = new RegistrySecurity();\n\n        // Add a rule that grants the current user the right\n        // to read and enumerate the name/value pairs in a key, \n        // to read its access and audit rules, to enumerate\n        // its subkeys, to create subkeys, and to delete the key. \n        // The rule is inherited by all contained subkeys.\n        //\n        RegistryAccessRule rule = new RegistryAccessRule(user, \n            RegistryRights.ReadKey | RegistryRights.WriteKey\n                | RegistryRights.Delete, \n            InheritanceFlags.ContainerInherit, \n            PropagationFlags.None, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that allows the current user the right\n        // right to set the name/value pairs in a key. \n        // This rule is inherited by contained subkeys, but\n        // propagation flags limit it to immediate child \n        // subkeys.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.ChangePermissions,\n            InheritanceFlags.ContainerInherit,\n            PropagationFlags.InheritOnly | PropagationFlags.NoPropagateInherit, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the right\n        // to set the name/value pairs in a key. This rule\n        // has no inheritance or propagation flags, so it \n        // affects only the key itself.\n        rule = new RegistryAccessRule(user,\n            RegistryRights.SetValue,\n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Create a rule that allows the current user  \n        // only read access to a key, with no inheritance \n        // or propagation flags. SetAccessRule removes\n        // all the existing rules that allow access for\n        // the current user, replacing them with this\n        // rule. Rules that deny access do not match,\n        // and so are not affected.\n        rule = new RegistryAccessRule(user, \n            RegistryRights.ReadKey, \n            AccessControlType.Allow);\n        mSec.SetAccessRule(rule);\n\n        // Display the rules in the security object.\n        // removed.\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(RegistrySecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach( RegistryAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)) )\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.RegistryRights);\n            Console.WriteLine(&quot; Inheritance: {0}&quot;, ar.InheritanceFlags);\n            Console.WriteLine(&quot; Propagation: {0}&quot;, ar.PropagationFlags);\n            Console.WriteLine(&quot;   Inherited? {0}&quot;, ar.IsInherited);\n            Console.WriteLine();\n        }\n    }\n}\n\n/* This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: SetValue\n Inheritance: None\n Propagation: None\n   Inherited? False\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: SetValue, CreateSubKey, Delete, ReadKey\n Inheritance: ContainerInherit\n Propagation: None\n   Inherited? False\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: ChangePermissions\n Inheritance: ContainerInherit\n Propagation: NoPropagateInherit, InheritOnly\n   Inherited? False\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: SetValue\n Inheritance: None\n Propagation: None\n   Inherited? False\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: ReadKey\n Inheritance: None\n Propagation: None\n   Inherited? False\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_RegistrySecurity_SetAuditRule_System_Security_AccessControl_RegistryAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_RegistrySecurity_SetAuditRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAuditRule(RegistryAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all audit rules with the same user as the specified rule, regardless of the <a class=\"xref\" href=\"system.security.accesscontrol.auditflags\" data-linktype=\"relative-path\">AuditFlags</a> value, and then adds the specified rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.registryauditrule\" data-linktype=\"relative-path\">RegistryAuditRule</a> to add. The user specified by this rule determines the rules to remove before this rule is added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are no audit rules whose user matches the specified rule, <code>rule</code> is added.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.AccessControl.RegistrySecurity.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.AccessControl.RegistrySecurity.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.AccessRightType\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.AccessRuleFactory\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.AccessRuleType\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.AddAccessRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.AddAuditRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.AuditRuleFactory\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.AuditRuleType\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.RemoveAuditRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.ResetAccessRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.SetAccessRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistrySecurity.SetAuditRule\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7189e2d2-067e-11fc-96db-24257922791c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the Windows access control security for a registry key. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.AccessControl/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.AccessControl.RegistrySecurity\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.AccessControl.RegistrySecurity.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.AccessControl.RegistrySecurity.yml","open_to_public_contributors":true,"api_name":["System.Security.AccessControl.RegistrySecurity","System.Security.AccessControl.RegistrySecurity..ctor","System.Security.AccessControl.RegistrySecurity.AccessRightType","System.Security.AccessControl.RegistrySecurity.AccessRuleFactory","System.Security.AccessControl.RegistrySecurity.AccessRuleType","System.Security.AccessControl.RegistrySecurity.AddAccessRule","System.Security.AccessControl.RegistrySecurity.AddAuditRule","System.Security.AccessControl.RegistrySecurity.AuditRuleFactory","System.Security.AccessControl.RegistrySecurity.AuditRuleType","System.Security.AccessControl.RegistrySecurity.RemoveAccessRule","System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll","System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific","System.Security.AccessControl.RegistrySecurity.RemoveAuditRule","System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll","System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific","System.Security.AccessControl.RegistrySecurity.ResetAccessRule","System.Security.AccessControl.RegistrySecurity.SetAccessRule","System.Security.AccessControl.RegistrySecurity.SetAuditRule"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.AccessControl.RegistrySecurity","System::Security::AccessControl::RegistrySecurity","System.Security.AccessControl.RegistrySecurity.#ctor","System::Security::AccessControl::RegistrySecurity::#ctor","System.Security.AccessControl.RegistrySecurity.AccessRightType","System::Security::AccessControl::RegistrySecurity::AccessRightType","System.Security.AccessControl.RegistrySecurity.AccessRuleFactory","System::Security::AccessControl::RegistrySecurity::AccessRuleFactory","System.Security.AccessControl.RegistrySecurity.AccessRuleType","System::Security::AccessControl::RegistrySecurity::AccessRuleType","System.Security.AccessControl.RegistrySecurity.AddAccessRule","System::Security::AccessControl::RegistrySecurity::AddAccessRule","System.Security.AccessControl.RegistrySecurity.AddAuditRule","System::Security::AccessControl::RegistrySecurity::AddAuditRule","System.Security.AccessControl.RegistrySecurity.AuditRuleFactory","System::Security::AccessControl::RegistrySecurity::AuditRuleFactory","System.Security.AccessControl.RegistrySecurity.AuditRuleType","System::Security::AccessControl::RegistrySecurity::AuditRuleType","System.Security.AccessControl.RegistrySecurity.RemoveAccessRule","System::Security::AccessControl::RegistrySecurity::RemoveAccessRule","System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll","System::Security::AccessControl::RegistrySecurity::RemoveAccessRuleAll","System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific","System::Security::AccessControl::RegistrySecurity::RemoveAccessRuleSpecific","System.Security.AccessControl.RegistrySecurity.RemoveAuditRule","System::Security::AccessControl::RegistrySecurity::RemoveAuditRule","System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll","System::Security::AccessControl::RegistrySecurity::RemoveAuditRuleAll","System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific","System::Security::AccessControl::RegistrySecurity::RemoveAuditRuleSpecific","System.Security.AccessControl.RegistrySecurity.ResetAccessRule","System::Security::AccessControl::RegistrySecurity::ResetAccessRule","System.Security.AccessControl.RegistrySecurity.SetAccessRule","System::Security::AccessControl::RegistrySecurity::SetAccessRule","System.Security.AccessControl.RegistrySecurity.SetAuditRule","System::Security::AccessControl::RegistrySecurity::SetAuditRule"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7189e2d2-067e-11fc-96db-24257922791c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.AccessControl/RegistrySecurity.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RegistrySecurity class | Microsoft Docs","_op_ogTitle":"RegistrySecurity class","description":"Represents the Windows access control security for a registry key. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.AccessControl/toc.json","toc_rel":"_splitted/System.Security.AccessControl/toc.json","source_url":"","ms.assetid":"System.Security.AccessControl.RegistrySecurity","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.accesscontrol.registrysecurity","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.accesscontrol.registrysecurity","fileRelativePath":"System.Security.AccessControl.RegistrySecurity.html"},"themesRelativePathToOutputRoot":"_themes/"}