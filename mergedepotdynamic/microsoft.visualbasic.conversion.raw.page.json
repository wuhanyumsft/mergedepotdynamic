{"content":"    \r\n    <h1 id=\"Microsoft_VisualBasic_Conversion\">\r\n      <span class=\"lang-csharp\">Conversion</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The <code>Conversion</code> module contains the procedures used to perform various conversion operations.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[Microsoft.VisualBasic.CompilerServices.StandardModule]\npublic sealed class Conversion</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Conversion</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_CTypeDynamic_System_Object_System_Type_\" data-linktype=\"self-bookmark\">CTypeDynamic(Object,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an object to the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_CTypeDynamic__1_System_Object_\" data-linktype=\"self-bookmark\">CTypeDynamic&lt;TargetType&gt;(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an object to the specified generic type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_ErrorToString\" data-linktype=\"self-bookmark\">ErrorToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the error message that corresponds to a given error number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_ErrorToString_System_Int32_\" data-linktype=\"self-bookmark\">ErrorToString(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the error message that corresponds to a given error number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Fix_System_Decimal_\" data-linktype=\"self-bookmark\">Fix(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Fix_System_Double_\" data-linktype=\"self-bookmark\">Fix(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Fix_System_Int16_\" data-linktype=\"self-bookmark\">Fix(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Fix_System_Int32_\" data-linktype=\"self-bookmark\">Fix(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Fix_System_Int64_\" data-linktype=\"self-bookmark\">Fix(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Fix_System_Object_\" data-linktype=\"self-bookmark\">Fix(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Fix_System_Single_\" data-linktype=\"self-bookmark\">Fix(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_Byte_\" data-linktype=\"self-bookmark\">Hex(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_Int16_\" data-linktype=\"self-bookmark\">Hex(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_Int32_\" data-linktype=\"self-bookmark\">Hex(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_Int64_\" data-linktype=\"self-bookmark\">Hex(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_Object_\" data-linktype=\"self-bookmark\">Hex(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_SByte_\" data-linktype=\"self-bookmark\">Hex(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_UInt16_\" data-linktype=\"self-bookmark\">Hex(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_UInt32_\" data-linktype=\"self-bookmark\">Hex(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Hex_System_UInt64_\" data-linktype=\"self-bookmark\">Hex(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Int_System_Decimal_\" data-linktype=\"self-bookmark\">Int(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Int_System_Double_\" data-linktype=\"self-bookmark\">Int(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Int_System_Int16_\" data-linktype=\"self-bookmark\">Int(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Int_System_Int32_\" data-linktype=\"self-bookmark\">Int(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Int_System_Int64_\" data-linktype=\"self-bookmark\">Int(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Int_System_Object_\" data-linktype=\"self-bookmark\">Int(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Int_System_Single_\" data-linktype=\"self-bookmark\">Int(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Return the integer portion of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_Byte_\" data-linktype=\"self-bookmark\">Oct(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_Int16_\" data-linktype=\"self-bookmark\">Oct(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_Int32_\" data-linktype=\"self-bookmark\">Oct(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_Int64_\" data-linktype=\"self-bookmark\">Oct(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_Object_\" data-linktype=\"self-bookmark\">Oct(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_SByte_\" data-linktype=\"self-bookmark\">Oct(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_UInt16_\" data-linktype=\"self-bookmark\">Oct(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_UInt32_\" data-linktype=\"self-bookmark\">Oct(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Oct_System_UInt64_\" data-linktype=\"self-bookmark\">Oct(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Str_System_Object_\" data-linktype=\"self-bookmark\">Str(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <code>String</code> representation of a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Val_System_Char_\" data-linktype=\"self-bookmark\">Val(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Val_System_Object_\" data-linktype=\"self-bookmark\">Val(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_VisualBasic_Conversion_Val_System_String_\" data-linktype=\"self-bookmark\">Val(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_CTypeDynamic_System_Object_System_Type_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_CTypeDynamic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CTypeDynamic(Object,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an object to the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object CTypeDynamic (object Expression, Type TargetType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>TargetType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to which to convert the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object whose type at run time is the requested target type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>CTypeDynamic</code> method converts the object passed as the <code>Expression</code> parameter to the type specified by the <code>TargetType</code> parameter. If the object is a dynamic object, the <code>CTypeDynamic</code> method applies available dynamic conversions.  </p>\n<p> The <code>CTypeDynamic</code> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a>, the <code>CTypeDynamic</code> method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the <code>CTypeDynamic</code> method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a>, the <code>CTypeDynamic</code> method gives precedence to dynamic conversions over user-defined, static conversions.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>CTypeDynamic</code> method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  </p>\n<pre><code class=\"lang-vb#\">Imports System.Dynamic  \n\nModule Module1  \n    Sub Main()  \n        Dim dyn As Object = New SampleDynamicObject  \n        Dim sampleString = CTypeDynamic(dyn, GetType(String))  \n        Console.WriteLine(sampleString)  \n    End Sub  \nEnd Module  \n\nClass SampleDynamicObject  \n    Inherits DynamicObject  \n\n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \n                                         ByRef result As Object) As Boolean  \n\n        If binder.Type = GetType(String) Then  \n            result = &quot;Sample String&quot;  \n            Return True  \n        End If  \n\n        Return False  \n    End Function  \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_CTypeDynamic__1_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_CTypeDynamic_TargetType__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CTypeDynamic&lt;TargetType&gt;(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an object to the specified generic type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TargetType</span></div>\r\n                  </div>\r\n                  <p>An object statically typed as the requested generic type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>CTypeDynamic</code> method converts the object passed as the <code>Expression</code> parameter to the type specified by the type of the generic parameter. If the object is a dynamic object, the <code>CTypeDynamic</code> method applies available dynamic conversions.  </p>\n<p> The <code>CTypeDynamic</code> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <a class=\"xref\" href=\"system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a>, the <code>CTypeDynamic</code> method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the <code>CTypeDynamic</code> method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <a class=\"xref\" href=\"system.dynamic.idynamicmetaobjectprovider\" data-linktype=\"relative-path\">IDynamicMetaObjectProvider</a>, the <code>CTypeDynamic</code> method gives precedence to dynamic conversions over user-defined, static conversions.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>CTypeDynamic</code> method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  </p>\n<pre><code class=\"lang-vb#\">Imports System.Dynamic  \n\nModule Module1  \n    Sub Main()  \n        Dim dyn As Object = New SampleDynamicObject  \n        Dim str = CTypeDynamic(Of String)(dyn)  \n        Console.WriteLine(str)  \n    End Sub  \nEnd Module  \n\nClass SampleDynamicObject  \n    Inherits DynamicObject  \n\n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \n                                         ByRef result As Object) As Boolean  \n\n        If binder.Type = GetType(String) Then  \n            result = &quot;Sample String&quot;  \n            Return True  \n        End If  \n\n        Return False  \n    End Function  \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_ErrorToString\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_ErrorToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ErrorToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the error message that corresponds to a given error number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ErrorToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The error message that corresponds to the most recent run-time error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ErrorNumber</code> is out of range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>ErrorToString</code> function examines the property settings of the <code>Err</code> object to identify the most recent run-time error. The return value of the <code>ErrorToString</code> function corresponds to the <code>Description</code> property of the <code>Err</code> object. If no run-time error has occurred, <code>ErrorToString</code> returns a zero-length string (&quot;&quot;).  </p>\n<p> In Visual Basic version 6.0 and earlier, this functionality was provided by the <code>Error</code> function.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code uses the <code>ErrorToString</code> function to display error messages that correspond to the specified error numbers.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#4\">        Dim ErrorNumber As Integer\n        For ErrorNumber = 61 To 64   &#39; Loop through values 61 - 64.\n            MsgBox(ErrorToString(ErrorNumber))   &#39; Display error names in message box.\n        Next ErrorNumber\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_ErrorToString_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_ErrorToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ErrorToString(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the error message that corresponds to a given error number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ErrorToString (int ErrorNumber);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ErrorNumber</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional. Any valid error number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The error message that corresponds to a given error number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ErrorNumber</code> is out of range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>ErrorToString</code> function examines the property settings of the <code>Err</code> object to identify the most recent run-time error. The return value of the <code>ErrorToString</code> function corresponds to the <code>Description</code> property of the <code>Err</code> object. If <code>ErrorNumber</code> is a valid error number but is not defined, <code>ErrorToString</code> returns the string <code>&quot;Application-defined or object-defined error.&quot;</code> If <code>ErrorNumber</code> is not valid, an error occurs. If <code>ErrorNumber</code> is omitted, the message corresponding to the most recent run-time error is returned. If no run-time error has occurred or <code>ErrorNumber</code> is 0, <code>ErrorToString</code> returns a zero-length string (&quot;&quot;).  </p>\n<p> In Visual Basic version 6.0 and earlier, this functionality was provided by the <code>Error</code> function.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code uses the <code>ErrorToString</code> function to display error messages that correspond to the specified error numbers.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCatRef#4\">        Dim ErrorNumber As Integer\n        For ErrorNumber = 61 To 64   &#39; Loop through values 61 - 64.\n            MsgBox(ErrorToString(ErrorNumber))   &#39; Display error names in message box.\n        Next ErrorNumber\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Fix_System_Decimal_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Fix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fix(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Fix (decimal Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Fix_System_Double_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Fix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fix(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Fix (double Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Fix_System_Int16_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Fix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fix(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short Fix (short Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Fix_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Fix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fix(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Fix (int Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Fix_System_Int64_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Fix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fix(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Fix (long Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Fix_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Fix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fix(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Fix (object Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Fix_System_Single_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Fix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fix(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Fix (float Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_Byte_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (byte Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_Int16_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (short Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (int Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_Int64_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (long Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (object Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_SByte_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (sbyte Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_UInt16_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (ushort Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_UInt32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (uint Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Hex_System_UInt64_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Hex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hex(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Hex (ulong Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the hexadecimal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If <code>Number</code> is</td>\n<td>Hex returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any numeric value</td>\n<td>Up to sixteen hexadecimal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent hexadecimal numbers directly by preceding numbers in the proper range with <code>&amp;H</code>. For example, <code>&amp;H10</code> represents decimal 16 in hexadecimal notation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Hex</code> function to return the hexadecimal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#16\">        Dim TestHex As String\n        &#39; Returns 5.\n        TestHex = Hex(5)\n        &#39; Returns A.\n        TestHex = Hex(10)\n        &#39; Returns 1CB.\n        TestHex = Hex(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Int_System_Decimal_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Int_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Int(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Int (decimal Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Int_System_Double_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Int_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Int(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Int (double Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Int_System_Int16_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Int_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Int(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short Int (short Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Int_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Int_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Int(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Int (int Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Int_System_Int64_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Int_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Int(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long Int (long Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Int_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Int_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Int(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Int (object Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Int_System_Single_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Int_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Int(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Return the integer portion of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float Int (float Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. A number of type <code>Double</code> or any valid numeric expression. If <code>Number</code> contains <code>Nothing</code>, <code>Nothing</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>Return the integer portion of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Number is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Number is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <code>Int</code> and <code>Fix</code> functions remove the fractional part of <code>Number</code> and return the resulting integer value.  </p>\n<p> The difference between <code>Int</code> and <code>Fix</code> functions is that if <code>Number</code> is negative, <code>Int</code> returns the first negative integer less than or equal to <code>Number</code>, whereas <code>Fix</code> returns the first negative integer greater than or equal to <code>Number</code>. For example, <code>Int</code> converts -8.4 to -9, and <code>Fix</code> converts -8.4 to -8.  </p>\n<p> <code>Fix(number)</code> is equivalent to <code>Sign(number) * Int(Abs(number)).</code></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example illustrates how the <code>Int</code> and <code>Fix</code> functions return integer portions of numbers. In the case of a negative number argument, the <code>Int</code> function returns the first negative integer less than or equal to the number; the <code>Fix</code> function returns the first negative integer greater than or equal to the number. The following example requires you to specify <code>Option Strict Off</code> because implicit conversions from type <code>Double</code> to type <code>Integer</code> are not allowed under <code>Option Strict On</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#4\">            &#39; This code requires Option Strict Off\n            Dim MyNumber As Integer\n            MyNumber = Int(99.8)   &#39; Returns 99.\n            MyNumber = Fix(99.8)   &#39; Returns 99.\n\n            MyNumber = Int(-99.8)  &#39; Returns -100.\n            MyNumber = Fix(-99.8)  &#39; Returns -99.\n\n            MyNumber = Int(-99.2)  &#39; Returns -100.\n            MyNumber = Fix(-99.2)  &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function to explicitly convert other data types to type <code>Integer</code> with <code>Option Strict Off</code>. However, <code>CInt</code> rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#5\">        MyNumber = CInt(99.8)    &#39; Returns 100.\n        MyNumber = CInt(-99.8)   &#39; Returns -100.\n        MyNumber = CInt(-99.2)   &#39; Returns -99.\n</code></pre><p> You can use the <code>CInt</code> function on the result of a call to <code>Fix</code> or <code>Int</code> to perform explicit conversion to integer without rounding. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrMath#6\">        MyNumber = CInt(Fix(99.8))   &#39; Returns 99.\n        MyNumber = CInt(Int(99.8))   &#39; Returns 99.\n</code></pre><p> For more information on <code>CInt</code>, see <a href=\"../Topic/Type%20Conversion%20Functions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Type Conversion Functions</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_Byte_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (byte Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_Int16_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (short Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_Int32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (int Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_Int64_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (long Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (object Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_SByte_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (sbyte Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_UInt16_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (ushort Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_UInt32_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (uint Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Oct_System_UInt64_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Oct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oct(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representing the octal value of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Oct (ulong Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid numeric expression or <code>String</code> expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a string representing the octal value of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>Number</code> is not already a whole number, it is rounded to the nearest whole number before being evaluated.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>If Number is</td>\n<td>Oct returns</td>\n</tr>\n<tr>\n<td>Empty</td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td>Any other number</td>\n<td>Up to 22 octal characters</td>\n</tr>\n</tbody>\n</table>\n<p> You can represent octal numbers directly by preceding numbers in the proper range with <code>&amp;O</code>. For example, <code>&amp;O10</code> is the octal notation for decimal 8.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Oct</code> function to return the octal value of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#30\">        Dim TestOct As String\n        &#39; Returns &quot;4&quot;.\n        TestOct = Oct(4)\n        &#39; Returns &quot;10&quot;.\n        TestOct = Oct(8)\n        &#39; Returns &quot;713&quot;.\n        TestOct = Oct(459)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Str_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Str_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Str(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <code>String</code> representation of a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Str (object Number);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Number</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. An <code>Object</code> containing any valid numeric expression.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a <code>String</code> representation of a number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>Number</code> is not a numeric type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When numbers are converted to strings, a leading space is always reserved for the sign of <code>Number</code>. If <code>Number</code> is positive, the returned string contains a leading space, and the plus sign is implied. A negative number will include the minus sign (-) and no leading space.  </p>\n<p> Use the <code>Format</code> function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats. Unlike the <code>Str</code> function, the <code>Format</code> function does not include a leading space for the sign of <code>Number</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Str</code> function recognizes only the period (<code>.</code>) as a valid decimal separator. If different decimal separators are used (for example, in international applications), use the <code>CStr</code> or <code>Format</code> functions to convert a number to a string. To get the string representation of a number in a particular culture, use the number&#39;s <code>ToString(IFormatProvider)</code> method. For example, use <a class=\"xref\" href=\"system.double#System_Double_ToString_\" data-linktype=\"relative-path\">ToString</a> when converting a value of type <code>Double</code> to a string.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example uses the <code>Str</code> function to return a <code>String</code> representation of a number. When a positive number is converted to a string, a leading space is always reserved for its sign.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStrings#1\">        Dim TestString As String\n        &#39; Returns &quot; 459&quot;.\n        TestString = Str(459)\n        &#39; Returns &quot;-459.65&quot;.\n        TestString = Str(-459.65)\n        &#39; Returns &quot; 459.001&quot;.\n        TestString = Str(459.001)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Val_System_Char_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Val_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Val(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Val (char Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression, <code>Object</code> variable, or <code>Char</code> value. If <code>Expression</code> is of type <code>Object</code>, its value must be convertible to <code>String</code> or an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>InputStr</code> is too large.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Expression</code> is an <code>Object</code> type expression that is not convertible to <code>String</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Val</code> function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes <code>&amp;O</code> (for octal) and <code>&amp;H</code> (for hexadecimal). Blanks, tabs, and linefeed characters are stripped from the argument.  </p>\n<p> The following call returns the value 1615198.  </p>\n<pre><code>\nVal(&quot; 1615 198th Street N.E.&quot;)\n</code></pre><p> The following call returns the decimal value -1.  </p>\n<pre><code>\nVal(&quot;&amp;HFFFF&quot;)\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> The <code>Val</code> function recognizes only the period (<code>.</code>) as a valid decimal separator. When different decimal separators are used, as in international applications, use <code>CDbl</code> or <code>CInt</code> instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type&#39;s <code>Parse(String, IFormatProvider)</code> method. For example, use <a class=\"xref\" href=\"system.double#System_Double_Parse_\" data-linktype=\"relative-path\">Parse</a> when converting a string to a <code>Double</code>.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  </p>\n<p> <code>&#39; These examples cause run-time errors.</code>  </p>\n<p> <code>&#39;Console.WriteLine(Val(&quot;1.34%&quot;))</code>  </p>\n<p> <code>&#39;Console.WriteLine(Val(&quot;1.34&amp;&quot;))</code>  </p>\n<p> The conflict between the number formatted as a <code>Double</code> and the <code>Integer</code> and <code>Long</code> type characters would be caught by the compiler if it were not contained in a string.  </p>\n<p> <code>&#39; These examples cause compiler errors.</code>  </p>\n<p> <code>&#39;Dim m = 1.34%</code>  </p>\n<p> <code>&#39;Dim n = 1.34&amp;</code></p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Val</code> function to return the numbers contained in each string. <code>Val</code> stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#54\">        Dim valResult As Double\n        &#39; The following line of code sets valResult to 2457.\n        valResult = Val(&quot;2457&quot;)\n        &#39; The following line of code sets valResult to 2457.\n        valResult = Val(&quot; 2 45 7&quot;)\n        &#39; The following line of code sets valResult to 24.\n        valResult = Val(&quot;24 and 57&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Val_System_Object_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Val_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Val(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Val (object Expression);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Expression</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression, <code>Object</code> variable, or <code>Char</code> value. If <code>Expression</code> is of type <code>Object</code>, its value must be convertible to <code>String</code> or an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>InputStr</code> is too large.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Expression</code> is an <code>Object</code> type expression that is not convertible to <code>String</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Val</code> function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes <code>&amp;O</code> (for octal) and <code>&amp;H</code> (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  </p>\n<p> The following call returns the value 1234123.  </p>\n<pre><code>\nVal(&quot; 1234 123th Street N.E.&quot;)\n</code></pre><p> The following call returns the decimal value -1.  </p>\n<pre><code>\nVal(&quot;&amp;HFFFF&quot;)\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> The <code>Val</code> function recognizes only the period (<code>.</code>) as a valid decimal separator. When other decimal separators are used, as in international applications, use <code>CDbl</code> or <code>CInt</code> instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type&#39;s <code>Parse(String, IFormatProvider)</code> method. For example, use <a class=\"xref\" href=\"system.double#System_Double_Parse_\" data-linktype=\"relative-path\">Parse</a> when converting a string to a <code>Double</code>.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  </p>\n<p> <code>&#39; These examples cause run-time errors.</code>  </p>\n<p> <code>&#39;Console.WriteLine(Val(&quot;1.34%&quot;))</code>  </p>\n<p> <code>&#39;Console.WriteLine(Val(&quot;1.34&amp;&quot;))</code>  </p>\n<p> The conflict between the number formatted as a <code>Double</code> and the <code>Integer</code> and <code>Long</code> type characters would be caught by the compiler if the conflict were not contained in strings.  </p>\n<p> <code>&#39; These examples cause compiler errors.</code>  </p>\n<p> <code>&#39;Dim m = 1.34%</code>  </p>\n<p> <code>&#39;Dim n = 1.34&amp;</code></p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Val</code> function to return the numbers contained in each string. <code>Val</code> stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#54\">        Dim valResult As Double\n        &#39; The following line of code sets valResult to 2457.\n        valResult = Val(&quot;2457&quot;)\n        &#39; The following line of code sets valResult to 2457.\n        valResult = Val(&quot; 2 45 7&quot;)\n        &#39; The following line of code sets valResult to 24.\n        valResult = Val(&quot;24 and 57&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_VisualBasic_Conversion_Val_System_String_\">\r\n    \r\n            <a id=\"Microsoft_VisualBasic_Conversion_Val_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Val(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Val (string InputStr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>InputStr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Required. Any valid <code>String</code> expression, <code>Object</code> variable, or <code>Char</code> value. If <code>Expression</code> is of type <code>Object</code>, its value must be convertible to <code>String</code> or an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>Returns the numbers contained in a string as a numeric value of appropriate type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>InputStr</code> is too large.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>Expression</code> is an <code>Object</code> type expression that is not convertible to <code>String</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Val</code> function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes <code>&amp;O</code> (for octal) and <code>&amp;H</code> (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  </p>\n<p> The following call returns the value 1234123.  </p>\n<pre><code>\nVal(&quot; 1234 123th Street N.E.&quot;)\n</code></pre><p> The following call returns the decimal value -1.  </p>\n<pre><code>\nVal(&quot;&amp;HFFFF&quot;)\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> The <code>Val</code> function recognizes only the period (<code>.</code>) as a valid decimal separator. When other decimal separators are used, as in international applications, use <code>CDbl</code> or <code>CInt</code> instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type&#39;s <code>Parse(String, IFormatProvider)</code> method. For example, use <a class=\"xref\" href=\"system.double#System_Double_Parse_\" data-linktype=\"relative-path\">Parse</a> when converting a string to a <code>Double</code>.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> An <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  </p>\n<p> <code>&#39; These examples cause run-time errors.</code>  </p>\n<p> <code>&#39;Console.WriteLine(Val(&quot;1.34%&quot;))</code>  </p>\n<p> <code>&#39;Console.WriteLine(Val(&quot;1.34&amp;&quot;))</code>  </p>\n<p> The conflict between the number formatted as a <code>Double</code> and the <code>Integer</code> and <code>Long</code> type characters would be caught by the compiler if the conflict were not contained in strings.  </p>\n<p> <code>&#39; These examples cause compiler errors.</code>  </p>\n<p> <code>&#39;Dim m = 1.34%</code>  </p>\n<p> <code>&#39;Dim n = 1.34&amp;</code></p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>Val</code> function to return the numbers contained in each string. <code>Val</code> stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#54\">        Dim valResult As Double\n        &#39; The following line of code sets valResult to 2457.\n        valResult = Val(&quot;2457&quot;)\n        &#39; The following line of code sets valResult to 2457.\n        valResult = Val(&quot; 2 45 7&quot;)\n        &#39; The following line of code sets valResult to 24.\n        valResult = Val(&quot;24 and 57&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualBasic.Conversion.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualBasic.Conversion.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.CTypeDynamic\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.CTypeDynamic&lt;TargetType&gt;\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.ErrorToString\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.Fix\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.Hex\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.Int\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.Oct\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.Str\">\r\n<meta name=\"APIName\" content=\"Microsoft.VisualBasic.Conversion.Val\">\r\n<meta name=\"APILocation\" content=\"Microsoft.VisualBasic.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5324e11a-13d4-ead3-809e-c3e65a6d8c09\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.VisualBasic\\Conversion.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The Conversion module contains the procedures used to perform various conversion operations.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.VisualBasic/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.VisualBasic.Conversion\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.VisualBasic.Conversion.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.VisualBasic.Conversion.yml","open_to_public_contributors":true,"api_name":["Microsoft.VisualBasic.Conversion","Microsoft.VisualBasic.Conversion.CTypeDynamic","Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>","Microsoft.VisualBasic.Conversion.ErrorToString","Microsoft.VisualBasic.Conversion.Fix","Microsoft.VisualBasic.Conversion.Hex","Microsoft.VisualBasic.Conversion.Int","Microsoft.VisualBasic.Conversion.Oct","Microsoft.VisualBasic.Conversion.Str","Microsoft.VisualBasic.Conversion.Val"],"api_location":["Microsoft.VisualBasic.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.VisualBasic.Conversion","Microsoft::VisualBasic::Conversion","Microsoft.VisualBasic.Conversion.CTypeDynamic","Microsoft::VisualBasic::Conversion::CTypeDynamic","Microsoft.VisualBasic.Conversion.CTypeDynamic``1","Microsoft::VisualBasic::Conversion::CTypeDynamic``1","Microsoft.VisualBasic.Conversion.ErrorToString","Microsoft::VisualBasic::Conversion::ErrorToString","Microsoft.VisualBasic.Conversion.Fix","Microsoft::VisualBasic::Conversion::Fix","Microsoft.VisualBasic.Conversion.Hex","Microsoft::VisualBasic::Conversion::Hex","Microsoft.VisualBasic.Conversion.Int","Microsoft::VisualBasic::Conversion::Int","Microsoft.VisualBasic.Conversion.Oct","Microsoft::VisualBasic::Conversion::Oct","Microsoft.VisualBasic.Conversion.Str","Microsoft::VisualBasic::Conversion::Str","Microsoft.VisualBasic.Conversion.Val","Microsoft::VisualBasic::Conversion::Val"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5324e11a-13d4-ead3-809e-c3e65a6d8c09","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.VisualBasic\\Conversion.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/Microsoft.VisualBasic/Conversion.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Conversion class | Microsoft Docs","_op_ogTitle":"Conversion class","description":"The Conversion module contains the procedures used to perform various conversion operations.\n","toc_asset_id":"_splitted/Microsoft.VisualBasic/toc.json","toc_rel":"_splitted/Microsoft.VisualBasic/toc.json","source_url":"","ms.assetid":"Microsoft.VisualBasic.Conversion","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualbasic.conversion","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.visualbasic.conversion","fileRelativePath":"Microsoft.VisualBasic.Conversion.html"},"themesRelativePathToOutputRoot":"_themes/"}