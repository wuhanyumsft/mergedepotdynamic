{"content":"    \r\n    <h1 id=\"System_Net_NetworkInformation_IPv4InterfaceProperties\">\r\n      <span class=\"lang-csharp\">IPv4InterfaceProperties</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about network interfaces that support Internet Protocol version 4 (IPv4).</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class IPv4InterfaceProperties</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">IPv4InterfaceProperties</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class provides access to configuration and address information for network interfaces that support IPv4. You do not create instances of this class; they are returned by the <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties#System_Net_NetworkInformation_IPInterfaceProperties_GetIPv4Properties_\" data-linktype=\"relative-path\">GetIPv4Properties</a> method.  </p>\n<p> For IPV6 properties, see <a class=\"xref\" href=\"system.net.networkinformation.ipinterfaceproperties#System_Net_NetworkInformation_IPInterfaceProperties_GetIPv6Properties_\" data-linktype=\"relative-path\">GetIPv6Properties</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPv4InterfaceProperties__ctor\" data-linktype=\"self-bookmark\">IPv4InterfaceProperties()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPv4InterfaceProperties_Index\" data-linktype=\"self-bookmark\">Index</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the index of the network interface associated with the Internet Protocol version 4 (IPv4) address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPv4InterfaceProperties_IsAutomaticPrivateAddressingActive\" data-linktype=\"self-bookmark\">IsAutomaticPrivateAddressingActive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this interface has an automatic private IP addressing (APIPA) address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPv4InterfaceProperties_IsAutomaticPrivateAddressingEnabled\" data-linktype=\"self-bookmark\">IsAutomaticPrivateAddressingEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this interface has automatic private IP addressing (APIPA) enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPv4InterfaceProperties_IsDhcpEnabled\" data-linktype=\"self-bookmark\">IsDhcpEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the interface is configured to use a Dynamic Host Configuration Protocol (DHCP) server to obtain an IP address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPv4InterfaceProperties_IsForwardingEnabled\" data-linktype=\"self-bookmark\">IsForwardingEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this interface can forward (route) packets.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPv4InterfaceProperties_Mtu\" data-linktype=\"self-bookmark\">Mtu</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum transmission unit (MTU) for this network interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_NetworkInformation_IPv4InterfaceProperties_UsesWins\" data-linktype=\"self-bookmark\">UsesWins</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether an interface uses Windows Internet Name Service (WINS).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPv4InterfaceProperties__ctor\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPv4InterfaceProperties__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IPv4InterfaceProperties()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected IPv4InterfaceProperties ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor can be called only by classes that derive from <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_Index\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_Index_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Index</div>        \r\n          </div>\r\n    \r\n            <p>Gets the index of the network interface associated with the Internet Protocol version 4 (IPv4) address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int Index { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that contains the index of the IPv4 interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of this property is zero, IPv4 is not supported by this interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets an <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> object and displays its data.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_IsAutomaticPrivateAddressingActive\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_IsAutomaticPrivateAddressingActive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAutomaticPrivateAddressingActive</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this interface has an automatic private IP addressing (APIPA) address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsAutomaticPrivateAddressingActive { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the interface uses an APIPA address; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Automatic private IP addressing allows computers that do not have access to a Dynamic Host Configuration Protocol (DHCP) server to be automatically assigned an IP address that does not conflict with public addresses. These addresses are in the range 169.254.0.0 to 169.254.255.255.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets an <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> object and displays its data.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_IsAutomaticPrivateAddressingEnabled\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_IsAutomaticPrivateAddressingEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAutomaticPrivateAddressingEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this interface has automatic private IP addressing (APIPA) enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsAutomaticPrivateAddressingEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the interface uses APIPA; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Automatic private IP addressing allows computers that do not have access to a Dynamic Host Configuration Protocol (DHCP) server to be automatically assigned an IP address that does not conflict with public addresses. These addresses are in the range 169.254.0.0 to 169.254.255.255.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets an <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> object and displays its data.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_IsDhcpEnabled\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_IsDhcpEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDhcpEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the interface is configured to use a Dynamic Host Configuration Protocol (DHCP) server to obtain an IP address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsDhcpEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the interface is configured to obtain an IP address from a DHCP server; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this property is <code>true</code>, a DHCP server assigns the IP address to the interface when the computer establishes its network connections.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets an <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> object and displays its data.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_IsForwardingEnabled\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_IsForwardingEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsForwardingEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this interface can forward (route) packets.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsForwardingEnabled { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this interface routes packets; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If routing is disabled, packets that are received by the interface with a destination address that is not held by the interface are discarded.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets an <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> object and displays its data.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_Mtu\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_Mtu_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mtu</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum transmission unit (MTU) for this network interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int Mtu { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value that specifies the MTU.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MTU of a network interface is the largest packet that can be transmitted. It is measured in octets (8-bit bytes).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets an <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> object and displays its data.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_UsesWins\">\r\n    \r\n            <a id=\"System_Net_NetworkInformation_IPv4InterfaceProperties_UsesWins_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UsesWins</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether an interface uses Windows Internet Name Service (WINS).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool UsesWins { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the interface uses WINS; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>WINS provides a distributed database for registering and querying dynamic NetBIOS names to IPv4 address mappings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets an <a class=\"xref\" href=\"system.net.networkinformation.ipv4interfaceproperties\" data-linktype=\"relative-path\">IPv4InterfaceProperties</a> object and displays its data.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#48\">        public static void DisplayIPv4NetworkInterfaces()\n        {\n            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();\n            IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();\n            Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;,\n               properties.HostName, properties.DomainName);\n            Console.WriteLine();   \n\n            foreach (NetworkInterface adapter in nics)\n            {\n                // Only display informatin for interfaces that support IPv4.\n                if (adapter.Supports(NetworkInterfaceComponent.IPv4) == false)\n                {\n                    continue;\n                }\n                Console.WriteLine(adapter.Description);\n                // Underline the description.\n                Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length,&#39;=&#39;));\n                IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n                // Try to get the IPv4 interface properties.\n                IPv4InterfaceProperties p = adapterProperties.GetIPv4Properties();\n                \n                if (p == null)\n                {\n                    Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;);\n                    Console.WriteLine();\n                    continue;\n                }\n                // Display the IPv4 specific data.\n                Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index);\n                Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu);\n                Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingActive);\n                Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, \n                    p.IsAutomaticPrivateAddressingEnabled);\n                Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, \n                    p.IsForwardingEnabled);\n                Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, \n                    p.UsesWins);\n                Console.WriteLine();\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#48\">    Public Shared Sub DisplayIPv4NetworkInterfaces() \n        Dim nics As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n        Dim properties As IPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties()\n        Console.WriteLine(&quot;IPv4 interface information for {0}.{1}&quot;, properties.HostName, properties.DomainName)\n        \n        Dim adapter As NetworkInterface\n        For Each adapter In  nics\n            &#39; Only display informatin for interfaces that support IPv4.\n            If adapter.Supports(NetworkInterfaceComponent.IPv4) = False Then\n                GoTo ContinueForEach1\n            End If\n            Console.WriteLine()\n            Console.WriteLine(adapter.Description)\n            &#39; Underline the description.\n            Console.WriteLine(String.Empty.PadLeft(adapter.Description.Length, &quot;=&quot;c))\n            Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n            &#39; Try to get the IPv4 interface properties.\n            Dim p As IPv4InterfaceProperties = adapterProperties.GetIPv4Properties()\n            \n            If p Is Nothing Then\n                Console.WriteLine(&quot;No IPv4 information is available for this interface.&quot;)\n                GoTo ContinueForEach1\n            End If\n            &#39; Display the IPv4 specific data.\n            Console.WriteLine(&quot;  Index ............................. : {0}&quot;, p.Index)\n            Console.WriteLine(&quot;  MTU ............................... : {0}&quot;, p.Mtu)\n            Console.WriteLine(&quot;  APIPA active....................... : {0}&quot;, p.IsAutomaticPrivateAddressingActive)\n            Console.WriteLine(&quot;  APIPA enabled...................... : {0}&quot;, p.IsAutomaticPrivateAddressingEnabled)\n            Console.WriteLine(&quot;  Forwarding enabled................. : {0}&quot;, p.IsForwardingEnabled)\n            Console.WriteLine(&quot;  Uses WINS ......................... : {0}&quot;, p.UsesWins)\n        ContinueForEach1:\n        Next adapter\n    \n    End Sub &#39;DisplayIPv4NetworkInterfaces\n    \n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#48\">void DisplayIPv4NetworkInterfaces()\n{\n   array&lt;NetworkInterface^&gt;^nics = NetworkInterface::GetAllNetworkInterfaces();\n   IPGlobalProperties ^ properties = IPGlobalProperties::GetIPGlobalProperties();\n   Console::WriteLine( &quot;IPv4 interface information for {0}.{1}&quot;, properties-&gt;HostName, properties-&gt;DomainName );\n   System::Collections::IEnumerator^ myEnum23 = nics-&gt;GetEnumerator();\n   while ( myEnum23-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum23-&gt;Current);\n\n      // Only display informatin for interfaces that support IPv4.\n      if ( adapter-&gt;Supports( NetworkInterfaceComponent::IPv4 ) == false )\n      {\n         continue;\n      }\n      Console::WriteLine();\n      Console::WriteLine( adapter-&gt;Description );\n\n      // Underline the description.\n      Console::WriteLine( String::Empty-&gt;PadLeft( adapter-&gt;Description-&gt;Length, &#39;=&#39; ) );\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n\n      // Try to get the IPv4 interface properties.\n      IPv4InterfaceProperties ^ p = adapterProperties-&gt;GetIPv4Properties();\n      if ( !p )\n      {\n         Console::WriteLine( &quot;No IPv4 information is available for this interface.&quot; );\n         continue;\n      }\n\n      // Display the IPv4 specific data.\n      Console::WriteLine( &quot;  Index ............................. : {0}&quot;, \n         p-&gt;Index );\n      Console::WriteLine( &quot;  MTU ............................... : {0}&quot;, \n         p-&gt;Mtu );\n      Console::WriteLine( &quot;  APIPA active....................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingActive );\n      Console::WriteLine( &quot;  APIPA enabled...................... : {0}&quot;, \n         p-&gt;IsAutomaticPrivateAddressingEnabled );\n      Console::WriteLine( &quot;  Forwarding enabled................. : {0}&quot;, \n         p-&gt;IsForwardingEnabled );\n      Console::WriteLine( &quot;  Uses WINS ......................... : {0}&quot;, \n         p-&gt;UsesWins );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.IPv4InterfaceProperties.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.IPv4InterfaceProperties.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties.Index\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e540db66-29a2-0620-27a5-19c2692f483d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net.NetworkInformation\\IPv4InterfaceProperties.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about network interfaces that support Internet Protocol version 4 (IPv4).\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.NetworkInformation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.IPv4InterfaceProperties\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.NetworkInformation.IPv4InterfaceProperties.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.NetworkInformation.IPv4InterfaceProperties.yml","open_to_public_contributors":true,"api_name":["System.Net.NetworkInformation.IPv4InterfaceProperties","System.Net.NetworkInformation.IPv4InterfaceProperties..ctor","System.Net.NetworkInformation.IPv4InterfaceProperties.Index","System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive","System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled","System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled","System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled","System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu","System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.IPv4InterfaceProperties","System::Net::NetworkInformation::IPv4InterfaceProperties","System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor","System::Net::NetworkInformation::IPv4InterfaceProperties::#ctor","System.Net.NetworkInformation.IPv4InterfaceProperties.Index","System::Net::NetworkInformation::IPv4InterfaceProperties::Index","System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive","System::Net::NetworkInformation::IPv4InterfaceProperties::IsAutomaticPrivateAddressingActive","System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled","System::Net::NetworkInformation::IPv4InterfaceProperties::IsAutomaticPrivateAddressingEnabled","System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled","System::Net::NetworkInformation::IPv4InterfaceProperties::IsDhcpEnabled","System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled","System::Net::NetworkInformation::IPv4InterfaceProperties::IsForwardingEnabled","System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu","System::Net::NetworkInformation::IPv4InterfaceProperties::Mtu","System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins","System::Net::NetworkInformation::IPv4InterfaceProperties::UsesWins"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e540db66-29a2-0620-27a5-19c2692f483d","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net.NetworkInformation\\IPv4InterfaceProperties.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.NetworkInformation/IPv4InterfaceProperties.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IPv4InterfaceProperties class | Microsoft Docs","_op_ogTitle":"IPv4InterfaceProperties class","description":"Provides information about network interfaces that support Internet Protocol version 4 (IPv4).\n","toc_asset_id":"_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.IPv4InterfaceProperties","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.ipv4interfaceproperties","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.networkinformation.ipv4interfaceproperties","fileRelativePath":"System.Net.NetworkInformation.IPv4InterfaceProperties.html"},"themesRelativePathToOutputRoot":"_themes/"}