{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">StructLayoutAttribute</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Lets you control the physical layout of the data fields of a class or structure in memory.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class StructLayoutAttribute : Attribute</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">System.Attribute</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">StructLayoutAttribute</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"relative-path\">GetCustomAttributes(Module)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefaultAttribute\" data-linktype=\"relative-path\">IsDefaultAttribute()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">IsDefined(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">IsDefined(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Match_System_Object_\" data-linktype=\"relative-path\">Match(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetTypeInfo(UInt32,UInt32,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Attribute.GetTypeInfoCount(UInt32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId\" data-linktype=\"relative-path\">TypeId</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can apply this attribute to classes or structures.  </p>\n<p> The common language runtime controls the physical layout of the data fields of a class or structure in managed memory. However, if you want to pass the type to unmanaged code, you can use the StructLayoutAttribute attribute to control the unmanaged layout of the type. Use the attribute with <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> to force the members to be laid out sequentially in the order they appear. For , <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> controls both the layout in managed memory and the layout in unmanaged memory. For non-blittable types, it controls the layout when the class or structure is marshaled to unmanaged code, but does not control the layout in managed memory. Use the attribute with <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> to control the precise position of each data member. This affects both managed and unmanaged layout, for both blittable and non-blittable types. Using <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> requires that you use the <a class=\"xref\" href=\"system.runtime.interopservices.fieldoffsetattribute\" data-linktype=\"relative-path\">FieldOffsetAttribute</a> attribute to indicate the position of each field within the type.  </p>\n<p> C#, Visual Basic, and C++ compilers apply the <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">LayoutKind</a> layout value to structures by default. For classes, you must apply the <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> value explicitly. The <a href=\"../Topic/Tlbimp.exe%20(Type%20Library%20Importer).md\" data-linktype=\"relative-path\">Tlbimp.exe (Type Library Importer)</a> also applies the StructLayoutAttribute attribute; it always applies the <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> value when it imports a type library.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_InteropServices_StructLayoutAttribute__ctor_System_Int16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StructLayoutAttribute(Int16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initalizes a new instance of the <a class=\"xref\" href=\"system.runtime.interopservices.structlayoutattribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a> class with the specified <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">LayoutKind</a> enumeration member.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public StructLayoutAttribute (short layoutKind);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>layoutKind</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 16-bit integer that represents one of the <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">LayoutKind</a> values that specifes how the class or structure should be arranged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor takes an underlying 16-bit integer that represents each <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">LayoutKind</a> enumeration member. The <a href=\"../Topic/Tlbimp.exe%20(Type%20Library%20Importer).md\" data-linktype=\"relative-path\">Tlbimp.exe (Type Library Importer)</a> uses this constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_InteropServices_StructLayoutAttribute__ctor_System_Runtime_InteropServices_LayoutKind_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StructLayoutAttribute(LayoutKind)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initalizes a new instance of the <a class=\"xref\" href=\"system.runtime.interopservices.structlayoutattribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a> class with the specified <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">LayoutKind</a> enumeration member.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>layoutKind</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">LayoutKind</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifes how the class or structure should be arranged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For readable code that is less prone to error, always use this constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_InteropServices_StructLayoutAttribute_CharSet\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CharSet</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether string data fields within the class should be marshaled as <code>LPWSTR</code> or <code>LPSTR</code> by default.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Runtime.InteropServices.CharSet CharSet;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <code>CharSet</code> field is set to <a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">System.Runtime.InteropServices.CharSet</a>, all string arguments are converted to Unicode characters (<code>LPWSTR</code>) before they are passed to the unmanaged implementation. If the field is set to <a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">System.Runtime.InteropServices.CharSet</a>, the strings are converted to ANSI strings (<code>LPSTR</code>). If the <code>CharSet</code> field is set to <a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">System.Runtime.InteropServices.CharSet</a>, the conversion is platform-dependent (ANSI on Windows 98 and Windows Me, and Unicode on later versions).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_InteropServices_StructLayoutAttribute_Pack\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Pack</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Controls the alignment of data fields of a class or structure in memory.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Pack;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Pack field controls the alignment of a type&#39;s fields in memory.  It affects both <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a> and <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">System.Runtime.InteropServices.LayoutKind</a>. By default, the value is 0, indicating the default packing size for the current platform. The value of Pack must be 0, 1, 2, 4, 8, 16, 32, 64, or 128:  </p>\n<p> The fields of a type instance are aligned by using the following rules:  </p>\n<ul>\n<li><p>The alignment of the type is the size of its largest element (1, 2, 4, 8, etc., bytes) or the specified packing size, whichever is smaller.  </p>\n</li>\n<li><p>Each field must align with fields of its own size (1, 2, 4, 8, etc., bytes) or the alignment of the type, whichever is smaller.  Because the default alignment of the type is the size of its largest element, which is greater than or equal to all other field lengths, this usually means that fields are aligned by their size. For example, even if the largest field in a type is a 64-bit (8-byte) integer or the Pack field is set to 8, <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> fields align on 1-byte boundaries, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> fields align on 2-byte boundaries, and <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> fields align on 4-byte boundaries.  </p>\n</li>\n<li><p>Padding is added between fields to satisfy the alignment requirements.  </p>\n<p>For example, consider the following structure, which consists of two <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> fields and one <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> field, when it is used with various values for the Pack field.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack#1\">using System;\n\nstruct ExampleStruct\n{\n   public byte b1;\n   public byte b2;\n   public int i3;\n}\n</code></pre></li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> To successfully compile the C# examples, you must specify the <code>/unsafe</code> compiler switch.  </p>\n</div>\n<p> If you specify the default packing size, the size of the structure is 8 bytes. The two bytes occupy the first two bytes of memory, because bytes must align on one-byte boundaries. Because the default alignment of the type is 4 bytes, which is the size of its largest fields, <code>i3</code>, there are two bytes of padding followed by the integer field.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack#2\">using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential, Pack=0)]\nstruct ExampleStruct\n{\n   public byte b1;\n   public byte b2;\n   public int i3;\n}\n\npublic class Example\n{\n   public unsafe static void Main()\n   {\n\n      ExampleStruct ex = new ExampleStruct();\n      byte* addr = (byte*) &amp;ex;\n      Console.WriteLine(&quot;Size:      {0}&quot;, sizeof(ExampleStruct));\n      Console.WriteLine(&quot;b1 Offset: {0}&quot;, &amp;ex.b1 - addr);\n      Console.WriteLine(&quot;b2 Offset: {0}&quot;, &amp;ex.b2 - addr);\n      Console.WriteLine(&quot;i3 Offset: {0}&quot;, (byte*) &amp;ex.i3 - addr);\n   }\n}\n// The example displays the following output:\n//       Size:      8\n//       b1 Offset: 0\n//       b2 Offset: 1\n//       i3 Offset: 4\n</code></pre><p> If Pack is set to 2, the size of the structure is 6 bytes. As before, the two bytes occupy the first two bytes of memory. Because fields now align on 2-byte boundaries, there is no padding between the second byte and the integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack#3\">using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential, Pack=2)]\nstruct ExampleStruct\n{\n   public byte b1;\n   public byte b2;\n   public int i3;\n}\n\npublic class Example\n{\n   public unsafe static void Main()\n   {\n\n      ExampleStruct ex = new ExampleStruct();\n      byte* addr = (byte*) &amp;ex;\n      Console.WriteLine(&quot;Size:      {0}&quot;, sizeof(ExampleStruct));\n      Console.WriteLine(&quot;b1 Offset: {0}&quot;, &amp;ex.b1 - addr);\n      Console.WriteLine(&quot;b2 Offset: {0}&quot;, &amp;ex.b2 - addr);\n      Console.WriteLine(&quot;i3 Offset: {0}&quot;, (byte*) &amp;ex.i3 - addr);\n   }\n}\n// The example displays the following output:\n//       Size:      6\n//       b1 Offset: 0\n//       b2 Offset: 1\n//       i3 Offset: 2\n</code></pre><p> If Pack is set to 4, the size of the structure is the same as in the default case, where the type&#39;s alignment was defined by the size of its largest field, <code>i3</code>, which is 4.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack#4\">using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential, Pack=4)]\nstruct ExampleStruct\n{\n   public byte b1;\n   public byte b2;\n   public int i3;\n}\n\npublic class Example\n{\n   public unsafe static void Main()\n   {\n\n      ExampleStruct ex = new ExampleStruct();\n      byte* addr = (byte*) &amp;ex;\n      Console.WriteLine(&quot;Size:      {0}&quot;, sizeof(ExampleStruct));\n      Console.WriteLine(&quot;b1 Offset: {0}&quot;, &amp;ex.b1 - addr);\n      Console.WriteLine(&quot;b2 Offset: {0}&quot;, &amp;ex.b2 - addr);\n      Console.WriteLine(&quot;i3 Offset: {0}&quot;, (byte*) &amp;ex.i3 - addr);\n   }\n}\n// The example displays the following output:\n//       Size:      8\n//       b1 Offset: 0\n//       b2 Offset: 1\n//       i3 Offset: 4\n</code></pre><p> If Pack is set to 8, the size of the structure is the still same as in the default case, because the <code>i3</code> field aligns on a 4-byte boundary, which is smaller than the 8-byte boundary specified by the Pack field.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack#5\">using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential, Pack=8)]\nstruct ExampleStruct\n{\n   public byte b1;\n   public byte b2;\n   public int i3;\n}\n\npublic class Example\n{\n   public unsafe static void Main()\n   {\n\n      ExampleStruct ex = new ExampleStruct();\n      byte* addr = (byte*) &amp;ex;\n      Console.WriteLine(&quot;Size:      {0}&quot;, sizeof(ExampleStruct));\n      Console.WriteLine(&quot;b1 Offset: {0}&quot;, &amp;ex.b1 - addr);\n      Console.WriteLine(&quot;b2 Offset: {0}&quot;, &amp;ex.b2 - addr);\n      Console.WriteLine(&quot;i3 Offset: {0}&quot;, (byte*) &amp;ex.i3 - addr);\n   }\n}\n// The example displays the following output:\n//       Size:      8\n//       b1 Offset: 0\n//       b2 Offset: 1\n//       i3 Offset: 4\n</code></pre><p> To take another example, consider the following structure, which consists of two byte fields, one 32-bit signed integer field, one single-element byte array, and a decimal value. With the default packing size, the size of the structure is 28 bytes. The two bytes occupy the first two bytes of memory, followed by two bytes of padding, followed by the integer. Next is the one-byte array, followed by three bytes of padding. Finally, the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> field, d5, aligns on a 4-byte boundary because a decimal value consists of four <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> fields, so its alignment is based on the size of the largest of its fields rather than on the size of the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> structure as a whole.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack#6\">using System;\nusing System.Runtime.InteropServices;\n\nunsafe struct ExampleStruct2\n{\n\n   public byte b1;\n   public byte b2;\n   public int i3;\n   public fixed byte a4[1];\n   public decimal d5;\n}\n\npublic class Example\n{\n   public unsafe static void Main()\n   {\n\n      ExampleStruct2 ex = new ExampleStruct2();\n      byte* addr = (byte*) &amp;ex;\n      Console.WriteLine(&quot;Size:      {0}&quot;, sizeof(ExampleStruct2));\n      Console.WriteLine(&quot;b1 Offset: {0}&quot;, &amp;ex.b1 - addr);\n      Console.WriteLine(&quot;b2 Offset: {0}&quot;, &amp;ex.b2 - addr);\n      Console.WriteLine(&quot;i3 Offset: {0}&quot;, (byte*) &amp;ex.i3 - addr);\n      Console.WriteLine(&quot;a4 Offset: {0}&quot;, ex.a4 - addr);\n      Console.WriteLine(&quot;d5 Offset: {0}&quot;, (byte*) &amp;ex.d5 - addr);\n   }\n}\n// The example displays the following output:\n//       Size:      28\n//       b1 Offset: 0\n//       b2 Offset: 1\n//       i3 Offset: 4\n//       a4 Offset: 8\n//       d5 Offset: 12\n</code></pre><p> If Pack is set to 2, the size of the structure is 24 bytes. In comparison with the default alignment, the two bytes of padding between the two bytes and the integer have been removed because the type&#39;s alignment is now 4 rather than 2. And the three bytes of padding after <code>a4</code> have been replaced by one byte of padding, since <code>d5</code> now aligns on a 2-byte boundary rather than a 4-byte boundary.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack#7\">using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential, Pack = 2)]\nunsafe struct ExampleStruct2\n{\n\n   public byte b1;\n   public byte b2;\n   public int i3;\n   public fixed byte a4[1];\n   public decimal d5;\n}\n\npublic class Example\n{\n   public unsafe static void Main()\n   {\n\n      ExampleStruct2 ex = new ExampleStruct2();\n      byte* addr = (byte*) &amp;ex;\n      Console.WriteLine(&quot;Size:      {0}&quot;, sizeof(ExampleStruct2));\n      Console.WriteLine(&quot;b1 Offset: {0}&quot;, &amp;ex.b1 - addr);\n      Console.WriteLine(&quot;b2 Offset: {0}&quot;, &amp;ex.b2 - addr);\n      Console.WriteLine(&quot;i3 Offset: {0}&quot;, (byte*) &amp;ex.i3 - addr);\n      Console.WriteLine(&quot;a4 Offset: {0}&quot;, ex.a4 - addr);\n      Console.WriteLine(&quot;d5 Offset: {0}&quot;, (byte*) &amp;ex.d5 - addr);\n   }\n}\n// The example displays the following output:\n//       Size:      24\n//       b1 Offset: 0\n//       b2 Offset: 1\n//       i3 Offset: 2\n//       a4 Offset: 6\n//       d5 Offset: 8\n</code></pre><p> If Pack is set to 8, the size of the structure is the same as in the default case, because all the alignment requirements in this structure are less than 8.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack#8\">using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential, Pack = 8)]\nunsafe struct ExampleStruct2\n{\n\n   public byte b1;\n   public byte b2;\n   public int i3;\n   public fixed byte a4[1];\n   public decimal d5;\n}\n\npublic class Example\n{\n   public unsafe static void Main()\n   {\n\n      ExampleStruct2 ex = new ExampleStruct2();\n      byte* addr = (byte*) &amp;ex;\n      Console.WriteLine(&quot;Size:      {0}&quot;, sizeof(ExampleStruct2));\n      Console.WriteLine(&quot;b1 Offset: {0}&quot;, &amp;ex.b1 - addr);\n      Console.WriteLine(&quot;b2 Offset: {0}&quot;, &amp;ex.b2 - addr);\n      Console.WriteLine(&quot;i3 Offset: {0}&quot;, (byte*) &amp;ex.i3 - addr);\n      Console.WriteLine(&quot;a4 Offset: {0}&quot;, ex.a4 - addr);\n      Console.WriteLine(&quot;d5 Offset: {0}&quot;, (byte*) &amp;ex.d5 - addr);\n   }\n}\n// The example displays the following output:\n//       Size:      28\n//       b1 Offset: 0\n//       b2 Offset: 1\n//       i3 Offset: 4\n//       a4 Offset: 8\n//       d5 Offset: 12\n</code></pre><p> The Pack field is frequently used when structures are exported during disk and network write operations. The field is also frequently used during platform invoke and interop operations.  </p>\n<p> Occasionally, the field is used to reduce memory requirements by producing a tighter packing size. However, this usage requires careful consideration of actual hardware constraints, and may actually degrade performance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_InteropServices_StructLayoutAttribute_Size\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Size</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates the absolute size of the class or structure.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Size;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This field must be equal or greater than the total size, in bytes, of the members of the class or structure. This field is primarily for compiler writers who want to extend the memory occupied by a structure for direct, unmanaged access. For example, you can use this field when working with unions that are not represented in metadata directly.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_InteropServices_StructLayoutAttribute_Value\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Value</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">LayoutKind</a> value that specifies how the class or structure is arranged.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Runtime.InteropServices.LayoutKind Value { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.layoutkind\" data-linktype=\"relative-path\">LayoutKind</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies how the class or structure is arranged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.InteropServices.StructLayoutAttribute.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.InteropServices.StructLayoutAttribute.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.StructLayoutAttribute\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.StructLayoutAttribute..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.StructLayoutAttribute.CharSet\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.StructLayoutAttribute.Size\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.StructLayoutAttribute.Value\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9c840171-5ae0-f80e-c6b2-d5b1d1d42e03\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Lets you control the physical layout of the data fields of a class or structure in memory.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.InteropServices/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.InteropServices.StructLayoutAttribute\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.InteropServices.StructLayoutAttribute.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.InteropServices.StructLayoutAttribute.yml","open_to_public_contributors":true,"api_name":["System.Runtime.InteropServices.StructLayoutAttribute","System.Runtime.InteropServices.StructLayoutAttribute..ctor","System.Runtime.InteropServices.StructLayoutAttribute.CharSet","System.Runtime.InteropServices.StructLayoutAttribute.Pack","System.Runtime.InteropServices.StructLayoutAttribute.Size","System.Runtime.InteropServices.StructLayoutAttribute.Value"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.InteropServices.StructLayoutAttribute","System::Runtime::InteropServices::StructLayoutAttribute","System.Runtime.InteropServices.StructLayoutAttribute.#ctor","System::Runtime::InteropServices::StructLayoutAttribute::#ctor","System.Runtime.InteropServices.StructLayoutAttribute.CharSet","System::Runtime::InteropServices::StructLayoutAttribute::CharSet","System.Runtime.InteropServices.StructLayoutAttribute.Pack","System::Runtime::InteropServices::StructLayoutAttribute::Pack","System.Runtime.InteropServices.StructLayoutAttribute.Size","System::Runtime::InteropServices::StructLayoutAttribute::Size","System.Runtime.InteropServices.StructLayoutAttribute.Value","System::Runtime::InteropServices::StructLayoutAttribute::Value"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9c840171-5ae0-f80e-c6b2-d5b1d1d42e03","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.InteropServices/StructLayoutAttribute.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StructLayoutAttribute class | Microsoft Docs","_op_ogTitle":"StructLayoutAttribute class","description":"Lets you control the physical layout of the data fields of a class or structure in memory.\n","toc_asset_id":"_splitted/System.Runtime.InteropServices/toc.json","toc_rel":"_splitted/System.Runtime.InteropServices/toc.json","source_url":"","ms.assetid":"System.Runtime.InteropServices.StructLayoutAttribute","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.interopservices.structlayoutattribute","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.interopservices.structlayoutattribute","fileRelativePath":"System.Runtime.InteropServices.StructLayoutAttribute.html"},"themesRelativePathToOutputRoot":"_themes/"}