{"content":"    \r\n    <h1 id=\"System_Net_HttpListener\">\r\n      <span class=\"lang-csharp\">HttpListener</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class HttpListener : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HttpListener</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Using the HttpListener class, you can create a simple HTTP protocol listener that responds to HTTP requests. The listener is active for the lifetime of the HttpListener object and runs within your application with its permissions.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems. If you attempt to create an HttpListener object on a computer that is running an earlier operating system, the constructor throws a <a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a> exception.  </p>\n</div>\n<p> To use HttpListener, create a new instance of the class using the HttpListener constructor and use the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Prefixes_\" data-linktype=\"relative-path\">Prefixes</a> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier (URI) prefixes the HttpListener should process.  </p>\n<p> A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path. An example of a complete prefix string is &quot;<code>http://www.contoso.com:8080/customerData``/</code>&quot;. Prefixes must end in a forward slash (&quot;/&quot;). The HttpListener object with the prefix that most closely matches a requested URI responds to the request. Multiple HttpListener objects cannot add the same prefix; a <a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a> exception is thrown if a HttpListener adds a prefix that is already in use.  </p>\n<p> When a port is specified, the host element can be replaced with &quot;<em>&quot; to indicate that the HttpListener accepts requests sent to the port if the requested URI does not match any other prefix. For example, to receive all requests sent to port 8080 when the requested URI is not handled by any HttpListener, the prefix is &quot;`http://</em>:8080<code>`/</code>&quot;. Similarly, to specify that the HttpListener accepts all requests sent to a port, replace the host element with the &quot;+&quot; character, &quot;<code>https://+:8080</code>&quot;. The &quot;*&quot; and &quot;+&quot; characters can be present in prefixes that include paths.  </p>\n<p> Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an HttpListener object. To specify a wildcard subdomain, use the &quot;<em>&quot; character as part of the hostname in a URI prefix: for example, `http://</em>.foo.com/`, and pass this as the argument to the HttpListenerPrefixCollection.Add method. This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <a class=\"xref\" href=\"system.net.httplistenerexception\" data-linktype=\"relative-path\">HttpListenerException</a>  </p>\n<p> To begin listening for requests from clients, add the URI prefixes to the collection and call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Start_\" data-linktype=\"relative-path\">Start</a> method. HttpListener offers both synchronous and asynchronous models for processing client requests. Requests and their associated responses are accessed using the <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> object returned by the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_GetContext_\" data-linktype=\"relative-path\">GetContext</a> method or its asynchronous counterparts, the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_BeginGetContext_\" data-linktype=\"relative-path\">BeginGetContext</a> and <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_EndGetContext_\" data-linktype=\"relative-path\">EndGetContext</a> methods.  </p>\n<p> The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time. Using the synchronous model, call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_GetContext_\" data-linktype=\"relative-path\">GetContext</a> method, which waits for a client to send a request. The method returns an <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> object to you for processing when one occurs.  </p>\n<p> In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread. Use the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_BeginGetContext_\" data-linktype=\"relative-path\">BeginGetContext</a> method to specify an application-defined method to be called for each incoming request. Within that method, call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_EndGetContext_\" data-linktype=\"relative-path\">EndGetContext</a> method to obtain the request, process it, and respond.  </p>\n<p> In either model, incoming requests are accessed using the <a class=\"xref\" href=\"system.net.httplistenercontext#System_Net_HttpListenerContext_Request_\" data-linktype=\"relative-path\">Request</a> property and are represented by <a class=\"xref\" href=\"system.net.httplistenerrequest\" data-linktype=\"relative-path\">HttpListenerRequest</a> objects. Similarly, responses are accessed using the <a class=\"xref\" href=\"system.net.httplistenercontext#System_Net_HttpListenerContext_Response_\" data-linktype=\"relative-path\">Response</a> property and are represented by <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> objects. These objects share some functionality with the <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> and <a class=\"xref\" href=\"system.net.httpwebresponse\" data-linktype=\"relative-path\">HttpWebResponse</a> objects, but the latter objects cannot be used in conjunction with HttpListener because they implement client, not server, behaviors.  </p>\n<p> An HttpListener can require client authentication. You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use. You must require some form of authentication to obtain information about the client&#39;s identity. For additional information, see the <a class=\"xref\" href=\"system.net.httplistenercontext#System_Net_HttpListenerContext_User_\" data-linktype=\"relative-path\">User</a>, <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_AuthenticationSchemes_\" data-linktype=\"relative-path\">AuthenticationSchemes</a>, and <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_AuthenticationSchemeSelectorDelegate_\" data-linktype=\"relative-path\">AuthenticationSchemeSelectorDelegate</a> properties.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you create an HttpListener using https, you must select a Server Certificate for that listener. Otherwise, an <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> query of this HttpListener will fail with an unexpected close of the connection.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> You can configure Server Certificates and other listener options by using HttpCfg.exe. See <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp\" data-linktype=\"external\">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/http/http/httpcfg_exe.asp</a> for more details. The executable is shipped with Windows Server 2003, or can be built from source code available in the Platform SDK.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If you specify multiple authentication schemes for the HttpListener, the listener will challenge clients in the following order: <code>Negotiate</code>, <code>NTLM</code>, <code>Digest</code>, and then <code>Basic</code>.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener__ctor\" data-linktype=\"self-bookmark\">HttpListener()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_AuthenticationSchemes\" data-linktype=\"self-bookmark\">AuthenticationSchemes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the scheme used to authenticate clients.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_AuthenticationSchemeSelectorDelegate\" data-linktype=\"self-bookmark\">AuthenticationSchemeSelectorDelegate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the delegate called to determine the protocol used to authenticate clients.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_DefaultServiceNames\" data-linktype=\"self-bookmark\">DefaultServiceNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_ExtendedProtectionPolicy\" data-linktype=\"self-bookmark\">ExtendedProtectionPolicy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Get or set the <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> to use for extended protection for a session.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_ExtendedProtectionSelectorDelegate\" data-linktype=\"self-bookmark\">ExtendedProtectionSelectorDelegate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Get or set the delegate called to determine the <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> to use for each request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_IgnoreWriteExceptions\" data-linktype=\"self-bookmark\">IgnoreWriteExceptions</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether your application receives exceptions that occur when an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> sends the response to the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_IsListening\" data-linktype=\"self-bookmark\">IsListening</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> has been started.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_IsSupported\" data-linktype=\"self-bookmark\">IsSupported</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> can be used with the current operating system.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_Prefixes\" data-linktype=\"self-bookmark\">Prefixes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Uniform Resource Identifier (URI) prefixes handled by this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_Realm\" data-linktype=\"self-bookmark\">Realm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the realm, or resource partition, associated with this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_TimeoutManager\" data-linktype=\"self-bookmark\">TimeoutManager</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The timeout manager for this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_UnsafeConnectionNtlmAuthentication\" data-linktype=\"self-bookmark\">UnsafeConnectionNtlmAuthentication</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_Abort\" data-linktype=\"self-bookmark\">Abort()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Shuts down the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object immediately, discarding all currently queued requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_BeginGetContext_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginGetContext(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins asynchronously retrieving an incoming request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Shuts down the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_EndGetContext_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndGetContext(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes an asynchronous operation to retrieve an incoming client request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_GetContext\" data-linktype=\"self-bookmark\">GetContext()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for an incoming request and returns when one is received.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_GetContextAsync\" data-linktype=\"self-bookmark\">GetContextAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for an incoming request as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_Start\" data-linktype=\"self-bookmark\">Start()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allows this instance to receive incoming requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_Stop\" data-linktype=\"self-bookmark\">Stop()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes this instance to stop receiving incoming requests.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListener_System_IDisposable_Dispose\" data-linktype=\"self-bookmark\">IDisposable.Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the resources held by this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener__ctor\">\r\n    \r\n            <a id=\"System_Net_HttpListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HttpListener()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public HttpListener ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This class cannot be used on the current operating system. Windows Server 2003 or Windows XP SP2 is required to use instances of this class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Before using the instance returned by this constructor, you must invoke its <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Start_\" data-linktype=\"relative-path\">Start</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> constructor to create a new <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object. For the complete example, see the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> class topic.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_listener_Basic#9\">        // Set up a listener.\n        HttpListener listener = new HttpListener();\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_AuthenticationSchemes\">\r\n    \r\n            <a id=\"System_Net_HttpListener_AuthenticationSchemes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticationSchemes</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the scheme used to authenticate clients.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authenticationschemes\" data-linktype=\"relative-path\">AuthenticationSchemes</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.net.authenticationschemes\" data-linktype=\"relative-path\">AuthenticationSchemes</a> enumeration values that indicates how clients are to be authenticated. The default value is <a class=\"xref\" href=\"system.net.authenticationschemes\" data-linktype=\"relative-path\">AuthenticationSchemes</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> uses the specified scheme to authenticate all incoming requests. The <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_GetContext_\" data-linktype=\"relative-path\">GetContext</a> and <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_EndGetContext_\" data-linktype=\"relative-path\">EndGetContext</a> methods return an incoming client request only if the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> successfully authenticates the request.  </p>\n<p> You can interrogate the identity of a successfully authenticated client by using the <a class=\"xref\" href=\"system.net.httplistenercontext#System_Net_HttpListenerContext_User_\" data-linktype=\"relative-path\">User</a> property.  </p>\n<p> If you want an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request&#39;s <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_Url_\" data-linktype=\"relative-path\">Url</a> or <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_UserHostName_\" data-linktype=\"relative-path\">UserHostName</a> property), you must implement a method that chooses the authentication scheme. For instructions about how to do this, see the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_AuthenticationSchemeSelectorDelegate_\" data-linktype=\"relative-path\">AuthenticationSchemeSelectorDelegate</a> property documentation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To set this property to enable Digest, NTLM, or Negotiate requires the <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a>, <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the AuthenticationSchemes property to specify an authentication scheme.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_listener_Basic#14\">    public static void SimpleListenerWithUnsafeAuthentication(string[] prefixes)\n    {\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n        // Set up a listener.\n        HttpListener listener = new HttpListener();\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        // Specify Negotiate as the authentication scheme.\n        listener.AuthenticationSchemes = AuthenticationSchemes.Negotiate;\n        // If NTLM is used, we will allow multiple requests on the same\n        // connection to use the authentication information of first request.\n        // This improves performance but does reduce the security of your \n        // application. \n        listener.UnsafeConnectionNtlmAuthentication = true;\n        // This listener does not want to receive exceptions \n        // that occur when sending the response to the client.\n        listener.IgnoreWriteExceptions = true;\n        Console.WriteLine(&quot;Listening...&quot;);\n        // ... process requests here.\n\n        listener.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_AuthenticationSchemeSelectorDelegate\">\r\n    \r\n            <a id=\"System_Net_HttpListener_AuthenticationSchemeSelectorDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticationSchemeSelectorDelegate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the delegate called to determine the protocol used to authenticate clients.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authenticationschemeselector\" data-linktype=\"relative-path\">AuthenticationSchemeSelector</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.authenticationschemeselector\" data-linktype=\"relative-path\">AuthenticationSchemeSelector</a> delegate that invokes the method used to select an authentication protocol. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> If you want the same authentication protocol to be used for all requests handled by a particular instance of <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a>, you do not need to set this property. To specify a protocol to be used for all client requests, use the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_AuthenticationSchemes_\" data-linktype=\"relative-path\">AuthenticationSchemes</a> property.  </p>\n</div>\n<p> If the client has not specified authentication information in its headers, the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client. The <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_GetContext_\" data-linktype=\"relative-path\">GetContext</a> and <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_EndGetContext_\" data-linktype=\"relative-path\">EndGetContext</a> methods return an incoming request only if the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> successfully authenticated the request. If a request cannot be authenticated, the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> automatically sends back a 401 response. You can get the identity of a successfully authenticated client using the <a class=\"xref\" href=\"system.web.httprequest#System_Web_HttpRequest_LogonUserIdentity_\" data-linktype=\"relative-path\">LogonUserIdentity</a> property.  </p>\n<p> The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request&#39;s <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_Url_\" data-linktype=\"relative-path\">Url</a> or <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_UserHostAddress_\" data-linktype=\"relative-path\">UserHostAddress</a> property).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To set this property to enable Digest, NTLM, or Negotiate requires the <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a>, <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the value of this property.  </p>\n<pre><code class=\"lang-vb\" name=\"NclListener#2\">        &#39; Set up a listener.\n        Dim listener As New HttpListener()\n        Dim prefixes As HttpListenerPrefixCollection = listener.Prefixes\n        prefixes.Add(&quot;http://localhost:8080/&quot;)\n        prefixes.Add(&quot;http://contoso.com:8080/&quot;)\n\n        &#39; Specify the authentication delegate.\n        listener.AuthenticationSchemeSelectorDelegate = New AuthenticationSchemeSelector(AddressOf AuthenticationSchemeForClient)\n\n        &#39; Start listening for requests and process them \n        &#39; synchronously.\n        listener.Start()\n</code></pre><pre><code class=\"lang-cs\" name=\"NclListener#2\">        // Set up a listener.\n        HttpListener listener = new HttpListener();\n        HttpListenerPrefixCollection prefixes = listener.Prefixes;\n        prefixes.Add(@&quot;http://localhost:8080/&quot;);\n        prefixes.Add(@&quot;http://contoso.com:8080/&quot;);\n\n        // Specify the authentication delegate.\n        listener.AuthenticationSchemeSelectorDelegate = \n            new AuthenticationSchemeSelector (AuthenticationSchemeForClient);\n\n        // Start listening for requests and process them \n        // synchronously.\n        listener.Start();\n</code></pre><p> The following code example provides an implementation of a method invoked by an <a class=\"xref\" href=\"system.net.authenticationschemeselector\" data-linktype=\"relative-path\">AuthenticationSchemeSelector</a> delegate.  </p>\n<pre><code class=\"lang-vb\" name=\"NclListener#1\">    Private Shared Function AuthenticationSchemeForClient(ByVal request As HttpListenerRequest) As AuthenticationSchemes\n        Console.WriteLine(&quot;Client authentication protocol selection in progress...&quot;)\n        &#39; Do not authenticate local machine requests.\n        If request.RemoteEndPoint.Address.Equals(IPAddress.Loopback) Then\n            Return AuthenticationSchemes.None\n        Else\n            Return AuthenticationSchemes.IntegratedWindowsAuthentication\n        End If\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"NclListener#1\">    static AuthenticationSchemes AuthenticationSchemeForClient(HttpListenerRequest request)\n    {\n        Console.WriteLine(&quot;Client authentication protocol selection in progress...&quot;);\n        // Do not authenticate local machine requests.\n        if (request.RemoteEndPoint.Address.Equals (IPAddress.Loopback))\n        {\n            return AuthenticationSchemes.None;\n        }\n        else\n        {\n            return AuthenticationSchemes.IntegratedWindowsAuthentication;\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_DefaultServiceNames\">\r\n    \r\n            <a id=\"System_Net_HttpListener_DefaultServiceNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultServiceNames</div>        \r\n          </div>\r\n    \r\n            <p>Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.servicenamecollection\" data-linktype=\"relative-path\">ServiceNameCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.authentication.extendedprotection.servicenamecollection\" data-linktype=\"relative-path\">ServiceNameCollection</a> that contains a list of SPNs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DefaultServiceNames property is used with integrated Windows authentication to provide extended protection. The list of SPNs is initialized from the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Prefixes_\" data-linktype=\"relative-path\">Prefixes</a> property when accessed and cleared when new prefixes are added to the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Prefixes_\" data-linktype=\"relative-path\">Prefixes</a> property.  </p>\n<p> The DefaultServiceNames property is used if an application doesn&#39;t set the <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_CustomServiceNames_\" data-linktype=\"relative-path\">CustomServiceNames</a> property on its extended protection policy.  </p>\n<p> The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.servicenamecollection\" data-linktype=\"relative-path\">ServiceNameCollection</a> that is retrieved with the DefaultServiceNames property is built from the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Prefixes_\" data-linktype=\"relative-path\">Prefixes</a> property according to the following rules:  </p>\n<ol>\n<li><p>If the hostname is &quot;+&quot;, &quot;<em>&quot;, or an IPv4 or IPv6 literal (equivalent to &quot;\\</em>&quot; but restricted to a specific local interface), the following SPN is added:  </p>\n<p><code>&quot;HTTP/&quot;</code> plus the fully qualified domain name of the computer.  </p>\n</li>\n<li><p>If the hostname contains no dots (no domains or subdomains), an attempt is made to resolve the fully-qualified domain name using DNS (the same behavior used by <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a>). If the fully-qualified domain name can be resolved, the following SPNs are added:  </p>\n<p><code>&quot;HTTP/&quot;</code> plus the hostname (the short name).  </p>\n<p><code>&quot;HTTP/&quot;</code> plus the fully qualified domain name for the hostname.  </p>\n</li>\n<li><p>If the hostname contains not dots (no domains or subdomains) and a fully-qualified domain name can&#39;t be resolved, the following SPN is added:  </p>\n<p><code>&quot;HTTP/&quot;</code> plus the hostname.  </p>\n</li>\n<li><p>If the hostname contains dots (domains or subdomains), the following SPN is added:  </p>\n<p><code>&quot;HTTP/&quot;</code> plus the hostname.  </p>\n<p>The DefaultServiceNames property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied. If other SPNs are needed, an application can add them using one of the <a class=\"xref\" href=\"system.security.authentication.extendedprotection.servicenamecollection#System_Security_Authentication_ExtendedProtection_ServiceNameCollection_Merge_\" data-linktype=\"relative-path\">Merge</a> methods.  </p>\n<p>It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed. Rather, applications should rely on the <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_LocalEndPoint_\" data-linktype=\"relative-path\">LocalEndPoint</a> or <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_RemoteEndPoint_\" data-linktype=\"relative-path\">RemoteEndPoint</a> properties to make such policy decisions.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_ExtendedProtectionPolicy\">\r\n    \r\n            <a id=\"System_Net_HttpListener_ExtendedProtectionPolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExtendedProtectionPolicy</div>        \r\n          </div>\r\n    \r\n            <p>Get or set the <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> to use for extended protection for a session.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> that specifies the policy to use for extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the ExtendedProtectionPolicy property, but the <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*</span> property was not <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the ExtendedProtectionPolicy property to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the ExtendedProtectionPolicy property after the <span class=\"xref\">stem.Net.HttpListener.Start*</span> method was already called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement*</span> property was set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a> on a platform that does not support extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ExtendedProtectionPolicy property is used with integrated Windows authentication to provide extended protection. The ExtendedProtectionPolicy property allows the configuration of the extended protection policy for the whole <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> session. The <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_ExtendedProtectionSelectorDelegate_\" data-linktype=\"relative-path\">ExtendedProtectionSelectorDelegate</a> property allows the configuration of the extended protection policy for each individual request.  </p>\n<p> The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_CustomChannelBinding_\" data-linktype=\"relative-path\">CustomChannelBinding</a> property must be <code>null</code>. The <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_ExtendedProtectionSelectorDelegate\">\r\n    \r\n            <a id=\"System_Net_HttpListener_ExtendedProtectionSelectorDelegate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExtendedProtectionSelectorDelegate</div>        \r\n          </div>\r\n    \r\n            <p>Get or set the delegate called to determine the <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> to use for each request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistener.extendedprotectionselector\" data-linktype=\"relative-path\">HttpListener+ExtendedProtectionSelector</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> that specifies the policy to use for extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the ExtendedProtectionSelectorDelegate property, but the <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*</span> property must be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the ExtendedProtectionSelectorDelegate property to <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the ExtendedProtectionSelectorDelegate property after the <span class=\"xref\">stem.Net.HttpListener.Start*</span> method was already called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to set the ExtendedProtectionSelectorDelegate property on a platform that does not support extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_ExtendedProtectionPolicy_\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> property is used with integrated Windows authentication to provide extended protection. The <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_ExtendedProtectionPolicy_\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> property allows the configuration of the extended protection policy for the whole <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> session. The ExtendedProtectionSelectorDelegate property allows the configuration of the extended protection policy per individual request.  </p>\n<p> The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_CustomChannelBinding_\" data-linktype=\"relative-path\">CustomChannelBinding</a> property must be <code>null</code>. The <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.  </p>\n<p> For each request, the delegate can choose the settings that the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> instance will use to provide extended protection.  </p>\n<p> If a delegate returns <code>null</code> for this property, this represents a <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> which the <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_PolicyEnforcement_\" data-linktype=\"relative-path\">PolicyEnforcement</a> property set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_IgnoreWriteExceptions\">\r\n    \r\n            <a id=\"System_Net_HttpListener_IgnoreWriteExceptions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IgnoreWriteExceptions</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether your application receives exceptions that occur when an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> sends the response to the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IgnoreWriteExceptions { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> should not return exceptions that occur when sending the response to the client; otherwise <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to <code>true</code> if your application does not require that a response is successfully sent to each client.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#14\">    public static void SimpleListenerWithUnsafeAuthentication(string[] prefixes)\n    {\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n        // Set up a listener.\n        HttpListener listener = new HttpListener();\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        // Specify Negotiate as the authentication scheme.\n        listener.AuthenticationSchemes = AuthenticationSchemes.Negotiate;\n        // If NTLM is used, we will allow multiple requests on the same\n        // connection to use the authentication information of first request.\n        // This improves performance but does reduce the security of your \n        // application. \n        listener.UnsafeConnectionNtlmAuthentication = true;\n        // This listener does not want to receive exceptions \n        // that occur when sending the response to the client.\n        listener.IgnoreWriteExceptions = true;\n        Console.WriteLine(&quot;Listening...&quot;);\n        // ... process requests here.\n\n        listener.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_IsListening\">\r\n    \r\n            <a id=\"System_Net_HttpListener_IsListening_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsListening</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> has been started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsListening { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> was started; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To start an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a>, call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Start_\" data-linktype=\"relative-path\">Start</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property to determine the listening state of an instance.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#1\">    public static void DisplayPrefixesAndState(HttpListener listener)\n    {\n        // List the prefixes to which the server listens.\n        HttpListenerPrefixCollection prefixes = listener.Prefixes;\n        if (prefixes.Count == 0)\n        {\n            Console.WriteLine(&quot;There are no prefixes.&quot;);\n        }\n        foreach(string prefix in prefixes)\n        {\n            Console.WriteLine(prefix);\n        }\n        // Show the listening state.\n        if (listener.IsListening)\n        {\n            Console.WriteLine(&quot;The server is listening.&quot;);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_IsSupported\">\r\n    \r\n            <a id=\"System_Net_HttpListener_IsSupported_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSupported</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> can be used with the current operating system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSupported { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> is supported; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the IsSupported property to detect whether an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object can be used with the current operating system.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#2\">    // This example requires the System and System.Net namespaces.\n    public static void SimpleListenerExample(string[] prefixes)\n    {\n        if (!HttpListener.IsSupported)\n        {\n            Console.WriteLine (&quot;Windows XP SP2 or Server 2003 is required to use the HttpListener class.&quot;);\n            return;\n        }\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n        \n        // Create a listener.\n        HttpListener listener = new HttpListener();\n        // Add the prefixes.\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        Console.WriteLine(&quot;Listening...&quot;);\n        // Note: The GetContext method blocks while waiting for a request. \n        HttpListenerContext context = listener.GetContext();\n        HttpListenerRequest request = context.Request;\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Construct a response.\n        string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello world!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n        // Get a response stream and write the response to it.\n        response.ContentLength64 = buffer.Length;\n        System.IO.Stream output = response.OutputStream;\n        output.Write(buffer,0,buffer.Length);\n        // You must close the output stream.\n        output.Close();\n        listener.Stop();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_Prefixes\">\r\n    \r\n            <a id=\"System_Net_HttpListener_Prefixes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefixes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Uniform Resource Identifier (URI) prefixes handled by this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.HttpListenerPrefixCollection Prefixes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistenerprefixcollection\" data-linktype=\"relative-path\">HttpListenerPrefixCollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.httplistenerprefixcollection\" data-linktype=\"relative-path\">HttpListenerPrefixCollection</a> that contains the URI prefixes that this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object is configured to handle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The prefixes are in canonical form. For a detailed description of prefixes, see the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the Prefixes property to obtain and print the URI prefixes that are handled.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#1\">    public static void DisplayPrefixesAndState(HttpListener listener)\n    {\n        // List the prefixes to which the server listens.\n        HttpListenerPrefixCollection prefixes = listener.Prefixes;\n        if (prefixes.Count == 0)\n        {\n            Console.WriteLine(&quot;There are no prefixes.&quot;);\n        }\n        foreach(string prefix in prefixes)\n        {\n            Console.WriteLine(prefix);\n        }\n        // Show the listening state.\n        if (listener.IsListening)\n        {\n            Console.WriteLine(&quot;The server is listening.&quot;);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_Realm\">\r\n    \r\n            <a id=\"System_Net_HttpListener_Realm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Realm</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the realm, or resource partition, associated with this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Realm { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value that contains the name of the realm associated with the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database. Realms are used only for basic and digest authentication. After a client successfully authenticates, the authentication is valid for all resources in a given realm. For a detailed description of realms, see RFC 2617 at <a href=\"http://www.ietf.org\" data-linktype=\"external\">http://www.ietf.org</a>.  </p>\n<p> An instance of <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> has only one associated realm.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the Realm property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#10\">    public static void ConfigureListener1(HttpListener listener)\n    {\n        // Specify an authentication realm.\n        listener.Realm = &quot;ExampleRealm&quot;;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_TimeoutManager\">\r\n    \r\n            <a id=\"System_Net_HttpListener_TimeoutManager_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeoutManager</div>        \r\n          </div>\r\n    \r\n            <p>The timeout manager for this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistenertimeoutmanager\" data-linktype=\"relative-path\">HttpListenerTimeoutManager</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.net.httplistenertimeoutmanager\" data-linktype=\"relative-path\">HttpListenerTimeoutManager</a>.  </p>\n<p> The timeout manager for this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The timeout manager defines the connection timeout limits for this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> instance.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_UnsafeConnectionNtlmAuthentication\">\r\n    \r\n            <a id=\"System_Net_HttpListener_UnsafeConnectionNtlmAuthentication_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnsafeConnectionNtlmAuthentication</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UnsafeConnectionNtlmAuthentication { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.security.principal.iidentity\" data-linktype=\"relative-path\">IIdentity</a> of the first request will be used for subsequent requests on the same connection; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this property is set to <code>true</code> and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<a class=\"xref\" href=\"system.security.principal.iidentity\" data-linktype=\"relative-path\">IIdentity</a>) of the initial request.  </p>\n<p> This property has no effect when NTLM is not the authentication protocol. When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> While setting this property to <code>true</code> increases performance because the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information. You must determine whether the increase in performance is worth this risk.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#14\">    public static void SimpleListenerWithUnsafeAuthentication(string[] prefixes)\n    {\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n        // Set up a listener.\n        HttpListener listener = new HttpListener();\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        // Specify Negotiate as the authentication scheme.\n        listener.AuthenticationSchemes = AuthenticationSchemes.Negotiate;\n        // If NTLM is used, we will allow multiple requests on the same\n        // connection to use the authentication information of first request.\n        // This improves performance but does reduce the security of your \n        // application. \n        listener.UnsafeConnectionNtlmAuthentication = true;\n        // This listener does not want to receive exceptions \n        // that occur when sending the response to the client.\n        listener.IgnoreWriteExceptions = true;\n        Console.WriteLine(&quot;Listening...&quot;);\n        // ... process requests here.\n\n        listener.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_Abort\">\r\n    \r\n            <a id=\"System_Net_HttpListener_Abort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Abort()</div>        \r\n          </div>\r\n    \r\n            <p>Shuts down the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object immediately, discarding all currently queued requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Abort ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method disposes of all resources held by this listener. Any pending requests are unable to complete.  </p>\n<p> After calling this method, you will receive an <a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a> if you attempt to use this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#11\">    public static void CheckTestUrl(HttpListener listener, HttpListenerRequest request)\n    {\n        if (request.RawUrl == &quot;/www.contoso.com/test/NoReply&quot;)\n        {\n            listener.Abort ();\n            return;\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_BeginGetContext_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_HttpListener_BeginGetContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginGetContext(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins asynchronously retrieving an incoming request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginGetContext (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when a client request is available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object that contains information about the operation. This object is passed to the <code>callback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object that indicates the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistenerexception\" data-linktype=\"relative-path\">HttpListenerException</a></div>\r\n                  </div>\r\n                  <p>A Win32 function call failed. Check the exception&#39;s <span class=\"xref\">stem.Net.HttpListenerException.ErrorCode*</span> property to determine the cause of the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This object has not been started or is currently stopped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BeginGetContext method begins an asynchronous (non-blocking) call to receive incoming client requests. Before calling this method, you must call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Start_\" data-linktype=\"relative-path\">Start</a> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <a class=\"xref\" href=\"system.net.httplistenerprefixcollection\" data-linktype=\"relative-path\">HttpListenerPrefixCollection</a> returned by the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Prefixes_\" data-linktype=\"relative-path\">Prefixes</a> property.  </p>\n<p> The asynchronous operation must be completed by calling the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_EndGetContext_\" data-linktype=\"relative-path\">EndGetContext</a> method. Typically, the method is invoked by the <code>callback</code> delegate.  </p>\n<p> This method does not block while the operation completes. To get an incoming request and block until the operation completes, call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_GetContext_\" data-linktype=\"relative-path\">GetContext</a> method.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the BeginGetContext method to specify a callback method that will handle incoming client requests.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#12\">\n    public static void NonblockingListener(string [] prefixes)\n    {\n        HttpListener listener = new HttpListener();\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        IAsyncResult result = listener.BeginGetContext(new AsyncCallback(ListenerCallback),listener);\n        // Applications can do some work here while waiting for the \n        // request. If no work can be done until you have processed a request,\n        // use a wait handle to prevent this thread from terminating\n        // while the asynchronous operation completes.\n        Console.WriteLine(&quot;Waiting for request to be processed asyncronously.&quot;);\n        result.AsyncWaitHandle.WaitOne();\n        Console.WriteLine(&quot;Request processed asyncronously.&quot;);\n        listener.Close();\n    }\n</code></pre><p> The following code example implements a callback method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#13\">    public static void ListenerCallback(IAsyncResult result)\n    {\n        HttpListener listener = (HttpListener) result.AsyncState;\n        // Call EndGetContext to complete the asynchronous operation.\n        HttpListenerContext context = listener.EndGetContext(result);\n        HttpListenerRequest request = context.Request;\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Construct a response.\n        string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello world!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n        // Get a response stream and write the response to it.\n        response.ContentLength64 = buffer.Length;\n        System.IO.Stream output = response.OutputStream;\n        output.Write(buffer,0,buffer.Length);\n        // You must close the output stream.\n        output.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_Close\">\r\n    \r\n            <a id=\"System_Net_HttpListener_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Shuts down the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After calling this method, you can no longer use the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object. To temporarily pause an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object, use the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method.  </p>\n<p> This method shut downs the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object without processing queued requests. Any pending requests are unable to complete.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#2\">    // This example requires the System and System.Net namespaces.\n    public static void SimpleListenerExample(string[] prefixes)\n    {\n        if (!HttpListener.IsSupported)\n        {\n            Console.WriteLine (&quot;Windows XP SP2 or Server 2003 is required to use the HttpListener class.&quot;);\n            return;\n        }\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n        \n        // Create a listener.\n        HttpListener listener = new HttpListener();\n        // Add the prefixes.\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        Console.WriteLine(&quot;Listening...&quot;);\n        // Note: The GetContext method blocks while waiting for a request. \n        HttpListenerContext context = listener.GetContext();\n        HttpListenerRequest request = context.Request;\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Construct a response.\n        string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello world!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n        // Get a response stream and write the response to it.\n        response.ContentLength64 = buffer.Length;\n        System.IO.Stream output = response.OutputStream;\n        output.Write(buffer,0,buffer.Length);\n        // You must close the output stream.\n        output.Close();\n        listener.Stop();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_EndGetContext_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_HttpListener_EndGetContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndGetContext(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Completes an asynchronous operation to retrieve an incoming client request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object that was obtained when the asynchronous operation was started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> object that represents the client request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not obtained by calling the <span class=\"xref\">stem.Net.HttpListener.BeginGetContext*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The EndGetContext method was already called for the specified <code>asyncResult</code> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EndGetContext method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> object that contains an incoming client request and its associated response. This method completes an operation previously started by calling the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_BeginGetContext_\" data-linktype=\"relative-path\">BeginGetContext</a> method. If the operation has not completed, this method blocks until it does.  </p>\n<p> Because calling the EndGetContext method requires the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object, this object is typically passed into a callback method by using the state object passed into the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_BeginGetContext_\" data-linktype=\"relative-path\">BeginGetContext</a> method. You can obtain this state object by using the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncState_\" data-linktype=\"relative-path\">AsyncState</a> property of the <code>asyncResult</code> object.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the implementation of a callback method that calls the EndGetContext method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#13\">    public static void ListenerCallback(IAsyncResult result)\n    {\n        HttpListener listener = (HttpListener) result.AsyncState;\n        // Call EndGetContext to complete the asynchronous operation.\n        HttpListenerContext context = listener.EndGetContext(result);\n        HttpListenerRequest request = context.Request;\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Construct a response.\n        string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello world!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n        // Get a response stream and write the response to it.\n        response.ContentLength64 = buffer.Length;\n        System.IO.Stream output = response.OutputStream;\n        output.Write(buffer,0,buffer.Length);\n        // You must close the output stream.\n        output.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_GetContext\">\r\n    \r\n            <a id=\"System_Net_HttpListener_GetContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetContext()</div>        \r\n          </div>\r\n    \r\n            <p>Waits for an incoming request and returns when one is received.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.HttpListenerContext GetContext ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> object that represents a client request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistenerexception\" data-linktype=\"relative-path\">HttpListenerException</a></div>\r\n                  </div>\r\n                  <p>A Win32 function call failed. Check the exception&#39;s <span class=\"xref\">stem.Net.HttpListenerException.ErrorCode*</span> property to determine the cause of the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This object has not been started or is currently stopped.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> does not have any Uniform Resource Identifier (URI) prefixes to respond to. See Remarks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Before calling this method, you must call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Start_\" data-linktype=\"relative-path\">Start</a> method and add at least one URI prefix to listen for by adding the URI strings to the <a class=\"xref\" href=\"system.net.httplistenerprefixcollection\" data-linktype=\"relative-path\">HttpListenerPrefixCollection</a> returned by the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Prefixes_\" data-linktype=\"relative-path\">Prefixes</a> property. For a detailed description of prefixes, see the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> class overview.  </p>\n<p> This method blocks while waiting for an incoming request. If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_BeginGetContext_\" data-linktype=\"relative-path\">BeginGetContext</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#2\">    // This example requires the System and System.Net namespaces.\n    public static void SimpleListenerExample(string[] prefixes)\n    {\n        if (!HttpListener.IsSupported)\n        {\n            Console.WriteLine (&quot;Windows XP SP2 or Server 2003 is required to use the HttpListener class.&quot;);\n            return;\n        }\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n        \n        // Create a listener.\n        HttpListener listener = new HttpListener();\n        // Add the prefixes.\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        Console.WriteLine(&quot;Listening...&quot;);\n        // Note: The GetContext method blocks while waiting for a request. \n        HttpListenerContext context = listener.GetContext();\n        HttpListenerRequest request = context.Request;\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Construct a response.\n        string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello world!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n        // Get a response stream and write the response to it.\n        response.ContentLength64 = buffer.Length;\n        System.IO.Stream output = response.OutputStream;\n        output.Write(buffer,0,buffer.Length);\n        // You must close the output stream.\n        output.Close();\n        listener.Stop();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_GetContextAsync\">\r\n    \r\n            <a id=\"System_Net_HttpListener_GetContextAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetContextAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Waits for an incoming request as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt; GetContextAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.  </p>\n<p> The task object representing the asynchronous operation. The <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property on the task object returns an <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> object that represents a client request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object will complete when the incoming request has been received.  </p>\n<p> Before calling this method, you must call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Start_\" data-linktype=\"relative-path\">Start</a> method and add at least one URI prefix to listen for by adding the URI strings to the <a class=\"xref\" href=\"system.net.httplistenerprefixcollection\" data-linktype=\"relative-path\">HttpListenerPrefixCollection</a> returned by the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Prefixes_\" data-linktype=\"relative-path\">Prefixes</a> property. For a detailed description of prefixes, see the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> class overview.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_Start\">\r\n    \r\n            <a id=\"System_Net_HttpListener_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start()</div>        \r\n          </div>\r\n    \r\n            <p>Allows this instance to receive incoming requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Start ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistenerexception\" data-linktype=\"relative-path\">HttpListenerException</a></div>\r\n                  </div>\r\n                  <p>A Win32 function call failed. Check the exception&#39;s <span class=\"xref\">stem.Net.HttpListenerException.ErrorCode*</span> property to determine the cause of the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method must be called before you call the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_GetContext_\" data-linktype=\"relative-path\">GetContext</a> or <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_BeginGetContext_\" data-linktype=\"relative-path\">BeginGetContext</a> method.  </p>\n<p> After you have started an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object, you can use the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method to stop it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If this listener instance uses https, you must install and select a Server Certificate. Otherwise, an <a class=\"xref\" href=\"system.net.httpwebrequest\" data-linktype=\"relative-path\">HttpWebRequest</a> query of this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> will fail with an unexpected close of the connection. You can configure Server Certificates and other listener options by using HttpCfg.exe. See <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp\" data-linktype=\"external\">http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp</a> for more details.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the Start method to begin processing incoming requests.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#12\">\n    public static void NonblockingListener(string [] prefixes)\n    {\n        HttpListener listener = new HttpListener();\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        IAsyncResult result = listener.BeginGetContext(new AsyncCallback(ListenerCallback),listener);\n        // Applications can do some work here while waiting for the \n        // request. If no work can be done until you have processed a request,\n        // use a wait handle to prevent this thread from terminating\n        // while the asynchronous operation completes.\n        Console.WriteLine(&quot;Waiting for request to be processed asyncronously.&quot;);\n        result.AsyncWaitHandle.WaitOne();\n        Console.WriteLine(&quot;Request processed asyncronously.&quot;);\n        listener.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_Stop\">\r\n    \r\n            <a id=\"System_Net_HttpListener_Stop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stop()</div>        \r\n          </div>\r\n    \r\n            <p>Causes this instance to stop receiving incoming requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Stop ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this instance is already stopped, calling this method has no effect.  </p>\n<p> After you have stopped an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object, you can use the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Start_\" data-linktype=\"relative-path\">Start</a> method to restart it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the Stop method to stop processing incoming requests.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#12\">\n    public static void NonblockingListener(string [] prefixes)\n    {\n        HttpListener listener = new HttpListener();\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        IAsyncResult result = listener.BeginGetContext(new AsyncCallback(ListenerCallback),listener);\n        // Applications can do some work here while waiting for the \n        // request. If no work can be done until you have processed a request,\n        // use a wait handle to prevent this thread from terminating\n        // while the asynchronous operation completes.\n        Console.WriteLine(&quot;Waiting for request to be processed asyncronously.&quot;);\n        result.AsyncWaitHandle.WaitOne();\n        Console.WriteLine(&quot;Request processed asyncronously.&quot;);\n        listener.Close();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListener_System_IDisposable_Dispose\">\r\n    \r\n            <a id=\"System_Net_HttpListener_System_IDisposable_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDisposable.Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases the resources held by this <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDisposable.Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Applications should use the <a class=\"xref\" href=\"system.net.httplistener#System_Net_HttpListener_Close_\" data-linktype=\"relative-path\">Close</a> method instead of calling this method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.HttpListener.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpListener.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.Abort\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.AuthenticationSchemes\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.AuthenticationSchemeSelectorDelegate\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.BeginGetContext\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.Close\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.DefaultServiceNames\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.EndGetContext\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.ExtendedProtectionPolicy\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.ExtendedProtectionSelectorDelegate\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.GetContext\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.GetContextAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.IgnoreWriteExceptions\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.IsListening\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.IsSupported\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.Prefixes\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.Realm\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.Start\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.Stop\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.IDisposable.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.TimeoutManager\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListener.UnsafeConnectionNtlmAuthentication\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7886f3d2-6c63-8e02-9e25-e15fa21e7e18\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\HttpListener.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.HttpListener\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.HttpListener.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpListener.yml","open_to_public_contributors":true,"api_name":["System.Net.HttpListener","System.Net.HttpListener..ctor","System.Net.HttpListener.Abort","System.Net.HttpListener.AuthenticationSchemes","System.Net.HttpListener.AuthenticationSchemeSelectorDelegate","System.Net.HttpListener.BeginGetContext","System.Net.HttpListener.Close","System.Net.HttpListener.DefaultServiceNames","System.Net.HttpListener.EndGetContext","System.Net.HttpListener.ExtendedProtectionPolicy","System.Net.HttpListener.ExtendedProtectionSelectorDelegate","System.Net.HttpListener.GetContext","System.Net.HttpListener.GetContextAsync","System.Net.HttpListener.IgnoreWriteExceptions","System.Net.HttpListener.IsListening","System.Net.HttpListener.IsSupported","System.Net.HttpListener.Prefixes","System.Net.HttpListener.Realm","System.Net.HttpListener.Start","System.Net.HttpListener.Stop","System.Net.HttpListener.IDisposable.Dispose","System.Net.HttpListener.TimeoutManager","System.Net.HttpListener.UnsafeConnectionNtlmAuthentication"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.HttpListener","System::Net::HttpListener","System.Net.HttpListener.#ctor","System::Net::HttpListener::#ctor","System.Net.HttpListener.Abort","System::Net::HttpListener::Abort","System.Net.HttpListener.AuthenticationSchemes","System::Net::HttpListener::AuthenticationSchemes","System.Net.HttpListener.AuthenticationSchemeSelectorDelegate","System::Net::HttpListener::AuthenticationSchemeSelectorDelegate","System.Net.HttpListener.BeginGetContext","System::Net::HttpListener::BeginGetContext","System.Net.HttpListener.Close","System::Net::HttpListener::Close","System.Net.HttpListener.DefaultServiceNames","System::Net::HttpListener::DefaultServiceNames","System.Net.HttpListener.EndGetContext","System::Net::HttpListener::EndGetContext","System.Net.HttpListener.ExtendedProtectionPolicy","System::Net::HttpListener::ExtendedProtectionPolicy","System.Net.HttpListener.ExtendedProtectionSelectorDelegate","System::Net::HttpListener::ExtendedProtectionSelectorDelegate","System.Net.HttpListener.GetContext","System::Net::HttpListener::GetContext","System.Net.HttpListener.GetContextAsync","System::Net::HttpListener::GetContextAsync","System.Net.HttpListener.IgnoreWriteExceptions","System::Net::HttpListener::IgnoreWriteExceptions","System.Net.HttpListener.IsListening","System::Net::HttpListener::IsListening","System.Net.HttpListener.IsSupported","System::Net::HttpListener::IsSupported","System.Net.HttpListener.Prefixes","System::Net::HttpListener::Prefixes","System.Net.HttpListener.Realm","System::Net::HttpListener::Realm","System.Net.HttpListener.Start","System::Net::HttpListener::Start","System.Net.HttpListener.Stop","System::Net::HttpListener::Stop","System.Net.HttpListener.System#IDisposable#Dispose","System::Net::HttpListener::System#IDisposable#Dispose","System.Net.HttpListener.TimeoutManager","System::Net::HttpListener::TimeoutManager","System.Net.HttpListener.UnsafeConnectionNtlmAuthentication","System::Net::HttpListener::UnsafeConnectionNtlmAuthentication"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7886f3d2-6c63-8e02-9e25-e15fa21e7e18","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\HttpListener.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/HttpListener.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HttpListener class | Microsoft Docs","_op_ogTitle":"HttpListener class","description":"Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.HttpListener","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httplistener","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httplistener","fileRelativePath":"System.Net.HttpListener.html"},"themesRelativePathToOutputRoot":"_themes/"}