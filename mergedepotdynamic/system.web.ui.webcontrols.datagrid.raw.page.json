{"content":"    \r\n    <h1 id=\"System_Web_UI_WebControls_DataGrid\">\r\n      <span class=\"lang-csharp\">DataGrid</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>A data bound list control that displays the items from data source in a table. The DataGrid control allows you to select, sort, and edit these items.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.Designer(&quot;System.Web.UI.Design.WebControls.DataGridDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.Editor(&quot;System.Web.UI.Design.WebControls.DataGridComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, typeof(System.ComponentModel.ComponentEditor))]\npublic class DataGrid : System.Web.UI.WebControls.BaseDataList, System.Web.UI.INamingContainer</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol\" data-linktype=\"relative-path\">WebControl</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist\" data-linktype=\"relative-path\">System.Web.UI.WebControls.BaseDataList</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataGrid</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Adapter\" data-linktype=\"relative-path\">Adapter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_AddedControl_System_Web_UI_Control_System_Int32_\" data-linktype=\"relative-path\">AddedControl(Control,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ApplyStyleSheetSkin_System_Web_UI_Page_\" data-linktype=\"relative-path\">ApplyStyleSheetSkin(Page)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_AppRelativeTemplateSourceDirectory\" data-linktype=\"relative-path\">AppRelativeTemplateSourceDirectory</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_BeginRenderTracing_System_IO_TextWriter_System_Object_\" data-linktype=\"relative-path\">BeginRenderTracing(TextWriter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_BindingContainer\" data-linktype=\"relative-path\">BindingContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_BuildProfileTree_System_String_System_Boolean_\" data-linktype=\"relative-path\">BuildProfileTree(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ChildControlsCreated\" data-linktype=\"relative-path\">ChildControlsCreated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearCachedClientID\" data-linktype=\"relative-path\">ClearCachedClientID()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearChildControlState\" data-linktype=\"relative-path\">ClearChildControlState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearChildState\" data-linktype=\"relative-path\">ClearChildState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearChildViewState\" data-linktype=\"relative-path\">ClearChildViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearEffectiveClientIDMode\" data-linktype=\"relative-path\">ClearEffectiveClientIDMode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClientID\" data-linktype=\"relative-path\">ClientID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClientIDMode\" data-linktype=\"relative-path\">ClientIDMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClientIDSeparator\" data-linktype=\"relative-path\">ClientIDSeparator</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Context\" data-linktype=\"relative-path\">Context</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_CreateControlCollection\" data-linktype=\"relative-path\">CreateControlCollection()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataBind_System_Boolean_\" data-linktype=\"relative-path\">DataBind(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataBindChildren\" data-linktype=\"relative-path\">DataBindChildren()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataBinding\" data-linktype=\"relative-path\">DataBinding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataItemContainer\" data-linktype=\"relative-path\">DataItemContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataKeysContainer\" data-linktype=\"relative-path\">DataKeysContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_EnableViewState\" data-linktype=\"relative-path\">EnableViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_EndRenderTracing_System_IO_TextWriter_System_Object_\" data-linktype=\"relative-path\">EndRenderTracing(TextWriter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_EnsureChildControls\" data-linktype=\"relative-path\">EnsureChildControls()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_EnsureID\" data-linktype=\"relative-path\">EnsureID()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_FindControl_System_String_\" data-linktype=\"relative-path\">FindControl(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_FindControl_System_String_System_Int32_\" data-linktype=\"relative-path\">FindControl(String,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Focus\" data-linktype=\"relative-path\">Focus()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetDesignModeState\" data-linktype=\"relative-path\">GetDesignModeState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetRouteUrl_System_Object_\" data-linktype=\"relative-path\">GetRouteUrl(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetRouteUrl_System_String_System_Object_\" data-linktype=\"relative-path\">GetRouteUrl(String,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetRouteUrl_System_String_System_Web_Routing_RouteValueDictionary_\" data-linktype=\"relative-path\">GetRouteUrl(String,RouteValueDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetRouteUrl_System_Web_Routing_RouteValueDictionary_\" data-linktype=\"relative-path\">GetRouteUrl(RouteValueDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetUniqueIDRelativeTo_System_Web_UI_Control_\" data-linktype=\"relative-path\">GetUniqueIDRelativeTo(Control)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_HasChildViewState\" data-linktype=\"relative-path\">HasChildViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_HasControls\" data-linktype=\"relative-path\">HasControls()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_HasEvents\" data-linktype=\"relative-path\">HasEvents()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ID\" data-linktype=\"relative-path\">ID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IdSeparator\" data-linktype=\"relative-path\">IdSeparator</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Init\" data-linktype=\"relative-path\">Init</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IsChildControlStateCleared\" data-linktype=\"relative-path\">IsChildControlStateCleared</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IsLiteralContent\" data-linktype=\"relative-path\">IsLiteralContent()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IsTrackingViewState\" data-linktype=\"relative-path\">IsTrackingViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IsViewStateEnabled\" data-linktype=\"relative-path\">IsViewStateEnabled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Load\" data-linktype=\"relative-path\">Load</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_LoadControlState_System_Object_\" data-linktype=\"relative-path\">LoadControlState(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_LoadViewStateByID\" data-linktype=\"relative-path\">LoadViewStateByID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_MapPathSecure_System_String_\" data-linktype=\"relative-path\">MapPathSecure(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_NamingContainer\" data-linktype=\"relative-path\">NamingContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_OnUnload_System_EventArgs_\" data-linktype=\"relative-path\">OnUnload(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_OpenFile_System_String_\" data-linktype=\"relative-path\">OpenFile(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Page\" data-linktype=\"relative-path\">Page</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Parent\" data-linktype=\"relative-path\">Parent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_PreRender\" data-linktype=\"relative-path\">PreRender</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RaiseBubbleEvent_System_Object_System_EventArgs_\" data-linktype=\"relative-path\">RaiseBubbleEvent(Object,EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RemovedControl_System_Web_UI_Control_\" data-linktype=\"relative-path\">RemovedControl(Control)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RenderChildren_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderChildren(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RenderControl_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderControl(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RenderControl_System_Web_UI_HtmlTextWriter_System_Web_UI_Adapters_ControlAdapter_\" data-linktype=\"relative-path\">RenderControl(HtmlTextWriter,ControlAdapter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RenderingCompatibility\" data-linktype=\"relative-path\">RenderingCompatibility</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ResolveAdapter\" data-linktype=\"relative-path\">ResolveAdapter()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ResolveClientUrl_System_String_\" data-linktype=\"relative-path\">ResolveClientUrl(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ResolveUrl_System_String_\" data-linktype=\"relative-path\">ResolveUrl(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SaveControlState\" data-linktype=\"relative-path\">SaveControlState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SetDesignModeState_System_Collections_IDictionary_\" data-linktype=\"relative-path\">SetDesignModeState(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SetRenderMethodDelegate_System_Web_UI_RenderMethod_\" data-linktype=\"relative-path\">SetRenderMethodDelegate(RenderMethod)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SetTraceData_System_Object_System_Object_\" data-linktype=\"relative-path\">SetTraceData(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SetTraceData_System_Object_System_Object_System_Object_\" data-linktype=\"relative-path\">SetTraceData(Object,Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlBuilderAccessor_ControlBuilder\" data-linktype=\"relative-path\">IControlBuilderAccessor.ControlBuilder</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlDesignerAccessor_GetDesignModeState\" data-linktype=\"relative-path\">IControlDesignerAccessor.GetDesignModeState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlDesignerAccessor_SetDesignModeState_System_Collections_IDictionary_\" data-linktype=\"relative-path\">IControlDesignerAccessor.SetDesignModeState(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlDesignerAccessor_SetOwnerControl_System_Web_UI_Control_\" data-linktype=\"relative-path\">IControlDesignerAccessor.SetOwnerControl(Control)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlDesignerAccessor_UserData\" data-linktype=\"relative-path\">IControlDesignerAccessor.UserData</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IDataBindingsAccessor_DataBindings\" data-linktype=\"relative-path\">IDataBindingsAccessor.DataBindings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IDataBindingsAccessor_HasDataBindings\" data-linktype=\"relative-path\">IDataBindingsAccessor.HasDataBindings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IExpressionsAccessor_Expressions\" data-linktype=\"relative-path\">IExpressionsAccessor.Expressions</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IExpressionsAccessor_HasExpressions\" data-linktype=\"relative-path\">IExpressionsAccessor.HasExpressions</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IParserAccessor_AddParsedSubObject_System_Object_\" data-linktype=\"relative-path\">IParserAccessor.AddParsedSubObject(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_TemplateControl\" data-linktype=\"relative-path\">TemplateControl</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_TemplateSourceDirectory\" data-linktype=\"relative-path\">TemplateSourceDirectory</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_UniqueID\" data-linktype=\"relative-path\">UniqueID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Unload\" data-linktype=\"relative-path\">Unload</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ValidateRequestMode\" data-linktype=\"relative-path\">ValidateRequestMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewState\" data-linktype=\"relative-path\">ViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewStateIgnoresCase\" data-linktype=\"relative-path\">ViewStateIgnoresCase</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewStateMode\" data-linktype=\"relative-path\">ViewStateMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Visible\" data-linktype=\"relative-path\">Visible</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_AddParsedSubObject_System_Object_\" data-linktype=\"relative-path\">AddParsedSubObject(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Caption\" data-linktype=\"relative-path\">Caption</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CaptionAlign\" data-linktype=\"relative-path\">CaptionAlign</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CellPadding\" data-linktype=\"relative-path\">CellPadding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CellSpacing\" data-linktype=\"relative-path\">CellSpacing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Controls\" data-linktype=\"relative-path\">Controls</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CreateChildControls\" data-linktype=\"relative-path\">CreateChildControls()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CreateDataSourceSelectArguments\" data-linktype=\"relative-path\">CreateDataSourceSelectArguments()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataBind\" data-linktype=\"relative-path\">DataBind()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataKeyField\" data-linktype=\"relative-path\">DataKeyField</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataKeys\" data-linktype=\"relative-path\">DataKeys</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataKeysArray\" data-linktype=\"relative-path\">DataKeysArray</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataMember\" data-linktype=\"relative-path\">DataMember</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataSource\" data-linktype=\"relative-path\">DataSource</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataSourceID\" data-linktype=\"relative-path\">DataSourceID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_EnsureDataBound\" data-linktype=\"relative-path\">EnsureDataBound()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_GetData\" data-linktype=\"relative-path\">GetData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_GridLines\" data-linktype=\"relative-path\">GridLines</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_HorizontalAlign\" data-linktype=\"relative-path\">HorizontalAlign</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Initialized\" data-linktype=\"relative-path\">Initialized</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_IsBindableType_System_Type_\" data-linktype=\"relative-path\">IsBindableType(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_IsBoundUsingDataSourceID\" data-linktype=\"relative-path\">IsBoundUsingDataSourceID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnDataBinding_System_EventArgs_\" data-linktype=\"relative-path\">OnDataBinding(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnDataPropertyChanged\" data-linktype=\"relative-path\">OnDataPropertyChanged()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnDataSourceViewChanged_System_Object_System_EventArgs_\" data-linktype=\"relative-path\">OnDataSourceViewChanged(Object,EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnInit_System_EventArgs_\" data-linktype=\"relative-path\">OnInit(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnLoad_System_EventArgs_\" data-linktype=\"relative-path\">OnLoad(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnPreRender_System_EventArgs_\" data-linktype=\"relative-path\">OnPreRender(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnSelectedIndexChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnSelectedIndexChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Render_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">Render(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_RequiresDataBinding\" data-linktype=\"relative-path\">RequiresDataBinding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_SelectArguments\" data-linktype=\"relative-path\">SelectArguments</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_SelectedIndexChanged\" data-linktype=\"relative-path\">SelectedIndexChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_SupportsDisabledAttribute\" data-linktype=\"relative-path\">SupportsDisabledAttribute</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_UseAccessibleHeader\" data-linktype=\"relative-path\">UseAccessibleHeader</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_AccessKey\" data-linktype=\"relative-path\">AccessKey</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_AddAttributesToRender_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">AddAttributesToRender(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ApplyStyle_System_Web_UI_WebControls_Style_\" data-linktype=\"relative-path\">ApplyStyle(Style)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_BackColor\" data-linktype=\"relative-path\">BackColor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_BorderColor\" data-linktype=\"relative-path\">BorderColor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_BorderStyle\" data-linktype=\"relative-path\">BorderStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_BorderWidth\" data-linktype=\"relative-path\">BorderWidth</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle\" data-linktype=\"relative-path\">ControlStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyleCreated\" data-linktype=\"relative-path\">ControlStyleCreated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_CopyBaseAttributes_System_Web_UI_WebControls_WebControl_\" data-linktype=\"relative-path\">CopyBaseAttributes(WebControl)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_CssClass\" data-linktype=\"relative-path\">CssClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_DisabledCssClass\" data-linktype=\"relative-path\">DisabledCssClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Enabled\" data-linktype=\"relative-path\">Enabled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_EnableTheming\" data-linktype=\"relative-path\">EnableTheming</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Font\" data-linktype=\"relative-path\">Font</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ForeColor\" data-linktype=\"relative-path\">ForeColor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_HasAttributes\" data-linktype=\"relative-path\">HasAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Height\" data-linktype=\"relative-path\">Height</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_IsEnabled\" data-linktype=\"relative-path\">IsEnabled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_MergeStyle_System_Web_UI_WebControls_Style_\" data-linktype=\"relative-path\">MergeStyle(Style)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_RenderBeginTag_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderBeginTag(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_RenderContents_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderContents(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_RenderEndTag_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderEndTag(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_SkinID\" data-linktype=\"relative-path\">SkinID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Style\" data-linktype=\"relative-path\">Style</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_System_Web_UI_IAttributeAccessor_GetAttribute_System_String_\" data-linktype=\"relative-path\">IAttributeAccessor.GetAttribute(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_System_Web_UI_IAttributeAccessor_SetAttribute_System_String_System_String_\" data-linktype=\"relative-path\">IAttributeAccessor.SetAttribute(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_TabIndex\" data-linktype=\"relative-path\">TabIndex</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_TagName\" data-linktype=\"relative-path\">TagName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ToolTip\" data-linktype=\"relative-path\">ToolTip</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Width\" data-linktype=\"relative-path\">Width</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>In this topic:  </p>\n<ul>\n<li><p><a href=\"#Introduction\" data-linktype=\"self-bookmark\">Introduction</a>  </p>\n</li>\n<li><p><a href=\"#Accessibility\" data-linktype=\"self-bookmark\">Accessibility</a>  </p>\n</li>\n<li><p><a href=\"#DeclarativeSyntax\" data-linktype=\"self-bookmark\">Declarative Syntax</a>  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Before you use the DataGrid control, consider using the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control instead. The <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control, which was introduced in the .NET Framework version 2.0, is the successor to the DataGrid control.  </p>\n</div>\n</li>\n</ul>\n<p><a name=\"Introduction\"></a>   </p>\n<h2 id=\"introduction\">Introduction</h2>\n<p> Use the DataGrid control to display the fields of a data source as columns in a table. Each row in the DataGrid control represents a record in the data source. The DataGrid control supports selection, editing, deleting, paging, and sorting.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. ASP.NET provides an input request validation feature to block script and HTML in user input. Validation server controls are also provided to assess user input. For more information, see <a href=\"http://msdn.microsoft.com/en-us/96d2c59e-693c-4079-9b53-b3ff0d9e9133\" data-linktype=\"external\">Validation Server Control Syntax</a>.  </p>\n</div>\n<p> Different column types determine the behavior of the columns in the control. The following table lists the different column types that can be used.  </p>\n<table>\n<thead>\n<tr>\n<th>Column Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a></td>\n<td>Displays a column bound to a field in a data source. It displays each item in the field as text. This is the default column type of the DataGrid control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.buttoncolumn\" data-linktype=\"relative-path\">ButtonColumn</a></td>\n<td>Displays a command button for each item in the column. This allows you to create a column of custom button controls, such as <code>Add</code> or <code>Remove</code> buttons.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a></td>\n<td>Displays a column that contains editing commands for each item in the column.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.hyperlinkcolumn\" data-linktype=\"relative-path\">HyperLinkColumn</a></td>\n<td>Displays the contents of each item in the column as a hyperlink. The contents of the column can be bound to a field in a data source or static text.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.templatecolumn\" data-linktype=\"relative-path\">TemplateColumn</a></td>\n<td>Displays each item in the column following a specified template. This allows you to provide custom controls in the column.</td>\n</tr>\n</tbody>\n</table>\n<p> By default, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AutoGenerateColumns_\" data-linktype=\"relative-path\">AutoGenerateColumns</a> property is set to <code>true</code>, which creates a <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> object for each field in the data source. Each field is then rendered as a column in the DataGrid control in the order that each field appears in the data source.  </p>\n<p> You can also manually control which columns appear in the DataGrid control by setting the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AutoGenerateColumns_\" data-linktype=\"relative-path\">AutoGenerateColumns</a> property to <code>false</code> and then listing the columns that you want to include between the opening and closing <code>&lt;Columns&gt;</code> tags. The columns specified are added to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_Columns_\" data-linktype=\"relative-path\">Columns</a> collection in the order listed. This allows you to programmatically control the columns in the DataGrid control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The order that the columns are displayed in the DataGrid control is controlled by the order that the columns appear in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_Columns_\" data-linktype=\"relative-path\">Columns</a> collection. Although you can programmatically change the order of the columns by manipulating the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_Columns_\" data-linktype=\"relative-path\">Columns</a> collection, it is easier to list the columns in the desired display order.  </p>\n</div>\n<p> Explicitly declared columns can be displayed in conjunction with automatically generated columns. When using both, explicitly declared columns will be rendered first, followed by the automatically generated columns.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Automatically generated columns are not added to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_Columns_\" data-linktype=\"relative-path\">Columns</a> collection.  </p>\n</div>\n<p> The appearance of the DataGrid control may be customized by setting the style properties for the different parts of the control. The following table lists the different style properties.  </p>\n<table>\n<thead>\n<tr>\n<th>Style Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a></td>\n<td>Specifies the style for alternating items in the DataGrid control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a></td>\n<td>Specifies the style for the item being edited in the DataGrid control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_FooterStyle_\" data-linktype=\"relative-path\">FooterStyle</a></td>\n<td>Specifies the style for the footer section in the DataGrid control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a></td>\n<td>Specifies the style for the header section in the DataGrid control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a></td>\n<td>Specifies the style for the items in the DataGrid control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PagerStyle_\" data-linktype=\"relative-path\">PagerStyle</a></td>\n<td>Specifies the style for the page selection section of the DataGrid control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a></td>\n<td>Specifies the style for the selected item in the DataGrid control.</td>\n</tr>\n</tbody>\n</table>\n<p> You can also show or hide different parts of the control. The following table lists the properties that control which parts are shown or hidden.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ShowFooter_\" data-linktype=\"relative-path\">ShowFooter</a></td>\n<td>Shows or hides the footer section of the DataGrid control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ShowHeader_\" data-linktype=\"relative-path\">ShowHeader</a></td>\n<td>Shows or hides the header section of the DataGrid control.</td>\n</tr>\n</tbody>\n</table>\n<p> You can control the appearance of the DataGrid control by programmatically adding attributes to the <code>&lt;td&gt;</code> and <code>&lt;tr&gt;</code> tags rendered by the control on the browser. Attributes can be programmatically added by providing code in the event handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_OnItemCreated_\" data-linktype=\"relative-path\">OnItemCreated</a> or <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_OnItemDataBound_\" data-linktype=\"relative-path\">OnItemDataBound</a> event.  </p>\n<p> To add an attribute to the <code>&lt;td&gt;</code> tag, first get the <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a> object that represents the cell in the DataGrid control you want to add the attribute to. The <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Controls_\" data-linktype=\"relative-path\">Controls</a> collection for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemeventargs#System_Web_UI_WebControls_DataGridItemEventArgs_Item_\" data-linktype=\"relative-path\">Item</a> property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemeventargs\" data-linktype=\"relative-path\">DataGridItemEventArgs</a> object passed into the event handler can be used to get the desired <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a> object. You can then use the <a class=\"xref\" href=\"system.web.ui.attributecollection#System_Web_UI_AttributeCollection_Add_\" data-linktype=\"relative-path\">Add</a> method of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Attributes_\" data-linktype=\"relative-path\">Attributes</a> collection for the <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a> object to add attributes to the <code>&lt;td&gt;</code> tag.  </p>\n<p> To add an attribute to the <code>&lt;tr&gt;</code> tag, first get the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object that represents the row in the DataGrid control you want to add the attribute to. The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemeventargs#System_Web_UI_WebControls_DataGridItemEventArgs_Item_\" data-linktype=\"relative-path\">Item</a> property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemeventargs\" data-linktype=\"relative-path\">DataGridItemEventArgs</a> object passed into the event handler can be used to get the desired <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object. You can then use the <a class=\"xref\" href=\"system.web.ui.attributecollection#System_Web_UI_AttributeCollection_Add_\" data-linktype=\"relative-path\">Add</a> method of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Attributes_\" data-linktype=\"relative-path\">Attributes</a> collection for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object to add attributes to the <code>&lt;tr&gt;</code> tag.  </p>\n<p><a name=\"Accessibility\"></a>   </p>\n<h2 id=\"accessibility\">Accessibility</h2>\n<p> For information about how to configure this control so that it generates markup that conforms to accessibility standards, see <a href=\"../Topic/Accessibility%20in%20Visual%20Studio%20and%20ASP.NET.md\" data-linktype=\"relative-path\">Accessibility in Visual Studio and ASP.NET</a> and <a href=\"../Topic/ASP.NET%20Controls%20and%20Accessibility.md\" data-linktype=\"relative-path\">ASP.NET Controls and Accessibility</a>.  </p>\n<p><a name=\"DeclarativeSyntax\"></a>   </p>\n<h2 id=\"declarative-syntax\">Declarative Syntax</h2>\n<pre><code>&lt;asp:DataGrid  \n    AccessKey=&quot;string&quot;  \n    AllowCustomPaging=&quot;True|False&quot;  \n    AllowPaging=&quot;True|False&quot;  \n    AllowSorting=&quot;True|False&quot;  \n    AutoGenerateColumns=&quot;True|False&quot;  \n    BackColor=&quot;color name|#dddddd&quot;  \n    BackImageUrl=&quot;uri&quot;  \n    BorderColor=&quot;color name|#dddddd&quot;  \n    BorderStyle=&quot;NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  \n        Inset|Outset&quot;  \n    BorderWidth=&quot;size&quot;  \n    Caption=&quot;string&quot;  \n    CaptionAlign=&quot;NotSet|Top|Bottom|Left|Right&quot;  \n    CellPadding=&quot;integer&quot;  \n    CellSpacing=&quot;integer&quot;  \n    CssClass=&quot;string&quot;  \n    DataKeyField=&quot;string&quot;  \n    DataMember=&quot;string&quot;  \n    DataSource=&quot;string&quot;  \n    DataSourceID=&quot;string&quot;  \n    EditItemIndex=&quot;integer&quot;  \n    Enabled=&quot;True|False&quot;  \n    EnableTheming=&quot;True|False&quot;  \n    EnableViewState=&quot;True|False&quot;  \n    Font-Bold=&quot;True|False&quot;  \n    Font-Italic=&quot;True|False&quot;  \n    Font-Names=&quot;string&quot;  \n    Font-Overline=&quot;True|False&quot;  \n    Font-Size=&quot;string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  \n        Large|X-Large|XX-Large&quot;  \n    Font-Strikeout=&quot;True|False&quot;  \n    Font-Underline=&quot;True|False&quot;  \n    ForeColor=&quot;color name|#dddddd&quot;  \n    GridLines=&quot;None|Horizontal|Vertical|Both&quot;  \n    Height=&quot;size&quot;  \n    HorizontalAlign=&quot;NotSet|Left|Center|Right|Justify&quot;  \n    ID=&quot;string&quot;  \n    OnCancelCommand=&quot;CancelCommand event handler&quot;  \n    OnDataBinding=&quot;DataBinding event handler&quot;  \n    OnDeleteCommand=&quot;DeleteCommand event handler&quot;  \n    OnDisposed=&quot;Disposed event handler&quot;  \n    OnEditCommand=&quot;EditCommand event handler&quot;  \n    OnInit=&quot;Init event handler&quot;  \n    OnItemCommand=&quot;ItemCommand event handler&quot;  \n    OnItemCreated=&quot;ItemCreated event handler&quot;  \n    OnItemDataBound=&quot;ItemDataBound event handler&quot;  \n    OnLoad=&quot;Load event handler&quot;  \n    OnPageIndexChanged=&quot;PageIndexChanged event handler&quot;  \n    OnPreRender=&quot;PreRender event handler&quot;  \n    OnSelectedIndexChanged=&quot;SelectedIndexChanged event handler&quot;  \n    OnSortCommand=&quot;SortCommand event handler&quot;  \n    OnUnload=&quot;Unload event handler&quot;  \n    OnUpdateCommand=&quot;UpdateCommand event handler&quot;  \n    PageSize=&quot;integer&quot;  \n    runat=&quot;server&quot;  \n    SelectedIndex=&quot;integer&quot;  \n    ShowFooter=&quot;True|False&quot;  \n    ShowHeader=&quot;True|False&quot;  \n    SkinID=&quot;string&quot;  \n    Style=&quot;string&quot;  \n    TabIndex=&quot;integer&quot;  \n    ToolTip=&quot;string&quot;  \n    UseAccessibleHeader=&quot;True|False&quot;  \n    Visible=&quot;True|False&quot;  \n    Width=&quot;size&quot;  \n&gt;  \n        &lt;AlternatingItemStyle /&gt;  \n        &lt;Columns&gt;  \n                &lt;asp:BoundColumn  \n                    DataField=&quot;string&quot;  \n                    DataFormatString=&quot;string&quot;  \n                    FooterText=&quot;string&quot;  \n                    HeaderImageUrl=&quot;uri&quot;  \n                    HeaderText=&quot;string&quot;  \n                    ReadOnly=&quot;True|False&quot;  \n                    SortExpression=&quot;string&quot;  \n                    Visible=&quot;True|False&quot;  \n&gt;  \n                        &lt;FooterStyle /&gt;  \n                        &lt;HeaderStyle /&gt;  \n                        &lt;ItemStyle /&gt;  \n                &lt;/asp:BoundColumn&gt;  \n                &lt;asp:ButtonColumn  \n                    ButtonType=&quot;LinkButton|PushButton&quot;  \n                    CausesValidation=&quot;True|False&quot;  \n                    CommandName=&quot;string&quot;  \n                    DataTextField=&quot;string&quot;  \n                    DataTextFormatString=&quot;string&quot;  \n                    FooterText=&quot;string&quot;  \n                    HeaderImageUrl=&quot;uri&quot;  \n                    HeaderText=&quot;string&quot;  \n                    SortExpression=&quot;string&quot;  \n                    Text=&quot;string&quot;  \n                    ValidationGroup=&quot;string&quot;  \n                    Visible=&quot;True|False&quot;  \n&gt;  \n                        &lt;FooterStyle /&gt;  \n                        &lt;HeaderStyle /&gt;  \n                        &lt;ItemStyle /&gt;  \n                &lt;/asp:ButtonColumn&gt;  \n                &lt;asp:EditCommandColumn  \n                    ButtonType=&quot;LinkButton|PushButton&quot;  \n                    CancelText=&quot;string&quot;  \n                    CausesValidation=&quot;True|False&quot;  \n                    EditText=&quot;string&quot;  \n                    FooterText=&quot;string&quot;  \n                    HeaderImageUrl=&quot;uri&quot;  \n                    HeaderText=&quot;string&quot;  \n                    SortExpression=&quot;string&quot;  \n                    UpdateText=&quot;string&quot;  \n                    ValidationGroup=&quot;string&quot;  \n                    Visible=&quot;True|False&quot;  \n&gt;  \n                        &lt;FooterStyle /&gt;  \n                        &lt;HeaderStyle /&gt;  \n                        &lt;ItemStyle /&gt;  \n                &lt;/asp:EditCommandColumn&gt;  \n                &lt;asp:HyperLinkColumn  \n                    DataNavigateUrlField=&quot;string&quot;  \n                    DataNavigateUrlFormatString=&quot;string&quot;  \n                    DataTextField=&quot;string&quot;  \n                    DataTextFormatString=&quot;string&quot;  \n                    FooterText=&quot;string&quot;  \n                    HeaderImageUrl=&quot;uri&quot;  \n                    HeaderText=&quot;string&quot;  \n                    NavigateUrl=&quot;uri&quot;  \n                    SortExpression=&quot;string&quot;  \n                    Target=&quot;string|_blank|_parent|_search|_self|_top&quot;  \n                    Text=&quot;string&quot;  \n                    Visible=&quot;True|False&quot;  \n&gt;  \n                        &lt;FooterStyle /&gt;  \n                        &lt;HeaderStyle /&gt;  \n                        &lt;ItemStyle /&gt;  \n                &lt;/asp:HyperLinkColumn&gt;  \n                &lt;asp:TemplateColumn  \n                    FooterText=&quot;string&quot;  \n                    HeaderImageUrl=&quot;uri&quot;  \n                    HeaderText=&quot;string&quot;  \n                    SortExpression=&quot;string&quot;  \n                    Visible=&quot;True|False&quot;  \n&gt;  \n                            &lt;FooterStyle /&gt;  \n                            &lt;HeaderStyle /&gt;  \n                            &lt;ItemStyle /&gt;  \n                        &lt;EditItemTemplate&gt;  \n                            &lt;!-- child controls --&gt;  \n                        &lt;/EditItemTemplate&gt;  \n                        &lt;FooterTemplate&gt;  \n                            &lt;!-- child controls --&gt;  \n                        &lt;/FooterTemplate&gt;  \n                        &lt;HeaderTemplate&gt;  \n                            &lt;!-- child controls --&gt;  \n                        &lt;/HeaderTemplate&gt;  \n                        &lt;ItemTemplate&gt;  \n                            &lt;!-- child controls --&gt;  \n                        &lt;/ItemTemplate&gt;  \n                &lt;/asp:TemplateColumn&gt;  \n        &lt;/Columns&gt;  \n        &lt;EditItemStyle /&gt;  \n        &lt;FooterStyle /&gt;  \n        &lt;HeaderStyle /&gt;  \n        &lt;ItemStyle /&gt;  \n        &lt;PagerStyle  \n            BackColor=&quot;color name|#dddddd&quot;  \n            BorderColor=&quot;color name|#dddddd&quot;  \n            BorderStyle=&quot;NotSet|None|Dotted|Dashed|Solid|Double|  \n                Groove|Ridge|Inset|Outset&quot;  \n            BorderWidth=&quot;size&quot;  \n            CssClass=&quot;string&quot;  \n            Font-Bold=&quot;True|False&quot;  \n            Font-Italic=&quot;True|False&quot;  \n            Font-Names=&quot;string&quot;  \n            Font-Overline=&quot;True|False&quot;  \n            Font-Size=&quot;string|Smaller|Larger|XX-Small|X-Small|Small|  \n                Medium|Large|X-Large|XX-Large&quot;  \n            Font-Strikeout=&quot;True|False&quot;  \n            Font-Underline=&quot;True|False&quot;  \n            ForeColor=&quot;color name|#dddddd&quot;  \n            Height=&quot;size&quot;  \n            HorizontalAlign=&quot;NotSet|Left|Center|Right|Justify&quot;  \n            Mode=&quot;NextPrev|NumericPages&quot;  \n            NextPageText=&quot;string&quot;  \n            OnDisposed=&quot;Disposed event handler&quot;  \n            PageButtonCount=&quot;integer&quot;  \n            Position=&quot;Bottom|Top|TopAndBottom&quot;  \n            PrevPageText=&quot;string&quot;  \n            VerticalAlign=&quot;NotSet|Top|Middle|Bottom&quot;  \n            Visible=&quot;True|False&quot;  \n            Width=&quot;size&quot;  \n            Wrap=&quot;True|False&quot;  \n        /&gt;  \n        &lt;SelectedItemStyle /&gt;  \n&lt;/asp:DataGrid&gt;  \n</code></pre>\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid__ctor\" data-linktype=\"self-bookmark\">DataGrid()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_CancelCommandName\" data-linktype=\"self-bookmark\">CancelCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the <code>Cancel</code> command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_DeleteCommandName\" data-linktype=\"self-bookmark\">DeleteCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Delete command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_EditCommandName\" data-linktype=\"self-bookmark\">EditCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Edit command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_NextPageCommandArgument\" data-linktype=\"self-bookmark\">NextPageCommandArgument</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Next command argument. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_PageCommandName\" data-linktype=\"self-bookmark\">PageCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Page command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_PrevPageCommandArgument\" data-linktype=\"self-bookmark\">PrevPageCommandArgument</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Prev command argument. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_SelectCommandName\" data-linktype=\"self-bookmark\">SelectCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Select command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_SortCommandName\" data-linktype=\"self-bookmark\">SortCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Sort command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_UpdateCommandName\" data-linktype=\"self-bookmark\">UpdateCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Update command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_AllowCustomPaging\" data-linktype=\"self-bookmark\">AllowCustomPaging</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether custom paging is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_AllowPaging\" data-linktype=\"self-bookmark\">AllowPaging</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether paging is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_AllowSorting\" data-linktype=\"self-bookmark\">AllowSorting</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether sorting is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle\" data-linktype=\"self-bookmark\">AlternatingItemStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_AutoGenerateColumns\" data-linktype=\"self-bookmark\">AutoGenerateColumns</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> objects are automatically created and displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control for each field in the data source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_BackImageUrl\" data-linktype=\"self-bookmark\">BackImageUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the URL of an image to display in the background of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_Columns\" data-linktype=\"self-bookmark\">Columns</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of objects that represent the columns of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_CurrentPageIndex\" data-linktype=\"self-bookmark\">CurrentPageIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the index of the currently displayed page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_EditItemIndex\" data-linktype=\"self-bookmark\">EditItemIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the index of an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to edit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_EditItemStyle\" data-linktype=\"self-bookmark\">EditItemStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties of the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_FooterStyle\" data-linktype=\"self-bookmark\">FooterStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties of the footer section in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_HeaderStyle\" data-linktype=\"self-bookmark\">HeaderStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties of the heading section in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_Items\" data-linktype=\"self-bookmark\">Items</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> objects that represent the individual items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_ItemStyle\" data-linktype=\"self-bookmark\">ItemStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties of the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_PageCount\" data-linktype=\"self-bookmark\">PageCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total number of pages required to display the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_PagerStyle\" data-linktype=\"self-bookmark\">PagerStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties of the paging section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_PageSize\" data-linktype=\"self-bookmark\">PageSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of items to display on a single page of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_SelectedIndex\" data-linktype=\"self-bookmark\">SelectedIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the index of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_SelectedItem\" data-linktype=\"self-bookmark\">SelectedItem</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object that represents the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_SelectedItemStyle\" data-linktype=\"self-bookmark\">SelectedItemStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties of the currently selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_ShowFooter\" data-linktype=\"self-bookmark\">ShowFooter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the footer is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_ShowHeader\" data-linktype=\"self-bookmark\">ShowHeader</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the header is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_TagKey\" data-linktype=\"self-bookmark\">TagKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.web.ui.htmltextwritertag\" data-linktype=\"relative-path\">HtmlTextWriterTag</a> value for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_VirtualItemCount\" data-linktype=\"self-bookmark\">VirtualItemCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the virtual number of items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control when custom paging is used.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_CreateColumnSet_System_Web_UI_WebControls_PagedDataSource_System_Boolean_\" data-linktype=\"self-bookmark\">CreateColumnSet(PagedDataSource,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the set of columns to be used to build up the control hierarchy. When <span class=\"xref\">stem.Web.UI.WebControls.DataGrid.AutoGenerateColumns*</span> is true, the columns are created to match the data source and are appended to the set of columns defined in the <span class=\"xref\">stem.Web.UI.WebControls.DataGrid.Columns*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_CreateControlHierarchy_System_Boolean_\" data-linktype=\"self-bookmark\">CreateControlHierarchy(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the control hierarchy that is used to render the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_CreateControlStyle\" data-linktype=\"self-bookmark\">CreateControlStyle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates new control style.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_CreateItem_System_Int32_System_Int32_System_Web_UI_WebControls_ListItemType_\" data-linktype=\"self-bookmark\">CreateItem(Int32,Int32,ListItemType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_InitializeItem_System_Web_UI_WebControls_DataGridItem_System_Web_UI_WebControls_DataGridColumn___\" data-linktype=\"self-bookmark\">InitializeItem(DataGridItem,DataGridColumn[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes the specified <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_InitializePager_System_Web_UI_WebControls_DataGridItem_System_Int32_System_Web_UI_WebControls_PagedDataSource_\" data-linktype=\"self-bookmark\">InitializePager(DataGridItem,Int32,PagedDataSource)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object that contains the paging UI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_LoadViewState_System_Object_\" data-linktype=\"self-bookmark\">LoadViewState(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a saved state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnBubbleEvent_System_Object_System_EventArgs_\" data-linktype=\"self-bookmark\">OnBubbleEvent(Object,EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Passes the event raised by a control within the container up the page&#39;s UI server control hierarchy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnCancelCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\" data-linktype=\"self-bookmark\">OnCancelCommand(DataGridCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnDeleteCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\" data-linktype=\"self-bookmark\">OnDeleteCommand(DataGridCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnEditCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\" data-linktype=\"self-bookmark\">OnEditCommand(DataGridCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnItemCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\" data-linktype=\"self-bookmark\">OnItemCommand(DataGridCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnItemCreated_System_Web_UI_WebControls_DataGridItemEventArgs_\" data-linktype=\"self-bookmark\">OnItemCreated(DataGridItemEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnItemDataBound_System_Web_UI_WebControls_DataGridItemEventArgs_\" data-linktype=\"self-bookmark\">OnItemDataBound(DataGridItemEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnPageIndexChanged_System_Web_UI_WebControls_DataGridPageChangedEventArgs_\" data-linktype=\"self-bookmark\">OnPageIndexChanged(DataGridPageChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnSortCommand_System_Web_UI_WebControls_DataGridSortCommandEventArgs_\" data-linktype=\"self-bookmark\">OnSortCommand(DataGridSortCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SortCommand\" data-linktype=\"relative-path\">SortCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_OnUpdateCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\" data-linktype=\"self-bookmark\">OnUpdateCommand(DataGridCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_PrepareControlHierarchy\" data-linktype=\"self-bookmark\">PrepareControlHierarchy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets up the control hierarchy for this <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_SaveViewState\" data-linktype=\"self-bookmark\">SaveViewState()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the current state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_TrackViewState\" data-linktype=\"self-bookmark\">TrackViewState()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Marks the starting point to begin tracking and saving changes to the control as part of the control view state.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"self-bookmark\">CancelCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <code>Cancel</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_DeleteCommand\" data-linktype=\"self-bookmark\">DeleteCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the Delete button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"self-bookmark\">EditCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the Edit button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_ItemCommand\" data-linktype=\"self-bookmark\">ItemCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when any button is clicked in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_ItemCreated\" data-linktype=\"self-bookmark\">ItemCreated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs on the server when an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_ItemDataBound\" data-linktype=\"self-bookmark\">ItemDataBound</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after an item is data bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"self-bookmark\">PageIndexChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when one of the page selection elements is clicked.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_SortCommand\" data-linktype=\"self-bookmark\">SortCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a column is sorted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"self-bookmark\">UpdateCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the Update button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid__ctor\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataGrid()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataGrid ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this constructor to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridCtor#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Create a DataGrid control.\n         DataGrid ItemsGrid = new DataGrid();\n\n         // Set the properties of the DataGrid.\n         ItemsGrid.ID = &quot;ItemsGrid&quot;;\n         ItemsGrid.BorderColor = System.Drawing.Color.Black;\n         ItemsGrid.CellPadding = 3;\n         ItemsGrid.AutoGenerateColumns = false;\n\n         // Set the styles for the DataGrid.\n         ItemsGrid.HeaderStyle.BackColor = \n             System.Drawing.Color.FromArgb(0x0000aaaa);\n\n         // Create the columns for the DataGrid control. The DataGrid\n         // columns are dynamically generated. Therefore, the columns   \n         // must be re-created each time the page is refreshed.\n         \n         // Create and add the columns to the collection.\n         ItemsGrid.Columns.Add(CreateBoundColumn(&quot;IntegerValue&quot;, &quot;Item&quot;));\n         ItemsGrid.Columns.Add(\n             CreateBoundColumn(&quot;StringValue&quot;, &quot;Description&quot;));\n         ItemsGrid.Columns.Add(\n             CreateBoundColumn(&quot;CurrencyValue&quot;, &quot;Price&quot;, &quot;{0:c}&quot;, \n             HorizontalAlign.Right));\n         ItemsGrid.Columns.Add(\n             CreateLinkColumn(&quot;http://www.microsoft.com&quot;, &quot;_self&quot;, \n             &quot;Microsoft&quot;, &quot;Related link&quot;));\n        \n         // Specify the data source and bind it to the control.\n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n\n         // Add the DataGrid control to the Controls collection of \n         // the PlaceHolder control.\n         Place.Controls.Add(ItemsGrid);\n\n      }\n\n      BoundColumn CreateBoundColumn(String DataFieldValue, \n          String HeaderTextValue)\n      {\n\n         // This version of the CreateBoundColumn method sets only the\n         // DataField and HeaderText properties.\n\n         // Create a BoundColumn.\n         BoundColumn column = new BoundColumn();\n\n         // Set the properties of the BoundColumn.\n         column.DataField = DataFieldValue;\n         column.HeaderText = HeaderTextValue;\n\n         return column;\n\n      }\n\n      BoundColumn CreateBoundColumn(String DataFieldValue, \n          String HeaderTextValue, String FormatValue, \n          HorizontalAlign AlignValue)\n      {\n\n         // This version of CreateBoundColumn method sets the DataField,\n         // HeaderText, and DataFormatString properties. It also sets the \n         // HorizontalAlign property of the ItemStyle property of the column. \n\n         // Create a BoundColumn using the overloaded CreateBoundColumn method.\n         BoundColumn column = CreateBoundColumn(DataFieldValue, HeaderTextValue);\n\n         // Set the properties of the BoundColumn.\n         column.DataFormatString = FormatValue;\n         column.ItemStyle.HorizontalAlign = AlignValue;\n\n         return column;\n\n      }\n\n      HyperLinkColumn CreateLinkColumn(String NavUrlValue, \n          String TargetValue, String TextValue, String HeaderTextValue)\n      {\n\n         // Create a BoundColumn.\n         HyperLinkColumn column = new HyperLinkColumn();\n\n         // Set the properties of the ButtonColumn.\n         column.NavigateUrl = NavUrlValue;\n         column.Target = TargetValue;\n         column.Text = TextValue;\n         column.HeaderText = HeaderTextValue;\n\n         return column;\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Constructor Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid Constructor Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n\n      &lt;asp:PlaceHolder id=&quot;Place&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridCtor#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(string)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 8 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Create a DataGrid control.\n         Dim ItemsGrid As DataGrid = New DataGrid()\n\n         &#39; Set the properties of the DataGrid.\n         ItemsGrid.ID = &quot;ItemsGrid&quot;\n         ItemsGrid.BorderColor = System.Drawing.Color.Black\n         ItemsGrid.CellPadding = 3\n         ItemsGrid.AutoGenerateColumns = False\n\n         &#39; Set the styles for the DataGrid.\n         ItemsGrid.HeaderStyle.BackColor = System.Drawing.Color.FromArgb(&amp;H0000aaaa)\n\n         &#39; Create the columns for the DataGrid control. The DataGrid\n         &#39; columns are dynamically generated. Therefore, the columns   \n         &#39; must be re-created each time the page is refreshed.\n         \n         &#39; Create and add the columns to the collection.\n         ItemsGrid.Columns.Add(CreateBoundColumn(&quot;IntegerValue&quot;, &quot;Item&quot;))\n         ItemsGrid.Columns.Add( _\n             CreateBoundColumn(&quot;StringValue&quot;, &quot;Description&quot;))\n         ItemsGrid.Columns.Add( _\n             CreateBoundColumn(&quot;CurrencyValue&quot;, &quot;Price&quot;, &quot;{0:c}&quot;, _\n             HorizontalAlign.Right))\n         ItemsGrid.Columns.Add( _\n             CreateLinkColumn(&quot;http:&#39;www.microsoft.com&quot;, &quot;_self&quot;, _\n             &quot;Microsoft&quot;, &quot;Related link&quot;))\n        \n         &#39; Specify the data source and bind it to the control.     \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n\n         &#39; Add the DataGrid control to the Controls collection of \n         &#39; the PlaceHolder control.\n         Place.Controls.Add(ItemsGrid)\n\n      End Sub\n\n      Function CreateBoundColumn(DataFieldValue As String, HeaderTextValue As String) As BoundColumn\n\n         &#39; This version of CreateBoundColumn method sets only the \n         &#39; DataField and HeaderText properties.\n\n         &#39; Create a BoundColumn.\n         Dim column As BoundColumn = New BoundColumn()\n\n         &#39; Set the properties of the BoundColumn.\n         column.DataField = DataFieldValue\n         column.HeaderText = HeaderTextValue\n\n         Return column\n\n      End Function\n\n      Function CreateBoundColumn(DataFieldValue As String, _\n          HeaderTextValue As String, FormatValue As String, _\n          AlignValue As HorizontalAlign) As BoundColumn\n\n         &#39; This version of CreateBoundColumn method sets the DataField,\n         &#39; HeaderText, and DataFormatString properties. It also sets the \n         &#39; HorizontalAlign property of the ItemStyle property of the column. \n\n         &#39; Create a BoundColumn using the overloaded CreateBoundColumn method.\n         Dim column As BoundColumn = CreateBoundColumn(DataFieldValue, HeaderTextValue)\n\n         &#39; Set the properties of the BoundColumn.\n         column.DataFormatString = FormatValue\n         column.ItemStyle.HorizontalAlign = AlignValue\n\n         Return column\n\n      End Function\n\n      Function CreateLinkColumn(NavUrlValue As String, TargetValue As String, _\n         TextValue As String, HeaderTextValue As String) As HyperLinkColumn \n\n         &#39; Create a BoundColumn.\n         Dim column As HyperLinkColumn = New HyperLinkColumn()\n\n         &#39; Set the properties of the ButtonColumn.\n         column.NavigateUrl = NavUrlValue\n         column.Target = TargetValue\n         column.Text = TextValue\n         column.HeaderText = HeaderTextValue\n\n         Return column\n\n      End Function\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Constructor Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid Constructor Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n\n      &lt;asp:PlaceHolder id=&quot;Place&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_CancelCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the <code>Cancel</code> command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string CancelCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the CancelCommandName field to represent the <code>Cancel</code> command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_DeleteCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Delete command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string DeleteCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the DeleteCommandName field to represent the Delete command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_EditCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Edit command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string EditCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the EditCommandName field to represent the Edit command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_NextPageCommandArgument\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextPageCommandArgument</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Next command argument. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string NextPageCommandArgument;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the NextPageCommandArgument field to represent the Next command argument.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_PageCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PageCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Page command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string PageCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the PageCommandName field to represent the Page command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_PrevPageCommandArgument\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrevPageCommandArgument</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Prev command argument. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string PrevPageCommandArgument;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the PrevPageCommandArgument field to represent the Prev command argument.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_SelectCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Select command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string SelectCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SelectCommandName field to represent the Select command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_SortCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Sort command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string SortCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SortCommandName field to represent the Sort command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_UpdateCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Update command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string UpdateCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the UpdateCommandName field to represent the Update command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_AllowCustomPaging\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_AllowCustomPaging_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowCustomPaging</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether custom paging is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AllowCustomPaging { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if custom paging is enabled; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Paging allows you to display the contents of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control in page segments. The number of items on a page is determined by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> property. If no value is specified for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> property, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> will display 10 items on a page.  </p>\n<p> Normally, a data source that contains every row in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is loaded every time the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control moves to a different page. This can consume a lot of resources when the data source is very large. Custom paging allows you to load just the segment of data needed to display a single page.  </p>\n<p> To enable custom paging, set both the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AllowPaging_\" data-linktype=\"relative-path\">AllowPaging</a> and AllowCustomPaging properties to <code>true</code>. Next, provide code to handle the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event.  </p>\n<p> The typical logic for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event handler is to first set the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CurrentPageIndex_\" data-linktype=\"relative-path\">CurrentPageIndex</a> property to the index of the page you want to display.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The event handler receives a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagechangedeventargs\" data-linktype=\"relative-path\">DataGridPageChangedEventArgs</a> object as a parameter. You can use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagechangedeventargs#System_Web_UI_WebControls_DataGridPageChangedEventArgs_NewPageIndex_\" data-linktype=\"relative-path\">NewPageIndex</a> property of this parameter to determine the index of the page selected by the user from the page selection elements of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n</div>\n<p> Next, create a data source that contains the data to display on a single page and then use the <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataBind_\" data-linktype=\"relative-path\">DataBind</a> method to bind the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because only a segment of the data is loaded, you must set the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_VirtualItemCount_\" data-linktype=\"relative-path\">VirtualItemCount</a> property to the total number of items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This allows the control to determine the total number of pages needed to display every item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This property is normally programmatically set once the total number of items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is determined.  </p>\n</div>\n<p> When paging is enabled with the AllowCustomPaging property is set to <code>false</code>, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control assumes that the data source contains all the items to be displayed. The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control calculates the indexes of the items on the displayed page based on the page index, specified by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CurrentPageIndex_\" data-linktype=\"relative-path\">CurrentPageIndex</a> property, and the number of items on a page, specified by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> property.  </p>\n<p> When the AllowCustomPaging property is set to <code>true</code>, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control assumes that the data source only contains the items as determined by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_VirtualItemCount_\" data-linktype=\"relative-path\">VirtualItemCount</a> property. All items up to the number of items specified by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> property are displayed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AllowCustomPaging property to enable custom paging.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridCustomPaging#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script runat=&quot;server&quot;&gt;\n\n      // Normally, an entire data source is loaded in the DataGrid control, \n      // which can take up a lot of resources. This example uses custom \n      // paging, which loads only the segment of data needed to fill a\n      // single page. In order to query for the appropriate segment of\n      // data, the index of the first item displayed on a page must be\n      // tracked as the user navigates between pages.\n      int startIndex = 0;\n\n      ICollection CreateDataSource() \n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n\n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n\n         // Populate the table with sample values. When using custom paging,\n         // a query should only return enough data to fill a single page, \n         // beginning at the start index.\n         for (int i = startIndex; i &lt; (startIndex + MyDataGrid.PageSize); i++) \n         {\n             dr = dt.NewRow();\n\n             dr[0] = i;\n             dr[1] = &quot;Item &quot; + i.ToString();\n             dr[2] = DateTime.Now.ToShortDateString();\n             dr[3] = (i % 2 != 0) ? true : false;\n\n             dt.Rows.Add(dr);\n         }\n\n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n\n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n\n            // Set the virtual item count, which specifies the total number\n            // items displayed in the DataGrid control when custom paging\n            // is used.\n            MyDataGrid.VirtualItemCount = 200;\n\n            // Retrieve the segment of data to display on the page from the\n            // data source and bind it to the DataGrid control.\n            BindGrid();\n\n         }\n\n      }\n\n      void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e) \n      {\n\n         // For the DataGrid control to navigate to the correct page when\n         // paging is allowed, the CurrentPageIndex property must be updated\n         // programmatically. This process is usually accomplished in the\n         // event-handling method for the PageIndexChanged event.\n\n         // Set CurrentPageIndex to the page the user clicked.\n         MyDataGrid.CurrentPageIndex = e.NewPageIndex;\n\n         // Calculate the index of the first item to display on the page \n         // using the current page index and the page size.\n         startIndex = MyDataGrid.CurrentPageIndex * MyDataGrid.PageSize;\n\n         // Retrieve the segment of data to display on the page from the \n         // data source and bind it to the DataGrid control.\n         BindGrid();\n\n      }\n\n      void BindGrid() \n      {\n\n         MyDataGrid.DataSource = CreateDataSource();\n         MyDataGrid.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt; DataGrid Custom Paging Example &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt; DataGrid Custom Paging Example &lt;/h3&gt;\n\n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; \n           AllowCustomPaging=&quot;True&quot; \n           AllowPaging=&quot;True&quot; \n           PageSize=&quot;10&quot; \n           OnPageIndexChanged=&quot;MyDataGrid_Page&quot; \n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;Navy&quot; \n                      ForeColor=&quot;White&quot; \n                      Font-Bold=&quot;True&quot; /&gt;\n\n         &lt;PagerStyle Mode=&quot;NumericPages&quot; \n                     HorizontalAlign=&quot;Right&quot; /&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridCustomPaging#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script runat=&quot;server&quot;&gt;\n\n      &#39; Normally, an entire data source is loaded in the DataGrid control, \n      &#39; which can take up a lot of resources. This example uses custom \n      &#39; paging, which loads only the segment of data needed to fill a\n      &#39; single page. In order to query for the appropriate segment of\n      &#39; data, the index of the first item displayed on a page must be\n      &#39; tracked as the user navigates between pages.\n      Dim startIndex As Integer = 0\n\n      Function CreateDataSource() As ICollection \n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n\n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n\n         &#39; Populate the table with sample values. When using custom paging,\n         &#39; a query should only return enough data to fill a single page, \n         &#39; beginning at the start index.\n         Dim i As Integer         \n\n         For i = startIndex To ((startIndex + MyDataGrid.PageSize) - 1) \n\n             dr = dt.NewRow()\n\n             dr(0) = i\n             dr(1) = &quot;Item &quot; &amp; i.ToString()\n             dr(2) = DateTime.Now.ToShortDateString()\n             If (i Mod 2 &lt;&gt; 0) Then\n                dr(3) = True\n             Else\n                dr(3) = False\n             End If\n\n             dt.Rows.Add(dr)\n\n         Next i\n\n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n\n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n\n            &#39; Set the virtual item count, which specifies the total number\n            &#39; items displayed in the DataGrid control when custom paging\n            &#39; is used.\n            MyDataGrid.VirtualItemCount = 200\n\n            &#39; Retrieve the segment of data to display on the page from the \n            &#39; data source and bind it to the DataGrid control.\n            BindGrid()\n\n         End If\n\n      End Sub\n\n      Sub MyDataGrid_Page(sender as Object, e As DataGridPageChangedEventArgs) \n\n         &#39; For the DataGrid control to navigate to the correct page when\n         &#39; paging is allowed, the CurrentPageIndex property must be updated\n         &#39; programmatically. This process is usually accomplished in the\n         &#39; event-handling method for the PageIndexChanged event.\n\n         &#39; Set CurrentPageIndex to the page the user clicked.\n         MyDataGrid.CurrentPageIndex = e.NewPageIndex\n\n         &#39; Calculate the index of the first item to display on the page \n         &#39; using the current page index and the page size.\n         startIndex = MyDataGrid.CurrentPageIndex * MyDataGrid.PageSize\n\n         &#39; Retrieve the segment of data to display on the page from the \n         &#39; data source and bind it to the DataGrid control.\n         BindGrid()\n\n      End Sub\n\n      Sub BindGrid() \n\n         MyDataGrid.DataSource = CreateDataSource()\n         MyDataGrid.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt; DataGrid Custom Paging Example &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt; DataGrid Custom Paging Example &lt;/h3&gt;\n\n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; \n           AllowCustomPaging=&quot;True&quot; \n           AllowPaging=&quot;True&quot; \n           PageSize=&quot;10&quot; \n           OnPageIndexChanged=&quot;MyDataGrid_Page&quot; \n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;Navy&quot; \n                      ForeColor=&quot;White&quot; \n                      Font-Bold=&quot;True&quot; /&gt;\n\n         &lt;PagerStyle Mode=&quot;NumericPages&quot; \n                     HorizontalAlign=&quot;Right&quot; /&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_AllowPaging\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_AllowPaging_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowPaging</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether paging is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AllowPaging { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if paging is enabled; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Paging allows you to display the contents of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control in page segments. The number of items on a page is determined by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> property. If no value is specified for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> property, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control will display 10 items on a page.  </p>\n<p> By default, paging is disabled. To enable paging, set this property to <code>true</code> and provide code to handle the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event.  </p>\n<p> The typical logic for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event is to set the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CurrentPageIndex_\" data-linktype=\"relative-path\">CurrentPageIndex</a> property to the index of the page you want to display and then use the <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataBind_\" data-linktype=\"relative-path\">DataBind</a> method to bind the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The event handler receives a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagechangedeventargs\" data-linktype=\"relative-path\">DataGridPageChangedEventArgs</a> object as a parameter. You can use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagechangedeventargs#System_Web_UI_WebControls_DataGridPageChangedEventArgs_NewPageIndex_\" data-linktype=\"relative-path\">NewPageIndex</a> property of this parameter to determine the index of the page selected by the user from the page selection elements of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n</div>\n<p> With standard paging, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control assumes that the data source contains all the items to be displayed. The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control calculates the indexes of the items on the displayed page based on the page index, specified by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CurrentPageIndex_\" data-linktype=\"relative-path\">CurrentPageIndex</a> property, and the number of items of items on a page, specified by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> property.  </p>\n<p> Normally, a data source that contains all items to be displayed is loaded every time the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is paged. This can consume a lot of resources when the data source is very large. Custom paging allows you to load just the segment of data needed to display a single page. For additional information on custom paging, see the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AllowCustomPaging_\" data-linktype=\"relative-path\">AllowCustomPaging</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AllowPaging property to enable paging.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.AllowPaging Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n   DataTable Cart;\n   DataView CartView;\n \n   ICollection CreateDataSource() \n   {\n      DataTable dt = new DataTable();\n      DataRow dr;\n \n      dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n      dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n      dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n      for (int i = 0; i &lt; 100; i++) \n      {\n         dr = dt.NewRow();\n \n         dr[0] = i;\n         dr[1] = &quot;Item &quot; + i.ToString();\n         dr[2] = 1.23 * (i+1); \n         dt.Rows.Add(dr);\n      }\n \n      DataView dv = new DataView(dt);\n      return dv;\n   }\n \n   void Page_Load(Object sender, EventArgs e) \n   {\n \n      if (!IsPostBack) \n      {\n         // Need to load this data only once.\n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      }\n \n      if (CheckBox1.Checked)\n         ItemsGrid.PagerStyle.Mode = PagerMode.NumericPages;\n      else\n         ItemsGrid.PagerStyle.Mode = PagerMode.NextPrev;\n\n   }\n \n   void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n   {\n \n      // Set CurrentPageIndex to the page the user clicked.\n      ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n      // Rebind the data. \n      ItemsGrid.DataSource = CreateDataSource();\n      ItemsGrid.DataBind();\n      \n   }\n \n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Paging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n   &lt;h3&gt;DataGrid Paging Example&lt;/h3&gt;\n \n   &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;black&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        AllowPaging=&quot;true&quot;\n        AutoGenerateColumns=&quot;false&quot;        \n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n \n      &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n      &lt;/HeaderStyle&gt;\n \n      &lt;PagerStyle Mode=&quot;NextPrev&quot;&gt;\n      &lt;/PagerStyle&gt; \n\n      &lt;Columns&gt;\n\n         &lt;asp:BoundColumn \n              HeaderText=&quot;Number&quot; \n              DataField=&quot;IntegerValue&quot;/&gt;\n \n        &lt;asp:BoundColumn \n              HeaderText=&quot;Item&quot; \n              DataField=&quot;StringValue&quot;/&gt;\n\n         &lt;asp:BoundColumn \n              HeaderText=&quot;Price&quot; \n              DataField=&quot;CurrencyValue&quot; \n              DataFormatString=&quot;{0:c}&quot;&gt;\n \n            &lt;ItemStyle HorizontalAlign=&quot;right&quot;&gt;\n            &lt;/ItemStyle&gt;\n     \n         &lt;/asp:BoundColumn&gt;\n\n      &lt;/Columns&gt;\n\n   &lt;/asp:DataGrid&gt;\n\n   &lt;br /&gt;\n\n   &lt;asp:CheckBox id=&quot;CheckBox1&quot; \n                 Text=&quot;Show page navigation&quot;\n                 AutoPostBack=&quot;true&quot;\n                 runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.AllowPaging Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n        Dim Cart As DataTable\n        Dim CartView As DAtaView\n\n        Function CreateDataSource() As ICollection\n            Dim dt As New DataTable()\n            Dim dr As DataRow\n            \n            dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n            dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n            dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n            \n            Dim i As Integer\n            For i = 0 To 99\n                dr = dt.NewRow()\n                \n                dr(0) = i\n                dr(1) = &quot;Item &quot; + i.ToString()\n                dr(2) = 1.23 *(i + 1)\n                dt.Rows.Add(dr)\n            Next i\n            \n            Dim dv As New DataView(dt)\n            Return dv\n        End Function &#39;CreateDataSource\n\n\n        Sub Page_Load(sender As Object, e As EventArgs)\n            \n            If Not IsPostBack Then\n                &#39; Need to load this data only once.\n                ItemsGrid.DataSource = CreateDataSource()\n                ItemsGrid.DataBind()\n            End If\n            \n            If CheckBox1.Checked Then\n                ItemsGrid.PagerStyle.Mode = PagerMode.NumericPages\n            Else\n                ItemsGrid.PagerStyle.Mode = PagerMode.NextPrev\n            End If \n        End Sub &#39;Page_Load\n\n\n        Sub Grid_Change(sender As Object, e As DataGridPageChangedEventArgs)\n            \n            &#39; Set CurrentPageIndex to the page the user clicked.\n            ItemsGrid.CurrentPageIndex = e.NewPageIndex\n            \n            &#39; Rebind the data. \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End Sub &#39;Grid_Change  \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Paging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n   &lt;h3&gt;DataGrid Paging Example&lt;/h3&gt;\n \n   &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;black&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        AllowPaging=&quot;true&quot;\n        AutoGenerateColumns=&quot;false&quot;        \n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n \n      &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n      &lt;/HeaderStyle&gt;\n \n      &lt;PagerStyle Mode=&quot;NextPrev&quot;&gt;\n      &lt;/PagerStyle&gt; \n\n      &lt;Columns&gt;\n\n         &lt;asp:BoundColumn \n              HeaderText=&quot;Number&quot; \n              DataField=&quot;IntegerValue&quot;/&gt;\n \n        &lt;asp:BoundColumn \n              HeaderText=&quot;Item&quot; \n              DataField=&quot;StringValue&quot;/&gt;\n\n         &lt;asp:BoundColumn \n              HeaderText=&quot;Price&quot; \n              DataField=&quot;CurrencyValue&quot; \n              DataFormatString=&quot;{0:c}&quot;&gt;\n \n            &lt;ItemStyle HorizontalAlign=&quot;right&quot;&gt;\n            &lt;/ItemStyle&gt;\n     \n         &lt;/asp:BoundColumn&gt;\n\n      &lt;/Columns&gt;\n\n   &lt;/asp:DataGrid&gt;\n\n   &lt;br /&gt;\n\n   &lt;asp:CheckBox id=&quot;CheckBox1&quot; \n                 Text=&quot;Show page navigation&quot;\n                 AutoPostBack=&quot;true&quot;\n                 runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridAllowPaging#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        &#39; Create sample data for the DataGrid control.\n        Dim dt As DataTable = New DataTable()\n        Dim dr As DataRow\n \n        &#39; Define the columns of the table.\n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n        &#39; Populate the table with sample values.\n        Dim i As Integer\n        For i = 0 To 100\n            dr = dt.NewRow()\n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dt.Rows.Add(dr)\n        Next i\n \n        Dim dv As DataView = New DataView(dt)\n        Return dv\n    End Function\n \n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Load sample data only once, when the page is first loaded.\n        If Not IsPostBack Then\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub\n\n    Sub Check_Change(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Allow or prevent paging depending on the user&#39;s selection.\n        ItemsGrid.AllowPaging = AllowPagingCheckBox.Checked()\n\n        &#39; Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub\n\n    Sub Grid_Change(ByVal sender As Object, ByVal e As DataGridPageChangedEventArgs)\n        &#39; For the DataGrid control to navigate to the correct page when\n        &#39; paging is allowed, the CurrentPageIndex property must be updated\n        &#39; programmatically. This process is usually accomplished in the\n        &#39; event-handling method for the PageIndexChanged event.\n\n        &#39; Set CurrentPageIndex to the page the user clicked.\n        ItemsGrid.CurrentPageIndex = e.NewPageIndex\n\n        &#39; Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head2&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n\n    &lt;h3&gt;DataGrid AllowPaging Example&lt;/h3&gt;\n\n    &lt;p&gt;Select whether to allow paging in the DataGrid control.&lt;br /&gt;\n       &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n            Text=&quot;Allow paging&quot;\n            AutoPostBack=&quot;True&quot;\n            Checked=&quot;True&quot;\n            OnCheckedChanged=&quot;Check_Change&quot;\n            runat=&quot;server&quot; /&gt;\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n        AssociatedControlID=&quot;ItemsGrid&quot; \n        Font-Bold=&quot;true&quot;&gt;Product List&lt;/asp:Label&gt;\n    &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;Gray&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        UseAccessibleHeader=&quot;true&quot;\n        AutoGenerateColumns=&quot;False&quot;\n        PageSize=&quot;10&quot;\n        AllowPaging=&quot;True&quot;\n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 ItemStyle-HorizontalAlign=&quot;center&quot;\n                 HeaderText=&quot;Item&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                HeaderText=&quot;Description&quot; \n                ItemStyle-HorizontalAlign=&quot;left&quot;\n                SortExpression=&quot;StringValue&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot; /&gt;\n\n        &lt;/Columns&gt;\n        &lt;ItemStyle HorizontalAlign=&quot;Right&quot; /&gt;\n    &lt;/asp:DataGrid&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridAllowPaging#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    private ICollection CreateDataSource()\n    {\n        // Create sample data for the DataGrid control.\n        DataTable dt = new DataTable();\n        DataRow dr;\n\n        // Define the columns of the table.\n        dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n        dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n        dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n\n        // Populate the table with sample values.\n        for (int i = 0; i &lt;= 100; i++) \n        {\n            dr = dt.NewRow();\n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n\n            dt.Rows.Add(dr);\n        }\n        DataView dv = new DataView(dt);\n        return dv;\n    }\n\n    private void Page_Load(Object sender, EventArgs e)\n    { \n        // Load sample data only once, when the page is first loaded.\n        if (!IsPostBack)\n        { \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n        }\n    }\n\n    private void Check_Change(Object sender, EventArgs e)\n    {\n        // Allow or prevent paging depending \n        // on the user&#39;s selection.\n        ItemsGrid.AllowPaging = AllowPagingCheckBox.Checked;\n\n        // Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource();\n        ItemsGrid.DataBind();\n    }\n\n    private void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n    {\n        // For the DataGrid control to navigate to the correct page when\n        // paging is allowed, the CurrentPageIndex property must be updated\n        // programmatically. This process is usually accomplished in the\n        // event-handling method for the PageIndexChanged event.\n\n        // Set CurrentPageIndex to the page the user clicked.\n        ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n        // Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource();\n        ItemsGrid.DataBind();\n    }\n&lt;/script&gt;\n \n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid AllowPaging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n \n    &lt;h3&gt;DataGrid AllowPaging Example&lt;/h3&gt;\n\n    &lt;p&gt;Select whether to allow paging in the DataGrid control.&lt;br /&gt;\n       &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n            Text=&quot;Allow paging&quot;\n            AutoPostBack=&quot;True&quot;\n            Checked=&quot;True&quot;\n            OnCheckedChanged=&quot;Check_Change&quot;\n            runat=&quot;server&quot; /&gt;\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;asp:Label runat=&quot;server&quot; \n        AssociatedControlID=&quot;ItemsGrid&quot; \n        Font-Bold=&quot;true&quot;&gt;Product List&lt;/asp:Label&gt;\n    &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;Gray&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        AutoGenerateColumns=&quot;False&quot;\n        UseAccessibleHeader=&quot;true&quot;\n        PageSize=&quot;10&quot;\n        AllowPaging=&quot;True&quot;\n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 ItemStyle-HorizontalAlign=&quot;center&quot;\n                 HeaderText=&quot;Item&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                HeaderText=&quot;Description&quot; \n                ItemStyle-HorizontalAlign=&quot;left&quot;\n                SortExpression=&quot;StringValue&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot; /&gt;\n\n        &lt;/Columns&gt;\n        &lt;ItemStyle HorizontalAlign=&quot;Right&quot; /&gt;\n    &lt;/asp:DataGrid&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_AllowSorting\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_AllowSorting_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowSorting</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether sorting is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AllowSorting { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if sorting is enabled; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When sorting is enabled, <a class=\"xref\" href=\"system.web.ui.webcontrols.linkbutton\" data-linktype=\"relative-path\">LinkButton</a> controls are rendered in the heading section of each column where the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_SortExpression_\" data-linktype=\"relative-path\">SortExpression</a> property is set. These <a class=\"xref\" href=\"system.web.ui.webcontrols.linkbutton\" data-linktype=\"relative-path\">LinkButton</a> controls allow you to sort the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control by the selected column. The only exception is when you use a <a class=\"xref\" href=\"system.web.ui.webcontrols.templatecolumn\" data-linktype=\"relative-path\">TemplateColumn</a> column type with the <a class=\"xref\" href=\"system.web.ui.webcontrols.templatecolumn#System_Web_UI_WebControls_TemplateColumn_HeaderTemplate_\" data-linktype=\"relative-path\">HeaderTemplate</a> property set. In this case, you must provide a <a class=\"xref\" href=\"system.web.ui.webcontrols.button\" data-linktype=\"relative-path\">Button</a> control in the <a class=\"xref\" href=\"system.web.ui.webcontrols.templatecolumn#System_Web_UI_WebControls_TemplateColumn_HeaderTemplate_\" data-linktype=\"relative-path\">HeaderTemplate</a> of the column.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SortCommand\" data-linktype=\"relative-path\">SortCommand</a> event is raised when one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.linkbutton\" data-linktype=\"relative-path\">LinkButton</a> controls is clicked. It is up to you to provide code for the event handler. The typical logic for the handler is to sort the list, and then rebind the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AllowSorting property to enable sorting.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.AllowSorting Example 2#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n    \n    string SortExpression;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n       Random Rand_Num = new Random();\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n       for (int i = 0; i &lt; 15; i++) \n       {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = 1.23 * Rand_Num.Next(1, 15);\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       dv.Sort=SortExpression;\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs e) \n    {\n \n       if (!IsPostBack) \n       {\n \n          if (SortExpression == &quot;&quot;)\n             SortExpression = &quot;IntegerValue&quot;;      \n          ItemsGrid.DataSource = CreateDataSource();\n          ItemsGrid.DataBind();\n       }\n \n    }\n \n    void Sort_Grid(Object sender, DataGridSortCommandEventArgs e) \n    {\n       SortExpression = e.SortExpression.ToString();\n       ItemsGrid.DataSource = CreateDataSource();\n       ItemsGrid.DataBind();\n    }\n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Sorting Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;h3&gt;DataGrid Sorting Example&lt;/h3&gt;\n \n       &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            CellPadding=&quot;3&quot;\n            AllowSorting=&quot;true&quot;\n            OnSortCommand=&quot;Sort_Grid&quot;\n            HeaderStyle-BackColor=&quot;#00aaaa&quot;\n            AutoGenerateColumns=&quot;true&quot;/&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.AllowSorting Example 2#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n    \n    Dim SortExpression As String\n \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        Dim Rand_Num As New Random()\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 14\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * Rand_Num.Next(1, 15)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        dv.Sort = SortExpression\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            \n            If SortExpression = &quot;&quot; Then\n                SortExpression = &quot;IntegerValue&quot;\n            End If\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n     \n\n    Sub Sort_Grid(sender As Object, e As DataGridSortCommandEventArgs)\n        SortExpression = e.SortExpression.ToString()\n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub &#39;Sort_Grid\n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Sorting Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;h3&gt;DataGrid Sorting Example&lt;/h3&gt;\n \n       &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            CellPadding=&quot;3&quot;\n            AllowSorting=&quot;true&quot;\n            OnSortCommand=&quot;Sort_Grid&quot;\n            HeaderStyle-BackColor=&quot;#00aaaa&quot;\n            AutoGenerateColumns=&quot;true&quot;/&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridAllowSorting#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    ICollection CreateDataSource()\n    {\n        // Create a Random object to mix up the \n        // order of items in the sample data.\n        Random randNum = new Random();\n\n        // Create sample data for the DataGrid control.\n        DataTable dt = new DataTable();\n\n        // Define the columns of the table.\n        dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n        dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n        dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n\n        // Populate the table with sample values.\n        for (int i = 0; i &lt;= 8; i++)\n        {\n            DataRow dr = dt.NewRow();\n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + randNum.Next(1, 15).ToString();\n            dr[2] = 1.23 * randNum.Next(1, 15);\n            dt.Rows.Add(dr);\n        }\n\n        // To persist the data source between posts to the server,\n        // store it in session state.  \n        Session[&quot;Source&quot;] = dt;\n        DataView dv = new DataView(dt);\n        return dv;\n    }\n\n    void Page_Load(Object sender, EventArgs e)\n    {\n        // Load sample data only once, when the page is first loaded.\n        if (!IsPostBack)\n        {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n        }\n    }\n\n    void Sort_Grid(Object sender, DataGridSortCommandEventArgs e)\n    {\n        // Retrieve the data source from session state.\n        DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n        // Create a DataView from the DataTable.\n        DataView dv = new DataView(dt);\n\n        // The DataView provides an easy way to sort. Simply set the\n        // Sort property with the name of the field to sort by.\n        dv.Sort = e.SortExpression;\n\n        // Rebind the data source and specify that it should be sorted\n        // by the field specified in the SortExpression property.\n        ItemsGrid.DataSource = dv;\n        ItemsGrid.DataBind();\n    }\n\n    void Check_Change(Object sender, EventArgs e)\n    {\n        // Allow or prevent sorting depending on the user&#39;s selection.\n        ItemsGrid.AllowSorting = AllowSortingCheckBox.Checked;\n\n        // After changing the property, rebind the data to\n        // refresh the DataGrid control.\n\n        // Retrieve the data source from session state.\n        DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n        // Create a DataView from the DataTable.\n        DataView dv = new DataView(dt);\n\n        // Rebind the data source.\n        ItemsGrid.DataSource = dv;\n        ItemsGrid.DataBind();\n    }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n        ExtractTemplateRows Example\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;h3&gt;DataGrid AllowSorting Example&lt;/h3&gt;\n\n      &lt;p&gt;Select whether to allow sorting in the DataGrid control.&lt;br /&gt;\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;&lt;/p&gt;\n      &lt;hr /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnSortCommand=&quot;Sort_Grid&quot;\n           UseAccessibleHeader=&quot;true&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot; /&gt;\n         &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n            &lt;/asp:BoundColumn&gt;\n         &lt;/Columns&gt; \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/div&gt;\n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridAllowSorting#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        &#39; Create a Random object to mix up the order \n        &#39; of items in the sample data.\n        Dim randNum As Random = New Random()\n\n        &#39; Create sample data for the DataGrid control.\n        Dim dt As DataTable = New DataTable()\n\n        &#39; Define the columns of the table.\n        dt.Columns.Add( _\n            New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add( _\n            New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add( _\n            New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n\n        &#39; Populate the table with sample values.\n        Dim i As Integer\n        For i = 0 To 8\n            Dim dr As DataRow = dt.NewRow()\n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; randNum.Next(1, 15).ToString()\n            dr(2) = 1.23 * randNum.Next(1, 15)\n            dt.Rows.Add(dr)\n        Next\n\n        &#39; Persist the data source between posts to \n        &#39; the server, in the session state.  \n        Session(&quot;Source&quot;) = dt\n\n        Dim dv As DataView = New DataView(dt)\n        Return dv\n    End Function\n\n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Load sample data when the page is first loaded.\n        If Not IsPostBack Then\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub\n\n    Sub Sort_Grid(ByVal sender As Object, _\n        ByVal e As DataGridSortCommandEventArgs)\n\n        &#39; Retrieve the data source from session state.\n        Dim dt As DataTable = _\n            CType(Session(&quot;Source&quot;), DataTable)\n\n        &#39; Create a DataView from the DataTable.\n        Dim dv As DataView = New DataView(dt)\n\n        &#39; The DataView provides an easy way to \n        &#39; sort. Simply set the Sort property with \n        &#39; the name of the field to sort by.\n        dv.Sort = e.SortExpression\n\n        &#39; Rebind the data source and specify that \n        &#39; it should be sorted by the field specified \n        &#39; in the SortExpression property.\n        ItemsGrid.DataSource = dv\n        ItemsGrid.DataBind()\n    End Sub\n\n    Sub Check_Change(ByVal sender As Object, _\n        ByVal e As EventArgs)\n        &#39; Allow or prevent sorting depending \n        &#39; on the user&#39;s selection.\n        ItemsGrid.AllowSorting = _\n            AllowSortingCheckBox.Checked\n\n        &#39; After changing the property, rebind \n        &#39; the data to refresh the DataGrid control.\n\n        &#39; Retrieve data source from session state.\n        Dim dt As DataTable = _\n            CType(Session(&quot;Source&quot;), DataTable)\n\n        &#39; Create a DataView from the DataTable.\n        Dim dv As DataView = New DataView(dt)\n\n        &#39; Rebind the data source.\n        ItemsGrid.DataSource = dv\n        ItemsGrid.DataBind()\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n        ExtractTemplateRows Example\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;h3&gt;DataGrid AllowSorting Example&lt;/h3&gt;\n\n      &lt;p&gt;Select whether to allow sorting in the DataGrid control.&lt;br /&gt;\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;&lt;/p&gt;\n      &lt;hr /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnSortCommand=&quot;Sort_Grid&quot;\n           UseAccessibleHeader=&quot;true&quot; \n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot; /&gt;\n         &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n            &lt;/asp:BoundColumn&gt;\n         &lt;/Columns&gt; \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/div&gt;\n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_AlternatingItemStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlternatingItemStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that represents the style properties for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the AlternatingItemStyle property to provide a custom style for the alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. Common style attributes that can be adjusted include forecolor, backcolor, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property, all other item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the AlternatingItemStyle property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property. The following table lists the hierarchy order from highest to lowest.  </p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Style Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a></td>\n</tr>\n<tr>\n<td>3</td>\n<td>AlternatingItemStyle</td>\n</tr>\n<tr>\n<td>4</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a></td>\n</tr>\n<tr>\n<td>5</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a></td>\n</tr>\n</tbody>\n</table>\n<p> To specify a custom style for the alternating items, place the <code>&lt;AlternatingItemStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. You can then list the style attributes within the opening <code>&lt;AlternatingItemStyle&gt;</code> tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AlternatingItemStyle property to specify a different background color for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridAlternatingItemStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; %&gt;\n\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         for (int i = 0; i &lt;= 8; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         if (!IsPostBack) \n         {\n            // Load this data only once.\n            ItemsGrid.DataSource= CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid AlternatingItemStyle Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;LightGreen&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Number&quot; \n                 DataField=&quot;IntegerValue&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Description&quot; \n                 DataField=&quot;StringValue&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;CurrencyValue&quot; \n                 DataFormatString=&quot;{0:c}&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridAlternatingItemStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n   \n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n         Dim i As Integer\n         Dim dv As DataView\n \n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Integer)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         For i = 0 to 8\n\n            dr = dt.NewRow()\n   \n            dr(0) = i\n            dr(1) = &quot;Item &quot; + i.ToString()\n            dr(2) = 1.23 * (i+1)\n    \n            dt.Rows.Add(dr)\n      \n         Next i\n \n         dv = New DataView(dt)\n         CreateDataSource = dv\n   \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         If Not IsPostBack \n         \n            &#39; Load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n          \n         End If\n         \n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid AlternatingItemStyle Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;LightGreen&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Number&quot; \n                 DataField=&quot;IntegerValue&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Description&quot; \n                 DataField=&quot;StringValue&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;CurrencyValue&quot; \n                 DataFormatString=&quot;{0:c}&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(string)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 4 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n  \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n\n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the items and alternating items in\n         &#39; the DataGrid control. Notice that the ItemStyle property affects\n         &#39; the even-numbered items, while the AlternatingItemStyle property \n         &#39; affects the odd-numbered items.\n         ItemsGrid.ItemStyle.BackColor = _\n             System.Drawing.Color.FromName(ItemBackColorList.SelectedItem.Value)\n         ItemsGrid.AlternatingItemStyle.BackColor = _\n             System.Drawing.Color.FromName(AltItemBackColorList.SelectedItem.Value)\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemStyle and AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid ItemStyle and AlternatingItemStyle Example&lt;/h3&gt;\n\n      Select background colors for the items and alternating items.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Item BackColor:\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               Alternating item BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemBackColorList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;AltItemBackColorList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 5; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the items and alternating items in\n         // the DataGrid control. Notice that the ItemStyle property affects\n         // the even-numbered items, while the AlternatingItemStyle property \n         // affects the odd-numbered items.\n         ItemsGrid.ItemStyle.BackColor = \n             System.Drawing.Color.FromName(ItemBackColorList.SelectedItem.Value);\n         ItemsGrid.AlternatingItemStyle.BackColor = \n             System.Drawing.Color.FromName(AltItemBackColorList.SelectedItem.Value);\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemStyle and AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid ItemStyle and AlternatingItemStyle Example&lt;/h3&gt;\n\n      Select background colors for the items and alternating items.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Item BackColor:\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               Alternating item BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemBackColorList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;AltItemBackColorList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_AutoGenerateColumns\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_AutoGenerateColumns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AutoGenerateColumns</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> objects are automatically created and displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control for each field in the data source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AutoGenerateColumns { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> objects are automatically created and displayed; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to automatically create a <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> object for each field in the data source. Each field is then rendered as a column in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control in the order that the fields appear in the data source.  </p>\n<p> Not all data types can be bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. If a field contains an unsupported data type, a column is not created for that field. If the data source only contains one column with an unsupported data type, an exception is thrown. The following table shows the data types that can be bound to the control.  </p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Primitives</td>\n<td>A primitive data type, such as <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">System.Int32</a>, <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>, and so on. For a complete list, see <a class=\"xref\" href=\"system.type#System_Type_IsPrimitive_\" data-linktype=\"relative-path\">IsPrimitive</a>.</td>\n</tr>\n<tr>\n<td>String</td>\n<td>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> object.</td>\n</tr>\n<tr>\n<td>DateTime</td>\n<td>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">System.DateTime</a> object.</td>\n</tr>\n<tr>\n<td>Decimal</td>\n<td>A <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">System.Decimal</a> object.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> Explicitly declared columns may be used in conjunction with auto-generated columns. When using both, explicitly declared columns will be rendered first, followed by the auto-generated columns. Auto-generated columns are not added to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_Columns_\" data-linktype=\"relative-path\">Columns</a> collection.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AutoGenerateColumns property to automatically create a <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> object for each field in the data source.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.AutoGenerateColumns Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n   \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n   \n      void Page_Load(Object sender, EventArgs e) \n      {\n   \n         if (!IsPostBack) \n         {\n            // Need to load this data only once.\n            ItemsGrid.DataSource= CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid AutoGenerateColumns Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid AutoGenerateColumns Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;true&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n      &lt;/asp:DataGrid&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.AutoGenerateColumns Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n     Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 8\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            &#39; Need to load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid AutoGenerateColumns Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid AutoGenerateColumns Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;true&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n      &lt;/asp:DataGrid&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_BackImageUrl\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_BackImageUrl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackImageUrl</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the URL of an image to display in the background of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string BackImageUrl { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The URL of an image to display in the background of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The default value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the BackImageUrl property to specify an image to display in the background of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the specified image is smaller than the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control, the image will tile to fill in the background of the control.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how use the BackImageUrl property to specify a background image for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.BackImageUrl Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n  \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n  \n         if (!IsPostBack) \n         {\n            // Need to load this data only once.\n            ItemsGrid.DataSource= CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid BackImageUrl Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid BackImageUrl Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;true&quot;\n           BackImageUrl=&quot;Images\\image1.jpg&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.BackImageUrl Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n        Function CreateDataSource() As ICollection\n            Dim dt As New DataTable()\n            Dim dr As DataRow\n            \n            dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n            dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n            dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n            \n            Dim i As Integer\n            For i = 0 To 8\n                dr = dt.NewRow()\n                \n                dr(0) = i\n                dr(1) = &quot;Item &quot; &amp; i.ToString()\n                dr(2) = 1.23 *(i + 1)\n                \n                dt.Rows.Add(dr)\n            Next i\n            \n            Dim dv As New DataView(dt)\n            Return dv\n        End Function &#39;CreateDataSource\n\n\n        Sub Page_Load(sender As Object, e As EventArgs)\n            \n            If Not IsPostBack Then\n                &#39; Need to load this data only once.\n                ItemsGrid.DataSource = CreateDataSource()\n                ItemsGrid.DataBind()\n            End If\n        End Sub &#39;Page_Load\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid BackImageUrl Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid BackImageUrl Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;true&quot;\n           BackImageUrl=&quot;Images\\image1.jpg&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridBackImageUrl#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;BooleanValue&quot;, typeof(bool)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 5; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = false;\n \n            dt.Rows.Add(dr);\n         }\n\n         // To persist the data source between posts to the server,\n         // store it in session state.  \n         Session[&quot;Source&quot;] = dt;\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            // Make sure to set the header text before binding the data to \n            // the DataGrid control; otherwise, the change will not appear \n            // until the next time the page is refreshed.\n            ItemsGrid.Columns[0].HeaderText = &quot;Item&quot;;\n\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void Button_Click(Object sender, EventArgs e) \n      {\n\n         double subtotal = 0.0;\n\n         // Update the data source with the user&#39;s selection and \n         // calculate the subtotal.\n         DataTable dt = UpdateSource(ref subtotal);\n\n         // Display the subtotal in the footer section of the third column.\n         ItemsGrid.Columns[2].FooterText = \n             &quot;Subtotal: &quot; + subtotal.ToString(&quot;c&quot;);\n\n         // Create a DataView and bind it to the DataGrid control.\n         DataView dv = new DataView(dt);\n         ItemsGrid.DataSource = dv;\n         ItemsGrid.DataBind();\n\n      }\n\n      // This version of UpdateSource updates the data source and\n      // calculates the subtotal.\n      DataTable UpdateSource(ref double subtotal)\n      {\n\n         // Retrieve the data table from session state.\n         DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n         // Iterate through the Items collection and update the data source\n         // with the user&#39;s  selections. If an item is selected, add the\n         // amount of the item to the subtotal.\n         foreach (DataGridItem item in ItemsGrid.Items)\n         {\n\n            // Retrieve the SelectCheckBox CheckBox control from the  \n            // specified item (row) in the DataGrid control.\n            CheckBox selection = \n                (CheckBox)item.FindControl(&quot;SelectCheckBox&quot;);\n\n            if (selection != null)\n            {\n\n               // Update the BooleanValue field with the value of \n               // the check box.\n               dt.Rows[item.ItemIndex][3] = selection.Checked;\n\n               // Add the value of the item to the subtotal if the item\n               // is selected.\n               if (selection.Checked)\n               {\n                  subtotal += \n                      Convert.ToDouble(item.Cells[2].Text.Substring(1));\n               }\n\n            }\n\n         }\n\n         // Save the data source.\n         Session[&quot;Source&quot;] = dt;\n\n         return dt;\n\n      }\n\n      // This version of UpdateSource updates the data source only.\n      DataTable UpdateSource()\n      {\n\n         // Retrieve the data table from session state.\n         DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n         // Iterate through the Items collection and update the data source\n         // with the user&#39;s  selections. If an item is selected, add the\n         // amount of the item to the subtotal.\n         foreach (DataGridItem item in ItemsGrid.Items)\n         {\n\n            // Retrieve the SelectCheckBox CheckBox control from the  \n            // specified item (row) in the DataGrid control.\n            CheckBox selection = \n                (CheckBox)item.FindControl(&quot;SelectCheckBox&quot;);\n\n            if (selection != null)\n            {\n\n               // Update the BooleanValue field with the value of \n               // the check box.\n               dt.Rows[item.ItemIndex][3] = selection.Checked;\n\n            }\n\n         }\n\n         // Save the data source.\n         Session[&quot;Source&quot;] = dt;\n\n         return dt;\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the image for the header section of the first column in\n         // the DataGrid control.\n         ItemsGrid.BackImageUrl = List.SelectedItem.Value;\n\n         // Create a DataView and bind it to the DataGrid control. This\n         // will refresh the DataGrid control with the updated header image.\n         DataView dv = new DataView(UpdateSource());\n         ItemsGrid.DataSource = dv;\n         ItemsGrid.DataBind();\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid BackImageUrl Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid BackImageUrl Example&lt;/h3&gt;\n\n      Select a background image for the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           BackImageUrl=&quot;image1.jpg&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn&gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;BooleanValue&quot;) %&gt;&#39;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n       \n      &lt;hr /&gt;\n\n      Background image: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;image1.jpg&quot;&gt; Image 1 &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;image2.jpg&quot;&gt; Image 2 &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;image3.jpg&quot;&gt; Image 3 &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;image4.jpg&quot;&gt; Image 4 &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridBackImageUrl#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection  \n \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(new DataColumn(&quot;BooleanValue&quot;, GetType(Boolean)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 4 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = False\n \n            dt.Rows.Add(dr)\n         \n         Next i\n\n         &#39; To persist the data source between posts to the server,\n         &#39; store it in session state.  \n         Session(&quot;Source&quot;) = dt\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            &#39; Make sure to set the header text before binding the data to \n            &#39; the DataGrid control; otherwise, the change will not appear \n            &#39; until the next time the page is refreshed.\n            ItemsGrid.Columns(0).HeaderText = &quot;Item&quot;\n\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        \n         End If\n\n      End Sub\n\n      Sub Button_Click(sender As Object, e As EventArgs) \n\n         Dim subtotal As Double = 0.0\n\n         &#39; Update the data source with the user&#39;s selection and \n         &#39; calculate the subtotal.\n         Dim dt As DataTable = UpdateSource(subtotal)\n\n         &#39; Display the subtotal in the footer section of the third column.\n         ItemsGrid.Columns(2).FooterText = _\n             &quot;Subtotal: &quot; &amp; subtotal.ToString(&quot;c&quot;)\n\n         &#39; Create a DataView and bind it to the DataGrid control.\n         Dim dv As DataView = New DataView(dt)\n         ItemsGrid.DataSource = dv\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      &#39; This version of UpdateSource updates the data source and\n      &#39; calculates the subtotal.\n      Function UpdateSource(ByRef subtotal As Double) As DataTable \n\n         &#39; Retrieve the data table from session state.\n         Dim dt As DataTable = CType(Session(&quot;Source&quot;), DataTable)\n         Dim item As DataGridItem \n\n         &#39; Iterate through the Items collection and update the data source\n         &#39; with the user&#39;s  selections. If an item is selected, add the\n         &#39; amount of the item to the subtotal.\n         For Each item in ItemsGrid.Items\n\n            &#39; Retrieve the SelectCheckBox CheckBox control from the\n            &#39; specified item (row) in the DataGrid control.\n            Dim selection As CheckBox = _\n                CType(item.FindControl(&quot;SelectCheckBox&quot;), CheckBox)\n\n            If Not selection Is Nothing\n\n               &#39; Update the BooleanValue field with the value of \n               &#39; the check box.\n               dt.Rows(item.ItemIndex)(3) = selection.Checked\n\n               &#39; Add the value of the item to the subtotal if the item\n               &#39; is selected.\n               If selection.Checked Then\n           \n                  subtotal += _\n                      Convert.ToDouble(item.Cells(2).Text.Substring(1))\n\n               End If\n\n            End If\n\n         Next\n\n         &#39; Save the data source.\n         Session(&quot;Source&quot;) = dt\n\n         Return dt\n\n      End Function\n\n      &#39; This version of UpdateSource updates the data source only.\n      Function UpdateSource() As DataTable \n\n         &#39; Retrieve the data table from session state.\n         Dim dt As DataTable = CType(Session(&quot;Source&quot;), DataTable)\n         Dim item As DataGridItem \n\n         &#39; Iterate through the Items collection and update the data source\n         &#39; with the user&#39;s  selections. If an item is selected, add the\n         &#39; amount of the item to the subtotal.\n         For Each item in ItemsGrid.Items\n\n            &#39; Retrieve the SelectCheckBox CheckBox control from the\n            &#39; specified item (row) in the DataGrid control.\n            Dim selection As CheckBox = _\n                CType(item.FindControl(&quot;SelectCheckBox&quot;), CheckBox)\n\n            If Not selection Is Nothing\n\n               &#39; Update the BooleanValue field with the value of \n               &#39; the check box.\n               dt.Rows(item.ItemIndex)(3) = selection.Checked\n\n            End If\n\n         Next\n\n         &#39; Save the data source.\n         Session(&quot;Source&quot;) = dt\n\n         Return dt\n\n      End Function\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the image for the header section of the first column in\n         &#39; the DataGrid control.\n         ItemsGrid.BackImageUrl = List.SelectedItem.Value\n\n         &#39; Create a DataView and bind it to the DataGrid control. This\n         &#39; will refresh the DataGrid control with the updated header image.\n         Dim dv As DataView = New DataView(UpdateSource())\n         ItemsGrid.DataSource = dv\n         ItemsGrid.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid BackImageUrl Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid BackImageUrl Example&lt;/h3&gt;\n\n      Select a background image for the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           BackImageUrl=&quot;image1.jpg&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn&gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;BooleanValue&quot;) %&gt;&#39;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n       \n      &lt;hr /&gt;\n\n      Background image: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;image1.jpg&quot;&gt; Image 1 &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;image2.jpg&quot;&gt; Image 2 &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;image3.jpg&quot;&gt; Image 3 &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;image4.jpg&quot;&gt; Image 4 &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_Columns\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_Columns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Columns</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of objects that represent the columns of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.DataGridColumnCollection Columns { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumncollection\" data-linktype=\"relative-path\">DataGridColumnCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumncollection\" data-linktype=\"relative-path\">DataGridColumnCollection</a> object that contains a collection of objects that represent the columns of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to programmatically control the collection of columns in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The Columns collection contains explicitly declared columns that get rendered in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Explicitly declared columns may be used in conjunction with automatically generated columns. When using both, explicitly declared columns will be rendered first, followed by the automatically generated columns. Automatically generated columns are not added to the Columns collection.  </p>\n</div>\n<p> The order that the columns are displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is controlled by the order that the columns appear in the Columns collection.  </p>\n<p> The following table shows the different column classes that derive from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn\" data-linktype=\"relative-path\">DataGridColumn</a> class and can be used in the Columns collection.  </p>\n<table>\n<thead>\n<tr>\n<th>Column type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a></td>\n<td>Displays a column bound to a field in a data source. It displays each item in the field as text. This is the default column type of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.buttoncolumn\" data-linktype=\"relative-path\">ButtonColumn</a></td>\n<td>Displays a command button for each item in the column. This allows you to create a column of custom button controls, such as the <code>Add</code> or <code>Remove</code> button.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a></td>\n<td>Displays a column that contains editing commands for each item in the column.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.hyperlinkcolumn\" data-linktype=\"relative-path\">HyperLinkColumn</a></td>\n<td>Displays the contents of each item in the column as a hyperlink. The contents of the column can be bound to a field in a data source or static text.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.templatecolumn\" data-linktype=\"relative-path\">TemplateColumn</a></td>\n<td>Displays each item in the column following a specified template. This allows you to provide custom controls in the column.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> Although you can programmatically add columns to the Columns collection, it is easier to list the columns statically and then use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_Visible_\" data-linktype=\"relative-path\">Visible</a> property to show or hide the column.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Columns collection to dynamically add a column to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.Columns Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n    Dim Cart As DataTable\n    Dim CartView As DataView\n    \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 8\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Session(&quot;DG4_ShoppingCart&quot;) Is Nothing Then\n            Cart = New DataTable()\n            Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(String)))\n            Session(&quot;DG4_ShoppingCart&quot;) = Cart\n        Else\n            Cart = CType(Session(&quot;DG4_ShoppingCart&quot;), DataTable)\n        End If\n        CartView = New DataView(Cart)\n        ShoppingCart.DataSource = CartView\n        ShoppingCart.DataBind()\n        \n        If Not IsPostBack Then\n            &#39; Load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n     \n\n    Sub Page_Init(sender As Object, e As EventArgs)\n        \n        &#39; Create a dynamic column to add to Columns collection.\n        Dim NumberColumn As New BoundColumn()\n        NumberColumn.HeaderText = &quot;Item Number&quot;\n        NumberColumn.DataField = &quot;IntegerValue&quot;\n        \n        &#39; Add column to Columns collection.\n        ItemsGrid.Columns.AddAt(2, NumberColumn)\n    End Sub &#39;Page_Init\n     \n\n    Sub Grid_CartCommand(sender As Object, e As DataGridCommandEventArgs)\n        \n        Dim dr As DataRow = Cart.NewRow()\n        \n        &#39; e.Item is the table row where the command is raised.\n        &#39; For bound columns, the value is stored in the Text property of the TableCell.\n        Dim itemCell As TableCell = e.Item.Cells(2)\n        Dim priceCell As TableCell = e.Item.Cells(3)\n        Dim item As String = itemCell.Text\n        Dim price As String = priceCell.Text\n        \n        If CType(e.CommandSource, Button).CommandName = &quot;AddToCart&quot; Then\n            dr(0) = item\n            dr(1) = price\n            Cart.Rows.Add(dr)\n        Else \n\n            &#39;Remove from Cart.\n            CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n            If CartView.Count &gt; 0 Then\n                CartView.Delete(0)\n            End If\n            CartView.RowFilter = &quot;&quot;\n        End If\n        ShoppingCart.DataBind()\n    End Sub &#39;Grid_CartCommand \n     \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Columns Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid Columns Example&lt;/h3&gt;\n \n      &lt;table cellpadding=&quot;5&quot;&gt;\n         &lt;tr valign=&quot;top&quot;&gt;\n            &lt;td&gt;\n \n               &lt;b&gt;Product List&lt;/b&gt;\n \n               &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n                    BorderColor=&quot;black&quot;\n                    BorderWidth=&quot;1&quot;\n                    CellPadding=&quot;3&quot;\n                    AutoGenerateColumns=&quot;false&quot;\n                    OnItemCommand=&quot;Grid_CartCommand&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n                  &lt;/HeaderStyle&gt;\n \n                  &lt;Columns&gt;\n \n                     &lt;asp:ButtonColumn \n                          HeaderText=&quot;Add to cart&quot; \n                          ButtonType=&quot;PushButton&quot; \n                          Text=&quot;Add&quot; \n                          CommandName=&quot;AddToCart&quot;/&gt;\n \n                     &lt;asp:ButtonColumn \n                          HeaderText=&quot;Remove from cart&quot; \n                          ButtonType=&quot;PushButton&quot; \n                          Text=&quot;Remove&quot; \n                          CommandName=&quot;RemoveFromCart&quot;/&gt;\n \n                     &lt;asp:BoundColumn \n                          HeaderText=&quot;Item&quot; \n                          DataField=&quot;StringValue&quot;/&gt;\n \n                     &lt;asp:BoundColumn \n                          HeaderText=&quot;Price&quot; \n                          DataField=&quot;CurrencyValue&quot; \n                          DataFormatString=&quot;{0:c}&quot;&gt;\n\n                        &lt;ItemStyle HorizontalAlign=&quot;right&quot;&gt;\n                        &lt;/ItemStyle&gt;\n\n                     &lt;/asp:BoundColumn&gt;\n \n                  &lt;/Columns&gt;\n   \n               &lt;/asp:DataGrid&gt;\n \n            &lt;/td&gt;\n            &lt;td&gt;\n \n               &lt;b&gt;Shopping Cart&lt;/b&gt;\n \n               &lt;asp:DataGrid id=&quot;ShoppingCart&quot; \n                    runat=&quot;server&quot;\n                    BorderColor=&quot;black&quot;\n                    BorderWidth=&quot;1&quot;\n                    GridLines=&quot;Both&quot;\n                    ShowFooter=&quot;false&quot;\n                    CellPadding=&quot;3&quot;\n                    CellSpacing=&quot;0&quot;&gt;\n\n                  &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n                  &lt;/HeaderStyle&gt;\n\n                &lt;/asp:DataGrid&gt;\n \n            &lt;/td&gt;\n         &lt;/tr&gt;\n \n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.Columns Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      DataTable Cart;\n      DataView CartView;\n \n      ICollection CreateDataSource() \n      {\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n   \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      } \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         if (Session[&quot;DG4_ShoppingCart&quot;] == null) \n         {\n            Cart = new DataTable();\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(string)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(string)));\n            Session[&quot;DG4_ShoppingCart&quot;] = Cart;\n         }\n         else \n         {\n            Cart = (DataTable)Session[&quot;DG4_ShoppingCart&quot;];\n         }    \n         CartView = new DataView(Cart);\n         ShoppingCart.DataSource = CartView;\n         ShoppingCart.DataBind();\n \n         if (!IsPostBack) \n         {\n            // Load this data only once.\n            ItemsGrid.DataSource= CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void Page_Init(Object sender, EventArgs e) \n      {\n\n         // Create a dynamic column to add to Columns collection.\n         BoundColumn NumberColumn = new BoundColumn();\n         NumberColumn.HeaderText=&quot;Item Number&quot;; \n         NumberColumn.DataField=&quot;IntegerValue&quot;;\n\n         // Add column to Columns collection.\n         ItemsGrid.Columns.AddAt(2, NumberColumn);\n\n      }\n  \n      void Grid_CartCommand(Object sender, DataGridCommandEventArgs e) {\n     \n         DataRow dr = Cart.NewRow();\n          \n         // e.Item is the table row where the command is raised.\n         // For bound columns, the value is stored in the Text property of the TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         TableCell priceCell = e.Item.Cells[3];\n         string item = itemCell.Text;\n         string price = priceCell.Text;\n         \n         if (((Button)e.CommandSource).CommandName == &quot;AddToCart&quot;) \n         {\n            dr[0] = item;\n            dr[1] = price;\n            Cart.Rows.Add(dr);\n         }\n         else \n         { \n\n            //Remove from Cart.\n         \n            CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n            if (CartView.Count &gt; 0) \n            {    \n               CartView.Delete(0);\n            }\n            CartView.RowFilter = &quot;&quot;;\n         }\n         ShoppingCart.DataBind();\n \n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Columns Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid Columns Example&lt;/h3&gt;\n \n      &lt;table cellpadding=&quot;5&quot;&gt;\n         &lt;tr valign=&quot;top&quot;&gt;\n            &lt;td&gt;\n \n               &lt;b&gt;Product List&lt;/b&gt;\n \n               &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n                    BorderColor=&quot;black&quot;\n                    BorderWidth=&quot;1&quot;\n                    CellPadding=&quot;3&quot;\n                    AutoGenerateColumns=&quot;false&quot;\n                    OnItemCommand=&quot;Grid_CartCommand&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n                  &lt;/HeaderStyle&gt;\n \n                  &lt;Columns&gt;\n \n                     &lt;asp:ButtonColumn \n                          HeaderText=&quot;Add to cart&quot; \n                          ButtonType=&quot;PushButton&quot; \n                          Text=&quot;Add&quot; \n                          CommandName=&quot;AddToCart&quot;/&gt;\n \n                     &lt;asp:ButtonColumn \n                          HeaderText=&quot;Remove from cart&quot; \n                          ButtonType=&quot;PushButton&quot; \n                          Text=&quot;Remove&quot; \n                          CommandName=&quot;RemoveFromCart&quot;/&gt;\n \n                     &lt;asp:BoundColumn \n                          HeaderText=&quot;Item&quot; \n                          DataField=&quot;StringValue&quot;/&gt;\n \n                     &lt;asp:BoundColumn \n                          HeaderText=&quot;Price&quot; \n                          DataField=&quot;CurrencyValue&quot; \n                          DataFormatString=&quot;{0:c}&quot;&gt;\n\n                        &lt;ItemStyle HorizontalAlign=&quot;right&quot;&gt;\n                        &lt;/ItemStyle&gt;\n\n                     &lt;/asp:BoundColumn&gt;\n \n                  &lt;/Columns&gt;\n   \n               &lt;/asp:DataGrid&gt;\n \n            &lt;/td&gt;\n            &lt;td&gt;\n \n               &lt;b&gt;Shopping Cart&lt;/b&gt;\n \n               &lt;asp:DataGrid id=&quot;ShoppingCart&quot; \n                    runat=&quot;server&quot;\n                    BorderColor=&quot;black&quot;\n                    BorderWidth=&quot;1&quot;\n                    GridLines=&quot;Both&quot;\n                    ShowFooter=&quot;false&quot;\n                    CellPadding=&quot;3&quot;\n                    CellSpacing=&quot;0&quot;&gt;\n\n                  &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n                  &lt;/HeaderStyle&gt;\n\n                &lt;/asp:DataGrid&gt;\n \n            &lt;/td&gt;\n         &lt;/tr&gt;\n \n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridColumnVisible#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 5; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void Button_Click(Object sender, EventArgs e) \n      {\n\n         // Count the number of selected items in the DataGrid control.\n         int count = 0;\n\n         // Display the selected times.\n         Message.Text = &quot;You Selected: &lt;br /&gt;&quot;;\n\n         // Iterate through each item (row) in the DataGrid control and\n         // determine whether it is selected.\n         foreach (DataGridItem item in ItemsGrid.Items)\n         {\n\n            DetermineSelection(item, ref count);        \n\n         }\n\n         // If no items are selected, display the appropriate message.\n         if (count == 0)\n         {\n\n            Message.Text = &quot;No items selected&quot;;\n\n         }\n\n      }\n\n      void DetermineSelection(DataGridItem item, ref int count)\n      {\n\n         // Retrieve the SelectCheckBox CheckBox control from the \n         // specified item (row) in the DataGrid control.\n         CheckBox selection = (CheckBox)item.FindControl(&quot;SelectCheckBox&quot;);\n\n         // If the item is selected, display the appropriate message and\n         // increment the count of selected items.\n         if (selection != null)\n         {\n\n           if (selection.Checked)\n           {\n              Message.Text += &quot;- &quot; + item.Cells[1].Text + &quot;&lt;br /&gt;&quot;;\n              count++;\n           }\n\n         }    \n\n      }\n\n      void Check_Change(Object sender, EventArgs e)\n      {\n\n         // Show or hide the first column depending on the value of\n         // the check box.\n         if (ShowCheckBox.Checked)\n         {\n            ItemsGrid.Columns[0].Visible = true;\n         }\n         else\n         {\n            ItemsGrid.Columns[0].Visible = false;\n         }\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGridColumn Visible Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGridColumn Visible Example&lt;/h3&gt;\n\n      Select whether to show or hide the first column.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot;\n                 Visible=&quot;True&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 Visible=&quot;True&quot;  \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot;\n                 Visible=&quot;True&quot;  \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn HeaderText=&quot;Select Item&quot;\n                 Visible=&quot;True&quot; &gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&quot;False&quot;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt;  \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Message&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;ShowCheckBox&quot;\n           Text=&quot;Show first column&quot;\n           AutoPostBack=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           Checked=&quot;True&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridColumnVisible#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(string)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 4 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n  \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n\n         End If\n\n      End Sub\n\n      Sub Button_Click(sender As Object, e As EventArgs) \n\n         &#39; Count the number of selected items in the DataGrid control.\n         Dim count As Integer = 0\n\n         &#39; Display the selected times.\n         Message.Text = &quot;You Selected: &lt;br /&gt;&quot;\n\n         &#39; Iterate through each item (row) in the DataGrid control and\n         &#39; determine whether it is selected.\n         Dim item As DataGridItem\n \n         For Each item In ItemsGrid.Items\n\n            DetermineSelection(item, count)        \n\n         Next\n\n         &#39; If no items are selected, display the appropriate message.\n         If count = 0 Then\n\n            Message.Text = &quot;No items selected&quot;\n\n         End If\n\n      End Sub\n\n      Sub DetermineSelection(item As DataGridItem, ByRef count As Integer)\n\n         &#39; Retrieve the SelectCheckBox CheckBox control from the \n         &#39; specified item (row) in the DataGrid control.\n         Dim selection As CheckBox = _\n             CType(item.FindControl(&quot;SelectCheckBox&quot;), CheckBox)\n\n         &#39; If the item is selected, display the appropriate message and\n         &#39; increment the count of selected items.\n         If Not selection Is Nothing Then\n\n           If selection.Checked Then\n           \n              Message.Text &amp;= &quot;- &quot; &amp; item.Cells(1).Text &amp; &quot;&lt;br /&gt;&quot;\n              count = count + 1\n           \n           End If\n\n         End If    \n\n      End Sub\n\n      Sub Check_Change(sender As Object, e As EventArgs)\n\n         &#39; Show or hide the first column depending on the value of\n         &#39; the check box.\n         If ShowCheckBox.Checked Then\n        \n            ItemsGrid.Columns(0).Visible = True\n         \n         Else\n         \n            ItemsGrid.Columns(0).Visible = False\n         \n         End If\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGridColumn Visible Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGridColumn Visible Example&lt;/h3&gt;\n\n      Select whether to show or hide the first column.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot;\n                 Visible=&quot;True&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 Visible=&quot;True&quot;  \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot;\n                 Visible=&quot;True&quot;  \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn HeaderText=&quot;Select Item&quot;\n                 Visible=&quot;True&quot; &gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&quot;False&quot;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Message&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;ShowCheckBox&quot;\n           Text=&quot;Show first column&quot;\n           AutoPostBack=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           Checked=&quot;True&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_CurrentPageIndex\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_CurrentPageIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentPageIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the index of the currently displayed page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CurrentPageIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the page currently displayed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified page index is a negative value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to determine the currently displayed page in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control when paging is enabled. This property is also used to programmatically control which page is displayed.  </p>\n<p> You can also hide the built in paging controls and create custom controls. To display a specific page, set this property to the page index you want to display and then rebind the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the CurrentPageIndex property to programmatically control the page to display in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.CurrentPageIndex Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n         DataTable dt = new DataTable();\n         DataRow dr;\n\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n\n         for (int i = 0; i &lt; 200; i++) \n         {\n            dr = dt.NewRow();\n\n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = DateTime.Now.ToShortDateString();\n            dr[3] = (i % 2 != 0) ? true : false;\n\n            dt.Rows.Add(dr);\n         }\n\n         DataView dv = new DataView(dt);\n         return dv;\n      }\n\n      void Page_Load(Object sender, EventArgs e) \n      {\n         if (chk1.Checked)\n            MyDataGrid.PagerStyle.Visible=true;\n         else\n            MyDataGrid.PagerStyle.Visible=false;    \n\n         BindGrid();\n      }\n\n      void PagerButtonClick(Object sender, EventArgs e) \n      {\n         // Used by external paging UI.\n         String arg = ((LinkButton)sender).CommandArgument;\n\n         switch(arg)\n         {\n            case (&quot;next&quot;):\n               if (MyDataGrid.CurrentPageIndex &lt; (MyDataGrid.PageCount - 1))\n                  MyDataGrid.CurrentPageIndex ++;\n               break;\n            case (&quot;prev&quot;):\n               if (MyDataGrid.CurrentPageIndex &gt; 0)\n                  MyDataGrid.CurrentPageIndex --;\n               break;\n            case (&quot;last&quot;):\n               MyDataGrid.CurrentPageIndex = (MyDataGrid.PageCount - 1);\n               break;\n            default:\n\n               // Page number.\n               MyDataGrid.CurrentPageIndex = Convert.ToInt32(arg);\n               break;\n         }\n         BindGrid();\n      }\n\n      void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e) \n      {\n         // Used by built-in pager.  CurrentPageIndex is already set.\n         BindGrid();\n      }\n\n      void BindGrid() \n      {\n         MyDataGrid.DataSource = CreateDataSource();\n         MyDataGrid.DataBind();\n         ShowStats();\n      }\n\n      void ShowStats() \n      {\n         lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; + MyDataGrid.CurrentPageIndex;\n         lblPageCount.Text = &quot;PageCount is &quot; + MyDataGrid.PageCount;\n      }\n\n\n   &lt;/script&gt;\n\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Custom Paging Controls&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Custom Paging Controls&lt;/h3&gt;\n\n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot;\n           AllowPaging=&quot;True&quot;\n           PageSize=&quot;10&quot;\n           OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           runat=&quot;server&quot;&gt;\n\n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:LinkButton id=&quot;btnPrev&quot;\n           Text=&quot;Previous page&quot;\n           CommandArgument=&quot;prev&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;\n\n      &lt;asp:LinkButton id=&quot;btnNext&quot;\n           Text=&quot;Next page&quot;\n           CommandArgument=&quot;next&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;\n\n      &lt;asp:LinkButton id=&quot;btnPage8&quot; runat=&quot;server&quot;\n           Text=&quot;Go to Page 8&quot;\n           CommandArgument=&quot;7&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;/&gt;\n\n      &amp;nbsp;\n \n      &lt;asp:LinkButton id=&quot;btnFirst&quot;\n           Text=&quot;Go to the first page&quot;\n           CommandArgument=&quot;0&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;\n\n      &lt;asp:LinkButton id=&quot;btnLast&quot;\n           Text=&quot;Go to the last page&quot;\n           CommandArgument=&quot;last&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Checkbox id=&quot;chk1&quot;\n           Text=&quot;Show built-in pager&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           AutoPostBack=&quot;true&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n         &lt;tr&gt;\n            &lt;td style=&quot;display:inline&quot;&gt;\n               \n\n                  &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                       runat=&quot;server&quot; /&gt;\n                  &lt;br /&gt;\n\n                  &lt;asp:Label id=&quot;lblPageCount&quot; \n                       runat=&quot;server&quot; /&gt;\n                  &lt;br /&gt;\n\n               \n            &lt;/td&gt;\n         &lt;/tr&gt;\n      &lt;/table&gt;\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.CurrentPageIndex Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n        \n        Dim i As Integer\n        For i = 0 To 199\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; + i.ToString()\n            dr(2) = DateTime.Now.ToShortDateString()\n            If i Mod 2 &lt;&gt; 0 Then\n                dr(3) = True\n            Else\n                dr(3) = False\n            End If\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        If chk1.Checked Then\n            MyDataGrid.PagerStyle.Visible = True\n        Else\n            MyDataGrid.PagerStyle.Visible = False\n        End If \n        BindGrid()\n    End Sub &#39;Page_Load\n\n\n    Sub PagerButtonClick(sender As Object, e As EventArgs)\n        &#39; Used by external paging UI.\n        Dim arg As String = CType(sender, LinkButton).CommandArgument\n        \n        Select Case arg\n            Case &quot;next&quot;\n                If MyDataGrid.CurrentPageIndex &lt; MyDataGrid.PageCount - 1 Then\n                    MyDataGrid.CurrentPageIndex += 1\n                End If\n            Case &quot;prev&quot;\n                If MyDataGrid.CurrentPageIndex &gt; 0 Then\n                    MyDataGrid.CurrentPageIndex -= 1\n                End If\n            Case &quot;last&quot;\n                MyDataGrid.CurrentPageIndex = MyDataGrid.PageCount - 1\n            Case Else\n\n                &#39; Page number.\n                MyDataGrid.CurrentPageIndex = Convert.ToInt32(arg)\n        End Select\n        BindGrid()\n    End Sub &#39;PagerButtonClick\n\n\n    Sub MyDataGrid_Page(sender As Object, e As DataGridPageChangedEventArgs)\n        &#39; Used by built-in pager.  CurrentPageIndex is already set.\n        BindGrid()\n    End Sub &#39;MyDataGrid_Page\n\n\n    Sub BindGrid()\n        MyDataGrid.DataSource = CreateDataSource()\n        MyDataGrid.DataBind()\n        ShowStats()\n    End Sub &#39;BindGrid\n\n\n    Sub ShowStats()\n        lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; &amp; MyDataGrid.CurrentPageIndex\n        lblPageCount.Text = &quot;PageCount is &quot; &amp; MyDataGrid.PageCount\n    End Sub &#39;ShowStats\n\n   &lt;/script&gt;\n\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Custom Paging Controls&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Custom Paging Controls&lt;/h3&gt;\n\n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot;\n           AllowPaging=&quot;True&quot;\n           PageSize=&quot;10&quot;\n           OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           runat=&quot;server&quot;&gt;\n\n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:LinkButton id=&quot;btnPrev&quot;\n           Text=&quot;Previous page&quot;\n           CommandArgument=&quot;prev&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;\n\n      &lt;asp:LinkButton id=&quot;btnNext&quot;\n           Text=&quot;Next page&quot;\n           CommandArgument=&quot;next&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;\n\n      &lt;asp:LinkButton id=&quot;btnPage8&quot; runat=&quot;server&quot;\n           Text=&quot;Go to Page 8&quot;\n           CommandArgument=&quot;7&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;/&gt;\n\n      &amp;nbsp;\n \n      &lt;asp:LinkButton id=&quot;btnFirst&quot;\n           Text=&quot;Go to the first page&quot;\n           CommandArgument=&quot;0&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;\n\n      &lt;asp:LinkButton id=&quot;btnLast&quot;\n           Text=&quot;Go to the last page&quot;\n           CommandArgument=&quot;last&quot;\n           ForeColor=&quot;navy&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnClick=&quot;PagerButtonClick&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Checkbox id=&quot;chk1&quot;\n           Text=&quot;Show built-in pager&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           AutoPostBack=&quot;true&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n         &lt;tr&gt;\n            &lt;td style=&quot;display:inline&quot;&gt;\n               \n\n                  &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                       runat=&quot;server&quot; /&gt;\n                  &lt;br /&gt;\n\n                  &lt;asp:Label id=&quot;lblPageCount&quot; \n                       runat=&quot;server&quot; /&gt;\n                  &lt;br /&gt;\n\n               \n            &lt;/td&gt;\n         &lt;/tr&gt;\n      &lt;/table&gt;\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridAllowPaging#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        &#39; Create sample data for the DataGrid control.\n        Dim dt As DataTable = New DataTable()\n        Dim dr As DataRow\n \n        &#39; Define the columns of the table.\n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n        &#39; Populate the table with sample values.\n        Dim i As Integer\n        For i = 0 To 100\n            dr = dt.NewRow()\n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dt.Rows.Add(dr)\n        Next i\n \n        Dim dv As DataView = New DataView(dt)\n        Return dv\n    End Function\n \n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Load sample data only once, when the page is first loaded.\n        If Not IsPostBack Then\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub\n\n    Sub Check_Change(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Allow or prevent paging depending on the user&#39;s selection.\n        ItemsGrid.AllowPaging = AllowPagingCheckBox.Checked()\n\n        &#39; Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub\n\n    Sub Grid_Change(ByVal sender As Object, ByVal e As DataGridPageChangedEventArgs)\n        &#39; For the DataGrid control to navigate to the correct page when\n        &#39; paging is allowed, the CurrentPageIndex property must be updated\n        &#39; programmatically. This process is usually accomplished in the\n        &#39; event-handling method for the PageIndexChanged event.\n\n        &#39; Set CurrentPageIndex to the page the user clicked.\n        ItemsGrid.CurrentPageIndex = e.NewPageIndex\n\n        &#39; Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head2&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n\n    &lt;h3&gt;DataGrid AllowPaging Example&lt;/h3&gt;\n\n    &lt;p&gt;Select whether to allow paging in the DataGrid control.&lt;br /&gt;\n       &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n            Text=&quot;Allow paging&quot;\n            AutoPostBack=&quot;True&quot;\n            Checked=&quot;True&quot;\n            OnCheckedChanged=&quot;Check_Change&quot;\n            runat=&quot;server&quot; /&gt;\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n        AssociatedControlID=&quot;ItemsGrid&quot; \n        Font-Bold=&quot;true&quot;&gt;Product List&lt;/asp:Label&gt;\n    &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;Gray&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        UseAccessibleHeader=&quot;true&quot;\n        AutoGenerateColumns=&quot;False&quot;\n        PageSize=&quot;10&quot;\n        AllowPaging=&quot;True&quot;\n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 ItemStyle-HorizontalAlign=&quot;center&quot;\n                 HeaderText=&quot;Item&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                HeaderText=&quot;Description&quot; \n                ItemStyle-HorizontalAlign=&quot;left&quot;\n                SortExpression=&quot;StringValue&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot; /&gt;\n\n        &lt;/Columns&gt;\n        &lt;ItemStyle HorizontalAlign=&quot;Right&quot; /&gt;\n    &lt;/asp:DataGrid&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridAllowPaging#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    private ICollection CreateDataSource()\n    {\n        // Create sample data for the DataGrid control.\n        DataTable dt = new DataTable();\n        DataRow dr;\n\n        // Define the columns of the table.\n        dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n        dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n        dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n\n        // Populate the table with sample values.\n        for (int i = 0; i &lt;= 100; i++) \n        {\n            dr = dt.NewRow();\n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n\n            dt.Rows.Add(dr);\n        }\n        DataView dv = new DataView(dt);\n        return dv;\n    }\n\n    private void Page_Load(Object sender, EventArgs e)\n    { \n        // Load sample data only once, when the page is first loaded.\n        if (!IsPostBack)\n        { \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n        }\n    }\n\n    private void Check_Change(Object sender, EventArgs e)\n    {\n        // Allow or prevent paging depending \n        // on the user&#39;s selection.\n        ItemsGrid.AllowPaging = AllowPagingCheckBox.Checked;\n\n        // Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource();\n        ItemsGrid.DataBind();\n    }\n\n    private void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n    {\n        // For the DataGrid control to navigate to the correct page when\n        // paging is allowed, the CurrentPageIndex property must be updated\n        // programmatically. This process is usually accomplished in the\n        // event-handling method for the PageIndexChanged event.\n\n        // Set CurrentPageIndex to the page the user clicked.\n        ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n        // Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource();\n        ItemsGrid.DataBind();\n    }\n&lt;/script&gt;\n \n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid AllowPaging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n \n    &lt;h3&gt;DataGrid AllowPaging Example&lt;/h3&gt;\n\n    &lt;p&gt;Select whether to allow paging in the DataGrid control.&lt;br /&gt;\n       &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n            Text=&quot;Allow paging&quot;\n            AutoPostBack=&quot;True&quot;\n            Checked=&quot;True&quot;\n            OnCheckedChanged=&quot;Check_Change&quot;\n            runat=&quot;server&quot; /&gt;\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;asp:Label runat=&quot;server&quot; \n        AssociatedControlID=&quot;ItemsGrid&quot; \n        Font-Bold=&quot;true&quot;&gt;Product List&lt;/asp:Label&gt;\n    &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;Gray&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        AutoGenerateColumns=&quot;False&quot;\n        UseAccessibleHeader=&quot;true&quot;\n        PageSize=&quot;10&quot;\n        AllowPaging=&quot;True&quot;\n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 ItemStyle-HorizontalAlign=&quot;center&quot;\n                 HeaderText=&quot;Item&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                HeaderText=&quot;Description&quot; \n                ItemStyle-HorizontalAlign=&quot;left&quot;\n                SortExpression=&quot;StringValue&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot; /&gt;\n\n        &lt;/Columns&gt;\n        &lt;ItemStyle HorizontalAlign=&quot;Right&quot; /&gt;\n    &lt;/asp:DataGrid&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_EditItemIndex\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_EditItemIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditItemIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the index of an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to edit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int EditItemIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to edit. The default value is -1, which indicates that no item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is being edited.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified index is less than -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the EditItemIndex property when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control contains an <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a> to determine the index of the item selected in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to edit.  </p>\n<p> This property is also used to programmatically control which item is being edited. Setting this property to an index of an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control will enable editing controls for that item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.editcommandcolumn\" data-linktype=\"relative-path\">EditCommandColumn</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The EditItemIndex property is zero based.  </p>\n</div>\n<p> To cancel editing, programmatically set this property to -1.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the EditItemIndex property to determine the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.EditItemIndex Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As New DataTable\n    Dim CartView As DataView\n    Sub Page_Load(sender As Object, e As EventArgs)\n        Dim dr As DataRow\n        \n        If Session(&quot;ShoppingCart&quot;) Is Nothing Then\n            \n            Cart.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(String)))\n            Session(&quot;ShoppingCart&quot;) = Cart\n            \n            &#39; Create sample data.\n            Dim i As Integer\n            For i = 1 To 4\n                dr = Cart.NewRow()\n                If i Mod 2 &lt;&gt; 0 Then\n                    dr(0) = &quot;2&quot;\n                Else\n                    dr(0) = &quot;1&quot;\n                End If\n                dr(1) = &quot;Item &quot; &amp; i.ToString()\n                dr(2) =(1.23 *(i + 1)).ToString()\n                Cart.Rows.Add(dr)\n            Next i\n        Else\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n        End If \n        CartView = New DataView(Cart)\n        CartView.Sort = &quot;Item&quot;\n        \n        If Not IsPostBack Then\n            BindGrid()\n        End If \n    End Sub &#39;Page_Load\n\n\n    Sub MyDataGrid_Edit(sender As Object, e As DataGridCommandEventArgs)\n        MyDataGrid.EditItemIndex = e.Item.ItemIndex\n        BindGrid()\n    End Sub &#39;MyDataGrid_Edit\n\n\n    Sub MyDataGrid_Cancel(sender As Object, e As DataGridCommandEventArgs)\n        MyDataGrid.EditItemIndex = - 1\n        BindGrid()\n    End Sub &#39;MyDataGrid_Cancel\n\n\n    Sub MyDataGrid_Update(sender As Object, e As DataGridCommandEventArgs)\n        &#39; For bound columns, the edited value is stored in a TextBox.\n        &#39; The TextBox is the 0th element in the column&#39;s cell.\n        Dim qtyText As TextBox = CType(e.Item.Cells(2).Controls(0), TextBox)\n        Dim priceText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n        \n        Dim item As String = e.Item.Cells(1).Text\n        Dim qty As String = qtyText.Text\n        Dim price As String = priceText.Text\n        \n        Dim dr As DataRow\n        \n        &#39; With a database, use an update command to update the data. Because \n        &#39; the data source in this example is an in-memory DataTable, delete the \n        &#39; old row and replace it with a new one.\n        CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n        If CartView.Count &gt; 0 Then\n            CartView.Delete(0)\n        End If\n        CartView.RowFilter = &quot;&quot;\n        \n        &#39; Add new entry.\n        dr = Cart.NewRow()\n        dr(0) = qty\n        dr(1) = item\n        dr(2) = price\n        Cart.Rows.Add(dr)\n        \n        MyDataGrid.EditItemIndex = - 1\n        BindGrid()\n    End Sub &#39;MyDataGrid_Update\n\n\n    Sub BindGrid()\n        MyDataGrid.DataSource = CartView\n        MyDataGrid.DataBind()\n    End Sub &#39;BindGrid\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=&quot;font: 10pt verdana&quot;&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnEditCommand=&quot;MyDataGrid_Edit&quot;\n           OnCancelCommand=&quot;MyDataGrid_Cancel&quot;\n           OnUpdateCommand=&quot;MyDataGrid_Update&quot;\n           AutoGenerateColumns=&quot;false&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit Command Column&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;false&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;false&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;            \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;true&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot; \n                 DataField=&quot;Price&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.EditItemIndex Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n         DataRow dr;\n  \n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {       \n \n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(String)));\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Create sample data.\n            for (int i = 1; i &lt;= 4; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n                  dr[0] = &quot;2&quot;;\n               else\n                  dr[0] = &quot;1&quot;;\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1)).ToString();\n               Cart.Rows.Add(dr);\n            }\n         } \n         else\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];          \n \n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n \n         if (!IsPostBack)\n            BindGrid(); \n                   \n      }\n \n      void MyDataGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n         MyDataGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n      }\n \n      void MyDataGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n         MyDataGrid.EditItemIndex = -1;\n         BindGrid();\n      }\n \n      void MyDataGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th element in the column&#39;s cell.\n         TextBox qtyText = (TextBox)e.Item.Cells[2].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[3].Controls[0];\n \n         String item = e.Item.Cells[1].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. Because \n         // the data source in this example is an in-memory DataTable, delete the \n         // old row and replace it with a new one.\n \n         // Remove old entry.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n            CartView.Delete(0);\n         CartView.RowFilter = &quot;&quot;;\n \n         // Add new entry.\n         dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         dr[2] = price;\n         Cart.Rows.Add(dr);\n \n         MyDataGrid.EditItemIndex = -1;\n         BindGrid();\n      }\n \n      void BindGrid() \n      {\n         MyDataGrid.DataSource = CartView;\n         MyDataGrid.DataBind();\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=&quot;font: 10pt verdana&quot;&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnEditCommand=&quot;MyDataGrid_Edit&quot;\n           OnCancelCommand=&quot;MyDataGrid_Cancel&quot;\n           OnUpdateCommand=&quot;MyDataGrid_Update&quot;\n           AutoGenerateColumns=&quot;false&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit Command Column&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;false&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;false&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;            \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;true&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot; \n                 DataField=&quot;Price&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_EditItemStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_EditItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditItemStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties of the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle EditItemStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties of the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the EditItemStyle property to provide a custom style for the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. Common style attributes that can be adjusted include forecolor, backcolor, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property, all other item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property. The following table lists the hierarchy order from highest to lowest.  </p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Style Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>EditItemStyle</td>\n</tr>\n<tr>\n<td>2</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a></td>\n</tr>\n<tr>\n<td>3</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a></td>\n</tr>\n<tr>\n<td>4</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a></td>\n</tr>\n<tr>\n<td>5</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a></td>\n</tr>\n</tbody>\n</table>\n<p> To specify a custom style for the item selected for editing, place the <code>&lt;EditItemStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. You can then list the style attributes within the opening <code>&lt;EditItemStyle&gt;</code> tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the EditItemStyle property to set the background color of the item selected for editing to yellow.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.EditItemStyle Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As New DataTable\n    Dim CartView As DataView\n    \n    Sub Page_Load(sender As Object, e As EventArgs)\n        Dim dr As DataRow\n        \n        If Session(&quot;ShoppingCart&quot;) Is Nothing Then\n            \n            Cart.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(String)))\n            Session(&quot;ShoppingCart&quot;) = Cart\n            \n            &#39; Create sample data.\n            Dim i As Integer\n            For i = 1 To 4\n                dr = Cart.NewRow()\n                If i Mod 2 &lt;&gt; 0 Then\n                    dr(0) = &quot;2&quot;\n                Else\n                    dr(0) = &quot;1&quot;\n                End If\n                dr(1) = &quot;Item &quot; &amp; i.ToString()\n                dr(2) =(1.23 *(i + 1)).ToString()\n                Cart.Rows.Add(dr)\n            Next i\n        Else\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n        End If \n        CartView = New DataView(Cart)\n        CartView.Sort = &quot;Item&quot;\n        \n        If Not IsPostBack Then\n            BindGrid()\n        End If \n    End Sub &#39;Page_Load\n\n\n    Sub MyDataGrid_Edit(sender As Object, e As DataGridCommandEventArgs)\n        MyDataGrid.EditItemIndex = e.Item.ItemIndex\n        BindGrid()\n    End Sub &#39;MyDataGrid_Edit\n\n\n    Sub MyDataGrid_Cancel(sender As Object, e As DataGridCommandEventArgs)\n        MyDataGrid.EditItemIndex = - 1\n        BindGrid()\n    End Sub &#39;MyDataGrid_Cancel\n\n\n    Sub MyDataGrid_Update(sender As Object, e As DataGridCommandEventArgs)\n        &#39; For bound columns, the edited value is stored in a TextBox.\n        &#39; The TextBox is the 0th element in the column&#39;s cell.\n        Dim qtyText As TextBox = CType(e.Item.Cells(2).Controls(0), TextBox)\n        Dim priceText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n        \n        Dim item As String = e.Item.Cells(1).Text\n        Dim qty As String = qtyText.Text\n        Dim price As String = priceText.Text\n        \n        Dim dr As DataRow\n        \n        &#39; With a database, use an update command to update the data. Because \n        &#39; the data source in this example is an in-memory DataTable, delete the \n        &#39; old row and replace it with a new one.\n\n        &#39; Remove old entry.\n        CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n        If CartView.Count &gt; 0 Then\n            CartView.Delete(0)\n        End If\n        CartView.RowFilter = &quot;&quot;\n        \n        &#39; Add new entry.\n        dr = Cart.NewRow()\n        dr(0) = qty\n        dr(1) = item\n        dr(2) = price\n        Cart.Rows.Add(dr)\n        \n        MyDataGrid.EditItemIndex = - 1\n        BindGrid()\n    End Sub &#39;MyDataGrid_Update\n\n\n    Sub BindGrid()\n        MyDataGrid.DataSource = CartView\n        MyDataGrid.DataBind()\n    End Sub &#39;BindGrid\n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=&quot;font: 10pt verdana&quot;&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n       &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            CellPadding=&quot;3&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            OnEditCommand=&quot;MyDataGrid_Edit&quot;\n            OnCancelCommand=&quot;MyDataGrid_Cancel&quot;\n            OnUpdateCommand=&quot;MyDataGrid_Update&quot;\n            AutoGenerateColumns=&quot;false&quot;&gt;\n\n            &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n            &lt;/HeaderStyle&gt;\n\n            &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n            &lt;/EditItemStyle&gt;\n \n          &lt;Columns&gt;\n \n             &lt;asp:EditCommandColumn\n                  EditText=&quot;Edit&quot;\n                  CancelText=&quot;Cancel&quot;\n                  UpdateText=&quot;Update&quot;\n                  HeaderText=&quot;Edit Command Column&quot;&gt;\n\n                &lt;ItemStyle Wrap=&quot;false&quot;&gt;\n                &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;false&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n             &lt;/asp:EditCommandColumn&gt;\n \n             &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                  ReadOnly=&quot;true&quot; \n                  DataField=&quot;Item&quot;/&gt;\n \n             &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                  DataField=&quot;Qty&quot;/&gt;\n \n             &lt;asp:BoundColumn HeaderText=&quot;Price&quot; \n                  DataField=&quot;Price&quot;/&gt;\n \n          &lt;/Columns&gt;\n \n       &lt;/asp:DataGrid&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.EditItemStyle Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    DataTable Cart = new DataTable();\n    DataView CartView;   \n \n    void Page_Load(Object sender, EventArgs e) \n    {\n       DataRow dr;\n \n       if (Session[&quot;ShoppingCart&quot;] == null) \n       {       \n \n          Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(String)));\n          Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n          Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(String)));\n          Session[&quot;ShoppingCart&quot;] = Cart;\n             \n          // Create sample data.\n          for (int i = 1; i &lt;= 4; i++) \n          {\n             dr = Cart.NewRow();\n             if (i % 2 != 0)\n                dr[0] = &quot;2&quot;;\n             else\n                dr[0] = &quot;1&quot;;\n             dr[1] = &quot;Item &quot; + i.ToString();\n             dr[2] = (1.23 * (i + 1)).ToString();\n             Cart.Rows.Add(dr);\n          }\n       }\n       else\n          Cart = (DataTable)Session[&quot;ShoppingCart&quot;];          \n \n       CartView = new DataView(Cart);\n       CartView.Sort=&quot;Item&quot;;\n \n       if (!IsPostBack)\n          BindGrid(); \n                   \n    }\n \n    void MyDataGrid_Edit(Object sender, DataGridCommandEventArgs e) \n    {\n       MyDataGrid.EditItemIndex = e.Item.ItemIndex;\n       BindGrid();\n    }\n \n    void MyDataGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n    {\n       MyDataGrid.EditItemIndex = -1;\n       BindGrid();\n    }\n \n    void MyDataGrid_Update(Object sender, DataGridCommandEventArgs e) \n    {\n       // For bound columns, the edited value is stored in a TextBox.\n       // The TextBox is the 0th element in the column&#39;s cell.\n       TextBox qtyText = (TextBox)e.Item.Cells[2].Controls[0];\n       TextBox priceText = (TextBox)e.Item.Cells[3].Controls[0];\n \n       String item = e.Item.Cells[1].Text;\n       String qty = qtyText.Text;\n       String price = priceText.Text;\n        \n       DataRow dr;\n \n       // With a database, use an update command to update the data. Because \n       // the data source in this example is an in-memory DataTable, delete the \n       // old row and replace it with a new one.\n\n       // Remove old entry.\n       CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n       if (CartView.Count &gt; 0)\n          CartView.Delete(0);\n       CartView.RowFilter = &quot;&quot;;\n \n       // Add new entry.\n       dr = Cart.NewRow();\n       dr[0] = qty;\n       dr[1] = item;\n       dr[2] = price;\n       Cart.Rows.Add(dr);\n \n       MyDataGrid.EditItemIndex = -1;\n       BindGrid();\n    }\n \n    void BindGrid() \n    {\n       MyDataGrid.DataSource = CartView;\n       MyDataGrid.DataBind();\n    }\n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=&quot;font: 10pt verdana&quot;&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n       &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            CellPadding=&quot;3&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            OnEditCommand=&quot;MyDataGrid_Edit&quot;\n            OnCancelCommand=&quot;MyDataGrid_Cancel&quot;\n            OnUpdateCommand=&quot;MyDataGrid_Update&quot;\n            AutoGenerateColumns=&quot;false&quot;&gt;\n\n            &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n            &lt;/HeaderStyle&gt;\n\n            &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n            &lt;/EditItemStyle&gt;\n \n          &lt;Columns&gt;\n \n             &lt;asp:EditCommandColumn\n                  EditText=&quot;Edit&quot;\n                  CancelText=&quot;Cancel&quot;\n                  UpdateText=&quot;Update&quot;\n                  HeaderText=&quot;Edit Command Column&quot;&gt;\n\n                &lt;ItemStyle Wrap=&quot;false&quot;&gt;\n                &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;false&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n             &lt;/asp:EditCommandColumn&gt;\n \n             &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                  ReadOnly=&quot;true&quot; \n                  DataField=&quot;Item&quot;/&gt;\n \n             &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                  DataField=&quot;Qty&quot;/&gt;\n \n             &lt;asp:BoundColumn HeaderText=&quot;Price&quot; \n                  DataField=&quot;Price&quot;/&gt;\n \n          &lt;/Columns&gt;\n \n       &lt;/asp:DataGrid&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_FooterStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_FooterStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FooterStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties of the footer section in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties of the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to provide a custom style for the footer of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. Common style attributes that can be adjusted include forecolor, backcolor, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> The FooterStyle property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control inherits the style settings of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property, the FooterStyle property will also have a red font. This allows you to provide a common appearance for the control by setting a single style property. You can override the inherited style settings by setting the FooterStyle property. For example, you can specify a blue font for the FooterStyle property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property.  </p>\n<p> To specify a custom style for the footer section, place the <code>&lt;FooterStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. You can then list the style attributes within the opening <code>&lt;FooterStyle&gt;</code> tag.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ShowFooter_\" data-linktype=\"relative-path\">ShowFooter</a> property must be set to <code>true</code> for this property to be visible.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the FooterStyle property to set the background color of the footer section.  </p>\n<pre><code class=\"lang-cs\" name=\"classic datagrid.footerstyle example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n \n       for (int i = 0; i &lt; 100; i++) {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = DateTime.Now.ToShortDateString();\n          dr[3] = (i % 2 != 0) ? true : false;\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs e) \n    {\n       if (chk1.Checked)\n          MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages;\n       else \n          MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev;\n \n       BindGrid();\n    }\n \n    void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e)\n   \n    {\n       MyDataGrid.CurrentPageIndex = e.NewPageIndex;\n       BindGrid();\n    }\n \n    void BindGrid() \n    {\n       MyDataGrid.DataSource = CreateDataSource();\n       MyDataGrid.DataBind();\n       ShowStats();\n    }\n \n    void ShowStats() \n    {\n       lblEnabled.Text = &quot;AllowPaging is &quot; + MyDataGrid.AllowPaging;\n       lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; + MyDataGrid.CurrentPageIndex;\n       lblPageCount.Text = &quot;PageCount is &quot; + MyDataGrid.PageCount;\n       lblPageSize.Text = &quot;PageSize is &quot; + MyDataGrid.PageSize;\n    }\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;            \n            ShowFooter=&quot;true&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"classic datagrid.footerstyle example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n        \n        Dim i As Integer\n        For i = 0 To 99\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; + i.ToString()\n            dr(2) = DateTime.Now.ToShortDateString()\n            If i Mod 2 &lt;&gt; 0 Then\n                dr(3) = True\n            Else\n                dr(3) = False\n            End If\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        If chk1.Checked Then\n            MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages\n        Else\n            MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev\n        End If \n        BindGrid()\n    End Sub &#39;Page_Load\n\n\n    Sub MyDataGrid_Page(sender As Object, e As DataGridPageChangedEventArgs)\n        \n        MyDataGrid.CurrentPageIndex = e.NewPageIndex\n        BindGrid()\n    End Sub &#39;MyDataGrid_Page\n\n\n    Sub BindGrid()\n        MyDataGrid.DataSource = CreateDataSource()\n        MyDataGrid.DataBind()\n        ShowStats()\n    End Sub &#39;BindGrid\n\n\n    Sub ShowStats()\n        lblEnabled.Text = &quot;AllowPaging is &quot; &amp; MyDataGrid.AllowPaging\n        lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; &amp; MyDataGrid.CurrentPageIndex\n        lblPageCount.Text = &quot;PageCount is &quot; &amp; MyDataGrid.PageCount\n        lblPageSize.Text = &quot;PageSize is &quot; &amp; MyDataGrid.PageSize\n    End Sub &#39;ShowStats\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;            \n            ShowFooter=&quot;true&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridFooterStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 5; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void Button_Click(Object sender, EventArgs e) \n      {\n\n         // Count the number of selected items in the DataGrid control.\n         int count = 0;\n\n         // Display the selected times.\n         Message.Text = &quot;You Selected: &lt;br /&gt;&quot;;\n\n         // Iterate through each item (row) in the DataGrid control and determine\n         // whether it is selected.\n         foreach (DataGridItem item in ItemsGrid.Items)\n         {\n\n            DetermineSelection(item, ref count);        \n\n         }\n\n         // If no items are selected, display the appropriate message.\n         if (count == 0)\n         {\n\n            Message.Text = &quot;Not items selected&quot;;\n\n         }\n\n      }\n\n      void DetermineSelection(DataGridItem item, ref int count)\n      {\n\n         // Retrieve the SelectCheckBox CheckBox control from the specified item (row) in the \n         // DataGrid control.\n         CheckBox selection = (CheckBox)item.FindControl(&quot;SelectCheckBox&quot;);\n\n         // If the item is selected, display the appropriate message and increment the count\n         // of selected items.\n         if (selection != null)\n         {\n\n           if (selection.Checked)\n           {\n              Message.Text += &quot;- &quot; + item.Cells[1].Text + &quot;&lt;br /&gt;&quot;;\n              count++;\n           }\n\n         }    \n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the heading and footer sections of\n         // the DataGrid control.\n         ItemsGrid.HeaderStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value);\n         ItemsGrid.FooterStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value);\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a backcolor for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn HeaderText=&quot;Select Item&quot;&gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&quot;False&quot;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Message&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer backcolor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridFooterStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(string)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 4 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once when the page is first loaded.\n         If Not IsPostBack Then \n  \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n\n         End If\n\n      End Sub\n\n      Sub Button_Click(sender As Object, e As EventArgs) \n\n         &#39; Count the number of selected items in the DataGrid control.\n         Dim count As Integer = 0\n\n         &#39; Display the selected times.\n         Message.Text = &quot;You Selected: &lt;br /&gt;&quot;\n\n         &#39; Iterate through each item (row) in the DataGrid control and determine\n         &#39; whether it is selected.\n         Dim item As DataGridItem\n \n         For Each item In ItemsGrid.Items\n\n            DetermineSelection(item, count)        \n\n         Next\n\n         &#39; If no items are selected, display the appropriate message.\n         If count = 0 Then\n\n            Message.Text = &quot;Not items selected&quot;\n\n         End If\n\n      End Sub\n\n      Sub DetermineSelection(item As DataGridItem, ByRef count As Integer)\n\n         &#39; Retrieve the SelectCheckBox CheckBox control from the specified item (row) in the \n         &#39; DataGrid control.\n         Dim selection As CheckBox = CType(item.FindControl(&quot;SelectCheckBox&quot;), CheckBox)\n\n         &#39; If the item is selected, display the appropriate message and increment the count\n         &#39; of selected items.\n         If Not selection Is Nothing Then\n\n           If selection.Checked Then\n           \n              Message.Text &amp;= &quot;- &quot; &amp; item.Cells(1).Text &amp; &quot;&lt;br /&gt;&quot;\n              count = count + 1\n           \n           End If\n\n         End If    \n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the heading and footer sections of\n         &#39; the DataGrid control.\n         ItemsGrid.HeaderStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value)\n         ItemsGrid.FooterStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value)\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a backcolor for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn HeaderText=&quot;Select Item&quot;&gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&quot;False&quot;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Message&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer backcolor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_HeaderStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_HeaderStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HeaderStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties of the heading section in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties of the heading section in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to provide a custom style for the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. Common style attributes that can be adjusted include forecolor, backcolor, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> The HeaderStyle property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control inherits the style settings of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property, the HeaderStyle property will also have a red font. This allows you to provide a common appearance for the control by setting a single style property. You can override the inherited style settings by setting the HeaderStyle property. For example, you can specify a blue font for the HeaderStyle property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property.  </p>\n<p> To specify a custom style for the heading section, place the <code>&lt;HeaderStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. You can then list the style attributes within the opening <code>&lt;HeaderStyle&gt;</code> tag.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ShowHeader_\" data-linktype=\"relative-path\">ShowHeader</a> property must be set to <code>true</code> for this property to be visible.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the HeaderStyle property to set the background color of the heading section.  </p>\n<pre><code class=\"lang-cs\" name=\"classic datagrid.footerstyle example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n \n       for (int i = 0; i &lt; 100; i++) {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = DateTime.Now.ToShortDateString();\n          dr[3] = (i % 2 != 0) ? true : false;\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs e) \n    {\n       if (chk1.Checked)\n          MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages;\n       else \n          MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev;\n \n       BindGrid();\n    }\n \n    void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e)\n   \n    {\n       MyDataGrid.CurrentPageIndex = e.NewPageIndex;\n       BindGrid();\n    }\n \n    void BindGrid() \n    {\n       MyDataGrid.DataSource = CreateDataSource();\n       MyDataGrid.DataBind();\n       ShowStats();\n    }\n \n    void ShowStats() \n    {\n       lblEnabled.Text = &quot;AllowPaging is &quot; + MyDataGrid.AllowPaging;\n       lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; + MyDataGrid.CurrentPageIndex;\n       lblPageCount.Text = &quot;PageCount is &quot; + MyDataGrid.PageCount;\n       lblPageSize.Text = &quot;PageSize is &quot; + MyDataGrid.PageSize;\n    }\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;            \n            ShowFooter=&quot;true&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"classic datagrid.footerstyle example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n        \n        Dim i As Integer\n        For i = 0 To 99\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; + i.ToString()\n            dr(2) = DateTime.Now.ToShortDateString()\n            If i Mod 2 &lt;&gt; 0 Then\n                dr(3) = True\n            Else\n                dr(3) = False\n            End If\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        If chk1.Checked Then\n            MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages\n        Else\n            MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev\n        End If \n        BindGrid()\n    End Sub &#39;Page_Load\n\n\n    Sub MyDataGrid_Page(sender As Object, e As DataGridPageChangedEventArgs)\n        \n        MyDataGrid.CurrentPageIndex = e.NewPageIndex\n        BindGrid()\n    End Sub &#39;MyDataGrid_Page\n\n\n    Sub BindGrid()\n        MyDataGrid.DataSource = CreateDataSource()\n        MyDataGrid.DataBind()\n        ShowStats()\n    End Sub &#39;BindGrid\n\n\n    Sub ShowStats()\n        lblEnabled.Text = &quot;AllowPaging is &quot; &amp; MyDataGrid.AllowPaging\n        lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; &amp; MyDataGrid.CurrentPageIndex\n        lblPageCount.Text = &quot;PageCount is &quot; &amp; MyDataGrid.PageCount\n        lblPageSize.Text = &quot;PageSize is &quot; &amp; MyDataGrid.PageSize\n    End Sub &#39;ShowStats\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;            \n            ShowFooter=&quot;true&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridFooterStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 5; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void Button_Click(Object sender, EventArgs e) \n      {\n\n         // Count the number of selected items in the DataGrid control.\n         int count = 0;\n\n         // Display the selected times.\n         Message.Text = &quot;You Selected: &lt;br /&gt;&quot;;\n\n         // Iterate through each item (row) in the DataGrid control and determine\n         // whether it is selected.\n         foreach (DataGridItem item in ItemsGrid.Items)\n         {\n\n            DetermineSelection(item, ref count);        \n\n         }\n\n         // If no items are selected, display the appropriate message.\n         if (count == 0)\n         {\n\n            Message.Text = &quot;Not items selected&quot;;\n\n         }\n\n      }\n\n      void DetermineSelection(DataGridItem item, ref int count)\n      {\n\n         // Retrieve the SelectCheckBox CheckBox control from the specified item (row) in the \n         // DataGrid control.\n         CheckBox selection = (CheckBox)item.FindControl(&quot;SelectCheckBox&quot;);\n\n         // If the item is selected, display the appropriate message and increment the count\n         // of selected items.\n         if (selection != null)\n         {\n\n           if (selection.Checked)\n           {\n              Message.Text += &quot;- &quot; + item.Cells[1].Text + &quot;&lt;br /&gt;&quot;;\n              count++;\n           }\n\n         }    \n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the heading and footer sections of\n         // the DataGrid control.\n         ItemsGrid.HeaderStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value);\n         ItemsGrid.FooterStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value);\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a backcolor for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn HeaderText=&quot;Select Item&quot;&gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&quot;False&quot;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Message&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer backcolor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridFooterStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(string)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 4 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once when the page is first loaded.\n         If Not IsPostBack Then \n  \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n\n         End If\n\n      End Sub\n\n      Sub Button_Click(sender As Object, e As EventArgs) \n\n         &#39; Count the number of selected items in the DataGrid control.\n         Dim count As Integer = 0\n\n         &#39; Display the selected times.\n         Message.Text = &quot;You Selected: &lt;br /&gt;&quot;\n\n         &#39; Iterate through each item (row) in the DataGrid control and determine\n         &#39; whether it is selected.\n         Dim item As DataGridItem\n \n         For Each item In ItemsGrid.Items\n\n            DetermineSelection(item, count)        \n\n         Next\n\n         &#39; If no items are selected, display the appropriate message.\n         If count = 0 Then\n\n            Message.Text = &quot;Not items selected&quot;\n\n         End If\n\n      End Sub\n\n      Sub DetermineSelection(item As DataGridItem, ByRef count As Integer)\n\n         &#39; Retrieve the SelectCheckBox CheckBox control from the specified item (row) in the \n         &#39; DataGrid control.\n         Dim selection As CheckBox = CType(item.FindControl(&quot;SelectCheckBox&quot;), CheckBox)\n\n         &#39; If the item is selected, display the appropriate message and increment the count\n         &#39; of selected items.\n         If Not selection Is Nothing Then\n\n           If selection.Checked Then\n           \n              Message.Text &amp;= &quot;- &quot; &amp; item.Cells(1).Text &amp; &quot;&lt;br /&gt;&quot;\n              count = count + 1\n           \n           End If\n\n         End If    \n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the heading and footer sections of\n         &#39; the DataGrid control.\n         ItemsGrid.HeaderStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value)\n         ItemsGrid.FooterStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value)\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a backcolor for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn HeaderText=&quot;Select Item&quot;&gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&quot;False&quot;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Message&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer backcolor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_Items\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_Items_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Items</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> objects that represent the individual items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.DataGridItemCollection Items { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemcollection\" data-linktype=\"relative-path\">DataGridItemCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemcollection\" data-linktype=\"relative-path\">DataGridItemCollection</a> that contains a collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> objects representing the individual items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Items collection to programmatically control the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The Items collection does not provide any methods to add or remove items to the collection. However, you can control the contents of an item by providing a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Only items bound to the data source are contained in the Items collection. The header, footer, and separator are not included in the collection.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Items collection to display the contents of each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.Items Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n   DataTable Cart;\n   DataView CartView;\n \n   ICollection CreateDataSource() \n   {\n      DataTable dt = new DataTable();\n      DataRow dr;\n \n      dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n      dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n      dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n      for (int i = 0; i &lt; 10; i++) \n      {\n         dr = dt.NewRow();\n \n         dr[0] = i;\n         dr[1] = &quot;Item &quot; + i.ToString();\n         dr[2] = 1.23 * (i+1);\n \n         dt.Rows.Add(dr);\n      }\n \n      DataView dv = new DataView(dt);\n      return dv;\n   }\n \n   void Page_Load(Object sender, EventArgs e) \n   {\n \n      if (!IsPostBack) \n      {\n         // Need to load this data only once.\n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      }\n \n   }\n \n   void Button_Click(Object sender, EventArgs e) \n   {\n \n      foreach (DataGridItem item in ItemsGrid.Items)\n      { \n         Label1.Text += &quot;&lt;br /&gt;&quot; + item.Cells[0].Text + \n                        &quot; &quot; + item.Cells[1].Text + \n                        &quot; &quot; + item.Cells[2].Text;\n      }\n \n   }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Items Collection Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Items Collection Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Display Contents of Items Collection&quot;\n           OnClick=&quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.Items Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As DataTable\n    Dim CartView As DataView\n    \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 9\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            &#39; Need to load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n     \n\n    Sub Button_Click(sender As Object, e As EventArgs)\n        \n        Dim item As DataGridItem\n        For Each item In  ItemsGrid.Items\n            Label1.Text &amp;= &quot;&lt;br /&gt;&quot; &amp; item.Cells(0).Text &amp; _\n                        &quot; &quot; &amp; item.Cells(1).Text &amp; _\n                        &quot; &quot; &amp; item.Cells(2).Text\n        Next item\n    End Sub &#39;Button_Click\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Items Collection Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Items Collection Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Display Contents of Items Collection&quot;\n           OnClick=&quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridColumnVisible#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 5; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void Button_Click(Object sender, EventArgs e) \n      {\n\n         // Count the number of selected items in the DataGrid control.\n         int count = 0;\n\n         // Display the selected times.\n         Message.Text = &quot;You Selected: &lt;br /&gt;&quot;;\n\n         // Iterate through each item (row) in the DataGrid control and\n         // determine whether it is selected.\n         foreach (DataGridItem item in ItemsGrid.Items)\n         {\n\n            DetermineSelection(item, ref count);        \n\n         }\n\n         // If no items are selected, display the appropriate message.\n         if (count == 0)\n         {\n\n            Message.Text = &quot;No items selected&quot;;\n\n         }\n\n      }\n\n      void DetermineSelection(DataGridItem item, ref int count)\n      {\n\n         // Retrieve the SelectCheckBox CheckBox control from the \n         // specified item (row) in the DataGrid control.\n         CheckBox selection = (CheckBox)item.FindControl(&quot;SelectCheckBox&quot;);\n\n         // If the item is selected, display the appropriate message and\n         // increment the count of selected items.\n         if (selection != null)\n         {\n\n           if (selection.Checked)\n           {\n              Message.Text += &quot;- &quot; + item.Cells[1].Text + &quot;&lt;br /&gt;&quot;;\n              count++;\n           }\n\n         }    \n\n      }\n\n      void Check_Change(Object sender, EventArgs e)\n      {\n\n         // Show or hide the first column depending on the value of\n         // the check box.\n         if (ShowCheckBox.Checked)\n         {\n            ItemsGrid.Columns[0].Visible = true;\n         }\n         else\n         {\n            ItemsGrid.Columns[0].Visible = false;\n         }\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGridColumn Visible Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGridColumn Visible Example&lt;/h3&gt;\n\n      Select whether to show or hide the first column.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot;\n                 Visible=&quot;True&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 Visible=&quot;True&quot;  \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot;\n                 Visible=&quot;True&quot;  \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn HeaderText=&quot;Select Item&quot;\n                 Visible=&quot;True&quot; &gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&quot;False&quot;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt;  \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Message&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;ShowCheckBox&quot;\n           Text=&quot;Show first column&quot;\n           AutoPostBack=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           Checked=&quot;True&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridColumnVisible#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(string)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 4 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n  \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n\n         End If\n\n      End Sub\n\n      Sub Button_Click(sender As Object, e As EventArgs) \n\n         &#39; Count the number of selected items in the DataGrid control.\n         Dim count As Integer = 0\n\n         &#39; Display the selected times.\n         Message.Text = &quot;You Selected: &lt;br /&gt;&quot;\n\n         &#39; Iterate through each item (row) in the DataGrid control and\n         &#39; determine whether it is selected.\n         Dim item As DataGridItem\n \n         For Each item In ItemsGrid.Items\n\n            DetermineSelection(item, count)        \n\n         Next\n\n         &#39; If no items are selected, display the appropriate message.\n         If count = 0 Then\n\n            Message.Text = &quot;No items selected&quot;\n\n         End If\n\n      End Sub\n\n      Sub DetermineSelection(item As DataGridItem, ByRef count As Integer)\n\n         &#39; Retrieve the SelectCheckBox CheckBox control from the \n         &#39; specified item (row) in the DataGrid control.\n         Dim selection As CheckBox = _\n             CType(item.FindControl(&quot;SelectCheckBox&quot;), CheckBox)\n\n         &#39; If the item is selected, display the appropriate message and\n         &#39; increment the count of selected items.\n         If Not selection Is Nothing Then\n\n           If selection.Checked Then\n           \n              Message.Text &amp;= &quot;- &quot; &amp; item.Cells(1).Text &amp; &quot;&lt;br /&gt;&quot;\n              count = count + 1\n           \n           End If\n\n         End If    \n\n      End Sub\n\n      Sub Check_Change(sender As Object, e As EventArgs)\n\n         &#39; Show or hide the first column depending on the value of\n         &#39; the check box.\n         If ShowCheckBox.Checked Then\n        \n            ItemsGrid.Columns(0).Visible = True\n         \n         Else\n         \n            ItemsGrid.Columns(0).Visible = False\n         \n         End If\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGridColumn Visible Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGridColumn Visible Example&lt;/h3&gt;\n\n      Select whether to show or hide the first column.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot;\n                 Visible=&quot;True&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 Visible=&quot;True&quot;  \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot;\n                 Visible=&quot;True&quot;  \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:TemplateColumn HeaderText=&quot;Select Item&quot;\n                 Visible=&quot;True&quot; &gt;\n\n               &lt;ItemTemplate&gt;\n\n                  &lt;asp:CheckBox id=&quot;SelectCheckBox&quot;\n                       Text=&quot;Add to Cart&quot;\n                       Checked=&quot;False&quot;\n                       runat=&quot;server&quot;/&gt;\n\n               &lt;/ItemTemplate&gt;\n\n            &lt;/asp:TemplateColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;SubmitButton&quot;\n           Text=&quot;Submit&quot;\n           OnClick = &quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Message&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;ShowCheckBox&quot;\n           Text=&quot;Show first column&quot;\n           AutoPostBack=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           Checked=&quot;True&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_ItemStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_ItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties of the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle ItemStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties of the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to provide a custom style for the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. Common style attributes that can be adjusted include forecolor, backcolor, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the ItemStyle property, all other item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property, overriding the red font specified in the ItemStyle property. The following table lists the hierarchy order from highest to lowest.  </p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Style Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a></td>\n</tr>\n<tr>\n<td>3</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a></td>\n</tr>\n<tr>\n<td>4</td>\n<td>ItemStyle</td>\n</tr>\n<tr>\n<td>5</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a></td>\n</tr>\n</tbody>\n</table>\n<p> To specify a custom style for the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control, place the <code>&lt;ItemStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. You can then list the style attributes within the opening <code>&lt;ItemStyle&gt;</code> tag.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property to provide a different appearance for the alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ItemStyle property to set the background color of the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> to yellow.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.ItemStyle Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    DataTable Cart;\n    DataView CartView;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n       for (int i = 0; i &lt; 10; i++) \n       {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = 1.23 * (i+1);\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs e) \n    {\n \n       if (!IsPostBack) \n       {\n          // Load this data only once.\n          ItemsGrid.DataSource= CreateDataSource();\n          ItemsGrid.DataBind();\n       }\n \n    }\n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n       &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n       &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            CellPadding=&quot;10&quot;\n            ShowFooter=&quot;true&quot;\n            AutoGenerateColumns=&quot;true&quot;&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;ItemStyle BackColor=&quot;yellow&quot;&gt;\n          &lt;/ItemStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.ItemStyle Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As DataTable\n    Dim CartView As DataView\n    \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 9\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            &#39; Load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n       &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n       &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            CellPadding=&quot;10&quot;\n            ShowFooter=&quot;true&quot;\n            AutoGenerateColumns=&quot;true&quot;&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;ItemStyle BackColor=&quot;yellow&quot;&gt;\n          &lt;/ItemStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(string)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 4 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n  \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n\n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the items and alternating items in\n         &#39; the DataGrid control. Notice that the ItemStyle property affects\n         &#39; the even-numbered items, while the AlternatingItemStyle property \n         &#39; affects the odd-numbered items.\n         ItemsGrid.ItemStyle.BackColor = _\n             System.Drawing.Color.FromName(ItemBackColorList.SelectedItem.Value)\n         ItemsGrid.AlternatingItemStyle.BackColor = _\n             System.Drawing.Color.FromName(AltItemBackColorList.SelectedItem.Value)\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemStyle and AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid ItemStyle and AlternatingItemStyle Example&lt;/h3&gt;\n\n      Select background colors for the items and alternating items.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Item BackColor:\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               Alternating item BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemBackColorList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;AltItemBackColorList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 5; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the items and alternating items in\n         // the DataGrid control. Notice that the ItemStyle property affects\n         // the even-numbered items, while the AlternatingItemStyle property \n         // affects the odd-numbered items.\n         ItemsGrid.ItemStyle.BackColor = \n             System.Drawing.Color.FromName(ItemBackColorList.SelectedItem.Value);\n         ItemsGrid.AlternatingItemStyle.BackColor = \n             System.Drawing.Color.FromName(AltItemBackColorList.SelectedItem.Value);\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemStyle and AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid ItemStyle and AlternatingItemStyle Example&lt;/h3&gt;\n\n      Select background colors for the items and alternating items.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n \n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Item BackColor:\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               Alternating item BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemBackColorList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;AltItemBackColorList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_PageCount\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_PageCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PageCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total number of pages required to display the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PageCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total number of pages required to display the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to programmatically determine the number of pages required to display the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This property is only used when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AllowPaging_\" data-linktype=\"relative-path\">AllowPaging</a> property is set to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the PageCount property to determine the number of pages required to display the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.PageCount Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n \n       for (int i = 0; i &lt; 100; i++) \n       {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = DateTime.Now.ToShortDateString();\n          dr[3] = (i % 2 != 0) ? true : false;\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs e) \n    {\n       if (chk1.Checked)\n          MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages;\n       else \n          MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev;\n \n       BindGrid();\n    }\n \n    void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e) \n    {\n       MyDataGrid.CurrentPageIndex = e.NewPageIndex;\n       BindGrid();\n    }\n \n    void BindGrid() \n    {\n       MyDataGrid.DataSource = CreateDataSource();\n       MyDataGrid.DataBind();\n       ShowStats();\n    }\n \n    void ShowStats() \n    {\n       lblEnabled.Text = &quot;AllowPaging is &quot; + MyDataGrid.AllowPaging;\n       lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; + MyDataGrid.CurrentPageIndex;\n       lblPageCount.Text = &quot;PageCount is &quot; + MyDataGrid.PageCount;\n       lblPageSize.Text = &quot;PageSize is &quot; + MyDataGrid.PageSize;\n    }\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Paging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Paging Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n            &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                        HorizontalAlign=&quot;Right&quot;&gt;\n            &lt;/PagerStyle&gt;\n\n\n            &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n            &lt;/HeaderStyle&gt;\n\n            &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n            &lt;/AlternatingItemStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.PageCount Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n Function CreateDataSource() As ICollection\n    Dim dt As New DataTable()\n    Dim dr As DataRow\n    \n    dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n    dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n    dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n    dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n    \n    Dim i As Integer\n    For i = 0 To 99\n        dr = dt.NewRow()\n        \n        dr(0) = i\n        dr(1) = &quot;Item &quot; &amp; i.ToString()\n        dr(2) = DateTime.Now.ToShortDateString()\n        If i Mod 2 &lt;&gt; 0 Then\n            dr(3) = True\n        Else\n            dr(3) = False\n        End If\n        \n        dt.Rows.Add(dr)\n    Next i\n    \n    Dim dv As New DataView(dt)\n    Return dv\nEnd Function &#39;CreateDataSource\n\n\nSub Page_Load(sender As Object, e As EventArgs)\n    If chk1.Checked Then\n        MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages\n    Else\n        MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev\n    End If \n    BindGrid()\nEnd Sub &#39;Page_Load\n\n\nSub MyDataGrid_Page(sender As Object, e As DataGridPageChangedEventArgs)\n    MyDataGrid.CurrentPageIndex = e.NewPageIndex\n    BindGrid()\nEnd Sub &#39;MyDataGrid_Page\n\n\nSub BindGrid()\n    MyDataGrid.DataSource = CreateDataSource()\n    MyDataGrid.DataBind()\n    ShowStats()\nEnd Sub &#39;BindGrid\n\n\nSub ShowStats()\n    lblEnabled.Text = &quot;AllowPaging is &quot; &amp; MyDataGrid.AllowPaging\n    lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; &amp; MyDataGrid.CurrentPageIndex\n    lblPageCount.Text = &quot;PageCount is &quot; &amp; MyDataGrid.PageCount\n    lblPageSize.Text = &quot;PageSize is &quot; &amp; MyDataGrid.PageSize\nEnd Sub &#39;ShowStats\n\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Paging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Paging Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n            &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                        HorizontalAlign=&quot;Right&quot;&gt;\n            &lt;/PagerStyle&gt;\n\n\n            &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n            &lt;/HeaderStyle&gt;\n\n            &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n            &lt;/AlternatingItemStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_PagerStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_PagerStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PagerStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties of the paging section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.DataGridPagerStyle PagerStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagerstyle\" data-linktype=\"relative-path\">DataGridPagerStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagerstyle\" data-linktype=\"relative-path\">DataGridPagerStyle</a> object that contains the style properties of the paging section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagerstyle\" data-linktype=\"relative-path\">DataGridPagerStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to provide a custom style for the paging section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. Common style attributes that can be adjusted include forecolor, backcolor, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> To specify a custom style for the paging section, place the <code>&lt;PagerStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. You can then list the style attributes within the opening <code>&lt;PagerStyle&gt;</code> tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the PagerStyle property to specify a custom style for the page selection elements of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.PagerStyle Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \nFunction CreateDataSource() As ICollection\n    Dim dt As New DataTable()\n    Dim dr As DataRow\n    \n    dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n    dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n    dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n    dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n    \n    Dim i As Integer\n    For i = 0 To 99\n        dr = dt.NewRow()\n        \n        dr(0) = i\n        dr(1) = &quot;Item &quot; &amp; i.ToString()\n        dr(2) = DateTime.Now.ToShortDateString()\n        If i Mod 2 &lt;&gt; 0 Then\n            dr(3) = True\n        Else\n            dr(3) = False\n        End If\n        \n        dt.Rows.Add(dr)\n    Next i\n    \n    Dim dv As New DataView(dt)\n    Return dv\nEnd Function &#39;CreateDataSource\n\n\nSub Page_Load(sender As Object, E As EventArgs)\n    If chk1.Checked Then\n        MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages\n    Else\n        MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev\n    End If \n    BindGrid()\nEnd Sub &#39;Page_Load\n\n\nSub MyDataGrid_Page(sender As Object, e As DataGridPageChangedEventArgs)\n    MyDataGrid.CurrentPageIndex = e.NewPageIndex\n    BindGrid()\nEnd Sub &#39;MyDataGrid_Page\n\n\nSub BindGrid()\n    MyDataGrid.DataSource = CreateDataSource()\n    MyDataGrid.DataBind()\n    ShowStats()\nEnd Sub &#39;BindGrid\n\n\nSub ShowStats()\n    lblEnabled.Text = &quot;AllowPaging is &quot; &amp; MyDataGrid.AllowPaging\n    lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; &amp; MyDataGrid.CurrentPageIndex\n    lblPageCount.Text = &quot;PageCount is &quot; &amp; MyDataGrid.PageCount\n    lblPageSize.Text = &quot;PageSize is &quot; &amp; MyDataGrid.PageSize\nEnd Sub &#39;ShowStats\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Paging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Paging Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n \n       &lt;/asp:DataGrid&gt;\n       \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.PagerStyle Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n \n       for (int i = 0; i &lt; 100; i++) {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = DateTime.Now.ToShortDateString();\n          dr[3] = (i % 2 != 0) ? true : false;\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs E ) \n    {\n       if (chk1.Checked)\n          MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages;\n       else \n          MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev;\n \n       BindGrid();\n    }\n \n    void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e) \n    {\n       MyDataGrid.CurrentPageIndex = e.NewPageIndex;\n       BindGrid();\n    }\n \n    void BindGrid() \n    {\n       MyDataGrid.DataSource = CreateDataSource();\n       MyDataGrid.DataBind();\n       ShowStats();\n    }\n \n    void ShowStats() \n    {\n       lblEnabled.Text = &quot;AllowPaging is &quot; + MyDataGrid.AllowPaging;\n       lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; + MyDataGrid.CurrentPageIndex;\n       lblPageCount.Text = &quot;PageCount is &quot; + MyDataGrid.PageCount;\n       lblPageSize.Text = &quot;PageSize is &quot; + MyDataGrid.PageSize;\n    }\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Paging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Paging Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n \n       &lt;/asp:DataGrid&gt;\n       \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridPagerStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=100; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the paging controls section of\n         // the DataGrid control.\n         ItemsGrid.PagerStyle.BackColor = \n             System.Drawing.Color.FromName(List.SelectedItem.Value);\n\n      }\n\n      void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n      {\n \n         // For the DataGrid control to navigate to the correct page when\n         // paging is allowed, the CurrentPageIndex property must be\n         // updated programmatically. This process is usually accomplished\n         // in the event-handling method for the PageIndexChanged event.\n\n         // Set CurrentPageIndex to the page the user clicked.\n         ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n         // Rebind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      \n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid PagerStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid PagerStyle Example&lt;/h3&gt;\n\n      Select a background color for the paging controls section \n      of the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           PageSize=&quot;10&quot;\n           AllowPaging=&quot;True&quot;\n           OnPageIndexChanged=&quot;Grid_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;List&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridPagerStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i=0 To 100\n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the paging controls section of\n         &#39; the DataGrid control.\n         ItemsGrid.PagerStyle.BackColor = _\n             System.Drawing.Color.FromName(List.SelectedItem.Value)\n\n      End Sub\n\n      Sub Grid_Change(sender As Object, e As DataGridPageChangedEventArgs) \n \n         &#39; For the DataGrid control to navigate to the correct page when\n         &#39; paging is allowed, the CurrentPageIndex property must be\n         &#39; updated programmatically. This process is usually accomplished\n         &#39; in the event-handling method for the PageIndexChanged event.\n\n         &#39; Set CurrentPageIndex to the page the user clicked.\n         ItemsGrid.CurrentPageIndex = e.NewPageIndex\n\n         &#39; Rebind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n      \n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid PagerStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid PagerStyle Example&lt;/h3&gt;\n\n      Select a backcolor for the paging controls section\n      of the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           PageSize=&quot;10&quot;\n           AllowPaging=&quot;True&quot;\n           OnPageIndexChanged=&quot;Grid_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;List&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_PageSize\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_PageSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PageSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of items to display on a single page of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int PageSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of items to display on a single page of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The default value is 10.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified page size less than 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to specify the number of items to display on a single page of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AllowPaging_\" data-linktype=\"relative-path\">AllowPaging</a> property must be set to <code>true</code> for this property have any effect.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the PageSize property to specify that five items are displayed on a single page of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.PageCount Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n \n       for (int i = 0; i &lt; 100; i++) \n       {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = DateTime.Now.ToShortDateString();\n          dr[3] = (i % 2 != 0) ? true : false;\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs e) \n    {\n       if (chk1.Checked)\n          MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages;\n       else \n          MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev;\n \n       BindGrid();\n    }\n \n    void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e) \n    {\n       MyDataGrid.CurrentPageIndex = e.NewPageIndex;\n       BindGrid();\n    }\n \n    void BindGrid() \n    {\n       MyDataGrid.DataSource = CreateDataSource();\n       MyDataGrid.DataBind();\n       ShowStats();\n    }\n \n    void ShowStats() \n    {\n       lblEnabled.Text = &quot;AllowPaging is &quot; + MyDataGrid.AllowPaging;\n       lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; + MyDataGrid.CurrentPageIndex;\n       lblPageCount.Text = &quot;PageCount is &quot; + MyDataGrid.PageCount;\n       lblPageSize.Text = &quot;PageSize is &quot; + MyDataGrid.PageSize;\n    }\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Paging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Paging Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n            &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                        HorizontalAlign=&quot;Right&quot;&gt;\n            &lt;/PagerStyle&gt;\n\n\n            &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n            &lt;/HeaderStyle&gt;\n\n            &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n            &lt;/AlternatingItemStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.PageCount Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n Function CreateDataSource() As ICollection\n    Dim dt As New DataTable()\n    Dim dr As DataRow\n    \n    dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n    dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n    dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n    dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n    \n    Dim i As Integer\n    For i = 0 To 99\n        dr = dt.NewRow()\n        \n        dr(0) = i\n        dr(1) = &quot;Item &quot; &amp; i.ToString()\n        dr(2) = DateTime.Now.ToShortDateString()\n        If i Mod 2 &lt;&gt; 0 Then\n            dr(3) = True\n        Else\n            dr(3) = False\n        End If\n        \n        dt.Rows.Add(dr)\n    Next i\n    \n    Dim dv As New DataView(dt)\n    Return dv\nEnd Function &#39;CreateDataSource\n\n\nSub Page_Load(sender As Object, e As EventArgs)\n    If chk1.Checked Then\n        MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages\n    Else\n        MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev\n    End If \n    BindGrid()\nEnd Sub &#39;Page_Load\n\n\nSub MyDataGrid_Page(sender As Object, e As DataGridPageChangedEventArgs)\n    MyDataGrid.CurrentPageIndex = e.NewPageIndex\n    BindGrid()\nEnd Sub &#39;MyDataGrid_Page\n\n\nSub BindGrid()\n    MyDataGrid.DataSource = CreateDataSource()\n    MyDataGrid.DataBind()\n    ShowStats()\nEnd Sub &#39;BindGrid\n\n\nSub ShowStats()\n    lblEnabled.Text = &quot;AllowPaging is &quot; &amp; MyDataGrid.AllowPaging\n    lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; &amp; MyDataGrid.CurrentPageIndex\n    lblPageCount.Text = &quot;PageCount is &quot; &amp; MyDataGrid.PageCount\n    lblPageSize.Text = &quot;PageSize is &quot; &amp; MyDataGrid.PageSize\nEnd Sub &#39;ShowStats\n\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Paging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Paging Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n            &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                        HorizontalAlign=&quot;Right&quot;&gt;\n            &lt;/PagerStyle&gt;\n\n\n            &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n            &lt;/HeaderStyle&gt;\n\n            &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n            &lt;/AlternatingItemStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridPageSize#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i=0 To 100\n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the page size for the DataGrid control based on the\n         &#39; user&#39;s selection.\n         ItemsGrid.PageSize = Convert.ToInt32(PageSizeList.SelectedItem.Text)\n\n         &#39; Rebind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub Grid_Change(sender As Object, e As DataGridPageChangedEventArgs) \n \n         &#39; For the DataGrid control to navigate to the correct page when\n         &#39; paging is allowed, the CurrentPageIndex property must be\n         &#39; updated programmatically. This process is usually accomplished\n         &#39; in the event-handling method for the PageIndexChanged event.\n\n         &#39; Set CurrentPageIndex to the page the user clicked.\n         ItemsGrid.CurrentPageIndex = e.NewPageIndex\n\n         &#39; Rebind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n      \n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid PageSize Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid PageSize Example&lt;/h3&gt;\n\n      Select the number of items to display on a page.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           PageSize=&quot;10&quot;\n           AllowPaging=&quot;True&quot;\n           OnPageIndexChanged=&quot;Grid_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:Label id=&quot;Message&quot; \n                    Text=&quot;Page size:&quot;\n                    runat=&quot;server&quot;\n                    AssociatedControlID=&quot;PageSizeList&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;PageSizeList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt; 5 &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt; 10 &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt; 15 &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt; 20 &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridPageSize#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=100; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the page size for the DataGrid control based on the\n         // user&#39;s selection.\n         ItemsGrid.PageSize = \n             Convert.ToInt32(PageSizeList.SelectedItem.Text);\n\n         // Rebind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n\n      }\n\n      void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n      {\n \n         // For the DataGrid control to navigate to the correct page when\n         // paging is allowed, the CurrentPageIndex property must be\n         // updated programmatically. This process is usually accomplished\n         // in the event-handling method for the PageIndexChanged event.\n\n         // Set CurrentPageIndex to the page the user clicked.\n         ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n         // Rebind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      \n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid PageSize Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid PageSize Example&lt;/h3&gt;\n\n      Select the number of items to display on a page.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           PageSize=&quot;10&quot;\n           AllowPaging=&quot;True&quot;\n           OnPageIndexChanged=&quot;Grid_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:Label id=&quot;Message&quot; \n                    Text=&quot;Page size:&quot;\n                    runat=&quot;server&quot;\n                    AssociatedControlID=&quot;PageSizeList&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;PageSizeList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt; 5 &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt; 10 &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt; 15 &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt; 20 &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_SelectedIndex\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_SelectedIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the index of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int SelectedIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified index is less than -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SelectedIndex property to determine the index of the item selected by the user in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. You can also use this property to programmatically specify which item is selected in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> To deselect an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control, set this property to -1.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the SelectedIndex property to determine the index number of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. It also shows how to select and deselect an item programmatically.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.SelectedIndex Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n        Dim Cart As New DataTable\n        Dim CartView As DataView\n        \n        Sub Page_Load(sender As Object, e As EventArgs)\n            Dim dr As DataRow\n            \n            If Session(&quot;ShoppingCart&quot;) Is Nothing Then\n                Cart.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(String)))\n                Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(String)))\n                Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(String)))\n                Session(&quot;ShoppingCart&quot;) = Cart\n                \n                &#39; Create rows and add sample data.\n                Dim i As Integer\n                For i = 1 To 9\n                    dr = Cart.NewRow()\n                    If i Mod 2 &lt;&gt; 0 Then\n                        dr(0) = &quot;2&quot;\n                    Else\n                        dr(0) = &quot;1&quot;\n                    End If\n                    dr(1) = &quot;Item &quot; &amp; i.ToString()\n                    dr(2) =(1.23 *(i + 1)).ToString()\n                    Cart.Rows.Add(dr)\n                Next i\n            Else\n                Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n            End If \n            CartView = New DataView(Cart)\n            CartView.Sort = &quot;Item&quot;\n            \n            If Not IsPostBack Then\n                BindGrid()\n            End If\n        End Sub &#39;Page_Load\n         \n        Sub MyDataGrid_Select(sender As Object, e As EventArgs)\n            \n            Label1.Text = &quot;You selected &quot; &amp; MyDataGrid.SelectedItem.Cells(1).Text &amp; _\n                &quot;.&lt;br /&gt;&quot; &amp; MyDataGrid.SelectedItem.Cells(1).Text &amp; &quot; has an index number of &quot; &amp; _\n                MyDataGrid.SelectedIndex.ToString() &amp; &quot;.&quot;\n        End Sub &#39;MyDataGrid_Select\n\n        Sub Select_Button_Click(sender As Object, e As EventArgs)\n            \n            MyDataGrid.SelectedIndex = 4\n        End Sub &#39;Select_Button_Click\n         \n        Sub UnSelect_Button_Click(sender As Object, e As EventArgs)\n            \n            MyDataGrid.SelectedIndex = - 1\n            Label1.Text = &quot;&quot;\n        End Sub &#39;UnSelect_Button_Click\n         \n        Sub BindGrid()\n            MyDataGrid.DataSource = CartView\n            MyDataGrid.DataBind()\n        End Sub &#39;BindGrid\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Selection Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Selection Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnSelectedIndexChanged=&quot;MyDataGrid_Select&quot;\n           AutoGenerateColumns=&quot;false&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn\n                 HeaderText=&quot;Select Item&quot;\n                 ButtonType=&quot;LinkButton&quot;\n                 Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;&gt;\n\n            &lt;/asp:ButtonColumn&gt;\n \n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;true&quot; \n                 DataField=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;Price&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Select Item 5&quot;\n           OnClick=&quot;Select_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;asp:Button id=&quot;Button2&quot;\n           Text=&quot;Unselect Item&quot;\n           OnClick=&quot;UnSelect_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt; \n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.SelectedIndex Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n         DataRow dr;\n \n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {       \n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(String)));\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Create rows and add sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n                  dr[0] = &quot;2&quot;;\n               else\n                  dr[0] = &quot;1&quot;;\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1)).ToString();\n               Cart.Rows.Add(dr);\n            }\n         }\n         else\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];          \n \n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n \n         if (!IsPostBack)\n            BindGrid();                    \n      }\n \n      void MyDataGrid_Select(Object sender, EventArgs e) \n      {\n \n         Label1.Text = &quot;You selected &quot; +\n                       MyDataGrid.SelectedItem.Cells[1].Text +\n                       &quot;.&lt;br /&gt;&quot; + \n                       MyDataGrid.SelectedItem.Cells[1].Text +\n                       &quot; has an index number of &quot; +\n                       MyDataGrid.SelectedIndex.ToString() + &quot;.&quot;;\n                                \n      }\n\n      void Select_Button_Click(Object sender, EventArgs e) \n      {\n \n         MyDataGrid.SelectedIndex = 4;\n                                \n      }\n\n      void UnSelect_Button_Click(Object sender, EventArgs e) \n      {\n \n         MyDataGrid.SelectedIndex = -1;\n         Label1.Text = &quot;&quot;;\n                                \n      }\n \n      void BindGrid() \n      {\n         MyDataGrid.DataSource = CartView;\n         MyDataGrid.DataBind();\n      } \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Selection Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Selection Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnSelectedIndexChanged=&quot;MyDataGrid_Select&quot;\n           AutoGenerateColumns=&quot;false&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn\n                 HeaderText=&quot;Select Item&quot;\n                 ButtonType=&quot;LinkButton&quot;\n                 Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;&gt;\n\n            &lt;/asp:ButtonColumn&gt;\n \n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;true&quot; \n                 DataField=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;Price&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Select Item 5&quot;\n           OnClick=&quot;Select_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;asp:Button id=&quot;Button2&quot;\n           Text=&quot;Unselect Item&quot;\n           OnClick=&quot;UnSelect_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt; \n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_SelectedItem\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_SelectedItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedItem</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object that represents the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.DataGridItem SelectedItem { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object that represents the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SelectedItem property to get a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object that represents the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This object can then be used to access the properties of the selected item.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SelectedItem_\" data-linktype=\"relative-path\">SelectedItem</a> property to access the properties of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.SelectedIndex Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n        Dim Cart As New DataTable\n        Dim CartView As DataView\n        \n        Sub Page_Load(sender As Object, e As EventArgs)\n            Dim dr As DataRow\n            \n            If Session(&quot;ShoppingCart&quot;) Is Nothing Then\n                Cart.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(String)))\n                Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(String)))\n                Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(String)))\n                Session(&quot;ShoppingCart&quot;) = Cart\n                \n                &#39; Create rows and add sample data.\n                Dim i As Integer\n                For i = 1 To 9\n                    dr = Cart.NewRow()\n                    If i Mod 2 &lt;&gt; 0 Then\n                        dr(0) = &quot;2&quot;\n                    Else\n                        dr(0) = &quot;1&quot;\n                    End If\n                    dr(1) = &quot;Item &quot; &amp; i.ToString()\n                    dr(2) =(1.23 *(i + 1)).ToString()\n                    Cart.Rows.Add(dr)\n                Next i\n            Else\n                Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n            End If \n            CartView = New DataView(Cart)\n            CartView.Sort = &quot;Item&quot;\n            \n            If Not IsPostBack Then\n                BindGrid()\n            End If\n        End Sub &#39;Page_Load\n         \n        Sub MyDataGrid_Select(sender As Object, e As EventArgs)\n            \n            Label1.Text = &quot;You selected &quot; &amp; MyDataGrid.SelectedItem.Cells(1).Text &amp; _\n                &quot;.&lt;br /&gt;&quot; &amp; MyDataGrid.SelectedItem.Cells(1).Text &amp; &quot; has an index number of &quot; &amp; _\n                MyDataGrid.SelectedIndex.ToString() &amp; &quot;.&quot;\n        End Sub &#39;MyDataGrid_Select\n\n        Sub Select_Button_Click(sender As Object, e As EventArgs)\n            \n            MyDataGrid.SelectedIndex = 4\n        End Sub &#39;Select_Button_Click\n         \n        Sub UnSelect_Button_Click(sender As Object, e As EventArgs)\n            \n            MyDataGrid.SelectedIndex = - 1\n            Label1.Text = &quot;&quot;\n        End Sub &#39;UnSelect_Button_Click\n         \n        Sub BindGrid()\n            MyDataGrid.DataSource = CartView\n            MyDataGrid.DataBind()\n        End Sub &#39;BindGrid\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Selection Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Selection Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnSelectedIndexChanged=&quot;MyDataGrid_Select&quot;\n           AutoGenerateColumns=&quot;false&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn\n                 HeaderText=&quot;Select Item&quot;\n                 ButtonType=&quot;LinkButton&quot;\n                 Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;&gt;\n\n            &lt;/asp:ButtonColumn&gt;\n \n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;true&quot; \n                 DataField=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;Price&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Select Item 5&quot;\n           OnClick=&quot;Select_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;asp:Button id=&quot;Button2&quot;\n           Text=&quot;Unselect Item&quot;\n           OnClick=&quot;UnSelect_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt; \n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.SelectedIndex Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n         DataRow dr;\n \n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {       \n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(String)));\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Create rows and add sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n                  dr[0] = &quot;2&quot;;\n               else\n                  dr[0] = &quot;1&quot;;\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1)).ToString();\n               Cart.Rows.Add(dr);\n            }\n         }\n         else\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];          \n \n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n \n         if (!IsPostBack)\n            BindGrid();                    \n      }\n \n      void MyDataGrid_Select(Object sender, EventArgs e) \n      {\n \n         Label1.Text = &quot;You selected &quot; +\n                       MyDataGrid.SelectedItem.Cells[1].Text +\n                       &quot;.&lt;br /&gt;&quot; + \n                       MyDataGrid.SelectedItem.Cells[1].Text +\n                       &quot; has an index number of &quot; +\n                       MyDataGrid.SelectedIndex.ToString() + &quot;.&quot;;\n                                \n      }\n\n      void Select_Button_Click(Object sender, EventArgs e) \n      {\n \n         MyDataGrid.SelectedIndex = 4;\n                                \n      }\n\n      void UnSelect_Button_Click(Object sender, EventArgs e) \n      {\n \n         MyDataGrid.SelectedIndex = -1;\n         Label1.Text = &quot;&quot;;\n                                \n      }\n \n      void BindGrid() \n      {\n         MyDataGrid.DataSource = CartView;\n         MyDataGrid.DataBind();\n      } \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Selection Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Selection Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnSelectedIndexChanged=&quot;MyDataGrid_Select&quot;\n           AutoGenerateColumns=&quot;false&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn\n                 HeaderText=&quot;Select Item&quot;\n                 ButtonType=&quot;LinkButton&quot;\n                 Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;&gt;\n\n            &lt;/asp:ButtonColumn&gt;\n \n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;true&quot; \n                 DataField=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;Price&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Select Item 5&quot;\n           OnClick=&quot;Select_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;asp:Button id=&quot;Button2&quot;\n           Text=&quot;Unselect Item&quot;\n           OnClick=&quot;UnSelect_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt; \n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"BaseDataListSelectedIndexChanged#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot;%&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data.SqlClient&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Declarative BaseDataList SelectedIndexChanged Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Integer)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n\n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 8\n      \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         &#39; Create a DataView from the DataTable.\n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub IndexChange_Command(sender As Object, e As EventArgs)\n          \n         &#39; Display the details of the selected item.\n         DetailsLabel.Text = _\n            &quot;Item Number: &quot; &amp; ItemsGrid.SelectedItem.Cells(1).Text &amp; &quot;&lt;br /&gt;&quot; &amp; _\n            &quot;Description: &quot; &amp; ItemsGrid.SelectedItem.Cells(2).Text &amp; &quot;&lt;br /&gt;&quot; &amp; _\n            &quot;Price: $&quot; &amp; ItemsGrid.SelectedItem.Cells(3).Text &amp; &quot;&lt;br /&gt;&quot;\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;Declarative BaseDataList SelectedIndexChanged Example&lt;/h3&gt;\n\n      Select an item: \n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; \n           BorderColor=&quot;Black&quot;\n           ShowFooter=&quot;False&quot; \n           CellPadding=&quot;3&quot; \n           CellSpacing=&quot;0&quot;\n           HeaderStyle-BackColor=&quot;#aaaadd&quot;\n           OnSelectedIndexChanged=&quot;IndexChange_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table border=&quot;1&quot; style=&quot;border-color:Black; margin:0&quot;&gt;\n\n         &lt;tr style=&quot;background-color:#aaaadd&quot;&gt;\n\n            &lt;td&gt;\n\n               Details\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:Label id=&quot;DetailsLabel&quot;\n                    runat=&quot;server&quot;\n                    Text=&quot;No item selected.&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"BaseDataListSelectedIndexChanged#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot;%&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data.SqlClient&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Declarative BaseDataList SelectedIndexChanged Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n\n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         // Create a DataView from the DataTable.\n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void IndexChange_Command(Object sender, EventArgs e)\n      {\n          \n         // Display the details of the selected item.\n         DetailsLabel.Text = \n            &quot;Item Number: &quot; + ItemsGrid.SelectedItem.Cells[1].Text + &quot;&lt;br /&gt;&quot; +\n            &quot;Description: &quot; + ItemsGrid.SelectedItem.Cells[2].Text + &quot;&lt;br /&gt;&quot; +\n            &quot;Price: $&quot; + ItemsGrid.SelectedItem.Cells[3].Text + &quot;&lt;br /&gt;&quot;;\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;Declarative BaseDataList SelectedIndexChanged Example&lt;/h3&gt;\n\n      Select an item: \n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; \n           BorderColor=&quot;Black&quot;\n           ShowFooter=&quot;False&quot; \n           CellPadding=&quot;3&quot; \n           CellSpacing=&quot;0&quot;\n           HeaderStyle-BackColor=&quot;#aaaadd&quot;\n           OnSelectedIndexChanged=&quot;IndexChange_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table style=&quot;border-width:1; border-color:Black; margin:0&quot;&gt;\n\n         &lt;tr style=&quot;background-color:#aaaadd&quot;&gt;\n\n            &lt;td&gt;\n\n               Details\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:Label id=&quot;DetailsLabel&quot;\n                    runat=&quot;server&quot;\n                    Text=&quot;No item selected.&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_SelectedItemStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_SelectedItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedItemStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties of the currently selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle SelectedItemStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties of the currently selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SelectedItemStyle property to provide a custom style for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. Common style attributes that can be adjusted include forecolor, backcolor, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property, all other item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property. The following table lists the hierarchy order from highest to lowest.  </p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Style Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td>SelectedItemStyle</td>\n</tr>\n<tr>\n<td>3</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a></td>\n</tr>\n<tr>\n<td>4</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a></td>\n</tr>\n<tr>\n<td>5</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a></td>\n</tr>\n</tbody>\n</table>\n<p> To specify a custom style for the selected item, place the <code>&lt;SelectedItemStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. You can then list the style attributes within the opening <code>&lt;SelectedItemStyle&gt;</code> tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use SelectedItemStyle property to set the background color of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to yellow.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.SelectedIndex Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n        Dim Cart As New DataTable\n        Dim CartView As DataView\n        \n        Sub Page_Load(sender As Object, e As EventArgs)\n            Dim dr As DataRow\n            \n            If Session(&quot;ShoppingCart&quot;) Is Nothing Then\n                Cart.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(String)))\n                Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(String)))\n                Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(String)))\n                Session(&quot;ShoppingCart&quot;) = Cart\n                \n                &#39; Create rows and add sample data.\n                Dim i As Integer\n                For i = 1 To 9\n                    dr = Cart.NewRow()\n                    If i Mod 2 &lt;&gt; 0 Then\n                        dr(0) = &quot;2&quot;\n                    Else\n                        dr(0) = &quot;1&quot;\n                    End If\n                    dr(1) = &quot;Item &quot; &amp; i.ToString()\n                    dr(2) =(1.23 *(i + 1)).ToString()\n                    Cart.Rows.Add(dr)\n                Next i\n            Else\n                Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n            End If \n            CartView = New DataView(Cart)\n            CartView.Sort = &quot;Item&quot;\n            \n            If Not IsPostBack Then\n                BindGrid()\n            End If\n        End Sub &#39;Page_Load\n         \n        Sub MyDataGrid_Select(sender As Object, e As EventArgs)\n            \n            Label1.Text = &quot;You selected &quot; &amp; MyDataGrid.SelectedItem.Cells(1).Text &amp; _\n                &quot;.&lt;br /&gt;&quot; &amp; MyDataGrid.SelectedItem.Cells(1).Text &amp; &quot; has an index number of &quot; &amp; _\n                MyDataGrid.SelectedIndex.ToString() &amp; &quot;.&quot;\n        End Sub &#39;MyDataGrid_Select\n\n        Sub Select_Button_Click(sender As Object, e As EventArgs)\n            \n            MyDataGrid.SelectedIndex = 4\n        End Sub &#39;Select_Button_Click\n         \n        Sub UnSelect_Button_Click(sender As Object, e As EventArgs)\n            \n            MyDataGrid.SelectedIndex = - 1\n            Label1.Text = &quot;&quot;\n        End Sub &#39;UnSelect_Button_Click\n         \n        Sub BindGrid()\n            MyDataGrid.DataSource = CartView\n            MyDataGrid.DataBind()\n        End Sub &#39;BindGrid\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Selection Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Selection Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnSelectedIndexChanged=&quot;MyDataGrid_Select&quot;\n           AutoGenerateColumns=&quot;false&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn\n                 HeaderText=&quot;Select Item&quot;\n                 ButtonType=&quot;LinkButton&quot;\n                 Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;&gt;\n\n            &lt;/asp:ButtonColumn&gt;\n \n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;true&quot; \n                 DataField=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;Price&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Select Item 5&quot;\n           OnClick=&quot;Select_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;asp:Button id=&quot;Button2&quot;\n           Text=&quot;Unselect Item&quot;\n           OnClick=&quot;UnSelect_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt; \n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.SelectedIndex Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n         DataRow dr;\n \n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {       \n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(String)));\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Create rows and add sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n                  dr[0] = &quot;2&quot;;\n               else\n                  dr[0] = &quot;1&quot;;\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1)).ToString();\n               Cart.Rows.Add(dr);\n            }\n         }\n         else\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];          \n \n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n \n         if (!IsPostBack)\n            BindGrid();                    \n      }\n \n      void MyDataGrid_Select(Object sender, EventArgs e) \n      {\n \n         Label1.Text = &quot;You selected &quot; +\n                       MyDataGrid.SelectedItem.Cells[1].Text +\n                       &quot;.&lt;br /&gt;&quot; + \n                       MyDataGrid.SelectedItem.Cells[1].Text +\n                       &quot; has an index number of &quot; +\n                       MyDataGrid.SelectedIndex.ToString() + &quot;.&quot;;\n                                \n      }\n\n      void Select_Button_Click(Object sender, EventArgs e) \n      {\n \n         MyDataGrid.SelectedIndex = 4;\n                                \n      }\n\n      void UnSelect_Button_Click(Object sender, EventArgs e) \n      {\n \n         MyDataGrid.SelectedIndex = -1;\n         Label1.Text = &quot;&quot;;\n                                \n      }\n \n      void BindGrid() \n      {\n         MyDataGrid.DataSource = CartView;\n         MyDataGrid.DataBind();\n      } \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Selection Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Selection Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;\n           OnSelectedIndexChanged=&quot;MyDataGrid_Select&quot;\n           AutoGenerateColumns=&quot;false&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn\n                 HeaderText=&quot;Select Item&quot;\n                 ButtonType=&quot;LinkButton&quot;\n                 Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;&gt;\n\n            &lt;/asp:ButtonColumn&gt;\n \n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;true&quot; \n                 DataField=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n\n            &lt;asp:BoundColumn \n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;Price&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Select Item 5&quot;\n           OnClick=&quot;Select_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;asp:Button id=&quot;Button2&quot;\n           Text=&quot;Unselect Item&quot;\n           OnClick=&quot;UnSelect_Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;/&gt; \n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridSelectedItemStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot;%&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data.SqlClient&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n&lt;head&gt;\n    &lt;title&gt;DataGrid SelectedItemStyle Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Integer)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n\n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 8\n      \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         &#39; Create a DataView from the DataTable.\n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub IndexChange_Command(sender As Object, e As EventArgs)\n          \n         &#39; Display the details of the selected item.\n         DetailsLabel.Text = &quot;Item Number: &quot; &amp; ItemsGrid.SelectedItem.Cells(1).Text &amp; &quot;&lt;br /&gt;&quot; &amp; _\n                             &quot;Description: &quot; &amp; ItemsGrid.SelectedItem.Cells(2).Text &amp; &quot;&lt;br /&gt;&quot; &amp; _\n                             &quot;Price: $&quot; &amp; ItemsGrid.SelectedItem.Cells(3).Text &amp; &quot;&lt;br /&gt;&quot;\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the paging controls section of\n         &#39; the DataGrid control.\n         ItemsGrid.SelectedItemStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value)\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid SelectedItemStyle Example&lt;/h3&gt;\n\n      Select an item and a backcolor for the selected item. \n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; \n           BorderColor=&quot;Black&quot;\n           ShowFooter=&quot;False&quot; \n           CellPadding=&quot;3&quot; \n           CellSpacing=&quot;0&quot;\n           HeaderStyle-BackColor=&quot;#aaaadd&quot;\n           OnSelectedIndexChanged=&quot;IndexChange_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table style=&quot;border-color:Black; border-width:1&quot; cellspacing=&quot;0&quot;&gt;\n\n         &lt;tr style=&quot;background-color:#aaaadd&quot;&gt;\n\n            &lt;td&gt;\n\n               Details\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:Label id=&quot;DetailsLabel&quot;\n                    runat=&quot;server&quot;\n                    Text=&quot;No item selected.&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Backcolor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;List&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n      \n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridSelectedItemStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot;%&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data.SqlClient&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n&lt;head&gt;\n    &lt;title&gt;DataGrid SelectedItemStyle Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n\n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         // Create a DataView from the DataTable.\n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // Load sample data only once when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n\n      }\n\n      void IndexChange_Command(Object sender, EventArgs e)\n      {\n          \n         // Display the details of the selected item.\n         DetailsLabel.Text = &quot;Item Number: &quot; + ItemsGrid.SelectedItem.Cells[1].Text + &quot;&lt;br /&gt;&quot; +\n                             &quot;Description: &quot; + ItemsGrid.SelectedItem.Cells[2].Text + &quot;&lt;br /&gt;&quot; +\n                             &quot;Price: $&quot; + ItemsGrid.SelectedItem.Cells[3].Text + &quot;&lt;br /&gt;&quot;;\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the paging controls section of\n         // the DataGrid control.\n         ItemsGrid.SelectedItemStyle.BackColor = System.Drawing.Color.FromName(List.SelectedItem.Value);\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid SelectedItemStyle Example&lt;/h3&gt;\n\n      Select an item and a backcolor for the selected item. \n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; \n           BorderColor=&quot;Black&quot;\n           ShowFooter=&quot;False&quot; \n           CellPadding=&quot;3&quot; \n           CellSpacing=&quot;0&quot;\n           HeaderStyle-BackColor=&quot;#aaaadd&quot;\n           OnSelectedIndexChanged=&quot;IndexChange_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:ButtonColumn Text=&quot;Select&quot;\n                 CommandName=&quot;Select&quot;/&gt;\n\n         &lt;/Columns&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table style=&quot;border-color:Black; border-width:1&quot; cellspacing=&quot;0&quot;&gt;\n\n         &lt;tr style=&quot;background-color:#aaaadd&quot;&gt;\n\n            &lt;td&gt;\n\n               Details\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:Label id=&quot;DetailsLabel&quot;\n                    runat=&quot;server&quot;\n                    Text=&quot;No item selected.&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Backcolor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;List&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n      \n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_ShowFooter\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_ShowFooter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowFooter</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the footer is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ShowFooter { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to display the footer; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to <code>true</code> to display the footer in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The appearance of the footer is controlled by using the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_FooterStyle_\" data-linktype=\"relative-path\">FooterStyle</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ShowFooter property to display the footer in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.ShowFooter Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n        \n        Dim i As Integer\n        For i = 0 To 99\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; + i.ToString()\n            dr(2) = DateTime.Now.ToShortDateString()\n            If i Mod 2 &lt;&gt; 0 Then\n                dr(3) = True\n            Else\n                dr(3) = False\n            End If\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n    Sub Page_Load(sender As Object, E As EventArgs)\n        If chk1.Checked Then\n            MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages\n        Else\n            MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev\n        End If \n        BindGrid()\n    End Sub &#39;Page_Load\n\n    Sub MyDataGrid_Page(sender As Object, e As DataGridPageChangedEventArgs)\n        BindGrid()\n    End Sub &#39;MyDataGrid_Page\n\n    Sub BindGrid()\n        MyDataGrid.DataSource = CreateDataSource()\n        MyDataGrid.DataBind()\n        ShowStats()\n    End Sub &#39;BindGrid\n\n    Sub ShowStats()\n        lblEnabled.Text = &quot;AllowPaging is &quot; &amp; MyDataGrid.AllowPaging\n        lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; &amp; MyDataGrid.CurrentPageIndex\n        lblPageCount.Text = &quot;PageCount is &quot; &amp; MyDataGrid.PageCount\n        lblPageSize.Text = &quot;PageSize is &quot; &amp; MyDataGrid.PageSize\n    End Sub &#39;ShowStats\n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            ShowFooter=&quot;true&quot;\n            ShowHeader=&quot;true&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n \n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n         \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.ShowFooter Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n \n       for (int i = 0; i &lt; 100; i++) \n       {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = DateTime.Now.ToShortDateString();\n          dr[3] = (i % 2 != 0) ? true : false;\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs E ) \n    {\n       if (chk1.Checked)\n          MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages;\n       else \n          MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev;\n \n       BindGrid();\n    }\n \n    void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e) \n    {\n       BindGrid();\n    }\n \n    void BindGrid() \n    {\n       MyDataGrid.DataSource = CreateDataSource();\n       MyDataGrid.DataBind();\n       ShowStats();\n    }\n \n    void ShowStats() \n    {\n       lblEnabled.Text = &quot;AllowPaging is &quot; + MyDataGrid.AllowPaging;\n       lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; + MyDataGrid.CurrentPageIndex;\n       lblPageCount.Text = &quot;PageCount is &quot; + MyDataGrid.PageCount;\n       lblPageSize.Text = &quot;PageSize is &quot; + MyDataGrid.PageSize;\n    }\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            ShowFooter=&quot;true&quot;\n            ShowHeader=&quot;true&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n \n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n         \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridShowHeader#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create a Random object to mix up the order of items in the \n         &#39; sample data.\n         Dim Rand_Num As Random = New Random()\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; Rand_Num.Next(1, 15).ToString()\n            dr(2) = 1.23 * Rand_Num.Next(1, 15)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Check_Change(sender As Object, e As EventArgs)\n   \n         &#39; Show or hide the header depending on the user&#39;s selection.\n         If ShowHeaderCheckBox.Checked Then\n\n            ItemsGrid.ShowHeader = True\n\n         Else\n\n            ItemsGrid.ShowHeader = False\n\n         End If\n\n         &#39; Show or hide the footer depending on the user&#39;s selection.\n         If ShowFooterCheckBox.Checked Then\n\n            ItemsGrid.ShowFooter = True\n\n         Else\n\n            ItemsGrid.ShowFooter = False\n\n         End If\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ShowHeader and ShowFooter Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid ShowHeader and ShowFooter Example&lt;/h3&gt;\n\n      Select whether to show or hide the header and footer sections\n      in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowHeader=&quot;True&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;ShowHeaderCheckBox&quot;\n           Text=&quot;Show header&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;&amp;nbsp\n\n      &lt;asp:CheckBox id=&quot;ShowFooterCheckBox&quot;\n           Text=&quot;Show footer&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridShowHeader#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n      \n         // Create a Random object to mix up the order of items in the\n         // sample data.\n         Random Rand_Num = new Random();\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=8; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + Rand_Num.Next(1, 15).ToString();\n            dr[2] = 1.23 * Rand_Num.Next(1, 15);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n\n      void Check_Change(Object sender, EventArgs e)\n      {\n   \n         // Show or hide the header depending on the user&#39;s selection.\n         if (ShowHeaderCheckBox.Checked)\n         {\n\n            ItemsGrid.ShowHeader = true;\n\n         }\n         else\n         {\n\n            ItemsGrid.ShowHeader = false;\n\n         }\n\n         // Show or hide the footer depending on the user&#39;s selection.\n         if (ShowFooterCheckBox.Checked)\n         {\n\n            ItemsGrid.ShowFooter = true;\n\n         }\n         else\n         {\n\n            ItemsGrid.ShowFooter = false;\n\n         }\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ShowHeader and ShowFooter Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid ShowHeader and ShowFooter Example&lt;/h3&gt;\n\n      Select whether to show or hide the header and footer sections\n      in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowHeader=&quot;True&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;ShowHeaderCheckBox&quot;\n           Text=&quot;Show header&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;&amp;nbsp\n\n      &lt;asp:CheckBox id=&quot;ShowFooterCheckBox&quot;\n           Text=&quot;Show footer&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_ShowHeader\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_ShowHeader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowHeader</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the header is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ShowHeader { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to display the header; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to <code>true</code> to display the header in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>. The appearance of the header is controlled by using the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ShowHeader property to hide the header on the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.ShowHeader Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n        \n        Dim i As Integer\n        For i = 0 To 99\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = DateTime.Now.ToShortDateString()\n            If i Mod 2 &lt;&gt; 0 Then\n                dr(3) = True\n            Else\n                dr(3) = False\n            End If\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n    Sub Page_Load(sender As Object, E As EventArgs)\n        If chk1.Checked Then\n            MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages\n        Else\n            MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev\n        End If \n        BindGrid()\n    End Sub &#39;Page_Load\n\n    Sub MyDataGrid_Page(sender As Object, e As DataGridPageChangedEventArgs)\n        BindGrid()\n    End Sub &#39;MyDataGrid_Page\n\n    Sub BindGrid()\n        MyDataGrid.DataSource = CreateDataSource()\n        MyDataGrid.DataBind()\n        ShowStats()\n    End Sub &#39;BindGrid\n\n    Sub ShowStats()\n        lblEnabled.Text = &quot;AllowPaging is &quot; &amp; MyDataGrid.AllowPaging\n        lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; &amp; MyDataGrid.CurrentPageIndex\n        lblPageCount.Text = &quot;PageCount is &quot; &amp; MyDataGrid.PageCount\n        lblPageSize.Text = &quot;PageSize is &quot; &amp; MyDataGrid.PageSize\n    End Sub &#39;ShowStats\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            ShowFooter=&quot;true&quot;\n            ShowHeader=&quot;false&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n \n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n         \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.ShowHeader Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n    ICollection CreateDataSource() \n    {\n       DataTable dt = new DataTable();\n       DataRow dr;\n \n       dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n       dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n       dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n \n       for (int i = 0; i &lt; 100; i++) \n       {\n          dr = dt.NewRow();\n \n          dr[0] = i;\n          dr[1] = &quot;Item &quot; + i.ToString();\n          dr[2] = DateTime.Now.ToShortDateString();\n          dr[3] = (i % 2 != 0) ? true : false;\n \n          dt.Rows.Add(dr);\n       }\n \n       DataView dv = new DataView(dt);\n       return dv;\n    }\n \n    void Page_Load(Object sender, EventArgs E ) \n    {\n       if (chk1.Checked)\n          MyDataGrid.PagerStyle.Mode = PagerMode.NumericPages;\n       else \n          MyDataGrid.PagerStyle.Mode = PagerMode.NextPrev;\n \n       BindGrid();\n    }\n \n    void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e) \n    {\n       BindGrid();\n    }\n \n    void BindGrid() \n    {\n       MyDataGrid.DataSource = CreateDataSource();\n       MyDataGrid.DataBind();\n       ShowStats();\n    }\n \n    void ShowStats() \n    {\n       lblEnabled.Text = &quot;AllowPaging is &quot; + MyDataGrid.AllowPaging;\n       lblCurrentIndex.Text = &quot;CurrentPageIndex is &quot; + MyDataGrid.CurrentPageIndex;\n       lblPageCount.Text = &quot;PageCount is &quot; + MyDataGrid.PageCount;\n       lblPageSize.Text = &quot;PageSize is &quot; + MyDataGrid.PageSize;\n    }\n \n \n &lt;/script&gt;\n \n &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n    &lt;h3&gt;DataGrid Example&lt;/h3&gt;\n \n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n       &lt;asp:DataGrid id=&quot;MyDataGrid&quot; runat=&quot;server&quot;\n            AllowPaging=&quot;True&quot;\n            PageSize=&quot;10&quot;\n            ShowFooter=&quot;true&quot;\n            ShowHeader=&quot;false&quot;\n            OnPageIndexChanged=&quot;MyDataGrid_Page&quot;\n            BorderColor=&quot;black&quot;\n            BorderWidth=&quot;1&quot;\n            GridLines=&quot;Both&quot;\n            CellPadding=&quot;3&quot;\n            CellSpacing=&quot;0&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;&gt;\n\n          &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/HeaderStyle&gt;\n\n          &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n          &lt;/FooterStyle&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#eeeeee&quot;&gt;\n          &lt;/AlternatingItemStyle&gt;\n \n          &lt;PagerStyle Mode=&quot;NumericPages&quot;\n                      HorizontalAlign=&quot;Right&quot;&gt;\n          &lt;/PagerStyle&gt;\n\n       &lt;/asp:DataGrid&gt;\n         \n       &lt;br /&gt;\n \n       &lt;asp:Checkbox id=&quot;chk1&quot; runat=&quot;server&quot;\n            Text=&quot;Show numeric page navigation buttons&quot;\n            Font-Names=&quot;Verdana&quot;\n            Font-Size=&quot;8pt&quot;\n            AutoPostBack=&quot;true&quot;/&gt;\n \n       &lt;br /&gt;\n \n       &lt;table style=&quot;background-color:#eeeeee; padding:6&quot;&gt;\n          &lt;tr&gt;\n             &lt;td style=&quot;display:inline&quot;&gt;\n                \n \n                   &lt;asp:Label id=&quot;lblEnabled&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblCurrentIndex&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageCount&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n                   &lt;asp:Label id=&quot;lblPageSize&quot; \n                        runat=&quot;server&quot;/&gt;&lt;br /&gt;\n \n                \n             &lt;/td&gt;\n          &lt;/tr&gt;\n       &lt;/table&gt;\n \n    &lt;/form&gt;\n \n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridShowHeader#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create a Random object to mix up the order of items in the \n         &#39; sample data.\n         Dim Rand_Num As Random = New Random()\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; Rand_Num.Next(1, 15).ToString()\n            dr(2) = 1.23 * Rand_Num.Next(1, 15)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Check_Change(sender As Object, e As EventArgs)\n   \n         &#39; Show or hide the header depending on the user&#39;s selection.\n         If ShowHeaderCheckBox.Checked Then\n\n            ItemsGrid.ShowHeader = True\n\n         Else\n\n            ItemsGrid.ShowHeader = False\n\n         End If\n\n         &#39; Show or hide the footer depending on the user&#39;s selection.\n         If ShowFooterCheckBox.Checked Then\n\n            ItemsGrid.ShowFooter = True\n\n         Else\n\n            ItemsGrid.ShowFooter = False\n\n         End If\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ShowHeader and ShowFooter Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid ShowHeader and ShowFooter Example&lt;/h3&gt;\n\n      Select whether to show or hide the header and footer sections\n      in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowHeader=&quot;True&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;ShowHeaderCheckBox&quot;\n           Text=&quot;Show header&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;&amp;nbsp\n\n      &lt;asp:CheckBox id=&quot;ShowFooterCheckBox&quot;\n           Text=&quot;Show footer&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridShowHeader#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n      \n         // Create a Random object to mix up the order of items in the\n         // sample data.\n         Random Rand_Num = new Random();\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=8; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + Rand_Num.Next(1, 15).ToString();\n            dr[2] = 1.23 * Rand_Num.Next(1, 15);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n\n      void Check_Change(Object sender, EventArgs e)\n      {\n   \n         // Show or hide the header depending on the user&#39;s selection.\n         if (ShowHeaderCheckBox.Checked)\n         {\n\n            ItemsGrid.ShowHeader = true;\n\n         }\n         else\n         {\n\n            ItemsGrid.ShowHeader = false;\n\n         }\n\n         // Show or hide the footer depending on the user&#39;s selection.\n         if (ShowFooterCheckBox.Checked)\n         {\n\n            ItemsGrid.ShowFooter = true;\n\n         }\n         else\n         {\n\n            ItemsGrid.ShowFooter = false;\n\n         }\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ShowHeader and ShowFooter Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid ShowHeader and ShowFooter Example&lt;/h3&gt;\n\n      Select whether to show or hide the header and footer sections\n      in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowHeader=&quot;True&quot;\n           ShowFooter=&quot;True&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;ShowHeaderCheckBox&quot;\n           Text=&quot;Show header&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &amp;nbsp;&amp;nbsp\n\n      &lt;asp:CheckBox id=&quot;ShowFooterCheckBox&quot;\n           Text=&quot;Show footer&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_TagKey\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_TagKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TagKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.web.ui.htmltextwritertag\" data-linktype=\"relative-path\">HtmlTextWriterTag</a> value for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.htmltextwritertag\" data-linktype=\"relative-path\">HtmlTextWriterTag</a></div>\r\n                  </div>\r\n                  <p>Always returns <code>HtmlTextWriterTag.Table</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TagKey property allows the output stream to write the appropriate HTML markup for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_VirtualItemCount\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_VirtualItemCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VirtualItemCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the virtual number of items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control when custom paging is used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int VirtualItemCount { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The virtual number of items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control when custom paging is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified value is a negative number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to specify the virtual number of items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control when custom paging is used. This property is only used when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AllowCustomPaging_\" data-linktype=\"relative-path\">AllowCustomPaging</a> property is set to <code>true</code>.  </p>\n<p> If the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AllowCustomPaging_\" data-linktype=\"relative-path\">AllowCustomPaging</a> property is set to <code>true</code>, the number of pages required to display every item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is calculated based on the values of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> and VirtualItemCount properties.  </p>\n<p> If the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_AllowCustomPaging_\" data-linktype=\"relative-path\">AllowCustomPaging</a> property is set to <code>false</code>, the number of pages displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is calculated based on the values of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageSize_\" data-linktype=\"relative-path\">PageSize</a> property and the total number of items in the data source.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the VirtualItemCount property to specify the total number of items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control when custom paging is used.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridCustomPaging#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script runat=&quot;server&quot;&gt;\n\n      // Normally, an entire data source is loaded in the DataGrid control, \n      // which can take up a lot of resources. This example uses custom \n      // paging, which loads only the segment of data needed to fill a\n      // single page. In order to query for the appropriate segment of\n      // data, the index of the first item displayed on a page must be\n      // tracked as the user navigates between pages.\n      int startIndex = 0;\n\n      ICollection CreateDataSource() \n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n\n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;DateTimeValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;BoolValue&quot;, typeof(bool)));\n\n         // Populate the table with sample values. When using custom paging,\n         // a query should only return enough data to fill a single page, \n         // beginning at the start index.\n         for (int i = startIndex; i &lt; (startIndex + MyDataGrid.PageSize); i++) \n         {\n             dr = dt.NewRow();\n\n             dr[0] = i;\n             dr[1] = &quot;Item &quot; + i.ToString();\n             dr[2] = DateTime.Now.ToShortDateString();\n             dr[3] = (i % 2 != 0) ? true : false;\n\n             dt.Rows.Add(dr);\n         }\n\n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n\n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n\n            // Set the virtual item count, which specifies the total number\n            // items displayed in the DataGrid control when custom paging\n            // is used.\n            MyDataGrid.VirtualItemCount = 200;\n\n            // Retrieve the segment of data to display on the page from the\n            // data source and bind it to the DataGrid control.\n            BindGrid();\n\n         }\n\n      }\n\n      void MyDataGrid_Page(Object sender, DataGridPageChangedEventArgs e) \n      {\n\n         // For the DataGrid control to navigate to the correct page when\n         // paging is allowed, the CurrentPageIndex property must be updated\n         // programmatically. This process is usually accomplished in the\n         // event-handling method for the PageIndexChanged event.\n\n         // Set CurrentPageIndex to the page the user clicked.\n         MyDataGrid.CurrentPageIndex = e.NewPageIndex;\n\n         // Calculate the index of the first item to display on the page \n         // using the current page index and the page size.\n         startIndex = MyDataGrid.CurrentPageIndex * MyDataGrid.PageSize;\n\n         // Retrieve the segment of data to display on the page from the \n         // data source and bind it to the DataGrid control.\n         BindGrid();\n\n      }\n\n      void BindGrid() \n      {\n\n         MyDataGrid.DataSource = CreateDataSource();\n         MyDataGrid.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt; DataGrid Custom Paging Example &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt; DataGrid Custom Paging Example &lt;/h3&gt;\n\n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; \n           AllowCustomPaging=&quot;True&quot; \n           AllowPaging=&quot;True&quot; \n           PageSize=&quot;10&quot; \n           OnPageIndexChanged=&quot;MyDataGrid_Page&quot; \n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;Navy&quot; \n                      ForeColor=&quot;White&quot; \n                      Font-Bold=&quot;True&quot; /&gt;\n\n         &lt;PagerStyle Mode=&quot;NumericPages&quot; \n                     HorizontalAlign=&quot;Right&quot; /&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridCustomPaging#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script runat=&quot;server&quot;&gt;\n\n      &#39; Normally, an entire data source is loaded in the DataGrid control, \n      &#39; which can take up a lot of resources. This example uses custom \n      &#39; paging, which loads only the segment of data needed to fill a\n      &#39; single page. In order to query for the appropriate segment of\n      &#39; data, the index of the first item displayed on a page must be\n      &#39; tracked as the user navigates between pages.\n      Dim startIndex As Integer = 0\n\n      Function CreateDataSource() As ICollection \n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n\n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;DateTimeValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;BoolValue&quot;, GetType(Boolean)))\n\n         &#39; Populate the table with sample values. When using custom paging,\n         &#39; a query should only return enough data to fill a single page, \n         &#39; beginning at the start index.\n         Dim i As Integer         \n\n         For i = startIndex To ((startIndex + MyDataGrid.PageSize) - 1) \n\n             dr = dt.NewRow()\n\n             dr(0) = i\n             dr(1) = &quot;Item &quot; &amp; i.ToString()\n             dr(2) = DateTime.Now.ToShortDateString()\n             If (i Mod 2 &lt;&gt; 0) Then\n                dr(3) = True\n             Else\n                dr(3) = False\n             End If\n\n             dt.Rows.Add(dr)\n\n         Next i\n\n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n\n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n\n            &#39; Set the virtual item count, which specifies the total number\n            &#39; items displayed in the DataGrid control when custom paging\n            &#39; is used.\n            MyDataGrid.VirtualItemCount = 200\n\n            &#39; Retrieve the segment of data to display on the page from the \n            &#39; data source and bind it to the DataGrid control.\n            BindGrid()\n\n         End If\n\n      End Sub\n\n      Sub MyDataGrid_Page(sender as Object, e As DataGridPageChangedEventArgs) \n\n         &#39; For the DataGrid control to navigate to the correct page when\n         &#39; paging is allowed, the CurrentPageIndex property must be updated\n         &#39; programmatically. This process is usually accomplished in the\n         &#39; event-handling method for the PageIndexChanged event.\n\n         &#39; Set CurrentPageIndex to the page the user clicked.\n         MyDataGrid.CurrentPageIndex = e.NewPageIndex\n\n         &#39; Calculate the index of the first item to display on the page \n         &#39; using the current page index and the page size.\n         startIndex = MyDataGrid.CurrentPageIndex * MyDataGrid.PageSize\n\n         &#39; Retrieve the segment of data to display on the page from the \n         &#39; data source and bind it to the DataGrid control.\n         BindGrid()\n\n      End Sub\n\n      Sub BindGrid() \n\n         MyDataGrid.DataSource = CreateDataSource()\n         MyDataGrid.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt; DataGrid Custom Paging Example &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt; DataGrid Custom Paging Example &lt;/h3&gt;\n\n      &lt;asp:DataGrid id=&quot;MyDataGrid&quot; \n           AllowCustomPaging=&quot;True&quot; \n           AllowPaging=&quot;True&quot; \n           PageSize=&quot;10&quot; \n           OnPageIndexChanged=&quot;MyDataGrid_Page&quot; \n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;Navy&quot; \n                      ForeColor=&quot;White&quot; \n                      Font-Bold=&quot;True&quot; /&gt;\n\n         &lt;PagerStyle Mode=&quot;NumericPages&quot; \n                     HorizontalAlign=&quot;Right&quot; /&gt;\n\n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_CreateColumnSet_System_Web_UI_WebControls_PagedDataSource_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_CreateColumnSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateColumnSet(PagedDataSource,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates the set of columns to be used to build up the control hierarchy. When <span class=\"xref\">stem.Web.UI.WebControls.DataGrid.AutoGenerateColumns*</span> is true, the columns are created to match the data source and are appended to the set of columns defined in the <span class=\"xref\">stem.Web.UI.WebControls.DataGrid.Columns*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Collections.ArrayList CreateColumnSet (System.Web.UI.WebControls.PagedDataSource dataSource, bool useDataSource);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataSource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.pageddatasource\" data-linktype=\"relative-path\">PagedDataSource</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data source being used to create the control hierarchy</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>useDataSource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Whether to use the data source to generate columns automatically or to use saved state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> containing the effective set of columns in the right order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_CreateControlHierarchy_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_CreateControlHierarchy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateControlHierarchy(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates the control hierarchy that is used to render the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void CreateControlHierarchy (bool useDataSource);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>useDataSource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Whether to use the data source to generate columns automatically or to use saved state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpexception\" data-linktype=\"relative-path\">HttpException</a></div>\r\n                  </div>\r\n                  <p><code>useDataSource</code> is <code>true</code>, the value of <span class=\"xref\">stem.Web.UI.WebControls.DataGrid.VirtualItemCount*</span> is not set, and the selected data source does not implement the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> interface.  </p>\n<p> - or -  </p>\n<p> <code>useDataSource</code> is <code>true</code> and the data source has an invalid <span class=\"xref\">stem.Web.UI.WebControls.PagedDataSource.CurrentPageIndex*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation assumes that all the children in the controls collection have already been cleared.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_CreateControlStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_CreateControlStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateControlStyle()</div>        \r\n          </div>\r\n    \r\n            <p>Creates new control style.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Web.UI.WebControls.Style CreateControlStyle ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.style\" data-linktype=\"relative-path\">Style</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.style\" data-linktype=\"relative-path\">Style</a> the represents the new style.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to override the CreateControlStyle method in a custom server control so that it always displays the <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_GridLines_\" data-linktype=\"relative-path\">GridLines</a> with no <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CellSpacing_\" data-linktype=\"relative-path\">CellSpacing</a> in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomDataGridCreateControlStyle#1\">&lt;%@ Page language=&quot;c#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; Namespace=&quot;Samples.AspNet.CS.Controls&quot; Assembly=&quot;Samples.AspNet.CS&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;Custom DataGrid - CreateControlStyle - C# Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;Form1&quot; method=&quot;post&quot; runat=&quot;server&quot;&gt;\n      &lt;h3&gt;Custom DataGrid - CreateControlStyle - C# Example&lt;/h3&gt;\n      &lt;aspSample:CustomDataGridCreateControlStyle id=&quot;Datagrid1&quot; runat=&quot;server&quot; AutoGenerateColumns=&quot;False&quot;&gt;\n        &lt;Columns&gt;\n          &lt;asp:HyperLinkColumn Text=&quot;www.microsoft.com&quot; Target=&quot;_blank&quot; HeaderText=&quot;HyperLinks&quot; NavigateUrl=&quot;http://www.microsoft.com&quot; /&gt;\n        &lt;/Columns&gt;\n      &lt;/aspSample:CustomDataGridCreateControlStyle&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomDataGridCreateControlStyle#1\">&lt;%@ Register TagPrefix=&quot;aspSample&quot; Namespace=&quot;Samples.AspNet.VB.Controls&quot; Assembly=&quot;Samples.AspNet.VB&quot; %&gt;\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;Custom DataGrid - CreateControlStyle - VB.NET Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;Form1&quot; method=&quot;post&quot; runat=&quot;server&quot;&gt;\n      &lt;h3&gt;Custom DataGrid - CreateControlStyle - C# Example&lt;/h3&gt;\n            &lt;aspSample:CustomDataGridCreateControlStyle id=&quot;Datagrid1&quot; runat=&quot;server&quot; AutoGenerateColumns=&quot;False&quot;&gt;\n                &lt;Columns&gt;\n                    &lt;asp:HyperLinkColumn Text=&quot;www.microsoft.com&quot; Target=&quot;_blank&quot; HeaderText=&quot;HyperLinks&quot; NavigateUrl=&quot;http://www.microsoft.com&quot; /&gt;\n                &lt;/Columns&gt;\n            &lt;/aspSample:CustomDataGridCreateControlStyle&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"CustomDataGridCreateControlStyle#2\">using System.Web;\nusing System.Security.Permissions;\nnamespace Samples.AspNet.CS.Controls\n{\n    [AspNetHostingPermission(SecurityAction.Demand, Level = AspNetHostingPermissionLevel.Minimal)]\n    public sealed class CustomDataGridCreateControlStyle : System.Web.UI.WebControls.DataGrid\n    {\n        protected override System.Web.UI.WebControls.Style CreateControlStyle()\n        {\n            // Create a new TableStyle instance based on ViewState values.\n            System.Web.UI.WebControls.TableStyle style = new System.Web.UI.WebControls.TableStyle(ViewState);\n            \n            // Show the GridLines with no CellSpacing.\n            style.GridLines = System.Web.UI.WebControls.GridLines.Both;\n            style.CellSpacing = 0;\n\n            // Return the Style\n            return style;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomDataGridCreateControlStyle#2\">Imports System.Web\nImports System.Security.Permissions\n\nNamespace Samples.AspNet.VB.Controls\n    &lt;AspNetHostingPermission(SecurityAction.Demand, Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n    Public NotInheritable Class CustomDataGridCreateControlStyle\n        Inherits System.Web.UI.WebControls.DataGrid\n\n        Protected Overrides Function CreateControlStyle() As System.Web.UI.WebControls.Style\n\n            &#39; Create a new TableStyle instance based on ViewState values.\n            Dim style As New System.Web.UI.WebControls.TableStyle(ViewState)\n\n            &#39; Show the GridLines with no CellSpacing.\n            style.GridLines = System.Web.UI.WebControls.GridLines.Both\n            style.CellSpacing = 0\n\n            &#39; Return the Style\n            Return style\n        End Function\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_CreateItem_System_Int32_System_Int32_System_Web_UI_WebControls_ListItemType_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_CreateItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateItem(Int32,Int32,ListItemType)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Web.UI.WebControls.DataGridItem CreateItem (int itemIndex, int dataSourceIndex, System.Web.UI.WebControls.ListItemType itemType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>itemIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataSourceIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the data item from the data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>itemType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateItem is a helper method used by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> class to create its <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> objects.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method is primarily used by control developers.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_InitializeItem_System_Web_UI_WebControls_DataGridItem_System_Web_UI_WebControls_DataGridColumn___\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_InitializeItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitializeItem(DataGridItem,DataGridColumn[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes the specified <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void InitializeItem (System.Web.UI.WebControls.DataGridItem item, System.Web.UI.WebControls.DataGridColumn[] columns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> to initialize.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>columns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn\" data-linktype=\"relative-path\">DataGridColumn</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn\" data-linktype=\"relative-path\">DataGridColumn</a> objects that contains the columns in this <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The InitializeItem method is a helper method used by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> class to initialize the specified <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method is primarily used by control developers.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_InitializePager_System_Web_UI_WebControls_DataGridItem_System_Int32_System_Web_UI_WebControls_PagedDataSource_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_InitializePager_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitializePager(DataGridItem,Int32,PagedDataSource)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> object that contains the paging UI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void InitializePager (System.Web.UI.WebControls.DataGridItem item, int columnSpan, System.Web.UI.WebControls.PagedDataSource pagedDataSource);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditem\" data-linktype=\"relative-path\">DataGridItem</a> that contains the pager.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>columnSpan</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of columns to span the pager.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pagedDataSource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.pageddatasource\" data-linktype=\"relative-path\">PagedDataSource</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.pageddatasource\" data-linktype=\"relative-path\">PagedDataSource</a> that contains the properties for the pager.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The paging UI is a navigation bar that is a built into a single <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a> that spans across all columns of a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The InitializePager method is a helper method used by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> class to create the pager row.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method is primarily used by control developers.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_LoadViewState_System_Object_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_LoadViewState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadViewState(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Loads a saved state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void LoadViewState (object savedState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>savedState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A saved state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnBubbleEvent_System_Object_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnBubbleEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBubbleEvent(Object,EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Passes the event raised by a control within the container up the page&#39;s UI server control hierarchy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool OnBubbleEvent (object source, EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source of the event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to indicate that this method is passing an event raised by a control within the container up the page&#39;s UI server control hierarchy; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnBubbleEvent method to pass an event raised by a control within the container up the page&#39;s UI server control hierarchy.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method is primarily used by control developers.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnCancelCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnCancelCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnCancelCommand(DataGridCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnCancelCommand (System.Web.UI.WebControls.DataGridCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnCancelCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event is raised when the Cancel button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item) and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  </p>\n</div>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event to cancel edits made to an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnDeleteCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnDeleteCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDeleteCommand(DataGridCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDeleteCommand (System.Web.UI.WebControls.DataGridCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnDeleteCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event is raised when the Delete button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event removes the selected item from the data source and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event to delete an item from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnEditCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnEditCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnEditCommand(DataGridCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnEditCommand (System.Web.UI.WebControls.DataGridCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnEditCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event is raised when the Edit button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to the selected row and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event to edit an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnItemCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnItemCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnItemCommand(DataGridCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnItemCommand (System.Web.UI.WebControls.DataGridCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnItemCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event is raised when any button is clicked in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This event is commonly used to handle buttons controls with a custom CommandName value, such as Add, in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event to add or remove an item from a shopping cart.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnItemCreated_System_Web_UI_WebControls_DataGridItemEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnItemCreated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnItemCreated(DataGridItemEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnItemCreated (System.Web.UI.WebControls.DataGridItemEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemeventargs\" data-linktype=\"relative-path\">DataGridItemEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemeventargs\" data-linktype=\"relative-path\">DataGridItemEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnItemCreated method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event is raised when an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is created, both during round-trips and at the time data is bound to the control.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event is commonly used to control the content and appearance of a row in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event to display the order that items are created in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.ItemCreated Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n   DataTable Cart;\n   DataView CartView;\n \n   ICollection CreateDataSource() \n   {\n      DataTable dt = new DataTable();\n      DataRow dr;\n \n      dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n      dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n      dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n      for (int i = 0; i &lt; 10; i++) \n      {\n         dr = dt.NewRow();\n \n         dr[0] = i;\n         dr[1] = &quot;Item &quot; + i.ToString();\n         dr[2] = 1.23 * (i+1);\n \n         dt.Rows.Add(dr);\n      }\n \n      DataView dv = new DataView(dt);\n      return dv;\n   }\n \n   void Page_Load(Object sender, EventArgs e) \n   {\n \n      if (!IsPostBack) \n      {\n         // Need to load this data only once.\n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      }\n \n   }\n \n   void Item_Created(Object sender, DataGridItemEventArgs e) \n   {\n \n      Label1.Text = Label1.Text + &quot; &quot; + e.Item.ItemIndex;\n \n   }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           Text=&quot;Order of items created: &quot; \n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label2&quot; \n           Text=&quot;Note: The -1&#39;s refer to the header and footer.&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.ItemCreated Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As DataTable\n    Dim CartView As DataView\n    \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 9\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            &#39; Need to load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n     \n\n    Sub Item_Created(sender As Object, e As DataGridItemEventArgs)\n        \n        Label1.Text = Label1.Text &amp; &quot; &quot; &amp; e.Item.ItemIndex\n    End Sub &#39;Item_Created \n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           Text=&quot;Order of items created: &quot; \n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label2&quot; \n           Text=&quot;Note: The -1&#39;s refer to the header and footer.&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemCreated#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow \n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer         \n\n         For i=0 To 10 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Item_Created(sender As Object, e As DataGridItemEventArgs) \n \n         &#39; Customize the footer section with an image.\n         If e.Item.ItemType = ListItemType.Footer Then         \n \n           &#39; Create an Image control.\n           Dim NewImageControl As System.Web.UI.WebControls.Image = New System.Web.UI.WebControls.Image()\n\n           &#39; Set the properties of the Image control.\n           NewImageControl.ImageUrl = &quot;Image1.jpg&quot;\n           NewImageControl.AlternateText = &quot;Image 1&quot;\n           \n           &#39; Add the Image control to the Controls collection of the \n           &#39; cell representing the third column in the DataGrid.\n           e.Item.Cells(2).Controls.Add(NewImageControl)\n\n         End If         \n \n      End Sub\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemCreated=&quot;Item_Created&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemCreated#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=10; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n \n      void Item_Created(Object sender, DataGridItemEventArgs e) \n      {\n \n         // Customize the footer section with an image.\n         if(e.Item.ItemType == ListItemType.Footer)\n         {         \n \n           // Create an Image control.\n           System.Web.UI.WebControls.Image NewImageControl = new System.Web.UI.WebControls.Image();\n\n           // Set the properties of the Image control.\n           NewImageControl.ImageUrl = &quot;Image1.jpg&quot;; \n           NewImageControl.AlternateText = &quot;Image 1&quot;;\n           \n           // Add the Image control to the Controls collection of the \n           // cell representing the third column in the DataGrid.\n           e.Item.Cells[2].Controls.Add(NewImageControl);\n\n         }         \n \n      }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemCreated=&quot;Item_Created&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemCreated2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=10; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Manually register the event-handling method for the ItemCreated  \n         // event of the DataGrid control.\n         ItemsGrid.ItemCreated += \n             new DataGridItemEventHandler(this.Item_Created);\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n \n      void Item_Created(Object sender, DataGridItemEventArgs e) \n      {\n \n         // Customize the footer section with an image.\n         if(e.Item.ItemType == ListItemType.Footer)\n         {         \n \n           // Create an Image control.\n           System.Web.UI.WebControls.Image NewImageControl = new System.Web.UI.WebControls.Image();\n\n           // Set the properties of the Image control.\n           NewImageControl.ImageUrl = &quot;Image1.jpg&quot;; \n           NewImageControl.AlternateText = &quot;Image 1&quot;;\n\n           // Add the Image control to the Controls collection of the \n           // cell representing the third column in the DataGrid.\n           e.Item.Cells[2].Controls.Add(NewImageControl);\n\n         }         \n \n      }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemCreated2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow \n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer         \n\n         For i=0 To 10 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n\n         &#39; Manually register the event-handling method for the ItemCreated  \n         &#39; event of the DataGrid control.\n         AddHandler ItemsGrid.ItemCreated, AddressOf Item_Created\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Item_Created(sender As Object, e As DataGridItemEventArgs) \n \n         &#39; Customize the footer section with an image.\n         If e.Item.ItemType = ListItemType.Footer Then         \n \n           &#39; Create an Image control.\n           Dim NewImageControl As System.Web.UI.WebControls.Image = New System.Web.UI.WebControls.Image()\n\n           &#39; Set the properties of the Image control.\n           NewImageControl.ImageUrl = &quot;Image1.jpg&quot;\n           NewImageControl.AlternateText = &quot;Image 1&quot;\n\n           &#39; Add the Image control to the Controls collection of the \n           &#39; cell representing the third column in the DataGrid.\n           e.Item.Cells(2).Controls.Add(NewImageControl)\n\n         End If         \n \n      End Sub\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnItemDataBound_System_Web_UI_WebControls_DataGridItemEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnItemDataBound_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnItemDataBound(DataGridItemEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnItemDataBound (System.Web.UI.WebControls.DataGridItemEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemeventargs\" data-linktype=\"relative-path\">DataGridItemEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagriditemeventargs\" data-linktype=\"relative-path\">DataGridItemEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnItemDataBound method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event is raised after an item is data bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This event provides you with the last opportunity to access the data item before it is displayed on the client. After this event is raised, the data item is nulled out and no longer available.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event to display the order that items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> are data bounded.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.ItemDataBound Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As DataTable\n    Dim CartView As DataView\n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 9\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            &#39; Need to load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n     \n\n    Sub Item_Bound(sender As Object, e As DataGridItemEventArgs)\n        \n        Label1.Text = Label1.Text &amp; &quot; &quot; &amp; e.Item.ItemIndex\n    End Sub &#39;Item_Bound \n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           Text=&quot;Order of items data bound: &quot; \n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label2&quot; \n           Text=&quot;Note: The -1&#39;s refer to the header and footer.&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.ItemDataBound Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n   DataTable Cart;\n   DataView CartView;\n \n   ICollection CreateDataSource() \n   {\n      DataTable dt = new DataTable();\n      DataRow dr;\n \n      dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n      dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n      dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n      for (int i = 0; i &lt; 10; i++) \n      {\n         dr = dt.NewRow();\n \n         dr[0] = i;\n         dr[1] = &quot;Item &quot; + i.ToString();\n         dr[2] = 1.23 * (i+1);\n \n         dt.Rows.Add(dr);\n      }\n \n      DataView dv = new DataView(dt);\n      return dv;\n   }\n \n   void Page_Load(Object sender, EventArgs e) \n   {\n \n      if (!IsPostBack) \n      {\n         // Need to load this data only once.\n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      }\n \n   }\n \n   void Item_Bound(Object sender, DataGridItemEventArgs e) \n   {\n \n      Label1.Text = Label1.Text + &quot; &quot; + e.Item.ItemIndex;\n \n   }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           Text=&quot;Order of items data bound: &quot; \n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label2&quot; \n           Text=&quot;Note: The -1&#39;s refer to the header and footer.&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemDataBound#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; Debug=&quot;true&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=10; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n \n      void Item_Bound(Object sender, DataGridItemEventArgs e) \n      {\n \n         // Use the ItemDataBound event to customize the DataGrid control. \n         // The ItemDataBound event allows you to access the data before \n         // the item is displayed in the control. In this example, the \n         // ItemDataBound event is used to format the items in the \n         // CurrencyColumn in currency format.\n         if((e.Item.ItemType == ListItemType.Item) || \n             (e.Item.ItemType == ListItemType.AlternatingItem))\n         {\n \n            // Retrieve the text of the CurrencyColumn from the DataGridItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(e.Item.Cells[2].Text);\n\n            // Format the value as currency and redisplay it in the DataGrid.\n            e.Item.Cells[2].Text = Price.ToString(&quot;c&quot;);\n        \n         }         \n \n      }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemDataBound#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow \n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer         \n\n         For i=0 To 10 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Item_Bound(sender As Object, e As DataGridItemEventArgs) \n \n         &#39; Use the ItemDataBound event to customize the DataGrid control. \n         &#39; The ItemDataBound event allows you to access the data before \n         &#39; the item is displayed in the control. In this example, the \n         &#39; ItemDataBound event is used to format the items in the \n         &#39; CurrencyColumn in currency format.\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n \n            &#39; Retrieve the text of the CurrencyColumn from the DataGridItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble(e.Item.Cells(2).Text)\n\n            &#39; Format the value as currency and redisplay it in the DataGrid.\n            e.Item.Cells(2).Text = Price.ToString(&quot;c&quot;)\n        \n         End If         \n \n      End Sub\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemDataBound2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow \n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer         \n\n         For i=0 To 10 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n\n         &#39; Manually register the event-handling method for the  \n         &#39; ItemDataBound event of the DataGrid control.\n         AddHandler ItemsGrid.ItemDataBound, AddressOf Item_Bound\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Item_Bound(sender As Object, e As DataGridItemEventArgs) \n \n         &#39; Use the ItemDataBound event to customize the DataGrid control. \n         &#39; The ItemDataBound event allows you to access the data before \n         &#39; the item is displayed in the control. In this example, the \n         &#39; ItemDataBound event is used to format the items in the \n         &#39; CurrencyColumn in currency format.\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n \n            &#39; Retrieve the text of the CurrencyColumn from the DataGridItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble(e.Item.Cells(2).Text)\n\n            &#39; Format the value as currency and redisplay it in the DataGrid.\n            e.Item.Cells(2).Text = Price.ToString(&quot;c&quot;)\n        \n         End If         \n \n      End Sub\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemDataBound2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=10; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Manually register the event-handling method for the  \n         // ItemDataBound event of the DataGrid control.\n         ItemsGrid.ItemDataBound += \n             new DataGridItemEventHandler(this.Item_Bound);\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n \n      void Item_Bound(Object sender, DataGridItemEventArgs e) \n      {\n \n         // Use the ItemDataBound event to customize the DataGrid control. \n         // The ItemDataBound event allows you to access the data before \n         // the item is displayed in the control. In this example, the \n         // ItemDataBound event is used to format the items in the \n         // CurrencyColumn in currency format.\n         if((e.Item.ItemType == ListItemType.Item) ||\n             (e.Item.ItemType == ListItemType.AlternatingItem))\n         {\n \n            // Retrieve the text of the CurrencyColumn from the DataGridItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(e.Item.Cells[2].Text);\n\n            // Format the value as currency and redisplay it in the DataGrid.\n            e.Item.Cells[2].Text = Price.ToString(&quot;c&quot;);\n        \n         }         \n \n      }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnPageIndexChanged_System_Web_UI_WebControls_DataGridPageChangedEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnPageIndexChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPageIndexChanged(DataGridPageChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPageIndexChanged (System.Web.UI.WebControls.DataGridPageChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagechangedeventargs\" data-linktype=\"relative-path\">DataGridPageChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagechangedeventargs\" data-linktype=\"relative-path\">DataGridPageChangedEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnPageIndexChanged method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event is raised when one of the page selection elements is clicked.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CurrentPageIndex_\" data-linktype=\"relative-path\">CurrentPageIndex</a> property to the index of the page you want to display and then uses the <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataBind_\" data-linktype=\"relative-path\">DataBind</a> method to bind the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The event handler receives a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagechangedeventargs\" data-linktype=\"relative-path\">DataGridPageChangedEventArgs</a> object as a parameter. You can use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridpagechangedeventargs#System_Web_UI_WebControls_DataGridPageChangedEventArgs_NewPageIndex_\" data-linktype=\"relative-path\">NewPageIndex</a> property of this parameter to determine the index of the page selected by the user from the page selection elements of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n</div>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> event. It displays pages on the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control in 10-item increments.  </p>\n<pre><code class=\"lang-vb\" name=\"DataGridAllowPaging#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        &#39; Create sample data for the DataGrid control.\n        Dim dt As DataTable = New DataTable()\n        Dim dr As DataRow\n \n        &#39; Define the columns of the table.\n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n        &#39; Populate the table with sample values.\n        Dim i As Integer\n        For i = 0 To 100\n            dr = dt.NewRow()\n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dt.Rows.Add(dr)\n        Next i\n \n        Dim dv As DataView = New DataView(dt)\n        Return dv\n    End Function\n \n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Load sample data only once, when the page is first loaded.\n        If Not IsPostBack Then\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub\n\n    Sub Check_Change(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Allow or prevent paging depending on the user&#39;s selection.\n        ItemsGrid.AllowPaging = AllowPagingCheckBox.Checked()\n\n        &#39; Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub\n\n    Sub Grid_Change(ByVal sender As Object, ByVal e As DataGridPageChangedEventArgs)\n        &#39; For the DataGrid control to navigate to the correct page when\n        &#39; paging is allowed, the CurrentPageIndex property must be updated\n        &#39; programmatically. This process is usually accomplished in the\n        &#39; event-handling method for the PageIndexChanged event.\n\n        &#39; Set CurrentPageIndex to the page the user clicked.\n        ItemsGrid.CurrentPageIndex = e.NewPageIndex\n\n        &#39; Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head2&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n\n    &lt;h3&gt;DataGrid AllowPaging Example&lt;/h3&gt;\n\n    &lt;p&gt;Select whether to allow paging in the DataGrid control.&lt;br /&gt;\n       &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n            Text=&quot;Allow paging&quot;\n            AutoPostBack=&quot;True&quot;\n            Checked=&quot;True&quot;\n            OnCheckedChanged=&quot;Check_Change&quot;\n            runat=&quot;server&quot; /&gt;\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n        AssociatedControlID=&quot;ItemsGrid&quot; \n        Font-Bold=&quot;true&quot;&gt;Product List&lt;/asp:Label&gt;\n    &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;Gray&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        UseAccessibleHeader=&quot;true&quot;\n        AutoGenerateColumns=&quot;False&quot;\n        PageSize=&quot;10&quot;\n        AllowPaging=&quot;True&quot;\n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 ItemStyle-HorizontalAlign=&quot;center&quot;\n                 HeaderText=&quot;Item&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                HeaderText=&quot;Description&quot; \n                ItemStyle-HorizontalAlign=&quot;left&quot;\n                SortExpression=&quot;StringValue&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot; /&gt;\n\n        &lt;/Columns&gt;\n        &lt;ItemStyle HorizontalAlign=&quot;Right&quot; /&gt;\n    &lt;/asp:DataGrid&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridAllowPaging#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    private ICollection CreateDataSource()\n    {\n        // Create sample data for the DataGrid control.\n        DataTable dt = new DataTable();\n        DataRow dr;\n\n        // Define the columns of the table.\n        dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n        dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n        dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n\n        // Populate the table with sample values.\n        for (int i = 0; i &lt;= 100; i++) \n        {\n            dr = dt.NewRow();\n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n\n            dt.Rows.Add(dr);\n        }\n        DataView dv = new DataView(dt);\n        return dv;\n    }\n\n    private void Page_Load(Object sender, EventArgs e)\n    { \n        // Load sample data only once, when the page is first loaded.\n        if (!IsPostBack)\n        { \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n        }\n    }\n\n    private void Check_Change(Object sender, EventArgs e)\n    {\n        // Allow or prevent paging depending \n        // on the user&#39;s selection.\n        ItemsGrid.AllowPaging = AllowPagingCheckBox.Checked;\n\n        // Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource();\n        ItemsGrid.DataBind();\n    }\n\n    private void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n    {\n        // For the DataGrid control to navigate to the correct page when\n        // paging is allowed, the CurrentPageIndex property must be updated\n        // programmatically. This process is usually accomplished in the\n        // event-handling method for the PageIndexChanged event.\n\n        // Set CurrentPageIndex to the page the user clicked.\n        ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n        // Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource();\n        ItemsGrid.DataBind();\n    }\n&lt;/script&gt;\n \n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid AllowPaging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n \n    &lt;h3&gt;DataGrid AllowPaging Example&lt;/h3&gt;\n\n    &lt;p&gt;Select whether to allow paging in the DataGrid control.&lt;br /&gt;\n       &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n            Text=&quot;Allow paging&quot;\n            AutoPostBack=&quot;True&quot;\n            Checked=&quot;True&quot;\n            OnCheckedChanged=&quot;Check_Change&quot;\n            runat=&quot;server&quot; /&gt;\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;asp:Label runat=&quot;server&quot; \n        AssociatedControlID=&quot;ItemsGrid&quot; \n        Font-Bold=&quot;true&quot;&gt;Product List&lt;/asp:Label&gt;\n    &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;Gray&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        AutoGenerateColumns=&quot;False&quot;\n        UseAccessibleHeader=&quot;true&quot;\n        PageSize=&quot;10&quot;\n        AllowPaging=&quot;True&quot;\n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 ItemStyle-HorizontalAlign=&quot;center&quot;\n                 HeaderText=&quot;Item&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                HeaderText=&quot;Description&quot; \n                ItemStyle-HorizontalAlign=&quot;left&quot;\n                SortExpression=&quot;StringValue&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot; /&gt;\n\n        &lt;/Columns&gt;\n        &lt;ItemStyle HorizontalAlign=&quot;Right&quot; /&gt;\n    &lt;/asp:DataGrid&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"PageIndexChanged#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=100; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n         // Manually register the event-handling method for the PageIndexChanged  \n         // event of the DataGrid control.\n         ItemsGrid.PageIndexChanged += new DataGridPageChangedEventHandler(this.Grid_Change);\n\n      }\n\n      void Check_Change(Object sender, EventArgs e)\n      {\n   \n         // Allow or prevent paging depending on the user&#39;s selection.\n         if (AllowPagingCheckBox.Checked)\n         {\n\n            ItemsGrid.AllowPaging = true;\n\n         }\n         else\n         {\n\n            ItemsGrid.AllowPaging = false;\n\n         }\n\n         // Re-bind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n\n      }\n\n      void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n      {\n \n         // For the DataGrid control to navigate to the correct page when paging is\n         // allowed, the CurrentPageIndex property must be programmatically updated.\n         // This process is usually accomplished in the event-handling method for the\n         // PageIndexChanged event.\n\n         // Set CurrentPageIndex to the page the user clicked.\n         ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n         // Re-bind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      \n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid PageIndexChanged Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid PageIndexChanged Example&lt;/h3&gt;\n\n      Select whether to allow paging in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           PageSize=&quot;10&quot;\n           AllowPaging=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n                    Text=&quot;Allow paging&quot;\n                    AutoPostBack=&quot;True&quot;\n                    Checked=&quot;True&quot;\n                    OnCheckedChanged=&quot;Check_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n\n            &lt;/td&gt;\n            \n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"PageIndexChanged#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i=0 To 100\n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n         &#39; Manually register the event-handling method for the PageIndexChanged  \n         &#39; event of the DataGrid control.\n         AddHandler ItemsGrid.PageIndexChanged, AddressOf Grid_Change\n\n      End Sub\n\n      Sub Check_Change(sender As Object, e As EventArgs)\n   \n         &#39; Allow or prevent paging depending on the user&#39;s selection.\n         If AllowPagingCheckBox.Checked Then\n\n            ItemsGrid.AllowPaging = True\n\n         Else\n\n            ItemsGrid.AllowPaging = False\n\n         End If\n\n         &#39; Re-bind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub Grid_Change(sender As Object, e As DataGridPageChangedEventArgs) \n \n         &#39; For the DataGrid control to navigate to the correct page when paging is\n         &#39; allowed, the CurrentPageIndex property must be programmatically updated.\n         &#39; This process is usually accomplished in the event-handling method for the\n         &#39; PageIndexChanged event.\n\n         &#39; Set CurrentPageIndex to the page the user clicked.\n         ItemsGrid.CurrentPageIndex = e.NewPageIndex\n\n         &#39; Re-bind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n      \n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid PageIndexChanged Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid PageIndexChanged Example&lt;/h3&gt;\n\n      Select whether to allow paging in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           PageSize=&quot;10&quot;\n           AllowPaging=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n                    Text=&quot;Allow paging&quot;\n                    AutoPostBack=&quot;True&quot;\n                    Checked=&quot;True&quot;\n                    OnCheckedChanged=&quot;Check_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n\n            &lt;/td&gt;\n            \n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnSortCommand_System_Web_UI_WebControls_DataGridSortCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnSortCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnSortCommand(DataGridSortCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SortCommand\" data-linktype=\"relative-path\">SortCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnSortCommand (System.Web.UI.WebControls.DataGridSortCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridsortcommandeventargs\" data-linktype=\"relative-path\">DataGridSortCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridsortcommandeventargs\" data-linktype=\"relative-path\">DataGridSortCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnSortCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SortCommand\" data-linktype=\"relative-path\">SortCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SortCommand\" data-linktype=\"relative-path\">SortCommand</a> event is raised when a column is sorted.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SortCommand\" data-linktype=\"relative-path\">SortCommand</a> event sorts the list, and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_SortCommand\" data-linktype=\"relative-path\">SortCommand</a> event to sort a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridAllowSorting#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    ICollection CreateDataSource()\n    {\n        // Create a Random object to mix up the \n        // order of items in the sample data.\n        Random randNum = new Random();\n\n        // Create sample data for the DataGrid control.\n        DataTable dt = new DataTable();\n\n        // Define the columns of the table.\n        dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n        dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n        dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n\n        // Populate the table with sample values.\n        for (int i = 0; i &lt;= 8; i++)\n        {\n            DataRow dr = dt.NewRow();\n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + randNum.Next(1, 15).ToString();\n            dr[2] = 1.23 * randNum.Next(1, 15);\n            dt.Rows.Add(dr);\n        }\n\n        // To persist the data source between posts to the server,\n        // store it in session state.  \n        Session[&quot;Source&quot;] = dt;\n        DataView dv = new DataView(dt);\n        return dv;\n    }\n\n    void Page_Load(Object sender, EventArgs e)\n    {\n        // Load sample data only once, when the page is first loaded.\n        if (!IsPostBack)\n        {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n        }\n    }\n\n    void Sort_Grid(Object sender, DataGridSortCommandEventArgs e)\n    {\n        // Retrieve the data source from session state.\n        DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n        // Create a DataView from the DataTable.\n        DataView dv = new DataView(dt);\n\n        // The DataView provides an easy way to sort. Simply set the\n        // Sort property with the name of the field to sort by.\n        dv.Sort = e.SortExpression;\n\n        // Rebind the data source and specify that it should be sorted\n        // by the field specified in the SortExpression property.\n        ItemsGrid.DataSource = dv;\n        ItemsGrid.DataBind();\n    }\n\n    void Check_Change(Object sender, EventArgs e)\n    {\n        // Allow or prevent sorting depending on the user&#39;s selection.\n        ItemsGrid.AllowSorting = AllowSortingCheckBox.Checked;\n\n        // After changing the property, rebind the data to\n        // refresh the DataGrid control.\n\n        // Retrieve the data source from session state.\n        DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n        // Create a DataView from the DataTable.\n        DataView dv = new DataView(dt);\n\n        // Rebind the data source.\n        ItemsGrid.DataSource = dv;\n        ItemsGrid.DataBind();\n    }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n        ExtractTemplateRows Example\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;h3&gt;DataGrid AllowSorting Example&lt;/h3&gt;\n\n      &lt;p&gt;Select whether to allow sorting in the DataGrid control.&lt;br /&gt;\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;&lt;/p&gt;\n      &lt;hr /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnSortCommand=&quot;Sort_Grid&quot;\n           UseAccessibleHeader=&quot;true&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot; /&gt;\n         &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n            &lt;/asp:BoundColumn&gt;\n         &lt;/Columns&gt; \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/div&gt;\n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridAllowSorting#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        &#39; Create a Random object to mix up the order \n        &#39; of items in the sample data.\n        Dim randNum As Random = New Random()\n\n        &#39; Create sample data for the DataGrid control.\n        Dim dt As DataTable = New DataTable()\n\n        &#39; Define the columns of the table.\n        dt.Columns.Add( _\n            New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add( _\n            New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add( _\n            New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n\n        &#39; Populate the table with sample values.\n        Dim i As Integer\n        For i = 0 To 8\n            Dim dr As DataRow = dt.NewRow()\n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; randNum.Next(1, 15).ToString()\n            dr(2) = 1.23 * randNum.Next(1, 15)\n            dt.Rows.Add(dr)\n        Next\n\n        &#39; Persist the data source between posts to \n        &#39; the server, in the session state.  \n        Session(&quot;Source&quot;) = dt\n\n        Dim dv As DataView = New DataView(dt)\n        Return dv\n    End Function\n\n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Load sample data when the page is first loaded.\n        If Not IsPostBack Then\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub\n\n    Sub Sort_Grid(ByVal sender As Object, _\n        ByVal e As DataGridSortCommandEventArgs)\n\n        &#39; Retrieve the data source from session state.\n        Dim dt As DataTable = _\n            CType(Session(&quot;Source&quot;), DataTable)\n\n        &#39; Create a DataView from the DataTable.\n        Dim dv As DataView = New DataView(dt)\n\n        &#39; The DataView provides an easy way to \n        &#39; sort. Simply set the Sort property with \n        &#39; the name of the field to sort by.\n        dv.Sort = e.SortExpression\n\n        &#39; Rebind the data source and specify that \n        &#39; it should be sorted by the field specified \n        &#39; in the SortExpression property.\n        ItemsGrid.DataSource = dv\n        ItemsGrid.DataBind()\n    End Sub\n\n    Sub Check_Change(ByVal sender As Object, _\n        ByVal e As EventArgs)\n        &#39; Allow or prevent sorting depending \n        &#39; on the user&#39;s selection.\n        ItemsGrid.AllowSorting = _\n            AllowSortingCheckBox.Checked\n\n        &#39; After changing the property, rebind \n        &#39; the data to refresh the DataGrid control.\n\n        &#39; Retrieve data source from session state.\n        Dim dt As DataTable = _\n            CType(Session(&quot;Source&quot;), DataTable)\n\n        &#39; Create a DataView from the DataTable.\n        Dim dv As DataView = New DataView(dt)\n\n        &#39; Rebind the data source.\n        ItemsGrid.DataSource = dv\n        ItemsGrid.DataBind()\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n        ExtractTemplateRows Example\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;h3&gt;DataGrid AllowSorting Example&lt;/h3&gt;\n\n      &lt;p&gt;Select whether to allow sorting in the DataGrid control.&lt;br /&gt;\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;&lt;/p&gt;\n      &lt;hr /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnSortCommand=&quot;Sort_Grid&quot;\n           UseAccessibleHeader=&quot;true&quot; \n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot; /&gt;\n         &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n            &lt;/asp:BoundColumn&gt;\n         &lt;/Columns&gt; \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/div&gt;\n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridSortCommand#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n      \n         // Create a Random object to mix up the order of items in the sample data.\n         Random Rand_Num = new Random();\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=8; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + Rand_Num.Next(1, 15).ToString();\n            dr[2] = 1.23 * Rand_Num.Next(1, 15);\n \n            dt.Rows.Add(dr);\n         \n         }\n\n         // To persist the data source between posts to the server, store it\n         // in session state.  \n         Session[&quot;Source&quot;] = dt;\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n         // Manually register the event-handling method for the PageIndexChanged  \n         // event of the DataGrid control.\n         ItemsGrid.SortCommand += new DataGridSortCommandEventHandler(this.Sort_Grid);\n\n      }\n\n      void Sort_Grid(Object sender, DataGridSortCommandEventArgs e)\n      { \n\n         // Retrieve the data source from session state.\n         DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n         // Create a DataView from the DataTable.\n         DataView dv = new DataView(dt);\n\n         // The DataView provides an easy way to sort. Simply set the Sort property with\n         // the name of the field to sort by.\n         dv.Sort = e.SortExpression;\n\n         // Re-bind the data source and specify that it should be sorted\n         // by the field specified in the SortExpression property.\n         ItemsGrid.DataSource = dv;\n         ItemsGrid.DataBind();\n\n      }\n\n      void Check_Change(Object sender, EventArgs e)\n      {\n   \n         // Allow or prevent sorting depending on the user&#39;s selection.\n         if (AllowSortingCheckBox.Checked)\n         {\n\n            ItemsGrid.AllowSorting = true;\n\n         }\n         else\n         {\n\n            ItemsGrid.AllowSorting = false;\n\n         }\n\n         // After changing the property, re-bind the data to\n         // refresh the DataGrid control.\n\n         // Retrieve the data source from session state.\n         DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n         // Create a DataView from the DataTable.\n         DataView dv = new DataView(dt);\n\n         // Re-bind the data source.\n         ItemsGrid.DataSource = dv;\n         ItemsGrid.DataBind();\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid SortCommand Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid SortCommand Example&lt;/h3&gt;\n\n      Select whether to allow sorting in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridSortCommand#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create a Random object to mix up the order of items in the sample data.\n         Dim Rand_Num As Random = New Random()\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; Rand_Num.Next(1, 15).ToString()\n            dr(2) = 1.23 * Rand_Num.Next(1, 15)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n\n         &#39; To persist the data source between posts to the server, store it\n         &#39; in session state.  \n         Session(&quot;Source&quot;) = dt\n \n         Dim dv As DataView = New DataView(dt)\n\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n         &#39; Manually register the event-handling method for the PageIndexChanged  \n         &#39; event of the DataGrid control.\n         AddHandler ItemsGrid.SortCommand, AddressOf Sort_Grid\n\n      End Sub\n\n      Sub Sort_Grid(sender As Object, e As DataGridSortCommandEventArgs) \n\n         &#39; Retrieve the data source from session state.\n         Dim dt As DataTable = CType(Session(&quot;Source&quot;), DataTable)\n\n         &#39; Create a DataView from the DataTable.\n         Dim dv As DataView = New DataView(dt)\n\n         &#39; The DataView provides an easy way to sort. Simply set the Sort property with\n         &#39; the name of the field to sort by.\n         dv.Sort = e.SortExpression\n\n         &#39; Re-bind the data source and specify that it should be sorted\n         &#39; by the field specified in the SortExpression property.\n         ItemsGrid.DataSource = dv\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub Check_Change(sender As Object, e As EventArgs)\n   \n         &#39; Allow or prevent sorting depending on the user&#39;s selection.\n         If AllowSortingCheckBox.Checked Then\n\n            ItemsGrid.AllowSorting = True\n\n         Else\n\n            ItemsGrid.AllowSorting = False\n\n         End If\n\n         &#39; After changing the property, re-bind the data to\n         &#39; refresh the DataGrid control.\n\n         &#39; Retrieve the data source from session state.\n         Dim dt As DataTable = CType(Session(&quot;Source&quot;), DataTable)\n\n         &#39; Create a DataView from the DataTable.\n         Dim dv As DataView = New DataView(dt)\n\n         &#39; Re-bind the data source.\n         ItemsGrid.DataSource = dv\n         ItemsGrid.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid SortCommand Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid SortCommand Example&lt;/h3&gt;\n\n      Select whether to allow sorting in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_OnUpdateCommand_System_Web_UI_WebControls_DataGridCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_OnUpdateCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnUpdateCommand(DataGridCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnUpdateCommand (System.Web.UI.WebControls.DataGridCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcommandeventargs\" data-linktype=\"relative-path\">DataGridCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnUpdateCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event is raised when the Update button for an item is clicked.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event updates the data, sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to -1 (to deselect the item), and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  </p>\n</div>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.  </p>\n<p> The OnUpdateCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event to update the values of an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to new values specified by the user.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_PrepareControlHierarchy\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_PrepareControlHierarchy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrepareControlHierarchy()</div>        \r\n          </div>\r\n    \r\n            <p>Sets up the control hierarchy for this <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void PrepareControlHierarchy ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PrepareControlHierarchy method is a helper method called by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to set up the control hierarchy in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control before the control is rendered.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_SaveViewState\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_SaveViewState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SaveViewState()</div>        \r\n          </div>\r\n    \r\n            <p>Saves the current state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override object SaveViewState ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The saved state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_TrackViewState\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataGrid_TrackViewState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrackViewState()</div>        \r\n          </div>\r\n    \r\n            <p>Marks the starting point to begin tracking and saving changes to the control as part of the control view state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void TrackViewState ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_CancelCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <code>Cancel</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridCommandEventHandler CancelCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CancelCommand event is raised when the <code>Cancel</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> A typical handler for the CancelCommand event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item) and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the CancelCommand event to cancel edits made to an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_DeleteCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the Delete button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridCommandEventHandler DeleteCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DeleteCommand event is raised when the Delete button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> A typical handler for the DeleteCommand event removes the selected item from the data source and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the DeleteCommand event to delete an item from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_EditCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the Edit button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridCommandEventHandler EditCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EditCommand event is raised when the Edit button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> A typical handler for the EditCommand event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to the selected row and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the EditCommand event to edit an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_ItemCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when any button is clicked in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridCommandEventHandler ItemCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ItemCommand event is raised when any button is clicked in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This event is commonly used to handle buttons controls with a custom CommandName value, such as Add, in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the ItemCommand event to add or remove an item from a shopping cart.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_ItemCreated\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemCreated</div>        \r\n          </div>\r\n    \r\n            <p>Occurs on the server when an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridItemEventHandler ItemCreated;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ItemCreated event is raised when an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control is created, both during round-trips and at the time data is bound to the control.  </p>\n<p> The ItemCreated event is commonly used to control the content and appearance of a row in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the ItemCreated event to display the order that items are created in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataGrid.ItemCreated Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n   DataTable Cart;\n   DataView CartView;\n \n   ICollection CreateDataSource() \n   {\n      DataTable dt = new DataTable();\n      DataRow dr;\n \n      dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n      dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n      dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n      for (int i = 0; i &lt; 10; i++) \n      {\n         dr = dt.NewRow();\n \n         dr[0] = i;\n         dr[1] = &quot;Item &quot; + i.ToString();\n         dr[2] = 1.23 * (i+1);\n \n         dt.Rows.Add(dr);\n      }\n \n      DataView dv = new DataView(dt);\n      return dv;\n   }\n \n   void Page_Load(Object sender, EventArgs e) \n   {\n \n      if (!IsPostBack) \n      {\n         // Need to load this data only once.\n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      }\n \n   }\n \n   void Item_Created(Object sender, DataGridItemEventArgs e) \n   {\n \n      Label1.Text = Label1.Text + &quot; &quot; + e.Item.ItemIndex;\n \n   }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           Text=&quot;Order of items created: &quot; \n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label2&quot; \n           Text=&quot;Note: The -1&#39;s refer to the header and footer.&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataGrid.ItemCreated Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As DataTable\n    Dim CartView As DataView\n    \n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 9\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            &#39; Need to load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n     \n\n    Sub Item_Created(sender As Object, e As DataGridItemEventArgs)\n        \n        Label1.Text = Label1.Text &amp; &quot; &quot; &amp; e.Item.ItemIndex\n    End Sub &#39;Item_Created \n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           Text=&quot;Order of items created: &quot; \n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label2&quot; \n           Text=&quot;Note: The -1&#39;s refer to the header and footer.&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemCreated#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow \n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer         \n\n         For i=0 To 10 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Item_Created(sender As Object, e As DataGridItemEventArgs) \n \n         &#39; Customize the footer section with an image.\n         If e.Item.ItemType = ListItemType.Footer Then         \n \n           &#39; Create an Image control.\n           Dim NewImageControl As System.Web.UI.WebControls.Image = New System.Web.UI.WebControls.Image()\n\n           &#39; Set the properties of the Image control.\n           NewImageControl.ImageUrl = &quot;Image1.jpg&quot;\n           NewImageControl.AlternateText = &quot;Image 1&quot;\n           \n           &#39; Add the Image control to the Controls collection of the \n           &#39; cell representing the third column in the DataGrid.\n           e.Item.Cells(2).Controls.Add(NewImageControl)\n\n         End If         \n \n      End Sub\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemCreated=&quot;Item_Created&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemCreated#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=10; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n \n      void Item_Created(Object sender, DataGridItemEventArgs e) \n      {\n \n         // Customize the footer section with an image.\n         if(e.Item.ItemType == ListItemType.Footer)\n         {         \n \n           // Create an Image control.\n           System.Web.UI.WebControls.Image NewImageControl = new System.Web.UI.WebControls.Image();\n\n           // Set the properties of the Image control.\n           NewImageControl.ImageUrl = &quot;Image1.jpg&quot;; \n           NewImageControl.AlternateText = &quot;Image 1&quot;;\n           \n           // Add the Image control to the Controls collection of the \n           // cell representing the third column in the DataGrid.\n           e.Item.Cells[2].Controls.Add(NewImageControl);\n\n         }         \n \n      }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemCreated=&quot;Item_Created&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemCreated2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=10; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Manually register the event-handling method for the ItemCreated  \n         // event of the DataGrid control.\n         ItemsGrid.ItemCreated += \n             new DataGridItemEventHandler(this.Item_Created);\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n \n      void Item_Created(Object sender, DataGridItemEventArgs e) \n      {\n \n         // Customize the footer section with an image.\n         if(e.Item.ItemType == ListItemType.Footer)\n         {         \n \n           // Create an Image control.\n           System.Web.UI.WebControls.Image NewImageControl = new System.Web.UI.WebControls.Image();\n\n           // Set the properties of the Image control.\n           NewImageControl.ImageUrl = &quot;Image1.jpg&quot;; \n           NewImageControl.AlternateText = &quot;Image 1&quot;;\n\n           // Add the Image control to the Controls collection of the \n           // cell representing the third column in the DataGrid.\n           e.Item.Cells[2].Controls.Add(NewImageControl);\n\n         }         \n \n      }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemCreated2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow \n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer         \n\n         For i=0 To 10 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n\n         &#39; Manually register the event-handling method for the ItemCreated  \n         &#39; event of the DataGrid control.\n         AddHandler ItemsGrid.ItemCreated, AddressOf Item_Created\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Item_Created(sender As Object, e As DataGridItemEventArgs) \n \n         &#39; Customize the footer section with an image.\n         If e.Item.ItemType = ListItemType.Footer Then         \n \n           &#39; Create an Image control.\n           Dim NewImageControl As System.Web.UI.WebControls.Image = New System.Web.UI.WebControls.Image()\n\n           &#39; Set the properties of the Image control.\n           NewImageControl.ImageUrl = &quot;Image1.jpg&quot;\n           NewImageControl.AlternateText = &quot;Image 1&quot;\n\n           &#39; Add the Image control to the Controls collection of the \n           &#39; cell representing the third column in the DataGrid.\n           e.Item.Cells(2).Controls.Add(NewImageControl)\n\n         End If         \n \n      End Sub\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_ItemDataBound\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemDataBound</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after an item is data bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridItemEventHandler ItemDataBound;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ItemDataBound event is raised after an item is data bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This event provides you with the last opportunity to access the data item before it is displayed on the client. After this event is raised, the data item is nulled out and no longer available.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the ItemDataBound event to display the order that items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> are data bounded.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic DataGrid.ItemDataBound Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As DataTable\n    Dim CartView As DataView\n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 9\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            &#39; Need to load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n     \n\n    Sub Item_Bound(sender As Object, e As DataGridItemEventArgs)\n        \n        Label1.Text = Label1.Text &amp; &quot; &quot; &amp; e.Item.ItemIndex\n    End Sub &#39;Item_Bound \n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           Text=&quot;Order of items data bound: &quot; \n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label2&quot; \n           Text=&quot;Note: The -1&#39;s refer to the header and footer.&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataGrid.ItemDataBound Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n   DataTable Cart;\n   DataView CartView;\n \n   ICollection CreateDataSource() \n   {\n      DataTable dt = new DataTable();\n      DataRow dr;\n \n      dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n      dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n      dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n      for (int i = 0; i &lt; 10; i++) \n      {\n         dr = dt.NewRow();\n \n         dr[0] = i;\n         dr[1] = &quot;Item &quot; + i.ToString();\n         dr[2] = 1.23 * (i+1);\n \n         dt.Rows.Add(dr);\n      }\n \n      DataView dv = new DataView(dt);\n      return dv;\n   }\n \n   void Page_Load(Object sender, EventArgs e) \n   {\n \n      if (!IsPostBack) \n      {\n         // Need to load this data only once.\n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      }\n \n   }\n \n   void Item_Bound(Object sender, DataGridItemEventArgs e) \n   {\n \n      Label1.Text = Label1.Text + &quot; &quot; + e.Item.ItemIndex;\n \n   }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           AutoGenerateColumns=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n \n      &lt;br /&gt;\n \n      &lt;asp:Label id=&quot;Label1&quot; \n           Text=&quot;Order of items data bound: &quot; \n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label2&quot; \n           Text=&quot;Note: The -1&#39;s refer to the header and footer.&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemDataBound#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; Debug=&quot;true&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=10; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n \n      void Item_Bound(Object sender, DataGridItemEventArgs e) \n      {\n \n         // Use the ItemDataBound event to customize the DataGrid control. \n         // The ItemDataBound event allows you to access the data before \n         // the item is displayed in the control. In this example, the \n         // ItemDataBound event is used to format the items in the \n         // CurrencyColumn in currency format.\n         if((e.Item.ItemType == ListItemType.Item) || \n             (e.Item.ItemType == ListItemType.AlternatingItem))\n         {\n \n            // Retrieve the text of the CurrencyColumn from the DataGridItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(e.Item.Cells[2].Text);\n\n            // Format the value as currency and redisplay it in the DataGrid.\n            e.Item.Cells[2].Text = Price.ToString(&quot;c&quot;);\n        \n         }         \n \n      }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemDataBound#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow \n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer         \n\n         For i=0 To 10 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Item_Bound(sender As Object, e As DataGridItemEventArgs) \n \n         &#39; Use the ItemDataBound event to customize the DataGrid control. \n         &#39; The ItemDataBound event allows you to access the data before \n         &#39; the item is displayed in the control. In this example, the \n         &#39; ItemDataBound event is used to format the items in the \n         &#39; CurrencyColumn in currency format.\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n \n            &#39; Retrieve the text of the CurrencyColumn from the DataGridItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble(e.Item.Cells(2).Text)\n\n            &#39; Format the value as currency and redisplay it in the DataGrid.\n            e.Item.Cells(2).Text = Price.ToString(&quot;c&quot;)\n        \n         End If         \n \n      End Sub\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridItemDataBound2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow \n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer         \n\n         For i=0 To 10 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n\n         &#39; Manually register the event-handling method for the  \n         &#39; ItemDataBound event of the DataGrid control.\n         AddHandler ItemsGrid.ItemDataBound, AddressOf Item_Bound\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Item_Bound(sender As Object, e As DataGridItemEventArgs) \n \n         &#39; Use the ItemDataBound event to customize the DataGrid control. \n         &#39; The ItemDataBound event allows you to access the data before \n         &#39; the item is displayed in the control. In this example, the \n         &#39; ItemDataBound event is used to format the items in the \n         &#39; CurrencyColumn in currency format.\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n \n            &#39; Retrieve the text of the CurrencyColumn from the DataGridItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble(e.Item.Cells(2).Text)\n\n            &#39; Format the value as currency and redisplay it in the DataGrid.\n            e.Item.Cells(2).Text = Price.ToString(&quot;c&quot;)\n        \n         End If         \n \n      End Sub\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridItemDataBound2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=10; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Manually register the event-handling method for the  \n         // ItemDataBound event of the DataGrid control.\n         ItemsGrid.ItemDataBound += \n             new DataGridItemEventHandler(this.Item_Bound);\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n      }\n \n      void Item_Bound(Object sender, DataGridItemEventArgs e) \n      {\n \n         // Use the ItemDataBound event to customize the DataGrid control. \n         // The ItemDataBound event allows you to access the data before \n         // the item is displayed in the control. In this example, the \n         // ItemDataBound event is used to format the items in the \n         // CurrencyColumn in currency format.\n         if((e.Item.ItemType == ListItemType.Item) ||\n             (e.Item.ItemType == ListItemType.AlternatingItem))\n         {\n \n            // Retrieve the text of the CurrencyColumn from the DataGridItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(e.Item.Cells[2].Text);\n\n            // Format the value as currency and redisplay it in the DataGrid.\n            e.Item.Cells[2].Text = Price.ToString(&quot;c&quot;);\n        \n         }         \n \n      }\n \n&lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           ShowFooter=&quot;true&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/FooterStyle&gt;\n   \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_PageIndexChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PageIndexChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when one of the page selection elements is clicked.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridPageChangedEventHandler PageIndexChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PageIndexChanged event is raised when one of the page selection elements is clicked.  </p>\n<p> A typical handler for the PageIndexChanged event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_CurrentPageIndex_\" data-linktype=\"relative-path\">CurrentPageIndex</a> property to the index of the page you want to display and then uses the <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataBind_\" data-linktype=\"relative-path\">DataBind</a> method to bind the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the PageIndexChanged event. It displays pages on the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control in 10-item increments.  </p>\n<pre><code class=\"lang-vb\" name=\"DataGridAllowPaging#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        &#39; Create sample data for the DataGrid control.\n        Dim dt As DataTable = New DataTable()\n        Dim dr As DataRow\n \n        &#39; Define the columns of the table.\n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n        &#39; Populate the table with sample values.\n        Dim i As Integer\n        For i = 0 To 100\n            dr = dt.NewRow()\n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dt.Rows.Add(dr)\n        Next i\n \n        Dim dv As DataView = New DataView(dt)\n        Return dv\n    End Function\n \n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Load sample data only once, when the page is first loaded.\n        If Not IsPostBack Then\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub\n\n    Sub Check_Change(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Allow or prevent paging depending on the user&#39;s selection.\n        ItemsGrid.AllowPaging = AllowPagingCheckBox.Checked()\n\n        &#39; Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub\n\n    Sub Grid_Change(ByVal sender As Object, ByVal e As DataGridPageChangedEventArgs)\n        &#39; For the DataGrid control to navigate to the correct page when\n        &#39; paging is allowed, the CurrentPageIndex property must be updated\n        &#39; programmatically. This process is usually accomplished in the\n        &#39; event-handling method for the PageIndexChanged event.\n\n        &#39; Set CurrentPageIndex to the page the user clicked.\n        ItemsGrid.CurrentPageIndex = e.NewPageIndex\n\n        &#39; Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource()\n        ItemsGrid.DataBind()\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head2&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n\n    &lt;h3&gt;DataGrid AllowPaging Example&lt;/h3&gt;\n\n    &lt;p&gt;Select whether to allow paging in the DataGrid control.&lt;br /&gt;\n       &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n            Text=&quot;Allow paging&quot;\n            AutoPostBack=&quot;True&quot;\n            Checked=&quot;True&quot;\n            OnCheckedChanged=&quot;Check_Change&quot;\n            runat=&quot;server&quot; /&gt;\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n        AssociatedControlID=&quot;ItemsGrid&quot; \n        Font-Bold=&quot;true&quot;&gt;Product List&lt;/asp:Label&gt;\n    &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;Gray&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        UseAccessibleHeader=&quot;true&quot;\n        AutoGenerateColumns=&quot;False&quot;\n        PageSize=&quot;10&quot;\n        AllowPaging=&quot;True&quot;\n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 ItemStyle-HorizontalAlign=&quot;center&quot;\n                 HeaderText=&quot;Item&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                HeaderText=&quot;Description&quot; \n                ItemStyle-HorizontalAlign=&quot;left&quot;\n                SortExpression=&quot;StringValue&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot; /&gt;\n\n        &lt;/Columns&gt;\n        &lt;ItemStyle HorizontalAlign=&quot;Right&quot; /&gt;\n    &lt;/asp:DataGrid&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridAllowPaging#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    private ICollection CreateDataSource()\n    {\n        // Create sample data for the DataGrid control.\n        DataTable dt = new DataTable();\n        DataRow dr;\n\n        // Define the columns of the table.\n        dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n        dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n        dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n\n        // Populate the table with sample values.\n        for (int i = 0; i &lt;= 100; i++) \n        {\n            dr = dt.NewRow();\n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n\n            dt.Rows.Add(dr);\n        }\n        DataView dv = new DataView(dt);\n        return dv;\n    }\n\n    private void Page_Load(Object sender, EventArgs e)\n    { \n        // Load sample data only once, when the page is first loaded.\n        if (!IsPostBack)\n        { \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n        }\n    }\n\n    private void Check_Change(Object sender, EventArgs e)\n    {\n        // Allow or prevent paging depending \n        // on the user&#39;s selection.\n        ItemsGrid.AllowPaging = AllowPagingCheckBox.Checked;\n\n        // Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource();\n        ItemsGrid.DataBind();\n    }\n\n    private void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n    {\n        // For the DataGrid control to navigate to the correct page when\n        // paging is allowed, the CurrentPageIndex property must be updated\n        // programmatically. This process is usually accomplished in the\n        // event-handling method for the PageIndexChanged event.\n\n        // Set CurrentPageIndex to the page the user clicked.\n        ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n        // Rebind the data to refresh the DataGrid control. \n        ItemsGrid.DataSource = CreateDataSource();\n        ItemsGrid.DataBind();\n    }\n&lt;/script&gt;\n \n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid AllowPaging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n \n    &lt;h3&gt;DataGrid AllowPaging Example&lt;/h3&gt;\n\n    &lt;p&gt;Select whether to allow paging in the DataGrid control.&lt;br /&gt;\n       &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n            Text=&quot;Allow paging&quot;\n            AutoPostBack=&quot;True&quot;\n            Checked=&quot;True&quot;\n            OnCheckedChanged=&quot;Check_Change&quot;\n            runat=&quot;server&quot; /&gt;\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;asp:Label runat=&quot;server&quot; \n        AssociatedControlID=&quot;ItemsGrid&quot; \n        Font-Bold=&quot;true&quot;&gt;Product List&lt;/asp:Label&gt;\n    &lt;asp:DataGrid id=&quot;ItemsGrid&quot; runat=&quot;server&quot;\n        BorderColor=&quot;Gray&quot;\n        BorderWidth=&quot;1&quot;\n        CellPadding=&quot;3&quot;\n        AutoGenerateColumns=&quot;False&quot;\n        UseAccessibleHeader=&quot;true&quot;\n        PageSize=&quot;10&quot;\n        AllowPaging=&quot;True&quot;\n        OnPageIndexChanged=&quot;Grid_Change&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 ItemStyle-HorizontalAlign=&quot;center&quot;\n                 HeaderText=&quot;Item&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot; \n                HeaderText=&quot;Description&quot; \n                ItemStyle-HorizontalAlign=&quot;left&quot;\n                SortExpression=&quot;StringValue&quot; /&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot; /&gt;\n\n        &lt;/Columns&gt;\n        &lt;ItemStyle HorizontalAlign=&quot;Right&quot; /&gt;\n    &lt;/asp:DataGrid&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"PageIndexChanged#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=100; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         \n         }\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n         // Manually register the event-handling method for the PageIndexChanged  \n         // event of the DataGrid control.\n         ItemsGrid.PageIndexChanged += new DataGridPageChangedEventHandler(this.Grid_Change);\n\n      }\n\n      void Check_Change(Object sender, EventArgs e)\n      {\n   \n         // Allow or prevent paging depending on the user&#39;s selection.\n         if (AllowPagingCheckBox.Checked)\n         {\n\n            ItemsGrid.AllowPaging = true;\n\n         }\n         else\n         {\n\n            ItemsGrid.AllowPaging = false;\n\n         }\n\n         // Re-bind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n\n      }\n\n      void Grid_Change(Object sender, DataGridPageChangedEventArgs e) \n      {\n \n         // For the DataGrid control to navigate to the correct page when paging is\n         // allowed, the CurrentPageIndex property must be programmatically updated.\n         // This process is usually accomplished in the event-handling method for the\n         // PageIndexChanged event.\n\n         // Set CurrentPageIndex to the page the user clicked.\n         ItemsGrid.CurrentPageIndex = e.NewPageIndex;\n\n         // Re-bind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n      \n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid PageIndexChanged Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid PageIndexChanged Example&lt;/h3&gt;\n\n      Select whether to allow paging in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           PageSize=&quot;10&quot;\n           AllowPaging=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n                    Text=&quot;Allow paging&quot;\n                    AutoPostBack=&quot;True&quot;\n                    Checked=&quot;True&quot;\n                    OnCheckedChanged=&quot;Check_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n\n            &lt;/td&gt;\n            \n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"PageIndexChanged#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i=0 To 100\n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs)\n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n         &#39; Manually register the event-handling method for the PageIndexChanged  \n         &#39; event of the DataGrid control.\n         AddHandler ItemsGrid.PageIndexChanged, AddressOf Grid_Change\n\n      End Sub\n\n      Sub Check_Change(sender As Object, e As EventArgs)\n   \n         &#39; Allow or prevent paging depending on the user&#39;s selection.\n         If AllowPagingCheckBox.Checked Then\n\n            ItemsGrid.AllowPaging = True\n\n         Else\n\n            ItemsGrid.AllowPaging = False\n\n         End If\n\n         &#39; Re-bind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub Grid_Change(sender As Object, e As DataGridPageChangedEventArgs) \n \n         &#39; For the DataGrid control to navigate to the correct page when paging is\n         &#39; allowed, the CurrentPageIndex property must be programmatically updated.\n         &#39; This process is usually accomplished in the event-handling method for the\n         &#39; PageIndexChanged event.\n\n         &#39; Set CurrentPageIndex to the page the user clicked.\n         ItemsGrid.CurrentPageIndex = e.NewPageIndex\n\n         &#39; Re-bind the data to refresh the DataGrid control. \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n      \n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid PageIndexChanged Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid PageIndexChanged Example&lt;/h3&gt;\n\n      Select whether to allow paging in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           PageSize=&quot;10&quot;\n           AllowPaging=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;AllowPagingCheckBox&quot;\n                    Text=&quot;Allow paging&quot;\n                    AutoPostBack=&quot;True&quot;\n                    Checked=&quot;True&quot;\n                    OnCheckedChanged=&quot;Check_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n\n            &lt;/td&gt;\n            \n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_SortCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a column is sorted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridSortCommandEventHandler SortCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SortCommand event is raised when a column is sorted.  </p>\n<p> A typical handler for the SortCommand event sorts the list, and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the SortCommand event to sort a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridAllowSorting#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    ICollection CreateDataSource()\n    {\n        // Create a Random object to mix up the \n        // order of items in the sample data.\n        Random randNum = new Random();\n\n        // Create sample data for the DataGrid control.\n        DataTable dt = new DataTable();\n\n        // Define the columns of the table.\n        dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n        dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n        dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n\n        // Populate the table with sample values.\n        for (int i = 0; i &lt;= 8; i++)\n        {\n            DataRow dr = dt.NewRow();\n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + randNum.Next(1, 15).ToString();\n            dr[2] = 1.23 * randNum.Next(1, 15);\n            dt.Rows.Add(dr);\n        }\n\n        // To persist the data source between posts to the server,\n        // store it in session state.  \n        Session[&quot;Source&quot;] = dt;\n        DataView dv = new DataView(dt);\n        return dv;\n    }\n\n    void Page_Load(Object sender, EventArgs e)\n    {\n        // Load sample data only once, when the page is first loaded.\n        if (!IsPostBack)\n        {\n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n        }\n    }\n\n    void Sort_Grid(Object sender, DataGridSortCommandEventArgs e)\n    {\n        // Retrieve the data source from session state.\n        DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n        // Create a DataView from the DataTable.\n        DataView dv = new DataView(dt);\n\n        // The DataView provides an easy way to sort. Simply set the\n        // Sort property with the name of the field to sort by.\n        dv.Sort = e.SortExpression;\n\n        // Rebind the data source and specify that it should be sorted\n        // by the field specified in the SortExpression property.\n        ItemsGrid.DataSource = dv;\n        ItemsGrid.DataBind();\n    }\n\n    void Check_Change(Object sender, EventArgs e)\n    {\n        // Allow or prevent sorting depending on the user&#39;s selection.\n        ItemsGrid.AllowSorting = AllowSortingCheckBox.Checked;\n\n        // After changing the property, rebind the data to\n        // refresh the DataGrid control.\n\n        // Retrieve the data source from session state.\n        DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n        // Create a DataView from the DataTable.\n        DataView dv = new DataView(dt);\n\n        // Rebind the data source.\n        ItemsGrid.DataSource = dv;\n        ItemsGrid.DataBind();\n    }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n        ExtractTemplateRows Example\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;h3&gt;DataGrid AllowSorting Example&lt;/h3&gt;\n\n      &lt;p&gt;Select whether to allow sorting in the DataGrid control.&lt;br /&gt;\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;&lt;/p&gt;\n      &lt;hr /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnSortCommand=&quot;Sort_Grid&quot;\n           UseAccessibleHeader=&quot;true&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot; /&gt;\n         &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n            &lt;/asp:BoundColumn&gt;\n         &lt;/Columns&gt; \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/div&gt;\n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridAllowSorting#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        &#39; Create a Random object to mix up the order \n        &#39; of items in the sample data.\n        Dim randNum As Random = New Random()\n\n        &#39; Create sample data for the DataGrid control.\n        Dim dt As DataTable = New DataTable()\n\n        &#39; Define the columns of the table.\n        dt.Columns.Add( _\n            New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add( _\n            New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add( _\n            New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n\n        &#39; Populate the table with sample values.\n        Dim i As Integer\n        For i = 0 To 8\n            Dim dr As DataRow = dt.NewRow()\n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; randNum.Next(1, 15).ToString()\n            dr(2) = 1.23 * randNum.Next(1, 15)\n            dt.Rows.Add(dr)\n        Next\n\n        &#39; Persist the data source between posts to \n        &#39; the server, in the session state.  \n        Session(&quot;Source&quot;) = dt\n\n        Dim dv As DataView = New DataView(dt)\n        Return dv\n    End Function\n\n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Load sample data when the page is first loaded.\n        If Not IsPostBack Then\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub\n\n    Sub Sort_Grid(ByVal sender As Object, _\n        ByVal e As DataGridSortCommandEventArgs)\n\n        &#39; Retrieve the data source from session state.\n        Dim dt As DataTable = _\n            CType(Session(&quot;Source&quot;), DataTable)\n\n        &#39; Create a DataView from the DataTable.\n        Dim dv As DataView = New DataView(dt)\n\n        &#39; The DataView provides an easy way to \n        &#39; sort. Simply set the Sort property with \n        &#39; the name of the field to sort by.\n        dv.Sort = e.SortExpression\n\n        &#39; Rebind the data source and specify that \n        &#39; it should be sorted by the field specified \n        &#39; in the SortExpression property.\n        ItemsGrid.DataSource = dv\n        ItemsGrid.DataBind()\n    End Sub\n\n    Sub Check_Change(ByVal sender As Object, _\n        ByVal e As EventArgs)\n        &#39; Allow or prevent sorting depending \n        &#39; on the user&#39;s selection.\n        ItemsGrid.AllowSorting = _\n            AllowSortingCheckBox.Checked\n\n        &#39; After changing the property, rebind \n        &#39; the data to refresh the DataGrid control.\n\n        &#39; Retrieve data source from session state.\n        Dim dt As DataTable = _\n            CType(Session(&quot;Source&quot;), DataTable)\n\n        &#39; Create a DataView from the DataTable.\n        Dim dv As DataView = New DataView(dt)\n\n        &#39; Rebind the data source.\n        ItemsGrid.DataSource = dv\n        ItemsGrid.DataBind()\n    End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n        ExtractTemplateRows Example\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;h3&gt;DataGrid AllowSorting Example&lt;/h3&gt;\n\n      &lt;p&gt;Select whether to allow sorting in the DataGrid control.&lt;br /&gt;\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;&lt;/p&gt;\n      &lt;hr /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnSortCommand=&quot;Sort_Grid&quot;\n           UseAccessibleHeader=&quot;true&quot; \n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot; /&gt;\n         &lt;Columns&gt;\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n            &lt;/asp:BoundColumn&gt;\n         &lt;/Columns&gt; \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/div&gt;\n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridSortCommand#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource()\n      {\n      \n         // Create a Random object to mix up the order of items in the sample data.\n         Random Rand_Num = new Random();\n\n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(Double)));\n \n         // Populate the table with sample values.\n         for (int i=0; i&lt;=8; i++) \n         {\n\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + Rand_Num.Next(1, 15).ToString();\n            dr[2] = 1.23 * Rand_Num.Next(1, 15);\n \n            dt.Rows.Add(dr);\n         \n         }\n\n         // To persist the data source between posts to the server, store it\n         // in session state.  \n         Session[&quot;Source&quot;] = dt;\n \n         DataView dv = new DataView(dt);\n\n         return dv;\n      \n      }\n \n      void Page_Load(Object sender, EventArgs e)\n      { \n \n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack)\n         { \n         \n            ItemsGrid.DataSource = CreateDataSource();\n            ItemsGrid.DataBind();\n         \n         }\n\n         // Manually register the event-handling method for the PageIndexChanged  \n         // event of the DataGrid control.\n         ItemsGrid.SortCommand += new DataGridSortCommandEventHandler(this.Sort_Grid);\n\n      }\n\n      void Sort_Grid(Object sender, DataGridSortCommandEventArgs e)\n      { \n\n         // Retrieve the data source from session state.\n         DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n         // Create a DataView from the DataTable.\n         DataView dv = new DataView(dt);\n\n         // The DataView provides an easy way to sort. Simply set the Sort property with\n         // the name of the field to sort by.\n         dv.Sort = e.SortExpression;\n\n         // Re-bind the data source and specify that it should be sorted\n         // by the field specified in the SortExpression property.\n         ItemsGrid.DataSource = dv;\n         ItemsGrid.DataBind();\n\n      }\n\n      void Check_Change(Object sender, EventArgs e)\n      {\n   \n         // Allow or prevent sorting depending on the user&#39;s selection.\n         if (AllowSortingCheckBox.Checked)\n         {\n\n            ItemsGrid.AllowSorting = true;\n\n         }\n         else\n         {\n\n            ItemsGrid.AllowSorting = false;\n\n         }\n\n         // After changing the property, re-bind the data to\n         // refresh the DataGrid control.\n\n         // Retrieve the data source from session state.\n         DataTable dt = (DataTable)Session[&quot;Source&quot;];\n\n         // Create a DataView from the DataTable.\n         DataView dv = new DataView(dt);\n\n         // Re-bind the data source.\n         ItemsGrid.DataSource = dv;\n         ItemsGrid.DataBind();\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid SortCommand Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid SortCommand Example&lt;/h3&gt;\n\n      Select whether to allow sorting in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridSortCommand#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create a Random object to mix up the order of items in the sample data.\n         Dim Rand_Num As Random = New Random()\n\n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; Rand_Num.Next(1, 15).ToString()\n            dr(2) = 1.23 * Rand_Num.Next(1, 15)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n\n         &#39; To persist the data source between posts to the server, store it\n         &#39; in session state.  \n         Session(&quot;Source&quot;) = dt\n \n         Dim dv As DataView = New DataView(dt)\n\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n         \n         End If\n\n         &#39; Manually register the event-handling method for the PageIndexChanged  \n         &#39; event of the DataGrid control.\n         AddHandler ItemsGrid.SortCommand, AddressOf Sort_Grid\n\n      End Sub\n\n      Sub Sort_Grid(sender As Object, e As DataGridSortCommandEventArgs) \n\n         &#39; Retrieve the data source from session state.\n         Dim dt As DataTable = CType(Session(&quot;Source&quot;), DataTable)\n\n         &#39; Create a DataView from the DataTable.\n         Dim dv As DataView = New DataView(dt)\n\n         &#39; The DataView provides an easy way to sort. Simply set the Sort property with\n         &#39; the name of the field to sort by.\n         dv.Sort = e.SortExpression\n\n         &#39; Re-bind the data source and specify that it should be sorted\n         &#39; by the field specified in the SortExpression property.\n         ItemsGrid.DataSource = dv\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub Check_Change(sender As Object, e As EventArgs)\n   \n         &#39; Allow or prevent sorting depending on the user&#39;s selection.\n         If AllowSortingCheckBox.Checked Then\n\n            ItemsGrid.AllowSorting = True\n\n         Else\n\n            ItemsGrid.AllowSorting = False\n\n         End If\n\n         &#39; After changing the property, re-bind the data to\n         &#39; refresh the DataGrid control.\n\n         &#39; Retrieve the data source from session state.\n         Dim dt As DataTable = CType(Session(&quot;Source&quot;), DataTable)\n\n         &#39; Create a DataView from the DataTable.\n         Dim dv As DataView = New DataView(dt)\n\n         &#39; Re-bind the data source.\n         ItemsGrid.DataSource = dv\n         ItemsGrid.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid SortCommand Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid SortCommand Example&lt;/h3&gt;\n\n      Select whether to allow sorting in the DataGrid control.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;False&quot;\n           AllowSorting=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;IntegerValue&quot; \n                 SortExpression=&quot;IntegerValue&quot;\n                 HeaderText=&quot;Item&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;StringValue&quot;\n                 SortExpression=&quot;StringValue&quot; \n                 HeaderText=&quot;Description&quot;/&gt;\n\n            &lt;asp:BoundColumn DataField=&quot;CurrencyValue&quot; \n                 HeaderText=&quot;Price&quot;\n                 SortExpression=&quot;CurrencyValue&quot;\n                 DataFormatString=&quot;{0:c}&quot;&gt;\n\n               &lt;ItemStyle HorizontalAlign=&quot;Right&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt; \n \n      &lt;/asp:DataGrid&gt;\n\n      &lt;hr /&gt;\n\n      &lt;asp:CheckBox id=&quot;AllowSortingCheckBox&quot;\n           Text=&quot;Allow sorting&quot;\n           AutoPostBack=&quot;True&quot;\n           Checked=&quot;True&quot;\n           OnCheckedChanged=&quot;Check_Change&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataGrid_UpdateCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the Update button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataGridCommandEventHandler UpdateCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UpdateCommand event is raised when the Update button for an item is clicked.  </p>\n<p> A typical handler for the UpdateCommand event updates the data, sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item), and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the UpdateCommand event to update the values of an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to new values specified by the user.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. Because \n         // the data source in this example is an in-memory DataTable, retrieve\n         // the data from session state if it exists; otherwise, create the data\n         // source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the page\n         // is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked \n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data. \n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Be sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character from the price before \n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is stored\n         // in session state. If the data source does not exist, create it;\n         //  otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. Because \n         &#39; the data source in this example is an in-memory DataTable, retrieve\n         &#39; the data from session state if it exists; otherwise create the data\n         &#39; source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the page\n         &#39; is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked \n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Be sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode.\n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is stored\n         &#39; in session state. If the data source does not exist, create it;\n         &#39; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound \n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      // The Cart and CartView objects temporarily store the data source\n      // for the DataGrid control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataGrid control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindGrid();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsGrid.EditCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Edit);\n         ItemsGrid.CancelCommand +=  \n             new DataGridCommandEventHandler(this.ItemsGrid_Cancel);\n         ItemsGrid.UpdateCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Update);\n         ItemsGrid.ItemCommand += \n             new DataGridCommandEventHandler(this.ItemsGrid_Command);\n                   \n      }\n \n      void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataGrid control to enable editing for that item. Be sure\n         // to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n      {\n\n         // Retrieve the text boxes that contain the values to update.\n         // For bound columns, the edited value is stored in a TextBox.\n         // The TextBox is the 0th control in a cell&#39;s Controls collection.\n         // Each cell in the Cells collection of a DataGrid item represents\n         // a column in the DataGrid control.\n         TextBox qtyText = (TextBox)e.Item.Cells[3].Controls[0];\n         TextBox priceText = (TextBox)e.Item.Cells[4].Controls[0];\n \n         // Retrieve the updated values.\n         String item = e.Item.Cells[2].Text;\n         String qty = qtyText.Text;\n         String price = priceText.Text;\n        \n         DataRow dr;\n \n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory  \n         // DataTable, delete the old row and replace it with a new one.\n \n         // Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n \n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add the new entry.\n         dr = Cart.NewRow();\n         dr[0] = Convert.ToInt32(qty);\n         dr[1] = item;\n\n         // If necessary, remove the &#39;$&#39; character, from the price before\n         // converting it to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n\n         Cart.Rows.Add(dr);\n \n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DateGrid to the data source to refresh\n         // the control.\n         ItemsGrid.EditItemIndex = -1;\n         BindGrid();\n\n      }\n \n      void BindGrid() \n      {\n\n         // Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView;\n         ItemsGrid.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that is\n         // stored in session state. If the data source does not exist, \n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void ItemsGrid_Command(Object sender, DataGridCommandEventArgs e)\n      {\n\n         switch(((LinkButton)e.CommandSource).CommandName)\n         {\n\n            case &quot;Delete&quot;:\n               DeleteItem(e);\n               break;\n\n            // Add other cases here, if there are multiple ButtonColumns in \n            // the DataGrid control.\n\n            default:\n               // Do nothing.\n               break;\n\n         }\n\n      }\n\n      void DeleteItem(DataGridCommandEventArgs e)\n      {\n\n         // e.Item is the table row where the command is raised. For bound\n         // columns, the value is stored in the Text property of a TableCell.\n         TableCell itemCell = e.Item.Cells[2];\n         string item = itemCell.Text;\n\n         // Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {     \n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Rebind the data source to refresh the DataGrid control.\n         BindGrid();\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           OnEditCommand=&quot;ItemsGrid_Edit&quot;\n           OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n           OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n           OnItemCommand=&quot;ItemsGrid_Command&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView    \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsGrid.EditCommand, AddressOf ItemsGrid_Edit\n         AddHandler ItemsGrid.CancelCommand, AddressOf ItemsGrid_Cancel\n         AddHandler ItemsGrid.UpdateCommand, AddressOf ItemsGrid_Update\n         AddHandler ItemsGrid.ItemCommand, AddressOf ItemsGrid_Command\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataGrid control to enable editing for that item. Be sure\n         &#39; to rebind the DateGrid to the data source to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(4).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(2).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n       \n            CartView.Delete(0)\n         \n         End If \n         CartView.RowFilter = &quot;&quot;\n \n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = Convert.ToInt32(qty)\n         dr(1) = item\n\n         &#39; If necessary, remove the &#39;$&#39; character, from the price before \n         &#39; converting it to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n         \n            dr(2) = Convert.ToDouble(price.Substring(1))\n         \n         Else\n         \n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n\n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that is\n         &#39; stored in session state. If the data source does not exist, \n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub ItemsGrid_Command(sender As Object, e As DataGridCommandEventArgs)\n\n         Select (CType(e.CommandSource, LinkButton)).CommandName\n\n            Case &quot;Delete&quot;\n               DeleteItem(e)\n\n            &#39; Add other cases here, if there are multiple ButtonColumns in \n            &#39; the DataGrid control.\n\n            Case Else\n               &#39; Do nothing.\n\n         End Select\n\n      End Sub\n\n      Sub DeleteItem(e As DataGridCommandEventArgs)\n\n         &#39; e.Item is the table row where the command is raised. For bound\n         &#39; columns, the value is stored in the Text property of a TableCell.\n         Dim itemCell As TableCell = e.Item.Cells(2)\n         Dim item As String = itemCell.Text\n\n         &#39; Remove the selected item from the data source.         \n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item + &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n              \n            CartView.Delete(0)\n\n         End If\n         \n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Rebind the data source to refresh the DataGrid control.\n         BindGrid()\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Editing Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataGrid Editing Example&lt;/h3&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n \n         &lt;Columns&gt;\n\n            &lt;asp:EditCommandColumn\n                 EditText=&quot;Edit&quot;\n                 CancelText=&quot;Cancel&quot;\n                 UpdateText=&quot;Update&quot; \n                 HeaderText=&quot;Edit item&quot;&gt;\n\n               &lt;ItemStyle Wrap=&quot;False&quot;&gt;\n               &lt;/ItemStyle&gt;\n\n               &lt;HeaderStyle Wrap=&quot;False&quot;&gt;\n               &lt;/HeaderStyle&gt;\n\n            &lt;/asp:EditCommandColumn&gt;\n\n            &lt;asp:ButtonColumn \n                 HeaderText=&quot;Delete item&quot; \n                 ButtonType=&quot;LinkButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot;/&gt;  \n \n            &lt;asp:BoundColumn HeaderText=&quot;Item&quot; \n                 ReadOnly=&quot;True&quot; \n                 DataField=&quot;Item&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; \n                 DataField=&quot;Qty&quot;/&gt;\n \n            &lt;asp:BoundColumn HeaderText=&quot;Price&quot;\n                 DataField=&quot;Price&quot;\n                 DataFormatString=&quot;{0:c}&quot;/&gt;\n \n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n\n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.DataGrid.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.DataGrid.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.AllowCustomPaging\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.AllowPaging\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.AllowSorting\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.AlternatingItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.AutoGenerateColumns\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.BackImageUrl\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.CancelCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_CancelCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_CancelCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.CancelCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.Columns\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.CreateColumnSet\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.CreateControlHierarchy\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.CreateControlStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.CreateItem\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.CurrentPageIndex\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.DeleteCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_DeleteCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_DeleteCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.DeleteCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.EditCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_EditCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_EditCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.EditCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.EditItemIndex\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.EditItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.FooterStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.HeaderStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.InitializeItem\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.InitializePager\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.ItemCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_ItemCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_ItemCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.ItemCreated\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_ItemCreated\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_ItemCreated\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.ItemDataBound\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_ItemDataBound\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_ItemDataBound\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.Items\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.ItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.LoadViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.NextPageCommandArgument\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnBubbleEvent\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnCancelCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnDeleteCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnEditCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnItemCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnItemCreated\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnItemDataBound\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnPageIndexChanged\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnSortCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.OnUpdateCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.PageCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.PageCount\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.PageIndexChanged\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_PageIndexChanged\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_PageIndexChanged\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.PagerStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.PageSize\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.PrepareControlHierarchy\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.PrevPageCommandArgument\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.SaveViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.SelectCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.SelectedIndex\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.SelectedItem\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.SelectedItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.ShowFooter\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.ShowHeader\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.SortCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_SortCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_SortCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.SortCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.TagKey\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.TrackViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.UpdateCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.add_UpdateCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.remove_UpdateCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.UpdateCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataGrid.VirtualItemCount\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"f7a960a7-9827-2568-1dc2-97073aea60d2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"A data bound list control that displays the items from data source in a table. The DataGrid control allows you to select, sort, and edit these items.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI.WebControls/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.DataGrid\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.DataGrid.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.DataGrid.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.WebControls.DataGrid","System.Web.UI.WebControls.DataGrid..ctor","System.Web.UI.WebControls.DataGrid.AllowCustomPaging","System.Web.UI.WebControls.DataGrid.AllowPaging","System.Web.UI.WebControls.DataGrid.AllowSorting","System.Web.UI.WebControls.DataGrid.AlternatingItemStyle","System.Web.UI.WebControls.DataGrid.AutoGenerateColumns","System.Web.UI.WebControls.DataGrid.BackImageUrl","System.Web.UI.WebControls.DataGrid.CancelCommand","System.Web.UI.WebControls.DataGrid.add_CancelCommand","System.Web.UI.WebControls.DataGrid.remove_CancelCommand","System.Web.UI.WebControls.DataGrid.CancelCommandName","System.Web.UI.WebControls.DataGrid.Columns","System.Web.UI.WebControls.DataGrid.CreateColumnSet","System.Web.UI.WebControls.DataGrid.CreateControlHierarchy","System.Web.UI.WebControls.DataGrid.CreateControlStyle","System.Web.UI.WebControls.DataGrid.CreateItem","System.Web.UI.WebControls.DataGrid.CurrentPageIndex","System.Web.UI.WebControls.DataGrid.DeleteCommand","System.Web.UI.WebControls.DataGrid.add_DeleteCommand","System.Web.UI.WebControls.DataGrid.remove_DeleteCommand","System.Web.UI.WebControls.DataGrid.DeleteCommandName","System.Web.UI.WebControls.DataGrid.EditCommand","System.Web.UI.WebControls.DataGrid.add_EditCommand","System.Web.UI.WebControls.DataGrid.remove_EditCommand","System.Web.UI.WebControls.DataGrid.EditCommandName","System.Web.UI.WebControls.DataGrid.EditItemIndex","System.Web.UI.WebControls.DataGrid.EditItemStyle","System.Web.UI.WebControls.DataGrid.FooterStyle","System.Web.UI.WebControls.DataGrid.HeaderStyle","System.Web.UI.WebControls.DataGrid.InitializeItem","System.Web.UI.WebControls.DataGrid.InitializePager","System.Web.UI.WebControls.DataGrid.ItemCommand","System.Web.UI.WebControls.DataGrid.add_ItemCommand","System.Web.UI.WebControls.DataGrid.remove_ItemCommand","System.Web.UI.WebControls.DataGrid.ItemCreated","System.Web.UI.WebControls.DataGrid.add_ItemCreated","System.Web.UI.WebControls.DataGrid.remove_ItemCreated","System.Web.UI.WebControls.DataGrid.ItemDataBound","System.Web.UI.WebControls.DataGrid.add_ItemDataBound","System.Web.UI.WebControls.DataGrid.remove_ItemDataBound","System.Web.UI.WebControls.DataGrid.Items","System.Web.UI.WebControls.DataGrid.ItemStyle","System.Web.UI.WebControls.DataGrid.LoadViewState","System.Web.UI.WebControls.DataGrid.NextPageCommandArgument","System.Web.UI.WebControls.DataGrid.OnBubbleEvent","System.Web.UI.WebControls.DataGrid.OnCancelCommand","System.Web.UI.WebControls.DataGrid.OnDeleteCommand","System.Web.UI.WebControls.DataGrid.OnEditCommand","System.Web.UI.WebControls.DataGrid.OnItemCommand","System.Web.UI.WebControls.DataGrid.OnItemCreated","System.Web.UI.WebControls.DataGrid.OnItemDataBound","System.Web.UI.WebControls.DataGrid.OnPageIndexChanged","System.Web.UI.WebControls.DataGrid.OnSortCommand","System.Web.UI.WebControls.DataGrid.OnUpdateCommand","System.Web.UI.WebControls.DataGrid.PageCommandName","System.Web.UI.WebControls.DataGrid.PageCount","System.Web.UI.WebControls.DataGrid.PageIndexChanged","System.Web.UI.WebControls.DataGrid.add_PageIndexChanged","System.Web.UI.WebControls.DataGrid.remove_PageIndexChanged","System.Web.UI.WebControls.DataGrid.PagerStyle","System.Web.UI.WebControls.DataGrid.PageSize","System.Web.UI.WebControls.DataGrid.PrepareControlHierarchy","System.Web.UI.WebControls.DataGrid.PrevPageCommandArgument","System.Web.UI.WebControls.DataGrid.SaveViewState","System.Web.UI.WebControls.DataGrid.SelectCommandName","System.Web.UI.WebControls.DataGrid.SelectedIndex","System.Web.UI.WebControls.DataGrid.SelectedItem","System.Web.UI.WebControls.DataGrid.SelectedItemStyle","System.Web.UI.WebControls.DataGrid.ShowFooter","System.Web.UI.WebControls.DataGrid.ShowHeader","System.Web.UI.WebControls.DataGrid.SortCommand","System.Web.UI.WebControls.DataGrid.add_SortCommand","System.Web.UI.WebControls.DataGrid.remove_SortCommand","System.Web.UI.WebControls.DataGrid.SortCommandName","System.Web.UI.WebControls.DataGrid.TagKey","System.Web.UI.WebControls.DataGrid.TrackViewState","System.Web.UI.WebControls.DataGrid.UpdateCommand","System.Web.UI.WebControls.DataGrid.add_UpdateCommand","System.Web.UI.WebControls.DataGrid.remove_UpdateCommand","System.Web.UI.WebControls.DataGrid.UpdateCommandName","System.Web.UI.WebControls.DataGrid.VirtualItemCount"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.DataGrid","System::Web::UI::WebControls::DataGrid","System.Web.UI.WebControls.DataGrid.#ctor","System::Web::UI::WebControls::DataGrid::#ctor","System.Web.UI.WebControls.DataGrid.AllowCustomPaging","System::Web::UI::WebControls::DataGrid::AllowCustomPaging","System.Web.UI.WebControls.DataGrid.AllowPaging","System::Web::UI::WebControls::DataGrid::AllowPaging","System.Web.UI.WebControls.DataGrid.AllowSorting","System::Web::UI::WebControls::DataGrid::AllowSorting","System.Web.UI.WebControls.DataGrid.AlternatingItemStyle","System::Web::UI::WebControls::DataGrid::AlternatingItemStyle","System.Web.UI.WebControls.DataGrid.AutoGenerateColumns","System::Web::UI::WebControls::DataGrid::AutoGenerateColumns","System.Web.UI.WebControls.DataGrid.BackImageUrl","System::Web::UI::WebControls::DataGrid::BackImageUrl","System.Web.UI.WebControls.DataGrid.CancelCommand","System::Web::UI::WebControls::DataGrid::CancelCommand","System.Web.UI.WebControls.DataGrid.CancelCommandName","System::Web::UI::WebControls::DataGrid::CancelCommandName","System.Web.UI.WebControls.DataGrid.Columns","System::Web::UI::WebControls::DataGrid::Columns","System.Web.UI.WebControls.DataGrid.CreateColumnSet","System::Web::UI::WebControls::DataGrid::CreateColumnSet","System.Web.UI.WebControls.DataGrid.CreateControlHierarchy","System::Web::UI::WebControls::DataGrid::CreateControlHierarchy","System.Web.UI.WebControls.DataGrid.CreateControlStyle","System::Web::UI::WebControls::DataGrid::CreateControlStyle","System.Web.UI.WebControls.DataGrid.CreateItem","System::Web::UI::WebControls::DataGrid::CreateItem","System.Web.UI.WebControls.DataGrid.CurrentPageIndex","System::Web::UI::WebControls::DataGrid::CurrentPageIndex","System.Web.UI.WebControls.DataGrid.DeleteCommand","System::Web::UI::WebControls::DataGrid::DeleteCommand","System.Web.UI.WebControls.DataGrid.DeleteCommandName","System::Web::UI::WebControls::DataGrid::DeleteCommandName","System.Web.UI.WebControls.DataGrid.EditCommand","System::Web::UI::WebControls::DataGrid::EditCommand","System.Web.UI.WebControls.DataGrid.EditCommandName","System::Web::UI::WebControls::DataGrid::EditCommandName","System.Web.UI.WebControls.DataGrid.EditItemIndex","System::Web::UI::WebControls::DataGrid::EditItemIndex","System.Web.UI.WebControls.DataGrid.EditItemStyle","System::Web::UI::WebControls::DataGrid::EditItemStyle","System.Web.UI.WebControls.DataGrid.FooterStyle","System::Web::UI::WebControls::DataGrid::FooterStyle","System.Web.UI.WebControls.DataGrid.HeaderStyle","System::Web::UI::WebControls::DataGrid::HeaderStyle","System.Web.UI.WebControls.DataGrid.InitializeItem","System::Web::UI::WebControls::DataGrid::InitializeItem","System.Web.UI.WebControls.DataGrid.InitializePager","System::Web::UI::WebControls::DataGrid::InitializePager","System.Web.UI.WebControls.DataGrid.ItemCommand","System::Web::UI::WebControls::DataGrid::ItemCommand","System.Web.UI.WebControls.DataGrid.ItemCreated","System::Web::UI::WebControls::DataGrid::ItemCreated","System.Web.UI.WebControls.DataGrid.ItemDataBound","System::Web::UI::WebControls::DataGrid::ItemDataBound","System.Web.UI.WebControls.DataGrid.Items","System::Web::UI::WebControls::DataGrid::Items","System.Web.UI.WebControls.DataGrid.ItemStyle","System::Web::UI::WebControls::DataGrid::ItemStyle","System.Web.UI.WebControls.DataGrid.LoadViewState","System::Web::UI::WebControls::DataGrid::LoadViewState","System.Web.UI.WebControls.DataGrid.NextPageCommandArgument","System::Web::UI::WebControls::DataGrid::NextPageCommandArgument","System.Web.UI.WebControls.DataGrid.OnBubbleEvent","System::Web::UI::WebControls::DataGrid::OnBubbleEvent","System.Web.UI.WebControls.DataGrid.OnCancelCommand","System::Web::UI::WebControls::DataGrid::OnCancelCommand","System.Web.UI.WebControls.DataGrid.OnDeleteCommand","System::Web::UI::WebControls::DataGrid::OnDeleteCommand","System.Web.UI.WebControls.DataGrid.OnEditCommand","System::Web::UI::WebControls::DataGrid::OnEditCommand","System.Web.UI.WebControls.DataGrid.OnItemCommand","System::Web::UI::WebControls::DataGrid::OnItemCommand","System.Web.UI.WebControls.DataGrid.OnItemCreated","System::Web::UI::WebControls::DataGrid::OnItemCreated","System.Web.UI.WebControls.DataGrid.OnItemDataBound","System::Web::UI::WebControls::DataGrid::OnItemDataBound","System.Web.UI.WebControls.DataGrid.OnPageIndexChanged","System::Web::UI::WebControls::DataGrid::OnPageIndexChanged","System.Web.UI.WebControls.DataGrid.OnSortCommand","System::Web::UI::WebControls::DataGrid::OnSortCommand","System.Web.UI.WebControls.DataGrid.OnUpdateCommand","System::Web::UI::WebControls::DataGrid::OnUpdateCommand","System.Web.UI.WebControls.DataGrid.PageCommandName","System::Web::UI::WebControls::DataGrid::PageCommandName","System.Web.UI.WebControls.DataGrid.PageCount","System::Web::UI::WebControls::DataGrid::PageCount","System.Web.UI.WebControls.DataGrid.PageIndexChanged","System::Web::UI::WebControls::DataGrid::PageIndexChanged","System.Web.UI.WebControls.DataGrid.PagerStyle","System::Web::UI::WebControls::DataGrid::PagerStyle","System.Web.UI.WebControls.DataGrid.PageSize","System::Web::UI::WebControls::DataGrid::PageSize","System.Web.UI.WebControls.DataGrid.PrepareControlHierarchy","System::Web::UI::WebControls::DataGrid::PrepareControlHierarchy","System.Web.UI.WebControls.DataGrid.PrevPageCommandArgument","System::Web::UI::WebControls::DataGrid::PrevPageCommandArgument","System.Web.UI.WebControls.DataGrid.SaveViewState","System::Web::UI::WebControls::DataGrid::SaveViewState","System.Web.UI.WebControls.DataGrid.SelectCommandName","System::Web::UI::WebControls::DataGrid::SelectCommandName","System.Web.UI.WebControls.DataGrid.SelectedIndex","System::Web::UI::WebControls::DataGrid::SelectedIndex","System.Web.UI.WebControls.DataGrid.SelectedItem","System::Web::UI::WebControls::DataGrid::SelectedItem","System.Web.UI.WebControls.DataGrid.SelectedItemStyle","System::Web::UI::WebControls::DataGrid::SelectedItemStyle","System.Web.UI.WebControls.DataGrid.ShowFooter","System::Web::UI::WebControls::DataGrid::ShowFooter","System.Web.UI.WebControls.DataGrid.ShowHeader","System::Web::UI::WebControls::DataGrid::ShowHeader","System.Web.UI.WebControls.DataGrid.SortCommand","System::Web::UI::WebControls::DataGrid::SortCommand","System.Web.UI.WebControls.DataGrid.SortCommandName","System::Web::UI::WebControls::DataGrid::SortCommandName","System.Web.UI.WebControls.DataGrid.TagKey","System::Web::UI::WebControls::DataGrid::TagKey","System.Web.UI.WebControls.DataGrid.TrackViewState","System::Web::UI::WebControls::DataGrid::TrackViewState","System.Web.UI.WebControls.DataGrid.UpdateCommand","System::Web::UI::WebControls::DataGrid::UpdateCommand","System.Web.UI.WebControls.DataGrid.UpdateCommandName","System::Web::UI::WebControls::DataGrid::UpdateCommandName","System.Web.UI.WebControls.DataGrid.VirtualItemCount","System::Web::UI::WebControls::DataGrid::VirtualItemCount"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"f7a960a7-9827-2568-1dc2-97073aea60d2","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI.WebControls/DataGrid.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGrid class | Microsoft Docs","_op_ogTitle":"DataGrid class","description":"A data bound list control that displays the items from data source in a table. The DataGrid control allows you to select, sort, and edit these items.\n","toc_asset_id":"_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.DataGrid","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.datagrid","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.datagrid","fileRelativePath":"System.Web.UI.WebControls.DataGrid.html"},"themesRelativePathToOutputRoot":"_themes/"}