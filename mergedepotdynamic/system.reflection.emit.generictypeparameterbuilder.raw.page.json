{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_GenericTypeParameterBuilder\">\r\n      <span class=\"lang-csharp\">GenericTypeParameterBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class GenericTypeParameterBuilder : System.Reflection.TypeInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">System.Reflection.TypeInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">GenericTypeParameterBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_AsType\" data-linktype=\"relative-path\">AsType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredConstructors\" data-linktype=\"relative-path\">DeclaredConstructors</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredEvents\" data-linktype=\"relative-path\">DeclaredEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredFields\" data-linktype=\"relative-path\">DeclaredFields</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredMembers\" data-linktype=\"relative-path\">DeclaredMembers</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredMethods\" data-linktype=\"relative-path\">DeclaredMethods</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredNestedTypes\" data-linktype=\"relative-path\">DeclaredNestedTypes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredProperties\" data-linktype=\"relative-path\">DeclaredProperties</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GenericTypeParameters\" data-linktype=\"relative-path\">GenericTypeParameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredEvent_System_String_\" data-linktype=\"relative-path\">GetDeclaredEvent(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredField_System_String_\" data-linktype=\"relative-path\">GetDeclaredField(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredMethod_System_String_\" data-linktype=\"relative-path\">GetDeclaredMethod(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredMethods_System_String_\" data-linktype=\"relative-path\">GetDeclaredMethods(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredNestedType_System_String_\" data-linktype=\"relative-path\">GetDeclaredNestedType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredProperty_System_String_\" data-linktype=\"relative-path\">GetDeclaredProperty(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_ImplementedInterfaces\" data-linktype=\"relative-path\">ImplementedInterfaces</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_System_Reflection_IReflectableType_GetTypeInfo\" data-linktype=\"relative-path\">IReflectableType.GetTypeInfo()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_DefaultBinder\" data-linktype=\"relative-path\">DefaultBinder</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Delimiter\" data-linktype=\"relative-path\">Delimiter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_EmptyTypes\" data-linktype=\"relative-path\">EmptyTypes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Equals_System_Type_\" data-linktype=\"relative-path\">Equals(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterAttribute\" data-linktype=\"relative-path\">FilterAttribute</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterName\" data-linktype=\"relative-path\">FilterName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterNameIgnoreCase\" data-linktype=\"relative-path\">FilterNameIgnoreCase</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FindInterfaces_System_Reflection_TypeFilter_System_Object_\" data-linktype=\"relative-path\">FindInterfaces(TypeFilter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FindMembers_System_Reflection_MemberTypes_System_Reflection_BindingFlags_System_Reflection_MemberFilter_System_Object_\" data-linktype=\"relative-path\">FindMembers(MemberTypes,BindingFlags,MemberFilter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GenericTypeArguments\" data-linktype=\"relative-path\">GenericTypeArguments</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetArrayRank\" data-linktype=\"relative-path\">GetArrayRank()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetConstructor(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetConstructor(BindingFlags,Binder,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Type___\" data-linktype=\"relative-path\">GetConstructor(Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructors\" data-linktype=\"relative-path\">GetConstructors()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetDefaultMembers\" data-linktype=\"relative-path\">GetDefaultMembers()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumName_System_Object_\" data-linktype=\"relative-path\">GetEnumName(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumNames\" data-linktype=\"relative-path\">GetEnumNames()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumUnderlyingType\" data-linktype=\"relative-path\">GetEnumUnderlyingType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumValues\" data-linktype=\"relative-path\">GetEnumValues()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEvent_System_String_\" data-linktype=\"relative-path\">GetEvent(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetField_System_String_\" data-linktype=\"relative-path\">GetField(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetFields\" data-linktype=\"relative-path\">GetFields()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetGenericParameterConstraints\" data-linktype=\"relative-path\">GetGenericParameterConstraints()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetInterface_System_String_\" data-linktype=\"relative-path\">GetInterface(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMember_System_String_\" data-linktype=\"relative-path\">GetMember(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMember_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetMember(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMembers\" data-linktype=\"relative-path\">GetMembers()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_\" data-linktype=\"relative-path\">GetMethod(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Type___\" data-linktype=\"relative-path\">GetMethod(String,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethods\" data-linktype=\"relative-path\">GetMethods()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_System_String_\" data-linktype=\"relative-path\">GetNestedType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes\" data-linktype=\"relative-path\">GetNestedTypes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperties\" data-linktype=\"relative-path\">GetProperties()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_\" data-linktype=\"relative-path\">GetProperty(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetProperty(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_\" data-linktype=\"relative-path\">GetProperty(String,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_System_Type___\" data-linktype=\"relative-path\">GetProperty(String,Type,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetProperty(String,Type,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type___\" data-linktype=\"relative-path\">GetProperty(String,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_\" data-linktype=\"relative-path\">GetType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeArray_System_Object___\" data-linktype=\"relative-path\">GetTypeArray(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeCode_System_Type_\" data-linktype=\"relative-path\">GetTypeCode(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeCodeImpl\" data-linktype=\"relative-path\">GetTypeCodeImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_String_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromHandle_System_RuntimeTypeHandle_\" data-linktype=\"relative-path\">GetTypeFromHandle(RuntimeTypeHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_\" data-linktype=\"relative-path\">GetTypeFromProgID(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_String_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeHandle_System_Object_\" data-linktype=\"relative-path\">GetTypeHandle(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_HasElementType\" data-linktype=\"relative-path\">HasElementType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___\" data-linktype=\"relative-path\">InvokeMember(String,BindingFlags,Binder,Object,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">InvokeMember(String,BindingFlags,Binder,Object,Object[],CultureInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAbstract\" data-linktype=\"relative-path\">IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAnsiClass\" data-linktype=\"relative-path\">IsAnsiClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsArray\" data-linktype=\"relative-path\">IsArray</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAutoClass\" data-linktype=\"relative-path\">IsAutoClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAutoLayout\" data-linktype=\"relative-path\">IsAutoLayout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsByRef\" data-linktype=\"relative-path\">IsByRef</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsClass\" data-linktype=\"relative-path\">IsClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsCOMObject\" data-linktype=\"relative-path\">IsCOMObject</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsContextful\" data-linktype=\"relative-path\">IsContextful</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsContextfulImpl\" data-linktype=\"relative-path\">IsContextfulImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEnum\" data-linktype=\"relative-path\">IsEnum</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEnumDefined_System_Object_\" data-linktype=\"relative-path\">IsEnumDefined(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEquivalentTo_System_Type_\" data-linktype=\"relative-path\">IsEquivalentTo(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsExplicitLayout\" data-linktype=\"relative-path\">IsExplicitLayout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsImport\" data-linktype=\"relative-path\">IsImport</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsInstanceOfType_System_Object_\" data-linktype=\"relative-path\">IsInstanceOfType(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsInterface\" data-linktype=\"relative-path\">IsInterface</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsLayoutSequential\" data-linktype=\"relative-path\">IsLayoutSequential</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsMarshalByRef\" data-linktype=\"relative-path\">IsMarshalByRef</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsMarshalByRefImpl\" data-linktype=\"relative-path\">IsMarshalByRefImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNested\" data-linktype=\"relative-path\">IsNested</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedAssembly\" data-linktype=\"relative-path\">IsNestedAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamANDAssem\" data-linktype=\"relative-path\">IsNestedFamANDAssem</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamily\" data-linktype=\"relative-path\">IsNestedFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamORAssem\" data-linktype=\"relative-path\">IsNestedFamORAssem</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedPrivate\" data-linktype=\"relative-path\">IsNestedPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedPublic\" data-linktype=\"relative-path\">IsNestedPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNotPublic\" data-linktype=\"relative-path\">IsNotPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPointer\" data-linktype=\"relative-path\">IsPointer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPrimitive\" data-linktype=\"relative-path\">IsPrimitive</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPublic\" data-linktype=\"relative-path\">IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSealed\" data-linktype=\"relative-path\">IsSealed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSecurityCritical\" data-linktype=\"relative-path\">IsSecurityCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSecuritySafeCritical\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSecurityTransparent\" data-linktype=\"relative-path\">IsSecurityTransparent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSerializable\" data-linktype=\"relative-path\">IsSerializable</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSpecialName\" data-linktype=\"relative-path\">IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsUnicodeClass\" data-linktype=\"relative-path\">IsUnicodeClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsValueType\" data-linktype=\"relative-path\">IsValueType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsVisible\" data-linktype=\"relative-path\">IsVisible</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_MemberType\" data-linktype=\"relative-path\">MemberType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Missing\" data-linktype=\"relative-path\">Missing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_op_Equality_System_Type_System_Type_\" data-linktype=\"relative-path\">op_Equality(Type,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_op_Inequality_System_Type_System_Type_\" data-linktype=\"relative-path\">op_Inequality(Type,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_ReflectionOnlyGetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">ReflectionOnlyGetType(String,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_StructLayoutAttribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Type.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Type.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Type.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Type.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_TypeInitializer\" data-linktype=\"relative-path\">TypeInitializer</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>You can get an array of GenericTypeParameterBuilder objects by using the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_DefineGenericParameters_\" data-linktype=\"relative-path\">DefineGenericParameters</a> method to add type parameters to a dynamic method. Use the GenericTypeParameterBuilder objects to add constraints to the type parameters. Constraints are of three kinds:  </p>\n<ul>\n<li><p>The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type. Set this constraint by using the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder#System_Reflection_Emit_GenericTypeParameterBuilder_SetBaseTypeConstraint_\" data-linktype=\"relative-path\">SetBaseTypeConstraint</a> method.  </p>\n</li>\n<li><p>An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface. Set the interface constraints by using the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder#System_Reflection_Emit_GenericTypeParameterBuilder_SetInterfaceConstraints_\" data-linktype=\"relative-path\">SetInterfaceConstraints</a> method.  </p>\n</li>\n<li><p>Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type. Set the special constraints for a type parameter by using the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder#System_Reflection_Emit_GenericTypeParameterBuilder_SetGenericParameterAttributes_\" data-linktype=\"relative-path\">SetGenericParameterAttributes</a> method.  </p>\n<p>Interface constraints and special constraints cannot be retrieved using methods of the GenericTypeParameterBuilder class. Once you have created the generic type that contains the type parameters, you can use its <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object to reflect the constraints. Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method to get the type parameters, and for each type parameter use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericParameterConstraints_\" data-linktype=\"relative-path\">GetGenericParameterConstraints</a> method to get the base type constraint and interface constraints, and the <a class=\"xref\" href=\"system.type#System_Type_GenericParameterAttributes_\" data-linktype=\"relative-path\">GenericParameterAttributes</a> property to get the special constraints.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_Assembly\" data-linktype=\"self-bookmark\">Assembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_AssemblyQualifiedName\" data-linktype=\"self-bookmark\">AssemblyQualifiedName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets <code>null</code> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_BaseType\" data-linktype=\"self-bookmark\">BaseType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the base type constraint of the current generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_ContainsGenericParameters\" data-linktype=\"self-bookmark\">ContainsGenericParameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets <code>true</code> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_DeclaringMethod\" data-linktype=\"self-bookmark\">DeclaringMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the declaring method, if the current <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> represents a type parameter of a generic method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_DeclaringType\" data-linktype=\"self-bookmark\">DeclaringType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the generic type definition or generic method definition to which the generic type parameter belongs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_FullName\" data-linktype=\"self-bookmark\">FullName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets <code>null</code> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GenericParameterAttributes\" data-linktype=\"self-bookmark\">GenericParameterAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a combination of <a class=\"xref\" href=\"system.reflection.genericparameterattributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a> flags that describe the covariance and special constraints of the current generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GenericParameterPosition\" data-linktype=\"self-bookmark\">GenericParameterPosition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GUID\" data-linktype=\"self-bookmark\">GUID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsConstructedGenericType\" data-linktype=\"self-bookmark\">IsConstructedGenericType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether this object represents a constructed generic type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericParameter\" data-linktype=\"self-bookmark\">IsGenericParameter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets <code>true</code> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericType\" data-linktype=\"self-bookmark\">IsGenericType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns <code>false</code> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericTypeDefinition\" data-linktype=\"self-bookmark\">IsGenericTypeDefinition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets <code>false</code> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_Module\" data-linktype=\"self-bookmark\">Module</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dynamic module that contains the generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_Namespace\" data-linktype=\"self-bookmark\">Namespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets <code>null</code> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_ReflectedType\" data-linktype=\"self-bookmark\">ReflectedType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that was used to obtain the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_TypeHandle\" data-linktype=\"self-bookmark\">TypeHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_UnderlyingSystemType\" data-linktype=\"self-bookmark\">UnderlyingSystemType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tests whether the given object is an instance of <code>EventToken</code> and is equal to the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetAttributeFlagsImpl\" data-linktype=\"self-bookmark\">GetAttributeFlagsImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetConstructorImpl_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetConstructors_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetConstructors(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetElementType\" data-linktype=\"self-bookmark\">GetElementType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetEvent_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetEvent(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetEvents\" data-linktype=\"self-bookmark\">GetEvents()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetEvents_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetEvents(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetField_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetField(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetFields_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetFields(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetGenericArguments\" data-linktype=\"self-bookmark\">GetGenericArguments()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not valid for generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetGenericTypeDefinition\" data-linktype=\"self-bookmark\">GetGenericTypeDefinition()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not valid for generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a 32-bit integer hash code for the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetInterface_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetInterface(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetInterfaceMap_System_Type_\" data-linktype=\"self-bookmark\">GetInterfaceMap(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetInterfaces\" data-linktype=\"self-bookmark\">GetInterfaces()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetMember_System_String_System_Reflection_MemberTypes_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMember(String,MemberTypes,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetMembers_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMembers(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetMethods_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMethods(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetNestedType_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetNestedType(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetNestedTypes_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetNestedTypes(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetProperties_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetProperties(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_GetPropertyImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_HasElementTypeImpl\" data-linktype=\"self-bookmark\">HasElementTypeImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Reflection_ParameterModifier___System_Globalization_CultureInfo_System_String___\" data-linktype=\"self-bookmark\">InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsArrayImpl\" data-linktype=\"self-bookmark\">IsArrayImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsAssignableFrom_System_Reflection_TypeInfo_\" data-linktype=\"self-bookmark\">IsAssignableFrom(TypeInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsAssignableFrom_System_Type_\" data-linktype=\"self-bookmark\">IsAssignableFrom(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception in all cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsByRefImpl\" data-linktype=\"self-bookmark\">IsByRefImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsCOMObjectImpl\" data-linktype=\"self-bookmark\">IsCOMObjectImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsPointerImpl\" data-linktype=\"self-bookmark\">IsPointerImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsPrimitiveImpl\" data-linktype=\"self-bookmark\">IsPrimitiveImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsSubclassOf_System_Type_\" data-linktype=\"self-bookmark\">IsSubclassOf(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_IsValueTypeImpl\" data-linktype=\"self-bookmark\">IsValueTypeImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_MakeArrayType\" data-linktype=\"self-bookmark\">MakeArrayType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type of a one-dimensional array whose element type is the generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_MakeArrayType_System_Int32_\" data-linktype=\"self-bookmark\">MakeArrayType(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_MakeByRefType\" data-linktype=\"self-bookmark\">MakeByRefType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current generic type parameter when passed as a reference parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_MakeGenericType_System_Type___\" data-linktype=\"self-bookmark\">MakeGenericType(Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Not valid for incomplete generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_MakePointerType\" data-linktype=\"self-bookmark\">MakePointerType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a pointer to the current generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_SetBaseTypeConstraint_System_Type_\" data-linktype=\"self-bookmark\">SetBaseTypeConstraint(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the base type that a type must inherit in order to be substituted for the type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\" data-linktype=\"self-bookmark\">SetCustomAttribute(CustomAttributeBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Set a custom attribute using a custom attribute builder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\" data-linktype=\"self-bookmark\">SetCustomAttribute(ConstructorInfo,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a custom attribute using a specified custom attribute blob.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_SetGenericParameterAttributes_System_Reflection_GenericParameterAttributes_\" data-linktype=\"self-bookmark\">SetGenericParameterAttributes(GenericParameterAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_SetInterfaceConstraints_System_Type___\" data-linktype=\"self-bookmark\">SetInterfaceConstraints(Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the interfaces a type must implement in order to be substituted for the type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_GenericTypeParameterBuilder_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representation of the current generic type parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Assembly\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Assembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assembly</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Assembly Assembly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_AssemblyQualifiedName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_AssemblyQualifiedName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AssemblyQualifiedName</div>        \r\n          </div>\r\n    \r\n            <p>Gets <code>null</code> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string AssemblyQualifiedName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A null reference (<code>Nothing</code> in Visual Basic) in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_BaseType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_BaseType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the base type constraint of the current generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type BaseType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the base type constraint of the generic type parameter, or <code>null</code> if the type parameter has no base type constraint.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To set the base type constraint, use the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder#System_Reflection_Emit_GenericTypeParameterBuilder_SetBaseTypeConstraint_\" data-linktype=\"relative-path\">SetBaseTypeConstraint</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_ContainsGenericParameters\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_ContainsGenericParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsGenericParameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets <code>true</code> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool ContainsGenericParameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object always represents a generic type parameter. The value of the ContainsGenericParameters property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_DeclaringMethod\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_DeclaringMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the declaring method, if the current <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> represents a type parameter of a generic method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodBase DeclaringMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> that represents the declaring method, if the current <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> represents a type parameter of a generic method; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the DeclaringMethod property is not <code>null</code>, then the declaring method is a generic method definition and <code>DeclaringMethod.IsGenericMethodDefinition</code> is <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_DeclaringType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_DeclaringType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the generic type definition or generic method definition to which the generic type parameter belongs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type DeclaringType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>If the type parameter belongs to a generic type, a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing that generic type; if the type parameter belongs to a generic method, a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing that type that declared that generic method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The declaring type is not necessarily a generic type. If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_FullName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_FullName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullName</div>        \r\n          </div>\r\n    \r\n            <p>Gets <code>null</code> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string FullName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A null reference (<code>Nothing</code> in Visual Basic) in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GenericParameterAttributes\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GenericParameterAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenericParameterAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a combination of <a class=\"xref\" href=\"system.reflection.genericparameterattributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a> flags that describe the covariance and special constraints of the current generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.genericparameterattributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GenericParameterPosition\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GenericParameterPosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenericParameterPosition</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GenericParameterPosition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GUID\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GUID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GUID</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Guid GUID { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsConstructedGenericType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsConstructedGenericType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsConstructedGenericType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether this object represents a constructed generic type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsConstructedGenericType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this object represents a constructed generic type; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericParameter\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsGenericParameter</div>        \r\n          </div>\r\n    \r\n            <p>Gets <code>true</code> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsGenericParameter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsGenericType</div>        \r\n          </div>\r\n    \r\n            <p>Returns <code>false</code> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsGenericType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>false</code> in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericTypeDefinition\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsGenericTypeDefinition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsGenericTypeDefinition</div>        \r\n          </div>\r\n    \r\n            <p>Gets <code>false</code> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsGenericTypeDefinition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>false</code> in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Module\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Module_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Module</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dynamic module that contains the generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module Module { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> object that represents the dynamic module that contains the generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Name\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Namespace\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Namespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespace</div>        \r\n          </div>\r\n    \r\n            <p>Gets <code>null</code> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Namespace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A null reference (<code>Nothing</code> in Visual Basic) in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_ReflectedType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_ReflectedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectedType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that was used to obtain the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type ReflectedType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that was used to obtain the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_TypeHandle\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_TypeHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeHandle</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override RuntimeTypeHandle TypeHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_UnderlyingSystemType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_UnderlyingSystemType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnderlyingSystemType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type UnderlyingSystemType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Tests whether the given object is an instance of <code>EventToken</code> and is equal to the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be compared with the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns <code>true</code> if <code>o</code> is an instance of <code>EventToken</code> and equals the current instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetAttributeFlagsImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetAttributeFlagsImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttributeFlagsImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetConstructorImpl_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetConstructorImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetConstructors_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetConstructors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructors(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies whether to search this member&#39;s inheritance chain to find the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of attribute to search for. Only attributes that are assignable to this type are returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies whether to search this member&#39;s inheritance chain to find the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetElementType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetElementType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementType()</div>        \r\n          </div>\r\n    \r\n            <p>Throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetElementType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The type referred to by the current array type, pointer type, or <code>ByRef</code> type; or <code>null</code> if the current type is not an array type, is not a pointer type, and is not passed by reference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A generic type parameter is a placeholder for a type. Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be. Any return value would be misleading, so the method throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetEvent_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvent(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetEvents\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvents()</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo[] GetEvents ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetEvents_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvents(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetField_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetField(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetFields_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetFields_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFields(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetGenericArguments\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetGenericArguments_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGenericArguments()</div>        \r\n          </div>\r\n    \r\n            <p>Not valid for generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetGenericArguments ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>Not valid for generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetGenericTypeDefinition\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetGenericTypeDefinition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGenericTypeDefinition()</div>        \r\n          </div>\r\n    \r\n            <p>Not valid for generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetGenericTypeDefinition ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Not valid for generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a 32-bit integer hash code for the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetInterface_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetInterface_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterface(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetInterface (string name, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to search without regard for case; <code>false</code> to make a case-sensitive search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetInterfaceMap_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetInterfaceMap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterfaceMap(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>interfaceType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the interface type for which the mapping is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.interfacemapping\" data-linktype=\"relative-path\">InterfaceMapping</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetInterfaces\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetInterfaces_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterfaces()</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetInterfaces ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetMember_System_String_System_Reflection_MemberTypes_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMember(String,MemberTypes,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetMembers_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetMembers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMembers(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetMethodImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetMethods_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethods(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetNestedType_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNestedType(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetNestedTypes_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetNestedTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNestedTypes(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetProperties_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProperties(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetPropertyImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_GetPropertyImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_HasElementTypeImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_HasElementTypeImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasElementTypeImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool HasElementTypeImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Reflection_ParameterModifier___System_Globalization_CultureInfo_System_String___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_InvokeMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namedParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsArrayImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsArrayImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsArrayImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsArrayImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsAssignableFrom_System_Reflection_TypeInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsAssignableFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAssignableFrom(TypeInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">System.Reflection.TypeInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsAssignableFrom_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsAssignableFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAssignableFrom(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception in all cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsAssignableFrom (Type c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsByRefImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsByRefImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsByRefImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsByRefImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsCOMObjectImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsCOMObjectImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCOMObjectImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsCOMObjectImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsPointerImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsPointerImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPointerImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsPointerImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsPrimitiveImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsPrimitiveImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPrimitiveImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsPrimitiveImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsSubclassOf_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsSubclassOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubclassOf(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Not supported for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSubclassOf (Type c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Not supported for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsValueTypeImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_IsValueTypeImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValueTypeImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsValueTypeImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakeArrayType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakeArrayType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeArrayType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type of a one-dimensional array whose element type is the generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeArrayType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of a one-dimensional array whose element type is the generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.type#System_Type_MakeArrayType_\" data-linktype=\"relative-path\">MakeArrayType</a> method provides a way to generate array types for parameter lists.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic module, an abstract generic type named <code>Sample</code> with one type parameter, <code>T</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) of type <code>T</code>, a pointer to type <code>T</code>, and an array of <code>T</code>. This method returns a two-dimensional array of <code>T</code>. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  </p>\n<pre><code class=\"lang-cpp\" name=\"MakeXxxGenericTypeParameterBuilder#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nint main()\n{\n    // Define a dynamic assembly to contain the sample type. The\n    // assembly will not be run, but only saved to disk, so\n    // AssemblyBuilderAccess.Save is specified.\n    //\n    AppDomain^ appDomain = AppDomain::CurrentDomain;\n    AssemblyName^ assemblyName = gcnew\n        AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;);\n    AssemblyBuilder^ assemblyBuilder = appDomain-&gt;DefineDynamicAssembly\n        (assemblyName, AssemblyBuilderAccess::Save);\n\n    // An assembly is made up of executable modules. For a single\n    // module assembly, the module name and file name are the\n    // same as the assembly name.\n    ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule\n        (assemblyName-&gt;Name, assemblyName-&gt;Name + &quot;.dll&quot;);\n\n    // Define the sample type.\n    TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType(&quot;Sample&quot;,\n        TypeAttributes::Public | TypeAttributes::Abstract);\n\n    // Make the sample type a generic type, by defining a type\n    // parameter T. All type parameters are defined at the same\n    // time, by passing an array containing the type parameter\n    // names. \n    array&lt;String^&gt;^ typeParamNames = {&quot;T&quot;};\n    array&lt;GenericTypeParameterBuilder^&gt;^ typeParams =\n        typeBuilder-&gt;DefineGenericParameters(typeParamNames);\n\n    // Define a method that takes a ByRef argument of type T, a\n    // pointer to type T, and one-dimensional array of type T.\n    // The method returns a two-dimensional array of type T.\n    //\n    // To create this method, you need Type objects that repre-\n    // sent the parameter types and the return type. Use the\n    // MakeByRefType, MakePointerType, and MakeArrayType methods\n    // to create the Type objects, using the generic type para-\n    // meter T.\n    //\n    Type^ byRefType = typeParams[0]-&gt;MakeByRefType();\n    Type^ pointerType = typeParams[0]-&gt;MakePointerType();\n    Type^ arrayType = typeParams[0]-&gt;MakeArrayType();\n    Type^ twoDimArrayType = typeParams[0]-&gt;MakeArrayType(2);\n\n    // Create the array of parameter types.\n    array&lt;Type^&gt;^ parameterTypes = {byRefType, pointerType, arrayType};\n\n    // Define the abstract Test method. After you have compiled\n    // and run this example code, you can use ildasm.exe to open\n    // MakeXxxGenericTypeParameterExample.dll, examine the Sample\n    // type, and verify the parameter types and return type of\n    // the TestMethod method.\n    //\n    MethodBuilder^ methodBuilder = typeBuilder-&gt;DefineMethod(&quot;TestMethod&quot;,\n        MethodAttributes::Abstract | MethodAttributes::Virtual \n        | MethodAttributes::Public, twoDimArrayType, parameterTypes);\n\n    // Create the type and save the assembly. For a single-file \n    // assembly, there is only one module to store the manifest \n    // information in.\n    //\n    typeBuilder-&gt;CreateType();\n    assemblyBuilder-&gt;Save(assemblyName-&gt;Name + &quot;.dll&quot;);\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"MakeXxxGenericTypeParameterBuilder#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new \n            AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, AssemblyBuilderAccess.Save);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, myAsmName.Name + &quot;.dll&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(&quot;Sample&quot;, \n            TypeAttributes.Public | TypeAttributes.Abstract);\n\n        // Make the sample type a generic type, by defining a type\n        // parameter T. All type parameters are defined at the same\n        // time, by passing an array containing the type parameter\n        // names. \n        string[] typeParamNames = {&quot;T&quot;};\n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        // Define a method that takes a ByRef argument of type T, a\n        // pointer to type T, and one-dimensional array of type T. The\n        // method returns a two-dimensional array of type T.\n        //\n        // To create this method, you need Type objects that represent the\n        // parameter types and the return type. Use the MakeByRefType, \n        // MakePointerType, and MakeArrayType methods to create the Type\n        // objects, using the generic type parameter T.\n        //\n        Type byRefType = typeParams[0].MakeByRefType();\n        Type pointerType = typeParams[0].MakePointerType();\n        Type arrayType = typeParams[0].MakeArrayType();\n        Type twoDimArrayType = typeParams[0].MakeArrayType(2);\n\n        // Create the array of parameter types.\n        Type[] parameterTypes = {byRefType, pointerType, arrayType};\n\n        // Define the abstract Test method. After you have compiled\n        // and run this example code, you can use ildasm.exe to open\n        // MakeXxxGenericTypeParameterExample.dll, examine the Sample\n        // type, and verify the parameter types and return type of\n        // the TestMethod method.\n        //\n        MethodBuilder myMethodBuilder = myType.DefineMethod(\n            &quot;TestMethod&quot;, \n            MethodAttributes.Abstract | MethodAttributes.Virtual\n            | MethodAttributes.Public, \n            twoDimArrayType, \n            parameterTypes);\n\n        // Create the type and save the assembly. For a single-file \n        // assembly, there is only one module to store the manifest \n        // information in.\n        //\n        myType.CreateType();\n        myAssembly.Save(myAsmName.Name + &quot;.dll&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MakeXxxGenericTypeParameterBuilder#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.Save)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public Or TypeAttributes.Abstract)\n\n        &#39; Make the sample type a generic type, by defining a type\n        &#39; parameter T. All type parameters are defined at the same\n        &#39; time, by passing an array containing the type parameter\n        &#39; names. \n        Dim typeParamNames() As String = {&quot;T&quot;}\n        Dim typeParams() As GenericTypeParameterBuilder = _\n            myType.DefineGenericParameters(typeParamNames)\n\n        &#39; Define a method that takes a ByRef argument of type T, a\n        &#39; pointer to type T, and one-dimensional array of type T. The\n        &#39; method returns a two-dimensional array of type T.\n        &#39;\n        &#39; To create this method, you need Type objects that represent the\n        &#39; parameter types and the return type. Use the MakeByRefType, \n        &#39; MakePointerType, and MakeArrayType methods to create the Type\n        &#39; objects, using the generic type parameter T.\n        &#39;\n        Dim byRefType As Type = typeParams(0).MakeByRefType\n        Dim pointerType As Type = typeParams(0).MakePointerType\n        Dim arrayType As Type = typeParams(0).MakeArrayType\n        Dim twoDimArrayType As Type = typeParams(0).MakeArrayType(2)\n\n        &#39; Create the array of parameter types.\n        Dim parameterTypes() As Type = _\n            {byRefType, pointerType, arrayType}\n\n        &#39; Define the abstract Test method. After you have compiled\n        &#39; and run this example code, you can use ildasm.exe to open\n        &#39; MakeXxxGenericTypeParameterExample.dll, examine the Sample\n        &#39; type, and verify the parameter types and return type of\n        &#39; the TestMethod method.\n        &#39;\n        Dim myMethodBuilder As MethodBuilder = myType.DefineMethod( _\n            &quot;TestMethod&quot;, _\n            MethodAttributes.Abstract Or MethodAttributes.Virtual _\n                Or MethodAttributes.Public, _\n            twoDimArrayType, _\n            parameterTypes)\n\n        &#39; Create the type and save the assembly. For a single-file \n        &#39; assembly, there is only one module to store the manifest \n        &#39; information in.\n        &#39;\n        myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakeArrayType_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakeArrayType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeArrayType(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeArrayType (int rank);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rank</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of dimensions for the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>rank</code> is not a valid number of dimensions. For example, its value is less than 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.type#System_Type_MakeArrayType_\" data-linktype=\"relative-path\">MakeArrayType</a> method provides a way to generate array types for parameter lists.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic module, an abstract generic type named <code>Sample</code> with one type parameter, <code>T</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) of type <code>T</code>, a pointer to type <code>T</code>, and an array of <code>T</code>. This method returns a two-dimensional array of <code>T</code>. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  </p>\n<pre><code class=\"lang-cpp\" name=\"MakeXxxGenericTypeParameterBuilder#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nint main()\n{\n    // Define a dynamic assembly to contain the sample type. The\n    // assembly will not be run, but only saved to disk, so\n    // AssemblyBuilderAccess.Save is specified.\n    //\n    AppDomain^ appDomain = AppDomain::CurrentDomain;\n    AssemblyName^ assemblyName = gcnew\n        AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;);\n    AssemblyBuilder^ assemblyBuilder = appDomain-&gt;DefineDynamicAssembly\n        (assemblyName, AssemblyBuilderAccess::Save);\n\n    // An assembly is made up of executable modules. For a single\n    // module assembly, the module name and file name are the\n    // same as the assembly name.\n    ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule\n        (assemblyName-&gt;Name, assemblyName-&gt;Name + &quot;.dll&quot;);\n\n    // Define the sample type.\n    TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType(&quot;Sample&quot;,\n        TypeAttributes::Public | TypeAttributes::Abstract);\n\n    // Make the sample type a generic type, by defining a type\n    // parameter T. All type parameters are defined at the same\n    // time, by passing an array containing the type parameter\n    // names. \n    array&lt;String^&gt;^ typeParamNames = {&quot;T&quot;};\n    array&lt;GenericTypeParameterBuilder^&gt;^ typeParams =\n        typeBuilder-&gt;DefineGenericParameters(typeParamNames);\n\n    // Define a method that takes a ByRef argument of type T, a\n    // pointer to type T, and one-dimensional array of type T.\n    // The method returns a two-dimensional array of type T.\n    //\n    // To create this method, you need Type objects that repre-\n    // sent the parameter types and the return type. Use the\n    // MakeByRefType, MakePointerType, and MakeArrayType methods\n    // to create the Type objects, using the generic type para-\n    // meter T.\n    //\n    Type^ byRefType = typeParams[0]-&gt;MakeByRefType();\n    Type^ pointerType = typeParams[0]-&gt;MakePointerType();\n    Type^ arrayType = typeParams[0]-&gt;MakeArrayType();\n    Type^ twoDimArrayType = typeParams[0]-&gt;MakeArrayType(2);\n\n    // Create the array of parameter types.\n    array&lt;Type^&gt;^ parameterTypes = {byRefType, pointerType, arrayType};\n\n    // Define the abstract Test method. After you have compiled\n    // and run this example code, you can use ildasm.exe to open\n    // MakeXxxGenericTypeParameterExample.dll, examine the Sample\n    // type, and verify the parameter types and return type of\n    // the TestMethod method.\n    //\n    MethodBuilder^ methodBuilder = typeBuilder-&gt;DefineMethod(&quot;TestMethod&quot;,\n        MethodAttributes::Abstract | MethodAttributes::Virtual \n        | MethodAttributes::Public, twoDimArrayType, parameterTypes);\n\n    // Create the type and save the assembly. For a single-file \n    // assembly, there is only one module to store the manifest \n    // information in.\n    //\n    typeBuilder-&gt;CreateType();\n    assemblyBuilder-&gt;Save(assemblyName-&gt;Name + &quot;.dll&quot;);\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"MakeXxxGenericTypeParameterBuilder#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new \n            AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, AssemblyBuilderAccess.Save);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, myAsmName.Name + &quot;.dll&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(&quot;Sample&quot;, \n            TypeAttributes.Public | TypeAttributes.Abstract);\n\n        // Make the sample type a generic type, by defining a type\n        // parameter T. All type parameters are defined at the same\n        // time, by passing an array containing the type parameter\n        // names. \n        string[] typeParamNames = {&quot;T&quot;};\n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        // Define a method that takes a ByRef argument of type T, a\n        // pointer to type T, and one-dimensional array of type T. The\n        // method returns a two-dimensional array of type T.\n        //\n        // To create this method, you need Type objects that represent the\n        // parameter types and the return type. Use the MakeByRefType, \n        // MakePointerType, and MakeArrayType methods to create the Type\n        // objects, using the generic type parameter T.\n        //\n        Type byRefType = typeParams[0].MakeByRefType();\n        Type pointerType = typeParams[0].MakePointerType();\n        Type arrayType = typeParams[0].MakeArrayType();\n        Type twoDimArrayType = typeParams[0].MakeArrayType(2);\n\n        // Create the array of parameter types.\n        Type[] parameterTypes = {byRefType, pointerType, arrayType};\n\n        // Define the abstract Test method. After you have compiled\n        // and run this example code, you can use ildasm.exe to open\n        // MakeXxxGenericTypeParameterExample.dll, examine the Sample\n        // type, and verify the parameter types and return type of\n        // the TestMethod method.\n        //\n        MethodBuilder myMethodBuilder = myType.DefineMethod(\n            &quot;TestMethod&quot;, \n            MethodAttributes.Abstract | MethodAttributes.Virtual\n            | MethodAttributes.Public, \n            twoDimArrayType, \n            parameterTypes);\n\n        // Create the type and save the assembly. For a single-file \n        // assembly, there is only one module to store the manifest \n        // information in.\n        //\n        myType.CreateType();\n        myAssembly.Save(myAsmName.Name + &quot;.dll&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MakeXxxGenericTypeParameterBuilder#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.Save)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public Or TypeAttributes.Abstract)\n\n        &#39; Make the sample type a generic type, by defining a type\n        &#39; parameter T. All type parameters are defined at the same\n        &#39; time, by passing an array containing the type parameter\n        &#39; names. \n        Dim typeParamNames() As String = {&quot;T&quot;}\n        Dim typeParams() As GenericTypeParameterBuilder = _\n            myType.DefineGenericParameters(typeParamNames)\n\n        &#39; Define a method that takes a ByRef argument of type T, a\n        &#39; pointer to type T, and one-dimensional array of type T. The\n        &#39; method returns a two-dimensional array of type T.\n        &#39;\n        &#39; To create this method, you need Type objects that represent the\n        &#39; parameter types and the return type. Use the MakeByRefType, \n        &#39; MakePointerType, and MakeArrayType methods to create the Type\n        &#39; objects, using the generic type parameter T.\n        &#39;\n        Dim byRefType As Type = typeParams(0).MakeByRefType\n        Dim pointerType As Type = typeParams(0).MakePointerType\n        Dim arrayType As Type = typeParams(0).MakeArrayType\n        Dim twoDimArrayType As Type = typeParams(0).MakeArrayType(2)\n\n        &#39; Create the array of parameter types.\n        Dim parameterTypes() As Type = _\n            {byRefType, pointerType, arrayType}\n\n        &#39; Define the abstract Test method. After you have compiled\n        &#39; and run this example code, you can use ildasm.exe to open\n        &#39; MakeXxxGenericTypeParameterExample.dll, examine the Sample\n        &#39; type, and verify the parameter types and return type of\n        &#39; the TestMethod method.\n        &#39;\n        Dim myMethodBuilder As MethodBuilder = myType.DefineMethod( _\n            &quot;TestMethod&quot;, _\n            MethodAttributes.Abstract Or MethodAttributes.Virtual _\n                Or MethodAttributes.Public, _\n            twoDimArrayType, _\n            parameterTypes)\n\n        &#39; Create the type and save the assembly. For a single-file \n        &#39; assembly, there is only one module to store the manifest \n        &#39; information in.\n        &#39;\n        myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakeByRefType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakeByRefType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeByRefType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current generic type parameter when passed as a reference parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeByRefType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current generic type parameter when passed as a reference parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MakeByRefType method provides a way to generate <code>ref</code> types (<code>ByRef</code> in Visual Basic) for parameter lists.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic module, an abstract generic type named <code>Sample</code> with one type parameter, <code>T</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) of type <code>T</code>, a pointer to type <code>T</code>, and an array of <code>T</code>. This method returns a two-dimensional array of <code>T</code>. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  </p>\n<pre><code class=\"lang-cpp\" name=\"MakeXxxGenericTypeParameterBuilder#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nint main()\n{\n    // Define a dynamic assembly to contain the sample type. The\n    // assembly will not be run, but only saved to disk, so\n    // AssemblyBuilderAccess.Save is specified.\n    //\n    AppDomain^ appDomain = AppDomain::CurrentDomain;\n    AssemblyName^ assemblyName = gcnew\n        AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;);\n    AssemblyBuilder^ assemblyBuilder = appDomain-&gt;DefineDynamicAssembly\n        (assemblyName, AssemblyBuilderAccess::Save);\n\n    // An assembly is made up of executable modules. For a single\n    // module assembly, the module name and file name are the\n    // same as the assembly name.\n    ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule\n        (assemblyName-&gt;Name, assemblyName-&gt;Name + &quot;.dll&quot;);\n\n    // Define the sample type.\n    TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType(&quot;Sample&quot;,\n        TypeAttributes::Public | TypeAttributes::Abstract);\n\n    // Make the sample type a generic type, by defining a type\n    // parameter T. All type parameters are defined at the same\n    // time, by passing an array containing the type parameter\n    // names. \n    array&lt;String^&gt;^ typeParamNames = {&quot;T&quot;};\n    array&lt;GenericTypeParameterBuilder^&gt;^ typeParams =\n        typeBuilder-&gt;DefineGenericParameters(typeParamNames);\n\n    // Define a method that takes a ByRef argument of type T, a\n    // pointer to type T, and one-dimensional array of type T.\n    // The method returns a two-dimensional array of type T.\n    //\n    // To create this method, you need Type objects that repre-\n    // sent the parameter types and the return type. Use the\n    // MakeByRefType, MakePointerType, and MakeArrayType methods\n    // to create the Type objects, using the generic type para-\n    // meter T.\n    //\n    Type^ byRefType = typeParams[0]-&gt;MakeByRefType();\n    Type^ pointerType = typeParams[0]-&gt;MakePointerType();\n    Type^ arrayType = typeParams[0]-&gt;MakeArrayType();\n    Type^ twoDimArrayType = typeParams[0]-&gt;MakeArrayType(2);\n\n    // Create the array of parameter types.\n    array&lt;Type^&gt;^ parameterTypes = {byRefType, pointerType, arrayType};\n\n    // Define the abstract Test method. After you have compiled\n    // and run this example code, you can use ildasm.exe to open\n    // MakeXxxGenericTypeParameterExample.dll, examine the Sample\n    // type, and verify the parameter types and return type of\n    // the TestMethod method.\n    //\n    MethodBuilder^ methodBuilder = typeBuilder-&gt;DefineMethod(&quot;TestMethod&quot;,\n        MethodAttributes::Abstract | MethodAttributes::Virtual \n        | MethodAttributes::Public, twoDimArrayType, parameterTypes);\n\n    // Create the type and save the assembly. For a single-file \n    // assembly, there is only one module to store the manifest \n    // information in.\n    //\n    typeBuilder-&gt;CreateType();\n    assemblyBuilder-&gt;Save(assemblyName-&gt;Name + &quot;.dll&quot;);\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"MakeXxxGenericTypeParameterBuilder#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new \n            AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, AssemblyBuilderAccess.Save);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, myAsmName.Name + &quot;.dll&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(&quot;Sample&quot;, \n            TypeAttributes.Public | TypeAttributes.Abstract);\n\n        // Make the sample type a generic type, by defining a type\n        // parameter T. All type parameters are defined at the same\n        // time, by passing an array containing the type parameter\n        // names. \n        string[] typeParamNames = {&quot;T&quot;};\n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        // Define a method that takes a ByRef argument of type T, a\n        // pointer to type T, and one-dimensional array of type T. The\n        // method returns a two-dimensional array of type T.\n        //\n        // To create this method, you need Type objects that represent the\n        // parameter types and the return type. Use the MakeByRefType, \n        // MakePointerType, and MakeArrayType methods to create the Type\n        // objects, using the generic type parameter T.\n        //\n        Type byRefType = typeParams[0].MakeByRefType();\n        Type pointerType = typeParams[0].MakePointerType();\n        Type arrayType = typeParams[0].MakeArrayType();\n        Type twoDimArrayType = typeParams[0].MakeArrayType(2);\n\n        // Create the array of parameter types.\n        Type[] parameterTypes = {byRefType, pointerType, arrayType};\n\n        // Define the abstract Test method. After you have compiled\n        // and run this example code, you can use ildasm.exe to open\n        // MakeXxxGenericTypeParameterExample.dll, examine the Sample\n        // type, and verify the parameter types and return type of\n        // the TestMethod method.\n        //\n        MethodBuilder myMethodBuilder = myType.DefineMethod(\n            &quot;TestMethod&quot;, \n            MethodAttributes.Abstract | MethodAttributes.Virtual\n            | MethodAttributes.Public, \n            twoDimArrayType, \n            parameterTypes);\n\n        // Create the type and save the assembly. For a single-file \n        // assembly, there is only one module to store the manifest \n        // information in.\n        //\n        myType.CreateType();\n        myAssembly.Save(myAsmName.Name + &quot;.dll&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MakeXxxGenericTypeParameterBuilder#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.Save)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public Or TypeAttributes.Abstract)\n\n        &#39; Make the sample type a generic type, by defining a type\n        &#39; parameter T. All type parameters are defined at the same\n        &#39; time, by passing an array containing the type parameter\n        &#39; names. \n        Dim typeParamNames() As String = {&quot;T&quot;}\n        Dim typeParams() As GenericTypeParameterBuilder = _\n            myType.DefineGenericParameters(typeParamNames)\n\n        &#39; Define a method that takes a ByRef argument of type T, a\n        &#39; pointer to type T, and one-dimensional array of type T. The\n        &#39; method returns a two-dimensional array of type T.\n        &#39;\n        &#39; To create this method, you need Type objects that represent the\n        &#39; parameter types and the return type. Use the MakeByRefType, \n        &#39; MakePointerType, and MakeArrayType methods to create the Type\n        &#39; objects, using the generic type parameter T.\n        &#39;\n        Dim byRefType As Type = typeParams(0).MakeByRefType\n        Dim pointerType As Type = typeParams(0).MakePointerType\n        Dim arrayType As Type = typeParams(0).MakeArrayType\n        Dim twoDimArrayType As Type = typeParams(0).MakeArrayType(2)\n\n        &#39; Create the array of parameter types.\n        Dim parameterTypes() As Type = _\n            {byRefType, pointerType, arrayType}\n\n        &#39; Define the abstract Test method. After you have compiled\n        &#39; and run this example code, you can use ildasm.exe to open\n        &#39; MakeXxxGenericTypeParameterExample.dll, examine the Sample\n        &#39; type, and verify the parameter types and return type of\n        &#39; the TestMethod method.\n        &#39;\n        Dim myMethodBuilder As MethodBuilder = myType.DefineMethod( _\n            &quot;TestMethod&quot;, _\n            MethodAttributes.Abstract Or MethodAttributes.Virtual _\n                Or MethodAttributes.Public, _\n            twoDimArrayType, _\n            parameterTypes)\n\n        &#39; Create the type and save the assembly. For a single-file \n        &#39; assembly, there is only one module to store the manifest \n        &#39; information in.\n        &#39;\n        myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakeGenericType_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakeGenericType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeGenericType(Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Not valid for incomplete generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeGenericType (Type[] typeArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>This method is invalid for incomplete generic type parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakePointerType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_MakePointerType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakePointerType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a pointer to the current generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakePointerType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a pointer to the current generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MakePointerType method provides a way to generate pointer types for parameter lists.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a dynamic module, an abstract generic type named <code>Sample</code> with one type parameter, <code>T</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <code>ref</code> parameter (<code>ByRef</code> in Visual Basic) of type <code>T</code>, a pointer to type <code>T</code>, and an array of <code>T</code>. This method returns a two-dimensional array of <code>T</code>. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  </p>\n<pre><code class=\"lang-cpp\" name=\"MakeXxxGenericTypeParameterBuilder#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nint main()\n{\n    // Define a dynamic assembly to contain the sample type. The\n    // assembly will not be run, but only saved to disk, so\n    // AssemblyBuilderAccess.Save is specified.\n    //\n    AppDomain^ appDomain = AppDomain::CurrentDomain;\n    AssemblyName^ assemblyName = gcnew\n        AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;);\n    AssemblyBuilder^ assemblyBuilder = appDomain-&gt;DefineDynamicAssembly\n        (assemblyName, AssemblyBuilderAccess::Save);\n\n    // An assembly is made up of executable modules. For a single\n    // module assembly, the module name and file name are the\n    // same as the assembly name.\n    ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule\n        (assemblyName-&gt;Name, assemblyName-&gt;Name + &quot;.dll&quot;);\n\n    // Define the sample type.\n    TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType(&quot;Sample&quot;,\n        TypeAttributes::Public | TypeAttributes::Abstract);\n\n    // Make the sample type a generic type, by defining a type\n    // parameter T. All type parameters are defined at the same\n    // time, by passing an array containing the type parameter\n    // names. \n    array&lt;String^&gt;^ typeParamNames = {&quot;T&quot;};\n    array&lt;GenericTypeParameterBuilder^&gt;^ typeParams =\n        typeBuilder-&gt;DefineGenericParameters(typeParamNames);\n\n    // Define a method that takes a ByRef argument of type T, a\n    // pointer to type T, and one-dimensional array of type T.\n    // The method returns a two-dimensional array of type T.\n    //\n    // To create this method, you need Type objects that repre-\n    // sent the parameter types and the return type. Use the\n    // MakeByRefType, MakePointerType, and MakeArrayType methods\n    // to create the Type objects, using the generic type para-\n    // meter T.\n    //\n    Type^ byRefType = typeParams[0]-&gt;MakeByRefType();\n    Type^ pointerType = typeParams[0]-&gt;MakePointerType();\n    Type^ arrayType = typeParams[0]-&gt;MakeArrayType();\n    Type^ twoDimArrayType = typeParams[0]-&gt;MakeArrayType(2);\n\n    // Create the array of parameter types.\n    array&lt;Type^&gt;^ parameterTypes = {byRefType, pointerType, arrayType};\n\n    // Define the abstract Test method. After you have compiled\n    // and run this example code, you can use ildasm.exe to open\n    // MakeXxxGenericTypeParameterExample.dll, examine the Sample\n    // type, and verify the parameter types and return type of\n    // the TestMethod method.\n    //\n    MethodBuilder^ methodBuilder = typeBuilder-&gt;DefineMethod(&quot;TestMethod&quot;,\n        MethodAttributes::Abstract | MethodAttributes::Virtual \n        | MethodAttributes::Public, twoDimArrayType, parameterTypes);\n\n    // Create the type and save the assembly. For a single-file \n    // assembly, there is only one module to store the manifest \n    // information in.\n    //\n    typeBuilder-&gt;CreateType();\n    assemblyBuilder-&gt;Save(assemblyName-&gt;Name + &quot;.dll&quot;);\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"MakeXxxGenericTypeParameterBuilder#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing Microsoft.VisualBasic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new \n            AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;);\n        AssemblyBuilder myAssembly = myDomain.DefineDynamicAssembly(\n            myAsmName, AssemblyBuilderAccess.Save);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = myAssembly.DefineDynamicModule(\n            myAsmName.Name, myAsmName.Name + &quot;.dll&quot;);\n\n        // Define the sample type.\n        TypeBuilder myType = myModule.DefineType(&quot;Sample&quot;, \n            TypeAttributes.Public | TypeAttributes.Abstract);\n\n        // Make the sample type a generic type, by defining a type\n        // parameter T. All type parameters are defined at the same\n        // time, by passing an array containing the type parameter\n        // names. \n        string[] typeParamNames = {&quot;T&quot;};\n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        // Define a method that takes a ByRef argument of type T, a\n        // pointer to type T, and one-dimensional array of type T. The\n        // method returns a two-dimensional array of type T.\n        //\n        // To create this method, you need Type objects that represent the\n        // parameter types and the return type. Use the MakeByRefType, \n        // MakePointerType, and MakeArrayType methods to create the Type\n        // objects, using the generic type parameter T.\n        //\n        Type byRefType = typeParams[0].MakeByRefType();\n        Type pointerType = typeParams[0].MakePointerType();\n        Type arrayType = typeParams[0].MakeArrayType();\n        Type twoDimArrayType = typeParams[0].MakeArrayType(2);\n\n        // Create the array of parameter types.\n        Type[] parameterTypes = {byRefType, pointerType, arrayType};\n\n        // Define the abstract Test method. After you have compiled\n        // and run this example code, you can use ildasm.exe to open\n        // MakeXxxGenericTypeParameterExample.dll, examine the Sample\n        // type, and verify the parameter types and return type of\n        // the TestMethod method.\n        //\n        MethodBuilder myMethodBuilder = myType.DefineMethod(\n            &quot;TestMethod&quot;, \n            MethodAttributes.Abstract | MethodAttributes.Virtual\n            | MethodAttributes.Public, \n            twoDimArrayType, \n            parameterTypes);\n\n        // Create the type and save the assembly. For a single-file \n        // assembly, there is only one module to store the manifest \n        // information in.\n        //\n        myType.CreateType();\n        myAssembly.Save(myAsmName.Name + &quot;.dll&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MakeXxxGenericTypeParameterBuilder#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports Microsoft.VisualBasic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;MakeXxxGenericTypeParameterExample&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.Save)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Define the sample type.\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public Or TypeAttributes.Abstract)\n\n        &#39; Make the sample type a generic type, by defining a type\n        &#39; parameter T. All type parameters are defined at the same\n        &#39; time, by passing an array containing the type parameter\n        &#39; names. \n        Dim typeParamNames() As String = {&quot;T&quot;}\n        Dim typeParams() As GenericTypeParameterBuilder = _\n            myType.DefineGenericParameters(typeParamNames)\n\n        &#39; Define a method that takes a ByRef argument of type T, a\n        &#39; pointer to type T, and one-dimensional array of type T. The\n        &#39; method returns a two-dimensional array of type T.\n        &#39;\n        &#39; To create this method, you need Type objects that represent the\n        &#39; parameter types and the return type. Use the MakeByRefType, \n        &#39; MakePointerType, and MakeArrayType methods to create the Type\n        &#39; objects, using the generic type parameter T.\n        &#39;\n        Dim byRefType As Type = typeParams(0).MakeByRefType\n        Dim pointerType As Type = typeParams(0).MakePointerType\n        Dim arrayType As Type = typeParams(0).MakeArrayType\n        Dim twoDimArrayType As Type = typeParams(0).MakeArrayType(2)\n\n        &#39; Create the array of parameter types.\n        Dim parameterTypes() As Type = _\n            {byRefType, pointerType, arrayType}\n\n        &#39; Define the abstract Test method. After you have compiled\n        &#39; and run this example code, you can use ildasm.exe to open\n        &#39; MakeXxxGenericTypeParameterExample.dll, examine the Sample\n        &#39; type, and verify the parameter types and return type of\n        &#39; the TestMethod method.\n        &#39;\n        Dim myMethodBuilder As MethodBuilder = myType.DefineMethod( _\n            &quot;TestMethod&quot;, _\n            MethodAttributes.Abstract Or MethodAttributes.Virtual _\n                Or MethodAttributes.Public, _\n            twoDimArrayType, _\n            parameterTypes)\n\n        &#39; Create the type and save the assembly. For a single-file \n        &#39; assembly, there is only one module to store the manifest \n        &#39; information in.\n        &#39;\n        myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetBaseTypeConstraint_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetBaseTypeConstraint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetBaseTypeConstraint(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the base type that a type must inherit in order to be substituted for the type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetBaseTypeConstraint (Type baseTypeConstraint);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>baseTypeConstraint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that must be inherited by any type that is to be substituted for the type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To retrieve the base type constraint use the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder#System_Reflection_Emit_GenericTypeParameterBuilder_BaseType_\" data-linktype=\"relative-path\">BaseType</a> property.  </p>\n<p> Once you have created the generic type that contains the type parameter, you can use its <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object to reflect the type parameter and their constraints. To get the type parameters of a completed generic type, use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method. For each type parameter, get the base type constraint and interface constraints by using the <a class=\"xref\" href=\"system.type#System_Type_GetGenericParameterConstraints_\" data-linktype=\"relative-path\">GetGenericParameterConstraints</a> method, and get the special constraints by using the <a class=\"xref\" href=\"system.type#System_Type_GenericParameterAttributes_\" data-linktype=\"relative-path\">GenericParameterAttributes</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a generic type with two type parameters, the second of which has a base type constraint, and saves them in the assembly GenericEmitExample1.dll. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see <a href=\"../Topic/How%20to:%20Define%20a%20Generic%20Type%20with%20Reflection%20Emit.md\" data-linktype=\"relative-path\">How to: Define a Generic Type with Reflection Emit</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EmitGenericType#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Collections::Generic;\n\n// Dummy class to satisfy TFirst constraints.\n//\npublic ref class Example {};\n\n// Define a trivial base class and two trivial interfaces \n// to use when demonstrating constraints.\n//\npublic ref class ExampleBase {};\npublic interface class IExampleA {};\npublic interface class IExampleB {};\n\n// Define a trivial type that can substitute for type parameter \n// TSecond.\n//\npublic ref class ExampleDerived : ExampleBase, IExampleA, IExampleB {};\n\n// List the constraint flags. The GenericParameterAttributes\n// enumeration contains two sets of attributes, variance and\n// constraints. For this example, only constraints are used.\n//\nstatic void ListConstraintAttributes( Type^ t )\n{\n   // Mask off the constraint flags. \n   GenericParameterAttributes constraints = \n       t-&gt;GenericParameterAttributes &amp; \n       GenericParameterAttributes::SpecialConstraintMask;\n\n   if ((constraints &amp; GenericParameterAttributes::ReferenceTypeConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    ReferenceTypeConstraint&quot;);\n\n   if ((constraints &amp; GenericParameterAttributes::NotNullableValueTypeConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    NotNullableValueTypeConstraint&quot;);\n\n   if ((constraints &amp; GenericParameterAttributes::DefaultConstructorConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    DefaultConstructorConstraint&quot;);\n}\n\nstatic void DisplayGenericParameters( Type^ t )\n{\n   if (!t-&gt;IsGenericType)\n   {\n       Console::WriteLine( L&quot;Type &#39;{0}&#39; is not generic.&quot; );\n       return;\n   }\n   if (!t-&gt;IsGenericTypeDefinition)\n       t = t-&gt;GetGenericTypeDefinition();\n\n   array&lt;Type^&gt;^ typeParameters = t-&gt;GetGenericArguments();\n   Console::WriteLine( L&quot;\\r<br>Listing {0} type parameters for type &#39;{1}&#39;.&quot;, \n       typeParameters-&gt;Length, t );\n\n   for each ( Type^ tParam in typeParameters )\n   {\n       Console::WriteLine( L&quot;\\r<br>Type parameter {0}:&quot;, \n           tParam-&gt;ToString() );\n\n       for each (Type^ c in tParam-&gt;GetGenericParameterConstraints())\n       {\n           if (c-&gt;IsInterface)\n               Console::WriteLine( L&quot;    Interface constraint: {0}&quot;, c);\n           else\n               Console::WriteLine( L&quot;    Base type constraint: {0}&quot;, c);\n       }\n       ListConstraintAttributes(tParam);\n   }\n}\n\nvoid main()\n{\n   // Define a dynamic assembly to contain the sample type. The\n   // assembly will be run and also saved to disk, so\n   // AssemblyBuilderAccess.RunAndSave is specified.\n   //\n   AppDomain^ myDomain = AppDomain::CurrentDomain;\n   AssemblyName^ myAsmName = gcnew AssemblyName( L&quot;GenericEmitExample1&quot; );\n   AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( \n       myAsmName, AssemblyBuilderAccess::RunAndSave );\n\n   // An assembly is made up of executable modules. For a single-\n   // module assembly, the module name and file name are the same \n   // as the assembly name. \n   //\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( \n       myAsmName-&gt;Name, String::Concat( myAsmName-&gt;Name, L&quot;.dll&quot; ) );\n\n   // Get type objects for the base class trivial interfaces to\n   // be used as constraints.\n   //\n   Type^ baseType = ExampleBase::typeid; \n   Type^ interfaceA = IExampleA::typeid; \n   Type^ interfaceB = IExampleB::typeid;\n   \n   // Define the sample type.\n   //\n   TypeBuilder^ myType = myModule-&gt;DefineType( L&quot;Sample&quot;, \n       TypeAttributes::Public );\n   \n   Console::WriteLine( L&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n       myType-&gt;IsGenericType );\n   \n   // Define type parameters for the type. Until you do this, \n   // the type is not generic, as the preceding and following \n   // WriteLine statements show. The type parameter names are\n   // specified as an array of strings. To make the code\n   // easier to read, each GenericTypeParameterBuilder is placed\n   // in a variable with the same name as the type parameter.\n   // \n   array&lt;String^&gt;^typeParamNames = {L&quot;TFirst&quot;,L&quot;TSecond&quot;};\n   array&lt;GenericTypeParameterBuilder^&gt;^typeParams = \n       myType-&gt;DefineGenericParameters( typeParamNames );\n\n   GenericTypeParameterBuilder^ TFirst = typeParams[0];\n   GenericTypeParameterBuilder^ TSecond = typeParams[1];\n\n   Console::WriteLine( L&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n       myType-&gt;IsGenericType );\n   \n   // Apply constraints to the type parameters.\n   //\n   // A type that is substituted for the first parameter, TFirst,\n   // must be a reference type and must have a parameterless\n   // constructor.\n   TFirst-&gt;SetGenericParameterAttributes( \n       GenericParameterAttributes::DefaultConstructorConstraint | \n       GenericParameterAttributes::ReferenceTypeConstraint \n   );\n\n   // A type that is substituted for the second type\n   // parameter must implement IExampleA and IExampleB, and\n   // inherit from the trivial test class ExampleBase. The\n   // interface constraints are specified as an array\n   // containing the interface types. \n   array&lt;Type^&gt;^interfaceTypes = { interfaceA, interfaceB };\n   TSecond-&gt;SetInterfaceConstraints( interfaceTypes );\n   TSecond-&gt;SetBaseTypeConstraint( baseType );\n\n   // The following code adds a private field named ExampleField,\n   // of type TFirst.\n   FieldBuilder^ exField = \n       myType-&gt;DefineField(&quot;ExampleField&quot;, TFirst, \n           FieldAttributes::Private);\n\n   // Define a static method that takes an array of TFirst and \n   // returns a List&lt;TFirst&gt; containing all the elements of \n   // the array. To define this method it is necessary to create\n   // the type List&lt;TFirst&gt; by calling MakeGenericType on the\n   // generic type definition, generic&lt;T&gt; List. \n   // The parameter type is created by using the\n   // MakeArrayType method. \n   //\n   Type^ listOf = List::typeid;\n   Type^ listOfTFirst = listOf-&gt;MakeGenericType(TFirst);\n   array&lt;Type^&gt;^ mParamTypes = { TFirst-&gt;MakeArrayType() };\n\n   MethodBuilder^ exMethod = \n       myType-&gt;DefineMethod(&quot;ExampleMethod&quot;, \n           MethodAttributes::Public | MethodAttributes::Static, \n           listOfTFirst, \n           mParamTypes);\n\n   // Emit the method body. \n   // The method body consists of just three opcodes, to load \n   // the input array onto the execution stack, to call the \n   // List&lt;TFirst&gt; constructor that takes IEnumerable&lt;TFirst&gt;,\n   // which does all the work of putting the input elements into\n   // the list, and to return, leaving the list on the stack. The\n   // hard work is getting the constructor.\n   // \n   // The GetConstructor method is not supported on a \n   // GenericTypeParameterBuilder, so it is not possible to get \n   // the constructor of List&lt;TFirst&gt; directly. There are two\n   // steps, first getting the constructor of generic&lt;T&gt; List and then\n   // calling a method that converts it to the corresponding \n   // constructor of List&lt;TFirst&gt;.\n   //\n   // The constructor needed here is the one that takes an\n   // IEnumerable&lt;T&gt;. Note, however, that this is not the \n   // generic type definition of generic&lt;T&gt; IEnumerable; instead, the\n   // T from generic&lt;T&gt; List must be substituted for the T of \n   // generic&lt;T&gt; IEnumerable. (This seems confusing only because both\n   // types have type parameters named T. That is why this example\n   // uses the somewhat silly names TFirst and TSecond.) To get\n   // the type of the constructor argument, take the generic\n   // type definition generic&lt;T&gt; IEnumerable and \n   // call MakeGenericType with the first generic type parameter\n   // of generic&lt;T&gt; List. The constructor argument list must be passed\n   // as an array, with just one argument in this case.\n   // \n   // Now it is possible to get the constructor of generic&lt;T&gt; List,\n   // using GetConstructor on the generic type definition. To get\n   // the constructor of List&lt;TFirst&gt;, pass List&lt;TFirst&gt; and\n   // the constructor from generic&lt;T&gt; List to the static\n   // TypeBuilder.GetConstructor method.\n   //\n   ILGenerator^ ilgen = exMethod-&gt;GetILGenerator();\n        \n   Type^ ienumOf = IEnumerable::typeid;\n   Type^ TfromListOf = listOf-&gt;GetGenericArguments()[0];\n   Type^ ienumOfT = ienumOf-&gt;MakeGenericType(TfromListOf);\n   array&lt;Type^&gt;^ ctorArgs = {ienumOfT};\n\n   ConstructorInfo^ ctorPrep = listOf-&gt;GetConstructor(ctorArgs);\n   ConstructorInfo^ ctor = \n       TypeBuilder::GetConstructor(listOfTFirst, ctorPrep);\n\n   ilgen-&gt;Emit(OpCodes::Ldarg_0);\n   ilgen-&gt;Emit(OpCodes::Newobj, ctor);\n   ilgen-&gt;Emit(OpCodes::Ret);\n\n   // Create the type and save the assembly. \n   Type^ finished = myType-&gt;CreateType();\n   myAssembly-&gt;Save( String::Concat( myAsmName-&gt;Name, L&quot;.dll&quot; ) );\n\n   // Invoke the method.\n   // ExampleMethod is not generic, but the type it belongs to is\n   // generic, so in order to get a MethodInfo that can be invoked\n   // it is necessary to create a constructed type. The Example \n   // class satisfies the constraints on TFirst, because it is a \n   // reference type and has a default constructor. In order to\n   // have a class that satisfies the constraints on TSecond, \n   // this code example defines the ExampleDerived type. These\n   // two types are passed to MakeGenericMethod to create the\n   // constructed type.\n   //\n   array&lt;Type^&gt;^ typeArgs = \n       { Example::typeid, ExampleDerived::typeid };\n   Type^ constructed = finished-&gt;MakeGenericType(typeArgs);\n   MethodInfo^ mi = constructed-&gt;GetMethod(&quot;ExampleMethod&quot;);\n\n   // Create an array of Example objects, as input to the generic\n   // method. This array must be passed as the only element of an \n   // array of arguments. The first argument of Invoke is \n   // null, because ExampleMethod is static. Display the count\n   // on the resulting List&lt;Example&gt;.\n   // \n   array&lt;Example^&gt;^ input = { gcnew Example(), gcnew Example() };\n   array&lt;Object^&gt;^ arguments = { input };\n\n   List&lt;Example^&gt;^ listX = \n       (List&lt;Example^&gt;^) mi-&gt;Invoke(nullptr, arguments);\n\n   Console::WriteLine(\n       &quot;<br>There are {0} elements in the List&lt;Example&gt;.&quot;, \n       listX-&gt;Count);\n\n   DisplayGenericParameters(finished);\n}\n\n/* This code example produces the following output:\n\nType &#39;Sample&#39; is generic: False\nType &#39;Sample&#39; is generic: True\n\nThere are 2 elements in the List&lt;Example&gt;.\n\nListing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n\nType parameter TFirst:\n    ReferenceTypeConstraint\n    DefaultConstructorConstraint\n\nType parameter TSecond:\n    Interface constraint: IExampleA\n    Interface constraint: IExampleB\n    Base type constraint: ExampleBase\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"EmitGenericType#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Collections.Generic\n\n&#39; Define a trivial base class and two trivial interfaces \n&#39; to use when demonstrating constraints.\n&#39;\nPublic Class ExampleBase\nEnd Class\n\nPublic Interface IExampleA\nEnd Interface\n\nPublic Interface IExampleB\nEnd Interface\n\n&#39; Define a trivial type that can substitute for type parameter \n&#39; TSecond.\n&#39;\nPublic Class ExampleDerived\n    Inherits ExampleBase\n    Implements IExampleA, IExampleB\nEnd Class\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;GenericEmitExample1&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.RunAndSave)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Get type objects for the base class trivial interfaces to\n        &#39; be used as constraints.\n        &#39;\n        Dim baseType As Type = GetType(ExampleBase)\n        Dim interfaceA As Type = GetType(IExampleA)\n        Dim interfaceB As Type = GetType(IExampleB)\n                \n        &#39; Define the sample type.\n        &#39;\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public)\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, _\n            myType.IsGenericType)\n\n        &#39; Define type parameters for the type. Until you do this, \n        &#39; the type is not generic, as the preceding and following \n        &#39; WriteLine statements show. The type parameter names are\n        &#39; specified as an array of strings. To make the code\n        &#39; easier to read, each GenericTypeParameterBuilder is placed\n        &#39; in a variable with the same name as the type parameter.\n        &#39; \n        Dim typeParamNames() As String = {&quot;TFirst&quot;, &quot;TSecond&quot;}\n        Dim typeParams() As GenericTypeParameterBuilder = _\n            myType.DefineGenericParameters(typeParamNames)\n\n        Dim TFirst As GenericTypeParameterBuilder = typeParams(0)\n        Dim TSecond As GenericTypeParameterBuilder = typeParams(1)\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, _\n            myType.IsGenericType)\n\n        &#39; Apply constraints to the type parameters.\n        &#39;\n        &#39; A type that is substituted for the first parameter, TFirst,\n        &#39; must be a reference type and must have a parameterless\n        &#39; constructor.\n        TFirst.SetGenericParameterAttributes( _\n            GenericParameterAttributes.DefaultConstructorConstraint _\n            Or GenericParameterAttributes.ReferenceTypeConstraint)\n\n        &#39; A type that is substituted for the second type\n        &#39; parameter must implement IExampleA and IExampleB, and\n        &#39; inherit from the trivial test class ExampleBase. The\n        &#39; interface constraints are specified as an array \n        &#39; containing the interface types.\n        TSecond.SetBaseTypeConstraint(baseType)\n        Dim interfaceTypes() As Type = {interfaceA, interfaceB}\n        TSecond.SetInterfaceConstraints(interfaceTypes)\n\n        &#39; The following code adds a private field named ExampleField,\n        &#39; of type TFirst.\n        Dim exField As FieldBuilder = _\n            myType.DefineField(&quot;ExampleField&quot;, TFirst, _\n                FieldAttributes.Private)\n\n        &#39; Define a Shared method that takes an array of TFirst and \n        &#39; returns a List(Of TFirst) containing all the elements of \n        &#39; the array. To define this method it is necessary to create\n        &#39; the type List(Of TFirst) by calling MakeGenericType on the\n        &#39; generic type definition, List(Of T). (The T is omitted with\n        &#39; the GetType operator when you get the generic type \n        &#39; definition.) The parameter type is created by using the\n        &#39; MakeArrayType method. \n        &#39;\n        Dim listOf As Type = GetType(List(Of ))\n        Dim listOfTFirst As Type = listOf.MakeGenericType(TFirst)\n        Dim mParamTypes() As Type = { TFirst.MakeArrayType() }\n\n        Dim exMethod As MethodBuilder = _\n            myType.DefineMethod(&quot;ExampleMethod&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static, _\n                listOfTFirst, _\n                mParamTypes)\n\n        &#39; Emit the method body. \n        &#39; The method body consists of just three opcodes, to load \n        &#39; the input array onto the execution stack, to call the \n        &#39; List(Of TFirst) constructor that takes IEnumerable(Of TFirst),\n        &#39; which does all the work of putting the input elements into\n        &#39; the list, and to return, leaving the list on the stack. The\n        &#39; hard work is getting the constructor.\n        &#39; \n        &#39; The GetConstructor method is not supported on a \n        &#39; GenericTypeParameterBuilder, so it is not possible to get \n        &#39; the constructor of List(Of TFirst) directly. There are two\n        &#39; steps, first getting the constructor of List(Of T) and then\n        &#39; calling a method that converts it to the corresponding \n        &#39; constructor of List(Of TFirst).\n        &#39;\n        &#39; The constructor needed here is the one that takes an\n        &#39; IEnumerable(Of T). Note, however, that this is not the \n        &#39; generic type definition of IEnumerable(Of T); instead, the\n        &#39; T from List(Of T) must be substituted for the T of \n        &#39; IEnumerable(Of T). (This seems confusing only because both\n        &#39; types have type parameters named T. That is why this example\n        &#39; uses the somewhat silly names TFirst and TSecond.) To get\n        &#39; the type of the constructor argument, take the generic\n        &#39; type definition IEnumerable(Of T) (expressed as \n        &#39; IEnumerable(Of ) when you use the GetType operator) and \n        &#39; call MakeGenericType with the first generic type parameter\n        &#39; of List(Of T). The constructor argument list must be passed\n        &#39; as an array, with just one argument in this case.\n        &#39; \n        &#39; Now it is possible to get the constructor of List(Of T),\n        &#39; using GetConstructor on the generic type definition. To get\n        &#39; the constructor of List(Of TFirst), pass List(Of TFirst) and\n        &#39; the constructor from List(Of T) to the static\n        &#39; TypeBuilder.GetConstructor method.\n        &#39;\n        Dim ilgen As ILGenerator = exMethod.GetILGenerator()\n        \n        Dim ienumOf As Type = GetType(IEnumerable(Of ))\n        Dim listOfTParams() As Type = listOf.GetGenericArguments()\n        Dim TfromListOf As Type = listOfTParams(0)\n        Dim ienumOfT As Type = ienumOf.MakeGenericType(TfromListOf)\n        Dim ctorArgs() As Type = { ienumOfT }\n\n        Dim ctorPrep As ConstructorInfo = _\n            listOf.GetConstructor(ctorArgs)\n        Dim ctor As ConstructorInfo = _\n            TypeBuilder.GetConstructor(listOfTFirst, ctorPrep)\n\n        ilgen.Emit(OpCodes.Ldarg_0)\n        ilgen.Emit(OpCodes.Newobj, ctor)\n        ilgen.Emit(OpCodes.Ret)\n\n        &#39; Create the type and save the assembly. \n        Dim finished As Type = myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Invoke the method.\n        &#39; ExampleMethod is not generic, but the type it belongs to is\n        &#39; generic, so in order to get a MethodInfo that can be invoked\n        &#39; it is necessary to create a constructed type. The Example \n        &#39; class satisfies the constraints on TFirst, because it is a \n        &#39; reference type and has a default constructor. In order to\n        &#39; have a class that satisfies the constraints on TSecond, \n        &#39; this code example defines the ExampleDerived type. These\n        &#39; two types are passed to MakeGenericMethod to create the\n        &#39; constructed type.\n        &#39;\n        Dim typeArgs() As Type = _\n            { GetType(Example), GetType(ExampleDerived) }\n        Dim constructed As Type = finished.MakeGenericType(typeArgs)\n        Dim mi As MethodInfo = constructed.GetMethod(&quot;ExampleMethod&quot;)\n\n        &#39; Create an array of Example objects, as input to the generic\n        &#39; method. This array must be passed as the only element of an \n        &#39; array of arguments. The first argument of Invoke is \n        &#39; Nothing, because ExampleMethod is Shared. Display the count\n        &#39; on the resulting List(Of Example).\n        &#39; \n        Dim input() As Example = { New Example(), New Example() }\n        Dim arguments() As Object = { input }\n\n        Dim listX As List(Of Example) = mi.Invoke(Nothing, arguments)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;There are {0} elements in the List(Of Example).&quot;, _\n            listX.Count _ \n        )\n\n        DisplayGenericParameters(finished)\n    End Sub\n\n    Private Shared Sub DisplayGenericParameters(ByVal t As Type)\n\n        If Not t.IsGenericType Then\n            Console.WriteLine(&quot;Type &#39;{0}&#39; is not generic.&quot;)\n            Return\n        End If\n        If Not t.IsGenericTypeDefinition Then _\n            t = t.GetGenericTypeDefinition()\n\n        Dim typeParameters() As Type = t.GetGenericArguments()\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Listing {0} type parameters for type &#39;{1}&#39;.&quot;, _\n            typeParameters.Length, t)\n\n        For Each tParam As Type In typeParameters\n\n            Console.WriteLine(vbCrLf &amp; &quot;Type parameter {0}:&quot;, _\n                tParam.ToString())\n\n            For Each c As Type In tParam.GetGenericParameterConstraints()\n                If c.IsInterface Then\n                    Console.WriteLine(&quot;    Interface constraint: {0}&quot;, c)\n                Else\n                    Console.WriteLine(&quot;    Base type constraint: {0}&quot;, c)\n                End If\n            Next \n\n            ListConstraintAttributes(tParam)\n        Next tParam\n    End Sub\n\n    &#39; List the constraint flags. The GenericParameterAttributes\n    &#39; enumeration contains two sets of attributes, variance and\n    &#39; constraints. For this example, only constraints are used.\n    &#39;\n    Private Shared Sub ListConstraintAttributes(ByVal t As Type)\n\n        &#39; Mask off the constraint flags. \n        Dim constraints As GenericParameterAttributes = _\n            t.GenericParameterAttributes And _\n            GenericParameterAttributes.SpecialConstraintMask\n\n        If (constraints And GenericParameterAttributes.ReferenceTypeConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    ReferenceTypeConstraint&quot;)\n\n        If (constraints And GenericParameterAttributes.NotNullableValueTypeConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    NotNullableValueTypeConstraint&quot;)\n\n        If (constraints And GenericParameterAttributes.DefaultConstructorConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    DefaultConstructorConstraint&quot;)\n\n    End Sub \n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Type &#39;Sample&#39; is generic: False\n&#39;Type &#39;Sample&#39; is generic: True\n&#39;\n&#39;There are 2 elements in the List(Of Example).\n&#39;\n&#39;Listing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n&#39;\n&#39;Type parameter TFirst:\n&#39;    ReferenceTypeConstraint\n&#39;    DefaultConstructorConstraint\n&#39;\n&#39;Type parameter TSecond:\n&#39;    Interface constraint: IExampleA\n&#39;    Interface constraint: IExampleB\n&#39;    Base type constraint: ExampleBase\n</code></pre><pre><code class=\"lang-cs\" name=\"EmitGenericType#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Collections.Generic;\n\n// Define a trivial base class and two trivial interfaces \n// to use when demonstrating constraints.\n//\npublic class ExampleBase {}\n\npublic interface IExampleA {}\n\npublic interface IExampleB {}\n\n// Define a trivial type that can substitute for type parameter \n// TSecond.\n//\npublic class ExampleDerived : ExampleBase, IExampleA, IExampleB {}\n\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new AssemblyName(&quot;GenericEmitExample1&quot;);\n        AssemblyBuilder myAssembly = \n            myDomain.DefineDynamicAssembly(myAsmName, \n                AssemblyBuilderAccess.RunAndSave);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = \n            myAssembly.DefineDynamicModule(myAsmName.Name, \n               myAsmName.Name + &quot;.dll&quot;);\n\n        // Get type objects for the base class trivial interfaces to\n        // be used as constraints.\n        //\n        Type baseType = typeof(ExampleBase);\n        Type interfaceA = typeof(IExampleA);\n        Type interfaceB = typeof(IExampleB);\n                \n        // Define the sample type.\n        //\n        TypeBuilder myType = \n            myModule.DefineType(&quot;Sample&quot;, TypeAttributes.Public);\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n            myType.IsGenericType);\n\n        // Define type parameters for the type. Until you do this, \n        // the type is not generic, as the preceding and following \n        // WriteLine statements show. The type parameter names are\n        // specified as an array of strings. To make the code\n        // easier to read, each GenericTypeParameterBuilder is placed\n        // in a variable with the same name as the type parameter.\n        // \n        string[] typeParamNames = {&quot;TFirst&quot;, &quot;TSecond&quot;};\n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        GenericTypeParameterBuilder TFirst = typeParams[0];\n        GenericTypeParameterBuilder TSecond = typeParams[1];\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n            myType.IsGenericType);\n\n        // Apply constraints to the type parameters.\n        //\n        // A type that is substituted for the first parameter, TFirst,\n        // must be a reference type and must have a parameterless\n        // constructor.\n        TFirst.SetGenericParameterAttributes(\n            GenericParameterAttributes.DefaultConstructorConstraint |\n            GenericParameterAttributes.ReferenceTypeConstraint);\n\n        // A type that is substituted for the second type\n        // parameter must implement IExampleA and IExampleB, and\n        // inherit from the trivial test class ExampleBase. The\n        // interface constraints are specified as an array \n        // containing the interface types.\n        TSecond.SetBaseTypeConstraint(baseType);\n        Type[] interfaceTypes = {interfaceA, interfaceB};\n        TSecond.SetInterfaceConstraints(interfaceTypes);\n\n        // The following code adds a private field named ExampleField,\n        // of type TFirst.\n        FieldBuilder exField = \n            myType.DefineField(&quot;ExampleField&quot;, TFirst, \n                FieldAttributes.Private);\n\n        // Define a static method that takes an array of TFirst and \n        // returns a List&lt;TFirst&gt; containing all the elements of \n        // the array. To define this method it is necessary to create\n        // the type List&lt;TFirst&gt; by calling MakeGenericType on the\n        // generic type definition, List&lt;T&gt;. (The T is omitted with\n        // the typeof operator when you get the generic type \n        // definition.) The parameter type is created by using the\n        // MakeArrayType method. \n        //\n        Type listOf = typeof(List&lt;&gt;);\n        Type listOfTFirst = listOf.MakeGenericType(TFirst);\n        Type[] mParamTypes = {TFirst.MakeArrayType()};\n\n        MethodBuilder exMethod = \n            myType.DefineMethod(&quot;ExampleMethod&quot;, \n                MethodAttributes.Public | MethodAttributes.Static, \n                listOfTFirst, \n                mParamTypes);\n\n        // Emit the method body. \n        // The method body consists of just three opcodes, to load \n        // the input array onto the execution stack, to call the \n        // List&lt;TFirst&gt; constructor that takes IEnumerable&lt;TFirst&gt;,\n        // which does all the work of putting the input elements into\n        // the list, and to return, leaving the list on the stack. The\n        // hard work is getting the constructor.\n        // \n        // The GetConstructor method is not supported on a \n        // GenericTypeParameterBuilder, so it is not possible to get \n        // the constructor of List&lt;TFirst&gt; directly. There are two\n        // steps, first getting the constructor of List&lt;T&gt; and then\n        // calling a method that converts it to the corresponding \n        // constructor of List&lt;TFirst&gt;.\n        //\n        // The constructor needed here is the one that takes an\n        // IEnumerable&lt;T&gt;. Note, however, that this is not the \n        // generic type definition of IEnumerable&lt;T&gt;; instead, the\n        // T from List&lt;T&gt; must be substituted for the T of \n        // IEnumerable&lt;T&gt;. (This seems confusing only because both\n        // types have type parameters named T. That is why this example\n        // uses the somewhat silly names TFirst and TSecond.) To get\n        // the type of the constructor argument, take the generic\n        // type definition IEnumerable&lt;T&gt; (expressed as \n        // IEnumerable&lt;&gt; when you use the typeof operator) and \n        // call MakeGenericType with the first generic type parameter\n        // of List&lt;T&gt;. The constructor argument list must be passed\n        // as an array, with just one argument in this case.\n        // \n        // Now it is possible to get the constructor of List&lt;T&gt;,\n        // using GetConstructor on the generic type definition. To get\n        // the constructor of List&lt;TFirst&gt;, pass List&lt;TFirst&gt; and\n        // the constructor from List&lt;T&gt; to the static\n        // TypeBuilder.GetConstructor method.\n        //\n        ILGenerator ilgen = exMethod.GetILGenerator();\n        \n        Type ienumOf = typeof(IEnumerable&lt;&gt;);\n        Type TfromListOf = listOf.GetGenericArguments()[0];\n        Type ienumOfT = ienumOf.MakeGenericType(TfromListOf);\n        Type[] ctorArgs = {ienumOfT};\n\n        ConstructorInfo ctorPrep = listOf.GetConstructor(ctorArgs);\n        ConstructorInfo ctor = \n            TypeBuilder.GetConstructor(listOfTFirst, ctorPrep);\n\n        ilgen.Emit(OpCodes.Ldarg_0);\n        ilgen.Emit(OpCodes.Newobj, ctor);\n        ilgen.Emit(OpCodes.Ret);\n\n        // Create the type and save the assembly. \n        Type finished = myType.CreateType();\n        myAssembly.Save(myAsmName.Name+&quot;.dll&quot;);\n\n        // Invoke the method.\n        // ExampleMethod is not generic, but the type it belongs to is\n        // generic, so in order to get a MethodInfo that can be invoked\n        // it is necessary to create a constructed type. The Example \n        // class satisfies the constraints on TFirst, because it is a \n        // reference type and has a default constructor. In order to\n        // have a class that satisfies the constraints on TSecond, \n        // this code example defines the ExampleDerived type. These\n        // two types are passed to MakeGenericMethod to create the\n        // constructed type.\n        //\n        Type[] typeArgs = {typeof(Example), typeof(ExampleDerived)};\n        Type constructed = finished.MakeGenericType(typeArgs);\n        MethodInfo mi = constructed.GetMethod(&quot;ExampleMethod&quot;);\n\n        // Create an array of Example objects, as input to the generic\n        // method. This array must be passed as the only element of an \n        // array of arguments. The first argument of Invoke is \n        // null, because ExampleMethod is static. Display the count\n        // on the resulting List&lt;Example&gt;.\n        // \n        Example[] input = {new Example(), new Example()};\n        object[] arguments = {input};\n\n        List&lt;Example&gt; listX = \n            (List&lt;Example&gt;) mi.Invoke(null, arguments);\n\n        Console.WriteLine(\n            &quot;<br>There are {0} elements in the List&lt;Example&gt;.&quot;, \n            listX.Count);\n\n        DisplayGenericParameters(finished);\n    }\n\n    private static void DisplayGenericParameters(Type t)\n    {\n        if (!t.IsGenericType)\n        {\n            Console.WriteLine(&quot;Type &#39;{0}&#39; is not generic.&quot;);\n            return;\n        }\n        if (!t.IsGenericTypeDefinition) \n        {\n            t = t.GetGenericTypeDefinition();\n        }\n\n        Type[] typeParameters = t.GetGenericArguments();\n        Console.WriteLine(&quot;<br>Listing {0} type parameters for type &#39;{1}&#39;.&quot;,\n            typeParameters.Length, t);\n\n        foreach( Type tParam in typeParameters )\n        {\n            Console.WriteLine(&quot;\\r<br>Type parameter {0}:&quot;, tParam.ToString());\n\n            foreach( Type c in tParam.GetGenericParameterConstraints() )\n            {\n                if (c.IsInterface)\n                {\n                    Console.WriteLine(&quot;    Interface constraint: {0}&quot;, c);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;    Base type constraint: {0}&quot;, c);\n                }\n            }\n\n            ListConstraintAttributes(tParam);\n        }\n    }\n\n    // List the constraint flags. The GenericParameterAttributes\n    // enumeration contains two sets of attributes, variance and\n    // constraints. For this example, only constraints are used.\n    //\n    private static void ListConstraintAttributes(Type t)\n    {\n        // Mask off the constraint flags. \n        GenericParameterAttributes constraints = \n            t.GenericParameterAttributes &amp; GenericParameterAttributes.SpecialConstraintMask;\n\n        if ((constraints &amp; GenericParameterAttributes.ReferenceTypeConstraint)\n            != GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    ReferenceTypeConstraint&quot;);\n        }\n\n        if ((constraints &amp; GenericParameterAttributes.NotNullableValueTypeConstraint)\n            != GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    NotNullableValueTypeConstraint&quot;);\n        }\n\n        if ((constraints &amp; GenericParameterAttributes.DefaultConstructorConstraint)\n            !=GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    DefaultConstructorConstraint&quot;);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nType &#39;Sample&#39; is generic: False\nType &#39;Sample&#39; is generic: True\n\nThere are 2 elements in the List&lt;Example&gt;.\n\nListing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n\nType parameter TFirst:\n    ReferenceTypeConstraint\n    DefaultConstructorConstraint\n\nType parameter TSecond:\n    Interface constraint: IExampleA\n    Interface constraint: IExampleB\n    Base type constraint: ExampleBase\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(CustomAttributeBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Set a custom attribute using a custom attribute builder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>customBuilder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of a helper class that defines the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>customBuilder</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(ConstructorInfo,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets a custom attribute using a specified custom attribute blob.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>con</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor for the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryAttribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte blob representing the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>binaryAttribute</code> is a null reference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For details on how to format <code>binaryAttribute</code>, see the documentation for Partition II: Metadata Definition and Semantics. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetGenericParameterAttributes_System_Reflection_GenericParameterAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetGenericParameterAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetGenericParameterAttributes(GenericParameterAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetGenericParameterAttributes (System.Reflection.GenericParameterAttributes genericParameterAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericParameterAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.genericparameterattributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.genericparameterattributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a> values that represent the variance characteristics and special constraints of the generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.  </p>\n<p> Special constraints cannot be retrieved using methods of the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> class. Once you have created the generic type that contains the type parameter, you can use its <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method. To get the special constraints for each type parameter, use the <a class=\"xref\" href=\"system.type#System_Type_GenericParameterAttributes_\" data-linktype=\"relative-path\">GenericParameterAttributes</a> property.  </p>\n<p> The <a class=\"xref\" href=\"system.reflection.genericparameterattributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL). Visual Basic and C# currently do not support covariance and contravariance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a generic type with two type parameters, the first of which is constrained to have a default constructor and to be a reference type, and saves them in the assembly GenericEmitExample1.dll. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see <a href=\"../Topic/How%20to:%20Define%20a%20Generic%20Type%20with%20Reflection%20Emit.md\" data-linktype=\"relative-path\">How to: Define a Generic Type with Reflection Emit</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EmitGenericType#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Collections::Generic;\n\n// Dummy class to satisfy TFirst constraints.\n//\npublic ref class Example {};\n\n// Define a trivial base class and two trivial interfaces \n// to use when demonstrating constraints.\n//\npublic ref class ExampleBase {};\npublic interface class IExampleA {};\npublic interface class IExampleB {};\n\n// Define a trivial type that can substitute for type parameter \n// TSecond.\n//\npublic ref class ExampleDerived : ExampleBase, IExampleA, IExampleB {};\n\n// List the constraint flags. The GenericParameterAttributes\n// enumeration contains two sets of attributes, variance and\n// constraints. For this example, only constraints are used.\n//\nstatic void ListConstraintAttributes( Type^ t )\n{\n   // Mask off the constraint flags. \n   GenericParameterAttributes constraints = \n       t-&gt;GenericParameterAttributes &amp; \n       GenericParameterAttributes::SpecialConstraintMask;\n\n   if ((constraints &amp; GenericParameterAttributes::ReferenceTypeConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    ReferenceTypeConstraint&quot;);\n\n   if ((constraints &amp; GenericParameterAttributes::NotNullableValueTypeConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    NotNullableValueTypeConstraint&quot;);\n\n   if ((constraints &amp; GenericParameterAttributes::DefaultConstructorConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    DefaultConstructorConstraint&quot;);\n}\n\nstatic void DisplayGenericParameters( Type^ t )\n{\n   if (!t-&gt;IsGenericType)\n   {\n       Console::WriteLine( L&quot;Type &#39;{0}&#39; is not generic.&quot; );\n       return;\n   }\n   if (!t-&gt;IsGenericTypeDefinition)\n       t = t-&gt;GetGenericTypeDefinition();\n\n   array&lt;Type^&gt;^ typeParameters = t-&gt;GetGenericArguments();\n   Console::WriteLine( L&quot;\\r<br>Listing {0} type parameters for type &#39;{1}&#39;.&quot;, \n       typeParameters-&gt;Length, t );\n\n   for each ( Type^ tParam in typeParameters )\n   {\n       Console::WriteLine( L&quot;\\r<br>Type parameter {0}:&quot;, \n           tParam-&gt;ToString() );\n\n       for each (Type^ c in tParam-&gt;GetGenericParameterConstraints())\n       {\n           if (c-&gt;IsInterface)\n               Console::WriteLine( L&quot;    Interface constraint: {0}&quot;, c);\n           else\n               Console::WriteLine( L&quot;    Base type constraint: {0}&quot;, c);\n       }\n       ListConstraintAttributes(tParam);\n   }\n}\n\nvoid main()\n{\n   // Define a dynamic assembly to contain the sample type. The\n   // assembly will be run and also saved to disk, so\n   // AssemblyBuilderAccess.RunAndSave is specified.\n   //\n   AppDomain^ myDomain = AppDomain::CurrentDomain;\n   AssemblyName^ myAsmName = gcnew AssemblyName( L&quot;GenericEmitExample1&quot; );\n   AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( \n       myAsmName, AssemblyBuilderAccess::RunAndSave );\n\n   // An assembly is made up of executable modules. For a single-\n   // module assembly, the module name and file name are the same \n   // as the assembly name. \n   //\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( \n       myAsmName-&gt;Name, String::Concat( myAsmName-&gt;Name, L&quot;.dll&quot; ) );\n\n   // Get type objects for the base class trivial interfaces to\n   // be used as constraints.\n   //\n   Type^ baseType = ExampleBase::typeid; \n   Type^ interfaceA = IExampleA::typeid; \n   Type^ interfaceB = IExampleB::typeid;\n   \n   // Define the sample type.\n   //\n   TypeBuilder^ myType = myModule-&gt;DefineType( L&quot;Sample&quot;, \n       TypeAttributes::Public );\n   \n   Console::WriteLine( L&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n       myType-&gt;IsGenericType );\n   \n   // Define type parameters for the type. Until you do this, \n   // the type is not generic, as the preceding and following \n   // WriteLine statements show. The type parameter names are\n   // specified as an array of strings. To make the code\n   // easier to read, each GenericTypeParameterBuilder is placed\n   // in a variable with the same name as the type parameter.\n   // \n   array&lt;String^&gt;^typeParamNames = {L&quot;TFirst&quot;,L&quot;TSecond&quot;};\n   array&lt;GenericTypeParameterBuilder^&gt;^typeParams = \n       myType-&gt;DefineGenericParameters( typeParamNames );\n\n   GenericTypeParameterBuilder^ TFirst = typeParams[0];\n   GenericTypeParameterBuilder^ TSecond = typeParams[1];\n\n   Console::WriteLine( L&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n       myType-&gt;IsGenericType );\n   \n   // Apply constraints to the type parameters.\n   //\n   // A type that is substituted for the first parameter, TFirst,\n   // must be a reference type and must have a parameterless\n   // constructor.\n   TFirst-&gt;SetGenericParameterAttributes( \n       GenericParameterAttributes::DefaultConstructorConstraint | \n       GenericParameterAttributes::ReferenceTypeConstraint \n   );\n\n   // A type that is substituted for the second type\n   // parameter must implement IExampleA and IExampleB, and\n   // inherit from the trivial test class ExampleBase. The\n   // interface constraints are specified as an array\n   // containing the interface types. \n   array&lt;Type^&gt;^interfaceTypes = { interfaceA, interfaceB };\n   TSecond-&gt;SetInterfaceConstraints( interfaceTypes );\n   TSecond-&gt;SetBaseTypeConstraint( baseType );\n\n   // The following code adds a private field named ExampleField,\n   // of type TFirst.\n   FieldBuilder^ exField = \n       myType-&gt;DefineField(&quot;ExampleField&quot;, TFirst, \n           FieldAttributes::Private);\n\n   // Define a static method that takes an array of TFirst and \n   // returns a List&lt;TFirst&gt; containing all the elements of \n   // the array. To define this method it is necessary to create\n   // the type List&lt;TFirst&gt; by calling MakeGenericType on the\n   // generic type definition, generic&lt;T&gt; List. \n   // The parameter type is created by using the\n   // MakeArrayType method. \n   //\n   Type^ listOf = List::typeid;\n   Type^ listOfTFirst = listOf-&gt;MakeGenericType(TFirst);\n   array&lt;Type^&gt;^ mParamTypes = { TFirst-&gt;MakeArrayType() };\n\n   MethodBuilder^ exMethod = \n       myType-&gt;DefineMethod(&quot;ExampleMethod&quot;, \n           MethodAttributes::Public | MethodAttributes::Static, \n           listOfTFirst, \n           mParamTypes);\n\n   // Emit the method body. \n   // The method body consists of just three opcodes, to load \n   // the input array onto the execution stack, to call the \n   // List&lt;TFirst&gt; constructor that takes IEnumerable&lt;TFirst&gt;,\n   // which does all the work of putting the input elements into\n   // the list, and to return, leaving the list on the stack. The\n   // hard work is getting the constructor.\n   // \n   // The GetConstructor method is not supported on a \n   // GenericTypeParameterBuilder, so it is not possible to get \n   // the constructor of List&lt;TFirst&gt; directly. There are two\n   // steps, first getting the constructor of generic&lt;T&gt; List and then\n   // calling a method that converts it to the corresponding \n   // constructor of List&lt;TFirst&gt;.\n   //\n   // The constructor needed here is the one that takes an\n   // IEnumerable&lt;T&gt;. Note, however, that this is not the \n   // generic type definition of generic&lt;T&gt; IEnumerable; instead, the\n   // T from generic&lt;T&gt; List must be substituted for the T of \n   // generic&lt;T&gt; IEnumerable. (This seems confusing only because both\n   // types have type parameters named T. That is why this example\n   // uses the somewhat silly names TFirst and TSecond.) To get\n   // the type of the constructor argument, take the generic\n   // type definition generic&lt;T&gt; IEnumerable and \n   // call MakeGenericType with the first generic type parameter\n   // of generic&lt;T&gt; List. The constructor argument list must be passed\n   // as an array, with just one argument in this case.\n   // \n   // Now it is possible to get the constructor of generic&lt;T&gt; List,\n   // using GetConstructor on the generic type definition. To get\n   // the constructor of List&lt;TFirst&gt;, pass List&lt;TFirst&gt; and\n   // the constructor from generic&lt;T&gt; List to the static\n   // TypeBuilder.GetConstructor method.\n   //\n   ILGenerator^ ilgen = exMethod-&gt;GetILGenerator();\n        \n   Type^ ienumOf = IEnumerable::typeid;\n   Type^ TfromListOf = listOf-&gt;GetGenericArguments()[0];\n   Type^ ienumOfT = ienumOf-&gt;MakeGenericType(TfromListOf);\n   array&lt;Type^&gt;^ ctorArgs = {ienumOfT};\n\n   ConstructorInfo^ ctorPrep = listOf-&gt;GetConstructor(ctorArgs);\n   ConstructorInfo^ ctor = \n       TypeBuilder::GetConstructor(listOfTFirst, ctorPrep);\n\n   ilgen-&gt;Emit(OpCodes::Ldarg_0);\n   ilgen-&gt;Emit(OpCodes::Newobj, ctor);\n   ilgen-&gt;Emit(OpCodes::Ret);\n\n   // Create the type and save the assembly. \n   Type^ finished = myType-&gt;CreateType();\n   myAssembly-&gt;Save( String::Concat( myAsmName-&gt;Name, L&quot;.dll&quot; ) );\n\n   // Invoke the method.\n   // ExampleMethod is not generic, but the type it belongs to is\n   // generic, so in order to get a MethodInfo that can be invoked\n   // it is necessary to create a constructed type. The Example \n   // class satisfies the constraints on TFirst, because it is a \n   // reference type and has a default constructor. In order to\n   // have a class that satisfies the constraints on TSecond, \n   // this code example defines the ExampleDerived type. These\n   // two types are passed to MakeGenericMethod to create the\n   // constructed type.\n   //\n   array&lt;Type^&gt;^ typeArgs = \n       { Example::typeid, ExampleDerived::typeid };\n   Type^ constructed = finished-&gt;MakeGenericType(typeArgs);\n   MethodInfo^ mi = constructed-&gt;GetMethod(&quot;ExampleMethod&quot;);\n\n   // Create an array of Example objects, as input to the generic\n   // method. This array must be passed as the only element of an \n   // array of arguments. The first argument of Invoke is \n   // null, because ExampleMethod is static. Display the count\n   // on the resulting List&lt;Example&gt;.\n   // \n   array&lt;Example^&gt;^ input = { gcnew Example(), gcnew Example() };\n   array&lt;Object^&gt;^ arguments = { input };\n\n   List&lt;Example^&gt;^ listX = \n       (List&lt;Example^&gt;^) mi-&gt;Invoke(nullptr, arguments);\n\n   Console::WriteLine(\n       &quot;<br>There are {0} elements in the List&lt;Example&gt;.&quot;, \n       listX-&gt;Count);\n\n   DisplayGenericParameters(finished);\n}\n\n/* This code example produces the following output:\n\nType &#39;Sample&#39; is generic: False\nType &#39;Sample&#39; is generic: True\n\nThere are 2 elements in the List&lt;Example&gt;.\n\nListing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n\nType parameter TFirst:\n    ReferenceTypeConstraint\n    DefaultConstructorConstraint\n\nType parameter TSecond:\n    Interface constraint: IExampleA\n    Interface constraint: IExampleB\n    Base type constraint: ExampleBase\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"EmitGenericType#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Collections.Generic\n\n&#39; Define a trivial base class and two trivial interfaces \n&#39; to use when demonstrating constraints.\n&#39;\nPublic Class ExampleBase\nEnd Class\n\nPublic Interface IExampleA\nEnd Interface\n\nPublic Interface IExampleB\nEnd Interface\n\n&#39; Define a trivial type that can substitute for type parameter \n&#39; TSecond.\n&#39;\nPublic Class ExampleDerived\n    Inherits ExampleBase\n    Implements IExampleA, IExampleB\nEnd Class\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;GenericEmitExample1&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.RunAndSave)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Get type objects for the base class trivial interfaces to\n        &#39; be used as constraints.\n        &#39;\n        Dim baseType As Type = GetType(ExampleBase)\n        Dim interfaceA As Type = GetType(IExampleA)\n        Dim interfaceB As Type = GetType(IExampleB)\n                \n        &#39; Define the sample type.\n        &#39;\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public)\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, _\n            myType.IsGenericType)\n\n        &#39; Define type parameters for the type. Until you do this, \n        &#39; the type is not generic, as the preceding and following \n        &#39; WriteLine statements show. The type parameter names are\n        &#39; specified as an array of strings. To make the code\n        &#39; easier to read, each GenericTypeParameterBuilder is placed\n        &#39; in a variable with the same name as the type parameter.\n        &#39; \n        Dim typeParamNames() As String = {&quot;TFirst&quot;, &quot;TSecond&quot;}\n        Dim typeParams() As GenericTypeParameterBuilder = _\n            myType.DefineGenericParameters(typeParamNames)\n\n        Dim TFirst As GenericTypeParameterBuilder = typeParams(0)\n        Dim TSecond As GenericTypeParameterBuilder = typeParams(1)\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, _\n            myType.IsGenericType)\n\n        &#39; Apply constraints to the type parameters.\n        &#39;\n        &#39; A type that is substituted for the first parameter, TFirst,\n        &#39; must be a reference type and must have a parameterless\n        &#39; constructor.\n        TFirst.SetGenericParameterAttributes( _\n            GenericParameterAttributes.DefaultConstructorConstraint _\n            Or GenericParameterAttributes.ReferenceTypeConstraint)\n\n        &#39; A type that is substituted for the second type\n        &#39; parameter must implement IExampleA and IExampleB, and\n        &#39; inherit from the trivial test class ExampleBase. The\n        &#39; interface constraints are specified as an array \n        &#39; containing the interface types.\n        TSecond.SetBaseTypeConstraint(baseType)\n        Dim interfaceTypes() As Type = {interfaceA, interfaceB}\n        TSecond.SetInterfaceConstraints(interfaceTypes)\n\n        &#39; The following code adds a private field named ExampleField,\n        &#39; of type TFirst.\n        Dim exField As FieldBuilder = _\n            myType.DefineField(&quot;ExampleField&quot;, TFirst, _\n                FieldAttributes.Private)\n\n        &#39; Define a Shared method that takes an array of TFirst and \n        &#39; returns a List(Of TFirst) containing all the elements of \n        &#39; the array. To define this method it is necessary to create\n        &#39; the type List(Of TFirst) by calling MakeGenericType on the\n        &#39; generic type definition, List(Of T). (The T is omitted with\n        &#39; the GetType operator when you get the generic type \n        &#39; definition.) The parameter type is created by using the\n        &#39; MakeArrayType method. \n        &#39;\n        Dim listOf As Type = GetType(List(Of ))\n        Dim listOfTFirst As Type = listOf.MakeGenericType(TFirst)\n        Dim mParamTypes() As Type = { TFirst.MakeArrayType() }\n\n        Dim exMethod As MethodBuilder = _\n            myType.DefineMethod(&quot;ExampleMethod&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static, _\n                listOfTFirst, _\n                mParamTypes)\n\n        &#39; Emit the method body. \n        &#39; The method body consists of just three opcodes, to load \n        &#39; the input array onto the execution stack, to call the \n        &#39; List(Of TFirst) constructor that takes IEnumerable(Of TFirst),\n        &#39; which does all the work of putting the input elements into\n        &#39; the list, and to return, leaving the list on the stack. The\n        &#39; hard work is getting the constructor.\n        &#39; \n        &#39; The GetConstructor method is not supported on a \n        &#39; GenericTypeParameterBuilder, so it is not possible to get \n        &#39; the constructor of List(Of TFirst) directly. There are two\n        &#39; steps, first getting the constructor of List(Of T) and then\n        &#39; calling a method that converts it to the corresponding \n        &#39; constructor of List(Of TFirst).\n        &#39;\n        &#39; The constructor needed here is the one that takes an\n        &#39; IEnumerable(Of T). Note, however, that this is not the \n        &#39; generic type definition of IEnumerable(Of T); instead, the\n        &#39; T from List(Of T) must be substituted for the T of \n        &#39; IEnumerable(Of T). (This seems confusing only because both\n        &#39; types have type parameters named T. That is why this example\n        &#39; uses the somewhat silly names TFirst and TSecond.) To get\n        &#39; the type of the constructor argument, take the generic\n        &#39; type definition IEnumerable(Of T) (expressed as \n        &#39; IEnumerable(Of ) when you use the GetType operator) and \n        &#39; call MakeGenericType with the first generic type parameter\n        &#39; of List(Of T). The constructor argument list must be passed\n        &#39; as an array, with just one argument in this case.\n        &#39; \n        &#39; Now it is possible to get the constructor of List(Of T),\n        &#39; using GetConstructor on the generic type definition. To get\n        &#39; the constructor of List(Of TFirst), pass List(Of TFirst) and\n        &#39; the constructor from List(Of T) to the static\n        &#39; TypeBuilder.GetConstructor method.\n        &#39;\n        Dim ilgen As ILGenerator = exMethod.GetILGenerator()\n        \n        Dim ienumOf As Type = GetType(IEnumerable(Of ))\n        Dim listOfTParams() As Type = listOf.GetGenericArguments()\n        Dim TfromListOf As Type = listOfTParams(0)\n        Dim ienumOfT As Type = ienumOf.MakeGenericType(TfromListOf)\n        Dim ctorArgs() As Type = { ienumOfT }\n\n        Dim ctorPrep As ConstructorInfo = _\n            listOf.GetConstructor(ctorArgs)\n        Dim ctor As ConstructorInfo = _\n            TypeBuilder.GetConstructor(listOfTFirst, ctorPrep)\n\n        ilgen.Emit(OpCodes.Ldarg_0)\n        ilgen.Emit(OpCodes.Newobj, ctor)\n        ilgen.Emit(OpCodes.Ret)\n\n        &#39; Create the type and save the assembly. \n        Dim finished As Type = myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Invoke the method.\n        &#39; ExampleMethod is not generic, but the type it belongs to is\n        &#39; generic, so in order to get a MethodInfo that can be invoked\n        &#39; it is necessary to create a constructed type. The Example \n        &#39; class satisfies the constraints on TFirst, because it is a \n        &#39; reference type and has a default constructor. In order to\n        &#39; have a class that satisfies the constraints on TSecond, \n        &#39; this code example defines the ExampleDerived type. These\n        &#39; two types are passed to MakeGenericMethod to create the\n        &#39; constructed type.\n        &#39;\n        Dim typeArgs() As Type = _\n            { GetType(Example), GetType(ExampleDerived) }\n        Dim constructed As Type = finished.MakeGenericType(typeArgs)\n        Dim mi As MethodInfo = constructed.GetMethod(&quot;ExampleMethod&quot;)\n\n        &#39; Create an array of Example objects, as input to the generic\n        &#39; method. This array must be passed as the only element of an \n        &#39; array of arguments. The first argument of Invoke is \n        &#39; Nothing, because ExampleMethod is Shared. Display the count\n        &#39; on the resulting List(Of Example).\n        &#39; \n        Dim input() As Example = { New Example(), New Example() }\n        Dim arguments() As Object = { input }\n\n        Dim listX As List(Of Example) = mi.Invoke(Nothing, arguments)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;There are {0} elements in the List(Of Example).&quot;, _\n            listX.Count _ \n        )\n\n        DisplayGenericParameters(finished)\n    End Sub\n\n    Private Shared Sub DisplayGenericParameters(ByVal t As Type)\n\n        If Not t.IsGenericType Then\n            Console.WriteLine(&quot;Type &#39;{0}&#39; is not generic.&quot;)\n            Return\n        End If\n        If Not t.IsGenericTypeDefinition Then _\n            t = t.GetGenericTypeDefinition()\n\n        Dim typeParameters() As Type = t.GetGenericArguments()\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Listing {0} type parameters for type &#39;{1}&#39;.&quot;, _\n            typeParameters.Length, t)\n\n        For Each tParam As Type In typeParameters\n\n            Console.WriteLine(vbCrLf &amp; &quot;Type parameter {0}:&quot;, _\n                tParam.ToString())\n\n            For Each c As Type In tParam.GetGenericParameterConstraints()\n                If c.IsInterface Then\n                    Console.WriteLine(&quot;    Interface constraint: {0}&quot;, c)\n                Else\n                    Console.WriteLine(&quot;    Base type constraint: {0}&quot;, c)\n                End If\n            Next \n\n            ListConstraintAttributes(tParam)\n        Next tParam\n    End Sub\n\n    &#39; List the constraint flags. The GenericParameterAttributes\n    &#39; enumeration contains two sets of attributes, variance and\n    &#39; constraints. For this example, only constraints are used.\n    &#39;\n    Private Shared Sub ListConstraintAttributes(ByVal t As Type)\n\n        &#39; Mask off the constraint flags. \n        Dim constraints As GenericParameterAttributes = _\n            t.GenericParameterAttributes And _\n            GenericParameterAttributes.SpecialConstraintMask\n\n        If (constraints And GenericParameterAttributes.ReferenceTypeConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    ReferenceTypeConstraint&quot;)\n\n        If (constraints And GenericParameterAttributes.NotNullableValueTypeConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    NotNullableValueTypeConstraint&quot;)\n\n        If (constraints And GenericParameterAttributes.DefaultConstructorConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    DefaultConstructorConstraint&quot;)\n\n    End Sub \n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Type &#39;Sample&#39; is generic: False\n&#39;Type &#39;Sample&#39; is generic: True\n&#39;\n&#39;There are 2 elements in the List(Of Example).\n&#39;\n&#39;Listing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n&#39;\n&#39;Type parameter TFirst:\n&#39;    ReferenceTypeConstraint\n&#39;    DefaultConstructorConstraint\n&#39;\n&#39;Type parameter TSecond:\n&#39;    Interface constraint: IExampleA\n&#39;    Interface constraint: IExampleB\n&#39;    Base type constraint: ExampleBase\n</code></pre><pre><code class=\"lang-cs\" name=\"EmitGenericType#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Collections.Generic;\n\n// Define a trivial base class and two trivial interfaces \n// to use when demonstrating constraints.\n//\npublic class ExampleBase {}\n\npublic interface IExampleA {}\n\npublic interface IExampleB {}\n\n// Define a trivial type that can substitute for type parameter \n// TSecond.\n//\npublic class ExampleDerived : ExampleBase, IExampleA, IExampleB {}\n\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new AssemblyName(&quot;GenericEmitExample1&quot;);\n        AssemblyBuilder myAssembly = \n            myDomain.DefineDynamicAssembly(myAsmName, \n                AssemblyBuilderAccess.RunAndSave);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = \n            myAssembly.DefineDynamicModule(myAsmName.Name, \n               myAsmName.Name + &quot;.dll&quot;);\n\n        // Get type objects for the base class trivial interfaces to\n        // be used as constraints.\n        //\n        Type baseType = typeof(ExampleBase);\n        Type interfaceA = typeof(IExampleA);\n        Type interfaceB = typeof(IExampleB);\n                \n        // Define the sample type.\n        //\n        TypeBuilder myType = \n            myModule.DefineType(&quot;Sample&quot;, TypeAttributes.Public);\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n            myType.IsGenericType);\n\n        // Define type parameters for the type. Until you do this, \n        // the type is not generic, as the preceding and following \n        // WriteLine statements show. The type parameter names are\n        // specified as an array of strings. To make the code\n        // easier to read, each GenericTypeParameterBuilder is placed\n        // in a variable with the same name as the type parameter.\n        // \n        string[] typeParamNames = {&quot;TFirst&quot;, &quot;TSecond&quot;};\n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        GenericTypeParameterBuilder TFirst = typeParams[0];\n        GenericTypeParameterBuilder TSecond = typeParams[1];\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n            myType.IsGenericType);\n\n        // Apply constraints to the type parameters.\n        //\n        // A type that is substituted for the first parameter, TFirst,\n        // must be a reference type and must have a parameterless\n        // constructor.\n        TFirst.SetGenericParameterAttributes(\n            GenericParameterAttributes.DefaultConstructorConstraint |\n            GenericParameterAttributes.ReferenceTypeConstraint);\n\n        // A type that is substituted for the second type\n        // parameter must implement IExampleA and IExampleB, and\n        // inherit from the trivial test class ExampleBase. The\n        // interface constraints are specified as an array \n        // containing the interface types.\n        TSecond.SetBaseTypeConstraint(baseType);\n        Type[] interfaceTypes = {interfaceA, interfaceB};\n        TSecond.SetInterfaceConstraints(interfaceTypes);\n\n        // The following code adds a private field named ExampleField,\n        // of type TFirst.\n        FieldBuilder exField = \n            myType.DefineField(&quot;ExampleField&quot;, TFirst, \n                FieldAttributes.Private);\n\n        // Define a static method that takes an array of TFirst and \n        // returns a List&lt;TFirst&gt; containing all the elements of \n        // the array. To define this method it is necessary to create\n        // the type List&lt;TFirst&gt; by calling MakeGenericType on the\n        // generic type definition, List&lt;T&gt;. (The T is omitted with\n        // the typeof operator when you get the generic type \n        // definition.) The parameter type is created by using the\n        // MakeArrayType method. \n        //\n        Type listOf = typeof(List&lt;&gt;);\n        Type listOfTFirst = listOf.MakeGenericType(TFirst);\n        Type[] mParamTypes = {TFirst.MakeArrayType()};\n\n        MethodBuilder exMethod = \n            myType.DefineMethod(&quot;ExampleMethod&quot;, \n                MethodAttributes.Public | MethodAttributes.Static, \n                listOfTFirst, \n                mParamTypes);\n\n        // Emit the method body. \n        // The method body consists of just three opcodes, to load \n        // the input array onto the execution stack, to call the \n        // List&lt;TFirst&gt; constructor that takes IEnumerable&lt;TFirst&gt;,\n        // which does all the work of putting the input elements into\n        // the list, and to return, leaving the list on the stack. The\n        // hard work is getting the constructor.\n        // \n        // The GetConstructor method is not supported on a \n        // GenericTypeParameterBuilder, so it is not possible to get \n        // the constructor of List&lt;TFirst&gt; directly. There are two\n        // steps, first getting the constructor of List&lt;T&gt; and then\n        // calling a method that converts it to the corresponding \n        // constructor of List&lt;TFirst&gt;.\n        //\n        // The constructor needed here is the one that takes an\n        // IEnumerable&lt;T&gt;. Note, however, that this is not the \n        // generic type definition of IEnumerable&lt;T&gt;; instead, the\n        // T from List&lt;T&gt; must be substituted for the T of \n        // IEnumerable&lt;T&gt;. (This seems confusing only because both\n        // types have type parameters named T. That is why this example\n        // uses the somewhat silly names TFirst and TSecond.) To get\n        // the type of the constructor argument, take the generic\n        // type definition IEnumerable&lt;T&gt; (expressed as \n        // IEnumerable&lt;&gt; when you use the typeof operator) and \n        // call MakeGenericType with the first generic type parameter\n        // of List&lt;T&gt;. The constructor argument list must be passed\n        // as an array, with just one argument in this case.\n        // \n        // Now it is possible to get the constructor of List&lt;T&gt;,\n        // using GetConstructor on the generic type definition. To get\n        // the constructor of List&lt;TFirst&gt;, pass List&lt;TFirst&gt; and\n        // the constructor from List&lt;T&gt; to the static\n        // TypeBuilder.GetConstructor method.\n        //\n        ILGenerator ilgen = exMethod.GetILGenerator();\n        \n        Type ienumOf = typeof(IEnumerable&lt;&gt;);\n        Type TfromListOf = listOf.GetGenericArguments()[0];\n        Type ienumOfT = ienumOf.MakeGenericType(TfromListOf);\n        Type[] ctorArgs = {ienumOfT};\n\n        ConstructorInfo ctorPrep = listOf.GetConstructor(ctorArgs);\n        ConstructorInfo ctor = \n            TypeBuilder.GetConstructor(listOfTFirst, ctorPrep);\n\n        ilgen.Emit(OpCodes.Ldarg_0);\n        ilgen.Emit(OpCodes.Newobj, ctor);\n        ilgen.Emit(OpCodes.Ret);\n\n        // Create the type and save the assembly. \n        Type finished = myType.CreateType();\n        myAssembly.Save(myAsmName.Name+&quot;.dll&quot;);\n\n        // Invoke the method.\n        // ExampleMethod is not generic, but the type it belongs to is\n        // generic, so in order to get a MethodInfo that can be invoked\n        // it is necessary to create a constructed type. The Example \n        // class satisfies the constraints on TFirst, because it is a \n        // reference type and has a default constructor. In order to\n        // have a class that satisfies the constraints on TSecond, \n        // this code example defines the ExampleDerived type. These\n        // two types are passed to MakeGenericMethod to create the\n        // constructed type.\n        //\n        Type[] typeArgs = {typeof(Example), typeof(ExampleDerived)};\n        Type constructed = finished.MakeGenericType(typeArgs);\n        MethodInfo mi = constructed.GetMethod(&quot;ExampleMethod&quot;);\n\n        // Create an array of Example objects, as input to the generic\n        // method. This array must be passed as the only element of an \n        // array of arguments. The first argument of Invoke is \n        // null, because ExampleMethod is static. Display the count\n        // on the resulting List&lt;Example&gt;.\n        // \n        Example[] input = {new Example(), new Example()};\n        object[] arguments = {input};\n\n        List&lt;Example&gt; listX = \n            (List&lt;Example&gt;) mi.Invoke(null, arguments);\n\n        Console.WriteLine(\n            &quot;<br>There are {0} elements in the List&lt;Example&gt;.&quot;, \n            listX.Count);\n\n        DisplayGenericParameters(finished);\n    }\n\n    private static void DisplayGenericParameters(Type t)\n    {\n        if (!t.IsGenericType)\n        {\n            Console.WriteLine(&quot;Type &#39;{0}&#39; is not generic.&quot;);\n            return;\n        }\n        if (!t.IsGenericTypeDefinition) \n        {\n            t = t.GetGenericTypeDefinition();\n        }\n\n        Type[] typeParameters = t.GetGenericArguments();\n        Console.WriteLine(&quot;<br>Listing {0} type parameters for type &#39;{1}&#39;.&quot;,\n            typeParameters.Length, t);\n\n        foreach( Type tParam in typeParameters )\n        {\n            Console.WriteLine(&quot;\\r<br>Type parameter {0}:&quot;, tParam.ToString());\n\n            foreach( Type c in tParam.GetGenericParameterConstraints() )\n            {\n                if (c.IsInterface)\n                {\n                    Console.WriteLine(&quot;    Interface constraint: {0}&quot;, c);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;    Base type constraint: {0}&quot;, c);\n                }\n            }\n\n            ListConstraintAttributes(tParam);\n        }\n    }\n\n    // List the constraint flags. The GenericParameterAttributes\n    // enumeration contains two sets of attributes, variance and\n    // constraints. For this example, only constraints are used.\n    //\n    private static void ListConstraintAttributes(Type t)\n    {\n        // Mask off the constraint flags. \n        GenericParameterAttributes constraints = \n            t.GenericParameterAttributes &amp; GenericParameterAttributes.SpecialConstraintMask;\n\n        if ((constraints &amp; GenericParameterAttributes.ReferenceTypeConstraint)\n            != GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    ReferenceTypeConstraint&quot;);\n        }\n\n        if ((constraints &amp; GenericParameterAttributes.NotNullableValueTypeConstraint)\n            != GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    NotNullableValueTypeConstraint&quot;);\n        }\n\n        if ((constraints &amp; GenericParameterAttributes.DefaultConstructorConstraint)\n            !=GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    DefaultConstructorConstraint&quot;);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nType &#39;Sample&#39; is generic: False\nType &#39;Sample&#39; is generic: True\n\nThere are 2 elements in the List&lt;Example&gt;.\n\nListing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n\nType parameter TFirst:\n    ReferenceTypeConstraint\n    DefaultConstructorConstraint\n\nType parameter TSecond:\n    Interface constraint: IExampleA\n    Interface constraint: IExampleB\n    Base type constraint: ExampleBase\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetInterfaceConstraints_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_SetInterfaceConstraints_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetInterfaceConstraints(Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets the interfaces a type must implement in order to be substituted for the type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetInterfaceConstraints (Type[] interfaceConstraints);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>interfaceConstraints</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Interface constraints cannot be retrieved using methods of the <a class=\"xref\" href=\"system.reflection.emit.generictypeparameterbuilder\" data-linktype=\"relative-path\">GenericTypeParameterBuilder</a> class. Once you have created the generic type that contains the type parameter, you can use its <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method. For each type parameter, get the base type constraint and interface constraints by using the <a class=\"xref\" href=\"system.type#System_Type_GetGenericParameterConstraints_\" data-linktype=\"relative-path\">GetGenericParameterConstraints</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a generic type with two type parameters, the second of which has two interface constraints, and saves them in the assembly GenericEmitExample1.dll. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see <a href=\"../Topic/How%20to:%20Define%20a%20Generic%20Type%20with%20Reflection%20Emit.md\" data-linktype=\"relative-path\">How to: Define a Generic Type with Reflection Emit</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EmitGenericType#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Collections::Generic;\n\n// Dummy class to satisfy TFirst constraints.\n//\npublic ref class Example {};\n\n// Define a trivial base class and two trivial interfaces \n// to use when demonstrating constraints.\n//\npublic ref class ExampleBase {};\npublic interface class IExampleA {};\npublic interface class IExampleB {};\n\n// Define a trivial type that can substitute for type parameter \n// TSecond.\n//\npublic ref class ExampleDerived : ExampleBase, IExampleA, IExampleB {};\n\n// List the constraint flags. The GenericParameterAttributes\n// enumeration contains two sets of attributes, variance and\n// constraints. For this example, only constraints are used.\n//\nstatic void ListConstraintAttributes( Type^ t )\n{\n   // Mask off the constraint flags. \n   GenericParameterAttributes constraints = \n       t-&gt;GenericParameterAttributes &amp; \n       GenericParameterAttributes::SpecialConstraintMask;\n\n   if ((constraints &amp; GenericParameterAttributes::ReferenceTypeConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    ReferenceTypeConstraint&quot;);\n\n   if ((constraints &amp; GenericParameterAttributes::NotNullableValueTypeConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    NotNullableValueTypeConstraint&quot;);\n\n   if ((constraints &amp; GenericParameterAttributes::DefaultConstructorConstraint)\n           != GenericParameterAttributes::None)\n       Console::WriteLine( L&quot;    DefaultConstructorConstraint&quot;);\n}\n\nstatic void DisplayGenericParameters( Type^ t )\n{\n   if (!t-&gt;IsGenericType)\n   {\n       Console::WriteLine( L&quot;Type &#39;{0}&#39; is not generic.&quot; );\n       return;\n   }\n   if (!t-&gt;IsGenericTypeDefinition)\n       t = t-&gt;GetGenericTypeDefinition();\n\n   array&lt;Type^&gt;^ typeParameters = t-&gt;GetGenericArguments();\n   Console::WriteLine( L&quot;\\r<br>Listing {0} type parameters for type &#39;{1}&#39;.&quot;, \n       typeParameters-&gt;Length, t );\n\n   for each ( Type^ tParam in typeParameters )\n   {\n       Console::WriteLine( L&quot;\\r<br>Type parameter {0}:&quot;, \n           tParam-&gt;ToString() );\n\n       for each (Type^ c in tParam-&gt;GetGenericParameterConstraints())\n       {\n           if (c-&gt;IsInterface)\n               Console::WriteLine( L&quot;    Interface constraint: {0}&quot;, c);\n           else\n               Console::WriteLine( L&quot;    Base type constraint: {0}&quot;, c);\n       }\n       ListConstraintAttributes(tParam);\n   }\n}\n\nvoid main()\n{\n   // Define a dynamic assembly to contain the sample type. The\n   // assembly will be run and also saved to disk, so\n   // AssemblyBuilderAccess.RunAndSave is specified.\n   //\n   AppDomain^ myDomain = AppDomain::CurrentDomain;\n   AssemblyName^ myAsmName = gcnew AssemblyName( L&quot;GenericEmitExample1&quot; );\n   AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( \n       myAsmName, AssemblyBuilderAccess::RunAndSave );\n\n   // An assembly is made up of executable modules. For a single-\n   // module assembly, the module name and file name are the same \n   // as the assembly name. \n   //\n   ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( \n       myAsmName-&gt;Name, String::Concat( myAsmName-&gt;Name, L&quot;.dll&quot; ) );\n\n   // Get type objects for the base class trivial interfaces to\n   // be used as constraints.\n   //\n   Type^ baseType = ExampleBase::typeid; \n   Type^ interfaceA = IExampleA::typeid; \n   Type^ interfaceB = IExampleB::typeid;\n   \n   // Define the sample type.\n   //\n   TypeBuilder^ myType = myModule-&gt;DefineType( L&quot;Sample&quot;, \n       TypeAttributes::Public );\n   \n   Console::WriteLine( L&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n       myType-&gt;IsGenericType );\n   \n   // Define type parameters for the type. Until you do this, \n   // the type is not generic, as the preceding and following \n   // WriteLine statements show. The type parameter names are\n   // specified as an array of strings. To make the code\n   // easier to read, each GenericTypeParameterBuilder is placed\n   // in a variable with the same name as the type parameter.\n   // \n   array&lt;String^&gt;^typeParamNames = {L&quot;TFirst&quot;,L&quot;TSecond&quot;};\n   array&lt;GenericTypeParameterBuilder^&gt;^typeParams = \n       myType-&gt;DefineGenericParameters( typeParamNames );\n\n   GenericTypeParameterBuilder^ TFirst = typeParams[0];\n   GenericTypeParameterBuilder^ TSecond = typeParams[1];\n\n   Console::WriteLine( L&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n       myType-&gt;IsGenericType );\n   \n   // Apply constraints to the type parameters.\n   //\n   // A type that is substituted for the first parameter, TFirst,\n   // must be a reference type and must have a parameterless\n   // constructor.\n   TFirst-&gt;SetGenericParameterAttributes( \n       GenericParameterAttributes::DefaultConstructorConstraint | \n       GenericParameterAttributes::ReferenceTypeConstraint \n   );\n\n   // A type that is substituted for the second type\n   // parameter must implement IExampleA and IExampleB, and\n   // inherit from the trivial test class ExampleBase. The\n   // interface constraints are specified as an array\n   // containing the interface types. \n   array&lt;Type^&gt;^interfaceTypes = { interfaceA, interfaceB };\n   TSecond-&gt;SetInterfaceConstraints( interfaceTypes );\n   TSecond-&gt;SetBaseTypeConstraint( baseType );\n\n   // The following code adds a private field named ExampleField,\n   // of type TFirst.\n   FieldBuilder^ exField = \n       myType-&gt;DefineField(&quot;ExampleField&quot;, TFirst, \n           FieldAttributes::Private);\n\n   // Define a static method that takes an array of TFirst and \n   // returns a List&lt;TFirst&gt; containing all the elements of \n   // the array. To define this method it is necessary to create\n   // the type List&lt;TFirst&gt; by calling MakeGenericType on the\n   // generic type definition, generic&lt;T&gt; List. \n   // The parameter type is created by using the\n   // MakeArrayType method. \n   //\n   Type^ listOf = List::typeid;\n   Type^ listOfTFirst = listOf-&gt;MakeGenericType(TFirst);\n   array&lt;Type^&gt;^ mParamTypes = { TFirst-&gt;MakeArrayType() };\n\n   MethodBuilder^ exMethod = \n       myType-&gt;DefineMethod(&quot;ExampleMethod&quot;, \n           MethodAttributes::Public | MethodAttributes::Static, \n           listOfTFirst, \n           mParamTypes);\n\n   // Emit the method body. \n   // The method body consists of just three opcodes, to load \n   // the input array onto the execution stack, to call the \n   // List&lt;TFirst&gt; constructor that takes IEnumerable&lt;TFirst&gt;,\n   // which does all the work of putting the input elements into\n   // the list, and to return, leaving the list on the stack. The\n   // hard work is getting the constructor.\n   // \n   // The GetConstructor method is not supported on a \n   // GenericTypeParameterBuilder, so it is not possible to get \n   // the constructor of List&lt;TFirst&gt; directly. There are two\n   // steps, first getting the constructor of generic&lt;T&gt; List and then\n   // calling a method that converts it to the corresponding \n   // constructor of List&lt;TFirst&gt;.\n   //\n   // The constructor needed here is the one that takes an\n   // IEnumerable&lt;T&gt;. Note, however, that this is not the \n   // generic type definition of generic&lt;T&gt; IEnumerable; instead, the\n   // T from generic&lt;T&gt; List must be substituted for the T of \n   // generic&lt;T&gt; IEnumerable. (This seems confusing only because both\n   // types have type parameters named T. That is why this example\n   // uses the somewhat silly names TFirst and TSecond.) To get\n   // the type of the constructor argument, take the generic\n   // type definition generic&lt;T&gt; IEnumerable and \n   // call MakeGenericType with the first generic type parameter\n   // of generic&lt;T&gt; List. The constructor argument list must be passed\n   // as an array, with just one argument in this case.\n   // \n   // Now it is possible to get the constructor of generic&lt;T&gt; List,\n   // using GetConstructor on the generic type definition. To get\n   // the constructor of List&lt;TFirst&gt;, pass List&lt;TFirst&gt; and\n   // the constructor from generic&lt;T&gt; List to the static\n   // TypeBuilder.GetConstructor method.\n   //\n   ILGenerator^ ilgen = exMethod-&gt;GetILGenerator();\n        \n   Type^ ienumOf = IEnumerable::typeid;\n   Type^ TfromListOf = listOf-&gt;GetGenericArguments()[0];\n   Type^ ienumOfT = ienumOf-&gt;MakeGenericType(TfromListOf);\n   array&lt;Type^&gt;^ ctorArgs = {ienumOfT};\n\n   ConstructorInfo^ ctorPrep = listOf-&gt;GetConstructor(ctorArgs);\n   ConstructorInfo^ ctor = \n       TypeBuilder::GetConstructor(listOfTFirst, ctorPrep);\n\n   ilgen-&gt;Emit(OpCodes::Ldarg_0);\n   ilgen-&gt;Emit(OpCodes::Newobj, ctor);\n   ilgen-&gt;Emit(OpCodes::Ret);\n\n   // Create the type and save the assembly. \n   Type^ finished = myType-&gt;CreateType();\n   myAssembly-&gt;Save( String::Concat( myAsmName-&gt;Name, L&quot;.dll&quot; ) );\n\n   // Invoke the method.\n   // ExampleMethod is not generic, but the type it belongs to is\n   // generic, so in order to get a MethodInfo that can be invoked\n   // it is necessary to create a constructed type. The Example \n   // class satisfies the constraints on TFirst, because it is a \n   // reference type and has a default constructor. In order to\n   // have a class that satisfies the constraints on TSecond, \n   // this code example defines the ExampleDerived type. These\n   // two types are passed to MakeGenericMethod to create the\n   // constructed type.\n   //\n   array&lt;Type^&gt;^ typeArgs = \n       { Example::typeid, ExampleDerived::typeid };\n   Type^ constructed = finished-&gt;MakeGenericType(typeArgs);\n   MethodInfo^ mi = constructed-&gt;GetMethod(&quot;ExampleMethod&quot;);\n\n   // Create an array of Example objects, as input to the generic\n   // method. This array must be passed as the only element of an \n   // array of arguments. The first argument of Invoke is \n   // null, because ExampleMethod is static. Display the count\n   // on the resulting List&lt;Example&gt;.\n   // \n   array&lt;Example^&gt;^ input = { gcnew Example(), gcnew Example() };\n   array&lt;Object^&gt;^ arguments = { input };\n\n   List&lt;Example^&gt;^ listX = \n       (List&lt;Example^&gt;^) mi-&gt;Invoke(nullptr, arguments);\n\n   Console::WriteLine(\n       &quot;<br>There are {0} elements in the List&lt;Example&gt;.&quot;, \n       listX-&gt;Count);\n\n   DisplayGenericParameters(finished);\n}\n\n/* This code example produces the following output:\n\nType &#39;Sample&#39; is generic: False\nType &#39;Sample&#39; is generic: True\n\nThere are 2 elements in the List&lt;Example&gt;.\n\nListing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n\nType parameter TFirst:\n    ReferenceTypeConstraint\n    DefaultConstructorConstraint\n\nType parameter TSecond:\n    Interface constraint: IExampleA\n    Interface constraint: IExampleB\n    Base type constraint: ExampleBase\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"EmitGenericType#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Collections.Generic\n\n&#39; Define a trivial base class and two trivial interfaces \n&#39; to use when demonstrating constraints.\n&#39;\nPublic Class ExampleBase\nEnd Class\n\nPublic Interface IExampleA\nEnd Interface\n\nPublic Interface IExampleB\nEnd Interface\n\n&#39; Define a trivial type that can substitute for type parameter \n&#39; TSecond.\n&#39;\nPublic Class ExampleDerived\n    Inherits ExampleBase\n    Implements IExampleA, IExampleB\nEnd Class\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Define a dynamic assembly to contain the sample type. The\n        &#39; assembly will not be run, but only saved to disk, so\n        &#39; AssemblyBuilderAccess.Save is specified.\n        &#39;\n        Dim myDomain As AppDomain = AppDomain.CurrentDomain\n        Dim myAsmName As New AssemblyName(&quot;GenericEmitExample1&quot;)\n        Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly( _\n            myAsmName, _\n            AssemblyBuilderAccess.RunAndSave)\n\n        &#39; An assembly is made up of executable modules. For a single-\n        &#39; module assembly, the module name and file name are the same \n        &#39; as the assembly name. \n        &#39;\n        Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule( _\n            myAsmName.Name, _\n            myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Get type objects for the base class trivial interfaces to\n        &#39; be used as constraints.\n        &#39;\n        Dim baseType As Type = GetType(ExampleBase)\n        Dim interfaceA As Type = GetType(IExampleA)\n        Dim interfaceB As Type = GetType(IExampleB)\n                \n        &#39; Define the sample type.\n        &#39;\n        Dim myType As TypeBuilder = myModule.DefineType( _\n            &quot;Sample&quot;, _\n            TypeAttributes.Public)\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, _\n            myType.IsGenericType)\n\n        &#39; Define type parameters for the type. Until you do this, \n        &#39; the type is not generic, as the preceding and following \n        &#39; WriteLine statements show. The type parameter names are\n        &#39; specified as an array of strings. To make the code\n        &#39; easier to read, each GenericTypeParameterBuilder is placed\n        &#39; in a variable with the same name as the type parameter.\n        &#39; \n        Dim typeParamNames() As String = {&quot;TFirst&quot;, &quot;TSecond&quot;}\n        Dim typeParams() As GenericTypeParameterBuilder = _\n            myType.DefineGenericParameters(typeParamNames)\n\n        Dim TFirst As GenericTypeParameterBuilder = typeParams(0)\n        Dim TSecond As GenericTypeParameterBuilder = typeParams(1)\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, _\n            myType.IsGenericType)\n\n        &#39; Apply constraints to the type parameters.\n        &#39;\n        &#39; A type that is substituted for the first parameter, TFirst,\n        &#39; must be a reference type and must have a parameterless\n        &#39; constructor.\n        TFirst.SetGenericParameterAttributes( _\n            GenericParameterAttributes.DefaultConstructorConstraint _\n            Or GenericParameterAttributes.ReferenceTypeConstraint)\n\n        &#39; A type that is substituted for the second type\n        &#39; parameter must implement IExampleA and IExampleB, and\n        &#39; inherit from the trivial test class ExampleBase. The\n        &#39; interface constraints are specified as an array \n        &#39; containing the interface types.\n        TSecond.SetBaseTypeConstraint(baseType)\n        Dim interfaceTypes() As Type = {interfaceA, interfaceB}\n        TSecond.SetInterfaceConstraints(interfaceTypes)\n\n        &#39; The following code adds a private field named ExampleField,\n        &#39; of type TFirst.\n        Dim exField As FieldBuilder = _\n            myType.DefineField(&quot;ExampleField&quot;, TFirst, _\n                FieldAttributes.Private)\n\n        &#39; Define a Shared method that takes an array of TFirst and \n        &#39; returns a List(Of TFirst) containing all the elements of \n        &#39; the array. To define this method it is necessary to create\n        &#39; the type List(Of TFirst) by calling MakeGenericType on the\n        &#39; generic type definition, List(Of T). (The T is omitted with\n        &#39; the GetType operator when you get the generic type \n        &#39; definition.) The parameter type is created by using the\n        &#39; MakeArrayType method. \n        &#39;\n        Dim listOf As Type = GetType(List(Of ))\n        Dim listOfTFirst As Type = listOf.MakeGenericType(TFirst)\n        Dim mParamTypes() As Type = { TFirst.MakeArrayType() }\n\n        Dim exMethod As MethodBuilder = _\n            myType.DefineMethod(&quot;ExampleMethod&quot;, _\n                MethodAttributes.Public Or MethodAttributes.Static, _\n                listOfTFirst, _\n                mParamTypes)\n\n        &#39; Emit the method body. \n        &#39; The method body consists of just three opcodes, to load \n        &#39; the input array onto the execution stack, to call the \n        &#39; List(Of TFirst) constructor that takes IEnumerable(Of TFirst),\n        &#39; which does all the work of putting the input elements into\n        &#39; the list, and to return, leaving the list on the stack. The\n        &#39; hard work is getting the constructor.\n        &#39; \n        &#39; The GetConstructor method is not supported on a \n        &#39; GenericTypeParameterBuilder, so it is not possible to get \n        &#39; the constructor of List(Of TFirst) directly. There are two\n        &#39; steps, first getting the constructor of List(Of T) and then\n        &#39; calling a method that converts it to the corresponding \n        &#39; constructor of List(Of TFirst).\n        &#39;\n        &#39; The constructor needed here is the one that takes an\n        &#39; IEnumerable(Of T). Note, however, that this is not the \n        &#39; generic type definition of IEnumerable(Of T); instead, the\n        &#39; T from List(Of T) must be substituted for the T of \n        &#39; IEnumerable(Of T). (This seems confusing only because both\n        &#39; types have type parameters named T. That is why this example\n        &#39; uses the somewhat silly names TFirst and TSecond.) To get\n        &#39; the type of the constructor argument, take the generic\n        &#39; type definition IEnumerable(Of T) (expressed as \n        &#39; IEnumerable(Of ) when you use the GetType operator) and \n        &#39; call MakeGenericType with the first generic type parameter\n        &#39; of List(Of T). The constructor argument list must be passed\n        &#39; as an array, with just one argument in this case.\n        &#39; \n        &#39; Now it is possible to get the constructor of List(Of T),\n        &#39; using GetConstructor on the generic type definition. To get\n        &#39; the constructor of List(Of TFirst), pass List(Of TFirst) and\n        &#39; the constructor from List(Of T) to the static\n        &#39; TypeBuilder.GetConstructor method.\n        &#39;\n        Dim ilgen As ILGenerator = exMethod.GetILGenerator()\n        \n        Dim ienumOf As Type = GetType(IEnumerable(Of ))\n        Dim listOfTParams() As Type = listOf.GetGenericArguments()\n        Dim TfromListOf As Type = listOfTParams(0)\n        Dim ienumOfT As Type = ienumOf.MakeGenericType(TfromListOf)\n        Dim ctorArgs() As Type = { ienumOfT }\n\n        Dim ctorPrep As ConstructorInfo = _\n            listOf.GetConstructor(ctorArgs)\n        Dim ctor As ConstructorInfo = _\n            TypeBuilder.GetConstructor(listOfTFirst, ctorPrep)\n\n        ilgen.Emit(OpCodes.Ldarg_0)\n        ilgen.Emit(OpCodes.Newobj, ctor)\n        ilgen.Emit(OpCodes.Ret)\n\n        &#39; Create the type and save the assembly. \n        Dim finished As Type = myType.CreateType()\n        myAssembly.Save(myAsmName.Name &amp; &quot;.dll&quot;)\n\n        &#39; Invoke the method.\n        &#39; ExampleMethod is not generic, but the type it belongs to is\n        &#39; generic, so in order to get a MethodInfo that can be invoked\n        &#39; it is necessary to create a constructed type. The Example \n        &#39; class satisfies the constraints on TFirst, because it is a \n        &#39; reference type and has a default constructor. In order to\n        &#39; have a class that satisfies the constraints on TSecond, \n        &#39; this code example defines the ExampleDerived type. These\n        &#39; two types are passed to MakeGenericMethod to create the\n        &#39; constructed type.\n        &#39;\n        Dim typeArgs() As Type = _\n            { GetType(Example), GetType(ExampleDerived) }\n        Dim constructed As Type = finished.MakeGenericType(typeArgs)\n        Dim mi As MethodInfo = constructed.GetMethod(&quot;ExampleMethod&quot;)\n\n        &#39; Create an array of Example objects, as input to the generic\n        &#39; method. This array must be passed as the only element of an \n        &#39; array of arguments. The first argument of Invoke is \n        &#39; Nothing, because ExampleMethod is Shared. Display the count\n        &#39; on the resulting List(Of Example).\n        &#39; \n        Dim input() As Example = { New Example(), New Example() }\n        Dim arguments() As Object = { input }\n\n        Dim listX As List(Of Example) = mi.Invoke(Nothing, arguments)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;There are {0} elements in the List(Of Example).&quot;, _\n            listX.Count _ \n        )\n\n        DisplayGenericParameters(finished)\n    End Sub\n\n    Private Shared Sub DisplayGenericParameters(ByVal t As Type)\n\n        If Not t.IsGenericType Then\n            Console.WriteLine(&quot;Type &#39;{0}&#39; is not generic.&quot;)\n            Return\n        End If\n        If Not t.IsGenericTypeDefinition Then _\n            t = t.GetGenericTypeDefinition()\n\n        Dim typeParameters() As Type = t.GetGenericArguments()\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Listing {0} type parameters for type &#39;{1}&#39;.&quot;, _\n            typeParameters.Length, t)\n\n        For Each tParam As Type In typeParameters\n\n            Console.WriteLine(vbCrLf &amp; &quot;Type parameter {0}:&quot;, _\n                tParam.ToString())\n\n            For Each c As Type In tParam.GetGenericParameterConstraints()\n                If c.IsInterface Then\n                    Console.WriteLine(&quot;    Interface constraint: {0}&quot;, c)\n                Else\n                    Console.WriteLine(&quot;    Base type constraint: {0}&quot;, c)\n                End If\n            Next \n\n            ListConstraintAttributes(tParam)\n        Next tParam\n    End Sub\n\n    &#39; List the constraint flags. The GenericParameterAttributes\n    &#39; enumeration contains two sets of attributes, variance and\n    &#39; constraints. For this example, only constraints are used.\n    &#39;\n    Private Shared Sub ListConstraintAttributes(ByVal t As Type)\n\n        &#39; Mask off the constraint flags. \n        Dim constraints As GenericParameterAttributes = _\n            t.GenericParameterAttributes And _\n            GenericParameterAttributes.SpecialConstraintMask\n\n        If (constraints And GenericParameterAttributes.ReferenceTypeConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    ReferenceTypeConstraint&quot;)\n\n        If (constraints And GenericParameterAttributes.NotNullableValueTypeConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    NotNullableValueTypeConstraint&quot;)\n\n        If (constraints And GenericParameterAttributes.DefaultConstructorConstraint) _\n                &lt;&gt; GenericParameterAttributes.None Then _\n            Console.WriteLine(&quot;    DefaultConstructorConstraint&quot;)\n\n    End Sub \n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Type &#39;Sample&#39; is generic: False\n&#39;Type &#39;Sample&#39; is generic: True\n&#39;\n&#39;There are 2 elements in the List(Of Example).\n&#39;\n&#39;Listing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n&#39;\n&#39;Type parameter TFirst:\n&#39;    ReferenceTypeConstraint\n&#39;    DefaultConstructorConstraint\n&#39;\n&#39;Type parameter TSecond:\n&#39;    Interface constraint: IExampleA\n&#39;    Interface constraint: IExampleB\n&#39;    Base type constraint: ExampleBase\n</code></pre><pre><code class=\"lang-cs\" name=\"EmitGenericType#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Collections.Generic;\n\n// Define a trivial base class and two trivial interfaces \n// to use when demonstrating constraints.\n//\npublic class ExampleBase {}\n\npublic interface IExampleA {}\n\npublic interface IExampleB {}\n\n// Define a trivial type that can substitute for type parameter \n// TSecond.\n//\npublic class ExampleDerived : ExampleBase, IExampleA, IExampleB {}\n\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly to contain the sample type. The\n        // assembly will not be run, but only saved to disk, so\n        // AssemblyBuilderAccess.Save is specified.\n        //\n        AppDomain myDomain = AppDomain.CurrentDomain;\n        AssemblyName myAsmName = new AssemblyName(&quot;GenericEmitExample1&quot;);\n        AssemblyBuilder myAssembly = \n            myDomain.DefineDynamicAssembly(myAsmName, \n                AssemblyBuilderAccess.RunAndSave);\n\n        // An assembly is made up of executable modules. For a single-\n        // module assembly, the module name and file name are the same \n        // as the assembly name. \n        //\n        ModuleBuilder myModule = \n            myAssembly.DefineDynamicModule(myAsmName.Name, \n               myAsmName.Name + &quot;.dll&quot;);\n\n        // Get type objects for the base class trivial interfaces to\n        // be used as constraints.\n        //\n        Type baseType = typeof(ExampleBase);\n        Type interfaceA = typeof(IExampleA);\n        Type interfaceB = typeof(IExampleB);\n                \n        // Define the sample type.\n        //\n        TypeBuilder myType = \n            myModule.DefineType(&quot;Sample&quot;, TypeAttributes.Public);\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n            myType.IsGenericType);\n\n        // Define type parameters for the type. Until you do this, \n        // the type is not generic, as the preceding and following \n        // WriteLine statements show. The type parameter names are\n        // specified as an array of strings. To make the code\n        // easier to read, each GenericTypeParameterBuilder is placed\n        // in a variable with the same name as the type parameter.\n        // \n        string[] typeParamNames = {&quot;TFirst&quot;, &quot;TSecond&quot;};\n        GenericTypeParameterBuilder[] typeParams = \n            myType.DefineGenericParameters(typeParamNames);\n\n        GenericTypeParameterBuilder TFirst = typeParams[0];\n        GenericTypeParameterBuilder TSecond = typeParams[1];\n\n        Console.WriteLine(&quot;Type &#39;Sample&#39; is generic: {0}&quot;, \n            myType.IsGenericType);\n\n        // Apply constraints to the type parameters.\n        //\n        // A type that is substituted for the first parameter, TFirst,\n        // must be a reference type and must have a parameterless\n        // constructor.\n        TFirst.SetGenericParameterAttributes(\n            GenericParameterAttributes.DefaultConstructorConstraint |\n            GenericParameterAttributes.ReferenceTypeConstraint);\n\n        // A type that is substituted for the second type\n        // parameter must implement IExampleA and IExampleB, and\n        // inherit from the trivial test class ExampleBase. The\n        // interface constraints are specified as an array \n        // containing the interface types.\n        TSecond.SetBaseTypeConstraint(baseType);\n        Type[] interfaceTypes = {interfaceA, interfaceB};\n        TSecond.SetInterfaceConstraints(interfaceTypes);\n\n        // The following code adds a private field named ExampleField,\n        // of type TFirst.\n        FieldBuilder exField = \n            myType.DefineField(&quot;ExampleField&quot;, TFirst, \n                FieldAttributes.Private);\n\n        // Define a static method that takes an array of TFirst and \n        // returns a List&lt;TFirst&gt; containing all the elements of \n        // the array. To define this method it is necessary to create\n        // the type List&lt;TFirst&gt; by calling MakeGenericType on the\n        // generic type definition, List&lt;T&gt;. (The T is omitted with\n        // the typeof operator when you get the generic type \n        // definition.) The parameter type is created by using the\n        // MakeArrayType method. \n        //\n        Type listOf = typeof(List&lt;&gt;);\n        Type listOfTFirst = listOf.MakeGenericType(TFirst);\n        Type[] mParamTypes = {TFirst.MakeArrayType()};\n\n        MethodBuilder exMethod = \n            myType.DefineMethod(&quot;ExampleMethod&quot;, \n                MethodAttributes.Public | MethodAttributes.Static, \n                listOfTFirst, \n                mParamTypes);\n\n        // Emit the method body. \n        // The method body consists of just three opcodes, to load \n        // the input array onto the execution stack, to call the \n        // List&lt;TFirst&gt; constructor that takes IEnumerable&lt;TFirst&gt;,\n        // which does all the work of putting the input elements into\n        // the list, and to return, leaving the list on the stack. The\n        // hard work is getting the constructor.\n        // \n        // The GetConstructor method is not supported on a \n        // GenericTypeParameterBuilder, so it is not possible to get \n        // the constructor of List&lt;TFirst&gt; directly. There are two\n        // steps, first getting the constructor of List&lt;T&gt; and then\n        // calling a method that converts it to the corresponding \n        // constructor of List&lt;TFirst&gt;.\n        //\n        // The constructor needed here is the one that takes an\n        // IEnumerable&lt;T&gt;. Note, however, that this is not the \n        // generic type definition of IEnumerable&lt;T&gt;; instead, the\n        // T from List&lt;T&gt; must be substituted for the T of \n        // IEnumerable&lt;T&gt;. (This seems confusing only because both\n        // types have type parameters named T. That is why this example\n        // uses the somewhat silly names TFirst and TSecond.) To get\n        // the type of the constructor argument, take the generic\n        // type definition IEnumerable&lt;T&gt; (expressed as \n        // IEnumerable&lt;&gt; when you use the typeof operator) and \n        // call MakeGenericType with the first generic type parameter\n        // of List&lt;T&gt;. The constructor argument list must be passed\n        // as an array, with just one argument in this case.\n        // \n        // Now it is possible to get the constructor of List&lt;T&gt;,\n        // using GetConstructor on the generic type definition. To get\n        // the constructor of List&lt;TFirst&gt;, pass List&lt;TFirst&gt; and\n        // the constructor from List&lt;T&gt; to the static\n        // TypeBuilder.GetConstructor method.\n        //\n        ILGenerator ilgen = exMethod.GetILGenerator();\n        \n        Type ienumOf = typeof(IEnumerable&lt;&gt;);\n        Type TfromListOf = listOf.GetGenericArguments()[0];\n        Type ienumOfT = ienumOf.MakeGenericType(TfromListOf);\n        Type[] ctorArgs = {ienumOfT};\n\n        ConstructorInfo ctorPrep = listOf.GetConstructor(ctorArgs);\n        ConstructorInfo ctor = \n            TypeBuilder.GetConstructor(listOfTFirst, ctorPrep);\n\n        ilgen.Emit(OpCodes.Ldarg_0);\n        ilgen.Emit(OpCodes.Newobj, ctor);\n        ilgen.Emit(OpCodes.Ret);\n\n        // Create the type and save the assembly. \n        Type finished = myType.CreateType();\n        myAssembly.Save(myAsmName.Name+&quot;.dll&quot;);\n\n        // Invoke the method.\n        // ExampleMethod is not generic, but the type it belongs to is\n        // generic, so in order to get a MethodInfo that can be invoked\n        // it is necessary to create a constructed type. The Example \n        // class satisfies the constraints on TFirst, because it is a \n        // reference type and has a default constructor. In order to\n        // have a class that satisfies the constraints on TSecond, \n        // this code example defines the ExampleDerived type. These\n        // two types are passed to MakeGenericMethod to create the\n        // constructed type.\n        //\n        Type[] typeArgs = {typeof(Example), typeof(ExampleDerived)};\n        Type constructed = finished.MakeGenericType(typeArgs);\n        MethodInfo mi = constructed.GetMethod(&quot;ExampleMethod&quot;);\n\n        // Create an array of Example objects, as input to the generic\n        // method. This array must be passed as the only element of an \n        // array of arguments. The first argument of Invoke is \n        // null, because ExampleMethod is static. Display the count\n        // on the resulting List&lt;Example&gt;.\n        // \n        Example[] input = {new Example(), new Example()};\n        object[] arguments = {input};\n\n        List&lt;Example&gt; listX = \n            (List&lt;Example&gt;) mi.Invoke(null, arguments);\n\n        Console.WriteLine(\n            &quot;<br>There are {0} elements in the List&lt;Example&gt;.&quot;, \n            listX.Count);\n\n        DisplayGenericParameters(finished);\n    }\n\n    private static void DisplayGenericParameters(Type t)\n    {\n        if (!t.IsGenericType)\n        {\n            Console.WriteLine(&quot;Type &#39;{0}&#39; is not generic.&quot;);\n            return;\n        }\n        if (!t.IsGenericTypeDefinition) \n        {\n            t = t.GetGenericTypeDefinition();\n        }\n\n        Type[] typeParameters = t.GetGenericArguments();\n        Console.WriteLine(&quot;<br>Listing {0} type parameters for type &#39;{1}&#39;.&quot;,\n            typeParameters.Length, t);\n\n        foreach( Type tParam in typeParameters )\n        {\n            Console.WriteLine(&quot;\\r<br>Type parameter {0}:&quot;, tParam.ToString());\n\n            foreach( Type c in tParam.GetGenericParameterConstraints() )\n            {\n                if (c.IsInterface)\n                {\n                    Console.WriteLine(&quot;    Interface constraint: {0}&quot;, c);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;    Base type constraint: {0}&quot;, c);\n                }\n            }\n\n            ListConstraintAttributes(tParam);\n        }\n    }\n\n    // List the constraint flags. The GenericParameterAttributes\n    // enumeration contains two sets of attributes, variance and\n    // constraints. For this example, only constraints are used.\n    //\n    private static void ListConstraintAttributes(Type t)\n    {\n        // Mask off the constraint flags. \n        GenericParameterAttributes constraints = \n            t.GenericParameterAttributes &amp; GenericParameterAttributes.SpecialConstraintMask;\n\n        if ((constraints &amp; GenericParameterAttributes.ReferenceTypeConstraint)\n            != GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    ReferenceTypeConstraint&quot;);\n        }\n\n        if ((constraints &amp; GenericParameterAttributes.NotNullableValueTypeConstraint)\n            != GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    NotNullableValueTypeConstraint&quot;);\n        }\n\n        if ((constraints &amp; GenericParameterAttributes.DefaultConstructorConstraint)\n            !=GenericParameterAttributes.None) \n        {\n            Console.WriteLine(&quot;    DefaultConstructorConstraint&quot;);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nType &#39;Sample&#39; is generic: False\nType &#39;Sample&#39; is generic: True\n\nThere are 2 elements in the List&lt;Example&gt;.\n\nListing 2 type parameters for type &#39;Sample[TFirst,TSecond]&#39;.\n\nType parameter TFirst:\n    ReferenceTypeConstraint\n    DefaultConstructorConstraint\n\nType parameter TSecond:\n    Interface constraint: IExampleA\n    Interface constraint: IExampleB\n    Base type constraint: ExampleBase\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_GenericTypeParameterBuilder_ToString\">\r\n    \r\n            <a id=\"System_Reflection_Emit_GenericTypeParameterBuilder_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representation of the current generic type parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the name of the generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.GenericTypeParameterBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.GenericTypeParameterBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.Assembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.BaseType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.FullName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetFields\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetMember\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.GUID\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.Module\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.Namespace\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.ToString\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"721dd677-056d-9f2d-6283-83799a46be26\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.GenericTypeParameterBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.GenericTypeParameterBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.GenericTypeParameterBuilder.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.GenericTypeParameterBuilder","System.Reflection.Emit.GenericTypeParameterBuilder.Assembly","System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName","System.Reflection.Emit.GenericTypeParameterBuilder.BaseType","System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters","System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod","System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType","System.Reflection.Emit.GenericTypeParameterBuilder.Equals","System.Reflection.Emit.GenericTypeParameterBuilder.FullName","System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes","System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition","System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl","System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl","System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors","System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes","System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType","System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent","System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents","System.Reflection.Emit.GenericTypeParameterBuilder.GetField","System.Reflection.Emit.GenericTypeParameterBuilder.GetFields","System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments","System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition","System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode","System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface","System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap","System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces","System.Reflection.Emit.GenericTypeParameterBuilder.GetMember","System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers","System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl","System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods","System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType","System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes","System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties","System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl","System.Reflection.Emit.GenericTypeParameterBuilder.GUID","System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl","System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember","System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom","System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType","System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined","System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter","System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType","System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition","System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf","System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl","System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType","System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType","System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType","System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType","System.Reflection.Emit.GenericTypeParameterBuilder.Module","System.Reflection.Emit.GenericTypeParameterBuilder.Name","System.Reflection.Emit.GenericTypeParameterBuilder.Namespace","System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType","System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint","System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute","System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes","System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints","System.Reflection.Emit.GenericTypeParameterBuilder.ToString","System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle","System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.GenericTypeParameterBuilder","System::Reflection::Emit::GenericTypeParameterBuilder","System.Reflection.Emit.GenericTypeParameterBuilder.Assembly","System::Reflection::Emit::GenericTypeParameterBuilder::Assembly","System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName","System::Reflection::Emit::GenericTypeParameterBuilder::AssemblyQualifiedName","System.Reflection.Emit.GenericTypeParameterBuilder.BaseType","System::Reflection::Emit::GenericTypeParameterBuilder::BaseType","System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters","System::Reflection::Emit::GenericTypeParameterBuilder::ContainsGenericParameters","System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod","System::Reflection::Emit::GenericTypeParameterBuilder::DeclaringMethod","System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType","System::Reflection::Emit::GenericTypeParameterBuilder::DeclaringType","System.Reflection.Emit.GenericTypeParameterBuilder.Equals","System::Reflection::Emit::GenericTypeParameterBuilder::Equals","System.Reflection.Emit.GenericTypeParameterBuilder.FullName","System::Reflection::Emit::GenericTypeParameterBuilder::FullName","System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes","System::Reflection::Emit::GenericTypeParameterBuilder::GenericParameterAttributes","System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition","System::Reflection::Emit::GenericTypeParameterBuilder::GenericParameterPosition","System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl","System::Reflection::Emit::GenericTypeParameterBuilder::GetAttributeFlagsImpl","System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl","System::Reflection::Emit::GenericTypeParameterBuilder::GetConstructorImpl","System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors","System::Reflection::Emit::GenericTypeParameterBuilder::GetConstructors","System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes","System::Reflection::Emit::GenericTypeParameterBuilder::GetCustomAttributes","System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType","System::Reflection::Emit::GenericTypeParameterBuilder::GetElementType","System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent","System::Reflection::Emit::GenericTypeParameterBuilder::GetEvent","System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents","System::Reflection::Emit::GenericTypeParameterBuilder::GetEvents","System.Reflection.Emit.GenericTypeParameterBuilder.GetField","System::Reflection::Emit::GenericTypeParameterBuilder::GetField","System.Reflection.Emit.GenericTypeParameterBuilder.GetFields","System::Reflection::Emit::GenericTypeParameterBuilder::GetFields","System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments","System::Reflection::Emit::GenericTypeParameterBuilder::GetGenericArguments","System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition","System::Reflection::Emit::GenericTypeParameterBuilder::GetGenericTypeDefinition","System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode","System::Reflection::Emit::GenericTypeParameterBuilder::GetHashCode","System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface","System::Reflection::Emit::GenericTypeParameterBuilder::GetInterface","System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap","System::Reflection::Emit::GenericTypeParameterBuilder::GetInterfaceMap","System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces","System::Reflection::Emit::GenericTypeParameterBuilder::GetInterfaces","System.Reflection.Emit.GenericTypeParameterBuilder.GetMember","System::Reflection::Emit::GenericTypeParameterBuilder::GetMember","System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers","System::Reflection::Emit::GenericTypeParameterBuilder::GetMembers","System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl","System::Reflection::Emit::GenericTypeParameterBuilder::GetMethodImpl","System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods","System::Reflection::Emit::GenericTypeParameterBuilder::GetMethods","System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType","System::Reflection::Emit::GenericTypeParameterBuilder::GetNestedType","System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes","System::Reflection::Emit::GenericTypeParameterBuilder::GetNestedTypes","System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties","System::Reflection::Emit::GenericTypeParameterBuilder::GetProperties","System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl","System::Reflection::Emit::GenericTypeParameterBuilder::GetPropertyImpl","System.Reflection.Emit.GenericTypeParameterBuilder.GUID","System::Reflection::Emit::GenericTypeParameterBuilder::GUID","System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl","System::Reflection::Emit::GenericTypeParameterBuilder::HasElementTypeImpl","System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember","System::Reflection::Emit::GenericTypeParameterBuilder::InvokeMember","System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl","System::Reflection::Emit::GenericTypeParameterBuilder::IsArrayImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom","System::Reflection::Emit::GenericTypeParameterBuilder::IsAssignableFrom","System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl","System::Reflection::Emit::GenericTypeParameterBuilder::IsByRefImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl","System::Reflection::Emit::GenericTypeParameterBuilder::IsCOMObjectImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType","System::Reflection::Emit::GenericTypeParameterBuilder::IsConstructedGenericType","System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined","System::Reflection::Emit::GenericTypeParameterBuilder::IsDefined","System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter","System::Reflection::Emit::GenericTypeParameterBuilder::IsGenericParameter","System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType","System::Reflection::Emit::GenericTypeParameterBuilder::IsGenericType","System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition","System::Reflection::Emit::GenericTypeParameterBuilder::IsGenericTypeDefinition","System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl","System::Reflection::Emit::GenericTypeParameterBuilder::IsPointerImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl","System::Reflection::Emit::GenericTypeParameterBuilder::IsPrimitiveImpl","System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf","System::Reflection::Emit::GenericTypeParameterBuilder::IsSubclassOf","System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl","System::Reflection::Emit::GenericTypeParameterBuilder::IsValueTypeImpl","System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType","System::Reflection::Emit::GenericTypeParameterBuilder::MakeArrayType","System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType","System::Reflection::Emit::GenericTypeParameterBuilder::MakeByRefType","System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType","System::Reflection::Emit::GenericTypeParameterBuilder::MakeGenericType","System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType","System::Reflection::Emit::GenericTypeParameterBuilder::MakePointerType","System.Reflection.Emit.GenericTypeParameterBuilder.Module","System::Reflection::Emit::GenericTypeParameterBuilder::Module","System.Reflection.Emit.GenericTypeParameterBuilder.Name","System::Reflection::Emit::GenericTypeParameterBuilder::Name","System.Reflection.Emit.GenericTypeParameterBuilder.Namespace","System::Reflection::Emit::GenericTypeParameterBuilder::Namespace","System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType","System::Reflection::Emit::GenericTypeParameterBuilder::ReflectedType","System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint","System::Reflection::Emit::GenericTypeParameterBuilder::SetBaseTypeConstraint","System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute","System::Reflection::Emit::GenericTypeParameterBuilder::SetCustomAttribute","System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes","System::Reflection::Emit::GenericTypeParameterBuilder::SetGenericParameterAttributes","System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints","System::Reflection::Emit::GenericTypeParameterBuilder::SetInterfaceConstraints","System.Reflection.Emit.GenericTypeParameterBuilder.ToString","System::Reflection::Emit::GenericTypeParameterBuilder::ToString","System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle","System::Reflection::Emit::GenericTypeParameterBuilder::TypeHandle","System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType","System::Reflection::Emit::GenericTypeParameterBuilder::UnderlyingSystemType"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"721dd677-056d-9f2d-6283-83799a46be26","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GenericTypeParameterBuilder class | Microsoft Docs","_op_ogTitle":"GenericTypeParameterBuilder class","description":"Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.GenericTypeParameterBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.generictypeparameterbuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.generictypeparameterbuilder","fileRelativePath":"System.Reflection.Emit.GenericTypeParameterBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}