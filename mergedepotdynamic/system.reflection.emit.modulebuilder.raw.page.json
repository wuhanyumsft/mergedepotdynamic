{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_ModuleBuilder\">\r\n      <span class=\"lang-csharp\">ModuleBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines and represents a module in a dynamic assembly.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ModuleBuilder))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class ModuleBuilder : System.Reflection.Module, System.Runtime.InteropServices._ModuleBuilder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">System.Reflection.Module</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ModuleBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_FilterTypeName\" data-linktype=\"relative-path\">FilterTypeName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_FilterTypeNameIgnoreCase\" data-linktype=\"relative-path\">FilterTypeNameIgnoreCase</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_FindTypes_System_Reflection_TypeFilter_System_Object_\" data-linktype=\"relative-path\">FindTypes(TypeFilter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetField_System_String_\" data-linktype=\"relative-path\">GetField(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetFields\" data-linktype=\"relative-path\">GetFields()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetMethod_System_String_\" data-linktype=\"relative-path\">GetMethod(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetMethod_System_String_System_Type___\" data-linktype=\"relative-path\">GetMethod(String,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetMethods\" data-linktype=\"relative-path\">GetMethods()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ModuleHandle\" data-linktype=\"relative-path\">ModuleHandle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_op_Equality_System_Reflection_Module_System_Reflection_Module_\" data-linktype=\"relative-path\">op_Equality(Module,Module)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_op_Inequality_System_Reflection_Module_System_Reflection_Module_\" data-linktype=\"relative-path\">op_Inequality(Module,Module)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveField_System_Int32_\" data-linktype=\"relative-path\">ResolveField(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveMember_System_Int32_\" data-linktype=\"relative-path\">ResolveMember(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveMethod_System_Int32_\" data-linktype=\"relative-path\">ResolveMethod(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveType_System_Int32_\" data-linktype=\"relative-path\">ResolveType(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_System_Runtime_InteropServices__Module_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Module.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_System_Runtime_InteropServices__Module_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Module.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_System_Runtime_InteropServices__Module_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Module.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_System_Runtime_InteropServices__Module_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Module.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To get an instance of ModuleBuilder, use the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_Assembly\" data-linktype=\"self-bookmark\">Assembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dynamic assembly that defined this instance of <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_FullyQualifiedName\" data-linktype=\"self-bookmark\">FullyQualifiedName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <code>String</code> representing the fully qualified name and path to this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_MDStreamVersion\" data-linktype=\"self-bookmark\">MDStreamVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the metadata stream version.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_MetadataToken\" data-linktype=\"self-bookmark\">MetadataToken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a token that identifies the current dynamic module in metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_ModuleVersionId\" data-linktype=\"self-bookmark\">ModuleVersionId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>A string that indicates that this is an in-memory module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_ScopeName\" data-linktype=\"self-bookmark\">ScopeName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string that represents the name of the dynamic module.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions\" data-linktype=\"self-bookmark\">CreateGlobalFunctions()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes the global function definitions and global data definitions for this dynamic module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineDocument_System_String_System_Guid_System_Guid_System_Guid_\" data-linktype=\"self-bookmark\">DefineDocument(String,Guid,Guid,Guid)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a document for source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineEnum_System_String_System_Reflection_TypeAttributes_System_Type_\" data-linktype=\"self-bookmark\">DefineEnum(String,TypeAttributes,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an enumeration type that is a value type with a single non-static field called <code>value__</code> of the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_System_String_System_Reflection_MethodAttributes_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DefineGlobalMethod(String,MethodAttributes,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a global method with the specified name, attributes, return type, and parameter types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____\" data-linktype=\"self-bookmark\">DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineInitializedData_System_String_System_Byte___System_Reflection_FieldAttributes_\" data-linktype=\"self-bookmark\">DefineInitializedData(String,Byte[],FieldAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an initialized data field in the .sdata section of the portable executable (PE) file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineManifestResource_System_String_System_IO_Stream_System_Reflection_ResourceAttributes_\" data-linktype=\"self-bookmark\">DefineManifestResource(String,Stream,ResourceAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a binary large object (BLOB) that represents a manifest resource to be embedded in the dynamic assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefinePInvokeMethod_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\" data-linktype=\"self-bookmark\">DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a <code>PInvoke</code> method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <code>PInvoke</code> flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefinePInvokeMethod_System_String_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\" data-linktype=\"self-bookmark\">DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a <code>PInvoke</code> method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <code>PInvoke</code> flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineResource_System_String_System_String_\" data-linktype=\"self-bookmark\">DefineResource(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the named managed embedded resource to be stored in this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineResource_System_String_System_String_System_Reflection_ResourceAttributes_\" data-linktype=\"self-bookmark\">DefineResource(String,String,ResourceAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the named managed embedded resource with the given attributes that is to be stored in this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineType_System_String_\" data-linktype=\"self-bookmark\">DefineType(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constructs a <code>TypeBuilder</code> for a private type with the specified name in this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_\" data-linktype=\"self-bookmark\">DefineType(String,TypeAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constructs a <code>TypeBuilder</code> given the type name and the type attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_\" data-linktype=\"self-bookmark\">DefineType(String,TypeAttributes,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constructs a <code>TypeBuilder</code> given type name, its attributes, and the type that the defined type extends.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_System_Int32_\" data-linktype=\"self-bookmark\">DefineType(String,TypeAttributes,Type,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constructs a <code>TypeBuilder</code> given the type name, the attributes, the type that the defined type extends, and the total size of the type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_System_Reflection_Emit_PackingSize_\" data-linktype=\"self-bookmark\">DefineType(String,TypeAttributes,Type,PackingSize)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constructs a <code>TypeBuilder</code> given the type name, the attributes, the type that the defined type extends, and the packing size of the type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_System_Type___\" data-linktype=\"self-bookmark\">DefineType(String,TypeAttributes,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constructs a <code>TypeBuilder</code> given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_System_Reflection_Emit_PackingSize_System_Int32_\" data-linktype=\"self-bookmark\">DefineType(String,TypeAttributes,Type,PackingSize,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constructs a <code>TypeBuilder</code> given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineUninitializedData_System_String_System_Int32_System_Reflection_FieldAttributes_\" data-linktype=\"self-bookmark\">DefineUninitializedData(String,Int32,FieldAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineUnmanagedResource_System_Byte___\" data-linktype=\"self-bookmark\">DefineUnmanagedResource(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an unmanaged embedded resource given an opaque binary large object (BLOB) of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_DefineUnmanagedResource_System_String_\" data-linktype=\"self-bookmark\">DefineUnmanagedResource(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines an unmanaged resource given the name of Win32 resource file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetArrayMethod_System_Type_System_String_System_Reflection_CallingConventions_System_Type_System_Type___\" data-linktype=\"self-bookmark\">GetArrayMethod(Type,String,CallingConventions,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the named method on an array class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetArrayMethodToken_System_Type_System_String_System_Reflection_CallingConventions_System_Type_System_Type___\" data-linktype=\"self-bookmark\">GetArrayMethodToken(Type,String,CallingConventions,Type,Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token for the named method on an array class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetConstructorToken_System_Reflection_ConstructorInfo_\" data-linktype=\"self-bookmark\">GetConstructorToken(ConstructorInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token used to identify the specified constructor within this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetConstructorToken_System_Reflection_ConstructorInfo_System_Collections_Generic_IEnumerable_System_Type__\" data-linktype=\"self-bookmark\">GetConstructorToken(ConstructorInfo,IEnumerable&lt;Type&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token used to identify the constructor that has the specified attributes and parameter types within this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>, and that derive from a specified attribute type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetCustomAttributesData\" data-linktype=\"self-bookmark\">GetCustomAttributesData()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns information about the attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>, expressed as <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetField_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetField(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetFields_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetFields(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetFieldToken_System_Reflection_FieldInfo_\" data-linktype=\"self-bookmark\">GetFieldToken(FieldInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token used to identify the specified field within this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the module-level method that matches the specified criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetMethods_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMethods(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the methods that have been defined at the module level for the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>, and that match the specified binding flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetMethodToken_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">GetMethodToken(MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token used to identify the specified method within this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetMethodToken_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Type__\" data-linktype=\"self-bookmark\">GetMethodToken(MethodInfo,IEnumerable&lt;Type&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token used to identify the method that has the specified attributes and parameter types within this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetPEKind_System_Reflection_PortableExecutableKinds__System_Reflection_ImageFileMachine__\" data-linktype=\"self-bookmark\">GetPEKind(PortableExecutableKinds,ImageFileMachine)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetSignatureToken_System_Reflection_Emit_SignatureHelper_\" data-linktype=\"self-bookmark\">GetSignatureToken(SignatureHelper)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a token for the signature that is defined by the specified <a class=\"xref\" href=\"system.reflection.emit.signaturehelper\" data-linktype=\"relative-path\">SignatureHelper</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetSignatureToken_System_Byte___System_Int32_\" data-linktype=\"self-bookmark\">GetSignatureToken(Byte[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a token for the signature that has the specified character array and signature length.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetSignerCertificate\" data-linktype=\"self-bookmark\">GetSignerCertificate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, <code>null</code> is returned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetStringConstant_System_String_\" data-linktype=\"self-bookmark\">GetStringConstant(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token of the given string in the moduleâ€™s constant pool.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetSymWriter\" data-linktype=\"self-bookmark\">GetSymWriter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the symbol writer associated with this dynamic module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetType_System_String_\" data-linktype=\"self-bookmark\">GetType(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the named type defined in the module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetType_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetType(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the named type defined in the module, optionally ignoring the case of the type name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">GetType(String,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetTypes\" data-linktype=\"self-bookmark\">GetTypes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the classes defined within this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetTypeToken_System_String_\" data-linktype=\"self-bookmark\">GetTypeToken(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token used to identify the type with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_GetTypeToken_System_Type_\" data-linktype=\"self-bookmark\">GetTypeToken(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token used to identify the specified type within this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the specified attribute type has been applied to this module.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_IsResource\" data-linktype=\"self-bookmark\">IsResource()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the object is a resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_IsTransient\" data-linktype=\"self-bookmark\">IsTransient()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this dynamic module is transient.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_ResolveField_System_Int32_System_Type___System_Type___\" data-linktype=\"self-bookmark\">ResolveField(Int32,Type[],Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_ResolveMember_System_Int32_System_Type___System_Type___\" data-linktype=\"self-bookmark\">ResolveMember(Int32,Type[],Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_ResolveMethod_System_Int32_System_Type___System_Type___\" data-linktype=\"self-bookmark\">ResolveMethod(Int32,Type[],Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_ResolveSignature_System_Int32_\" data-linktype=\"self-bookmark\">ResolveSignature(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the signature blob identified by a metadata token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_ResolveString_System_Int32_\" data-linktype=\"self-bookmark\">ResolveString(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the string identified by the specified metadata token.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_ResolveType_System_Int32_System_Type___System_Type___\" data-linktype=\"self-bookmark\">ResolveType(Int32,Type[],Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\" data-linktype=\"self-bookmark\">SetCustomAttribute(CustomAttributeBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies a custom attribute to this module by using a custom attribute builder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\" data-linktype=\"self-bookmark\">SetCustomAttribute(ConstructorInfo,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_SetSymCustomAttribute_System_String_System_Byte___\" data-linktype=\"self-bookmark\">SetSymCustomAttribute(String,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method does nothing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_SetUserEntryPoint_System_Reflection_MethodInfo_\" data-linktype=\"self-bookmark\">SetUserEntryPoint(MethodInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the user entry point.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_ModuleBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_ModuleBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.InteropServices._ModuleBuilder.GetTypeInfo*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_ModuleBuilder.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_ModuleBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.InteropServices._ModuleBuilder.Invoke*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_Assembly\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_Assembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assembly</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dynamic assembly that defined this instance of <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Assembly Assembly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The dynamic assembly that defined the current dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> object that is returned is the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> that defined this instance of <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_FullyQualifiedName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_FullyQualifiedName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullyQualifiedName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <code>String</code> representing the fully qualified name and path to this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string FullyQualifiedName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified module name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To get the name without the path, use <code>Name</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The case of a module name is platform dependent.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_MDStreamVersion\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_MDStreamVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MDStreamVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the metadata stream version.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int MDStreamVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> For more information on the metadata header, see &quot;Partition II: Metadata Definition and Semantics&quot; in the Common Language Infrastructure (CLI) documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_MetadataToken\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_MetadataToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MetadataToken</div>        \r\n          </div>\r\n    \r\n            <p>Gets a token that identifies the current dynamic module in metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int MetadataToken { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer token that identifies the current module in metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, see <a href=\"http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8\" data-linktype=\"external\">Unmanaged Reflection API</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_ModuleVersionId\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_ModuleVersionId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModuleVersionId</div>        \r\n          </div>\r\n    \r\n            <p>Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Guid ModuleVersionId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> that can be used to distinguish between two versions of a module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In unmanaged metadata, the GUID returned by the <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ModuleVersionId_\" data-linktype=\"relative-path\">ModuleVersionId</a> property is referred to as the <code>mvid</code>, and is stored in the GUID heap.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_Name\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>A string that indicates that this is an in-memory module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Text that indicates that this is an in-memory module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The name of a dynamic module cannot be obtained until the module has been saved and reloaded from disk.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_ScopeName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_ScopeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScopeName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string that represents the name of the dynamic module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ScopeName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateGlobalFunctions()</div>        \r\n          </div>\r\n    \r\n            <p>Completes the global function definitions and global data definitions for this dynamic module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CreateGlobalFunctions ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method was called previously.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should be called when the user is done with defining all the global functions within this dynamic module. After calling this function, no more new global functions or new global data are allowed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample illustrates the use of <code>CreateGlobalFunctions</code> to create a static global method from a <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> implemented with <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_\" data-linktype=\"relative-path\">DefineGlobalMethod</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"ModuleBuilder_CreateGlobalFunctions#2\">      AppDomain^ currentDomain;\n      AssemblyName^ myAssemblyName;\n      MethodBuilder^ myMethodBuilder = nullptr;\n      ILGenerator^ myILGenerator;\n      \n      // Get the current application domain for the current thread.\n      currentDomain = AppDomain::CurrentDomain;\n      myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      \n      // Define a dynamic assembly in the &#39;currentDomain&#39;.\n      myAssemblyBuilder = \n         currentDomain-&gt;DefineDynamicAssembly(\n            myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      \n      // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      \n      // Define a global method in the &#39;TempModule&#39; module.\n      myMethodBuilder = myModuleBuilder-&gt;DefineGlobalMethod(\n         &quot;MyMethod1&quot;, (MethodAttributes)(MethodAttributes::Static | MethodAttributes::Public),\n         nullptr, nullptr );\n      myILGenerator = myMethodBuilder-&gt;GetILGenerator();\n      myILGenerator-&gt;EmitWriteLine( &quot;Hello World from global method.&quot; );\n      myILGenerator-&gt;Emit( OpCodes::Ret );\n      \n      // Fix up the &#39;TempModule&#39; module .\n      myModuleBuilder-&gt;CreateGlobalFunctions();\n</code></pre><pre><code class=\"lang-cs\" name=\"ModuleBuilder_CreateGlobalFunctions#2\">         AppDomain currentDomain;\n         AssemblyName myAssemblyName;\n         MethodBuilder myMethodBuilder=null;\n         ILGenerator myILGenerator;\n\n         // Get the current application domain for the current thread.\n         currentDomain = AppDomain.CurrentDomain;\n         myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;TempAssembly&quot;;\n         \n         // Define a dynamic assembly in the &#39;currentDomain&#39;.\n         myAssemblyBuilder = \n            currentDomain.DefineDynamicAssembly\n                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n\n         // Define a global method in the &#39;TempModule&#39; module.\n         myMethodBuilder = myModuleBuilder.DefineGlobalMethod\n              (&quot;MyMethod1&quot;,MethodAttributes.Static|MethodAttributes.Public,\n                    null,null);\n         myILGenerator = myMethodBuilder.GetILGenerator();\n         myILGenerator.EmitWriteLine(&quot;Hello World from global method.&quot;);\n         myILGenerator.Emit(OpCodes.Ret);\n         // Fix up the &#39;TempModule&#39; module .\n         myModuleBuilder.CreateGlobalFunctions();\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_CreateGlobalFunctions#2\">      Dim currentDomain As AppDomain\n      Dim myAssemblyName As AssemblyName\n      Dim myMethodBuilder As MethodBuilder = Nothing\n      Dim myILGenerator As ILGenerator\n      \n      &#39; Get the current application domain for the current thread.\n      currentDomain = AppDomain.CurrentDomain\n      myAssemblyName = New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      \n      &#39; Define a dynamic assembly in the &#39;currentDomain&#39;.\n      myAssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                                         AssemblyBuilderAccess.RunAndSave)\n      &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      \n      &#39; Define a global method in the &#39;TempModule&#39; module.\n      myMethodBuilder = myModuleBuilder.DefineGlobalMethod(&quot;MyMethod1&quot;, MethodAttributes.Static _\n                                                Or MethodAttributes.Public, Nothing, Nothing)\n      myILGenerator = myMethodBuilder.GetILGenerator()\n      myILGenerator.EmitWriteLine(&quot;Hello World from global method.&quot;)\n      myILGenerator.Emit(OpCodes.Ret)\n      &#39; Fix up the &#39;TempModule&#39; module .\n      myModuleBuilder.CreateGlobalFunctions()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineDocument_System_String_System_Guid_System_Guid_System_Guid_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDocument(String,Guid,Guid,Guid)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a document for source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument (string url, Guid language, Guid languageVendor, Guid documentType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL for the document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>language</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The GUID that identifies the document language. This can be <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>languageVendor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The GUID that identifies the document language vendor. This can be <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>documentType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The GUID that identifies the document type. This can be <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.symbolstore.isymboldocumentwriter\" data-linktype=\"relative-path\">ISymbolDocumentWriter</a></div>\r\n                  </div>\r\n                  <p>The defined document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>url</code> is <code>null</code>. This is a change from earlier versions of the .NET Framework.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method is called on a dynamic module that is not a debug module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Earlier versions of the .NET Framework throw <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> instead of <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> when <code>url</code> is <code>null</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>DefineDocument</code> to attach an external symbol document (in this case, a raw IL file) to a dynamic module.  </p>\n<pre><code class=\"lang-cs\" name=\"ModuleBuilder_DefineDocument#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Resources;\nusing System.Diagnostics.SymbolStore;\n\nnamespace ILGenServer\n{\n   public class CodeGenerator\n   {\n      ModuleBuilder myModuleBuilder ;\n      AssemblyBuilder myAssemblyBuilder ;\n\n      public CodeGenerator()\n      {\n\n         // Get the current application domain for the current thread.\n         AppDomain currentDomain = AppDomain.CurrentDomain;\n         AssemblyName myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;TempAssembly&quot;;\n\n         // Define a dynamic assembly in the current domain.\n         myAssemblyBuilder =\n            currentDomain.DefineDynamicAssembly\n                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         myModuleBuilder =\n            myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;,&quot;Resource.mod&quot;,true);\n\n         // Define a document for source.on &#39;TempModule&#39; module.\n         ISymbolDocumentWriter myDocument =\n         myModuleBuilder.DefineDocument(&quot;RTAsm.il&quot;, SymDocumentType.Text,\n                  SymLanguageType.ILAssembly,SymLanguageVendor.Microsoft);\n\n         Console.WriteLine(&quot;The object representing the defined document is:&quot;+myDocument);\n\n      }\n   }\n   public class CallerClass\n   {\n      public static void Main()\n      {\n         CodeGenerator myGenerator = new CodeGenerator();\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ModuleBuilder_DefineDocument#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Resources;\nusing namespace System::Diagnostics::SymbolStore;\npublic ref class CodeGenerator\n{\nprivate:\n   ModuleBuilder^ myModuleBuilder;\n   AssemblyBuilder^ myAssemblyBuilder;\n\npublic:\n   CodeGenerator()\n   {\n      \n      // Get the current application domain for the current thread.\n      AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      \n      // Define a dynamic assembly in the current domain.\n      myAssemblyBuilder = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      \n      // Define a dynamic module in S&quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot;, &quot;Resource.mod&quot;, true );\n      \n      // Define a document for source.on &#39;TempModule&#39; module.\n      ISymbolDocumentWriter^ myDocument = myModuleBuilder-&gt;DefineDocument( &quot;RTAsm.il&quot;, SymDocumentType::Text, SymLanguageType::ILAssembly, SymLanguageVendor::Microsoft );\n      Console::WriteLine( &quot;The object representing the defined document is: {0}&quot;, myDocument );\n   }\n\n};\n\nint main()\n{\n   CodeGenerator^ myGenerator = gcnew CodeGenerator;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_DefineDocument#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Resources\nImports System.Diagnostics.SymbolStore\n\nNamespace ILGenServer\n\n   Public Class CodeGenerator\n      Private myModuleBuilder As ModuleBuilder\n      Private myAssemblyBuilder As AssemblyBuilder\n\n      Public Sub New()\n\n         &#39; Get the current application domain for the current thread.\n         Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n         Dim myAssemblyName As New AssemblyName()\n         myAssemblyName.Name = &quot;TempAssembly&quot;\n\n         &#39; Define a dynamic assembly in the current domain.\n         myAssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                                         AssemblyBuilderAccess.RunAndSave)\n         &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;, &quot;Resource.mod&quot;, True)\n\n         &#39; Define a document for source.on &#39;TempModule&#39; module.\n         Dim myDocument As ISymbolDocumentWriter = myModuleBuilder.DefineDocument(&quot;RTAsm.il&quot;, _\n                     SymDocumentType.Text, SymLanguageType.ILAssembly, SymLanguageVendor.Microsoft)\n         Console.WriteLine(&quot;The object representing the defined document is:&quot; + _\n                                                             CObj(myDocument).ToString())\n\n      End Sub &#39;New\n   End Class &#39;CodeGenerator\n\n   Public Class CallerClass\n\n      Public Shared Sub Main()\n         Dim myGenerator As New CodeGenerator()\n      End Sub &#39;Main\n   End Class &#39;CallerClass\nEnd Namespace &#39;ILGenServer\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineEnum_System_String_System_Reflection_TypeAttributes_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineEnum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineEnum(String,TypeAttributes,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Defines an enumeration type that is a value type with a single non-static field called <code>value__</code> of the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.EnumBuilder DefineEnum (string name, System.Reflection.TypeAttributes visibility, Type underlyingType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full path of the enumeration type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>visibility</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type attributes for the enumeration. The attributes are any bits defined by <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>underlyingType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The underlying type for the enumeration. This must be a built-in integer type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Attributes other than visibility attributes are provided.  </p>\n<p> -or-  </p>\n<p> An enumeration with the given name exists in the parent assembly of this module.  </p>\n<p> -or-  </p>\n<p> The visibility attributes do not match the scope of the enumeration. For example, <a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a> is specified for <code>visibility</code>, but the enumeration is not a nested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The defined enum is a derived class of <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>. The <code>value__</code> field has <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> and <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> attributes set.  </p>\n<p> For more information about the built-in integer types that can be specified as the underlying types of enumerations, see <a href=\"../Topic/.NET%20Framework%20Class%20Library%20Overview.md\" data-linktype=\"relative-path\">Class Library Overview</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> because <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a> emits enumerations whose elements are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instead of the enumeration type. In the .NET Framework version 2.0, <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a> emits enumerations whose elements have the correct type.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>DefineEnum</code> to implement an enumeration class in a dynamic module. The example defines an enumeration named <code>Elevation</code> that has an underlying type of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, and creates two elements: <code>Low</code>, with a value of 0, and <code>High</code>, with a value of 1. After the type has been created, the assembly is saved with the name <code>TempAssembly.dll</code>. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the contents of this assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"ModuleBuilder_DefineEnum#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Example\n{\n    public static void Main()\n    {\n        // Get the current application domain for the current thread.\n        AppDomain currentDomain = AppDomain.CurrentDomain;\n      \n        // Create a dynamic assembly in the current application domain, \n        // and allow it to be executed and saved to disk.\n        AssemblyName aName = new AssemblyName(&quot;TempAssembly&quot;);\n        AssemblyBuilder ab = currentDomain.DefineDynamicAssembly(\n            aName, AssemblyBuilderAccess.RunAndSave);\n      \n        // Define a dynamic module in &quot;TempAssembly&quot; assembly. For a single-\n        // module assembly, the module has the same name as the assembly.\n        ModuleBuilder mb = ab.DefineDynamicModule(aName.Name, aName.Name + &quot;.dll&quot;);\n      \n        // Define a public enumeration with the name &quot;Elevation&quot; and an \n        // underlying type of Integer.\n        EnumBuilder eb = mb.DefineEnum(&quot;Elevation&quot;, TypeAttributes.Public, typeof(int));\n      \n        // Define two members, &quot;High&quot; and &quot;Low&quot;.\n        eb.DefineLiteral(&quot;Low&quot;, 0);\n        eb.DefineLiteral(&quot;High&quot;, 1);\n\n        // Create the type and save the assembly.\n        Type finished = eb.CreateType();\n        ab.Save(aName.Name + &quot;.dll&quot;);\n\n        foreach( object o in Enum.GetValues(finished) )\n        {\n            Console.WriteLine(&quot;{0}.{1} = {2}&quot;, finished, o, ((int) o));\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nElevation.Low = 0\nElevation.High = 1 \n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_DefineEnum#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Example\n   \n    Sub Main()\n      \n        &#39; Get the current application domain for the current thread.\n        Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n        &#39; Create a dynamic assembly in the current application domain, \n        &#39; and allow it to be executed and saved to disk.\n        Dim aName As AssemblyName = New AssemblyName(&quot;TempAssembly&quot;)\n        Dim ab As AssemblyBuilder = currentDomain.DefineDynamicAssembly( _ \n            aName, AssemblyBuilderAccess.RunAndSave)\n      \n        &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly. For a single-\n        &#39; module assembly, the module has the same name as the assembly.\n        Dim mb As ModuleBuilder = _\n            ab.DefineDynamicModule(aName.Name, aName.Name &amp; &quot;.dll&quot;)\n      \n        &#39; Define a public enumeration with the name &quot;Elevation&quot; and an \n        &#39; underlying type of Integer.\n        Dim eb As EnumBuilder = _\n            mb.DefineEnum(&quot;Elevation&quot;, TypeAttributes.Public, GetType(Integer))\n      \n        &#39; Define two members, &quot;High&quot; and &quot;Low&quot;.\n        eb.DefineLiteral(&quot;Low&quot;, 0)\n        eb.DefineLiteral(&quot;High&quot;, 1)\n\n        &#39; Create the type and save the assembly.\n        Dim finished As Type = eb.CreateType()\n        ab.Save(aName.Name &amp; &quot;.dll&quot;)\n\n        For Each o As Object In [Enum].GetValues(finished)\n            Console.WriteLine(&quot;{0}.{1} = {2}&quot;, finished, o, CInt(o))\n        Next\n   End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Elevation.Low = 0\n&#39;Elevation.High = 1 \n</code></pre><pre><code class=\"lang-cpp\" name=\"ModuleBuilder_DefineEnum#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nvoid main()\n{\n    // Get the current application domain for the current thread.\n    AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      \n    // Create a dynamic assembly in the current application domain, \n    // and allow it to be executed and saved to disk.\n    AssemblyName^ aName = gcnew AssemblyName(&quot;TempAssembly&quot;);\n    AssemblyBuilder^ ab = currentDomain-&gt;DefineDynamicAssembly( \n            aName, AssemblyBuilderAccess::RunAndSave);\n      \n    // Define a dynamic module in &quot;TempAssembly&quot; assembly. For a single-\n    // module assembly, the module has the same name as the assembly.\n    ModuleBuilder^ mb = \n            ab-&gt;DefineDynamicModule(aName-&gt;Name, aName-&gt;Name + &quot;.dll&quot;);\n      \n    // Define a public enumeration with the name &quot;Elevation&quot; and an \n    // underlying type of Int32.\n    EnumBuilder^ eb = \n            mb-&gt;DefineEnum(&quot;Elevation&quot;, TypeAttributes::Public, int::typeid);\n      \n    // Define two members, &quot;High&quot; and &quot;Low&quot;.\n    eb-&gt;DefineLiteral(&quot;Low&quot;, (Object^) 0);\n    eb-&gt;DefineLiteral(&quot;High&quot;, 1);\n\n    // Create the type and save the assembly.\n    Type^ finished = eb-&gt;CreateType();\n    ab-&gt;Save(aName-&gt;Name + &quot;.dll&quot;);\n\n    for each (Object^ o in Enum::GetValues(finished))\n    {\n        Console::WriteLine(&quot;{0}.{1} = {2}&quot;, finished, o, (int)o);\n    }\n}\n\n/* This code example produces the following output:\n\nElevation.Low = 0\nElevation.High = 1\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_System_String_System_Reflection_MethodAttributes_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineGlobalMethod(String,MethodAttributes,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Defines a global method with the specified name, attributes, return type, and parameter types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method. <code>attributes</code> must include <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined global method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is not static. That is, <code>attributes</code> does not include <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.  </p>\n<p> -or-  </p>\n<p> The length of <code>name</code> is zero  </p>\n<p> -or-  </p>\n<p> An element in the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> array is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions*</span> has been previously called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The global method that this method defines is not usable until you call <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>DefineGlobalMethod</code> to create a type-independent method tied to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>. After building the global method, <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a> must be called in order to complete it.  </p>\n<pre><code class=\"lang-cpp\" name=\"ModuleBuilder_CreateGlobalFunctions#1\">      AppDomain^ currentDomain;\n      AssemblyName^ myAssemblyName;\n      MethodBuilder^ myMethodBuilder = nullptr;\n      ILGenerator^ myILGenerator;\n      \n      // Get the current application domain for the current thread.\n      currentDomain = AppDomain::CurrentDomain;\n      myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      \n      // Define a dynamic assembly in the &#39;currentDomain&#39;.\n      myAssemblyBuilder = \n         currentDomain-&gt;DefineDynamicAssembly(\n            myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      \n      // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      \n      // Define a global method in the &#39;TempModule&#39; module.\n      myMethodBuilder = myModuleBuilder-&gt;DefineGlobalMethod(\n         &quot;MyMethod1&quot;, (MethodAttributes)(MethodAttributes::Static | MethodAttributes::Public),\n         nullptr, nullptr );\n      myILGenerator = myMethodBuilder-&gt;GetILGenerator();\n      myILGenerator-&gt;EmitWriteLine( &quot;Hello World from global method.&quot; );\n      myILGenerator-&gt;Emit( OpCodes::Ret );\n      \n      // Fix up the &#39;TempModule&#39; module .\n      myModuleBuilder-&gt;CreateGlobalFunctions();\n</code></pre><pre><code class=\"lang-cs\" name=\"ModuleBuilder_CreateGlobalFunctions#1\">         AppDomain currentDomain;\n         AssemblyName myAssemblyName;\n         MethodBuilder myMethodBuilder=null;\n         ILGenerator myILGenerator;\n\n         // Get the current application domain for the current thread.\n         currentDomain = AppDomain.CurrentDomain;\n         myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;TempAssembly&quot;;\n         \n         // Define a dynamic assembly in the &#39;currentDomain&#39;.\n         myAssemblyBuilder = \n            currentDomain.DefineDynamicAssembly\n                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n\n         // Define a global method in the &#39;TempModule&#39; module.\n         myMethodBuilder = myModuleBuilder.DefineGlobalMethod\n              (&quot;MyMethod1&quot;,MethodAttributes.Static|MethodAttributes.Public,\n                    null,null);\n         myILGenerator = myMethodBuilder.GetILGenerator();\n         myILGenerator.EmitWriteLine(&quot;Hello World from global method.&quot;);\n         myILGenerator.Emit(OpCodes.Ret);\n         // Fix up the &#39;TempModule&#39; module .\n         myModuleBuilder.CreateGlobalFunctions();\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_CreateGlobalFunctions#1\">      Dim currentDomain As AppDomain\n      Dim myAssemblyName As AssemblyName\n      Dim myMethodBuilder As MethodBuilder = Nothing\n      Dim myILGenerator As ILGenerator\n      \n      &#39; Get the current application domain for the current thread.\n      currentDomain = AppDomain.CurrentDomain\n      myAssemblyName = New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      \n      &#39; Define a dynamic assembly in the &#39;currentDomain&#39;.\n      myAssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                                         AssemblyBuilderAccess.RunAndSave)\n      &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      \n      &#39; Define a global method in the &#39;TempModule&#39; module.\n      myMethodBuilder = myModuleBuilder.DefineGlobalMethod(&quot;MyMethod1&quot;, MethodAttributes.Static _\n                                                Or MethodAttributes.Public, Nothing, Nothing)\n      myILGenerator = myMethodBuilder.GetILGenerator()\n      myILGenerator.EmitWriteLine(&quot;Hello World from global method.&quot;)\n      myILGenerator.Emit(OpCodes.Ret)\n      &#39; Fix up the &#39;TempModule&#39; module .\n      myModuleBuilder.CreateGlobalFunctions()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method. <code>attributes</code> must include <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention for the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined global method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is not static. That is, <code>attributes</code> does not include <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.  </p>\n<p> -or-  </p>\n<p> An element in the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> array is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions*</span> has been previously called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot use the global method that this method defines until you call <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>DefineGlobalMethod</code> to create a type-independent method tied to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>. After building the global method, <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a> must be called in order to complete it.  </p>\n<pre><code class=\"lang-cpp\" name=\"ModuleBuilder_CreateGlobalFunctions#1\">      AppDomain^ currentDomain;\n      AssemblyName^ myAssemblyName;\n      MethodBuilder^ myMethodBuilder = nullptr;\n      ILGenerator^ myILGenerator;\n      \n      // Get the current application domain for the current thread.\n      currentDomain = AppDomain::CurrentDomain;\n      myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      \n      // Define a dynamic assembly in the &#39;currentDomain&#39;.\n      myAssemblyBuilder = \n         currentDomain-&gt;DefineDynamicAssembly(\n            myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      \n      // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      \n      // Define a global method in the &#39;TempModule&#39; module.\n      myMethodBuilder = myModuleBuilder-&gt;DefineGlobalMethod(\n         &quot;MyMethod1&quot;, (MethodAttributes)(MethodAttributes::Static | MethodAttributes::Public),\n         nullptr, nullptr );\n      myILGenerator = myMethodBuilder-&gt;GetILGenerator();\n      myILGenerator-&gt;EmitWriteLine( &quot;Hello World from global method.&quot; );\n      myILGenerator-&gt;Emit( OpCodes::Ret );\n      \n      // Fix up the &#39;TempModule&#39; module .\n      myModuleBuilder-&gt;CreateGlobalFunctions();\n</code></pre><pre><code class=\"lang-cs\" name=\"ModuleBuilder_CreateGlobalFunctions#1\">         AppDomain currentDomain;\n         AssemblyName myAssemblyName;\n         MethodBuilder myMethodBuilder=null;\n         ILGenerator myILGenerator;\n\n         // Get the current application domain for the current thread.\n         currentDomain = AppDomain.CurrentDomain;\n         myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;TempAssembly&quot;;\n         \n         // Define a dynamic assembly in the &#39;currentDomain&#39;.\n         myAssemblyBuilder = \n            currentDomain.DefineDynamicAssembly\n                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n\n         // Define a global method in the &#39;TempModule&#39; module.\n         myMethodBuilder = myModuleBuilder.DefineGlobalMethod\n              (&quot;MyMethod1&quot;,MethodAttributes.Static|MethodAttributes.Public,\n                    null,null);\n         myILGenerator = myMethodBuilder.GetILGenerator();\n         myILGenerator.EmitWriteLine(&quot;Hello World from global method.&quot;);\n         myILGenerator.Emit(OpCodes.Ret);\n         // Fix up the &#39;TempModule&#39; module .\n         myModuleBuilder.CreateGlobalFunctions();\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_CreateGlobalFunctions#1\">      Dim currentDomain As AppDomain\n      Dim myAssemblyName As AssemblyName\n      Dim myMethodBuilder As MethodBuilder = Nothing\n      Dim myILGenerator As ILGenerator\n      \n      &#39; Get the current application domain for the current thread.\n      currentDomain = AppDomain.CurrentDomain\n      myAssemblyName = New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      \n      &#39; Define a dynamic assembly in the &#39;currentDomain&#39;.\n      myAssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                                         AssemblyBuilderAccess.RunAndSave)\n      &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      \n      &#39; Define a global method in the &#39;TempModule&#39; module.\n      myMethodBuilder = myModuleBuilder.DefineGlobalMethod(&quot;MyMethod1&quot;, MethodAttributes.Static _\n                                                Or MethodAttributes.Public, Nothing, Nothing)\n      myILGenerator = myMethodBuilder.GetILGenerator()\n      myILGenerator.EmitWriteLine(&quot;Hello World from global method.&quot;)\n      myILGenerator.Emit(OpCodes.Ret)\n      &#39; Fix up the &#39;TempModule&#39; module .\n      myModuleBuilder.CreateGlobalFunctions()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Type___System_Type___System_Type_____System_Type_____\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])</div>        \r\n          </div>\r\n    \r\n            <p>Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the method. <code>name</code> cannot contain embedded null characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method. <code>attributes</code> must include <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention for the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredReturnTypeCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the required custom modifiers for the return type, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a> or <a class=\"xref\" href=\"system.runtime.compilerservices.isboxed\" data-linktype=\"relative-path\">IsBoxed</a>. If the return type has no required custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalReturnTypeCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of types representing the optional custom modifiers for the return type, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a> or <a class=\"xref\" href=\"system.runtime.compilerservices.isboxed\" data-linktype=\"relative-path\">IsBoxed</a>. If the return type has no optional custom modifiers, specify <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredParameterTypeCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify <code>null</code> instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalParameterTypeCustomModifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[][]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify <code>null</code> instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify <code>null</code> instead of an array of arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined global method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is not static. That is, <code>attributes</code> does not include <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a>.  </p>\n<p> -or-  </p>\n<p> An element in the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> array is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions*</span> method has been previously called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for designers of managed compilers.  </p>\n<p> You cannot use the global method that this method defines until you call <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineInitializedData_System_String_System_Byte___System_Reflection_FieldAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineInitializedData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineInitializedData(String,Byte[],FieldAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines an initialized data field in the .sdata section of the portable executable (PE) file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name used to refer to the data. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The binary large object (BLOB) of data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes for the field. The default is <code>Static</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a></div>\r\n                  </div>\r\n                  <p>A field to reference the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> The size of <code>data</code> is less than or equal to zero or greater than or equal to 0x3f0000.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>data</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions*</span> has been previously called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> is automatically included in <code>attributes</code>.  </p>\n<p> The data defined by this method is not created until the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a> method is called.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the DefineInitializedData method to define an initialized data field in the <code>.sdata</code> section of the portable executable (PE) file.  </p>\n<pre><code class=\"lang-cpp\" name=\"ModuleBuilder_DefineInitializedData#1\">      AppDomain^ currentDomain;\n      AssemblyName^ myAssemblyName;\n      \n      // Get the current application domain for the current thread.\n      currentDomain = AppDomain::CurrentDomain;\n      myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      \n      // Define a dynamic assembly in the &#39;currentDomain&#39;.\n      myAssemblyBuilder =\n         currentDomain-&gt;DefineDynamicAssembly(\n            myAssemblyName, AssemblyBuilderAccess::Run );\n      \n      // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      \n      // Define the initialized data field in the .sdata section of the PE file.\n      array&lt;Byte&gt;^ temp0 = {01,00,01};\n      FieldBuilder^ myFieldBuilder =\n         myModuleBuilder-&gt;DefineInitializedData( &quot;MyField&quot;, temp0,\n            (FieldAttributes)(FieldAttributes::Static | FieldAttributes::Public) );\n      myModuleBuilder-&gt;CreateGlobalFunctions();\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_DefineInitializedData#1\">      Dim currentDomain As AppDomain\n      Dim myAssemblyName As AssemblyName\n      &#39; Get the current application domain for the current thread.\n      currentDomain = AppDomain.CurrentDomain\n      myAssemblyName = New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      &#39; Define a dynamic assembly in the &#39;currentDomain&#39;.\n      myAssemblyBuilder = _\n            currentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run)\n      &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      &#39; Define the initialized data field in the .sdata section of the PE file.\n      Dim myFieldBuilder As FieldBuilder = _\n            myModuleBuilder.DefineInitializedData(&quot;MyField&quot;, New Byte() {1, 0, 1}, _\n            FieldAttributes.Static Or FieldAttributes.Public)\n      myModuleBuilder.CreateGlobalFunctions()\n</code></pre><pre><code class=\"lang-cs\" name=\"ModuleBuilder_DefineInitializedData#1\">         AppDomain currentDomain;\n         AssemblyName myAssemblyName;\n\n         // Get the current application domain for the current thread.\n         currentDomain = AppDomain.CurrentDomain;\n         myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;TempAssembly&quot;;\n\n         // Define a dynamic assembly in the &#39;currentDomain&#39;.\n         myAssemblyBuilder = \n            currentDomain.DefineDynamicAssembly\n                        (myAssemblyName, AssemblyBuilderAccess.Run);\n\n         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n\n         // Define the initialized data field in the .sdata section of the PE file.\n         FieldBuilder myFieldBuilder = \n             myModuleBuilder.DefineInitializedData(&quot;MyField&quot;,new byte[]{01,00,01},\n                        FieldAttributes.Static|FieldAttributes.Public);\n          myModuleBuilder.CreateGlobalFunctions();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineManifestResource_System_String_System_IO_Stream_System_Reflection_ResourceAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineManifestResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineManifestResource(String,Stream,ResourceAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a binary large object (BLOB) that represents a manifest resource to be embedded in the dynamic assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DefineManifestResource (string name, System.IO.Stream stream, System.Reflection.ResourceAttributes attribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The case-sensitive name for the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A stream that contains the bytes for the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.resourceattributes\" data-linktype=\"relative-path\">ResourceAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumeration value that specifies whether the resource is public or private.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>stream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is a zero-length string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The dynamic assembly that contains the current module is transient; that is, no file name was specified when <span class=\"xref\">stem.Reflection.Emit.AssemblyBuilder.DefineDynamicModule*</span> was called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Resources that are recorded in the assembly manifest can be managed resources or manifest resource BLOBs, and each of these can be included in the assembly either by linking or by embedding. All four scenarios are supported for dynamic assemblies.  </p>\n<ul>\n<li><p>This method allows you to embed a manifest resource BLOB into a dynamic assembly.  </p>\n</li>\n<li><p>To embed a managed resource into the manifest module of a dynamic assembly or into a satellite module, use the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineResource_\" data-linktype=\"relative-path\">DefineResource</a> method to get a resource writer, and use the <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_AddResource_\" data-linktype=\"relative-path\">AddResource</a> method to add the resource.  </p>\n</li>\n<li><p>To link a managed resource into a dynamic assembly, use the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineResource_\" data-linktype=\"relative-path\">DefineResource</a> method to get a resource writer, and use the <a class=\"xref\" href=\"system.resources.resourcewriter#System_Resources_ResourceWriter_AddResource_\" data-linktype=\"relative-path\">AddResource</a> method to add the linked resource.  </p>\n</li>\n<li><p>To link a manifest resource BLOB into a dynamic assembly, use the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_AddResourceFile_\" data-linktype=\"relative-path\">AddResourceFile</a> method to add the linked resource.  </p>\n<p>In addition, a single Win32 resource can be attached to an assembly by using the <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineUnmanagedResource_\" data-linktype=\"relative-path\">DefineUnmanagedResource</a> method or the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineUnmanagedResource_\" data-linktype=\"relative-path\">DefineUnmanagedResource</a> method. This resource does not appear in the assembly manifest.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example generates and saves a dynamic assembly named <code>EmittedManifestResourceAssembly.exe</code>, which contains an embedded unmanaged resource. The example creates the assembly, which consists of one module, and opens a memory stream to contain the unmanaged resource. The code then calls the DefineManifestResource method to define the resource.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can use any kind of stream for your resource; for example, you can read the unmanaged binary data from a file.  </p>\n</div>\n<p> The example defines a type in the dynamic module with a <code>Main</code> method, and generates MSIL for the method body. After the body for the <code>Main</code> method has been generated and the type has been created, the code example writes five bytes to the stream associated with the manifest resource. When the assembly is saved, the resource is appended to it.  </p>\n<p> After running the example, you can run the emitted assembly. The code in the emitted assembly&#39;s <code>Main</code> method reads the embedded manifest resource and prints the byte values to the console. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to view the information in the assembly manifest.  </p>\n<pre><code class=\"lang-cs\" name=\"DefineManifestResource#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.IO;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Define a dynamic assembly with one module. The module\n        // name and the assembly name are the same.\n        AssemblyName asmName = \n            new AssemblyName(&quot;EmittedManifestResourceAssembly&quot;);\n        AssemblyBuilder asmBuilder =\n            AppDomain.CurrentDomain.DefineDynamicAssembly(\n                asmName,\n                AssemblyBuilderAccess.RunAndSave\n            ); \n        ModuleBuilder modBuilder = asmBuilder.DefineDynamicModule(\n            asmName.Name,\n            asmName.Name + &quot;.exe&quot;\n        );\n\n        // Create a memory stream for the unmanaged resource data.\n        // You can use any stream; for example, you might read the\n        // unmanaged resource data from a binary file. It is not\n        // necessary to put any data into the stream right now.\n        MemoryStream ms = new MemoryStream(1024);\n\n        // Define a public manifest resource with the name \n        // &quot;MyBinaryData, and associate it with the memory stream.\n        modBuilder.DefineManifestResource(\n            &quot;MyBinaryData&quot;,\n            ms,\n            ResourceAttributes.Public\n        );\n\n        // Create a type with a public static Main method that will\n        // be the entry point for the emitted assembly. \n        //\n        // The purpose of the Main method in this example is to read \n        // the manifest resource and display it, byte by byte.\n        //\n        TypeBuilder tb = modBuilder.DefineType(&quot;Example&quot;);\n        MethodBuilder main = tb.DefineMethod(&quot;Main&quot;, \n            MethodAttributes.Public | MethodAttributes.Static\n        );\n\n        // The Main method uses the Assembly type and the Stream\n        // type. \n        Type asm = typeof(Assembly);\n        Type str = typeof(Stream);\n\n        // Get MethodInfo objects for the methods called by \n        // Main.\n        MethodInfo getEx = asm.GetMethod(&quot;GetExecutingAssembly&quot;);\n        // Use the overload of GetManifestResourceStream that \n        // takes one argument, a string.\n        MethodInfo getMRS = asm.GetMethod(\n            &quot;GetManifestResourceStream&quot;, \n            new Type[] {typeof(string)}\n        );\n        MethodInfo rByte = str.GetMethod(&quot;ReadByte&quot;);\n        // Use the overload of WriteLine that writes an Int32.\n        MethodInfo write = typeof(Console).GetMethod(\n            &quot;WriteLine&quot;, \n            new Type[] {typeof(int)}\n        );\n\n        ILGenerator ilg = main.GetILGenerator();\n\n        // Main uses two local variables: the instance of the\n        // stream returned by GetManifestResourceStream, and \n        // the value returned by ReadByte. The load and store \n        // instructions refer to these locals by position\n        // (0 and 1).\n        LocalBuilder s = ilg.DeclareLocal(str);\n        LocalBuilder b = ilg.DeclareLocal(typeof(int));\n\n        // Call the static Assembly.GetExecutingAssembly() method,\n        // which leaves the assembly instance on the stack. Push the\n        // string name of the resource on the stack, and call the\n        // GetManifestResourceStream(string) method of the assembly\n        // instance.\n        ilg.EmitCall(OpCodes.Call, getEx, null);\n        ilg.Emit(OpCodes.Ldstr, &quot;MyBinaryData&quot;);\n        ilg.EmitCall(OpCodes.Callvirt, getMRS, null);\n\n        // Store the Stream instance.\n        ilg.Emit(OpCodes.Stloc_0);\n\n        // Create a label, and associate it with this point\n        // in the emitted code.\n        Label loop = ilg.DefineLabel();\n        ilg.MarkLabel(loop);\n\n        // Load the Stream instance onto the stack, and call\n        // its ReadByte method. The return value is on the\n        // stack now; store it in location 1 (variable b).\n        ilg.Emit(OpCodes.Ldloc_0);\n        ilg.EmitCall(OpCodes.Callvirt, rByte, null);\n        ilg.Emit(OpCodes.Stloc_1);\n\n        // Load the value on the stack again, and call the\n        // WriteLine method to print it.\n        ilg.Emit(OpCodes.Ldloc_1);\n        ilg.EmitCall(OpCodes.Call, write, null);\n\n        // Load the value one more time; load -1 (minus one)  \n        // and compare the two values. If return value from\n        // ReadByte was not -1, branch to the label &#39;loop&#39;.\n        ilg.Emit(OpCodes.Ldloc_1);\n        ilg.Emit(OpCodes.Ldc_I4_M1);\n        ilg.Emit(OpCodes.Ceq);\n        ilg.Emit(OpCodes.Brfalse_S, loop);\n\n        // When all the bytes in the stream have been read,\n        // return. This is the end of Main.\n        ilg.Emit(OpCodes.Ret);\n\n        // Create the type &quot;Example&quot; in the dynamic assembly.\n        tb.CreateType();\n\n        // Because the manifest resource was added as an open\n        // stream, the data can be written at any time, right up\n        // until the assembly is saved. In this case, the data\n        // consists of five bytes.\n        ms.Write(new byte[] { 105, 36, 74, 97, 109 }, 0, 5);\n        ms.SetLength(5);\n\n        // Set the Main method as the entry point for the \n        // assembly, and save the assembly. The manifest resource\n        // is read from the memory stream, and appended to the\n        // end of the assembly. You can open the assembly with\n        // Ildasm and view the resource header for &quot;MyBinaryData&quot;.\n        asmBuilder.SetEntryPoint(main);\n\tasmBuilder.Save(asmName.Name + &quot;.exe&quot;);\n\n        Console.WriteLine(&quot;Now run EmittedManifestResourceAssembly.exe&quot;);\n    }\n}\n\n/* This code example doesn&#39;t produce any output. The assembly it\n   emits, EmittedManifestResourceAssembly.exe, produces the following\n   output:\n\n105\n36\n74\n97\n109\n-1\n\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"DefineManifestResource#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.IO\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n\n        &#39; Define a dynamic assembly with one module. The module\n        &#39; name and the assembly name are the same.\n        Dim asmName As New AssemblyName(&quot;EmittedManifestResourceAssembly&quot;)\n        Dim asmBuilder As AssemblyBuilder = _\n            AppDomain.CurrentDomain.DefineDynamicAssembly( _\n                asmName, _\n                AssemblyBuilderAccess.RunAndSave _\n            )\n        Dim modBuilder As ModuleBuilder = _\n            asmBuilder.DefineDynamicModule( _\n                asmName.Name, _\n                asmName.Name + &quot;.exe&quot; _\n            )\n        \n        &#39; Create a memory stream for the unmanaged resource data.\n        &#39; You can use any stream; for example, you might read the\n        &#39; unmanaged resource data from a binary file. It is not\n        &#39; necessary to put any data into the stream right now.\n        Dim ms As New MemoryStream(1024)\n        \n        &#39; Define a public manifest resource with the name \n        &#39; &quot;MyBinaryData, and associate it with the memory stream.\n        modBuilder.DefineManifestResource( _\n            &quot;MyBinaryData&quot;, _\n            ms, _\n            ResourceAttributes.Public _\n        )\n        \n        &#39; Create a type with a public static Main method that will\n        &#39; be the entry point for the emitted assembly. \n        &#39;\n        &#39; The purpose of the Main method in this example is to read \n        &#39; the manifest resource and display it, byte by byte.\n        &#39;\n        Dim tb As TypeBuilder = modBuilder.DefineType(&quot;Example&quot;)\n        Dim main As MethodBuilder = tb.DefineMethod( _\n            &quot;Main&quot;, _\n            MethodAttributes.Public Or MethodAttributes.Static _\n        )\n        \n        &#39; The Main method uses the Assembly type and the Stream\n        &#39; type. \n        Dim asm As Type = GetType([Assembly])\n        Dim str As Type = GetType(Stream)\n        \n        &#39; Get MethodInfo objects for the methods called by \n        &#39; Main.\n        Dim getEx As MethodInfo = asm.GetMethod(&quot;GetExecutingAssembly&quot;)\n        &#39; Use the overload of GetManifestResourceStream that \n        &#39; takes one argument, a string.\n        Dim getMRS As MethodInfo = asm.GetMethod( _\n            &quot;GetManifestResourceStream&quot;, _\n            New Type() {GetType(String)} _\n        )\n        Dim rByte As MethodInfo = str.GetMethod(&quot;ReadByte&quot;)\n        &#39; Use the overload of WriteLine that writes an Int32.\n        Dim write As MethodInfo = GetType(Console).GetMethod( _\n            &quot;WriteLine&quot;, _\n            New Type() {GetType(Integer)} _\n        )\n        \n        Dim ilg As ILGenerator = main.GetILGenerator()\n        \n        &#39; Main uses two local variables: the instance of the\n        &#39; stream returned by GetManifestResourceStream, and \n        &#39; the value returned by ReadByte. The load and store \n        &#39; instructions refer to these locals by position  \n        &#39; (0 and 1).\n        Dim s As LocalBuilder = ilg.DeclareLocal(str)\n        Dim b As LocalBuilder = ilg.DeclareLocal(GetType(Integer))\n        \n        &#39; Call the static Assembly.GetExecutingAssembly() method,\n        &#39; which leaves the assembly instance on the stack. Push the\n        &#39; string name of the resource on the stack, and call the\n        &#39; GetManifestResourceStream(string) method of the assembly\n        &#39; instance.\n        ilg.EmitCall(OpCodes.Call, getEx, Nothing)\n        ilg.Emit(OpCodes.Ldstr, &quot;MyBinaryData&quot;)\n        ilg.EmitCall(OpCodes.Callvirt, getMRS, Nothing)\n        \n        &#39; Store the Stream instance.\n        ilg.Emit(OpCodes.Stloc_0)\n        \n        &#39; Create a label, and associate it with this point\n        &#39; in the emitted code.\n        Dim theLoop As Label = ilg.DefineLabel()\n        ilg.MarkLabel(theLoop)\n        \n        &#39; Load the Stream instance onto the stack, and call\n        &#39; its ReadByte method. The return value is on the\n        &#39; stack now; store it in location 1 (variable b).\n        ilg.Emit(OpCodes.Ldloc_0)\n        ilg.EmitCall(OpCodes.Callvirt, rByte, Nothing)\n        ilg.Emit(OpCodes.Stloc_1)\n        \n        &#39; Load the value on the stack again, and call the\n        &#39; WriteLine method to print it.\n        ilg.Emit(OpCodes.Ldloc_1)\n        ilg.EmitCall(OpCodes.Call, write, Nothing)\n        \n        &#39; Load the value one more time; load -1 (minus one)  \n        &#39; and compare the two values. If return value from\n        &#39; ReadByte was not -1, branch to the label &#39;loop&#39;.\n        ilg.Emit(OpCodes.Ldloc_1)\n        ilg.Emit(OpCodes.Ldc_I4_M1)\n        ilg.Emit(OpCodes.Ceq)\n        ilg.Emit(OpCodes.Brfalse_S, theLoop)\n        \n        &#39; When all the bytes in the stream have been read,\n        &#39; return. This is the end of Main.\n        ilg.Emit(OpCodes.Ret)\n        \n        &#39; Create the type &quot;Example&quot; in the dynamic assembly.\n        tb.CreateType()\n        \n        &#39; Because the manifest resource was added as an open\n        &#39; stream, the data can be written at any time, right up\n        &#39; until the assembly is saved. In this case, the data\n        &#39; consists of five bytes.\n        ms.Write(New Byte() {105, 36, 74, 97, 109}, 0, 5)\n        ms.SetLength(5)\n        \n        &#39; Set the Main method as the entry point for the \n        &#39; assembly, and save the assembly. The manifest resource\n        &#39; is read from the memory stream, and appended to the\n        &#39; end of the assembly. You can open the assembly with\n        &#39; Ildasm and view the resource header for &quot;MyBinaryData&quot;.\n        asmBuilder.SetEntryPoint(main)\n        asmBuilder.Save(asmName.Name + &quot;.exe&quot;)\n        \n        Console.WriteLine(&quot;Now run EmittedManifestResourceAssembly.exe&quot;)\n    \n    End Sub \nEnd Class \n\n&#39; This code example doesn&#39;t produce any output. The assembly it\n&#39; emits, EmittedManifestResourceAssembly.exe, produces the following\n&#39; output:\n&#39;\n&#39;105\n&#39;36\n&#39;74\n&#39;97\n&#39;109\n&#39;-1\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefinePInvokeMethod_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefinePInvokeMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a <code>PInvoke</code> method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <code>PInvoke</code> flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <code>PInvoke</code> method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dllName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the DLL in which the <code>PInvoke</code> method is defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCallConv</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.callingconvention\" data-linktype=\"relative-path\">CallingConvention</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The native calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCharSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s native character set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined <code>PInvoke</code> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is not static or if the containing type is an interface.  </p>\n<p> -or-  </p>\n<p> The method is abstract.  </p>\n<p> -or-  </p>\n<p> The method was previously defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>dllName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some DLL import attributes (see the description of System.Runtime.InteropServices.DllImportAttribute) cannot be specified as arguments to this method. Such attributes should be set by emitting a custom attribute for the method. For example, the DLL import attribute <code>PreserveSig</code> is set by emitting a custom attribute.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>DefinePInvokeMethod</code> method to create a <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> for an external unmanaged method, <code>MessageBoxA</code>, in the Win32 API. The example displays a message box with <strong>Retry</strong> and <strong>Cancel</strong> buttons, and displays the return value from the message box.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> To get a non-zero return value, you must add <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> to the method implementation flags after you create the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a>, by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_GetMethodImplementationFlags_\" data-linktype=\"relative-path\">GetMethodImplementationFlags</a> and <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetImplementationFlags_\" data-linktype=\"relative-path\">SetImplementationFlags</a> methods.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"ModuleBuilder_DefinePInvokeMethod1#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\n\nconst int MB_RETRYCANCEL = 5;\n\nvoid main()\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName(&quot;TempAssembly&quot;);\n\n   // Define a dynamic assembly in the current application domain.\n   AssemblyBuilder^ myAssemblyBuilder = \n      AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(\n                  myAssemblyName, AssemblyBuilderAccess::Run);\n\n   // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n   ModuleBuilder^ myModuleBuilder = \n      myAssemblyBuilder-&gt;DefineDynamicModule(&quot;TempModule&quot;);\n\n   array&lt;Type^&gt;^ paramTypes = \n      { int::typeid, String::typeid, String::typeid, int::typeid };\n\n   // Define a PInvoke method.\n   MethodBuilder^ piMethodBuilder = myModuleBuilder-&gt;DefinePInvokeMethod(\n      &quot;MessageBoxA&quot;,\n      &quot;user32.dll&quot;,\n      MethodAttributes::Public | MethodAttributes::Static | MethodAttributes::PinvokeImpl,\n      CallingConventions::Standard,\n      int::typeid,\n      paramTypes,\n      CallingConvention::Winapi,\n      CharSet::Ansi);\n\n   // Add PreserveSig to the method implementation flags. NOTE: If this line\n   // is commented out, the return value will be zero when the method is\n   // invoked.\n   piMethodBuilder-&gt;SetImplementationFlags(\n      piMethodBuilder-&gt;GetMethodImplementationFlags() | MethodImplAttributes::PreserveSig);\n\n   // Create global methods.\n   myModuleBuilder-&gt;CreateGlobalFunctions();\n\n   // Arguments for calling the method.\n   array&lt;Object^&gt;^ arguments = \n      { (Object^)(int) 0, &quot;Hello World&quot;, &quot;Title&quot;, MB_RETRYCANCEL };\n\n   MethodInfo^ pinvokeMethod = myModuleBuilder-&gt;GetMethod(&quot;MessageBoxA&quot;);\n   Console::WriteLine(&quot;Testing module-level PInvoke method created with DefinePInvokeMethod...&quot;);\n   Console::WriteLine(&quot;Message box returned: {0}&quot;, \n      pinvokeMethod-&gt;Invoke(nullptr, arguments));\n};\n\n\n/* This code example produces input similar to the following:\n\nTesting module-level PInvoke method created with DefinePInvokeMethod...\nMessage box returned: 4\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ModuleBuilder_DefinePInvokeMethod1#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\n\nnamespace PInvoke\n{\n   public class Example\n   {\n      const int MB_RETRYCANCEL = 5;\n\n      static void Main()\n      {\n         AssemblyName myAssemblyName = new AssemblyName(&quot;TempAssembly&quot;);\n\n         // Define a dynamic assembly in the current application domain.\n         AssemblyBuilder myAssemblyBuilder = \n            AppDomain.CurrentDomain.DefineDynamicAssembly(\n                        myAssemblyName, AssemblyBuilderAccess.Run);\n\n         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         ModuleBuilder myModuleBuilder = \n            myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n\n         Type[] paramTypes = { typeof(int), typeof(string), typeof(string), typeof(int) };\n\n         // Define a PInvoke method.\n         MethodBuilder piMethodBuilder = myModuleBuilder.DefinePInvokeMethod(\n            &quot;MessageBoxA&quot;,\n            &quot;user32.dll&quot;,\n            MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl,\n            CallingConventions.Standard,\n            typeof(int),\n            paramTypes,\n            CallingConvention.Winapi,\n            CharSet.Ansi);\n         \n         // Add PreserveSig to the method implementation flags. NOTE: If this line\n         // is commented out, the return value will be zero when the method is\n         // invoked.\n         piMethodBuilder.SetImplementationFlags(\n            piMethodBuilder.GetMethodImplementationFlags() | MethodImplAttributes.PreserveSig);\n\n         // Create global methods.\n         myModuleBuilder.CreateGlobalFunctions();\n\n         // Arguments for calling the method.\n         Object[] arguments = { 0, &quot;Hello World&quot;, &quot;Title&quot;, MB_RETRYCANCEL };\n\n         MethodInfo pinvokeMethod = myModuleBuilder.GetMethod(&quot;MessageBoxA&quot;);\n         Console.WriteLine(&quot;Testing module-level PInvoke method created with DefinePInvokeMethod...&quot;);\n         Console.WriteLine(&quot;Message box returned: {0}&quot;, \n            pinvokeMethod.Invoke(null, arguments));\n      }\n   }\n}\n\n/* This code example produces input similar to the following:\n\nTesting module-level PInvoke method created with DefinePInvokeMethod...\nMessage box returned: 4\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_DefinePInvokeMethod1#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\nNamespace PInvoke\n\n   Public Class Example\n   \n      Const MB_RETRYCANCEL As Integer = 5\n\n      Shared Sub Main()\n      \n         Dim myAssemblyName As New AssemblyName(&quot;TempAssembly&quot;)\n\n         &#39; Define a dynamic assembly in the current application domain.\n         Dim myAssemblyBuilder As AssemblyBuilder = _\n            AppDomain.CurrentDomain.DefineDynamicAssembly( _\n                        myAssemblyName, AssemblyBuilderAccess.Run)\n\n         &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         Dim myModuleBuilder As ModuleBuilder = _\n            myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n\n         Dim paramTypes() As Type = _\n            { GetType(Integer), GetType(string), GetType(string), GetType(Integer) }\n\n         &#39; Define a PInvoke method.\n         Dim piMethodBuilder As MethodBuilder = myModuleBuilder.DefinePInvokeMethod( _\n            &quot;MessageBoxA&quot;, _\n            &quot;user32.dll&quot;, _\n            MethodAttributes.Public Or MethodAttributes.Static Or MethodAttributes.PinvokeImpl, _\n            CallingConventions.Standard, _\n            GetType(Integer), _\n            paramTypes, _\n            CallingConvention.Winapi, _\n            CharSet.Ansi)\n         \n         &#39; Add PreserveSig to the method implementation flags. NOTE: If this line\n         &#39; is commented out, the return value will be zero when the method is\n         &#39; invoked.\n         piMethodBuilder.SetImplementationFlags( _\n            piMethodBuilder.GetMethodImplementationFlags() Or MethodImplAttributes.PreserveSig)\n\n         &#39; Create global methods.\n         myModuleBuilder.CreateGlobalFunctions()\n\n         &#39; Arguments for calling the method.\n         Dim arguments() As Object= { 0, &quot;Hello World&quot;, &quot;Title&quot;, MB_RETRYCANCEL }\n\n         Dim pinvokeMethod As MethodInfo = _\n            myModuleBuilder.GetMethod(&quot;MessageBoxA&quot;)\n         Console.WriteLine(&quot;Testing module-level PInvoke method created with DefinePInvokeMethod...&quot;)\n         Console.WriteLine(&quot;Message box returned: {0}&quot;, _\n            pinvokeMethod.Invoke(Nothing, arguments))\n\n      End Sub\n   End Class\nEnd Namespace\n\n&#39; This code example produces input similar to the following:\n&#39;\n&#39;Testing module-level PInvoke method created with DefinePInvokeMethod...\n&#39;Message box returned: 4\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefinePInvokeMethod_System_String_System_String_System_String_System_Reflection_MethodAttributes_System_Reflection_CallingConventions_System_Type_System_Type___System_Runtime_InteropServices_CallingConvention_System_Runtime_InteropServices_CharSet_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefinePInvokeMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a <code>PInvoke</code> method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <code>PInvoke</code> flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <code>PInvoke</code> method. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dllName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the DLL in which the <code>PInvoke</code> method is defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>entryName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the entry point in the DLL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s return type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCallConv</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.callingconvention\" data-linktype=\"relative-path\">CallingConvention</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The native calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nativeCharSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.charset\" data-linktype=\"relative-path\">CharSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s native character set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined <code>PInvoke</code> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> or <code>dllName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some DLL import attributes (see the description of <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute\" data-linktype=\"relative-path\">DllImportAttribute</a>) cannot be specified as arguments to this method. Such attributes should be set by emitting a custom attribute for the method. For example, the DLL import attribute <code>PreserveSig</code> is set by emitting a custom attribute.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>DefinePInvokeMethod</code> method to create a <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a> for an external unmanaged method, <code>MessageBoxA</code>, in the Win32 API. The example displays a message box with <strong>Retry</strong> and <strong>Cancel</strong> buttons, and displays the return value from the message box.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> To get a non-zero return value, you must add <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">System.Reflection.MethodImplAttributes</a> to the method implementation flags after you create the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder\" data-linktype=\"relative-path\">MethodBuilder</a>, by using the <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_GetMethodImplementationFlags_\" data-linktype=\"relative-path\">GetMethodImplementationFlags</a> and <a class=\"xref\" href=\"system.reflection.emit.methodbuilder#System_Reflection_Emit_MethodBuilder_SetImplementationFlags_\" data-linktype=\"relative-path\">SetImplementationFlags</a> methods.  </p>\n</div>\n<p> This example uses a different overload of the DefinePInvokeMethod method, but the technique is the same.  </p>\n<pre><code class=\"lang-cpp\" name=\"ModuleBuilder_DefinePInvokeMethod1#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\n\nconst int MB_RETRYCANCEL = 5;\n\nvoid main()\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName(&quot;TempAssembly&quot;);\n\n   // Define a dynamic assembly in the current application domain.\n   AssemblyBuilder^ myAssemblyBuilder = \n      AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(\n                  myAssemblyName, AssemblyBuilderAccess::Run);\n\n   // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n   ModuleBuilder^ myModuleBuilder = \n      myAssemblyBuilder-&gt;DefineDynamicModule(&quot;TempModule&quot;);\n\n   array&lt;Type^&gt;^ paramTypes = \n      { int::typeid, String::typeid, String::typeid, int::typeid };\n\n   // Define a PInvoke method.\n   MethodBuilder^ piMethodBuilder = myModuleBuilder-&gt;DefinePInvokeMethod(\n      &quot;MessageBoxA&quot;,\n      &quot;user32.dll&quot;,\n      MethodAttributes::Public | MethodAttributes::Static | MethodAttributes::PinvokeImpl,\n      CallingConventions::Standard,\n      int::typeid,\n      paramTypes,\n      CallingConvention::Winapi,\n      CharSet::Ansi);\n\n   // Add PreserveSig to the method implementation flags. NOTE: If this line\n   // is commented out, the return value will be zero when the method is\n   // invoked.\n   piMethodBuilder-&gt;SetImplementationFlags(\n      piMethodBuilder-&gt;GetMethodImplementationFlags() | MethodImplAttributes::PreserveSig);\n\n   // Create global methods.\n   myModuleBuilder-&gt;CreateGlobalFunctions();\n\n   // Arguments for calling the method.\n   array&lt;Object^&gt;^ arguments = \n      { (Object^)(int) 0, &quot;Hello World&quot;, &quot;Title&quot;, MB_RETRYCANCEL };\n\n   MethodInfo^ pinvokeMethod = myModuleBuilder-&gt;GetMethod(&quot;MessageBoxA&quot;);\n   Console::WriteLine(&quot;Testing module-level PInvoke method created with DefinePInvokeMethod...&quot;);\n   Console::WriteLine(&quot;Message box returned: {0}&quot;, \n      pinvokeMethod-&gt;Invoke(nullptr, arguments));\n};\n\n\n/* This code example produces input similar to the following:\n\nTesting module-level PInvoke method created with DefinePInvokeMethod...\nMessage box returned: 4\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ModuleBuilder_DefinePInvokeMethod1#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\n\nnamespace PInvoke\n{\n   public class Example\n   {\n      const int MB_RETRYCANCEL = 5;\n\n      static void Main()\n      {\n         AssemblyName myAssemblyName = new AssemblyName(&quot;TempAssembly&quot;);\n\n         // Define a dynamic assembly in the current application domain.\n         AssemblyBuilder myAssemblyBuilder = \n            AppDomain.CurrentDomain.DefineDynamicAssembly(\n                        myAssemblyName, AssemblyBuilderAccess.Run);\n\n         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         ModuleBuilder myModuleBuilder = \n            myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n\n         Type[] paramTypes = { typeof(int), typeof(string), typeof(string), typeof(int) };\n\n         // Define a PInvoke method.\n         MethodBuilder piMethodBuilder = myModuleBuilder.DefinePInvokeMethod(\n            &quot;MessageBoxA&quot;,\n            &quot;user32.dll&quot;,\n            MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl,\n            CallingConventions.Standard,\n            typeof(int),\n            paramTypes,\n            CallingConvention.Winapi,\n            CharSet.Ansi);\n         \n         // Add PreserveSig to the method implementation flags. NOTE: If this line\n         // is commented out, the return value will be zero when the method is\n         // invoked.\n         piMethodBuilder.SetImplementationFlags(\n            piMethodBuilder.GetMethodImplementationFlags() | MethodImplAttributes.PreserveSig);\n\n         // Create global methods.\n         myModuleBuilder.CreateGlobalFunctions();\n\n         // Arguments for calling the method.\n         Object[] arguments = { 0, &quot;Hello World&quot;, &quot;Title&quot;, MB_RETRYCANCEL };\n\n         MethodInfo pinvokeMethod = myModuleBuilder.GetMethod(&quot;MessageBoxA&quot;);\n         Console.WriteLine(&quot;Testing module-level PInvoke method created with DefinePInvokeMethod...&quot;);\n         Console.WriteLine(&quot;Message box returned: {0}&quot;, \n            pinvokeMethod.Invoke(null, arguments));\n      }\n   }\n}\n\n/* This code example produces input similar to the following:\n\nTesting module-level PInvoke method created with DefinePInvokeMethod...\nMessage box returned: 4\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_DefinePInvokeMethod1#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\nNamespace PInvoke\n\n   Public Class Example\n   \n      Const MB_RETRYCANCEL As Integer = 5\n\n      Shared Sub Main()\n      \n         Dim myAssemblyName As New AssemblyName(&quot;TempAssembly&quot;)\n\n         &#39; Define a dynamic assembly in the current application domain.\n         Dim myAssemblyBuilder As AssemblyBuilder = _\n            AppDomain.CurrentDomain.DefineDynamicAssembly( _\n                        myAssemblyName, AssemblyBuilderAccess.Run)\n\n         &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         Dim myModuleBuilder As ModuleBuilder = _\n            myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n\n         Dim paramTypes() As Type = _\n            { GetType(Integer), GetType(string), GetType(string), GetType(Integer) }\n\n         &#39; Define a PInvoke method.\n         Dim piMethodBuilder As MethodBuilder = myModuleBuilder.DefinePInvokeMethod( _\n            &quot;MessageBoxA&quot;, _\n            &quot;user32.dll&quot;, _\n            MethodAttributes.Public Or MethodAttributes.Static Or MethodAttributes.PinvokeImpl, _\n            CallingConventions.Standard, _\n            GetType(Integer), _\n            paramTypes, _\n            CallingConvention.Winapi, _\n            CharSet.Ansi)\n         \n         &#39; Add PreserveSig to the method implementation flags. NOTE: If this line\n         &#39; is commented out, the return value will be zero when the method is\n         &#39; invoked.\n         piMethodBuilder.SetImplementationFlags( _\n            piMethodBuilder.GetMethodImplementationFlags() Or MethodImplAttributes.PreserveSig)\n\n         &#39; Create global methods.\n         myModuleBuilder.CreateGlobalFunctions()\n\n         &#39; Arguments for calling the method.\n         Dim arguments() As Object= { 0, &quot;Hello World&quot;, &quot;Title&quot;, MB_RETRYCANCEL }\n\n         Dim pinvokeMethod As MethodInfo = _\n            myModuleBuilder.GetMethod(&quot;MessageBoxA&quot;)\n         Console.WriteLine(&quot;Testing module-level PInvoke method created with DefinePInvokeMethod...&quot;)\n         Console.WriteLine(&quot;Message box returned: {0}&quot;, _\n            pinvokeMethod.Invoke(Nothing, arguments))\n\n      End Sub\n   End Class\nEnd Namespace\n\n&#39; This code example produces input similar to the following:\n&#39;\n&#39;Testing module-level PInvoke method created with DefinePInvokeMethod...\n&#39;Message box returned: 4\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineResource_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineResource(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines the named managed embedded resource to be stored in this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Resources.IResourceWriter DefineResource (string name, string description);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the resource. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>description</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The description of the resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.resources.iresourcewriter\" data-linktype=\"relative-path\">IResourceWriter</a></div>\r\n                  </div>\r\n                  <p>A resource writer for the defined resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Length of <code>name</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This module is transient.  </p>\n<p> -or-  </p>\n<p> The containing assembly is not persistable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The caller must not call the <code>ResourceWriter.Generate()</code> and <code>ResourceWriter.Close()</code> methods, because these methods are called by <code>ModuleBuilder.Save</code> when the dynamic assembly is written to disk.  </p>\n<p> Use this method to embed a managed resource. To embed a manifest resource blob, use the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineManifestResource_\" data-linktype=\"relative-path\">DefineManifestResource</a> method. For a summary of embedding and linking managed resources and manifest resource blobs, see the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineManifestResource_\" data-linktype=\"relative-path\">DefineManifestResource</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>DefineResource</code> to add an external resource to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"ModuleBuilder_DefineResource1#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Resources;\n\n   public class CodeGenerator\n   {\n      public CodeGenerator()\n      {\n         // Get the current application domain for the current thread.\n         AppDomain currentDomain = AppDomain.CurrentDomain;\n\n         AssemblyName myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;TempAssembly&quot;;\n\n         // Define &#39;TempAssembly&#39; assembly in the current application domain.\n         AssemblyBuilder myAssemblyBuilder = \n            currentDomain.DefineDynamicAssembly\n                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         // Define &#39;TempModule&#39; module in &#39;TempAssembly&#39; assembly.\n         ModuleBuilder myModuleBuilder = \n            myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;,\n                                       &quot;TempModule.netmodule&quot;,true);\n         // Define the managed embedded resource, &#39;MyResource&#39; in &#39;TempModule&#39;.\n         IResourceWriter myResourceWriter = \n               myModuleBuilder.DefineResource(&quot;MyResource.resource&quot;,&quot;Description&quot;);\n         // Add resources to the resource writer.\n         myResourceWriter.AddResource(&quot;String 1&quot;, &quot;First String&quot;);\n         myResourceWriter.AddResource(&quot;String 2&quot;, &quot;Second String&quot;);\n         myResourceWriter.AddResource(&quot;String 3&quot;, &quot;Third String&quot;);\n         myAssemblyBuilder.Save(&quot;MyAssembly.dll&quot;);\n\n      }\n   }\n\n   public class CallerClass\n   {\n      public static void Main()\n      {\n         CodeGenerator myGenerator = new CodeGenerator();\n         Console.WriteLine(&quot;A resource named &#39;MyResource.resource&#39;&quot;\n                +&quot; has been created and can be viewed  in the &#39;MyAssembly.dll&#39;&quot;);\n      }\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"ModuleBuilder_DefineResource1#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Resources;\npublic ref class CodeGenerator\n{\npublic:\n   CodeGenerator()\n   {\n      \n      // Get the current application domain for the current thread.\n      AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      \n      // Define &#39;TempAssembly&#39; assembly in the current application domain.\n      AssemblyBuilder^ myAssemblyBuilder = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      \n      // Define &#39;TempModule&#39; module in &#39;TempAssembly&#39; assembly.\n      ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot;, &quot;TempModule.netmodule&quot;, true );\n      \n      // Define the managed embedded resource, &#39;MyResource&#39; in &#39;TempModule&#39;.\n      IResourceWriter^ myResourceWriter = myModuleBuilder-&gt;DefineResource( &quot;MyResource.resource&quot;, &quot;Description&quot; );\n      \n      // Add resources to the resource writer.\n      myResourceWriter-&gt;AddResource( &quot;String 1&quot;, &quot;First String&quot; );\n      myResourceWriter-&gt;AddResource( &quot;String 2&quot;, &quot;Second String&quot; );\n      myResourceWriter-&gt;AddResource( &quot;String 3&quot;, &quot;Third String&quot; );\n      myAssemblyBuilder-&gt;Save( &quot;MyAssembly.dll&quot; );\n   }\n\n};\n\nint main()\n{\n   CodeGenerator^ myGenerator = gcnew CodeGenerator;\n   Console::WriteLine( &quot;A resource named &#39;MyResource.resource&#39; has been created and can be viewed in the &#39;MyAssembly.dll&#39;&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_DefineResource1#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Resources\n\nPublic Class CodeGenerator\n   \n   Public Sub New()\n      &#39; Get the current application domain for the current thread.\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      \n      &#39; Define &#39;TempAssembly&#39; assembly in the current application domain.\n      Dim myAssemblyBuilder As AssemblyBuilder = currentDomain.DefineDynamicAssembly _\n                                       (myAssemblyName, AssemblyBuilderAccess.RunAndSave)\n      &#39; Define &#39;TempModule&#39; module in &#39;TempAssembly&#39; assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule _\n                                             (&quot;TempModule&quot;, &quot;TempModule.netmodule&quot;, True)\n      &#39; Define the managed embedded resource, &#39;MyResource&#39; in &#39;TempModule&#39;.\n      Dim myResourceWriter As IResourceWriter = myModuleBuilder.DefineResource _\n                                                   (&quot;MyResource.resource&quot;, &quot;Description&quot;)\n      &#39; Add resources to the resource writer.\n      myResourceWriter.AddResource(&quot;String 1&quot;, &quot;First String&quot;)\n      myResourceWriter.AddResource(&quot;String 2&quot;, &quot;Second String&quot;)\n      myResourceWriter.AddResource(&quot;String 3&quot;, &quot;Third String&quot;)\n      myAssemblyBuilder.Save(&quot;MyAssembly.dll&quot;)\n\n   End Sub &#39;New \nEnd Class &#39;CodeGenerator\n\nPublic Class CallerClass\n   \n   Public Shared Sub Main()\n      Dim myGenerator As New CodeGenerator()\n      Console.WriteLine(&quot;A resource named &#39;MyResource.resource&#39; has been created and can be&quot; + _\n                                                               &quot; viewed  in the &#39;MyAssembly.dll&#39;&quot;)\n   End Sub &#39;Main\nEnd Class &#39;CallerClass\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineResource_System_String_System_String_System_Reflection_ResourceAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineResource(String,String,ResourceAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines the named managed embedded resource with the given attributes that is to be stored in this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Resources.IResourceWriter DefineResource (string name, string description, System.Reflection.ResourceAttributes attribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the resource. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>description</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The description of the resource.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.resourceattributes\" data-linktype=\"relative-path\">ResourceAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The resource attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.resources.iresourcewriter\" data-linktype=\"relative-path\">IResourceWriter</a></div>\r\n                  </div>\r\n                  <p>A resource writer for the defined resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Length of <code>name</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This module is transient.  </p>\n<p> -or-  </p>\n<p> The containing assembly is not persistable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The caller must not call the <code>ResourceWriter.Generate()</code> and <code>ResourceWriter.Close()</code> methods, because these methods are called by <code>ModuleBuilder.Save</code> when the dynamic assembly is written to disk.  </p>\n<p> Use this method to embed a managed resource. To embed a manifest resource blob, use the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineManifestResource_\" data-linktype=\"relative-path\">DefineManifestResource</a> method. For a summary of embedding and linking managed resources and manifest resource blobs, see the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineManifestResource_\" data-linktype=\"relative-path\">DefineManifestResource</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of DefineResource to add an external resource to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"ModuleBuilder_DefineResource2#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Resources;\n\n   public class CodeGenerator\n   {\n      public CodeGenerator()\n      {\n         // Get the current application domain for the current thread.\n         AppDomain currentDomain = AppDomain.CurrentDomain;\n\n         AssemblyName myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;TempAssembly&quot;;\n\n         // Define &#39;TempAssembly&#39; assembly in the current application domain.\n         AssemblyBuilder myAssemblyBuilder = \n            currentDomain.DefineDynamicAssembly\n                        (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         // Define &#39;TempModule&#39; module in &#39;TempAssembly&#39; assembly.\n         ModuleBuilder myModuleBuilder = \n            myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;,\n                                              &quot;TempModule.netmodule&quot;,true);\n         // Define the managed embedded resource, &#39;MyResource&#39; in &#39;TempModule&#39;\n         // with the specified attribute.\n         IResourceWriter writer = \n               myModuleBuilder.DefineResource(&quot;MyResource.resource&quot;,\n                            &quot;Description&quot;,ResourceAttributes.Public);\n         // Add resources to the resource writer.\n         writer.AddResource(&quot;String 1&quot;, &quot;First String&quot;);\n         writer.AddResource(&quot;String 2&quot;, &quot;Second String&quot;);\n         writer.AddResource(&quot;String 3&quot;, &quot;Third String&quot;);\n         myAssemblyBuilder.Save(&quot;MyAssembly.dll&quot;);\n\n      }\n   }\n\n   public class CallerClass\n   {\n      public static void Main()\n      {\n         CodeGenerator myGenerator = new CodeGenerator();\n         Console.WriteLine(&quot;A resource named &#39;MyResource.resource&#39;&quot;\n                +&quot; has been created and can be viewed  in the &#39;MyAssembly.dll&#39;&quot;);\n      }\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"ModuleBuilder_DefineResource2#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Resources;\npublic ref class CodeGenerator\n{\npublic:\n   CodeGenerator()\n   {\n      \n      // Get the current application domain for the current thread.\n      AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      \n      // Define &#39;TempAssembly&#39; assembly in the current application domain.\n      AssemblyBuilder^ myAssemblyBuilder = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      \n      // Define &#39;TempModule&#39; module in &#39;TempAssembly&#39; assembly.\n      ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot;, &quot;TempModule.netmodule&quot;, true );\n      \n      // Define the managed embedded resource, &#39;MyResource&#39; in &#39;TempModule&#39;\n      // with the specified attribute.\n      IResourceWriter^ writer = myModuleBuilder-&gt;DefineResource( &quot;MyResource.resource&quot;, &quot;Description&quot;, ResourceAttributes::Public );\n      \n      // Add resources to the resource writer.\n      writer-&gt;AddResource( &quot;String 1&quot;, &quot;First String&quot; );\n      writer-&gt;AddResource( &quot;String 2&quot;, &quot;Second String&quot; );\n      writer-&gt;AddResource( &quot;String 3&quot;, &quot;Third String&quot; );\n      myAssemblyBuilder-&gt;Save( &quot;MyAssembly.dll&quot; );\n   }\n\n};\n\nint main()\n{\n   CodeGenerator^ myGenerator = gcnew CodeGenerator;\n   Console::WriteLine( &quot;A resource named &#39;MyResource::resource&#39; has been created and can be viewed in the &#39;MyAssembly.dll&#39;&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_DefineResource2#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Resources\n\nPublic Class CodeGenerator\n   \n   Public Sub New()\n      &#39; Get the current application domain for the current thread.\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      \n      &#39; Define &#39;TempAssembly&#39; assembly in the current application domain.\n      Dim myAssemblyBuilder As AssemblyBuilder = currentDomain.DefineDynamicAssembly _\n                                          (myAssemblyName, AssemblyBuilderAccess.RunAndSave)\n      &#39; Define &#39;TempModule&#39; module in &#39;TempAssembly&#39; assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule _\n                                                (&quot;TempModule&quot;, &quot;TempModule.netmodule&quot;, True)\n      &#39; Define the managed embedded resource, &#39;MyResource&#39; in &#39;TempModule&#39;\n      &#39; with the specified attribute.\n      Dim writer As IResourceWriter = myModuleBuilder.DefineResource _\n                              (&quot;MyResource.resource&quot;, &quot;Description&quot;, ResourceAttributes.Public)\n      &#39; Add resources to the resource writer.\n      writer.AddResource(&quot;String 1&quot;, &quot;First String&quot;)\n      writer.AddResource(&quot;String 2&quot;, &quot;Second String&quot;)\n      writer.AddResource(&quot;String 3&quot;, &quot;Third String&quot;)\n      myAssemblyBuilder.Save(&quot;MyAssembly.dll&quot;)\n\n   End Sub &#39;New \nEnd Class &#39;CodeGenerator\n\nPublic Class CallerClass\n   \n   Public Shared Sub Main()\n      Dim myGenerator As New CodeGenerator()\n      Console.WriteLine(&quot;A resource named &#39;MyResource.resource&#39; has been created and can be &quot; + _\n                                                         &quot;viewed  in the &#39;MyAssembly.dll&#39;&quot;)\n   End Sub &#39;Main\nEnd Class &#39;CallerClass\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineType_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineType(String)</div>        \r\n          </div>\r\n    \r\n            <p>Constructs a <code>TypeBuilder</code> for a private type with the specified name in this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineType (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full path of the type, including the namespace. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>A private type with the specified name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A type with the given name exists in the parent assembly of this module.  </p>\n<p> -or-  </p>\n<p> Nested type attributes are set on a type that is not nested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> in the current dynamic module using <code>CreateType</code>, builds and completes the type, and saves the assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ModuleBuilder.DefineType Example#1\">      AssemblyName^ asmname = gcnew AssemblyName;\n      asmname-&gt;Name = &quot;assemfilename.exe&quot;;\n      AssemblyBuilder^ asmbuild = System::Threading::Thread::GetDomain()-&gt;\n         DefineDynamicAssembly( asmname, AssemblyBuilderAccess::RunAndSave );\n      ModuleBuilder^ modbuild = asmbuild-&gt;DefineDynamicModule( &quot;modulename&quot;,\n         &quot;assemfilename.exe&quot; );\n      TypeBuilder^ typebuild1 = modbuild-&gt;DefineType( &quot;typename&quot; );\n      typebuild1-&gt;CreateType();\n      asmbuild-&gt;Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ModuleBuilder.DefineType Example#1\"> AssemblyName asmname = new AssemblyName();\n asmname.Name = &quot;assemfilename.exe&quot;;        \n AssemblyBuilder asmbuild = System.Threading.Thread.GetDomain().\n             DefineDynamicAssembly(asmname, AssemblyBuilderAccess.RunAndSave);\n ModuleBuilder modbuild = asmbuild.DefineDynamicModule( &quot;modulename&quot;,\n    &quot;assemfilename.exe&quot; );\n TypeBuilder typebuild1 = modbuild.DefineType( &quot;typename&quot; );\n typebuild1.CreateType();\n asmbuild.Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ModuleBuilder.DefineType Example#1\"> Dim asmname As New AssemblyName()\n asmname.Name = &quot;assemfilename.exe&quot;\n Dim asmbuild As AssemblyBuilder = _\n    System.Threading.Thread.GetDomain().DefineDynamicAssembly(asmname, _\n    AssemblyBuilderAccess.RunAndSave)\n Dim modbuild As ModuleBuilder = _\n    asmbuild.DefineDynamicModule(&quot;modulename&quot;, &quot;assemfilename.exe&quot;)\n Dim typebuild1 As TypeBuilder = modbuild.DefineType(&quot;typename&quot;)\n typebuild1.CreateType()\n asmbuild.Save(&quot;assemfilename.exe&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineType(String,TypeAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Constructs a <code>TypeBuilder</code> given the type name and the type attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full path of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the defined type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>A <code>TypeBuilder</code> created with all of the requested attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A type with the given name exists in the parent assembly of this module.  </p>\n<p> -or-  </p>\n<p> Nested type attributes are set on a type that is not nested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> in the current dynamic module using <code>CreateType</code>, builds and completes the type, and saves the assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ModuleBuilder.DefineType Example#1\">      AssemblyName^ asmname = gcnew AssemblyName;\n      asmname-&gt;Name = &quot;assemfilename.exe&quot;;\n      AssemblyBuilder^ asmbuild = System::Threading::Thread::GetDomain()-&gt;\n         DefineDynamicAssembly( asmname, AssemblyBuilderAccess::RunAndSave );\n      ModuleBuilder^ modbuild = asmbuild-&gt;DefineDynamicModule( &quot;modulename&quot;,\n         &quot;assemfilename.exe&quot; );\n      TypeBuilder^ typebuild1 = modbuild-&gt;DefineType( &quot;typename&quot; );\n      typebuild1-&gt;CreateType();\n      asmbuild-&gt;Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ModuleBuilder.DefineType Example#1\"> AssemblyName asmname = new AssemblyName();\n asmname.Name = &quot;assemfilename.exe&quot;;        \n AssemblyBuilder asmbuild = System.Threading.Thread.GetDomain().\n             DefineDynamicAssembly(asmname, AssemblyBuilderAccess.RunAndSave);\n ModuleBuilder modbuild = asmbuild.DefineDynamicModule( &quot;modulename&quot;,\n    &quot;assemfilename.exe&quot; );\n TypeBuilder typebuild1 = modbuild.DefineType( &quot;typename&quot; );\n typebuild1.CreateType();\n asmbuild.Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ModuleBuilder.DefineType Example#1\"> Dim asmname As New AssemblyName()\n asmname.Name = &quot;assemfilename.exe&quot;\n Dim asmbuild As AssemblyBuilder = _\n    System.Threading.Thread.GetDomain().DefineDynamicAssembly(asmname, _\n    AssemblyBuilderAccess.RunAndSave)\n Dim modbuild As ModuleBuilder = _\n    asmbuild.DefineDynamicModule(&quot;modulename&quot;, &quot;assemfilename.exe&quot;)\n Dim typebuild1 As TypeBuilder = modbuild.DefineType(&quot;typename&quot;)\n typebuild1.CreateType()\n asmbuild.Save(&quot;assemfilename.exe&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineType(String,TypeAttributes,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Constructs a <code>TypeBuilder</code> given type name, its attributes, and the type that the defined type extends.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full path of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attribute to be associated with the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the defined type extends.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>A <code>TypeBuilder</code> created with all of the requested attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A type with the given name exists in the parent assembly of this module.  </p>\n<p> -or-  </p>\n<p> Nested type attributes are set on a type that is not nested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> in the current dynamic module using <code>CreateType</code>, builds and completes the type, and saves the assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ModuleBuilder.DefineType Example#1\">      AssemblyName^ asmname = gcnew AssemblyName;\n      asmname-&gt;Name = &quot;assemfilename.exe&quot;;\n      AssemblyBuilder^ asmbuild = System::Threading::Thread::GetDomain()-&gt;\n         DefineDynamicAssembly( asmname, AssemblyBuilderAccess::RunAndSave );\n      ModuleBuilder^ modbuild = asmbuild-&gt;DefineDynamicModule( &quot;modulename&quot;,\n         &quot;assemfilename.exe&quot; );\n      TypeBuilder^ typebuild1 = modbuild-&gt;DefineType( &quot;typename&quot; );\n      typebuild1-&gt;CreateType();\n      asmbuild-&gt;Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ModuleBuilder.DefineType Example#1\"> AssemblyName asmname = new AssemblyName();\n asmname.Name = &quot;assemfilename.exe&quot;;        \n AssemblyBuilder asmbuild = System.Threading.Thread.GetDomain().\n             DefineDynamicAssembly(asmname, AssemblyBuilderAccess.RunAndSave);\n ModuleBuilder modbuild = asmbuild.DefineDynamicModule( &quot;modulename&quot;,\n    &quot;assemfilename.exe&quot; );\n TypeBuilder typebuild1 = modbuild.DefineType( &quot;typename&quot; );\n typebuild1.CreateType();\n asmbuild.Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ModuleBuilder.DefineType Example#1\"> Dim asmname As New AssemblyName()\n asmname.Name = &quot;assemfilename.exe&quot;\n Dim asmbuild As AssemblyBuilder = _\n    System.Threading.Thread.GetDomain().DefineDynamicAssembly(asmname, _\n    AssemblyBuilderAccess.RunAndSave)\n Dim modbuild As ModuleBuilder = _\n    asmbuild.DefineDynamicModule(&quot;modulename&quot;, &quot;assemfilename.exe&quot;)\n Dim typebuild1 As TypeBuilder = modbuild.DefineType(&quot;typename&quot;)\n typebuild1.CreateType()\n asmbuild.Save(&quot;assemfilename.exe&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineType(String,TypeAttributes,Type,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Constructs a <code>TypeBuilder</code> given the type name, the attributes, the type that the defined type extends, and the total size of the type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, int typesize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full path of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the defined type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the defined type extends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typesize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The total size of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>A <code>TypeBuilder</code> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A type with the given name exists in the parent assembly of this module.  </p>\n<p> -or-  </p>\n<p> Nested type attributes are set on a type that is not nested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Type names must be unique within an assembly. It is forbidden to have two types with the same name in two different modules of an assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> in the current dynamic module using <code>CreateType</code>, builds and completes the type, and saves the assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ModuleBuilder.DefineType Example#1\">      AssemblyName^ asmname = gcnew AssemblyName;\n      asmname-&gt;Name = &quot;assemfilename.exe&quot;;\n      AssemblyBuilder^ asmbuild = System::Threading::Thread::GetDomain()-&gt;\n         DefineDynamicAssembly( asmname, AssemblyBuilderAccess::RunAndSave );\n      ModuleBuilder^ modbuild = asmbuild-&gt;DefineDynamicModule( &quot;modulename&quot;,\n         &quot;assemfilename.exe&quot; );\n      TypeBuilder^ typebuild1 = modbuild-&gt;DefineType( &quot;typename&quot; );\n      typebuild1-&gt;CreateType();\n      asmbuild-&gt;Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ModuleBuilder.DefineType Example#1\"> AssemblyName asmname = new AssemblyName();\n asmname.Name = &quot;assemfilename.exe&quot;;        \n AssemblyBuilder asmbuild = System.Threading.Thread.GetDomain().\n             DefineDynamicAssembly(asmname, AssemblyBuilderAccess.RunAndSave);\n ModuleBuilder modbuild = asmbuild.DefineDynamicModule( &quot;modulename&quot;,\n    &quot;assemfilename.exe&quot; );\n TypeBuilder typebuild1 = modbuild.DefineType( &quot;typename&quot; );\n typebuild1.CreateType();\n asmbuild.Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ModuleBuilder.DefineType Example#1\"> Dim asmname As New AssemblyName()\n asmname.Name = &quot;assemfilename.exe&quot;\n Dim asmbuild As AssemblyBuilder = _\n    System.Threading.Thread.GetDomain().DefineDynamicAssembly(asmname, _\n    AssemblyBuilderAccess.RunAndSave)\n Dim modbuild As ModuleBuilder = _\n    asmbuild.DefineDynamicModule(&quot;modulename&quot;, &quot;assemfilename.exe&quot;)\n Dim typebuild1 As TypeBuilder = modbuild.DefineType(&quot;typename&quot;)\n typebuild1.CreateType()\n asmbuild.Save(&quot;assemfilename.exe&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_System_Reflection_Emit_PackingSize_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineType(String,TypeAttributes,Type,PackingSize)</div>        \r\n          </div>\r\n    \r\n            <p>Constructs a <code>TypeBuilder</code> given the type name, the attributes, the type that the defined type extends, and the packing size of the type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packsize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full path of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the defined type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the defined type extends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>packsize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.packingsize\" data-linktype=\"relative-path\">PackingSize</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The packing size of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>A <code>TypeBuilder</code> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A type with the given name exists in the parent assembly of this module.  </p>\n<p> -or-  </p>\n<p> Nested type attributes are set on a type that is not nested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> in the current dynamic module using <code>CreateType</code>, builds and completes the type, and saves the assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ModuleBuilder.DefineType Example#1\">      AssemblyName^ asmname = gcnew AssemblyName;\n      asmname-&gt;Name = &quot;assemfilename.exe&quot;;\n      AssemblyBuilder^ asmbuild = System::Threading::Thread::GetDomain()-&gt;\n         DefineDynamicAssembly( asmname, AssemblyBuilderAccess::RunAndSave );\n      ModuleBuilder^ modbuild = asmbuild-&gt;DefineDynamicModule( &quot;modulename&quot;,\n         &quot;assemfilename.exe&quot; );\n      TypeBuilder^ typebuild1 = modbuild-&gt;DefineType( &quot;typename&quot; );\n      typebuild1-&gt;CreateType();\n      asmbuild-&gt;Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ModuleBuilder.DefineType Example#1\"> AssemblyName asmname = new AssemblyName();\n asmname.Name = &quot;assemfilename.exe&quot;;        \n AssemblyBuilder asmbuild = System.Threading.Thread.GetDomain().\n             DefineDynamicAssembly(asmname, AssemblyBuilderAccess.RunAndSave);\n ModuleBuilder modbuild = asmbuild.DefineDynamicModule( &quot;modulename&quot;,\n    &quot;assemfilename.exe&quot; );\n TypeBuilder typebuild1 = modbuild.DefineType( &quot;typename&quot; );\n typebuild1.CreateType();\n asmbuild.Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ModuleBuilder.DefineType Example#1\"> Dim asmname As New AssemblyName()\n asmname.Name = &quot;assemfilename.exe&quot;\n Dim asmbuild As AssemblyBuilder = _\n    System.Threading.Thread.GetDomain().DefineDynamicAssembly(asmname, _\n    AssemblyBuilderAccess.RunAndSave)\n Dim modbuild As ModuleBuilder = _\n    asmbuild.DefineDynamicModule(&quot;modulename&quot;, &quot;assemfilename.exe&quot;)\n Dim typebuild1 As TypeBuilder = modbuild.DefineType(&quot;typename&quot;)\n typebuild1.CreateType()\n asmbuild.Save(&quot;assemfilename.exe&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineType(String,TypeAttributes,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Constructs a <code>TypeBuilder</code> given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full path of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes to be associated with the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the defined type extends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>interfaces</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The list of interfaces that the type implements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>A <code>TypeBuilder</code> created with all of the requested attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A type with the given name exists in the parent assembly of this module.  </p>\n<p> -or-  </p>\n<p> Nested type attributes are set on a type that is not nested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> in the current dynamic module using <code>CreateType</code>, builds and completes the type, and saves the assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ModuleBuilder.DefineType Example#1\">      AssemblyName^ asmname = gcnew AssemblyName;\n      asmname-&gt;Name = &quot;assemfilename.exe&quot;;\n      AssemblyBuilder^ asmbuild = System::Threading::Thread::GetDomain()-&gt;\n         DefineDynamicAssembly( asmname, AssemblyBuilderAccess::RunAndSave );\n      ModuleBuilder^ modbuild = asmbuild-&gt;DefineDynamicModule( &quot;modulename&quot;,\n         &quot;assemfilename.exe&quot; );\n      TypeBuilder^ typebuild1 = modbuild-&gt;DefineType( &quot;typename&quot; );\n      typebuild1-&gt;CreateType();\n      asmbuild-&gt;Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ModuleBuilder.DefineType Example#1\"> AssemblyName asmname = new AssemblyName();\n asmname.Name = &quot;assemfilename.exe&quot;;        \n AssemblyBuilder asmbuild = System.Threading.Thread.GetDomain().\n             DefineDynamicAssembly(asmname, AssemblyBuilderAccess.RunAndSave);\n ModuleBuilder modbuild = asmbuild.DefineDynamicModule( &quot;modulename&quot;,\n    &quot;assemfilename.exe&quot; );\n TypeBuilder typebuild1 = modbuild.DefineType( &quot;typename&quot; );\n typebuild1.CreateType();\n asmbuild.Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ModuleBuilder.DefineType Example#1\"> Dim asmname As New AssemblyName()\n asmname.Name = &quot;assemfilename.exe&quot;\n Dim asmbuild As AssemblyBuilder = _\n    System.Threading.Thread.GetDomain().DefineDynamicAssembly(asmname, _\n    AssemblyBuilderAccess.RunAndSave)\n Dim modbuild As ModuleBuilder = _\n    asmbuild.DefineDynamicModule(&quot;modulename&quot;, &quot;assemfilename.exe&quot;)\n Dim typebuild1 As TypeBuilder = modbuild.DefineType(&quot;typename&quot;)\n typebuild1.CreateType()\n asmbuild.Save(&quot;assemfilename.exe&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineType_System_String_System_Reflection_TypeAttributes_System_Type_System_Reflection_Emit_PackingSize_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineType(String,TypeAttributes,Type,PackingSize,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Constructs a <code>TypeBuilder</code> given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packingSize, int typesize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The full path of the type. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the defined type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type that the defined type extends.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>packingSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.packingsize\" data-linktype=\"relative-path\">PackingSize</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The packing size of the type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typesize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The total size of the type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a></div>\r\n                  </div>\r\n                  <p>A <code>TypeBuilder</code> created with all of the requested attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A type with the given name exists in the parent assembly of this module.  </p>\n<p> -or-  </p>\n<p> Nested type attributes are set on a type that is not nested.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> in the current dynamic module using <code>CreateType</code>, builds and completes the type, and saves the assembly.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ModuleBuilder.DefineType Example#1\">      AssemblyName^ asmname = gcnew AssemblyName;\n      asmname-&gt;Name = &quot;assemfilename.exe&quot;;\n      AssemblyBuilder^ asmbuild = System::Threading::Thread::GetDomain()-&gt;\n         DefineDynamicAssembly( asmname, AssemblyBuilderAccess::RunAndSave );\n      ModuleBuilder^ modbuild = asmbuild-&gt;DefineDynamicModule( &quot;modulename&quot;,\n         &quot;assemfilename.exe&quot; );\n      TypeBuilder^ typebuild1 = modbuild-&gt;DefineType( &quot;typename&quot; );\n      typebuild1-&gt;CreateType();\n      asmbuild-&gt;Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ModuleBuilder.DefineType Example#1\"> AssemblyName asmname = new AssemblyName();\n asmname.Name = &quot;assemfilename.exe&quot;;        \n AssemblyBuilder asmbuild = System.Threading.Thread.GetDomain().\n             DefineDynamicAssembly(asmname, AssemblyBuilderAccess.RunAndSave);\n ModuleBuilder modbuild = asmbuild.DefineDynamicModule( &quot;modulename&quot;,\n    &quot;assemfilename.exe&quot; );\n TypeBuilder typebuild1 = modbuild.DefineType( &quot;typename&quot; );\n typebuild1.CreateType();\n asmbuild.Save( &quot;assemfilename.exe&quot; );\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ModuleBuilder.DefineType Example#1\"> Dim asmname As New AssemblyName()\n asmname.Name = &quot;assemfilename.exe&quot;\n Dim asmbuild As AssemblyBuilder = _\n    System.Threading.Thread.GetDomain().DefineDynamicAssembly(asmname, _\n    AssemblyBuilderAccess.RunAndSave)\n Dim modbuild As ModuleBuilder = _\n    asmbuild.DefineDynamicModule(&quot;modulename&quot;, &quot;assemfilename.exe&quot;)\n Dim typebuild1 As TypeBuilder = modbuild.DefineType(&quot;typename&quot;)\n typebuild1.CreateType()\n asmbuild.Save(&quot;assemfilename.exe&quot;)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineUninitializedData_System_String_System_Int32_System_Reflection_FieldAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineUninitializedData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineUninitializedData(String,Int32,FieldAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name used to refer to the data. <code>name</code> cannot contain embedded nulls.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>size</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the data field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes for the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a></div>\r\n                  </div>\r\n                  <p>A field to reference the data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>name</code> is zero.  </p>\n<p> -or-  </p>\n<p> <code>size</code> is less than or equal to zero, or greater than or equal to 0x003f0000.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions*</span> has been previously called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> is automatically included in <code>attributes</code>.  </p>\n<p> The data defined by this method is not created until the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a> method is called.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineUnmanagedResource_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineUnmanagedResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineUnmanagedResource(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Defines an unmanaged embedded resource given an opaque binary large object (BLOB) of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DefineUnmanagedResource (byte[] resource);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>resource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An opaque BLOB that represents an unmanaged resource</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An unmanaged resource has already been defined in the module&#39;s assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>resource</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An assembly can be associated with only one unmanaged resource. This means that calling <code>DefineVersionInfoResource</code> or <code>DefineUnmanagedResource</code> after either one of the methods was called previously throws <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_DefineUnmanagedResource_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_DefineUnmanagedResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineUnmanagedResource(String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines an unmanaged resource given the name of Win32 resource file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DefineUnmanagedResource (string resourceFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>resourceFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the unmanaged resource file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An unmanaged resource has already been defined in the module&#39;s assembly.  </p>\n<p> -or-  </p>\n<p> <code>resourceFileName</code> is the empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>resourceFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>resourceFileName</code> is not found.  </p>\n<p> -or-  </p>\n<p> <code>resourceFileName</code> is a directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An assembly can be associated with only one unmanaged resource. This means that calling <code>DefineVersionInfoResource</code> or <code>DefineUnmanagedResource</code> after either one of the methods was called previously throws <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetArrayMethod_System_Type_System_String_System_Reflection_CallingConventions_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetArrayMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetArrayMethod(Type,String,CallingConventions,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the named method on an array class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetArrayMethod (Type arrayClass, string methodName, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayClass</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a method on the array class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method&#39;s calling convention.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the method&#39;s parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The named method on an array class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>arrayClass</code> is not an array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>arrayClass</code> or <code>methodName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>GetArrayMethod</code> is useful when you have an array of a type whose definition has not been completed and you want to access methods defined on <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. For example, you might define a type and want to define a method that takes an array of the type as a parameter. In order to access the elements of the array, you will need to call methods of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use GetArrayMethod to obtain the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> corresponding to a method that returns an array value.  </p>\n<pre><code class=\"lang-cs\" name=\"ModuleBuilder_GetArrayMethod#1\">         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         ModuleBuilder myModuleBuilder = myAssemblyBuilder.\n                                       DefineDynamicModule(&quot;TempModule&quot;);\n         // Define a runtime class with specified name and attributes.\n         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType\n                                    (&quot;TempClass&quot;,TypeAttributes.Public);\n         Type[] paramArray = {typeof(Array)};\n         // Add &#39;SortArray&#39; method to the class, with the given signature.\n         MethodBuilder myMethod = myTypeBuilder.DefineMethod(&quot;SortArray&quot;, \n                                   MethodAttributes.Public,typeof(Array),paramArray);\n\n         Type[] myArrayClass = new Type[1];\n         Type[] parameterTypes = {typeof(Array)};\n         // Get the &#39;MethodInfo&#39; object corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n         MethodInfo myMethodInfo=myModuleBuilder.GetArrayMethod(\n                     myArrayClass.GetType(),&quot;Sort&quot;,CallingConventions.Standard,\n                                                                                  null,parameterTypes);\n         // Get the token corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n         MethodToken myMethodToken=myModuleBuilder.GetArrayMethodToken(\n                     myArrayClass.GetType(),&quot;Sort&quot;,CallingConventions.Standard,\n                                                                                 null,parameterTypes);\n         Console.WriteLine(&quot;Token used by module to identify the &#39;Sort&#39; method&quot;\n                                     + &quot; of &#39;Array&#39; class is : {0:x} &quot;,myMethodToken.Token);\n\n         ILGenerator methodIL = myMethod.GetILGenerator();\n         methodIL.Emit(OpCodes.Ldarg_1);\n         methodIL.Emit(OpCodes.Call,myMethodInfo);\n         methodIL.Emit(OpCodes.Ldarg_1);\n         methodIL.Emit(OpCodes.Ret);\n\n         // Complete the creation of type.\n         myTypeBuilder.CreateType();\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_GetArrayMethod#1\">      &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      &#39; Define a runtime class with specified name and attributes.\n      Dim myTypeBuilder As TypeBuilder = _\n                  myModuleBuilder.DefineType(&quot;TempClass&quot;, TypeAttributes.Public)\n      Dim myParamArray() As Type = New Type() {GetType(Array)}\n      &#39; Add &#39;SortArray&#39; method to the class, with the given signature.\n      Dim myMethod As MethodBuilder = _\n         myTypeBuilder.DefineMethod(&quot;SortArray&quot;, MethodAttributes.Public, _\n         GetType(Array), myParamArray)\n\n      Dim myArrayClass(0) As Type\n      Dim parameterTypes() As Type = New Type() {GetType(Array)}\n      &#39; Get the &#39;MethodInfo&#39; object corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n      Dim myMethodInfo As MethodInfo = _\n         myModuleBuilder.GetArrayMethod(myArrayClass.GetType(), &quot;Sort&quot;, _\n         CallingConventions.Standard, Nothing, parameterTypes)\n      &#39; Get the token corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n      Dim myMethodToken As MethodToken = _\n            myModuleBuilder.GetArrayMethodToken(myArrayClass.GetType(), _\n            &quot;Sort&quot;, CallingConventions.Standard, Nothing, parameterTypes)\n      Console.WriteLine(&quot;Token used by module to identify the &#39;Sort&#39; method&quot; + _\n                        &quot; of &#39;Array&#39; class is : {0:x} &quot;, myMethodToken.Token)\n      Dim methodIL As ILGenerator = myMethod.GetILGenerator()\n      methodIL.Emit(OpCodes.Ldarg_1)\n      methodIL.Emit(OpCodes.Call, myMethodInfo)\n      methodIL.Emit(OpCodes.Ldarg_1)\n      methodIL.Emit(OpCodes.Ret)\n      &#39; Complete the creation of type.\n      myTypeBuilder.CreateType()\n</code></pre><pre><code class=\"lang-cpp\" name=\"ModuleBuilder_GetArrayMethod#1\">      // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;\n         DefineDynamicModule( &quot;TempModule&quot; );\n\n      // Define a runtime class with specified name and attributes.\n      TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType(\n         &quot;TempClass&quot;, TypeAttributes::Public );\n      array&lt;Type^&gt;^ paramArray = { Array::typeid };\n      // Add &#39;SortArray&#39; method to the class, with the given signature.\n      MethodBuilder^ myMethod = myTypeBuilder-&gt;DefineMethod( &quot;SortArray&quot;,\n         MethodAttributes::Public, Array::typeid, paramArray );\n\n      array&lt;Type^&gt;^ myArrayClass = gcnew array&lt;Type^&gt;( 1 );\n      array&lt;Type^&gt;^ parameterTypes = { Array::typeid };\n      // Get the &#39;MethodInfo&#39; object corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n      MethodInfo^ myMethodInfo = myModuleBuilder-&gt;GetArrayMethod(\n         myArrayClass-&gt;GetType(), &quot;Sort&quot;, CallingConventions::Standard,\n         nullptr, parameterTypes );\n\n      // Get the token corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n      MethodToken myMethodToken = myModuleBuilder-&gt;GetArrayMethodToken(\n         myArrayClass-&gt;GetType(), &quot;Sort&quot;, CallingConventions::Standard,\n         nullptr, parameterTypes );\n      Console::WriteLine( &quot;Token used by module to identify the &#39;Sort&#39; method&quot;\n         + &quot; of &#39;Array&#39; class is : {0:x} &quot;, myMethodToken.Token );\n\n      ILGenerator^ methodIL = myMethod-&gt;GetILGenerator();\n      methodIL-&gt;Emit( OpCodes::Ldarg_1 );\n      methodIL-&gt;Emit( OpCodes::Call, myMethodInfo );\n      methodIL-&gt;Emit( OpCodes::Ldarg_1 );\n      methodIL-&gt;Emit( OpCodes::Ret );\n\n      // Complete the creation of type.\n      myTypeBuilder-&gt;CreateType();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetArrayMethodToken_System_Type_System_String_System_Reflection_CallingConventions_System_Type_System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetArrayMethodToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetArrayMethodToken(Type,String,CallingConventions,Type,Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token for the named method on an array class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodToken GetArrayMethodToken (Type arrayClass, string methodName, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayClass</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object for the array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the name of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callingConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention for the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The return type of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The types of the parameters of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a></div>\r\n                  </div>\r\n                  <p>The token for the named method on an array class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>arrayClass</code> is not an array.  </p>\n<p> -or-  </p>\n<p> The length of <code>methodName</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>arrayClass</code> or <code>methodName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is similar to <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_GetArrayMethod_\" data-linktype=\"relative-path\">GetArrayMethod</a>, except that it returns the token of the array method instead of the method itself.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_GetArrayMethod_\" data-linktype=\"relative-path\">GetArrayMethod</a> to obtain the <a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a> corresponding to a method that returns an array value.  </p>\n<pre><code class=\"lang-cs\" name=\"ModuleBuilder_GetArrayMethod#2\">         // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n         ModuleBuilder myModuleBuilder = myAssemblyBuilder.\n                                       DefineDynamicModule(&quot;TempModule&quot;);\n         // Define a runtime class with specified name and attributes.\n         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType\n                                    (&quot;TempClass&quot;,TypeAttributes.Public);\n         Type[] paramArray = {typeof(Array)};\n         // Add &#39;SortArray&#39; method to the class, with the given signature.\n         MethodBuilder myMethod = myTypeBuilder.DefineMethod(&quot;SortArray&quot;, \n                                   MethodAttributes.Public,typeof(Array),paramArray);\n\n         Type[] myArrayClass = new Type[1];\n         Type[] parameterTypes = {typeof(Array)};\n         // Get the &#39;MethodInfo&#39; object corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n         MethodInfo myMethodInfo=myModuleBuilder.GetArrayMethod(\n                     myArrayClass.GetType(),&quot;Sort&quot;,CallingConventions.Standard,\n                                                                                  null,parameterTypes);\n         // Get the token corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n         MethodToken myMethodToken=myModuleBuilder.GetArrayMethodToken(\n                     myArrayClass.GetType(),&quot;Sort&quot;,CallingConventions.Standard,\n                                                                                 null,parameterTypes);\n         Console.WriteLine(&quot;Token used by module to identify the &#39;Sort&#39; method&quot;\n                                     + &quot; of &#39;Array&#39; class is : {0:x} &quot;,myMethodToken.Token);\n\n         ILGenerator methodIL = myMethod.GetILGenerator();\n         methodIL.Emit(OpCodes.Ldarg_1);\n         methodIL.Emit(OpCodes.Call,myMethodInfo);\n         methodIL.Emit(OpCodes.Ldarg_1);\n         methodIL.Emit(OpCodes.Ret);\n\n         // Complete the creation of type.\n         myTypeBuilder.CreateType();\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_GetArrayMethod#2\">      &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      &#39; Define a runtime class with specified name and attributes.\n      Dim myTypeBuilder As TypeBuilder = _\n                  myModuleBuilder.DefineType(&quot;TempClass&quot;, TypeAttributes.Public)\n      Dim myParamArray() As Type = New Type() {GetType(Array)}\n      &#39; Add &#39;SortArray&#39; method to the class, with the given signature.\n      Dim myMethod As MethodBuilder = _\n         myTypeBuilder.DefineMethod(&quot;SortArray&quot;, MethodAttributes.Public, _\n         GetType(Array), myParamArray)\n\n      Dim myArrayClass(0) As Type\n      Dim parameterTypes() As Type = New Type() {GetType(Array)}\n      &#39; Get the &#39;MethodInfo&#39; object corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n      Dim myMethodInfo As MethodInfo = _\n         myModuleBuilder.GetArrayMethod(myArrayClass.GetType(), &quot;Sort&quot;, _\n         CallingConventions.Standard, Nothing, parameterTypes)\n      &#39; Get the token corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n      Dim myMethodToken As MethodToken = _\n            myModuleBuilder.GetArrayMethodToken(myArrayClass.GetType(), _\n            &quot;Sort&quot;, CallingConventions.Standard, Nothing, parameterTypes)\n      Console.WriteLine(&quot;Token used by module to identify the &#39;Sort&#39; method&quot; + _\n                        &quot; of &#39;Array&#39; class is : {0:x} &quot;, myMethodToken.Token)\n      Dim methodIL As ILGenerator = myMethod.GetILGenerator()\n      methodIL.Emit(OpCodes.Ldarg_1)\n      methodIL.Emit(OpCodes.Call, myMethodInfo)\n      methodIL.Emit(OpCodes.Ldarg_1)\n      methodIL.Emit(OpCodes.Ret)\n      &#39; Complete the creation of type.\n      myTypeBuilder.CreateType()\n</code></pre><pre><code class=\"lang-cpp\" name=\"ModuleBuilder_GetArrayMethod#2\">      // Define a dynamic module in &quot;TempAssembly&quot; assembly.\n      ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;\n         DefineDynamicModule( &quot;TempModule&quot; );\n\n      // Define a runtime class with specified name and attributes.\n      TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType(\n         &quot;TempClass&quot;, TypeAttributes::Public );\n      array&lt;Type^&gt;^ paramArray = { Array::typeid };\n      // Add &#39;SortArray&#39; method to the class, with the given signature.\n      MethodBuilder^ myMethod = myTypeBuilder-&gt;DefineMethod( &quot;SortArray&quot;,\n         MethodAttributes::Public, Array::typeid, paramArray );\n\n      array&lt;Type^&gt;^ myArrayClass = gcnew array&lt;Type^&gt;( 1 );\n      array&lt;Type^&gt;^ parameterTypes = { Array::typeid };\n      // Get the &#39;MethodInfo&#39; object corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n      MethodInfo^ myMethodInfo = myModuleBuilder-&gt;GetArrayMethod(\n         myArrayClass-&gt;GetType(), &quot;Sort&quot;, CallingConventions::Standard,\n         nullptr, parameterTypes );\n\n      // Get the token corresponding to &#39;Sort&#39; method of &#39;Array&#39; class.\n      MethodToken myMethodToken = myModuleBuilder-&gt;GetArrayMethodToken(\n         myArrayClass-&gt;GetType(), &quot;Sort&quot;, CallingConventions::Standard,\n         nullptr, parameterTypes );\n      Console::WriteLine( &quot;Token used by module to identify the &#39;Sort&#39; method&quot;\n         + &quot; of &#39;Array&#39; class is : {0:x} &quot;, myMethodToken.Token );\n\n      ILGenerator^ methodIL = myMethod-&gt;GetILGenerator();\n      methodIL-&gt;Emit( OpCodes::Ldarg_1 );\n      methodIL-&gt;Emit( OpCodes::Call, myMethodInfo );\n      methodIL-&gt;Emit( OpCodes::Ldarg_1 );\n      methodIL-&gt;Emit( OpCodes::Ret );\n\n      // Complete the creation of type.\n      myTypeBuilder-&gt;CreateType();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetConstructorToken_System_Reflection_ConstructorInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetConstructorToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructorToken(ConstructorInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token used to identify the specified constructor within this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodToken GetConstructorToken (System.Reflection.ConstructorInfo con);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>con</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor to get a token for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a></div>\r\n                  </div>\r\n                  <p>The token used to identify the specified constructor within this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetConstructorToken_System_Reflection_ConstructorInfo_System_Collections_Generic_IEnumerable_System_Type__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetConstructorToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructorToken(ConstructorInfo,IEnumerable&lt;Type&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token used to identify the constructor that has the specified attributes and parameter types within this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodToken GetConstructorToken (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;Type&gt; optionalParameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>constructor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor to get a token for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalParameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection of the types of the optional parameters to the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a></div>\r\n                  </div>\r\n                  <p>The token used to identify the specified constructor within this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>constructor</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the custom attributes; the array is empty if there are no attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>, and that derive from a specified attribute type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base type from which attributes derive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the custom attributes that are derived, at any level, from <code>attributeType</code>; the array is empty if there are no such attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object supplied by the runtime. For example, <code>attributeType</code> is a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetCustomAttributesData\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetCustomAttributesData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributesData()</div>        \r\n          </div>\r\n    \r\n            <p>Returns information about the attributes that have been applied to the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>, expressed as <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a>&gt;</div>\r\n                  </div>\r\n                  <p>A generic list of <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> objects representing data about the attributes that have been applied to the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> and <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetField_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetField(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The field name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of the <code>BindingFlags</code> bit flags used to control the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A field that has the specified name and binding attributes, or <code>null</code> if the field does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you emit dynamic assemblies, fields in the .sdata region of the portable executable (PE) file are defined by using the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineInitializedData_\" data-linktype=\"relative-path\">DefineInitializedData</a> or <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineUninitializedData_\" data-linktype=\"relative-path\">DefineUninitializedData</a> methods.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Module-level fields cannot be retrieved until after the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a> method has been called for the module.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetFields_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetFields_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFields(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of the <code>BindingFlags</code> bit flags used to control the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of fields that match the specified flags; the array is empty if no such fields exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you emit dynamic assemblies, fields in the .sdata region of the portable executable (PE) file are defined by using the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineInitializedData_\" data-linktype=\"relative-path\">DefineInitializedData</a> or <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineUninitializedData_\" data-linktype=\"relative-path\">DefineUninitializedData</a> methods.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Module-level fields cannot be retrieved until after the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a> method has been called for the module.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetFieldToken_System_Reflection_FieldInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetFieldToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFieldToken(FieldInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token used to identify the specified field within this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldToken GetFieldToken (System.Reflection.FieldInfo field);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>field</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The field to get a token for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldtoken\" data-linktype=\"relative-path\">FieldToken</a></div>\r\n                  </div>\r\n                  <p>The token used to identify the specified field within this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>field</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetMethodImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the module-level method that matches the specified criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of <code>BindingFlags</code> bit flags used to control the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that implements <code>Binder</code>, containing properties related to this method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The calling convention for the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter types of the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A method that is defined at the module level, and matches the specified criteria; or <code>null</code> if such a method does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>, <code>types</code> is <code>null</code>, or an element of <code>types</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method provides the implementation for all overloads of the inherited <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetMethod_\" data-linktype=\"relative-path\">GetMethod</a> method. Use the inherited <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_GetMethod_\" data-linktype=\"relative-path\">GetMethod</a> method to get methods that have been declared at the module level. Module-level methods are defined in emitted code by using the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_\" data-linktype=\"relative-path\">DefineGlobalMethod</a> method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Module-level methods cannot be retrieved until after the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a> method has been called for the module.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetMethods_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethods(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the methods that have been defined at the module level for the current <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a>, and that match the specified binding flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingFlags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of <code>BindingFlags</code> bit flags used to control the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains all the module-level methods that match <code>bindingFlags</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Module-level methods are defined in emitted code by using the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineGlobalMethod_\" data-linktype=\"relative-path\">DefineGlobalMethod</a> method.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Module-level methods cannot be retrieved until after the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_CreateGlobalFunctions_\" data-linktype=\"relative-path\">CreateGlobalFunctions</a> method has been called for the module.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetMethodToken_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetMethodToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodToken(MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token used to identify the specified method within this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodToken GetMethodToken (System.Reflection.MethodInfo method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to get a token for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a></div>\r\n                  </div>\r\n                  <p>The token used to identify the specified method within this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The declaring type for the method is not in this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetMethodToken_System_Reflection_MethodInfo_System_Collections_Generic_IEnumerable_System_Type__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetMethodToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodToken(MethodInfo,IEnumerable&lt;Type&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token used to identify the method that has the specified attributes and parameter types within this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodToken GetMethodToken (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;Type&gt; optionalParameterTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to get a token for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalParameterTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection of the types of the optional parameters to the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a></div>\r\n                  </div>\r\n                  <p>The token used to identify the specified method within this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>method</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The declaring type for the method is not in this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetPEKind_System_Reflection_PortableExecutableKinds__System_Reflection_ImageFileMachine__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetPEKind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPEKind(PortableExecutableKinds,ImageFileMachine)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GetPEKind (out System.Reflection.PortableExecutableKinds peKind, out System.Reflection.ImageFileMachine machine);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>peKind</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">PortableExecutableKinds</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, a combination of the <a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">PortableExecutableKinds</a> values indicating the nature of the code in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>machine</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.imagefilemachine\" data-linktype=\"relative-path\">ImageFileMachine</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, one of the <a class=\"xref\" href=\"system.reflection.imagefilemachine\" data-linktype=\"relative-path\">ImageFileMachine</a> values indicating the platform targeted by the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For dynamic modules, <code>peKind</code> is always <a class=\"xref\" href=\"system.reflection.portableexecutablekinds\" data-linktype=\"relative-path\">System.Reflection.PortableExecutableKinds</a> and <code>machine</code> is always 0 (zero).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetSignatureToken_System_Reflection_Emit_SignatureHelper_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetSignatureToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSignatureToken(SignatureHelper)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a token for the signature that is defined by the specified <a class=\"xref\" href=\"system.reflection.emit.signaturehelper\" data-linktype=\"relative-path\">SignatureHelper</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.SignatureToken GetSignatureToken (System.Reflection.Emit.SignatureHelper sigHelper);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sigHelper</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.signaturehelper\" data-linktype=\"relative-path\">SignatureHelper</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The signature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.signaturetoken\" data-linktype=\"relative-path\">SignatureToken</a></div>\r\n                  </div>\r\n                  <p>A token for the defined signature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sigHelper</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method defines a metadata token for the signature described by <code>sigHelper</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetSignatureToken_System_Byte___System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetSignatureToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSignatureToken(Byte[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a token for the signature that has the specified character array and signature length.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.SignatureToken GetSignatureToken (byte[] sigBytes, int sigLength);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sigBytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The signature binary large object (BLOB).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sigLength</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the signature BLOB.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.signaturetoken\" data-linktype=\"relative-path\">SignatureToken</a></div>\r\n                  </div>\r\n                  <p>A token for the specified signature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sigBytes</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetSignerCertificate\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetSignerCertificate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSignerCertificate()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, <code>null</code> is returned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.X509Certificates.X509Certificate GetSignerCertificate ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a></div>\r\n                  </div>\r\n                  <p>A certificate, or <code>null</code> if the assembly to which this module belongs has not been Authenticode signed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetStringConstant_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetStringConstant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetStringConstant(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token of the given string in the moduleâ€™s constant pool.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.StringToken GetStringConstant (string str);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>str</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to add to the module&#39;s constant pool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.stringtoken\" data-linktype=\"relative-path\">StringToken</a></div>\r\n                  </div>\r\n                  <p>The token of the string in the constant pool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>str</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>str</code> has already been defined, the existing token will be returned.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetSymWriter\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetSymWriter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSymWriter()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the symbol writer associated with this dynamic module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Diagnostics.SymbolStore.ISymbolWriter GetSymWriter ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.symbolstore.isymbolwriter\" data-linktype=\"relative-path\">ISymbolWriter</a></div>\r\n                  </div>\r\n                  <p>The symbol writer associated with this dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetType_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the named type defined in the module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetType (string className);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>className</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The requested type, if the type is defined in this module; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Length of <code>className</code> is zero or is greater than 1023.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The requested <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> is non-public and the caller does not have <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> to reflect non-public objects outside the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>A class initializer is invoked and throws an exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>An error is encountered while loading the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not use this method to generate array types, pointer types, or byref types. Use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeArrayType_\" data-linktype=\"relative-path\">MakeArrayType</a>, <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakePointerType_\" data-linktype=\"relative-path\">MakePointerType</a>, and <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeByRefType_\" data-linktype=\"relative-path\">MakeByRefType</a> methods instead.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetType_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the named type defined in the module, optionally ignoring the case of the type name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetType (string className, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>className</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, the search is case-insensitive. If <code>false</code>, the search is case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The requested type, if the type is defined in this module; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Length of <code>className</code> is zero or is greater than 1023.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The requested <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> is non-public and the caller does not have <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> to reflect non-public objects outside the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>A class initializer is invoked and throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not use this method to generate array types, pointer types, or byref types. Use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeArrayType_\" data-linktype=\"relative-path\">MakeArrayType</a>, <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakePointerType_\" data-linktype=\"relative-path\">MakePointerType</a>, and <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeByRefType_\" data-linktype=\"relative-path\">MakeByRefType</a> methods instead.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetType_System_String_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType(String,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetType (string className, bool throwOnError, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>className</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>throwOnError</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to throw an exception if the type cannot be found; <code>false</code> to return <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, the search is case-insensitive. If <code>false</code>, the search is case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The specified type, if the type is declared in this module; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Length of <code>className</code> is zero or is greater than 1023.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>className</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The requested <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> is non-public and the caller does not have <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> to reflect non-public objects outside the current assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>A class initializer is invoked and throws an exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>throwOnError</code> is <code>true</code> and the specified type is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>throwOnError</code> parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> can be thrown even if <code>throwOnError</code> is <code>false</code>.  </p>\n<p> Do not use this method to generate array types, pointer types, or byref types. Use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeArrayType_\" data-linktype=\"relative-path\">MakeArrayType</a>, <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakePointerType_\" data-linktype=\"relative-path\">MakePointerType</a>, and <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_MakeByRefType_\" data-linktype=\"relative-path\">MakeByRefType</a> methods instead.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetTypes\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypes()</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the classes defined within this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetTypes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the types defined within the module that is reflected by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.reflectiontypeloadexception\" data-linktype=\"relative-path\">ReflectionTypeLoadException</a></div>\r\n                  </div>\r\n                  <p>One or more classes in a module could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>ReflectionTypeLoadException</code> is a special class load exception. The <code>ReflectionTypeLoadException.Types</code> property contains the array of classes that were defined in the module and loaded. This array can contain some null values. The <code>ReflectionTypeLoadException.LoaderExceptions</code> property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.  </p>\n<p> For example, if the class initializers of one of the classes throws an exception while it is being loaded, a <code>TargetInvocationException</code> is stored in the corresponding element of the <code>LoaderExceptions</code> array.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetTypeToken_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetTypeToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeToken(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token used to identify the type with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeToken GetTypeToken (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the class, including the namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typetoken\" data-linktype=\"relative-path\">TypeToken</a></div>\r\n                  </div>\r\n                  <p>The token used to identify the type with the specified name within this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is the empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> <code>name</code> represents a <code>ByRef</code> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The type specified by <code>name</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This is a non-transient module that references a transient module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is useful for clients of the <a class=\"xref\" href=\"system.reflection.emit.methodrental\" data-linktype=\"relative-path\">MethodRental</a> class who want to directly modify the body of a method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_GetTypeToken_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_GetTypeToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeToken(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token used to identify the specified type within this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeToken GetTypeToken (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type object that represents the class type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typetoken\" data-linktype=\"relative-path\">TypeToken</a></div>\r\n                  </div>\r\n                  <p>The token used to identify the given type within this module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is a <code>ByRef</code> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This is a non-transient module that references a transient module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Tokens are used in Microsoft intermediate language (MSIL) instructions to identify objects. Tokens are relative to the module in which they are contained. For example, the token value for <code>String</code> is likely to be different from module to module. When <code>GetTypeToken</code> is invoked, a reference is added to the module. The reference becomes a permanent part of the module; multiple calls with the same argument have no additional effect.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the specified attribute type has been applied to this module.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of custom attribute to test for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This argument is ignored for objects of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if one or more instances of <code>attributeType</code> have been applied to this module; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>attributeType</code> is not a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object supplied by the runtime. For example, <code>attributeType</code> is a <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_IsResource\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_IsResource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsResource()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the object is a resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsResource ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the object is a resource; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_IsTransient\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_IsTransient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTransient()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this dynamic module is transient.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsTransient ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this dynamic module is transient; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_ResolveField_System_Int32_System_Type___System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_ResolveField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveField(Int32,Type[],Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo ResolveField (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a field in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTypeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the type where the token is in scope, or <code>null</code> if that type is not generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericMethodArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the method where the token is in scope, or <code>null</code> if that method is not generic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object representing the field that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a field in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> identifies a field whose parent <code>TypeSpec</code> has a signature containing element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the type where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. Use the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the method where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. It is always safe to provide these arguments, even when they are not needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [Module.ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29?displayProperty=fullName&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_ResolveMember_System_Int32_System_Type___System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_ResolveMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveMember(Int32,Type[],Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberInfo ResolveMember (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a type or member in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTypeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the type where the token is in scope, or <code>null</code> if that type is not generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericMethodArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the method where the token is in scope, or <code>null</code> if that method is not generic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> object representing the type or member that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a type or member in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>MethodSpec</code> or <code>TypeSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> identifies a property or event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the type where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. Use the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the method where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. It is always safe to provide these arguments, even when they are not needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [Module.ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29?displayProperty=fullName&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_ResolveMethod_System_Int32_System_Type___System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_ResolveMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveMethod(Int32,Type[],Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodBase ResolveMethod (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a method or constructor in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTypeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the type where the token is in scope, or <code>null</code> if that type is not generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericMethodArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the method where the token is in scope, or <code>null</code> if that method is not generic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> object representing the method that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>MethodSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the type where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. Use the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the method where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericMethodArguments</code>. It is always safe to provide these arguments, even when they are not needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [Module.ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29?displayProperty=fullName&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_ResolveSignature_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_ResolveSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveSignature(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the signature blob identified by a metadata token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] ResolveSignature (int metadataToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a signature in the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bytes representing the signature blob.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid <code>MemberRef</code>, <code>MethodDef</code>, <code>TypeSpec</code>, signature, or <code>FieldDef</code> token in the scope of the current module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_ResolveString_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_ResolveString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveString(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the string identified by the specified metadata token.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ResolveString (int metadataToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a string in the string heap of the module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing a string value from the metadata string heap.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a string in the scope of the current module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_ResolveType_System_Int32_System_Type___System_Type___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_ResolveType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResolveType(Int32,Type[],Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type ResolveType (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>metadataToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A metadata token that identifies a type in the module.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericTypeArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the type where the token is in scope, or <code>null</code> if that type is not generic.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>genericMethodArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the generic type arguments of the method where the token is in scope, or <code>null</code> if that method is not generic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the type that is identified by the specified metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a token for a type in the scope of the current module.  </p>\n<p> -or-  </p>\n<p> <code>metadataToken</code> is a <code>TypeSpec</code> whose signature contains element type <code>var</code> (a type parameter of a generic type) or <code>mvar</code> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>metadataToken</code> is not a valid token in the scope of the current module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the type where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. Use the <a class=\"xref\" href=\"system.reflection.methodinfo#System_Reflection_MethodInfo_GetGenericArguments_\" data-linktype=\"relative-path\">GetGenericArguments</a> method on the method where <code>metadataToken</code> is in scope to obtain an array of generic type arguments for <code>genericTypeArguments</code>. It is always safe to provide these arguments, even when they are not needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the ECMA Web site.  </p>\n</div>\n<p> For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [Module.ResolveMethod(Int32,â€‚Type[],â€‚Type&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29?displayProperty=fullName&gt; method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(CustomAttributeBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Applies a custom attribute to this module by using a custom attribute builder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>customBuilder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of a helper class that specifies the custom attribute to apply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>customBuilder</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(ConstructorInfo,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>con</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor for the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryAttribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte BLOB representing the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> or <code>binaryAttribute</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to format <code>binaryAttribute</code>, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_SetSymCustomAttribute_System_String_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_SetSymCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetSymCustomAttribute(String,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>This method does nothing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetSymCustomAttribute (string name, byte[] data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the custom attribute</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An opaque binary large object (BLOB) of bytes that represents the value of the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>url</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does nothing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_SetUserEntryPoint_System_Reflection_MethodInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_SetUserEntryPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetUserEntryPoint(MethodInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the user entry point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetUserEntryPoint (System.Reflection.MethodInfo entryPoint);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>entryPoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The user entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>entryPoint</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method is called on a dynamic module that is not a debug module.  </p>\n<p> -or-  </p>\n<p> <code>entryPoint</code> is not contained in this dynamic module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The compiler might generate a startup stub before calling user main. The startup stub will be the entry point. While the user main will be the user entry point so that debugger will not step into the compiler entry point.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v20sp1-long-md.md&quot; -->.NET Framework 2.0 Service Pack 1<!--END INCLUDE -->, this member no longer requires <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag. (See <a href=\"../Topic/Security%20Issues%20in%20Reflection%20Emit.md\" data-linktype=\"relative-path\">Security Issues in Reflection Emit</a>.) To use this functionality, your application should target the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE --> or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ModuleBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ModuleBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.  </p>\n<p> This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a> instance is cast to an <a class=\"xref\" href=\"system.runtime.interopservices._modulebuilder\" data-linktype=\"relative-path\">_ModuleBuilder</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ModuleBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.InteropServices._ModuleBuilder.GetTypeInfo*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ModuleBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.  </p>\n<p> This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a> instance is cast to an <a class=\"xref\" href=\"system.runtime.interopservices._modulebuilder\" data-linktype=\"relative-path\">_ModuleBuilder</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ModuleBuilder.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ModuleBuilder.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.  </p>\n<p> This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a> instance is cast to an <a class=\"xref\" href=\"system.runtime.interopservices._modulebuilder\" data-linktype=\"relative-path\">_ModuleBuilder</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ModuleBuilder_System_Runtime_InteropServices__ModuleBuilder_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ModuleBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.InteropServices._ModuleBuilder.Invoke*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ModuleBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The member ID.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.  </p>\n<p> This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.reflection.emit.modulebuilder\" data-linktype=\"relative-path\">ModuleBuilder</a> instance is cast to an <a class=\"xref\" href=\"system.runtime.interopservices._modulebuilder\" data-linktype=\"relative-path\">_ModuleBuilder</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.ModuleBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.ModuleBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.Assembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineDocument\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineEnum\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineInitializedData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineManifestResource\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineResource\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineUninitializedData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.FullyQualifiedName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetArrayMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetConstructorToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetFields\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetFieldToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetMethodImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetMethods\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetMethodToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetPEKind\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetSignatureToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetSignerCertificate\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetStringConstant\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetSymWriter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.GetTypeToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.IsResource\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.IsTransient\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.MDStreamVersion\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.MetadataToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.ModuleVersionId\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.ResolveField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.ResolveMember\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.ResolveMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.ResolveSignature\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.ResolveString\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.ResolveType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.ScopeName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.SetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder._ModuleBuilder.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder._ModuleBuilder.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder._ModuleBuilder.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ModuleBuilder._ModuleBuilder.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"290f7d2d-a32f-f3c5-f4cf-2dd29657794d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection.Emit\\ModuleBuilder.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines and represents a module in a dynamic assembly.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.ModuleBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.ModuleBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.ModuleBuilder.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.ModuleBuilder","System.Reflection.Emit.ModuleBuilder.Assembly","System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions","System.Reflection.Emit.ModuleBuilder.DefineDocument","System.Reflection.Emit.ModuleBuilder.DefineEnum","System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod","System.Reflection.Emit.ModuleBuilder.DefineInitializedData","System.Reflection.Emit.ModuleBuilder.DefineManifestResource","System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod","System.Reflection.Emit.ModuleBuilder.DefineResource","System.Reflection.Emit.ModuleBuilder.DefineType","System.Reflection.Emit.ModuleBuilder.DefineUninitializedData","System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource","System.Reflection.Emit.ModuleBuilder.Equals","System.Reflection.Emit.ModuleBuilder.FullyQualifiedName","System.Reflection.Emit.ModuleBuilder.GetArrayMethod","System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken","System.Reflection.Emit.ModuleBuilder.GetConstructorToken","System.Reflection.Emit.ModuleBuilder.GetCustomAttributes","System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData","System.Reflection.Emit.ModuleBuilder.GetField","System.Reflection.Emit.ModuleBuilder.GetFields","System.Reflection.Emit.ModuleBuilder.GetFieldToken","System.Reflection.Emit.ModuleBuilder.GetHashCode","System.Reflection.Emit.ModuleBuilder.GetMethodImpl","System.Reflection.Emit.ModuleBuilder.GetMethods","System.Reflection.Emit.ModuleBuilder.GetMethodToken","System.Reflection.Emit.ModuleBuilder.GetPEKind","System.Reflection.Emit.ModuleBuilder.GetSignatureToken","System.Reflection.Emit.ModuleBuilder.GetSignerCertificate","System.Reflection.Emit.ModuleBuilder.GetStringConstant","System.Reflection.Emit.ModuleBuilder.GetSymWriter","System.Reflection.Emit.ModuleBuilder.GetType","System.Reflection.Emit.ModuleBuilder.GetTypes","System.Reflection.Emit.ModuleBuilder.GetTypeToken","System.Reflection.Emit.ModuleBuilder.IsDefined","System.Reflection.Emit.ModuleBuilder.IsResource","System.Reflection.Emit.ModuleBuilder.IsTransient","System.Reflection.Emit.ModuleBuilder.MDStreamVersion","System.Reflection.Emit.ModuleBuilder.MetadataToken","System.Reflection.Emit.ModuleBuilder.ModuleVersionId","System.Reflection.Emit.ModuleBuilder.Name","System.Reflection.Emit.ModuleBuilder.ResolveField","System.Reflection.Emit.ModuleBuilder.ResolveMember","System.Reflection.Emit.ModuleBuilder.ResolveMethod","System.Reflection.Emit.ModuleBuilder.ResolveSignature","System.Reflection.Emit.ModuleBuilder.ResolveString","System.Reflection.Emit.ModuleBuilder.ResolveType","System.Reflection.Emit.ModuleBuilder.ScopeName","System.Reflection.Emit.ModuleBuilder.SetCustomAttribute","System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute","System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint","System.Reflection.Emit.ModuleBuilder._ModuleBuilder.GetIDsOfNames","System.Reflection.Emit.ModuleBuilder._ModuleBuilder.GetTypeInfo","System.Reflection.Emit.ModuleBuilder._ModuleBuilder.GetTypeInfoCount","System.Reflection.Emit.ModuleBuilder._ModuleBuilder.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.ModuleBuilder","System::Reflection::Emit::ModuleBuilder","System.Reflection.Emit.ModuleBuilder.Assembly","System::Reflection::Emit::ModuleBuilder::Assembly","System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions","System::Reflection::Emit::ModuleBuilder::CreateGlobalFunctions","System.Reflection.Emit.ModuleBuilder.DefineDocument","System::Reflection::Emit::ModuleBuilder::DefineDocument","System.Reflection.Emit.ModuleBuilder.DefineEnum","System::Reflection::Emit::ModuleBuilder::DefineEnum","System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod","System::Reflection::Emit::ModuleBuilder::DefineGlobalMethod","System.Reflection.Emit.ModuleBuilder.DefineInitializedData","System::Reflection::Emit::ModuleBuilder::DefineInitializedData","System.Reflection.Emit.ModuleBuilder.DefineManifestResource","System::Reflection::Emit::ModuleBuilder::DefineManifestResource","System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod","System::Reflection::Emit::ModuleBuilder::DefinePInvokeMethod","System.Reflection.Emit.ModuleBuilder.DefineResource","System::Reflection::Emit::ModuleBuilder::DefineResource","System.Reflection.Emit.ModuleBuilder.DefineType","System::Reflection::Emit::ModuleBuilder::DefineType","System.Reflection.Emit.ModuleBuilder.DefineUninitializedData","System::Reflection::Emit::ModuleBuilder::DefineUninitializedData","System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource","System::Reflection::Emit::ModuleBuilder::DefineUnmanagedResource","System.Reflection.Emit.ModuleBuilder.Equals","System::Reflection::Emit::ModuleBuilder::Equals","System.Reflection.Emit.ModuleBuilder.FullyQualifiedName","System::Reflection::Emit::ModuleBuilder::FullyQualifiedName","System.Reflection.Emit.ModuleBuilder.GetArrayMethod","System::Reflection::Emit::ModuleBuilder::GetArrayMethod","System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken","System::Reflection::Emit::ModuleBuilder::GetArrayMethodToken","System.Reflection.Emit.ModuleBuilder.GetConstructorToken","System::Reflection::Emit::ModuleBuilder::GetConstructorToken","System.Reflection.Emit.ModuleBuilder.GetCustomAttributes","System::Reflection::Emit::ModuleBuilder::GetCustomAttributes","System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData","System::Reflection::Emit::ModuleBuilder::GetCustomAttributesData","System.Reflection.Emit.ModuleBuilder.GetField","System::Reflection::Emit::ModuleBuilder::GetField","System.Reflection.Emit.ModuleBuilder.GetFields","System::Reflection::Emit::ModuleBuilder::GetFields","System.Reflection.Emit.ModuleBuilder.GetFieldToken","System::Reflection::Emit::ModuleBuilder::GetFieldToken","System.Reflection.Emit.ModuleBuilder.GetHashCode","System::Reflection::Emit::ModuleBuilder::GetHashCode","System.Reflection.Emit.ModuleBuilder.GetMethodImpl","System::Reflection::Emit::ModuleBuilder::GetMethodImpl","System.Reflection.Emit.ModuleBuilder.GetMethods","System::Reflection::Emit::ModuleBuilder::GetMethods","System.Reflection.Emit.ModuleBuilder.GetMethodToken","System::Reflection::Emit::ModuleBuilder::GetMethodToken","System.Reflection.Emit.ModuleBuilder.GetPEKind","System::Reflection::Emit::ModuleBuilder::GetPEKind","System.Reflection.Emit.ModuleBuilder.GetSignatureToken","System::Reflection::Emit::ModuleBuilder::GetSignatureToken","System.Reflection.Emit.ModuleBuilder.GetSignerCertificate","System::Reflection::Emit::ModuleBuilder::GetSignerCertificate","System.Reflection.Emit.ModuleBuilder.GetStringConstant","System::Reflection::Emit::ModuleBuilder::GetStringConstant","System.Reflection.Emit.ModuleBuilder.GetSymWriter","System::Reflection::Emit::ModuleBuilder::GetSymWriter","System.Reflection.Emit.ModuleBuilder.GetType","System::Reflection::Emit::ModuleBuilder::GetType","System.Reflection.Emit.ModuleBuilder.GetTypes","System::Reflection::Emit::ModuleBuilder::GetTypes","System.Reflection.Emit.ModuleBuilder.GetTypeToken","System::Reflection::Emit::ModuleBuilder::GetTypeToken","System.Reflection.Emit.ModuleBuilder.IsDefined","System::Reflection::Emit::ModuleBuilder::IsDefined","System.Reflection.Emit.ModuleBuilder.IsResource","System::Reflection::Emit::ModuleBuilder::IsResource","System.Reflection.Emit.ModuleBuilder.IsTransient","System::Reflection::Emit::ModuleBuilder::IsTransient","System.Reflection.Emit.ModuleBuilder.MDStreamVersion","System::Reflection::Emit::ModuleBuilder::MDStreamVersion","System.Reflection.Emit.ModuleBuilder.MetadataToken","System::Reflection::Emit::ModuleBuilder::MetadataToken","System.Reflection.Emit.ModuleBuilder.ModuleVersionId","System::Reflection::Emit::ModuleBuilder::ModuleVersionId","System.Reflection.Emit.ModuleBuilder.Name","System::Reflection::Emit::ModuleBuilder::Name","System.Reflection.Emit.ModuleBuilder.ResolveField","System::Reflection::Emit::ModuleBuilder::ResolveField","System.Reflection.Emit.ModuleBuilder.ResolveMember","System::Reflection::Emit::ModuleBuilder::ResolveMember","System.Reflection.Emit.ModuleBuilder.ResolveMethod","System::Reflection::Emit::ModuleBuilder::ResolveMethod","System.Reflection.Emit.ModuleBuilder.ResolveSignature","System::Reflection::Emit::ModuleBuilder::ResolveSignature","System.Reflection.Emit.ModuleBuilder.ResolveString","System::Reflection::Emit::ModuleBuilder::ResolveString","System.Reflection.Emit.ModuleBuilder.ResolveType","System::Reflection::Emit::ModuleBuilder::ResolveType","System.Reflection.Emit.ModuleBuilder.ScopeName","System::Reflection::Emit::ModuleBuilder::ScopeName","System.Reflection.Emit.ModuleBuilder.SetCustomAttribute","System::Reflection::Emit::ModuleBuilder::SetCustomAttribute","System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute","System::Reflection::Emit::ModuleBuilder::SetSymCustomAttribute","System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint","System::Reflection::Emit::ModuleBuilder::SetUserEntryPoint","System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetIDsOfNames","System::Reflection::Emit::ModuleBuilder::System#Runtime#InteropServices#_ModuleBuilder#GetIDsOfNames","System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfo","System::Reflection::Emit::ModuleBuilder::System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfo","System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfoCount","System::Reflection::Emit::ModuleBuilder::System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfoCount","System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#Invoke","System::Reflection::Emit::ModuleBuilder::System#Runtime#InteropServices#_ModuleBuilder#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"290f7d2d-a32f-f3c5-f4cf-2dd29657794d","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection.Emit\\ModuleBuilder.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/ModuleBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ModuleBuilder class | Microsoft Docs","_op_ogTitle":"ModuleBuilder class","description":"Defines and represents a module in a dynamic assembly.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.ModuleBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.modulebuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.modulebuilder","fileRelativePath":"System.Reflection.Emit.ModuleBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}