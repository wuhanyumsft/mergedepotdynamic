{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_ConstructorBuilder\">\r\n      <span class=\"lang-csharp\">ConstructorBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines and represents a constructor of a dynamic class.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ConstructorBuilder))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class ConstructorBuilder : System.Reflection.ConstructorInfo, System.Runtime.InteropServices._ConstructorBuilder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">System.Reflection.ConstructorInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ConstructorBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_ConstructorName\" data-linktype=\"relative-path\">ConstructorName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_Invoke_System_Object___\" data-linktype=\"relative-path\">Invoke(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_MemberType\" data-linktype=\"relative-path\">MemberType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_op_Equality_System_Reflection_ConstructorInfo_System_Reflection_ConstructorInfo_\" data-linktype=\"relative-path\">op_Equality(ConstructorInfo,ConstructorInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_op_Inequality_System_Reflection_ConstructorInfo_System_Reflection_ConstructorInfo_\" data-linktype=\"relative-path\">op_Inequality(ConstructorInfo,ConstructorInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_ConstructorInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_GetType\" data-linktype=\"relative-path\">_ConstructorInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_ConstructorInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_ConstructorInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_ConstructorInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_Invoke_2_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">_ConstructorInfo.Invoke_2(Object,BindingFlags,Binder,Object[],CultureInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_Invoke_3_System_Object_System_Object___\" data-linktype=\"relative-path\">_ConstructorInfo.Invoke_3(Object,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_Invoke_4_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">_ConstructorInfo.Invoke_4(BindingFlags,Binder,Object[],CultureInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_System_Runtime_InteropServices__ConstructorInfo_Invoke_5_System_Object___\" data-linktype=\"relative-path\">_ConstructorInfo.Invoke_5(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.constructorinfo#System_Reflection_ConstructorInfo_TypeConstructorName\" data-linktype=\"relative-path\">TypeConstructorName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_ContainsGenericParameters\" data-linktype=\"relative-path\">ContainsGenericParameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetCurrentMethod\" data-linktype=\"relative-path\">GetCurrentMethod()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetGenericArguments\" data-linktype=\"relative-path\">GetGenericArguments()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody\" data-linktype=\"relative-path\">GetMethodBody()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodFromHandle_System_RuntimeMethodHandle_\" data-linktype=\"relative-path\">GetMethodFromHandle(RuntimeMethodHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodFromHandle_System_RuntimeMethodHandle_System_RuntimeTypeHandle_\" data-linktype=\"relative-path\">GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_System_Object_System_Object___\" data-linktype=\"relative-path\">Invoke(Object,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsAbstract\" data-linktype=\"relative-path\">IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsAssembly\" data-linktype=\"relative-path\">IsAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsConstructor\" data-linktype=\"relative-path\">IsConstructor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamily\" data-linktype=\"relative-path\">IsFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamilyAndAssembly\" data-linktype=\"relative-path\">IsFamilyAndAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFamilyOrAssembly\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsFinal\" data-linktype=\"relative-path\">IsFinal</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsGenericMethod\" data-linktype=\"relative-path\">IsGenericMethod</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsGenericMethodDefinition\" data-linktype=\"relative-path\">IsGenericMethodDefinition</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsHideBySig\" data-linktype=\"relative-path\">IsHideBySig</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsPrivate\" data-linktype=\"relative-path\">IsPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsPublic\" data-linktype=\"relative-path\">IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSecurityCritical\" data-linktype=\"relative-path\">IsSecurityCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSecuritySafeCritical\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSecurityTransparent\" data-linktype=\"relative-path\">IsSecurityTransparent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsSpecialName\" data-linktype=\"relative-path\">IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsStatic\" data-linktype=\"relative-path\">IsStatic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsVirtual\" data-linktype=\"relative-path\">IsVirtual</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_MethodImplementationFlags\" data-linktype=\"relative-path\">MethodImplementationFlags</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_op_Equality_System_Reflection_MethodBase_System_Reflection_MethodBase_\" data-linktype=\"relative-path\">op_Equality(MethodBase,MethodBase)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_op_Inequality_System_Reflection_MethodBase_System_Reflection_MethodBase_\" data-linktype=\"relative-path\">op_Inequality(MethodBase,MethodBase)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetType\" data-linktype=\"relative-path\">_MethodBase.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MethodBase.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsAbstract\" data-linktype=\"relative-path\">_MethodBase.IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsAssembly\" data-linktype=\"relative-path\">_MethodBase.IsAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsConstructor\" data-linktype=\"relative-path\">_MethodBase.IsConstructor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamily\" data-linktype=\"relative-path\">_MethodBase.IsFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamilyAndAssembly\" data-linktype=\"relative-path\">_MethodBase.IsFamilyAndAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFamilyOrAssembly\" data-linktype=\"relative-path\">_MethodBase.IsFamilyOrAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsFinal\" data-linktype=\"relative-path\">_MethodBase.IsFinal</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsHideBySig\" data-linktype=\"relative-path\">_MethodBase.IsHideBySig</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsPrivate\" data-linktype=\"relative-path\">_MethodBase.IsPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsPublic\" data-linktype=\"relative-path\">_MethodBase.IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsSpecialName\" data-linktype=\"relative-path\">_MethodBase.IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsStatic\" data-linktype=\"relative-path\">_MethodBase.IsStatic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_System_Runtime_InteropServices__MethodBase_IsVirtual\" data-linktype=\"relative-path\">_MethodBase.IsVirtual</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>ConstructorBuilder is used to fully describe a constructor in Microsoft intermediate language (MSIL), including the name, attributes, signature, and constructor body. It is used in conjunction with the <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> class to create classes at run time. Call <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineConstructor_\" data-linktype=\"relative-path\">DefineConstructor</a> to get an instance of ConstructorBuilder.  </p>\n<p> If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.  </p>\n<p> If you use ConstructorBuilder to define a constructor for your dynamic type, a default constructor is not provided. You have the following options for providing a default constructor in addition to the constructor you defined:  </p>\n<ul>\n<li><p>If you want a default constructor that simply calls the default constructor of the base class, you can use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineDefaultConstructor_\" data-linktype=\"relative-path\">DefineDefaultConstructor</a> method to create one (and optionally restrict access to it). Do not provide an implementation for this default constructor. If you do, an exception is thrown when you try to use the constructor. No exception is thrown when the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method is called.  </p>\n</li>\n<li><p>If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineConstructor_\" data-linktype=\"relative-path\">DefineConstructor</a> method to create a ConstructorBuilder, and provide your own implementation.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the attributes for this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_CallingConvention\" data-linktype=\"self-bookmark\">CallingConvention</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a> value that depends on whether the declaring type is generic.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_DeclaringType\" data-linktype=\"self-bookmark\">DeclaringType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the type that declares this member.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_InitLocals\" data-linktype=\"self-bookmark\">InitLocals</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets whether the local variables in this constructor should be zero-initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_MethodHandle\" data-linktype=\"self-bookmark\">MethodHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_Module\" data-linktype=\"self-bookmark\">Module</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dynamic module in which this constructor is defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the name of this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_ReflectedType\" data-linktype=\"self-bookmark\">ReflectedType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Holds a reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object from which this object was obtained.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_ReturnType\" data-linktype=\"self-bookmark\">ReturnType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets <code>null</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_Signature\" data-linktype=\"self-bookmark\">Signature</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the signature of the field in the form of a string.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_AddDeclarativeSecurity_System_Security_Permissions_SecurityAction_System_Security_PermissionSet_\" data-linktype=\"self-bookmark\">AddDeclarativeSecurity(SecurityAction,PermissionSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds declarative security to this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_DefineParameter_System_Int32_System_Reflection_ParameterAttributes_System_String_\" data-linktype=\"self-bookmark\">DefineParameter(Int32,ParameterAttributes,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a parameter of this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes defined for this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the custom attributes identified by the given type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_GetILGenerator\" data-linktype=\"self-bookmark\">GetILGenerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> for this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_GetILGenerator_System_Int32_\" data-linktype=\"self-bookmark\">GetILGenerator(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> object, with the specified MSIL stream size, that can be used to build a method body for this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_GetMethodImplementationFlags\" data-linktype=\"self-bookmark\">GetMethodImplementationFlags()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method implementation flags for this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_GetModule\" data-linktype=\"self-bookmark\">GetModule()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a reference to the module that contains this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_GetParameters\" data-linktype=\"self-bookmark\">GetParameters()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the parameters of this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_GetToken\" data-linktype=\"self-bookmark\">GetToken()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a> that represents the token for this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_Invoke_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">Invoke(BindingFlags,Binder,Object[],CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes the constructor dynamically reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_Invoke_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified <code>Binder</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks if the specified custom attribute type is defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\" data-linktype=\"self-bookmark\">SetCustomAttribute(CustomAttributeBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Set a custom attribute using a custom attribute builder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\" data-linktype=\"self-bookmark\">SetCustomAttribute(ConstructorInfo,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Set a custom attribute using a specified custom attribute blob.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_SetImplementationFlags_System_Reflection_MethodImplAttributes_\" data-linktype=\"self-bookmark\">SetImplementationFlags(MethodImplAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the method implementation flags for this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_SetMethodBody_System_Byte___System_Int32_System_Byte___System_Collections_Generic_IEnumerable_System_Reflection_Emit_ExceptionHandler__System_Collections_Generic_IEnumerable_System_Int32__\" data-linktype=\"self-bookmark\">SetMethodBody(Byte[],Int32,Byte[],IEnumerable&lt;ExceptionHandler&gt;,IEnumerable&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the body of the constructor by using a specified byte array of Microsoft intermediate language (MSIL) instructions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_SetSymCustomAttribute_System_String_System_Byte___\" data-linktype=\"self-bookmark\">SetSymCustomAttribute(String,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets this constructor&#39;s custom attribute associated with symbolic information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns this <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> instance as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_ConstructorBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_ConstructorBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_ConstructorBuilder.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_ConstructorBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_Attributes\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the attributes for this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodAttributes Attributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a></div>\r\n                  </div>\r\n                  <p>Returns the attributes for this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>Attributes</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_Attributes_4#2\">      MethodBuilder^ myMethodBuilder = nullptr;\n\n      AppDomain^ myCurrentDomain = AppDomain::CurrentDomain;\n      // Create assembly in current CurrentDomain\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly\n      myAssemblyBuilder = myCurrentDomain-&gt;DefineDynamicAssembly(\n         myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      FieldInfo^ myFieldInfo =\n         myModuleBuilder-&gt;DefineUninitializedData( &quot;myField&quot;, 2, FieldAttributes::Public );\n      // Create a type in the module\n      TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;TempClass&quot;, TypeAttributes::Public );\n      FieldBuilder^ myGreetingField = myTypeBuilder-&gt;DefineField( &quot;Greeting&quot;,\n         String::typeid, FieldAttributes::Public );\n      array&lt;Type^&gt;^myConstructorArgs = {String::typeid};\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor(\n         MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n      PermissionSet^ myPset = gcnew PermissionSet( PermissionState::Unrestricted );\n      // Add declarative security to the constructor.\n      Console::WriteLine( &quot;Adding declarative security to the constructor.....&quot; );\n      Console::WriteLine( &quot;The Security action to be taken is \\&quot;DENY\\&quot; and&quot; +\n         &quot; Permission set is \\&quot;UNRESTRICTED\\&quot;.&quot; );\n      myConstructor-&gt;AddDeclarativeSecurity( SecurityAction::Deny, myPset );\n      MethodAttributes myMethodAttributes = myConstructor-&gt;Attributes;\n      Type^ myAttributeType = MethodAttributes::typeid;\n      int myAttribValue = (int)myMethodAttributes;\n      if (  !myAttributeType-&gt;IsEnum )\n      {\n         Console::WriteLine( &quot;This is not an Enum&quot; );\n      }\n      array&lt;FieldInfo^&gt;^myFieldInfo1 = myAttributeType-&gt;GetFields( static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Static) );\n      Console::WriteLine( &quot;The Field info names of the Attributes for the constructor are:&quot; );\n      for ( int i = 0; i &lt; myFieldInfo1-&gt;Length; i++ )\n      {\n         int myFieldValue =  *dynamic_cast&lt;Int32^&gt;(myFieldInfo1[ i ]-&gt;GetValue( nullptr ));\n         if ( (myFieldValue &amp; myAttribValue) == myFieldValue )\n         {\n            Console::WriteLine( &quot;   {0}&quot;, myFieldInfo1[ i ]-&gt;Name );\n         }\n      }\n\n      Type^ myType2 = myConstructor-&gt;DeclaringType;\n      Console::WriteLine( &quot;The declaring type is : {0}&quot;, myType2 );\n</code></pre><pre><code class=\"lang-cs\" name=\"ConstructorBuilder_Attributes_4#2\">      MethodBuilder myMethodBuilder=null;\n\n      AppDomain myCurrentDomain = AppDomain.CurrentDomain;\n      // Create assembly in current CurrentDomain\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly\n      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly\n         (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n      FieldInfo myFieldInfo =\n         myModuleBuilder.DefineUninitializedData(&quot;myField&quot;,2,FieldAttributes.Public);\n      // Create a type in the module\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;TempClass&quot;,TypeAttributes.Public);\n      FieldBuilder myGreetingField = myTypeBuilder.DefineField(&quot;Greeting&quot;,\n         typeof(String), FieldAttributes.Public);\n      Type[] myConstructorArgs = { typeof(String) };\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n      PermissionSet myPset = new PermissionSet(PermissionState.Unrestricted);\n      // Add declarative security to the constructor.\n      Console.WriteLine(&quot;Adding declarative security to the constructor.....&quot;);\n      Console.WriteLine(&quot;The Security action to be taken is \\&quot;DENY\\&quot; and&quot; +\n         &quot; Permission set is \\&quot;UNRESTRICTED\\&quot;.&quot;);\n      myConstructor.AddDeclarativeSecurity(SecurityAction.Deny,myPset);\n      MethodAttributes myMethodAttributes = myConstructor.Attributes;\n      Type myAttributeType = typeof(MethodAttributes);\n      int myAttribValue = (int) myMethodAttributes;\n      if(! myAttributeType.IsEnum)\n      {\n         Console.WriteLine(&quot;This is not an Enum&quot;);\n      }\n      FieldInfo[] myFieldInfo1 = myAttributeType.GetFields(BindingFlags.Public | BindingFlags.Static);\n      Console.WriteLine(&quot;The Field info names of the Attributes for the constructor are:&quot;);\n      for (int i = 0; i &lt; myFieldInfo1.Length; i++)\n      {\n         int myFieldValue = (Int32)myFieldInfo1[i].GetValue(null);\n         if ((myFieldValue &amp; myAttribValue) == myFieldValue)\n         {\n            Console.WriteLine(&quot;   &quot; + myFieldInfo1[i].Name);\n         }\n      }\n\n      Type myType2 = myConstructor.DeclaringType;\n      Console.WriteLine(&quot;The declaring type is : &quot;+myType2.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_Attributes_4#2\">      Dim myMethodBuilder As MethodBuilder = Nothing\n\n      Dim myCurrentDomain As AppDomain = AppDomain.CurrentDomain\n      &#39; Create assembly in current CurrentDomain\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      &#39; Create a dynamic assembly\n      myAssemblyBuilder = _\n            myCurrentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave)\n      &#39; Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      Dim myFieldInfo As FieldInfo = _\n          myModuleBuilder.DefineUninitializedData(&quot;myField&quot;, 2, FieldAttributes.Public)\n      &#39; Create a type in the module\n      Dim myTypeBuilder As TypeBuilder = _\n          myModuleBuilder.DefineType(&quot;TempClass&quot;, TypeAttributes.Public)\n      Dim myGreetingField As FieldBuilder = _\n         myTypeBuilder.DefineField(&quot;Greeting&quot;, GetType(String), FieldAttributes.Public)\n      Dim myConstructorArgs As Type() = {GetType(String)}\n      &#39; Define a constructor of the dynamic class.\n      Dim myConstructor As ConstructorBuilder = _\n          myTypeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, _\n                                          myConstructorArgs)\n      Dim myPset As New PermissionSet(PermissionState.Unrestricted)\n      &#39; Add declarative security to the constructor.\n      Console.WriteLine(&quot;Adding declarative security to the constructor.....&quot;)\n      Console.WriteLine(&quot;The Security action to be taken is &quot;&quot;DENY&quot;&quot; and&quot; + _\n                        &quot; Permission set is &quot;&quot;UNRESTRICTED&quot;&quot;.&quot;)\n      myConstructor.AddDeclarativeSecurity(SecurityAction.Deny, myPset)\n      Dim myMethodAttributes As MethodAttributes = myConstructor.Attributes\n      Dim myAttributeType As Type = GetType(MethodAttributes)\n      Dim myAttribValue As Integer = CInt(myMethodAttributes)\n      If Not myAttributeType.IsEnum Then\n         Console.WriteLine(&quot;This is not an Enum&quot;)\n      End If\n      Dim myFieldInfo1 As FieldInfo() = myAttributeType.GetFields(BindingFlags.Public Or _\n                                                                   BindingFlags.Static)\n      Console.WriteLine(&quot;The Field info names of the Attributes for the constructor are:&quot;)\n      Dim i As Integer\n      For i = 0 To myFieldInfo1.Length - 1\n         Dim myFieldValue As Integer = CType(myFieldInfo1(i).GetValue(Nothing), Int32)\n         If(myFieldValue And myAttribValue) = myFieldValue Then\n            Console.WriteLine(&quot;   &quot; + myFieldInfo1(i).Name)\n         End If\n      Next i\n\n      Dim myType2 As Type = myConstructor.DeclaringType\n      Console.WriteLine(&quot;The declaring type is : &quot; + myType2.ToString())\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_CallingConvention\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_CallingConvention_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CallingConvention</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a> value that depends on whether the declaring type is generic.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.CallingConventions CallingConvention { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </div>\r\n                  <p><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a> if the declaring type is generic; otherwise, <a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_DeclaringType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_DeclaringType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringType</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the type that declares this member.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type DeclaringType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Returns the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the type that declares this member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A member of a class (or interface) is either declared or inherited from a base class (or interface).  </p>\n<p> The following code sample illustrates the use of <code>DeclaringType</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_Attributes_4#2\">      MethodBuilder^ myMethodBuilder = nullptr;\n\n      AppDomain^ myCurrentDomain = AppDomain::CurrentDomain;\n      // Create assembly in current CurrentDomain\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly\n      myAssemblyBuilder = myCurrentDomain-&gt;DefineDynamicAssembly(\n         myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      FieldInfo^ myFieldInfo =\n         myModuleBuilder-&gt;DefineUninitializedData( &quot;myField&quot;, 2, FieldAttributes::Public );\n      // Create a type in the module\n      TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;TempClass&quot;, TypeAttributes::Public );\n      FieldBuilder^ myGreetingField = myTypeBuilder-&gt;DefineField( &quot;Greeting&quot;,\n         String::typeid, FieldAttributes::Public );\n      array&lt;Type^&gt;^myConstructorArgs = {String::typeid};\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor(\n         MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n      PermissionSet^ myPset = gcnew PermissionSet( PermissionState::Unrestricted );\n      // Add declarative security to the constructor.\n      Console::WriteLine( &quot;Adding declarative security to the constructor.....&quot; );\n      Console::WriteLine( &quot;The Security action to be taken is \\&quot;DENY\\&quot; and&quot; +\n         &quot; Permission set is \\&quot;UNRESTRICTED\\&quot;.&quot; );\n      myConstructor-&gt;AddDeclarativeSecurity( SecurityAction::Deny, myPset );\n      MethodAttributes myMethodAttributes = myConstructor-&gt;Attributes;\n      Type^ myAttributeType = MethodAttributes::typeid;\n      int myAttribValue = (int)myMethodAttributes;\n      if (  !myAttributeType-&gt;IsEnum )\n      {\n         Console::WriteLine( &quot;This is not an Enum&quot; );\n      }\n      array&lt;FieldInfo^&gt;^myFieldInfo1 = myAttributeType-&gt;GetFields( static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Static) );\n      Console::WriteLine( &quot;The Field info names of the Attributes for the constructor are:&quot; );\n      for ( int i = 0; i &lt; myFieldInfo1-&gt;Length; i++ )\n      {\n         int myFieldValue =  *dynamic_cast&lt;Int32^&gt;(myFieldInfo1[ i ]-&gt;GetValue( nullptr ));\n         if ( (myFieldValue &amp; myAttribValue) == myFieldValue )\n         {\n            Console::WriteLine( &quot;   {0}&quot;, myFieldInfo1[ i ]-&gt;Name );\n         }\n      }\n\n      Type^ myType2 = myConstructor-&gt;DeclaringType;\n      Console::WriteLine( &quot;The declaring type is : {0}&quot;, myType2 );\n</code></pre><pre><code class=\"lang-cs\" name=\"ConstructorBuilder_Attributes_4#2\">      MethodBuilder myMethodBuilder=null;\n\n      AppDomain myCurrentDomain = AppDomain.CurrentDomain;\n      // Create assembly in current CurrentDomain\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly\n      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly\n         (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n      FieldInfo myFieldInfo =\n         myModuleBuilder.DefineUninitializedData(&quot;myField&quot;,2,FieldAttributes.Public);\n      // Create a type in the module\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;TempClass&quot;,TypeAttributes.Public);\n      FieldBuilder myGreetingField = myTypeBuilder.DefineField(&quot;Greeting&quot;,\n         typeof(String), FieldAttributes.Public);\n      Type[] myConstructorArgs = { typeof(String) };\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n      PermissionSet myPset = new PermissionSet(PermissionState.Unrestricted);\n      // Add declarative security to the constructor.\n      Console.WriteLine(&quot;Adding declarative security to the constructor.....&quot;);\n      Console.WriteLine(&quot;The Security action to be taken is \\&quot;DENY\\&quot; and&quot; +\n         &quot; Permission set is \\&quot;UNRESTRICTED\\&quot;.&quot;);\n      myConstructor.AddDeclarativeSecurity(SecurityAction.Deny,myPset);\n      MethodAttributes myMethodAttributes = myConstructor.Attributes;\n      Type myAttributeType = typeof(MethodAttributes);\n      int myAttribValue = (int) myMethodAttributes;\n      if(! myAttributeType.IsEnum)\n      {\n         Console.WriteLine(&quot;This is not an Enum&quot;);\n      }\n      FieldInfo[] myFieldInfo1 = myAttributeType.GetFields(BindingFlags.Public | BindingFlags.Static);\n      Console.WriteLine(&quot;The Field info names of the Attributes for the constructor are:&quot;);\n      for (int i = 0; i &lt; myFieldInfo1.Length; i++)\n      {\n         int myFieldValue = (Int32)myFieldInfo1[i].GetValue(null);\n         if ((myFieldValue &amp; myAttribValue) == myFieldValue)\n         {\n            Console.WriteLine(&quot;   &quot; + myFieldInfo1[i].Name);\n         }\n      }\n\n      Type myType2 = myConstructor.DeclaringType;\n      Console.WriteLine(&quot;The declaring type is : &quot;+myType2.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_Attributes_4#2\">      Dim myMethodBuilder As MethodBuilder = Nothing\n\n      Dim myCurrentDomain As AppDomain = AppDomain.CurrentDomain\n      &#39; Create assembly in current CurrentDomain\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      &#39; Create a dynamic assembly\n      myAssemblyBuilder = _\n            myCurrentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave)\n      &#39; Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      Dim myFieldInfo As FieldInfo = _\n          myModuleBuilder.DefineUninitializedData(&quot;myField&quot;, 2, FieldAttributes.Public)\n      &#39; Create a type in the module\n      Dim myTypeBuilder As TypeBuilder = _\n          myModuleBuilder.DefineType(&quot;TempClass&quot;, TypeAttributes.Public)\n      Dim myGreetingField As FieldBuilder = _\n         myTypeBuilder.DefineField(&quot;Greeting&quot;, GetType(String), FieldAttributes.Public)\n      Dim myConstructorArgs As Type() = {GetType(String)}\n      &#39; Define a constructor of the dynamic class.\n      Dim myConstructor As ConstructorBuilder = _\n          myTypeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, _\n                                          myConstructorArgs)\n      Dim myPset As New PermissionSet(PermissionState.Unrestricted)\n      &#39; Add declarative security to the constructor.\n      Console.WriteLine(&quot;Adding declarative security to the constructor.....&quot;)\n      Console.WriteLine(&quot;The Security action to be taken is &quot;&quot;DENY&quot;&quot; and&quot; + _\n                        &quot; Permission set is &quot;&quot;UNRESTRICTED&quot;&quot;.&quot;)\n      myConstructor.AddDeclarativeSecurity(SecurityAction.Deny, myPset)\n      Dim myMethodAttributes As MethodAttributes = myConstructor.Attributes\n      Dim myAttributeType As Type = GetType(MethodAttributes)\n      Dim myAttribValue As Integer = CInt(myMethodAttributes)\n      If Not myAttributeType.IsEnum Then\n         Console.WriteLine(&quot;This is not an Enum&quot;)\n      End If\n      Dim myFieldInfo1 As FieldInfo() = myAttributeType.GetFields(BindingFlags.Public Or _\n                                                                   BindingFlags.Static)\n      Console.WriteLine(&quot;The Field info names of the Attributes for the constructor are:&quot;)\n      Dim i As Integer\n      For i = 0 To myFieldInfo1.Length - 1\n         Dim myFieldValue As Integer = CType(myFieldInfo1(i).GetValue(Nothing), Int32)\n         If(myFieldValue And myAttribValue) = myFieldValue Then\n            Console.WriteLine(&quot;   &quot; + myFieldInfo1(i).Name)\n         End If\n      Next i\n\n      Dim myType2 As Type = myConstructor.DeclaringType\n      Console.WriteLine(&quot;The declaring type is : &quot; + myType2.ToString())\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_InitLocals\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_InitLocals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitLocals</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets whether the local variables in this constructor should be zero-initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool InitLocals { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_MethodHandle\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_MethodHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MethodHandle</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override RuntimeMethodHandle MethodHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimemethodhandle\" data-linktype=\"relative-path\">RuntimeMethodHandle</a></div>\r\n                  </div>\r\n                  <p>Returns the internal handle for the method. Use this handle to access the underlying metadata handle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This property is not supported on this class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_Module\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_Module_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Module</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dynamic module in which this constructor is defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module Module { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> object that represents the dynamic module in which this constructor is defined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the same value as the <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder#System_Reflection_Emit_ConstructorBuilder_GetModule_\" data-linktype=\"relative-path\">GetModule</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_Name\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the name of this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns the name of this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>Name</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ConstructorBuilder_Name_5#2\">      MethodBuilder myMethodBuilder = null;\n      AppDomain myCurrentDomain = AppDomain.CurrentDomain;\n      // Create assembly in current CurrentDomain.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly.\n      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly\n               (myAssemblyName, AssemblyBuilderAccess.Run);\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n      FieldInfo myFieldInfo =\n         myModuleBuilder.DefineUninitializedData(&quot;myField&quot;, 2, FieldAttributes.Public);\n      // Create a type in the module.\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;TempClass&quot;,TypeAttributes.Public);\n      FieldBuilder myGreetingField = myTypeBuilder.DefineField(&quot;Greeting&quot;, \n                                          typeof(String), FieldAttributes.Public);\n      Type[] myConstructorArgs = { typeof(String) };\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n      MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n      // Display the name of the constructor.\n      Console.WriteLine(&quot;The constructor name is  : &quot;+ myConstructor.Name);\n      // Display the &#39;Type&#39; object from which this object was obtained.\n      Console.WriteLine(&quot;The reflected type  is  : &quot;+ myConstructor.ReflectedType);\n      // Display the signature of the field.\n      Console.WriteLine(myConstructor.Signature);\n      // Display the constructor builder instance as a string.\n      Console.WriteLine(myConstructor.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_Name_5#2\">      Dim myMethodBuilder As MethodBuilder = Nothing\n      Dim myCurrentDomain As AppDomain = AppDomain.CurrentDomain\n      &#39; Create assembly in current CurrentDomain.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      &#39; Create a dynamic assembly.\n      myAssemblyBuilder = _ \n            myCurrentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      Dim myFieldInfo As FieldInfo = _ \n          myModuleBuilder.DefineUninitializedData(&quot;myField&quot;, 2, FieldAttributes.Public)\n      &#39; Create a type in the module.\n      Dim myTypeBuilder As TypeBuilder = _ \n          myModuleBuilder.DefineType(&quot;TempClass&quot;, TypeAttributes.Public)\n      Dim myGreetingField As FieldBuilder = _ \n          myTypeBuilder.DefineField(&quot;Greeting&quot;, GetType(String), FieldAttributes.Public)\n      Dim myConstructorArgs As Type() = {GetType(String)}\n      &#39; Define a constructor of the dynamic class.\n      Dim myConstructor As ConstructorBuilder = _ \n          myTypeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, _ \n                                          myConstructorArgs)\n      &#39; Display the name of the constructor.\n      Console.WriteLine(&quot;The constructor name is  : &quot; + myConstructor.Name)\n      &#39; Display the &#39;Type&#39; object from which this object was obtained.\n      Console.WriteLine(&quot;The reflected type  is  : &quot; + myConstructor.ReflectedType.ToString())\n      &#39; Display the signature of the field.\n      Console.WriteLine(myConstructor.Signature)\n      &#39; Display the constructor builder instance as a string.\n      Console.WriteLine(myConstructor.ToString())\n</code></pre><pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_Name_5#2\">      MethodBuilder^ myMethodBuilder = nullptr;\n      AppDomain^ myCurrentDomain = AppDomain::CurrentDomain;\n\n      // Create assembly in current CurrentDomain.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n\n      // Create a dynamic assembly.\n      myAssemblyBuilder = myCurrentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      FieldInfo^ myFieldInfo = myModuleBuilder-&gt;DefineUninitializedData( &quot;myField&quot;, 2, FieldAttributes::Public );\n\n      // Create a type in the module.\n      TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;TempClass&quot;, TypeAttributes::Public );\n      FieldBuilder^ myGreetingField = myTypeBuilder-&gt;DefineField( &quot;Greeting&quot;, String::typeid, FieldAttributes::Public );\n      array&lt;Type^&gt;^myConstructorArgs = {String::typeid};\n\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n\n      // Display the name of the constructor.\n      Console::WriteLine( &quot;The constructor name is  : {0}&quot;, myConstructor-&gt;Name );\n\n      // Display the &#39;Type&#39; object from which this object was obtained.\n      Console::WriteLine( &quot;The reflected type  is  : {0}&quot;, myConstructor-&gt;ReflectedType );\n\n      // Display the signature of the field.\n      Console::WriteLine( myConstructor-&gt;Signature );\n\n      // Display the constructor builder instance as a string.\n      Console::WriteLine( myConstructor );\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_ReflectedType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_ReflectedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectedType</div>        \r\n          </div>\r\n    \r\n            <p>Holds a reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object from which this object was obtained.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type ReflectedType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Returns the <code>Type</code> object from which this object was obtained.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> object represents a constructor on a particular class. In order to obtain a <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object, the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the class that supports the constructor is queried. This property holds a reference to that <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_ReturnType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_ReturnType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReturnType</div>        \r\n          </div>\r\n    \r\n            <p>Gets <code>null</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type ReturnType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property might be removed in a future version.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_Signature\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_Signature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Signature</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the signature of the field in the form of a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Signature { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns the signature of the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_AddDeclarativeSecurity_System_Security_Permissions_SecurityAction_System_Security_PermissionSet_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_AddDeclarativeSecurity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddDeclarativeSecurity(SecurityAction,PermissionSet)</div>        \r\n          </div>\r\n    \r\n            <p>Adds declarative security to this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The security action to be taken, such as Demand, Assert, and so on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The set of permissions the action applies to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>action</code> is invalid (RequestMinimum, RequestOptional, and RequestRefuse are invalid).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been previously created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> The permission set <code>pset</code> contains an action that was added earlier by <code>AddDeclarativeSecurity</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>pset</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>AddDeclarativeSecurity can be called several times, with each call specifying a security action (such as <code>Demand</code>, <code>Assert</code>, and <code>Deny</code>) and a set of permissions that the action applies to.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a constructor by using this method are stored in the old XML metadata format. See Emitting Declarative Security Attributes.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>AddDeclarativeSecurity</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_Attributes_4#1\">      MethodBuilder^ myMethodBuilder = nullptr;\n\n      AppDomain^ myCurrentDomain = AppDomain::CurrentDomain;\n      // Create assembly in current CurrentDomain\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly\n      myAssemblyBuilder = myCurrentDomain-&gt;DefineDynamicAssembly(\n         myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      FieldInfo^ myFieldInfo =\n         myModuleBuilder-&gt;DefineUninitializedData( &quot;myField&quot;, 2, FieldAttributes::Public );\n      // Create a type in the module\n      TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;TempClass&quot;, TypeAttributes::Public );\n      FieldBuilder^ myGreetingField = myTypeBuilder-&gt;DefineField( &quot;Greeting&quot;,\n         String::typeid, FieldAttributes::Public );\n      array&lt;Type^&gt;^myConstructorArgs = {String::typeid};\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor(\n         MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n      PermissionSet^ myPset = gcnew PermissionSet( PermissionState::Unrestricted );\n      // Add declarative security to the constructor.\n      Console::WriteLine( &quot;Adding declarative security to the constructor.....&quot; );\n      Console::WriteLine( &quot;The Security action to be taken is \\&quot;DENY\\&quot; and&quot; +\n         &quot; Permission set is \\&quot;UNRESTRICTED\\&quot;.&quot; );\n      myConstructor-&gt;AddDeclarativeSecurity( SecurityAction::Deny, myPset );\n      MethodAttributes myMethodAttributes = myConstructor-&gt;Attributes;\n      Type^ myAttributeType = MethodAttributes::typeid;\n      int myAttribValue = (int)myMethodAttributes;\n      if (  !myAttributeType-&gt;IsEnum )\n      {\n         Console::WriteLine( &quot;This is not an Enum&quot; );\n      }\n      array&lt;FieldInfo^&gt;^myFieldInfo1 = myAttributeType-&gt;GetFields( static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Static) );\n      Console::WriteLine( &quot;The Field info names of the Attributes for the constructor are:&quot; );\n      for ( int i = 0; i &lt; myFieldInfo1-&gt;Length; i++ )\n      {\n         int myFieldValue =  *dynamic_cast&lt;Int32^&gt;(myFieldInfo1[ i ]-&gt;GetValue( nullptr ));\n         if ( (myFieldValue &amp; myAttribValue) == myFieldValue )\n         {\n            Console::WriteLine( &quot;   {0}&quot;, myFieldInfo1[ i ]-&gt;Name );\n         }\n      }\n\n      Type^ myType2 = myConstructor-&gt;DeclaringType;\n      Console::WriteLine( &quot;The declaring type is : {0}&quot;, myType2 );\n      ParameterBuilder^ myParameterBuilder1 =\n         myConstructor-&gt;DefineParameter( 1, ParameterAttributes::Out, &quot;My Parameter Name1&quot; );\n      Console::WriteLine( &quot;The name of the parameter is : {0}&quot;,\n         myParameterBuilder1-&gt;Name );\n      if ( myParameterBuilder1-&gt;IsIn )\n            Console::WriteLine( &quot;{0} is Input parameter.&quot;, myParameterBuilder1-&gt;Name );\n      else\n            Console::WriteLine( &quot;{0} is not Input Parameter.&quot;, myParameterBuilder1-&gt;Name );\n      ParameterBuilder^ myParameterBuilder2 =\n         myConstructor-&gt;DefineParameter( 1, ParameterAttributes::In, &quot;My Parameter Name2&quot; );\n      Console::WriteLine( &quot;The Parameter name is : {0}&quot;,\n         myParameterBuilder2-&gt;Name );\n      if ( myParameterBuilder2-&gt;IsIn )\n            Console::WriteLine( &quot;{0} is Input parameter.&quot;, myParameterBuilder2-&gt;Name );\n      else\n            Console::WriteLine( &quot;{0} is not Input Parameter.&quot;, myParameterBuilder2-&gt;Name );\n</code></pre><pre><code class=\"lang-cs\" name=\"ConstructorBuilder_Attributes_4#1\">      MethodBuilder myMethodBuilder=null;\n\n      AppDomain myCurrentDomain = AppDomain.CurrentDomain;\n      // Create assembly in current CurrentDomain\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly\n      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly\n         (myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n      FieldInfo myFieldInfo =\n         myModuleBuilder.DefineUninitializedData(&quot;myField&quot;,2,FieldAttributes.Public);\n      // Create a type in the module\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;TempClass&quot;,TypeAttributes.Public);\n      FieldBuilder myGreetingField = myTypeBuilder.DefineField(&quot;Greeting&quot;,\n         typeof(String), FieldAttributes.Public);\n      Type[] myConstructorArgs = { typeof(String) };\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n      PermissionSet myPset = new PermissionSet(PermissionState.Unrestricted);\n      // Add declarative security to the constructor.\n      Console.WriteLine(&quot;Adding declarative security to the constructor.....&quot;);\n      Console.WriteLine(&quot;The Security action to be taken is \\&quot;DENY\\&quot; and&quot; +\n         &quot; Permission set is \\&quot;UNRESTRICTED\\&quot;.&quot;);\n      myConstructor.AddDeclarativeSecurity(SecurityAction.Deny,myPset);\n      MethodAttributes myMethodAttributes = myConstructor.Attributes;\n      Type myAttributeType = typeof(MethodAttributes);\n      int myAttribValue = (int) myMethodAttributes;\n      if(! myAttributeType.IsEnum)\n      {\n         Console.WriteLine(&quot;This is not an Enum&quot;);\n      }\n      FieldInfo[] myFieldInfo1 = myAttributeType.GetFields(BindingFlags.Public | BindingFlags.Static);\n      Console.WriteLine(&quot;The Field info names of the Attributes for the constructor are:&quot;);\n      for (int i = 0; i &lt; myFieldInfo1.Length; i++)\n      {\n         int myFieldValue = (Int32)myFieldInfo1[i].GetValue(null);\n         if ((myFieldValue &amp; myAttribValue) == myFieldValue)\n         {\n            Console.WriteLine(&quot;   &quot; + myFieldInfo1[i].Name);\n         }\n      }\n\n      Type myType2 = myConstructor.DeclaringType;\n      Console.WriteLine(&quot;The declaring type is : &quot;+myType2.ToString());\n      ParameterBuilder myParameterBuilder1 =\n         myConstructor.DefineParameter(1,  ParameterAttributes.Out, &quot;My Parameter Name1&quot;);\n      Console.WriteLine(&quot;The name of the parameter is : &quot; +\n         myParameterBuilder1.Name);\n      if(myParameterBuilder1.IsIn)\n         Console.WriteLine(myParameterBuilder1.Name +&quot; is Input parameter.&quot;);\n      else\n         Console.WriteLine(myParameterBuilder1.Name +&quot; is not Input Parameter.&quot;);\n      ParameterBuilder myParameterBuilder2 =\n         myConstructor.DefineParameter(1, ParameterAttributes.In, &quot;My Parameter Name2&quot;);\n      Console.WriteLine(&quot;The Parameter name is : &quot; +\n         myParameterBuilder2.Name);\n      if(myParameterBuilder2.IsIn)\n         Console.WriteLine(myParameterBuilder2.Name +&quot; is Input parameter.&quot;);\n      else\n         Console.WriteLine(myParameterBuilder2.Name + &quot; is not Input Parameter.&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_Attributes_4#1\">      Dim myMethodBuilder As MethodBuilder = Nothing\n\n      Dim myCurrentDomain As AppDomain = AppDomain.CurrentDomain\n      &#39; Create assembly in current CurrentDomain\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      &#39; Create a dynamic assembly\n      myAssemblyBuilder = _\n            myCurrentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave)\n      &#39; Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      Dim myFieldInfo As FieldInfo = _\n          myModuleBuilder.DefineUninitializedData(&quot;myField&quot;, 2, FieldAttributes.Public)\n      &#39; Create a type in the module\n      Dim myTypeBuilder As TypeBuilder = _\n          myModuleBuilder.DefineType(&quot;TempClass&quot;, TypeAttributes.Public)\n      Dim myGreetingField As FieldBuilder = _\n         myTypeBuilder.DefineField(&quot;Greeting&quot;, GetType(String), FieldAttributes.Public)\n      Dim myConstructorArgs As Type() = {GetType(String)}\n      &#39; Define a constructor of the dynamic class.\n      Dim myConstructor As ConstructorBuilder = _\n          myTypeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, _\n                                          myConstructorArgs)\n      Dim myPset As New PermissionSet(PermissionState.Unrestricted)\n      &#39; Add declarative security to the constructor.\n      Console.WriteLine(&quot;Adding declarative security to the constructor.....&quot;)\n      Console.WriteLine(&quot;The Security action to be taken is &quot;&quot;DENY&quot;&quot; and&quot; + _\n                        &quot; Permission set is &quot;&quot;UNRESTRICTED&quot;&quot;.&quot;)\n      myConstructor.AddDeclarativeSecurity(SecurityAction.Deny, myPset)\n      Dim myMethodAttributes As MethodAttributes = myConstructor.Attributes\n      Dim myAttributeType As Type = GetType(MethodAttributes)\n      Dim myAttribValue As Integer = CInt(myMethodAttributes)\n      If Not myAttributeType.IsEnum Then\n         Console.WriteLine(&quot;This is not an Enum&quot;)\n      End If\n      Dim myFieldInfo1 As FieldInfo() = myAttributeType.GetFields(BindingFlags.Public Or _\n                                                                   BindingFlags.Static)\n      Console.WriteLine(&quot;The Field info names of the Attributes for the constructor are:&quot;)\n      Dim i As Integer\n      For i = 0 To myFieldInfo1.Length - 1\n         Dim myFieldValue As Integer = CType(myFieldInfo1(i).GetValue(Nothing), Int32)\n         If(myFieldValue And myAttribValue) = myFieldValue Then\n            Console.WriteLine(&quot;   &quot; + myFieldInfo1(i).Name)\n         End If\n      Next i\n\n      Dim myType2 As Type = myConstructor.DeclaringType\n      Console.WriteLine(&quot;The declaring type is : &quot; + myType2.ToString())\n      Dim myParameterBuilder1 As ParameterBuilder = _\n          myConstructor.DefineParameter(1, ParameterAttributes.Out, &quot;My Parameter Name1&quot;)\n      Console.WriteLine(&quot;The name of the parameter is : &quot; + myParameterBuilder1.Name)\n      If myParameterBuilder1.IsIn Then\n         Console.WriteLine(myParameterBuilder1.Name + &quot; is Input parameter.&quot;)\n      Else\n         Console.WriteLine(myParameterBuilder1.Name + &quot; is not Input Parameter.&quot;)\n      End If\n      Dim myParameterBuilder2 As ParameterBuilder = _\n          myConstructor.DefineParameter(1, ParameterAttributes.In, &quot;My Parameter Name2&quot;)\n      Console.WriteLine(&quot;The Parameter name is : &quot; + myParameterBuilder2.Name)\n      If myParameterBuilder2.IsIn Then\n         Console.WriteLine(myParameterBuilder2.Name + &quot; is Input parameter.&quot;)\n      Else\n         Console.WriteLine(myParameterBuilder2.Name + &quot; is not Input Parameter.&quot;)\n      End If\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_DefineParameter_System_Int32_System_Reflection_ParameterAttributes_System_String_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_DefineParameter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineParameter(Int32,ParameterAttributes,String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a parameter of this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ParameterBuilder DefineParameter (int iSequence, System.Reflection.ParameterAttributes attributes, string strParamName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iSequence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterattributes\" data-linktype=\"relative-path\">ParameterAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attributes of the parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strParamName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the parameter. The name can be the null string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.parameterbuilder\" data-linktype=\"relative-path\">ParameterBuilder</a></div>\r\n                  </div>\r\n                  <p>Returns a <code>ParameterBuilder</code> object that represents the new parameter of this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>iSequence</code> is less than 0 (zero), or it is greater than the number of parameters of the constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you specify 0 (zero) for <code>iSequence</code>, this method returns a <a class=\"xref\" href=\"system.reflection.emit.parameterbuilder\" data-linktype=\"relative-path\">ParameterBuilder</a> instead of throwing an exception. There is nothing useful that you can do with this <a class=\"xref\" href=\"system.reflection.emit.parameterbuilder\" data-linktype=\"relative-path\">ParameterBuilder</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes defined for this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Controls inheritance of custom attributes from base classes. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of objects representing all the custom attributes of the constructor represented by this <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>inherit</code> parameter is ignored because a class never inherits constructors from base classes.  </p>\n<p> To get the custom attributes, finish building the type by calling <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a>, retrieve the constructor by calling the <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_\" data-linktype=\"relative-path\">GetConstructor</a> method on the returned type, and then call the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method on the returned <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the custom attributes identified by the given type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The custom attribute type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Controls inheritance of custom attributes from base classes. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> representing the attributes of this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>inherit</code> parameter is ignored because a class never inherits constructors from base classes.  </p>\n<p> To get the custom attributes, finish building the type by calling <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a>, retrieve the constructor by calling the <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_\" data-linktype=\"relative-path\">GetConstructor</a> method on the returned type, and then call the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method on the returned <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_GetILGenerator\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_GetILGenerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetILGenerator()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> for this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ILGenerator GetILGenerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a></div>\r\n                  </div>\r\n                  <p>Returns an <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> object for this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The constructor is a default constructor.  </p>\n<p> -or-  </p>\n<p> The constructor has <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> or <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">MethodImplAttributes</a> flags indicating that it should not have a method body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The runtime generates the code for default constructors. Therefore, if an attempt is made to obtain an <code>ILGenerator</code>, an exception will be thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of the <code>GetILGenerator</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.ConstructorBuilder Example#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nType^ DynamicPointTypeGen()\n{\n   Type^ pointType = nullptr;\n   array&lt;Type^&gt;^temp0 = {int::typeid,int::typeid,int::typeid};\n   array&lt;Type^&gt;^ctorParams = temp0;\n   AppDomain^ myDomain = Thread::GetDomain();\n   AssemblyName^ myAsmName = gcnew AssemblyName;\n   myAsmName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n   AssemblyBuilder^ myAsmBuilder = myDomain-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::RunAndSave );\n   ModuleBuilder^ pointModule = myAsmBuilder-&gt;DefineDynamicModule( &quot;PointModule&quot;, &quot;Point.dll&quot; );\n   TypeBuilder^ pointTypeBld = pointModule-&gt;DefineType( &quot;Point&quot;, TypeAttributes::Public );\n   FieldBuilder^ xField = pointTypeBld-&gt;DefineField( &quot;x&quot;, int::typeid, FieldAttributes::Public );\n   FieldBuilder^ yField = pointTypeBld-&gt;DefineField( &quot;y&quot;, int::typeid, FieldAttributes::Public );\n   FieldBuilder^ zField = pointTypeBld-&gt;DefineField( &quot;z&quot;, int::typeid, FieldAttributes::Public );\n   Type^ objType = Type::GetType( &quot;System.Object&quot; );\n   ConstructorInfo^ objCtor = objType-&gt;GetConstructor( gcnew array&lt;Type^&gt;(0) );\n   ConstructorBuilder^ pointCtor = pointTypeBld-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, ctorParams );\n   ILGenerator^ ctorIL = pointCtor-&gt;GetILGenerator();\n   \n   // NOTE: ldarg.0 holds the &quot;this&quot; reference - ldarg.1, ldarg.2, and ldarg.3\n   // hold the actual passed parameters. ldarg.0 is used by instance methods\n   // to hold a reference to the current calling bject instance. Static methods\n   // do not use arg.0, since they are not instantiated and hence no reference\n   // is needed to distinguish them.\n   ctorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   \n   // Here, we wish to create an instance of System::Object by invoking its\n   // constructor, as specified above.\n   ctorIL-&gt;Emit( OpCodes::Call, objCtor );\n   \n   // Now, we&#39;ll load the current instance in arg 0, along\n   // with the value of parameter &quot;x&quot; stored in arg 1, into stfld.\n   ctorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ctorIL-&gt;Emit( OpCodes::Ldarg_1 );\n   ctorIL-&gt;Emit( OpCodes::Stfld, xField );\n   \n   // Now, we store arg 2 &quot;y&quot; in the current instance with stfld.\n   ctorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ctorIL-&gt;Emit( OpCodes::Ldarg_2 );\n   ctorIL-&gt;Emit( OpCodes::Stfld, yField );\n   \n   // Last of all, arg 3 &quot;z&quot; gets stored in the current instance.\n   ctorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ctorIL-&gt;Emit( OpCodes::Ldarg_3 );\n   ctorIL-&gt;Emit( OpCodes::Stfld, zField );\n   \n   // Our work complete, we return.\n   ctorIL-&gt;Emit( OpCodes::Ret );\n   \n   // Now, let&#39;s create three very simple methods so we can see our fields.\n   array&lt;String^&gt;^temp1 = {&quot;GetX&quot;,&quot;GetY&quot;,&quot;GetZ&quot;};\n   array&lt;String^&gt;^mthdNames = temp1;\n   System::Collections::IEnumerator^ myEnum = mthdNames-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ mthdName = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      MethodBuilder^ getFieldMthd = pointTypeBld-&gt;DefineMethod( mthdName, MethodAttributes::Public, int::typeid, nullptr );\n      ILGenerator^ mthdIL = getFieldMthd-&gt;GetILGenerator();\n      mthdIL-&gt;Emit( OpCodes::Ldarg_0 );\n      if ( mthdName-&gt;Equals( &quot;GetX&quot; ) )\n            mthdIL-&gt;Emit( OpCodes::Ldfld, xField );\n      else\n      if ( mthdName-&gt;Equals( &quot;GetY&quot; ) )\n            mthdIL-&gt;Emit( OpCodes::Ldfld, yField );\n      else\n      if ( mthdName-&gt;Equals( &quot;GetZ&quot; ) )\n            mthdIL-&gt;Emit( OpCodes::Ldfld, zField );\n\n\n\n      mthdIL-&gt;Emit( OpCodes::Ret );\n   }\n\n   pointType = pointTypeBld-&gt;CreateType();\n   \n   // Let&#39;s save it, just for posterity.\n   myAsmBuilder-&gt;Save( &quot;Point.dll&quot; );\n   return pointType;\n}\n\nint main()\n{\n   Type^ myDynamicType = nullptr;\n   Object^ aPoint = nullptr;\n   array&lt;Type^&gt;^temp2 = {int::typeid,int::typeid,int::typeid};\n   array&lt;Type^&gt;^aPtypes = temp2;\n   array&lt;Object^&gt;^temp3 = {4,5,6};\n   array&lt;Object^&gt;^aPargs = temp3;\n   \n   // Call the  method to build our dynamic class.\n   myDynamicType = DynamicPointTypeGen();\n   Console::WriteLine( &quot;Some information about my new Type &#39;{0}&#39;:&quot;, myDynamicType-&gt;FullName );\n   Console::WriteLine( &quot;Assembly: &#39;{0}&#39;&quot;, myDynamicType-&gt;Assembly );\n   Console::WriteLine( &quot;Attributes: &#39;{0}&#39;&quot;, myDynamicType-&gt;Attributes );\n   Console::WriteLine( &quot;Module: &#39;{0}&#39;&quot;, myDynamicType-&gt;Module );\n   Console::WriteLine( &quot;Members: &quot; );\n   System::Collections::IEnumerator^ myEnum = myDynamicType-&gt;GetMembers()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      MemberInfo^ member = safe_cast&lt;MemberInfo^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;-- {0} {1};&quot;, member-&gt;MemberType, member-&gt;Name );\n   }\n\n   Console::WriteLine( &quot;---&quot; );\n   \n   // Let&#39;s take a look at the constructor we created.\n   ConstructorInfo^ myDTctor = myDynamicType-&gt;GetConstructor( aPtypes );\n   Console::WriteLine( &quot;Constructor: {0};&quot;, myDTctor );\n   Console::WriteLine( &quot;---&quot; );\n   \n   // Now, we get to use our dynamically-created class by invoking the constructor.\n   aPoint = myDTctor-&gt;Invoke( aPargs );\n   Console::WriteLine( &quot;aPoint is type {0}.&quot;, aPoint-&gt;GetType() );\n   \n   // Finally, let&#39;s reflect on the instance of our new type - aPoint - and\n   // make sure everything proceeded according to plan.\n   Console::WriteLine( &quot;aPoint.x = {0}&quot;, myDynamicType-&gt;InvokeMember( &quot;GetX&quot;, BindingFlags::InvokeMethod, nullptr, aPoint, gcnew array&lt;Object^&gt;(0) ) );\n   Console::WriteLine( &quot;aPoint.y = {0}&quot;, myDynamicType-&gt;InvokeMember( &quot;GetY&quot;, BindingFlags::InvokeMethod, nullptr, aPoint, gcnew array&lt;Object^&gt;(0) ) );\n   Console::WriteLine( &quot;aPoint.z = {0}&quot;, myDynamicType-&gt;InvokeMember( &quot;GetZ&quot;, BindingFlags::InvokeMethod, nullptr, aPoint, gcnew array&lt;Object^&gt;(0) ) );\n   \n   // +++ OUTPUT +++\n   // Some information about my new Type &#39;Point&#39;:\n   // Assembly: &#39;MyDynamicAssembly, Version=0.0.0.0&#39;\n   // Attributes: &#39;AutoLayout, AnsiClass, NotPublic, Public&#39;\n   // Module: &#39;PointModule&#39;\n   // Members:\n   // -- Field x;\n   // -- Field y;\n   // -- Field z;\n   // -- Method GetHashCode;\n   // -- Method Equals;\n   // -- Method ToString;\n   // -- Method GetType;\n   // -- Constructor .ctor;\n   // ---\n   // Constructor: Void .ctor(Int32, Int32, Int32);\n   // ---\n   // aPoint is type Point.\n   // aPoint.x = 4\n   // aPoint.y = 5\n   // aPoint.z = 6\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.ConstructorBuilder Example#1\">\nusing System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass TestCtorBuilder {\n \n  \tpublic static Type DynamicPointTypeGen() {\n\t  \n\t   Type pointType = null;\n\t   Type[] ctorParams = new Type[] {typeof(int),\n\t\t\t\t\t    typeof(int),\n\t\t\t\t\t    typeof(int)};\n \t\n\t   AppDomain myDomain = Thread.GetDomain();\n\t   AssemblyName myAsmName = new AssemblyName();\n\t   myAsmName.Name = &quot;MyDynamicAssembly&quot;;\n\t\n\t   AssemblyBuilder myAsmBuilder = myDomain.DefineDynamicAssembly(\n\t\t\t\t\t  myAsmName, \n\t\t\t\t\t  AssemblyBuilderAccess.RunAndSave);\n\n   \t   ModuleBuilder pointModule = myAsmBuilder.DefineDynamicModule(&quot;PointModule&quot;,\n\t\t\t\t\t\t\t\t\t&quot;Point.dll&quot;);\n\n\t   TypeBuilder pointTypeBld = pointModule.DefineType(&quot;Point&quot;,\n\t\t\t\t\t\t              TypeAttributes.Public);\n\n\t   FieldBuilder xField = pointTypeBld.DefineField(&quot;x&quot;, typeof(int),\n                                                          FieldAttributes.Public);\n\t   FieldBuilder yField = pointTypeBld.DefineField(&quot;y&quot;, typeof(int), \n                                                          FieldAttributes.Public);\n\t   FieldBuilder zField = pointTypeBld.DefineField(&quot;z&quot;, typeof(int),\n                                                          FieldAttributes.Public);\n\n\n           Type objType = Type.GetType(&quot;System.Object&quot;); \n           ConstructorInfo objCtor = objType.GetConstructor(new Type[0]);\n\n\t   ConstructorBuilder pointCtor = pointTypeBld.DefineConstructor(\n\t\t\t\t\t  MethodAttributes.Public,\n\t\t\t\t\t  CallingConventions.Standard,\n\t\t\t\t\t  ctorParams);\n\t   ILGenerator ctorIL = pointCtor.GetILGenerator();\n\n\t   // NOTE: ldarg.0 holds the &quot;this&quot; reference - ldarg.1, ldarg.2, and ldarg.3\n\t   // hold the actual passed parameters. ldarg.0 is used by instance methods\n\t   // to hold a reference to the current calling object instance. Static methods\n\t   // do not use arg.0, since they are not instantiated and hence no reference\n\t   // is needed to distinguish them. \n\n           ctorIL.Emit(OpCodes.Ldarg_0);\n\n\t   // Here, we wish to create an instance of System.Object by invoking its\n  \t   // constructor, as specified above.\n\n           ctorIL.Emit(OpCodes.Call, objCtor);\n\n\t   // Now, we&#39;ll load the current instance ref in arg 0, along\n\t   // with the value of parameter &quot;x&quot; stored in arg 1, into stfld.\n\n           ctorIL.Emit(OpCodes.Ldarg_0);\n           ctorIL.Emit(OpCodes.Ldarg_1);\n           ctorIL.Emit(OpCodes.Stfld, xField); \n\n\t   // Now, we store arg 2 &quot;y&quot; in the current instance with stfld.\n\n           ctorIL.Emit(OpCodes.Ldarg_0);\n           ctorIL.Emit(OpCodes.Ldarg_2);\n           ctorIL.Emit(OpCodes.Stfld, yField); \n\n\t   // Last of all, arg 3 &quot;z&quot; gets stored in the current instance.\n\n           ctorIL.Emit(OpCodes.Ldarg_0);\n           ctorIL.Emit(OpCodes.Ldarg_3);\n           ctorIL.Emit(OpCodes.Stfld, zField); \n           \n           // Our work complete, we return.\n\n\t   ctorIL.Emit(OpCodes.Ret); \n\n\t   // Now, let&#39;s create three very simple methods so we can see our fields.\n\n\t   string[] mthdNames = new string[] {&quot;GetX&quot;, &quot;GetY&quot;, &quot;GetZ&quot;}; \n\n           foreach (string mthdName in mthdNames) {\n              MethodBuilder getFieldMthd = pointTypeBld.DefineMethod(\n\t\t\t\t           mthdName, \n\t\t\t\t           MethodAttributes.Public,\n                                           typeof(int), \n                                           null);\n\t      ILGenerator mthdIL = getFieldMthd.GetILGenerator();\n\t   \n\t      mthdIL.Emit(OpCodes.Ldarg_0);\n  \t      switch (mthdName) {\n\t         case &quot;GetX&quot;: mthdIL.Emit(OpCodes.Ldfld, xField);\n\t\t\t      break;\n\t         case &quot;GetY&quot;: mthdIL.Emit(OpCodes.Ldfld, yField);\n\t\t\t      break;\n\t         case &quot;GetZ&quot;: mthdIL.Emit(OpCodes.Ldfld, zField);\n\t\t\t      break;\n\n\t      }\n\t      mthdIL.Emit(OpCodes.Ret);\n\n           }\n\t   // Finally, we create the type.\n\n \t   pointType = pointTypeBld.CreateType();\n\n\t   // Let&#39;s save it, just for posterity.\n\t   \n\t   myAsmBuilder.Save(&quot;Point.dll&quot;);\n\t\n\t   return pointType;\n\n \t}\n\n\tpublic static void Main() {\n\t\n\t   Type myDynamicType = null;\n           object aPoint = null;\n\t   Type[] aPtypes = new Type[] {typeof(int), typeof(int), typeof(int)};\n           object[] aPargs = new object[] {4, 5, 6};\n\t\n\t   // Call the  method to build our dynamic class.\n\n\t   myDynamicType = DynamicPointTypeGen();\n\n\t   Console.WriteLine(&quot;Some information about my new Type &#39;{0}&#39;:&quot;,\n\t\t\t      myDynamicType.FullName);\n\t   Console.WriteLine(&quot;Assembly: &#39;{0}&#39;&quot;, myDynamicType.Assembly);\n\t   Console.WriteLine(&quot;Attributes: &#39;{0}&#39;&quot;, myDynamicType.Attributes);\n\t   Console.WriteLine(&quot;Module: &#39;{0}&#39;&quot;, myDynamicType.Module);\n\t   Console.WriteLine(&quot;Members: &quot;); \n\t   foreach (MemberInfo member in myDynamicType.GetMembers()) {\n\t\tConsole.WriteLine(&quot;-- {0} {1};&quot;, member.MemberType, member.Name);\n\t   }\n\n           Console.WriteLine(&quot;---&quot;);\n\n\t   // Let&#39;s take a look at the constructor we created.\n\n\t   ConstructorInfo myDTctor = myDynamicType.GetConstructor(aPtypes);\n           Console.WriteLine(&quot;Constructor: {0};&quot;, myDTctor.ToString());\n\n           Console.WriteLine(&quot;---&quot;);\n\t  \n           // Now, we get to use our dynamically-created class by invoking the constructor. \n\n\t   aPoint = myDTctor.Invoke(aPargs);\n           Console.WriteLine(&quot;aPoint is type {0}.&quot;, aPoint.GetType());\n\t   \t   \n\n\t   // Finally, let&#39;s reflect on the instance of our new type - aPoint - and\n\t   // make sure everything proceeded according to plan.\n\n\t   Console.WriteLine(&quot;aPoint.x = {0}&quot;,\n\t\t\t     myDynamicType.InvokeMember(&quot;GetX&quot;,\n\t\t\t\t\t\t        BindingFlags.InvokeMethod,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\taPoint,\n\t\t\t\t\t\t\tnew object[0]));\n\t   Console.WriteLine(&quot;aPoint.y = {0}&quot;,\n\t\t\t     myDynamicType.InvokeMember(&quot;GetY&quot;,\n\t\t\t\t\t\t        BindingFlags.InvokeMethod,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\taPoint,\n\t\t\t\t\t\t\tnew object[0]));\n\t   Console.WriteLine(&quot;aPoint.z = {0}&quot;,\n\t\t\t     myDynamicType.InvokeMember(&quot;GetZ&quot;,\n\t\t\t\t\t\t        BindingFlags.InvokeMethod,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\taPoint,\n\t\t\t\t\t\t\tnew object[0]));\n\n\t    \n\n\t   // +++ OUTPUT +++\n\t   // Some information about my new Type &#39;Point&#39;:\n\t   // Assembly: &#39;MyDynamicAssembly, Version=0.0.0.0&#39;\n\t   // Attributes: &#39;AutoLayout, AnsiClass, NotPublic, Public&#39;\n\t   // Module: &#39;PointModule&#39;\n\t   // Members: \n\t   // -- Field x;\n\t   // -- Field y;\n\t   // -- Field z;\n           // -- Method GetHashCode;\n           // -- Method Equals;\n           // -- Method ToString;\n           // -- Method GetType;\n           // -- Constructor .ctor;\n\t   // ---\n\t   // Constructor: Void .ctor(Int32, Int32, Int32);\n\t   // ---\n\t   // aPoint is type Point.\n\t   // aPoint.x = 4\n\t   // aPoint.y = 5\n\t   // aPoint.z = 6\n\t    \n\t}\n    \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.ConstructorBuilder Example#1\">\nImports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n _\n\nClass TestCtorBuilder\n   \n   \n   Public Shared Function DynamicPointTypeGen() As Type\n      \n      Dim pointType As Type = Nothing\n      Dim ctorParams() As Type = {GetType(Integer), GetType(Integer), GetType(Integer)}\n      \n      Dim myDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim myAsmBuilder As AssemblyBuilder = myDomain.DefineDynamicAssembly(myAsmName, AssemblyBuilderAccess.RunAndSave)\n      \n      Dim pointModule As ModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;PointModule&quot;, &quot;Point.dll&quot;)\n      \n      Dim pointTypeBld As TypeBuilder = pointModule.DefineType(&quot;Point&quot;, TypeAttributes.Public)\n      \n      Dim xField As FieldBuilder = pointTypeBld.DefineField(&quot;x&quot;, GetType(Integer), FieldAttributes.Public)\n      Dim yField As FieldBuilder = pointTypeBld.DefineField(&quot;y&quot;, GetType(Integer), FieldAttributes.Public)\n      Dim zField As FieldBuilder = pointTypeBld.DefineField(&quot;z&quot;, GetType(Integer), FieldAttributes.Public)\n      \n      Dim objType As Type = Type.GetType(&quot;System.Object&quot;)\n      Dim objCtor As ConstructorInfo = objType.GetConstructor(New Type() {})\n      \n      Dim pointCtor As ConstructorBuilder = pointTypeBld.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, ctorParams)\n      Dim ctorIL As ILGenerator = pointCtor.GetILGenerator()\n      \n      &#39; NOTE: ldarg.0 holds the &quot;this&quot; reference - ldarg.1, ldarg.2, and ldarg.3\n      &#39; hold the actual passed parameters. ldarg.0 is used by instance methods\n      &#39; to hold a reference to the current calling object instance. Static methods\n      &#39; do not use arg.0, since they are not instantiated and hence no reference\n      &#39; is needed to distinguish them. \n      ctorIL.Emit(OpCodes.Ldarg_0)\n      \n      &#39; Here, we wish to create an instance of System.Object by invoking its\n      &#39; constructor, as specified above.\n      ctorIL.Emit(OpCodes.Call, objCtor)\n      \n      &#39; Now, we&#39;ll load the current instance ref in arg 0, along\n      &#39; with the value of parameter &quot;x&quot; stored in arg 1, into stfld.\n      ctorIL.Emit(OpCodes.Ldarg_0)\n      ctorIL.Emit(OpCodes.Ldarg_1)\n      ctorIL.Emit(OpCodes.Stfld, xField)\n      \n      &#39; Now, we store arg 2 &quot;y&quot; in the current instance with stfld.\n      ctorIL.Emit(OpCodes.Ldarg_0)\n      ctorIL.Emit(OpCodes.Ldarg_2)\n      ctorIL.Emit(OpCodes.Stfld, yField)\n      \n      &#39; Last of all, arg 3 &quot;z&quot; gets stored in the current instance.\n      ctorIL.Emit(OpCodes.Ldarg_0)\n      ctorIL.Emit(OpCodes.Ldarg_3)\n      ctorIL.Emit(OpCodes.Stfld, zField)\n      \n      &#39; Our work complete, we return.\n      ctorIL.Emit(OpCodes.Ret)\n      \n      &#39; Now, let&#39;s create three very simple methods so we can see our fields.\n      Dim mthdNames() As String = {&quot;GetX&quot;, &quot;GetY&quot;, &quot;GetZ&quot;}\n      \n      Dim mthdName As String\n      For Each mthdName In  mthdNames\n         Dim getFieldMthd As MethodBuilder = pointTypeBld.DefineMethod(mthdName, MethodAttributes.Public, GetType(Integer), Nothing)\n         Dim mthdIL As ILGenerator = getFieldMthd.GetILGenerator()\n         \n         mthdIL.Emit(OpCodes.Ldarg_0)\n         Select Case mthdName\n            Case &quot;GetX&quot;\n               mthdIL.Emit(OpCodes.Ldfld, xField)\n            Case &quot;GetY&quot;\n               mthdIL.Emit(OpCodes.Ldfld, yField)\n            Case &quot;GetZ&quot;\n               mthdIL.Emit(OpCodes.Ldfld, zField)\n         End Select\n         \n         mthdIL.Emit(OpCodes.Ret)\n      Next mthdName \n      &#39; Finally, we create the type.\n      pointType = pointTypeBld.CreateType()\n      \n      &#39; Let&#39;s save it, just for posterity.\n      myAsmBuilder.Save(&quot;Point.dll&quot;)\n      \n      Return pointType\n   End Function &#39;DynamicPointTypeGen\n    \n   \n   Public Shared Sub Main()\n      \n      Dim myDynamicType As Type = Nothing\n      Dim aPoint As Object = Nothing\n      Dim aPtypes() As Type = {GetType(Integer), GetType(Integer), GetType(Integer)}\n      Dim aPargs() As Object = {4, 5, 6}\n      \n      &#39; Call the  method to build our dynamic class.\n      myDynamicType = DynamicPointTypeGen()\n      \n      Console.WriteLine(&quot;Some information about my new Type &#39;{0}&#39;:&quot;, myDynamicType.FullName)\n      Console.WriteLine(&quot;Assembly: &#39;{0}&#39;&quot;, myDynamicType.Assembly)\n      Console.WriteLine(&quot;Attributes: &#39;{0}&#39;&quot;, myDynamicType.Attributes)\n      Console.WriteLine(&quot;Module: &#39;{0}&#39;&quot;, myDynamicType.Module)\n      Console.WriteLine(&quot;Members: &quot;)\n      Dim member As MemberInfo\n      For Each member In  myDynamicType.GetMembers()\n         Console.WriteLine(&quot;-- {0} {1};&quot;, member.MemberType, member.Name)\n      Next member\n      \n      Console.WriteLine(&quot;---&quot;)\n      \n      &#39; Let&#39;s take a look at the constructor we created.\n      Dim myDTctor As ConstructorInfo = myDynamicType.GetConstructor(aPtypes)\n      Console.WriteLine(&quot;Constructor: {0};&quot;, myDTctor.ToString())\n      \n      Console.WriteLine(&quot;---&quot;)\n      \n      &#39; Now, we get to use our dynamically-created class by invoking the constructor. \n      aPoint = myDTctor.Invoke(aPargs)\n      Console.WriteLine(&quot;aPoint is type {0}.&quot;, aPoint.GetType())\n      \n      \n      &#39; Finally, let&#39;s reflect on the instance of our new type - aPoint - and\n      &#39; make sure everything proceeded according to plan.\n      Console.WriteLine(&quot;aPoint.x = {0}&quot;, myDynamicType.InvokeMember(&quot;GetX&quot;, BindingFlags.InvokeMethod, Nothing, aPoint, New Object() {}))\n      Console.WriteLine(&quot;aPoint.y = {0}&quot;, myDynamicType.InvokeMember(&quot;GetY&quot;, BindingFlags.InvokeMethod, Nothing, aPoint, New Object() {}))\n      Console.WriteLine(&quot;aPoint.z = {0}&quot;, myDynamicType.InvokeMember(&quot;GetZ&quot;, BindingFlags.InvokeMethod, Nothing, aPoint, New Object() {}))\n   End Sub &#39;Main\nEnd Class &#39;TestCtorBuilder\n\n\n\n&#39; +++ OUTPUT +++\n&#39; Some information about my new Type &#39;Point&#39;:\n&#39; Assembly: &#39;MyDynamicAssembly, Version=0.0.0.0&#39;\n&#39; Attributes: &#39;AutoLayout, AnsiClass, NotPublic, Public&#39;\n&#39; Module: &#39;PointModule&#39;\n&#39; Members: \n&#39; -- Field x;\n&#39; -- Field y;\n&#39; -- Field z;\n&#39; -- Method GetHashCode;\n&#39; -- Method Equals;\n&#39; -- Method ToString;\n&#39; -- Method GetType;\n&#39; -- Constructor .ctor;\n&#39; ---\n&#39; Constructor: Void .ctor(Int32, Int32, Int32);\n&#39; ---\n&#39; aPoint is type Point.\n&#39; aPoint.x = 4\n&#39; aPoint.y = 5\n&#39; aPoint.z = 6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_GetILGenerator_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_GetILGenerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetILGenerator(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> object, with the specified MSIL stream size, that can be used to build a method body for this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>streamSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the MSIL stream, in bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> for this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The constructor is a default constructor.  </p>\n<p> -or-  </p>\n<p> The constructor has <a class=\"xref\" href=\"system.reflection.methodattributes\" data-linktype=\"relative-path\">MethodAttributes</a> or <a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">MethodImplAttributes</a> flags indicating that it should not have a method body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The runtime generates the code for default constructors. Therefore, if an attempt is made to obtain an <code>ILGenerator</code> for a default constructor, an exception is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_GetMethodImplementationFlags\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_GetMethodImplementationFlags_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodImplementationFlags()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method implementation flags for this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">MethodImplAttributes</a></div>\r\n                  </div>\r\n                  <p>The method implementation flags for this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>GetMethodImplementationFlags</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ConstructorBuilder_GetModule_4#3\">\n      MethodBuilder myMethodBuilder = null;\n      AppDomain myCurrentDomain = AppDomain.CurrentDomain;\n      // Create assembly in current CurrentDomain.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly.\n      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly\n                                    (myAssemblyName, AssemblyBuilderAccess.Run);\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;);\n      // Create a type in the module.\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;TempClass&quot;,TypeAttributes.Public);\n      FieldBuilder myGreetingField = myTypeBuilder.DefineField(&quot;Greeting&quot;,\n         typeof(String), FieldAttributes.Public);\n      Type[] myConstructorArgs = { typeof(String) };\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructorBuilder = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n      // Get a reference to the module that contains this constructor.\n      Module myModule = myConstructorBuilder.GetModule();\n      Console.WriteLine(&quot;Module Name : &quot; + myModule.Name);\n      // Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      MethodToken myMethodToken = myConstructorBuilder.GetToken();\n      Console.WriteLine(&quot;Constructor Token is : &quot; + myMethodToken.Token);\n      // Get the method implementation flags for this constructor.\n      MethodImplAttributes myMethodImplAttributes = myConstructorBuilder.GetMethodImplementationFlags();\n      Console.WriteLine(&quot;MethodImplAttributes : &quot;  + myMethodImplAttributes);\n</code></pre><pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_GetModule_4#3\">\n      MethodBuilder^ myMethodBuilder = nullptr;\n      AppDomain^ myCurrentDomain = AppDomain::CurrentDomain;\n      // Create assembly in current CurrentDomain.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly.\n      myAssemblyBuilder = myCurrentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot; );\n      // Create a type in the module.\n      TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;TempClass&quot;, TypeAttributes::Public );\n      FieldBuilder^ myGreetingField = myTypeBuilder-&gt;DefineField( &quot;Greeting&quot;,\n         String::typeid, FieldAttributes::Public );\n      array&lt;Type^&gt;^myConstructorArgs = {String::typeid};\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder^ myConstructorBuilder = myTypeBuilder-&gt;DefineConstructor(\n         MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n      // Get a reference to the module that contains this constructor.\n      Module^ myModule = myConstructorBuilder-&gt;GetModule();\n      Console::WriteLine( &quot;Module Name : {0}&quot;, myModule-&gt;Name );\n      // Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      MethodToken myMethodToken = myConstructorBuilder-&gt;GetToken();\n      Console::WriteLine( &quot;Constructor Token is : {0}&quot;, myMethodToken.Token );\n      // Get the method implementation flags for this constructor.\n      MethodImplAttributes myMethodImplAttributes = myConstructorBuilder-&gt;GetMethodImplementationFlags();\n      Console::WriteLine( &quot;MethodImplAttributes : {0}&quot;, myMethodImplAttributes );\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_GetModule_4#3\">      Dim myMethodBuilder As MethodBuilder = Nothing\n      Dim myCurrentDomain As AppDomain = AppDomain.CurrentDomain\n      &#39; Create assembly in current CurrentDomain.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      &#39; Create a dynamic assembly.\n      myAssemblyBuilder = _ \n                myCurrentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;)\n      &#39; Create a type in the module.\n      Dim myTypeBuilder As TypeBuilder = _ \n                   myModuleBuilder.DefineType(&quot;TempClass&quot;, TypeAttributes.Public)\n      Dim myGreetingField As FieldBuilder = _ \n               myTypeBuilder.DefineField(&quot;Greeting&quot;, GetType(String), FieldAttributes.Public)\n       Dim myConstructorArgs As Type() = {GetType(String)}\n      &#39; Define a constructor of the dynamic class.\n      Dim myConstructorBuilder As ConstructorBuilder = _ \n          myTypeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, _ \n                                          myConstructorArgs)\n      &#39; Get a reference to the module that contains this constructor.\n      Dim myModule As [Module] = myConstructorBuilder.GetModule()\n      Console.WriteLine(&quot;Module Name : &quot; + myModule.Name)\n      &#39; Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      Dim myMethodToken As MethodToken = myConstructorBuilder.GetToken()\n      Console.WriteLine(&quot;Constructor Token is : &quot; + myMethodToken.Token.ToString())\n      &#39; Get the method implementation flags for this constructor.\n      Dim myMethodImplAttributes As MethodImplAttributes = _\n          myConstructorBuilder.GetMethodImplementationFlags()\n      Console.WriteLine(&quot;MethodImplAttributes : &quot; + myMethodImplAttributes.ToString())\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_GetModule\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_GetModule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetModule()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a reference to the module that contains this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Module GetModule ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>The module that contains this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the usage of <code>GetModule</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.MethodBuilder.GetModule#1\">\tModuleBuilder myModBuilder = myAsmBuilder.DefineDynamicModule(&quot;MathFunctions&quot;);\n\n\tTypeBuilder myTypeBuilder = myModBuilder.DefineType(&quot;MyMathFunctions&quot;,\n\t\t\t\t\tTypeAttributes.Public);\n\n\tMethodBuilder myMthdBuilder = myTypeBuilder.DefineMethod(&quot;Adder&quot;,\n\t\t\t\t\tMethodAttributes.Public,\n\t\t\t\t\ttypeof(int),\n\t\t\t\t\tnew Type[] { typeof(int),\n\t\t\t\t\t\t     typeof(int) });\n\n\t// Create body via ILGenerator here ...\n\n\tType myNewType = myTypeBuilder.CreateType();\n\n\tModule myModule = myMthdBuilder.GetModule();\n\n \tType[] myModTypes = myModule.GetTypes();\n\tConsole.WriteLine(&quot;Module: {0}&quot;, myModule.Name);\n\tConsole.WriteLine(&quot;------- with path {0}&quot;, myModule.FullyQualifiedName);\n\tConsole.WriteLine(&quot;------- in assembly {0}&quot;, myModule.Assembly.FullName);\n\tforeach (Type myModType in myModTypes)\n        {\n\t\tConsole.WriteLine(&quot;------- has type {0}&quot;, myModType.FullName);\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.MethodBuilder.GetModule#1\">\n      Dim myModBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MathFunctions&quot;)\n      \n      Dim myTypeBuilder As TypeBuilder = myModBuilder.DefineType(&quot;MyMathFunctions&quot;, _\n\t\t\t\t\t\t\t\tTypeAttributes.Public)\n      \n      Dim myMthdBuilder As MethodBuilder = myTypeBuilder.DefineMethod(&quot;Adder&quot;, _\n\t\t\t\t\tMethodAttributes.Public, GetType(Integer), _\n\t\t\t\t\tNew Type() {GetType(Integer), GetType(Integer)})\n      \n      &#39; Create body via ILGenerator here ...\n\n      Dim myNewType As Type = myTypeBuilder.CreateType()\n      \n      Dim myModule As [Module] = myMthdBuilder.GetModule()\n      \n      Dim myModTypes As Type() = myModule.GetTypes()\n      Console.WriteLine(&quot;Module: {0}&quot;, myModule.Name)\n      Console.WriteLine(&quot;------- with path {0}&quot;, myModule.FullyQualifiedName)\n      Console.WriteLine(&quot;------- in assembly {0}&quot;, myModule.Assembly.FullName)\n      Dim myModType As Type\n      For Each myModType In  myModTypes\n         Console.WriteLine(&quot;------- has type {0}&quot;, myModType.FullName)\n      Next myModType\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.MethodBuilder.GetModule#1\">      ModuleBuilder^ myModBuilder = myAsmBuilder-&gt;DefineDynamicModule( &quot;MathFunctions&quot; );\n      TypeBuilder^ myTypeBuilder = myModBuilder-&gt;DefineType( &quot;MyMathFunctions&quot;, TypeAttributes::Public );\n      array&lt;Type^&gt;^temp0 = {int::typeid,int::typeid};\n      MethodBuilder^ myMthdBuilder = myTypeBuilder-&gt;DefineMethod( &quot;Adder&quot;, MethodAttributes::Public, int::typeid, temp0 );\n      \n      // Create body via ILGenerator here ...\n      Type^ myNewType = myTypeBuilder-&gt;CreateType();\n      Module^ myModule = myMthdBuilder-&gt;GetModule();\n      array&lt;Type^&gt;^myModTypes = myModule-&gt;GetTypes();\n      Console::WriteLine( &quot;Module: {0}&quot;, myModule-&gt;Name );\n      Console::WriteLine( &quot;------- with path {0}&quot;, myModule-&gt;FullyQualifiedName );\n      Console::WriteLine( &quot;------- in assembly {0}&quot;, myModule-&gt;Assembly-&gt;FullName );\n      System::Collections::IEnumerator^ myEnum = myModTypes-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Type^ myModType = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( &quot;------- has type {0}&quot;, myModType-&gt;FullName );\n      }\n   }\n\n};\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_GetParameters\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_GetParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetParameters()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the parameters of this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.ParameterInfo[] GetParameters ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> objects that represent the parameters of this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> has not been called on this constructor&#39;s type, in the .NET Framework versions 1.0 and 1.1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> has not been called on this constructor&#39;s type, in the .NET Framework version 2.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not supported until after the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_CreateType_\" data-linktype=\"relative-path\">CreateType</a> method has been called. In the .NET Framework versions 1.0 and 1.1, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown. In the .NET Framework version 2.0, <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The code sample illustrates the use of <code>GetParameters</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ConstructorBuilder_GetModule_4#4\">      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructorBuilder = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n      // Get a reference to the module that contains this constructor.\n      Module myModule = myConstructorBuilder.GetModule();\n      Console.WriteLine(&quot;Module Name : &quot; + myModule.Name);\n      // Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      MethodToken myMethodToken = myConstructorBuilder.GetToken();\n      Console.WriteLine(&quot;Constructor Token is : &quot; + myMethodToken.Token);\n      // Get the method implementation flags for this constructor.\n      MethodImplAttributes myMethodImplAttributes = myConstructorBuilder.GetMethodImplementationFlags();\n      Console.WriteLine(&quot;MethodImplAttributes : &quot;  + myMethodImplAttributes);\n      // Generate IL for the method, call its base class constructor and store the arguments\n      // in the private field.\n      ILGenerator myILGenerator3 = myConstructorBuilder.GetILGenerator();\n      myILGenerator3.Emit(OpCodes.Ldarg_0);\n      ConstructorInfo myConstructorInfo = typeof(Object).GetConstructor(new Type[0]);\n      myILGenerator3.Emit(OpCodes.Call, myConstructorInfo);\n      myILGenerator3.Emit(OpCodes.Ldarg_0);\n      myILGenerator3.Emit(OpCodes.Ldarg_1);\n      myILGenerator3.Emit(OpCodes.Stfld, myGreetingField);\n      myILGenerator3.Emit(OpCodes.Ret);\n      // Add a method to the type.\n      myMethodBuilder = myTypeBuilder.DefineMethod\n         (&quot;HelloWorld&quot;,MethodAttributes.Public,null,null);\n      // Generate IL for the method.\n      ILGenerator myILGenerator2 = myMethodBuilder.GetILGenerator();\n      myILGenerator2.EmitWriteLine(&quot;Hello World from global&quot;);\n      myILGenerator2.Emit(OpCodes.Ret);\n      myModuleBuilder.CreateGlobalFunctions();\n      myType1 = myTypeBuilder.CreateType();\n\n      // Get the parameters of this constructor.\n      ParameterInfo[] myParameterInfo = myConstructorBuilder.GetParameters();\n      for(int i =0 ; i &lt; myParameterInfo.Length; i++)\n      {\n         Console.WriteLine(&quot;Declaration type : &quot; + myParameterInfo[i].Member.DeclaringType);\n      }\n</code></pre><pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_GetModule_4#4\">      // Define a constructor of the dynamic class.\n      ConstructorBuilder^ myConstructorBuilder = myTypeBuilder-&gt;DefineConstructor(\n         MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n      // Get a reference to the module that contains this constructor.\n      Module^ myModule = myConstructorBuilder-&gt;GetModule();\n      Console::WriteLine( &quot;Module Name : {0}&quot;, myModule-&gt;Name );\n      // Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      MethodToken myMethodToken = myConstructorBuilder-&gt;GetToken();\n      Console::WriteLine( &quot;Constructor Token is : {0}&quot;, myMethodToken.Token );\n      // Get the method implementation flags for this constructor.\n      MethodImplAttributes myMethodImplAttributes = myConstructorBuilder-&gt;GetMethodImplementationFlags();\n      Console::WriteLine( &quot;MethodImplAttributes : {0}&quot;, myMethodImplAttributes );\n      // Generate IL for the method, call its base class constructor and store the arguments\n      // in the private field.\n      ILGenerator^ myILGenerator3 = myConstructorBuilder-&gt;GetILGenerator();\n      myILGenerator3-&gt;Emit( OpCodes::Ldarg_0 );\n      ConstructorInfo^ myConstructorInfo = Object::typeid-&gt;GetConstructor( gcnew array&lt;Type^&gt;(0) );\n      myILGenerator3-&gt;Emit( OpCodes::Call, myConstructorInfo );\n      myILGenerator3-&gt;Emit( OpCodes::Ldarg_0 );\n      myILGenerator3-&gt;Emit( OpCodes::Ldarg_1 );\n      myILGenerator3-&gt;Emit( OpCodes::Stfld, myGreetingField );\n      myILGenerator3-&gt;Emit( OpCodes::Ret );\n      // Add a method to the type.\n      myMethodBuilder = myTypeBuilder-&gt;DefineMethod(\n         &quot;HelloWorld&quot;, MethodAttributes::Public, nullptr, nullptr );\n      // Generate IL for the method.\n      ILGenerator^ myILGenerator2 = myMethodBuilder-&gt;GetILGenerator();\n      myILGenerator2-&gt;EmitWriteLine( &quot;Hello World from global&quot; );\n      myILGenerator2-&gt;Emit( OpCodes::Ret );\n      myModuleBuilder-&gt;CreateGlobalFunctions();\n      myType1 = myTypeBuilder-&gt;CreateType();\n\n      // Get the parameters of this constructor.\n      array&lt;ParameterInfo^&gt;^myParameterInfo = myConstructorBuilder-&gt;GetParameters();\n      for ( int i = 0; i &lt; myParameterInfo-&gt;Length; i++ )\n      {\n         Console::WriteLine( &quot;Declaration type : {0}&quot;, myParameterInfo[ i ]-&gt;Member-&gt;DeclaringType );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_GetModule_4#4\">      &#39; Define a constructor of the dynamic class.\n      Dim myConstructorBuilder As ConstructorBuilder = _ \n          myTypeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, _ \n                                          myConstructorArgs)\n      &#39; Get a reference to the module that contains this constructor.\n      Dim myModule As [Module] = myConstructorBuilder.GetModule()\n      Console.WriteLine(&quot;Module Name : &quot; + myModule.Name)\n      &#39; Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      Dim myMethodToken As MethodToken = myConstructorBuilder.GetToken()\n      Console.WriteLine(&quot;Constructor Token is : &quot; + myMethodToken.Token.ToString())\n      &#39; Get the method implementation flags for this constructor.\n      Dim myMethodImplAttributes As MethodImplAttributes = _\n          myConstructorBuilder.GetMethodImplementationFlags()\n      Console.WriteLine(&quot;MethodImplAttributes : &quot; + myMethodImplAttributes.ToString())\n      &#39; Generate IL for the method, call its base class constructor and store the arguments\n      &#39; in the private field.\n      Dim myILGenerator3 As ILGenerator = myConstructorBuilder.GetILGenerator()\n      myILGenerator3.Emit(OpCodes.Ldarg_0)\n      Dim myConstructorInfo As ConstructorInfo = GetType(Object).GetConstructor(New Type() {})\n      myILGenerator3.Emit(OpCodes.Call, myConstructorInfo)\n      myILGenerator3.Emit(OpCodes.Ldarg_0)\n      myILGenerator3.Emit(OpCodes.Ldarg_1)\n      myILGenerator3.Emit(OpCodes.Stfld, myGreetingField)\n      myILGenerator3.Emit(OpCodes.Ret)\n      &#39; Add a method to the type. \n      myMethodBuilder = _ \n           myTypeBuilder.DefineMethod(&quot;HelloWorld&quot;, MethodAttributes.Public, Nothing, Nothing)\n      &#39; Generate IL for the method.\n      Dim myILGenerator2 As ILGenerator = myMethodBuilder.GetILGenerator()\n      myILGenerator2.EmitWriteLine(&quot;Hello World from global&quot;)\n      myILGenerator2.Emit(OpCodes.Ret)\n      myModuleBuilder.CreateGlobalFunctions()\n      myType1 = myTypeBuilder.CreateType()\n\n      &#39; Get the parameters of this constructor.\n      Dim myParameterInfo As ParameterInfo() = myConstructorBuilder.GetParameters()\n      Dim i As Integer\n      For i = 0 To myParameterInfo.Length - 1\n         Console.WriteLine _ \n                 (&quot;Declaration type : &quot; + myParameterInfo(i).Member.DeclaringType.ToString())\n      Next i\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_GetToken\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_GetToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetToken()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a> that represents the token for this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.MethodToken GetToken ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a></div>\r\n                  </div>\r\n                  <p>Returns the <a class=\"xref\" href=\"system.reflection.emit.methodtoken\" data-linktype=\"relative-path\">MethodToken</a> of this constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This code sample illustrates the use of <code>GetToken</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"ConstructorBuilder_GetModule_4#2\">      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructorBuilder = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n      // Get a reference to the module that contains this constructor.\n      Module myModule = myConstructorBuilder.GetModule();\n      Console.WriteLine(&quot;Module Name : &quot; + myModule.Name);\n      // Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      MethodToken myMethodToken = myConstructorBuilder.GetToken();\n      Console.WriteLine(&quot;Constructor Token is : &quot; + myMethodToken.Token);\n      // Get the method implementation flags for this constructor.\n      MethodImplAttributes myMethodImplAttributes = myConstructorBuilder.GetMethodImplementationFlags();\n      Console.WriteLine(&quot;MethodImplAttributes : &quot;  + myMethodImplAttributes);\n</code></pre><pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_GetModule_4#2\">      // Define a constructor of the dynamic class.\n      ConstructorBuilder^ myConstructorBuilder = myTypeBuilder-&gt;DefineConstructor(\n         MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n      // Get a reference to the module that contains this constructor.\n      Module^ myModule = myConstructorBuilder-&gt;GetModule();\n      Console::WriteLine( &quot;Module Name : {0}&quot;, myModule-&gt;Name );\n      // Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      MethodToken myMethodToken = myConstructorBuilder-&gt;GetToken();\n      Console::WriteLine( &quot;Constructor Token is : {0}&quot;, myMethodToken.Token );\n      // Get the method implementation flags for this constructor.\n      MethodImplAttributes myMethodImplAttributes = myConstructorBuilder-&gt;GetMethodImplementationFlags();\n      Console::WriteLine( &quot;MethodImplAttributes : {0}&quot;, myMethodImplAttributes );\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_GetModule_4#2\">      &#39; Define a constructor of the dynamic class.\n      Dim myConstructorBuilder As ConstructorBuilder = _ \n          myTypeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, _ \n                                          myConstructorArgs)\n      &#39; Get a reference to the module that contains this constructor.\n      Dim myModule As [Module] = myConstructorBuilder.GetModule()\n      Console.WriteLine(&quot;Module Name : &quot; + myModule.Name)\n      &#39; Get the &#39;MethodToken&#39; that represents the token for this constructor.\n      Dim myMethodToken As MethodToken = myConstructorBuilder.GetToken()\n      Console.WriteLine(&quot;Constructor Token is : &quot; + myMethodToken.Token.ToString())\n      &#39; Get the method implementation flags for this constructor.\n      Dim myMethodImplAttributes As MethodImplAttributes = _\n          myConstructorBuilder.GetMethodImplementationFlags()\n      Console.WriteLine(&quot;MethodImplAttributes : &quot; + myMethodImplAttributes.ToString())\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_Invoke_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(BindingFlags,Binder,Object[],CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes the constructor dynamically reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object Invoke (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>, such as InvokeMethod, NonPublic, and so on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <code>MemberInfo</code> objects using reflection. If binder is <code>null</code>, the default binder is used. See <a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> used to govern the coercion of types. If this is null, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used. (For example, this is necessary to convert a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents 1000 to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value, since 1000 is represented differently by different cultures.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>Returns an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is the return value of the invoked constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported. You can retrieve the constructor using <span class=\"xref\">stem.Type.GetConstructor*</span> and call <span class=\"xref\">stem.Reflection.ConstructorInfo.Invoke*</span> on the returned <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the constructor has no parameters, the value of the <code>parameters</code> parameter should be <code>null</code>. Otherwise, the number, type, and order of elements in the <code>parameters</code> array should be identical to the number, type, and order of parameters for the constructor reflected by this instance.  </p>\n<p> For example, if the constructor reflected by this instance is declared as public class taking two strings, then the <code>parameters</code> parameter should be an array of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> with length 2.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_Invoke_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified <code>Binder</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that needs to be reinitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <code>BindingFlags</code> values that specifies the type of binding that is desired.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <code>Binder</code> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <code>binder</code> is <code>null</code>, then Binder.DefaultBinding is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (<code>Nothing</code> in Visual Basic).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> used to govern the coercion of types. If this is null, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the class associated with the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported. You can retrieve the constructor using <span class=\"xref\">stem.Type.GetConstructor*</span> and call <span class=\"xref\">stem.Reflection.ConstructorInfo.Invoke*</span> on the returned <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the constructor reflected by this instance.  </p>\n<p> Before calling the constructor, <code>Invoke</code> ensures that the caller has access permission, and that the parameters are of the correct number, order and type.  </p>\n<p> Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Checks if the specified custom attribute type is defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A custom attribute type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Controls inheritance of custom attributes from base classes. This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified custom attribute type is defined; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported. You can retrieve the constructor using <span class=\"xref\">stem.Type.GetConstructor*</span> and call <span class=\"xref\">stem.Reflection.MemberInfo.IsDefined*</span> on the returned <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See the metadata specification for details on how to format <code>binaryAttribute</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(CustomAttributeBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Set a custom attribute using a custom attribute builder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>customBuilder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of a helper class to define the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>customBuilder</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>SetCustomAttribute</code> of the context of a <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a>, passing a <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_SetCustomAttribute1#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute: public Attribute\n{\npublic:\n   String^ myString;\n   int myInteger;\n   MyAttribute( String^ myString, int myInteger )\n   {\n      this-&gt;myString = myString;\n      this-&gt;myInteger = myInteger;\n   }\n\n};\n\nstatic Type^ MyCreateCallee( AppDomain^ domain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n   // Define a dynamic assembly in the current application domain-&gt;\n   AssemblyBuilder^ myAssembly = domain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n\n   // Define a dynamic module in this assembly-&gt;\n   ModuleBuilder^ myModuleBuilder = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n\n   // Construct a &#39;TypeBuilder&#39; given the name and attributes.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n\n   // Define a constructor of the dynamic class.\n   array&lt;Type^&gt;^type1 = {String::typeid};\n   ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, type1 );\n   ILGenerator^ myILGenerator = myConstructor-&gt;GetILGenerator();\n   myILGenerator-&gt;Emit( OpCodes::Ldstr, &quot;Constructor is invoked&quot; );\n   myILGenerator-&gt;Emit( OpCodes::Ldarg_1 );\n   array&lt;Type^&gt;^type2 = {String::typeid};\n   MethodInfo^ myMethodInfo = Console::typeid-&gt;GetMethod( &quot;WriteLine&quot;, type2 );\n   myILGenerator-&gt;Emit( OpCodes::Call, myMethodInfo );\n   myILGenerator-&gt;Emit( OpCodes::Ret );\n   Type^ myType = MyAttribute::typeid;\n   array&lt;Type^&gt;^type3 = {String::typeid,int::typeid};\n   ConstructorInfo^ myConstructorInfo = myType-&gt;GetConstructor( type3 );\n   array&lt;Object^&gt;^obj1 = {&quot;Hello&quot;,2};\n   CustomAttributeBuilder^ attributeBuilder = gcnew CustomAttributeBuilder( myConstructorInfo,obj1 );\n   try\n   {\n      myConstructor-&gt;SetCustomAttribute( attributeBuilder );\n   }\n   catch ( ArgumentNullException^ ex ) \n   {\n      Console::WriteLine( &quot;The following exception has occured : {0}&quot;, ex-&gt;Message );\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;The following exception has occured : {0}&quot;, ex-&gt;Message );\n   }\n\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   Type^ myHelloworld = MyCreateCallee( Thread::GetDomain() );\n   array&lt;Type^&gt;^type1 = {String::typeid};\n   ConstructorInfo^ myConstructor = myHelloworld-&gt;GetConstructor( type1 );\n   array&lt;Object^&gt;^myAttributes1 = myConstructor-&gt;GetCustomAttributes( true );\n   Console::WriteLine( &quot;MyAttribute custom attribute contains  &quot; );\n   for ( int index = 0; index &lt; myAttributes1-&gt;Length; index++ )\n   {\n      if ( dynamic_cast&lt;MyAttribute^&gt;(myAttributes1[ index ]) )\n      {\n         Console::WriteLine( &quot;The value of myString is : {0}&quot;, (safe_cast&lt;MyAttribute^&gt;(myAttributes1[ index ]))-&gt;myString );\n         Console::WriteLine( &quot;The value of myInteger is : {0}&quot;, (safe_cast&lt;MyAttribute^&gt;(myAttributes1[ index ]))-&gt;myInteger );\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_SetCustomAttribute1#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n\n&lt;AttributeUsage(AttributeTargets.All, AllowMultiple := False)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n   Public myString As String\n   Public myInteger As Integer\n   \n   Public Sub New(myString As String, myInteger As Integer)\n      Me.myString = myString\n      Me.myInteger = myInteger\n   End Sub &#39;New\nEnd Class &#39;MyAttribute\n\nPublic Class MyConstructorBuilder\n   \n   Public Shared Sub Main()\n      Dim myHelloworld As Type = MyCreateCallee(Thread.GetDomain())\n      Dim myConstructor As ConstructorInfo = myHelloworld.GetConstructor(New Type() _ \n                                                                       {GetType(String)})\n      Dim myAttributes1 As Object() = myConstructor.GetCustomAttributes(True)\n      Console.WriteLine(&quot;MyAttribute custom attribute contains  &quot;)\n      Dim index As Integer\n      For index = 0 To myAttributes1.Length - 1\n         If TypeOf myAttributes1(index) Is MyAttribute Then\n            Console.WriteLine(&quot;The value of myString is : &quot; + CType(myAttributes1(index), _ \n                                                                       MyAttribute).myString)\n            Console.WriteLine(&quot;The value of myInteger is : &quot; + CType(myAttributes1(index), _ \n                                                            MyAttribute).myInteger.ToString())\n         End If\n      Next index\n   End Sub &#39;Main\n   \n   Private Shared Function MyCreateCallee(domain As AppDomain) As Type\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      &#39; Define a dynamic assembly in the current application domain.\n      Dim myAssembly As AssemblyBuilder = domain.DefineDynamicAssembly _ \n                                          (myAssemblyName, AssemblyBuilderAccess.Run)\n      &#39; Define a dynamic module in this assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n      &#39; Construct a &#39;TypeBuilder&#39; given the name and attributes.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType _ \n                                                       (&quot;HelloWorld&quot;, TypeAttributes.Public)\n      &#39; Define a constructor of the dynamic class.\n      Dim myConstructor As ConstructorBuilder = myTypeBuilder.DefineConstructor _ \n             (MethodAttributes.Public, CallingConventions.Standard, New Type() {GetType(String)})\n      Dim myILGenerator As ILGenerator = myConstructor.GetILGenerator()\n      myILGenerator.Emit(OpCodes.Ldstr, &quot;Constructor is invoked&quot;)\n      myILGenerator.Emit(OpCodes.Ldarg_1)\n      Dim myMethodInfo As MethodInfo = GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() _ \n                                                                           {GetType(String)})\n      myILGenerator.Emit(OpCodes.Call, myMethodInfo)\n      myILGenerator.Emit(OpCodes.Ret)\n      Dim myType As Type = GetType(MyAttribute)\n      Dim myConstructorInfo As ConstructorInfo = myType.GetConstructor(New Type(1) _ \n                                                           {GetType(String), GetType(Integer)})\n      Dim attributeBuilder As New CustomAttributeBuilder _ \n                                  (myConstructorInfo, New Object(1) {&quot;Hello&quot;, 2})\n      Try\n         myConstructor.SetCustomAttribute(attributeBuilder)\n      Catch ex As ArgumentNullException\n         Console.WriteLine(&quot;The following exception has occured : &quot; + ex.Message)\n      Catch ex As Exception\n         Console.WriteLine(&quot;The following exception has occured : &quot; + ex.Message)\n      End Try\n      Return myTypeBuilder.CreateType()\n   End Function &#39;MyCreateCallee\nEnd Class &#39;MyConstructorBuilder\n</code></pre><pre><code class=\"lang-cs\" name=\"ConstructorBuilder_SetCustomAttribute1#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\npublic class MyAttribute : Attribute\n{\n   public String myString;\n   public int myInteger;\n   public MyAttribute(String myString, int myInteger)\n   {\n      this.myString = myString;\n      this.myInteger = myInteger;\n   }\n}\n\npublic class MyConstructorBuilder\n{\n   public static void Main()\n   {\n      Type myHelloworld = MyCreateCallee(Thread.GetDomain());\n      ConstructorInfo myConstructor = myHelloworld.GetConstructor(new Type[]{typeof(String)});\n      object[] myAttributes1 = myConstructor.GetCustomAttributes(true);\n      Console.WriteLine(&quot;MyAttribute custom attribute contains  &quot;);\n      for(int index=0; index &lt; myAttributes1.Length; index++)\n      {\n         if(myAttributes1[index] is MyAttribute)\n         {\n            Console.WriteLine(&quot;The value of myString is : &quot; \n                                       + ((MyAttribute)myAttributes1[index]).myString);\n            Console.WriteLine(&quot;The value of myInteger is : &quot; \n                                       + ((MyAttribute)myAttributes1[index]).myInteger);\n         }\n      }\n   }\n\n   private static Type MyCreateCallee(AppDomain domain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n      // Define a dynamic assembly in the current application domain.\n      AssemblyBuilder myAssembly =\n                  domain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);\n      // Define a dynamic module in this assembly.\n      ModuleBuilder myModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n       // Construct a &#39;TypeBuilder&#39; given the name and attributes.\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;HelloWorld&quot;,\n         TypeAttributes.Public);\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n               MethodAttributes.Public, CallingConventions.Standard, new Type[]{typeof(String)});\n      ILGenerator myILGenerator = myConstructor.GetILGenerator();\n      myILGenerator.Emit(OpCodes.Ldstr, &quot;Constructor is invoked&quot;);\n      myILGenerator.Emit(OpCodes.Ldarg_1);\n      MethodInfo myMethodInfo =\n                     typeof(Console).GetMethod(&quot;WriteLine&quot;,new Type[]{typeof(string)});\n      myILGenerator.Emit(OpCodes.Call, myMethodInfo);\n      myILGenerator.Emit(OpCodes.Ret);\n      Type myType = typeof(MyAttribute);\n      ConstructorInfo myConstructorInfo = myType.GetConstructor(new Type[2]{typeof(String), typeof(int)});\n      CustomAttributeBuilder attributeBuilder =\n         new CustomAttributeBuilder(myConstructorInfo, new object[2]{&quot;Hello&quot;, 2});\n      try\n      {\n         myConstructor.SetCustomAttribute(attributeBuilder);\n      }\n      catch(ArgumentNullException ex)\n      {\n         Console.WriteLine(&quot;The following exception has occured : &quot;+ex.Message);\n      }\n      catch(Exception ex)\n      {\n         Console.WriteLine(&quot;The following exception has occured : &quot;+ex.Message);\n      }\n      return myTypeBuilder.CreateType();\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(ConstructorInfo,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Set a custom attribute using a specified custom attribute blob.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>con</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">System.Reflection.ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor for the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryAttribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte blob representing the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> or <code>binaryAttribute</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See the metadata specification in the ECMA Partition II documentation for details on how to format <code>binaryAttribute</code>. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>SetCustomAttribute</code> of the context of a <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a>, passing a byte blob.  </p>\n<pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_SetCustomAttribute2#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute: public Attribute\n{\npublic:\n   bool myBoolean;\n   MyAttribute( bool myBoolean )\n   {\n      this-&gt;myBoolean = myBoolean;\n   }\n};\n\nstatic Type^ MyCreateCallee( AppDomain^ domain )\n{\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n   \n   // Define a dynamic assembly in the current application domain.\n   AssemblyBuilder^ myAssembly = domain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n   \n   // Define a dynamic module in this assembly.\n   ModuleBuilder^ myModuleBuilder = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n   \n   // Construct a &#39;TypeBuilder&#39; given the name and attributes.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n   \n   // Define a constructor of the dynamic class.\n   array&lt;Type^&gt;^type1 = {String::typeid};\n   ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, type1 );\n   ILGenerator^ myILGenerator = myConstructor-&gt;GetILGenerator();\n   myILGenerator-&gt;Emit( OpCodes::Ldstr, &quot;Constructor is invoked&quot; );\n   myILGenerator-&gt;Emit( OpCodes::Ldarg_1 );\n   array&lt;Type^&gt;^type2 = {String::typeid};\n   MethodInfo^ myMethodInfo = Console::typeid-&gt;GetMethod( &quot;WriteLine&quot;, type2 );\n   myILGenerator-&gt;Emit( OpCodes::Call, myMethodInfo );\n   myILGenerator-&gt;Emit( OpCodes::Ret );\n   Type^ myType = MyAttribute::typeid;\n   array&lt;Type^&gt;^type3 = {bool::typeid};\n   ConstructorInfo^ myConstructorInfo = myType-&gt;GetConstructor( type3 );\n   try\n   {\n      array&lt;Byte&gt;^bytes = {01,00,01};\n      myConstructor-&gt;SetCustomAttribute( myConstructorInfo, bytes );\n   }\n   catch ( ArgumentNullException^ ex ) \n   {\n      Console::WriteLine( &quot;The following exception has occured : {0}&quot;, ex-&gt;Message );\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;The following exception has occured : {0}&quot;, ex-&gt;Message );\n   }\n\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   Type^ myHelloworld = MyCreateCallee( Thread::GetDomain() );\n   array&lt;Type^&gt;^type1 = {String::typeid};\n   ConstructorInfo^ myConstructor = myHelloworld-&gt;GetConstructor( type1 );\n   array&lt;Object^&gt;^myAttributes1 = myConstructor-&gt;GetCustomAttributes( true );\n   Console::WriteLine( &quot;MyAttribute custom attribute contains  &quot; );\n   for ( int index = 0; index &lt; myAttributes1-&gt;Length; index++ )\n   {\n      if ( dynamic_cast&lt;MyAttribute^&gt;(myAttributes1[ index ]) )\n      {\n         Console::WriteLine( &quot;myBoolean : {0}&quot;, safe_cast&lt;MyAttribute^&gt;(myAttributes1[ index ])-&gt;myBoolean );\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_SetCustomAttribute2#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n&lt;AttributeUsage(AttributeTargets.All, AllowMultiple := False)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n   Public myBoolean As Boolean\n\n   Public Sub New(myBoolean As Boolean)\n      Me.myBoolean = myBoolean\n   End Sub &#39;New\nEnd Class &#39;MyAttribute\n\nPublic Class MyConstructorBuilder\n\n   Public Shared Sub Main()\n      Dim myHelloworld As Type = MyCreateCallee(Thread.GetDomain())\n      Dim myConstructor As ConstructorInfo = myHelloworld.GetConstructor(New Type() _\n                                                                        {GetType(String)})\n      Dim myAttributes1 As Object() = myConstructor.GetCustomAttributes(True)\n      Console.WriteLine(&quot;MyAttribute custom attribute contains  &quot;)\n      Dim index As Integer\n      For index = 0 To myAttributes1.Length - 1\n         If TypeOf myAttributes1(index) Is MyAttribute Then\n            Console.WriteLine(&quot;myBoolean : &quot; + _\n                               CType(myAttributes1(index), MyAttribute).myBoolean.ToString())\n         End If\n      Next index\n   End Sub &#39;Main\n\n   Private Shared Function MyCreateCallee(domain As AppDomain) As Type\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      &#39; Define a dynamic assembly in the current application domain.\n      Dim myAssembly As AssemblyBuilder = domain.DefineDynamicAssembly _\n                                       (myAssemblyName, AssemblyBuilderAccess.Run)\n      &#39; Define a dynamic module in this assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n      &#39; Construct a &#39;TypeBuilder&#39; given the name and attributes.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType _\n                                                       (&quot;HelloWorld&quot;, TypeAttributes.Public)\n      &#39; Define a constructor of the dynamic class.\n      Dim myConstructor As ConstructorBuilder = myTypeBuilder.DefineConstructor _\n                (MethodAttributes.Public, CallingConventions.Standard, New Type() {GetType(String)})\n      Dim myILGenerator As ILGenerator = myConstructor.GetILGenerator()\n      myILGenerator.Emit(OpCodes.Ldstr, &quot;Constructor is invoked&quot;)\n      myILGenerator.Emit(OpCodes.Ldarg_1)\n      Dim myMethodInfo As MethodInfo = GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() _\n                                                                          {GetType(String)})\n      myILGenerator.Emit(OpCodes.Call, myMethodInfo)\n      myILGenerator.Emit(OpCodes.Ret)\n      Dim myType As Type = GetType(MyAttribute)\n      Dim myConstructorInfo As ConstructorInfo = myType.GetConstructor(New Type() {GetType(Boolean)})\n      Try\n         myConstructor.SetCustomAttribute(myConstructorInfo, New Byte() {1, 0, 1})\n      Catch ex As ArgumentNullException\n         Console.WriteLine(&quot;The following exception has occured : &quot; + ex.Message)\n      Catch ex As Exception\n         Console.WriteLine(&quot;The following exception has occured : &quot; + ex.Message)\n      End Try\n      Return myTypeBuilder.CreateType()\n   End Function &#39;MyCreateCallee\nEnd Class &#39;MyConstructorBuilder\n</code></pre><pre><code class=\"lang-cs\" name=\"ConstructorBuilder_SetCustomAttribute2#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\npublic class MyAttribute : Attribute\n{\n   public bool myBoolean;\n\n   public MyAttribute(bool myBoolean)\n   {\n      this.myBoolean = myBoolean;\n   }\n}\n\npublic class MyConstructorBuilder\n{\n   public static void Main()\n   {\n      Type myHelloworld = MyCreateCallee(Thread.GetDomain());\n      ConstructorInfo myConstructor = myHelloworld.GetConstructor(new Type[]{typeof(String)});\n      object[] myAttributes1 = myConstructor.GetCustomAttributes(true);\n      Console.WriteLine(&quot;MyAttribute custom attribute contains  &quot;);\n      for(int index=0; index &lt; myAttributes1.Length; index++)\n      {\n         if(myAttributes1[index] is MyAttribute)\n         {\n            Console.WriteLine(&quot;myBoolean : &quot; + ((MyAttribute)myAttributes1[index]).myBoolean);\n         }\n      }\n   }\n\n   private static Type MyCreateCallee(AppDomain domain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n      // Define a dynamic assembly in the current application domain.\n      AssemblyBuilder myAssembly =\n                  domain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);\n      // Define a dynamic module in this assembly.\n      ModuleBuilder myModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n      // Construct a &#39;TypeBuilder&#39; given the name and attributes.\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;HelloWorld&quot;,\n         TypeAttributes.Public);\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n               MethodAttributes.Public, CallingConventions.Standard, new Type[]{typeof(String)});\n      ILGenerator myILGenerator = myConstructor.GetILGenerator();\n      myILGenerator.Emit(OpCodes.Ldstr, &quot;Constructor is invoked&quot;);\n      myILGenerator.Emit(OpCodes.Ldarg_1);\n      MethodInfo myMethodInfo =\n                     typeof(Console).GetMethod(&quot;WriteLine&quot;,new Type[]{typeof(string)});\n      myILGenerator.Emit(OpCodes.Call, myMethodInfo);\n      myILGenerator.Emit(OpCodes.Ret);\n      Type myType = typeof(MyAttribute);\n      ConstructorInfo myConstructorInfo = myType.GetConstructor(new Type[]{typeof(bool)});\n      try\n      {\n         myConstructor.SetCustomAttribute(myConstructorInfo, new byte[]{01,00,01});\n      }\n      catch(ArgumentNullException ex)\n      {\n         Console.WriteLine(&quot;The following exception has occured : &quot;+ex.Message);\n      }\n      catch(Exception ex)\n      {\n         Console.WriteLine(&quot;The following exception has occured : &quot;+ex.Message);\n      }\n      return myTypeBuilder.CreateType();\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_SetImplementationFlags_System_Reflection_MethodImplAttributes_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_SetImplementationFlags_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetImplementationFlags(MethodImplAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the method implementation flags for this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodimplattributes\" data-linktype=\"relative-path\">MethodImplAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method implementation flags.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>SetImplementationFlags</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_SetImplementationFlags#1\">         MethodBuilder^ myMethodBuilder = nullptr;\n         AppDomain^ myCurrentDomain = AppDomain::CurrentDomain;\n\n         // Create assembly in current CurrentDomain.\n         AssemblyName^ myAssemblyName = gcnew AssemblyName;\n         myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n\n         // Create a dynamic assembly.\n         myAssemblyBuilder = myCurrentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n\n         // Create a dynamic module in the assembly.\n         myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot;, true );\n         FieldInfo^ myFieldInfo2 = myModuleBuilder-&gt;DefineUninitializedData( &quot;myField&quot;, 2, FieldAttributes::Public );\n\n         // Create a type in the module.\n         TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;TempClass&quot;, TypeAttributes::Public );\n         FieldBuilder^ myGreetingField = myTypeBuilder-&gt;DefineField( &quot;Greeting&quot;, String::typeid, FieldAttributes::Public );\n         array&lt;Type^&gt;^myConstructorArgs = {String::typeid};\n\n         // Define a constructor of the dynamic class.\n         ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n\n         // Set the method implementation flags for the constructor.\n         myConstructor-&gt;SetImplementationFlags( static_cast&lt;MethodImplAttributes&gt;(MethodImplAttributes::PreserveSig | MethodImplAttributes::Runtime) );\n\n         // Get the method implementation flags for the constructor.\n         MethodImplAttributes myMethodAttributes = myConstructor-&gt;GetMethodImplementationFlags();\n         Type^ myAttributeType = MethodImplAttributes::typeid;\n         int myAttribValue = (int)myMethodAttributes;\n         if (  !myAttributeType-&gt;IsEnum )\n         {\n            Console::WriteLine( &quot;This is not an Enum&quot; );\n         }\n\n         // Display the field info names of the retrieved method implementation flags.\n         array&lt;FieldInfo^&gt;^myFieldInfo = myAttributeType-&gt;GetFields( static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Static) );\n         Console::WriteLine( &quot;The Field info names of the MethodImplAttributes for the constructor are:&quot; );\n         for ( int i = 0; i &lt; myFieldInfo-&gt;Length; i++ )\n         {\n            int myFieldValue =  *safe_cast&lt;Int32^&gt;(myFieldInfo[ i ]-&gt;GetValue( nullptr ));\n            if ( (myFieldValue &amp; myAttribValue) == myFieldValue )\n            {\n               Console::WriteLine( &quot; {0}&quot;, myFieldInfo[ i ]-&gt;Name );\n            }\n         }\n</code></pre><pre><code class=\"lang-cs\" name=\"ConstructorBuilder_SetImplementationFlags#1\">         MethodBuilder myMethodBuilder = null;\n         AppDomain myCurrentDomain = AppDomain.CurrentDomain;\n         // Create assembly in current CurrentDomain.\n         AssemblyName myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;TempAssembly&quot;;\n         // Create a dynamic assembly.\n         myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly\n            (myAssemblyName, AssemblyBuilderAccess.Run);\n         // Create a dynamic module in the assembly.\n         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;, true);\n         FieldInfo myFieldInfo2 =\n            myModuleBuilder.DefineUninitializedData(&quot;myField&quot;, 2, FieldAttributes.Public);\n         // Create a type in the module.\n         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;TempClass&quot;,TypeAttributes.Public);\n         FieldBuilder myGreetingField = myTypeBuilder.DefineField(&quot;Greeting&quot;, \n            typeof(String), FieldAttributes.Public);\n         Type[] myConstructorArgs = { typeof(String) };\n         // Define a constructor of the dynamic class.\n         ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n            MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n         // Set the method implementation flags for the constructor.\n         myConstructor.SetImplementationFlags(MethodImplAttributes.PreserveSig | MethodImplAttributes.Runtime);\n         // Get the method implementation flags for the constructor.\n         MethodImplAttributes myMethodAttributes = myConstructor.GetMethodImplementationFlags();\n         Type myAttributeType = typeof(MethodImplAttributes);\n         int myAttribValue = (int) myMethodAttributes;\n         if(! myAttributeType.IsEnum)\n         {\n            Console.WriteLine(&quot;This is not an Enum&quot;);\n         }\n         // Display the field info names of the retrieved method implementation flags.\n         FieldInfo[] myFieldInfo = myAttributeType.GetFields(BindingFlags.Public | BindingFlags.Static);\n         Console.WriteLine(&quot;The Field info names of the MethodImplAttributes for the constructor are:&quot;);\n         for (int i = 0; i &lt; myFieldInfo.Length; i++)\n         {\n            int myFieldValue = (Int32)myFieldInfo[i].GetValue(null);\n            if ((myFieldValue &amp; myAttribValue) == myFieldValue)\n            {\n               Console.WriteLine(&quot;   &quot; + myFieldInfo[i].Name);\n            }\n         }\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_SetImplementationFlags#1\">         Dim myMethodBuilder As MethodBuilder = Nothing\n         Dim myCurrentDomain As AppDomain = AppDomain.CurrentDomain\n         &#39; Create assembly in current CurrentDomain.\n         Dim myAssemblyName As New AssemblyName()\n         myAssemblyName.Name = &quot;TempAssembly&quot;\n         &#39; Create a dynamic assembly.\n         myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly _\n                                               (myAssemblyName, AssemblyBuilderAccess.Run)\n         &#39; Create a dynamic module in the assembly.\n         myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;, True)\n         Dim myFieldInfo2 As FieldInfo = myModuleBuilder.DefineUninitializedData _\n                                               (&quot;myField&quot;, 2, FieldAttributes.Public)\n         &#39; Create a type in the module.\n         Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType _\n                                                     (&quot;TempClass&quot;, TypeAttributes.Public)\n         Dim myGreetingField As FieldBuilder = myTypeBuilder.DefineField _\n                                          (&quot;Greeting&quot;, GetType(String), FieldAttributes.Public)\n         Dim myConstructorArgs As Type() = {GetType(String)}\n         &#39; Define a constructor of the dynamic class.\n         Dim myConstructor As ConstructorBuilder = myTypeBuilder.DefineConstructor _\n                           (MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs)\n         &#39; Set the method implementation flags for the constructor.\n         myConstructor.SetImplementationFlags(MethodImplAttributes.PreserveSig Or _\n                                              MethodImplAttributes.Runtime)\n         &#39; Get the method implementation flags for the constructor.\n         Dim myMethodAttributes As MethodImplAttributes = myConstructor.GetMethodImplementationFlags()\n         Dim myAttributeType As Type = GetType(MethodImplAttributes)\n         Dim myAttribValue As Integer = CInt(myMethodAttributes)\n         If Not myAttributeType.IsEnum Then\n            Console.WriteLine(&quot;This is not an Enum&quot;)\n         End If\n         &#39; Display the field info names of the retrieved method implementation flags.\n         Dim myFieldInfo As FieldInfo() = myAttributeType.GetFields(BindingFlags.Public Or _\n                                                                    BindingFlags.Static)\n         Console.WriteLine(&quot;The Field info names of the MethodImplAttributes for the constructor are:&quot;)\n         Dim i As Integer\n         For i = 0 To myFieldInfo.Length - 1\n            Dim myFieldValue As Integer = CType(myFieldInfo(i).GetValue(Nothing), Int32)\n            If(myFieldValue And myAttribValue) = myFieldValue Then\n               Console.WriteLine(&quot;   &quot; + myFieldInfo(i).Name)\n            End If\n         Next i\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_SetMethodBody_System_Byte___System_Int32_System_Byte___System_Collections_Generic_IEnumerable_System_Reflection_Emit_ExceptionHandler__System_Collections_Generic_IEnumerable_System_Int32__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_SetMethodBody_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetMethodBody(Byte[],Int32,Byte[],IEnumerable&lt;ExceptionHandler&gt;,IEnumerable&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates the body of the constructor by using a specified byte array of Microsoft intermediate language (MSIL) instructions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetMethodBody (byte[] il, int maxStack, byte[] localSignature, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.ExceptionHandler&gt; exceptionHandlers, System.Collections.Generic.IEnumerable&lt;int&gt; tokenFixups);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>il</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains valid MSIL instructions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxStack</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum stack evaluation depth.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localSignature</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of bytes that contain the serialized local variable structure. Specify <code>null</code> if the constructor has no local variables.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>exceptionHandlers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.emit.exceptionhandler\" data-linktype=\"relative-path\">ExceptionHandler</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection that contains the exception handlers for the constructor. Specify <code>null</code> if the constructor has no exception handlers.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tokenFixups</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A collection of values that represent offsets in <code>il</code>, each of which specifies the beginning of a token that may be modified. Specify <code>null</code> if the constructor has no tokens that have to be modified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>il</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>maxStack</code> is negative.  </p>\n<p> -or-  </p>\n<p> One of <code>exceptionHandlers</code> specifies an offset outside of <code>il</code>.  </p>\n<p> -or-  </p>\n<p> One of <code>tokenFixups</code> specifies an offset that is outside the <code>il</code> array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type was previously created using the <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span> method.  </p>\n<p> -or-  </p>\n<p> This method was called previously on this <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_SetSymCustomAttribute_System_String_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_SetSymCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetSymCustomAttribute(String,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets this constructor&#39;s custom attribute associated with symbolic information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetSymCustomAttribute (string name, byte[] data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.  </p>\n<p> -or-  </p>\n<p> The module does not have a symbol writer defined. For example, the module is not a debug module.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>SetSymCustomAttributes</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"ConstructorBuilder_SetSymCustomAttribute#1\">      MethodBuilder^ myMethodBuilder = nullptr;\n      AppDomain^ myCurrentDomain = AppDomain::CurrentDomain;\n      // Create assembly in current CurrentDomain.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly.\n      myAssemblyBuilder = myCurrentDomain-&gt;DefineDynamicAssembly(\n         myAssemblyName, AssemblyBuilderAccess::Run );\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;TempModule&quot;, true );\n      FieldInfo^ myFieldInfo =\n         myModuleBuilder-&gt;DefineUninitializedData( &quot;myField&quot;, 2, FieldAttributes::Public );\n      // Create a type in the module.\n      TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;TempClass&quot;, TypeAttributes::Public );\n      FieldBuilder^ myGreetingField = myTypeBuilder-&gt;DefineField( &quot;Greeting&quot;,\n         String::typeid, FieldAttributes::Public );\n      array&lt;Type^&gt;^ myConstructorArgs = {String::typeid};\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, myConstructorArgs );\n      // Display the name of the constructor.\n      Console::WriteLine( &quot;The constructor name is  : {0}&quot;, myConstructor-&gt;Name );\n      array&lt;Byte&gt;^ temp0 = {01,00,00};\n      myConstructor-&gt;SetSymCustomAttribute( &quot;MySimAttribute&quot;, temp0 );\n</code></pre><pre><code class=\"lang-cs\" name=\"ConstructorBuilder_SetSymCustomAttribute#1\">      MethodBuilder myMethodBuilder = null;\n      AppDomain myCurrentDomain = AppDomain.CurrentDomain;\n      // Create assembly in current CurrentDomain.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;TempAssembly&quot;;\n      // Create a dynamic assembly.\n      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly\n               (myAssemblyName, AssemblyBuilderAccess.Run);\n      // Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;,true);\n      FieldInfo myFieldInfo =\n         myModuleBuilder.DefineUninitializedData(&quot;myField&quot;, 2, FieldAttributes.Public);\n      // Create a type in the module.\n      TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;TempClass&quot;,TypeAttributes.Public);\n      FieldBuilder myGreetingField = myTypeBuilder.DefineField(&quot;Greeting&quot;, \n                                          typeof(String), FieldAttributes.Public);\n      Type[] myConstructorArgs = { typeof(String) };\n      // Define a constructor of the dynamic class.\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n      MethodAttributes.Public, CallingConventions.Standard, myConstructorArgs);\n      // Display the name of the constructor.\n      Console.WriteLine(&quot;The constructor name is  : &quot;+ myConstructor.Name);\n      myConstructor.SetSymCustomAttribute(&quot;MySimAttribute&quot;, new byte[]{01,00,00});\n</code></pre><pre><code class=\"lang-vb\" name=\"ConstructorBuilder_SetSymCustomAttribute#1\">      Dim myMethodBuilder As MethodBuilder = Nothing\n      Dim myCurrentDomain As AppDomain = AppDomain.CurrentDomain\n      &#39; Create assembly in current CurrentDomain.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;TempAssembly&quot;\n      &#39; Create a dynamic assembly.\n      myAssemblyBuilder = myCurrentDomain.DefineDynamicAssembly(myAssemblyName, _\n                 AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module in the assembly.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;TempModule&quot;, True)\n      Dim myFieldInfo As FieldInfo = myModuleBuilder.DefineUninitializedData(&quot;myField&quot;, 2, _\n                 FieldAttributes.Public)\n      &#39; Create a type in the module.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;TempClass&quot;, TypeAttributes.Public)\n      Dim myGreetingField As FieldBuilder = myTypeBuilder.DefineField(&quot;Greeting&quot;, GetType(String), _\n                 FieldAttributes.Public)\n      Dim myConstructorArgs() As Type = { GetType(String) }\n      &#39; Define a constructor of the dynamic class.\n      Dim myConstructor As ConstructorBuilder = _\n                myTypeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, _\n                 myConstructorArgs)\n      &#39; Display the name of the constructor.\n      Console.WriteLine(&quot;The constructor name is  : &quot; + myConstructor.Name)\n      myConstructor.SetSymCustomAttribute(&quot;MySimAttribute&quot;, New Byte() {01, 00,00})\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_ToString\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns this <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> instance as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ConstructorBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ConstructorBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ConstructorBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ConstructorBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ConstructorBuilder.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ConstructorBuilder.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_ConstructorBuilder_System_Runtime_InteropServices__ConstructorBuilder_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_ConstructorBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _ConstructorBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.ConstructorBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.ConstructorBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.CallingConvention\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.DeclaringType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.DefineParameter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.GetILGenerator\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.GetModule\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.GetParameters\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.GetToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.InitLocals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.MethodHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.Module\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.ReflectedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.ReturnType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.SetMethodBody\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.Signature\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder._ConstructorBuilder.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder._ConstructorBuilder.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder._ConstructorBuilder.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder._ConstructorBuilder.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.ConstructorBuilder.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"717eadf5-946a-98f3-40ac-ee5feca6ec22\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines and represents a constructor of a dynamic class.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.ConstructorBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.ConstructorBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.ConstructorBuilder.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.ConstructorBuilder","System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity","System.Reflection.Emit.ConstructorBuilder.Attributes","System.Reflection.Emit.ConstructorBuilder.CallingConvention","System.Reflection.Emit.ConstructorBuilder.DeclaringType","System.Reflection.Emit.ConstructorBuilder.DefineParameter","System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes","System.Reflection.Emit.ConstructorBuilder.GetILGenerator","System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags","System.Reflection.Emit.ConstructorBuilder.GetModule","System.Reflection.Emit.ConstructorBuilder.GetParameters","System.Reflection.Emit.ConstructorBuilder.GetToken","System.Reflection.Emit.ConstructorBuilder.InitLocals","System.Reflection.Emit.ConstructorBuilder.Invoke","System.Reflection.Emit.ConstructorBuilder.IsDefined","System.Reflection.Emit.ConstructorBuilder.MethodHandle","System.Reflection.Emit.ConstructorBuilder.Module","System.Reflection.Emit.ConstructorBuilder.Name","System.Reflection.Emit.ConstructorBuilder.ReflectedType","System.Reflection.Emit.ConstructorBuilder.ReturnType","System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute","System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags","System.Reflection.Emit.ConstructorBuilder.SetMethodBody","System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute","System.Reflection.Emit.ConstructorBuilder.Signature","System.Reflection.Emit.ConstructorBuilder._ConstructorBuilder.GetIDsOfNames","System.Reflection.Emit.ConstructorBuilder._ConstructorBuilder.GetTypeInfo","System.Reflection.Emit.ConstructorBuilder._ConstructorBuilder.GetTypeInfoCount","System.Reflection.Emit.ConstructorBuilder._ConstructorBuilder.Invoke","System.Reflection.Emit.ConstructorBuilder.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.ConstructorBuilder","System::Reflection::Emit::ConstructorBuilder","System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity","System::Reflection::Emit::ConstructorBuilder::AddDeclarativeSecurity","System.Reflection.Emit.ConstructorBuilder.Attributes","System::Reflection::Emit::ConstructorBuilder::Attributes","System.Reflection.Emit.ConstructorBuilder.CallingConvention","System::Reflection::Emit::ConstructorBuilder::CallingConvention","System.Reflection.Emit.ConstructorBuilder.DeclaringType","System::Reflection::Emit::ConstructorBuilder::DeclaringType","System.Reflection.Emit.ConstructorBuilder.DefineParameter","System::Reflection::Emit::ConstructorBuilder::DefineParameter","System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes","System::Reflection::Emit::ConstructorBuilder::GetCustomAttributes","System.Reflection.Emit.ConstructorBuilder.GetILGenerator","System::Reflection::Emit::ConstructorBuilder::GetILGenerator","System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags","System::Reflection::Emit::ConstructorBuilder::GetMethodImplementationFlags","System.Reflection.Emit.ConstructorBuilder.GetModule","System::Reflection::Emit::ConstructorBuilder::GetModule","System.Reflection.Emit.ConstructorBuilder.GetParameters","System::Reflection::Emit::ConstructorBuilder::GetParameters","System.Reflection.Emit.ConstructorBuilder.GetToken","System::Reflection::Emit::ConstructorBuilder::GetToken","System.Reflection.Emit.ConstructorBuilder.InitLocals","System::Reflection::Emit::ConstructorBuilder::InitLocals","System.Reflection.Emit.ConstructorBuilder.Invoke","System::Reflection::Emit::ConstructorBuilder::Invoke","System.Reflection.Emit.ConstructorBuilder.IsDefined","System::Reflection::Emit::ConstructorBuilder::IsDefined","System.Reflection.Emit.ConstructorBuilder.MethodHandle","System::Reflection::Emit::ConstructorBuilder::MethodHandle","System.Reflection.Emit.ConstructorBuilder.Module","System::Reflection::Emit::ConstructorBuilder::Module","System.Reflection.Emit.ConstructorBuilder.Name","System::Reflection::Emit::ConstructorBuilder::Name","System.Reflection.Emit.ConstructorBuilder.ReflectedType","System::Reflection::Emit::ConstructorBuilder::ReflectedType","System.Reflection.Emit.ConstructorBuilder.ReturnType","System::Reflection::Emit::ConstructorBuilder::ReturnType","System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute","System::Reflection::Emit::ConstructorBuilder::SetCustomAttribute","System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags","System::Reflection::Emit::ConstructorBuilder::SetImplementationFlags","System.Reflection.Emit.ConstructorBuilder.SetMethodBody","System::Reflection::Emit::ConstructorBuilder::SetMethodBody","System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute","System::Reflection::Emit::ConstructorBuilder::SetSymCustomAttribute","System.Reflection.Emit.ConstructorBuilder.Signature","System::Reflection::Emit::ConstructorBuilder::Signature","System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames","System::Reflection::Emit::ConstructorBuilder::System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames","System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo","System::Reflection::Emit::ConstructorBuilder::System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo","System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount","System::Reflection::Emit::ConstructorBuilder::System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount","System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke","System::Reflection::Emit::ConstructorBuilder::System#Runtime#InteropServices#_ConstructorBuilder#Invoke","System.Reflection.Emit.ConstructorBuilder.ToString","System::Reflection::Emit::ConstructorBuilder::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"717eadf5-946a-98f3-40ac-ee5feca6ec22","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/ConstructorBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConstructorBuilder class | Microsoft Docs","_op_ogTitle":"ConstructorBuilder class","description":"Defines and represents a constructor of a dynamic class.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.ConstructorBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.constructorbuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.constructorbuilder","fileRelativePath":"System.Reflection.Emit.ConstructorBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}