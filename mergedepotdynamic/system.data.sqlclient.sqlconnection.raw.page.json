{"content":"    \r\n    <h1 id=\"System_Data_SqlClient_SqlConnection\">\r\n      <span class=\"lang-csharp\">SqlConnection</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an open connection to a SQL Server database. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;InfoMessage&quot;)]\npublic sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbconnection\" data-linktype=\"relative-path\">System.Data.Common.DbConnection</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SqlConnection</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbconnection#System_Data_Common_DbConnection_OnStateChange_System_Data_StateChangeEventArgs_\" data-linktype=\"relative-path\">OnStateChange(StateChangeEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbconnection#System_Data_Common_DbConnection_OpenAsync\" data-linktype=\"relative-path\">OpenAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbconnection#System_Data_Common_DbConnection_StateChange\" data-linktype=\"relative-path\">StateChange</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbconnection#System_Data_Common_DbConnection_System_Data_IDbConnection_BeginTransaction\" data-linktype=\"relative-path\">IDbConnection.BeginTransaction()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbconnection#System_Data_Common_DbConnection_System_Data_IDbConnection_BeginTransaction_System_Data_IsolationLevel_\" data-linktype=\"relative-path\">IDbConnection.BeginTransaction(IsolationLevel)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbconnection#System_Data_Common_DbConnection_System_Data_IDbConnection_CreateCommand\" data-linktype=\"relative-path\">IDbConnection.CreateCommand()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A SqlConnection object represents a unique session to a SQL Server data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with <a class=\"xref\" href=\"system.data.sqlclient.sqldataadapter\" data-linktype=\"relative-path\">SqlDataAdapter</a> and <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> to increase performance when connecting to a Microsoft SQL Server database. For all third-party SQL Server products, and other OLE DB-supported data sources, use <a class=\"xref\" href=\"system.data.oledb.oledbconnection\" data-linktype=\"relative-path\">OleDbConnection</a>.  </p>\n<p> When you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor.  </p>\n<p> See <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a> for a list of the keywords in a connection string.  </p>\n<p> If the SqlConnection goes out of scope, it won&#39;t be closed. Therefore, you must explicitly close the connection by calling <code>Close</code> or <code>Dispose</code>. <code>Close</code> and <code>Dispose</code> are functionally equivalent. If the connection pooling value <code>Pooling</code> is set to <code>true</code> or <code>yes</code>, the underlying connection is returned back to the connection pool. On the other hand, if <code>Pooling</code> is set to <code>false</code> or <code>no</code>, the underlying connection to the server is actually closed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see <a href=\"../Topic/SQL%20Server%20Connection%20Pooling%20(ADO.NET).md\" data-linktype=\"relative-path\">SQL Server Connection Pooling (ADO.NET)</a>.  </p>\n</div>\n<p> To ensure that connections are always closed, open the connection inside of a <code>using</code> block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.  </p>\n<pre><code class=\"lang-vb#\">Using connection As New SqlConnection(connectionString)  \n    connection.Open()  \n    &#39; Do work here; connection closed on following line.  \nEnd Using  \n</code></pre><pre><code class=\"lang-c#\">using (SqlConnection connection = new SqlConnection(connectionString))  \n    {  \n        connection.Open();  \n        // Do work here; connection closed on following line.  \n    }  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> To deploy high-performance applications, you must use connection pooling. When you use the .NET Framework Data Provider for SQL Server, you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings. For more information, see <a href=\"../Topic/SQL%20Server%20Connection%20Pooling%20(ADO.NET).md\" data-linktype=\"relative-path\">SQL Server Connection Pooling (ADO.NET)</a>.  </p>\n</div>\n<p> If a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> is generated by the method executing a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a>, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue.  </p>\n<p> An application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the <a class=\"xref\" href=\"system.data.sqlclient.sqlclientpermission\" data-linktype=\"relative-path\">SqlClientPermission</a> object. Users can verify that their code has sufficient permissions by using the <a class=\"xref\" href=\"system.data.sqlclient.sqlclientpermissionattribute\" data-linktype=\"relative-path\">SqlClientPermissionAttribute</a> object. Users and administrators can also use the <a href=\"../Topic/Caspol.exe%20(Code%20Access%20Security%20Policy%20Tool).md\" data-linktype=\"relative-path\">Caspol.exe (Code Access Security Policy Tool)</a> to modify security policy at the machine, user, and enterprise levels. For more information, see <a href=\"../Topic/Security%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security</a>. For an example demonstrating how to use security demands, see <a href=\"../Topic/Code%20Access%20Security%20and%20ADO.NET.md\" data-linktype=\"relative-path\">Code Access Security and ADO.NET</a>.  </p>\n<p> For more information about handling warning and informational messages from the server, see <a href=\"../Topic/Connection%20Events.md\" data-linktype=\"relative-path\">Connection Events</a>. SQL Server engine errors and error messages are documented in SQL Server Books Online.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You can force TCP instead of shared memory. You can do that by prefixing tcp: to the server name in the connection string or you can use localhost.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection__ctor\" data-linktype=\"self-bookmark\">SqlConnection()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection__ctor_System_String_\" data-linktype=\"self-bookmark\">SqlConnection(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> class when given a string that contains the connection string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection__ctor_System_String_System_Data_SqlClient_SqlCredential_\" data-linktype=\"self-bookmark\">SqlConnection(String,SqlCredential)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> class given a connection string, that does not use <code>Integrated Security = true</code> and a <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object that contains the user ID and password.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_AccessToken\" data-linktype=\"self-bookmark\">AccessToken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the access token for the connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ClientConnectionId\" data-linktype=\"self-bookmark\">ClientConnectionId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ColumnEncryptionKeyCacheTtl\" data-linktype=\"self-bookmark\">ColumnEncryptionKeyCacheTtl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the <a href=\"https://msdn.microsoft.com/library/mt163865.aspx\" data-linktype=\"external\">Always Encrypted</a> feature. The default value is 2 hours. 0 means no caching at all.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled\" data-linktype=\"self-bookmark\">ColumnEncryptionQueryMetadataCacheEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against <a href=\"https://msdn.microsoft.com/library/mt163865.aspx\" data-linktype=\"external\">Always Encrypted</a> enabled databases. The default value is true.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ColumnEncryptionTrustedMasterKeyPaths\" data-linktype=\"self-bookmark\">ColumnEncryptionTrustedMasterKeyPaths</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allows you to set a list of trusted key paths for a database server. If while processing an application query the driver receives a key path that is not on the list, the query will fail. This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ConnectionString\" data-linktype=\"self-bookmark\">ConnectionString</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the string used to open a SQL Server database.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ConnectionTimeout\" data-linktype=\"self-bookmark\">ConnectionTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_Credential\" data-linktype=\"self-bookmark\">Credential</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object for this connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_Database\" data-linktype=\"self-bookmark\">Database</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the current database or the database to be used after a connection is opened.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_DataSource\" data-linktype=\"self-bookmark\">DataSource</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the instance of SQL Server to which to connect.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_DbProviderFactory\" data-linktype=\"self-bookmark\">DbProviderFactory</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_FireInfoMessageEventOnUserErrors\" data-linktype=\"self-bookmark\">FireInfoMessageEventOnUserErrors</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the FireInfoMessageEventOnUserErrors property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_PacketSize\" data-linktype=\"self-bookmark\">PacketSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size (in bytes) of network packets used to communicate with an instance of SQL Server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ServerVersion\" data-linktype=\"self-bookmark\">ServerVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string that contains the version of the instance of SQL Server to which the client is connected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_State\" data-linktype=\"self-bookmark\">State</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the state of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> during the most recent network operation performed on the connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_StatisticsEnabled\" data-linktype=\"self-bookmark\">StatisticsEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When set to <code>true</code>, enables statistics gathering for the current connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_WorkstationId\" data-linktype=\"self-bookmark\">WorkstationId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string that identifies the database client.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_BeginDbTransaction_System_Data_IsolationLevel_\" data-linktype=\"self-bookmark\">BeginDbTransaction(IsolationLevel)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_BeginTransaction\" data-linktype=\"self-bookmark\">BeginTransaction()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a database transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_BeginTransaction_System_Data_IsolationLevel_\" data-linktype=\"self-bookmark\">BeginTransaction(IsolationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a database transaction with the specified isolation level.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_BeginTransaction_System_String_\" data-linktype=\"self-bookmark\">BeginTransaction(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a database transaction with the specified transaction name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_BeginTransaction_System_Data_IsolationLevel_System_String_\" data-linktype=\"self-bookmark\">BeginTransaction(IsolationLevel,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts a database transaction with the specified isolation level and transaction name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ChangeDatabase_System_String_\" data-linktype=\"self-bookmark\">ChangeDatabase(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the current database for an open <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ChangePassword_System_String_System_String_\" data-linktype=\"self-bookmark\">ChangePassword(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the SQL Server password for the user indicated in the connection string to the supplied new password.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ChangePassword_System_String_System_Data_SqlClient_SqlCredential_System_Security_SecureString_\" data-linktype=\"self-bookmark\">ChangePassword(String,SqlCredential,SecureString)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the SQL Server password for the user indicated in the <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ClearAllPools\" data-linktype=\"self-bookmark\">ClearAllPools()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Empties the connection pool.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ClearPool_System_Data_SqlClient_SqlConnection_\" data-linktype=\"self-bookmark\">ClearPool(SqlConnection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Empties the connection pool associated with the specified connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the connection to the database. This is the preferred method of closing any open connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_CreateCommand\" data-linktype=\"self-bookmark\">CreateCommand()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object associated with the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_CreateDbCommand\" data-linktype=\"self-bookmark\">CreateDbCommand()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_EnlistDistributedTransaction_System_EnterpriseServices_ITransaction_\" data-linktype=\"self-bookmark\">EnlistDistributedTransaction(ITransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enlists in the specified transaction as a distributed transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_EnlistTransaction_System_Transactions_Transaction_\" data-linktype=\"self-bookmark\">EnlistTransaction(Transaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enlists in the specified transaction as a distributed transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_GetSchema\" data-linktype=\"self-bookmark\">GetSchema()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns schema information for the data source of this <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. For more information about scheme, see <a href=\"http://msdn.microsoft.com/library/ms254969.aspx\" data-linktype=\"external\">SQL Server Schema Collections</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_GetSchema_System_String_\" data-linktype=\"self-bookmark\">GetSchema(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns schema information for the data source of this <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> using the specified string for the schema name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_GetSchema_System_String_System_String___\" data-linktype=\"self-bookmark\">GetSchema(String,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns schema information for the data source of this <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> using the specified string for the schema name and the specified string array for the restriction values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_Open\" data-linktype=\"self-bookmark\">Open()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a database connection with the property settings specified by the <span class=\"xref\">stem.Data.SqlClient.SqlConnection.ConnectionString*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_OpenAsync_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">OpenAsync(CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlConnection.Open*</span>, which opens a database connection with the property settings specified by the <span class=\"xref\">stem.Data.SqlClient.SqlConnection.ConnectionString*</span>. The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses.  Exceptions will be propagated via the returned Task. If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception. The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_RegisterColumnEncryptionKeyStoreProviders_System_Collections_Generic_IDictionary_System_String_System_Data_SqlClient_SqlColumnEncryptionKeyStoreProvider__\" data-linktype=\"self-bookmark\">RegisterColumnEncryptionKeyStoreProviders(IDictionary&lt;String,SqlColumnEncryptionKeyStoreProvider&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Registers the column encryption key store providers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_ResetStatistics\" data-linktype=\"self-bookmark\">ResetStatistics()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>If statistics gathering is enabled, all values are reset to zero.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_RetrieveStatistics\" data-linktype=\"self-bookmark\">RetrieveStatistics()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a name value pair collection of statistics at the point in time the method is called.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_InfoMessage\" data-linktype=\"self-bookmark\">InfoMessage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when SQL Server returns a warning or informational message.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlConnection_System_ICloneable_Clone\" data-linktype=\"self-bookmark\">ICloneable.Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new object that is a copy of the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection__ctor\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlConnection()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlConnection ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a new instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a> property.  </p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a></td>\n<td>empty string (&quot;&quot;)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionTimeout_\" data-linktype=\"relative-path\">ConnectionTimeout</a></td>\n<td>15</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Database_\" data-linktype=\"relative-path\">Database</a></td>\n<td>empty string (&quot;&quot;)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_DataSource_\" data-linktype=\"relative-path\">DataSource</a></td>\n<td>empty string (&quot;&quot;)</td>\n</tr>\n</tbody>\n</table>\n<p> You can change the value for these properties only by using the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a> property. The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnectionstringbuilder\" data-linktype=\"relative-path\">SqlConnectionStringBuilder</a> class provides functionality for creating and managing the contents of connection strings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates and opens a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.SqlConnection Example#1\">    Private Sub OpenSqlConnection()\n        Dim connectionString As String = GetConnectionString()\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State)\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,  \n        &#39; you can retrieve it from a configuration file, using the\n        &#39; System.Configuration.ConfigurationSettings.AppSettings property\n        Return &quot;Data Source=(local);Database=AdventureWorks;&quot; _\n          &amp; &quot;Integrated Security=SSPI;&quot;\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.SqlConnection Example#1\">    private static void OpenSqlConnection()\n    {\n        string connectionString = GetConnectionString();\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State);\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file, using the \n        // System.Configuration.ConfigurationSettings.AppSettings property \n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI;&quot;;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlConnection(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> class when given a string that contains the connection string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlConnection (string connectionString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connectionString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The connection used to open the SQL Server database.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a new instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a> property.  </p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a></td>\n<td><code>connectionString</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionTimeout_\" data-linktype=\"relative-path\">ConnectionTimeout</a></td>\n<td>15</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Database_\" data-linktype=\"relative-path\">Database</a></td>\n<td>empty string (&quot;&quot;)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_DataSource_\" data-linktype=\"relative-path\">DataSource</a></td>\n<td>empty string (&quot;&quot;)</td>\n</tr>\n</tbody>\n</table>\n<p> You can change the value for these properties only by using the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a> property. The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> class provides functionality for creating and managing the contents of connection strings.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates and opens a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.SqlConnection1 Example#1\">    Private Sub OpenSqlConnection()\n        Dim connectionString As String = GetConnectionString()\n\n        Using connection As New SqlConnection(connectionString)\n\n            connection.Open()\n\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State)\n            Console.WriteLine(&quot;ConnectionString: {0}&quot;, _\n                connection.ConnectionString)\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,  \n        &#39; you can retrieve it from a configuration file, using the\n        &#39; System.Configuration.ConfigurationSettings.AppSettings property\n        Return &quot;Data Source=(local);Database=AdventureWorks;&quot; _\n          &amp; &quot;Integrated Security=SSPI;&quot;\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.SqlConnection1 Example#1\">    private static void OpenSqlConnection()\n    {\n        string connectionString = GetConnectionString();\n\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State);\n            Console.WriteLine(&quot;ConnectionString: {0}&quot;,\n                connection.ConnectionString);\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file, using the \n        // System.Configuration.ConfigurationSettings.AppSettings property \n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI;&quot;;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection__ctor_System_String_System_Data_SqlClient_SqlCredential_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlConnection(String,SqlCredential)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> class given a connection string, that does not use <code>Integrated Security = true</code> and a <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object that contains the user ID and password.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connectionString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A connection string that does not use any of the following connection string keywords: <code>Integrated Security = true</code>, <code>UserId</code>, or <code>Password</code>; or that does not use <code>ContextConnection = true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object. If <code>credential</code> is null, SqlConnection is functionally equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlConnection.#ctor*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_AccessToken\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_AccessToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessToken</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the access token for the connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string AccessToken { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The access token for the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ClientConnectionId\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ClientConnectionId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientConnectionId</div>        \r\n          </div>\r\n    \r\n            <p>The connection ID of the most recent connection attempt, regardless of whether the attempt succeeded or failed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Guid ClientConnectionId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>The connection ID of the most recent connection attempt.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ClientConnectionId works regardless of which version of the server you connect to, but extended events logs and entry on connectivity ring buffer errors will not be present in SQL Server 2008 R2 and earlier.  </p>\n<p> You can locate the connection ID in the extended events log to see if the failure was on the server if the extended event for logging connection ID is enabled. You can also locate the connection ID in the connection ring buffer (<a href=\"http://go.microsoft.com/fwlink/?LinkId=207752\" data-linktype=\"external\">Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer</a>) for certain connection errors. If the connection ID is not in the connection ring buffer, you can assume a network error.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ColumnEncryptionKeyCacheTtl\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ColumnEncryptionKeyCacheTtl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnEncryptionKeyCacheTtl</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the time-to-live for column encryption key entries in the column encryption key cache for the <a href=\"https://msdn.microsoft.com/library/mt163865.aspx\" data-linktype=\"external\">Always Encrypted</a> feature. The default value is 2 hours. 0 means no caching at all.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>The time interval.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnEncryptionQueryMetadataCacheEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether query metadata caching is enabled (true) or not (false) for parameterized queries running against <a href=\"https://msdn.microsoft.com/library/mt163865.aspx\" data-linktype=\"external\">Always Encrypted</a> enabled databases. The default value is true.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns true if query metadata caching is enabled; otherwise false. true is the default.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For parameterized queries, SqlClient makes a roundtrip to SQL Server for parameter metadata, to see which parameter it needs to encrypt and how (which keys and algorithms should be used). If the application calls the same query multiple times, an extra roundtrip is made to the server each time, which degrades application performance.  </p>\n<p> With <strong>ColumnEncryptionQueryMetadataCacheEnabled</strong> set to true, if the same query is called multiple times, the roundtrip to the server will be made only once. The cache has a non-configurable Max size parameter that is set to 2000 queries.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ColumnEncryptionTrustedMasterKeyPaths\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ColumnEncryptionTrustedMasterKeyPaths_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnEncryptionTrustedMasterKeyPaths</div>        \r\n          </div>\r\n    \r\n            <p>Allows you to set a list of trusted key paths for a database server. If while processing an application query the driver receives a key path that is not on the list, the query will fail. This property provides additional protection against security attacks that involve a compromised SQL Server providing fake key paths, which may lead to leaking key store credentials.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IDictionary&lt;string,System.Collections.Generic.IList&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>The list of trusted master key paths for the column encryption.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ConnectionString\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ConnectionString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConnectionString</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the string used to open a SQL Server database.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ConnectionString { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The connection string that includes the source database name, and other parameters needed to establish the initial connection. The default value is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An invalid connection string argument has been supplied, or a required connection string argument has not been supplied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ConnectionString is similar to an OLE DB connection string, but is not identical. Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if the Persist Security Info value is set to <code>false</code> (default). The .NET Framework Data Provider for SQL Server does not persist or return the password in a connection string unless you set Persist Security Info to <code>true</code>.  </p>\n<p> You can use the ConnectionString property to connect to a database. The following example illustrates a typical connection string.  </p>\n<pre><code>&quot;Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)&quot;  \n</code></pre><p> Use the new <a class=\"xref\" href=\"system.data.sqlclient.sqlconnectionstringbuilder\" data-linktype=\"relative-path\">SqlConnectionStringBuilder</a> to construct valid connection strings at run time. For more information, see <a href=\"../Topic/Connection%20String%20Builders.md\" data-linktype=\"relative-path\">Connection String Builders</a>.  </p>\n<p> The ConnectionString property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> properties return only those settings that are contained in the ConnectionString.  </p>\n<p> To connect to a local computer, specify &quot;(local)&quot; for the server. If a server name is not specified, a connection will be attempted to the default instance on the local computer.  </p>\n<p> Resetting the ConnectionString on a closed connection resets all connection string values (and related properties) including the password. For example, if you set a connection string that includes &quot;Database= AdventureWorks&quot;, and then reset the connection string to &quot;Data Source=myserver;Integrated Security=true&quot;, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Database_\" data-linktype=\"relative-path\">Database</a> property is no longer set to &quot;AdventureWorks&quot;.  </p>\n<p> The connection string is parsed immediately after being set. If errors in syntax are found when parsing, a runtime exception, such as <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>, is generated. Other errors can be found only when an attempt is made to open the connection.  </p>\n<p> The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation mark character used to enclose the value must be doubled every time it occurs within the value.  </p>\n<p> To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Single or double quotation marks may be used within a connection string without using delimiters (for example, Data Source= my&#39;Server or Data Source= my&quot;Server), unless a quotation mark character is the first or last character in the value.  </p>\n<p> Keywords are not case sensitive.  </p>\n<p> The following table lists the valid names for keyword values within the ConnectionString.  </p>\n<p>  The following list contains the valid names for connection pooling values within the ConnectionString. For more information, see <a href=\"../Topic/SQL%20Server%20Connection%20Pooling%20(ADO.NET).md\" data-linktype=\"relative-path\">SQL Server Connection Pooling (ADO.NET)</a>.  </p>\n<ul>\n<li><p>Connection Lifetime (or Load Balance Timeout)  </p>\n</li>\n<li><p>Enlist  </p>\n</li>\n<li><p>Max Pool Size  </p>\n</li>\n<li><p>Min Pool Size  </p>\n</li>\n<li><p>Pooling  </p>\n<p>When you are setting keyword or connection pooling values that require a Boolean value, you can use &#39;yes&#39; instead of &#39;true&#39;, and &#39;no&#39; instead of &#39;false&#39;. Integer values are represented as strings.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The .NET Framework Data Provider for SQL Server uses its own protocol to communicate with SQL Server. Therefore, it does not support the use of an ODBC data source name (DSN) when connecting to SQL Server because it does not add an ODBC layer.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Universal data link (UDL) files are not supported for the .NET Framework Data Provider for SQL Server.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> In this release, the application should use caution when constructing a connection string based on user input (for example when retrieving user ID and password information from a dialog box, and appending it to the connection string). The application should make sure that a user cannot embed additional connection string parameters in these values (for example, entering a password as &quot;validpassword;database=somedb&quot; in an attempt to attach to a different database). If you need to construct connection strings based on user input, use the new <a class=\"xref\" href=\"system.data.sqlclient.sqlconnectionstringbuilder\" data-linktype=\"relative-path\">SqlConnectionStringBuilder</a>, which validates the connection string and helps to eliminate this problem. See <a href=\"../Topic/Connection%20String%20Builders.md\" data-linktype=\"relative-path\">Connection String Builders</a> for more information.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and sets the ConnectionString property before opening the connection.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.ConnectionString Example#1\">    Private Sub OpenSqlConnection()\n        Dim connectionString As String = GetConnectionString()\n\n        Using connection As New SqlConnection()\n\n            connection.ConnectionString = connectionString\n\n            connection.Open()\n\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State)\n            Console.WriteLine(&quot;ConnectionString: {0}&quot;, _\n                connection.ConnectionString)\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,  \n        &#39; you can retrieve it from a configuration file.\n        Return &quot;Data Source=MSSQL1;Database=AdventureWorks;&quot; _\n          &amp; &quot;Integrated Security=true;&quot;\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.ConnectionString Example#1\">    private static void OpenSqlConnection()\n    {\n        string connectionString = GetConnectionString();\n\n        using (SqlConnection connection = new SqlConnection())\n        {\n            connection.ConnectionString = connectionString;\n\n            connection.Open();\n\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State);\n            Console.WriteLine(&quot;ConnectionString: {0}&quot;,\n                connection.ConnectionString);\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=MSSQL1;Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=true;&quot;;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ConnectionTimeout\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ConnectionTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConnectionTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ConnectionTimeout { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value set is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can set the amount of time a connection waits to time out by using the <code>Connect``Timeout</code> or <code>Connection Timeout</code> keywords in the connection string. A value of 0 indicates no limit, and should be avoided in a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a> because an attempt to connect waits indefinitely.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and sets the <code>Connection Timeout</code> to 30 seconds in the connection string. The code opens the connection and displays the ConnectionTimeout property in the console window.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.ConnectionTimeout Example#1\">    Private Sub OpenSqlConnection()\n        Dim connectionString As String = GetConnectionString()\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State)\n            Console.WriteLine(&quot;ConnectionTimeout: {0}&quot;, connection.ConnectionTimeout)\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,  \n        &#39; you can retrieve it from a configuration file, using the\n        &#39; System.Configuration.ConfigurationSettings.AppSettings property\n        Return &quot;Data Source=(local);Database=AdventureWorks;&quot; _\n          &amp; &quot;Integrated Security=SSPI;Connection Timeout=30;&quot;\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.ConnectionTimeout Example#1\">    private static void OpenSqlConnection()\n    {\n        string connectionString = GetConnectionString();\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State);\n            Console.WriteLine(&quot;ConnectionTimeout: {0}&quot;,\n                connection.ConnectionTimeout);\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file, using the \n        // System.Configuration.ConfigurationSettings.AppSettings property \n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI;Connection Timeout=30&quot;;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_Credential\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_Credential_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Credential</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object for this connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlCredential Credential { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object for this connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>Persist Security Info = true</code> is required to get the value of the <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object with Credential.  </p>\n<p> The default value of Credential is null.  </p>\n<p> An <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> exception will be raised:  </p>\n<ul>\n<li><p>If Credential is set on an open connection.  </p>\n</li>\n<li><p>If Credential is set when <code>Context Connection=true</code>.  </p>\n</li>\n<li><p>If Credential is set when <code>Integrated Security = true</code>.  </p>\n</li>\n<li><p>If Credential is set when the connection string uses <code>Password</code>.  </p>\n</li>\n<li><p>If Credential is set when the connection string uses <code>UserID</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_Database\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_Database_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Database</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the current database or the database to be used after a connection is opened.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Database { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Database property updates dynamically. If you change the current database using a Transact-SQL statement or the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ChangeDatabase_\" data-linktype=\"relative-path\">ChangeDatabase</a> method, an informational message is sent and the property is updated automatically.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and displays some of its read-only properties.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.Database Example#1\">    private static void ChangeSqlDatabase(string connectionString)\n    {\n        // Assumes connectionString represents a valid connection string\n        // to the AdventureWorks sample database.\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n            Console.WriteLine(&quot;Database: {0}&quot;, connection.Database);\n\n            connection.ChangeDatabase(&quot;Northwind&quot;);\n            Console.WriteLine(&quot;Database: {0}&quot;, connection.Database);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.Database Example#1\">    Private Sub ChangeSqlDatabase(ByVal connectionString As String)\n        &#39; Assumes connectionString represents a valid connection string\n        &#39; to the AdventureWorks sample database.\n        Using connection As New SqlConnection(connectionString)\n\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;Database: {0}&quot;, connection.Database)\n\n            connection.ChangeDatabase(&quot;Northwind&quot;)\n            Console.WriteLine(&quot;Database: {0}&quot;, connection.Database)\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_DataSource\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_DataSource_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataSource</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the instance of SQL Server to which to connect.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string DataSource { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the instance of SQL Server to which to connect. The default value is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The DataSource property returns <code>null</code> if the connection string for the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is &quot;context connection=true&quot;.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and displays some of its read-only properties.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.DataSource Example#1\">    Private Sub OpenSqlConnection(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;DataSource: {0}&quot;, connection.DataSource)\n        End Using\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.DataSource Example#1\">    private static void OpenSqlConnection(string connectionString)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n            Console.WriteLine(&quot;DataSource: {0}&quot;, connection.DataSource);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_DbProviderFactory\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_DbProviderFactory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DbProviderFactory</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbproviderfactory\" data-linktype=\"relative-path\">DbProviderFactory</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_FireInfoMessageEventOnUserErrors\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_FireInfoMessageEventOnUserErrors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FireInfoMessageEventOnUserErrors</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the FireInfoMessageEventOnUserErrors property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool FireInfoMessageEventOnUserErrors { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the FireInfoMessageEventOnUserErrors property has been set; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you set FireInfoMessageEventOnUserErrors to <code>true</code>, errors that were previously treated as exceptions are now handled as <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_InfoMessage\" data-linktype=\"relative-path\">InfoMessage</a> events. All events fire immediately and are handled by the event handler. If is FireInfoMessageEventOnUserErrors is set to <code>false</code>, then <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_InfoMessage\" data-linktype=\"relative-path\">InfoMessage</a> events are handled at the end of the procedure.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An error with a severity level of 17 or above that causes the server to stop processing the command needs to be handled as an exception. In this case, an exception is thrown regardless of how the error is handled in the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_InfoMessage\" data-linktype=\"relative-path\">InfoMessage</a> event.  </p>\n</div>\n<p> For more information on working with events, see <a href=\"../Topic/Connection%20Events.md\" data-linktype=\"relative-path\">Connection Events</a>. For more information on errors generated by the SQL Server engine, see SQL Server Books Online.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_PacketSize\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_PacketSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PacketSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size (in bytes) of network packets used to communicate with an instance of SQL Server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int PacketSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size (in bytes) of network packets. The default value is 8000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an application performs bulk copy operations, or sends or receives lots of text or image data, a packet size larger than the default may improve efficiency because it causes fewer network read and write operations. If an application sends and receives small amounts of information, you can set the packet size to 512 bytes (using the Packet Size value in the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ConnectionString_\" data-linktype=\"relative-path\">ConnectionString</a>), which is sufficient for most data transfer operations. For most applications, the default packet size is best.  </p>\n<p> PacketSize may be a value in the range of 512 and 32767 bytes. An exception is generated if the value is outside this range.  </p>\n<p> Setting the default value to a number greater than 8000 will cause the packets to use the MultiPage allocator on the instance of SQL Server instead of the much more efficient SinglePage allocator, reducing the overall scalability of the SQL Server. For more information on how SQL Server uses memory, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=143705\" data-linktype=\"external\">Memory Architecture</a> in SQL Server Books Online.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>, including setting the <code>Packet Size</code> to 512 in the connection string. It displays the PacketSize and <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_ServerVersion_\" data-linktype=\"relative-path\">ServerVersion</a> properties in the console window.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.PacketSize Example#1\">    Private Sub OpenSqlConnection()\n        Dim connectionString As String = GetConnectionString()\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;PacketSize: {0}&quot;, connection.PacketSize)\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code,  \n        &#39; you can retrieve it from a configuration file, using the\n        &#39; System.Configuration.ConfigurationSettings.AppSettings property\n        Return &quot;Data Source=(local);Database=AdventureWorks;&quot; _\n          &amp; &quot;Integrated Security=SSPI;Packet Size=512;&quot;\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.PacketSize Example#1\">    private static void OpenSqlConnection()\n    {\n        string connectionString = GetConnectionString();\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n            Console.WriteLine(&quot;PacketSize: {0}&quot;, connection.PacketSize);\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file, using the \n        // System.Configuration.ConfigurationSettings.AppSettings property \n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI;Packet Size=512&quot;;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ServerVersion\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ServerVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ServerVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string that contains the version of the instance of SQL Server to which the client is connected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ServerVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The version of the instance of SQL Server.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The connection is closed.  </p>\n<p> ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <span class=\"xref\">stem.Data.SqlClient.SqlConnection.OpenAsync*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The version is of the form <em>##.##.####</em>, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The string is of the form <em>major.minor.build</em>, where major and minor are exactly two digits and build is exactly four digits.  </p>\n<p> ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_OpenAsync_\" data-linktype=\"relative-path\">OpenAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and displays the ServerVersion property.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData ISqlConnection.ServerVersion Example#1\">    Private Sub CreateSqlConnection(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State)\n        End Using\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData ISqlConnection.ServerVersion Example#1\">        private static void CreateSqlConnection(string connectionString)\n        {\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n                Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n                Console.WriteLine(&quot;State: {0}&quot;, connection.State );\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_State\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_State_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">State</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the state of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> during the most recent network operation performed on the connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Data.ConnectionState State { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.connectionstate\" data-linktype=\"relative-path\">ConnectionState</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.data.connectionstate\" data-linktype=\"relative-path\">ConnectionState</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Returns an <a class=\"xref\" href=\"system.data.connectionstate\" data-linktype=\"relative-path\">ConnectionState</a> enumeration indicating the state of the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. Closing and reopening the connection will refresh the value of State.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_StatisticsEnabled\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_StatisticsEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StatisticsEnabled</div>        \r\n          </div>\r\n    \r\n            <p>When set to <code>true</code>, enables statistics gathering for the current connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool StatisticsEnabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns <code>true</code> if statistics gathering is enabled; otherwise <code>false</code>. <code>false</code> is the default.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Enabling statistics gathering has a minor, but measurable effect on performance and therefore should be enabled only when it is required.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_WorkstationId\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_WorkstationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkstationId</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string that identifies the database client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string WorkstationId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that identifies the database client. If not specified, the name of the client computer. If neither is specified, the value is an empty string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string typically contains the network name of the client. The WorkstationId property corresponds to the <code>Workstation ID</code> connection string property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and displays the WorkstationId property.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.WorkstationId Example#1\">    Private Sub OpenSqlConnection(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;WorkstationId: {0}&quot;, connection.WorkstationId)\n        End Using\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.WorkstationId Example#1\">    private static void OpenSqlConnection(string connectionString)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n            Console.WriteLine(&quot;WorkstationId: {0}&quot;, connection.WorkstationId);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_BeginDbTransaction_System_Data_IsolationLevel_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_BeginDbTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginDbTransaction(IsolationLevel)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>isolationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.isolationlevel\" data-linktype=\"relative-path\">IsolationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbtransaction\" data-linktype=\"relative-path\">DbTransaction</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_BeginTransaction\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_BeginTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginTransaction()</div>        \r\n          </div>\r\n    \r\n            <p>Starts a database transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlTransaction BeginTransaction ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></div>\r\n                  </div>\r\n                  <p>An object representing the new transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Parallel transactions are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command maps to the SQL Server implementation of BEGIN TRANSACTION.  </p>\n<p> You must explicitly commit or roll back the transaction using the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> method. To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you do not specify an isolation level, the default isolation level is used. To specify an isolation level with the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a> method, use the overload that takes the <code>iso</code> parameter (<a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a>). The isolation level set for a transaction persists after the transaction is completed and until the connection is closed or disposed. Setting the isolation level to <strong>Snapshot</strong> in a database where the snapshot isolation level is not enabled does not throw an exception. The transaction will complete using the default isolation level.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> If a transaction is started and a level 16 or higher error occurs on the server, the transaction will not be rolled back until the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader#System_Data_SqlClient_SqlDataReader_Read_\" data-linktype=\"relative-path\">Read</a> method is invoked. No exception is thrown on <strong>ExecuteReader</strong>.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When your query returns a large amount of data and calls <code>BeginTransaction</code>, a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.  </p>\n</div>\n<p> For more information on SQL Server transactions, see &quot;Explicit Transactions&quot; and &quot;Coding Efficient Transactions&quot; in SQL Server Books Online.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a>. It also demonstrates how to use the BeginTransaction, a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a>, and <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.BeginTransaction Example#1\">        private static void ExecuteSqlTransaction(string connectionString)\n        {\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                SqlCommand command = connection.CreateCommand();\n                SqlTransaction transaction;\n\n                // Start a local transaction.\n                transaction = connection.BeginTransaction(&quot;SampleTransaction&quot;);\n\n                // Must assign both transaction object and connection\n                // to Command object for a pending local transaction\n                command.Connection = connection;\n                command.Transaction = transaction;\n\n                try\n                {\n                    command.CommandText =\n                        &quot;Insert into Region (RegionID, RegionDescription) VALUES (100, &#39;Description&#39;)&quot;;\n                    command.ExecuteNonQuery();\n                    command.CommandText =\n                        &quot;Insert into Region (RegionID, RegionDescription) VALUES (101, &#39;Description&#39;)&quot;;\n                    command.ExecuteNonQuery();\n\n                    // Attempt to commit the transaction.\n                    transaction.Commit();\n                    Console.WriteLine(&quot;Both records are written to database.&quot;);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Commit Exception Type: {0}&quot;, ex.GetType());\n                    Console.WriteLine(&quot;  Message: {0}&quot;, ex.Message);\n\n                    // Attempt to roll back the transaction.\n                    try\n                    {\n                        transaction.Rollback();\n                    }\n                    catch (Exception ex2)\n                    {\n                        // This catch block will handle any errors that may have occurred\n                        // on the server that would cause the rollback to fail, such as\n                        // a closed connection.\n                        Console.WriteLine(&quot;Rollback Exception Type: {0}&quot;, ex2.GetType());\n                        Console.WriteLine(&quot;  Message: {0}&quot;, ex2.Message);\n                    }\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.BeginTransaction Example#1\">    Private Sub ExecuteSqlTransaction(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n\n            Dim command As SqlCommand = connection.CreateCommand()\n            Dim transaction As SqlTransaction\n\n            &#39; Start a local transaction\n            transaction = connection.BeginTransaction(&quot;SampleTransaction&quot;)\n\n            &#39; Must assign both transaction object and connection\n            &#39; to Command object for a pending local transaction.\n            command.Connection = connection\n            command.Transaction = transaction\n\n            Try\n                command.CommandText = _\n                  &quot;Insert into Region (RegionID, RegionDescription) VALUES (100, &#39;Description&#39;)&quot;\n                command.ExecuteNonQuery()\n                command.CommandText = _\n                  &quot;Insert into Region (RegionID, RegionDescription) VALUES (101, &#39;Description&#39;)&quot;\n\n                command.ExecuteNonQuery()\n\n                &#39; Attempt to commit the transaction.\n                transaction.Commit()\n                Console.WriteLine(&quot;Both records are written to database.&quot;)\n\n            Catch ex As Exception\n                Console.WriteLine(&quot;Commit Exception Type: {0}&quot;, ex.GetType())\n                Console.WriteLine(&quot;  Message: {0}&quot;, ex.Message)\n\n                &#39; Attempt to roll back the transaction.\n                Try\n                    transaction.Rollback()\n\n                Catch ex2 As Exception\n                    &#39; This catch block will handle any errors that may have occurred\n                    &#39; on the server that would cause the rollback to fail, such as\n                    &#39; a closed connection.\n                    Console.WriteLine(&quot;Rollback Exception Type: {0}&quot;, ex2.GetType())\n                    Console.WriteLine(&quot;  Message: {0}&quot;, ex2.Message)\n                End Try\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_BeginTransaction_System_Data_IsolationLevel_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_BeginTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginTransaction(IsolationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Starts a database transaction with the specified isolation level.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iso</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.isolationlevel\" data-linktype=\"relative-path\">IsolationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The isolation level under which the transaction should run.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></div>\r\n                  </div>\r\n                  <p>An object representing the new transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Parallel transactions are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command maps to the SQL Server implementation of BEGIN TRANSACTION.  </p>\n<p> You must explicitly commit or roll back the transaction using the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> method. To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the SQL Server default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the Transact-SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a> followed immediately by <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a>. For more information on SQL Server isolation levels, see &quot;Isolation Levels in the Database Engine&quot; in SQL Server Books Online.  </p>\n</div>\n<p> For more information on SQL Server transactions, see &quot;Explicit Transactions&quot; and &quot;Coding Efficient Transactions&quot; in SQL Server Books Online.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When your query returns a large amount of data and calls <code>BeginTransaction</code>, a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a>. It also demonstrates how to use the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a>, a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a>, and <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.BeginTransaction1 Example#1\">    Private Sub ExecuteSqlTransaction(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n\n            Dim command As SqlCommand = connection.CreateCommand()\n            Dim transaction As SqlTransaction\n\n            &#39; Start a local transaction\n            transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted)\n            &#39; Must assign both transaction object and connection\n            &#39; to Command object for a pending local transaction\n            command.Connection = connection\n            command.Transaction = transaction\n\n            Try\n                command.CommandText = _\n                  &quot;Insert into Region (RegionID, RegionDescription) VALUES (100, &#39;Description&#39;)&quot;\n                command.ExecuteNonQuery()\n                command.CommandText = _\n                  &quot;Insert into Region (RegionID, RegionDescription) VALUES (101, &#39;Description&#39;)&quot;\n                command.ExecuteNonQuery()\n                transaction.Commit()\n                Console.WriteLine(&quot;Both records are written to database.&quot;)\n            Catch e As Exception\n                Try\n                    transaction.Rollback()\n                Catch ex As SqlException\n                    If Not transaction.Connection Is Nothing Then\n                        Console.WriteLine(&quot;An exception of type &quot; &amp; ex.GetType().ToString() &amp; _\n                          &quot; was encountered while attempting to roll back the transaction.&quot;)\n                    End If\n                End Try\n\n                Console.WriteLine(&quot;An exception of type &quot; &amp; e.GetType().ToString() &amp; _\n                  &quot;was encountered while inserting the data.&quot;)\n                Console.WriteLine(&quot;Neither record was written to database.&quot;)\n            End Try\n        End Using\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.BeginTransaction1 Example#1\">    private static void ExecuteSqlTransaction(string connectionString)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            SqlCommand command = connection.CreateCommand();\n            SqlTransaction transaction;\n\n            // Start a local transaction.\n            transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);\n\n            // Must assign both transaction object and connection\n            // to Command object for a pending local transaction\n            command.Connection = connection;\n            command.Transaction = transaction;\n\n            try\n            {\n                command.CommandText =\n                    &quot;Insert into Region (RegionID, RegionDescription) VALUES (100, &#39;Description&#39;)&quot;;\n                command.ExecuteNonQuery();\n                command.CommandText =\n                    &quot;Insert into Region (RegionID, RegionDescription) VALUES (101, &#39;Description&#39;)&quot;;\n                command.ExecuteNonQuery();\n                transaction.Commit();\n                Console.WriteLine(&quot;Both records are written to database.&quot;);\n            }\n            catch (Exception e)\n            {\n                try\n                {\n                    transaction.Rollback();\n                }\n                catch (SqlException ex)\n                {\n                    if (transaction.Connection != null)\n                    {\n                        Console.WriteLine(&quot;An exception of type &quot; + ex.GetType() +\n                            &quot; was encountered while attempting to roll back the transaction.&quot;);\n                    }\n                }\n\n                Console.WriteLine(&quot;An exception of type &quot; + e.GetType() +\n                    &quot; was encountered while inserting the data.&quot;);\n                Console.WriteLine(&quot;Neither record was written to database.&quot;);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_BeginTransaction_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_BeginTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginTransaction(String)</div>        \r\n          </div>\r\n    \r\n            <p>Starts a database transaction with the specified transaction name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></div>\r\n                  </div>\r\n                  <p>An object representing the new transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Parallel transactions are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command maps to the SQL Server implementation of BEGIN TRANSACTION.  </p>\n<p> The length of the <code>transactionName</code> parameter must not exceed 32 characters; otherwise an exception will be thrown.  </p>\n<p> The value in the <code>transactionName</code> parameter can be used in later calls to <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> and in the <code>savePoint</code> parameter of the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Save_\" data-linktype=\"relative-path\">Save</a> method.  </p>\n<p> You must explicitly commit or roll back the transaction using the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> method. To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.  </p>\n<p> For more information on SQL Server transactions, see &quot;Explicit Transactions&quot; and &quot;Coding Efficient Transactions&quot; in SQL Server Books Online.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When your query returns a large amount of data and calls <code>BeginTransaction</code>, a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a>. It also demonstrates how to use the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a>, a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a>, and <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.BeginTransaction2 Example#1\">        private static void ExecuteSqlTransaction(string connectionString)\n        {\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                SqlCommand command = connection.CreateCommand();\n                SqlTransaction transaction;\n\n                // Start a local transaction.\n                transaction = connection.BeginTransaction(&quot;SampleTransaction&quot;);\n\n                // Must assign both transaction object and connection\n                // to Command object for a pending local transaction\n                command.Connection = connection;\n                command.Transaction = transaction;\n\n                try\n                {\n                    command.CommandText =\n                        &quot;Insert into Region (RegionID, RegionDescription) VALUES (100, &#39;Description&#39;)&quot;;\n                    command.ExecuteNonQuery();\n                    command.CommandText =\n                        &quot;Insert into Region (RegionID, RegionDescription) VALUES (101, &#39;Description&#39;)&quot;;\n                    command.ExecuteNonQuery();\n\n                    // Attempt to commit the transaction.\n                    transaction.Commit();\n                    Console.WriteLine(&quot;Both records are written to database.&quot;);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Commit Exception Type: {0}&quot;, ex.GetType());\n                    Console.WriteLine(&quot;  Message: {0}&quot;, ex.Message);\n\n                    // Attempt to roll back the transaction.\n                    try\n                    {\n                        transaction.Rollback();\n                    }\n                    catch (Exception ex2)\n                    {\n                        // This catch block will handle any errors that may have occurred\n                        // on the server that would cause the rollback to fail, such as\n                        // a closed connection.\n                        Console.WriteLine(&quot;Rollback Exception Type: {0}&quot;, ex2.GetType());\n                        Console.WriteLine(&quot;  Message: {0}&quot;, ex2.Message);\n                    }\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.BeginTransaction2 Example#1\">    Private Sub ExecuteSqlTransaction(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n\n            Dim command As SqlCommand = connection.CreateCommand()\n            Dim transaction As SqlTransaction\n\n            &#39; Start a local transaction\n            transaction = connection.BeginTransaction(&quot;SampleTransaction&quot;)\n\n            &#39; Must assign both transaction object and connection\n            &#39; to Command object for a pending local transaction.\n            command.Connection = connection\n            command.Transaction = transaction\n\n            Try\n                command.CommandText = _\n                  &quot;Insert into Region (RegionID, RegionDescription) VALUES (100, &#39;Description&#39;)&quot;\n                command.ExecuteNonQuery()\n                command.CommandText = _\n                  &quot;Insert into Region (RegionID, RegionDescription) VALUES (101, &#39;Description&#39;)&quot;\n\n                command.ExecuteNonQuery()\n\n                &#39; Attempt to commit the transaction.\n                transaction.Commit()\n                Console.WriteLine(&quot;Both records are written to database.&quot;)\n\n            Catch ex As Exception\n                Console.WriteLine(&quot;Exception Type: {0}&quot;, ex.GetType())\n                Console.WriteLine(&quot;  Message: {0}&quot;, ex.Message)\n\n                &#39; Attempt to roll back the transaction.\n                Try\n                    transaction.Rollback()\n\n                Catch ex2 As Exception\n                    &#39; This catch block will handle any errors that may have occurred\n                    &#39; on the server that would cause the rollback to fail, such as\n                    &#39; a closed connection.\n                    Console.WriteLine(&quot;Rollback Exception Type: {0}&quot;, ex2.GetType())\n                    Console.WriteLine(&quot;  Message: {0}&quot;, ex2.Message)\n                End Try\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_BeginTransaction_System_Data_IsolationLevel_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_BeginTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginTransaction(IsolationLevel,String)</div>        \r\n          </div>\r\n    \r\n            <p>Starts a database transaction with the specified isolation level and transaction name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iso</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.isolationlevel\" data-linktype=\"relative-path\">IsolationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The isolation level under which the transaction should run.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></div>\r\n                  </div>\r\n                  <p>An object representing the new transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Parallel transactions are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command maps to the SQL Server implementation of BEGIN TRANSACTION.  </p>\n<p> The value in the <code>transactionName</code> parameter can be used in later calls to <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> and in the <code>savePoint</code> parameter of the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Save_\" data-linktype=\"relative-path\">Save</a> method.  </p>\n<p> You must explicitly commit or roll back the transaction using the <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a> or <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> method. To make sure that the SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the SQL Server default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the Transact-SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a> followed immediately by <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a>. For more information on SQL Server isolation levels, see &quot;Isolation Levels in the Database Engine&quot; in SQL Server Books Online.  </p>\n</div>\n<p> For more information on SQL Server transactions, see &quot;Explicit Transactions&quot; and &quot;Coding Efficient Transactions&quot; in SQL Server Books Online.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> When your query returns a large amount of data and calls <code>BeginTransaction</code>, a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a>. It also demonstrates how to use the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a>, a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a>, and <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction#System_Data_SqlClient_SqlTransaction_Rollback_\" data-linktype=\"relative-path\">Rollback</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.BeginTransaction3 Example#1\">        private static void ExecuteSqlTransaction(string connectionString)\n        {\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n\n                SqlCommand command = connection.CreateCommand();\n                SqlTransaction transaction;\n\n                // Start a local transaction.\n                transaction = connection.BeginTransaction(\n                    IsolationLevel.ReadCommitted, &quot;SampleTransaction&quot;);\n\n                // Must assign both transaction object and connection\n                // to Command object for a pending local transaction.\n                command.Connection = connection;\n                command.Transaction = transaction;\n\n                try\n                {\n                    command.CommandText =\n                        &quot;Insert into Region (RegionID, RegionDescription) VALUES (100, &#39;Description&#39;)&quot;;\n                    command.ExecuteNonQuery();\n                    command.CommandText =\n                        &quot;Insert into Region (RegionID, RegionDescription) VALUES (101, &#39;Description&#39;)&quot;;\n                    command.ExecuteNonQuery();\n                    transaction.Commit();\n                    Console.WriteLine(&quot;Both records are written to database.&quot;);\n                }\n                catch (Exception e)\n                {\n                    try\n                    {\n                        transaction.Rollback();\n                    }\n                    catch (SqlException ex)\n                    {\n                        if (transaction.Connection != null)\n                        {\n                            Console.WriteLine(&quot;An exception of type &quot; + ex.GetType() +\n                                &quot; was encountered while attempting to roll back the transaction.&quot;);\n                        }\n                    }\n\n                    Console.WriteLine(&quot;An exception of type &quot; + e.GetType() +\n                        &quot; was encountered while inserting the data.&quot;);\n                    Console.WriteLine(&quot;Neither record was written to database.&quot;);\n                }\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.BeginTransaction3 Example#1\">    Private Sub ExecuteSqlTransaction(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n\n            Dim command As SqlCommand = connection.CreateCommand()\n            Dim transaction As SqlTransaction\n\n            &#39; Start a local transaction.\n            transaction = connection.BeginTransaction( _\n              IsolationLevel.ReadCommitted, &quot;SampleTransaction&quot;)\n\n            &#39; Must assign both transaction object and connection\n            &#39; to Command object for a pending local transaction.\n            command.Connection = connection\n            command.Transaction = transaction\n\n            Try\n                command.CommandText = _\n                  &quot;Insert into Region (RegionID, RegionDescription) VALUES (100, &#39;Description&#39;)&quot;\n                command.ExecuteNonQuery()\n                command.CommandText = _\n                  &quot;Insert into Region (RegionID, RegionDescription) VALUES (101, &#39;Description&#39;)&quot;\n                command.ExecuteNonQuery()\n                transaction.Commit()\n                Console.WriteLine(&quot;Both records are written to database.&quot;)\n            Catch e As Exception\n                Try\n                    transaction.Rollback()\n                Catch ex As SqlException\n                    If Not transaction.Connection Is Nothing Then\n                        Console.WriteLine(&quot;An exception of type &quot; &amp; ex.GetType().ToString() &amp; _\n                          &quot; was encountered while attempting to roll back the transaction.&quot;)\n                    End If\n                End Try\n\n                Console.WriteLine(&quot;An exception of type &quot; &amp; e.GetType().ToString() &amp; _\n                  &quot;was encountered while inserting the data.&quot;)\n                Console.WriteLine(&quot;Neither record was written to database.&quot;)\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ChangeDatabase_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ChangeDatabase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangeDatabase(String)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the current database for an open <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void ChangeDatabase (string database);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>database</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the database to use instead of the current database.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The database name is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The connection is not open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Cannot change the database.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value supplied in the <code>database</code> parameter must be a valid database name. The <code>database</code> parameter cannot contain a null value, an empty string, or a string with only blank characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> and displays some of its read-only properties.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.Database Example#1\">    private static void ChangeSqlDatabase(string connectionString)\n    {\n        // Assumes connectionString represents a valid connection string\n        // to the AdventureWorks sample database.\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n            Console.WriteLine(&quot;Database: {0}&quot;, connection.Database);\n\n            connection.ChangeDatabase(&quot;Northwind&quot;);\n            Console.WriteLine(&quot;Database: {0}&quot;, connection.Database);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.Database Example#1\">    Private Sub ChangeSqlDatabase(ByVal connectionString As String)\n        &#39; Assumes connectionString represents a valid connection string\n        &#39; to the AdventureWorks sample database.\n        Using connection As New SqlConnection(connectionString)\n\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;Database: {0}&quot;, connection.Database)\n\n            connection.ChangeDatabase(&quot;Northwind&quot;)\n            Console.WriteLine(&quot;Database: {0}&quot;, connection.Database)\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ChangePassword_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ChangePassword_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangePassword(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the SQL Server password for the user indicated in the connection string to the supplied new password.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ChangePassword (string connectionString, string newPassword);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connectionString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The connection string that contains enough information to connect to the server that you want. The connection string must contain the user ID and the current password.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newPassword</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new password to set. This password must comply with any password security policy set on the server, including minimum length, requirements for specific characters, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The connection string includes the option to use integrated security.  </p>\n<p> Or  </p>\n<p> The <code>newPassword</code> exceeds 128 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Either the <code>connectionString</code> or the <code>newPassword</code> parameter is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you are using SQL Server on Windows Server, developers can take advantage of functionality that lets the client application supply both the current and a new password in order to change the existing password. Applications can implement functionality such as prompting the user for a new password during initial login if the old one has expired, and this operation can be completed without administrator intervention.  </p>\n<p> The ChangePassword method changes the SQL Server password for the user indicated in the supplied <code>connectionString</code> parameter to the value supplied in the <code>newPassword</code> parameter. If the connection string includes the option for integrated security (that is, &quot;Integrated Security=True&quot; or the equivalent), an exception is thrown.  </p>\n<p> To determine that the password has expired, calling the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Open_\" data-linktype=\"relative-path\">Open</a> method raises a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a>. In order to indicate that the password that is contained within the connection string must be reset, the <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_Number_\" data-linktype=\"relative-path\">Number</a> property for the exception contains the status value 18487 or 18488. The first value (18487) indicates that the password has expired and the second (18488) indicates that the password must be reset before logging in.  </p>\n<p> This method opens its own connection to the server, requests the password change, and closes the connection as soon as it has completed. This connection is not retrieved from, nor returned to, the SQL Server connection pool.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following is a simple example of changing a password:  </p>\n<pre><code>class Program {  \n   static void Main(string[] args) {  \n      System.Data.SqlClient.SqlConnection.ChangePassword(  \n        &quot;Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password&quot;,   \n       &quot;new_password&quot;);  \n   }  \n}  \n</code></pre><pre><code>Module Module1  \n    Sub Main()  \nSystem.Data.SqlClient.SqlConnection.ChangePassword(  \n        &quot;Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password&quot;,   \n       &quot;new_password&quot;)  \n    End Sub  \nEnd Module  \n</code></pre><p> The following console application demonstrates the issues involved in changing a user&#39;s password because the current password has expired.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlConnection.ChangePassword#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        try\n        {\n            DemonstrateChangePassword();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;Error: &quot; + ex.Message);\n        }\n        Console.WriteLine(&quot;Press ENTER to continue...&quot;);\n        Console.ReadLine();\n    }\n\n    private static void DemonstrateChangePassword()\n    {\n        // Retrieve the connection string. In a production application,\n        // this string should not be contained within the source code.\n        string connectionString = GetConnectionString();\n\n        using (SqlConnection cnn = new SqlConnection())\n        {\n            for (int i = 0; i &lt;= 1; i++)\n            {\n                // Run this loop at most two times. If the first attempt fails, \n                // the code checks the Number property of the SqlException object.\n                // If that contains the special values 18487 or 18488, the code \n                // attempts to set the user&#39;s password to a new value. \n                // Assuming this succeeds, the second pass through \n                // successfully opens the connection.\n                // If not, the exception handler catches the exception.\n                try\n                {\n                    cnn.ConnectionString = connectionString;\n                    cnn.Open();\n                    // Once this succeeds, just get out of the loop.\n                    // No need to try again if the connection is already open.\n                    break;\n                }\n                catch (SqlException ex)\n                {\n                    if (i == 0 &amp;&amp; ((ex.Number == 18487) || (ex.Number == 18488)))\n                    {\n                        // You must reset the password. \n                        connectionString =\n                            ModifyConnectionString(connectionString, \n                            GetNewPassword());\n\n                    }\n                    else\n                        // Bubble all other SqlException occurrences\n                        // back up to the caller.\n                        throw;\n                }\n            }\n            SqlCommand cmd = new SqlCommand(\n                &quot;SELECT ProductID, Name FROM Product&quot;, cnn);\n            // Use the connection and command here...\n        }\n    }\n\n    private static string ModifyConnectionString(\n        string connectionString, string NewPassword)\n    {\n\n        // Use the SqlConnectionStringBuilder class to modify the\n        // password portion of the connection string. \n        SqlConnectionStringBuilder builder =\n            new SqlConnectionStringBuilder(connectionString);\n        builder.Password = NewPassword;\n        return builder.ConnectionString;\n    }\n\n    private static string GetNewPassword()\n    {\n        // In a real application, you might display a modal\n        // dialog box to retrieve the new password. The concepts\n        // are the same as for this simple console application, however.\n        Console.Write(&quot;Your password must be reset. Enter a new password: &quot;);\n        return Console.ReadLine();\n    }\n\n    private static string GetConnectionString()\n    {\n        // For this demonstration, the connection string must\n        // contain both user and password information. In your own\n        // application, you might want to retrieve this setting\n        // from a config file, or from some other source.\n\n        // In a production application, you would want to \n        // display a modal form that could gather user and password\n        // information.\n        SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(\n            &quot;Data Source=(local);Initial Catalog=AdventureWorks&quot;);\n\n        Console.Write(&quot;Enter your user id: &quot;);\n        builder.UserID = Console.ReadLine();\n        Console.Write(&quot;Enter your password: &quot;);\n        builder.Password = Console.ReadLine();\n\n        return builder.ConnectionString;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlConnection.ChangePassword#1\">Option Explicit On\nOption Strict On\n\nImports System\nImports System.Data\nImports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Try\n            DemonstrateChangePassword()\n        Catch ex As Exception\n            Console.WriteLine(&quot;Error: &quot; &amp; ex.Message)\n        End Try\n        Console.WriteLine(&quot;Press ENTER to continue...&quot;)\n        Console.ReadLine()\n    End Sub\n\n    Private Sub DemonstrateChangePassword()\n        Dim connectionString As String = GetConnectionString()\n        Using cnn As New SqlConnection()\n            For i As Integer = 0 To 1\n                &#39; Run this loop at most two times. If the first attempt fails, \n                &#39; the code checks the Number property of the SqlException object.\n                &#39; If that contains the special values 18487 or 18488, the code \n                &#39; attempts to set the user&#39;s password to a new value. \n                &#39; Assuming this succeeds, the second pass through \n                &#39; successfully opens the connection.\n                &#39; If not, the exception handler catches the exception.\n                Try\n                    cnn.ConnectionString = connectionString\n                    cnn.Open()\n                    &#39; Once this succeeds, just get out of the loop.\n                    &#39; No need to try again if the connection is already open.\n                    Exit For\n\n                Catch ex As SqlException _\n                 When (i = 0 And (ex.Number = 18487 Or ex.Number = 18488))\n                    &#39; You must reset the password.\n                    connectionString = ModifyConnectionString( _\n                     connectionString, GetNewPassword())\n\n                Catch ex As SqlException\n                    &#39; Bubble all other SqlException occurrences\n                    &#39; back up to the caller.\n                    Throw\n                End Try\n            Next\n            Dim cmd As New SqlCommand(&quot;SELECT ProductID, Name FROM Product&quot;, cnn)\n            &#39; Use the connection and command here...\n        End Using\n    End Sub\n\n    Private Function ModifyConnectionString( _\n     ByVal connectionString As String, ByVal NewPassword As String) As String\n\n        &#39; Use the SqlConnectionStringBuilder class to modify the\n        &#39; password portion of the connection string. \n        Dim builder As New SqlConnectionStringBuilder(connectionString)\n        builder.Password = NewPassword\n        Return builder.ConnectionString\n    End Function\n\n    Private Function GetNewPassword() As String\n        &#39; In a real application, you might display a modal\n        &#39; dialog box to retrieve the new password. The concepts\n        &#39; are the same as for this simple console application, however.\n        Console.Write(&quot;Your password must be reset. Enter a new password: &quot;)\n        Return Console.ReadLine()\n    End Function\n\n    Private Function GetConnectionString() As String\n        &#39; For this demonstration, the connection string must\n        &#39; contain both user and password information. In your own\n        &#39; application, you might want to retrieve this setting\n        &#39; from a config file, or from some other source.\n\n        &#39; In a production application, you would want to \n        &#39; display a modal form that could gather user and password\n        &#39; information.\n        Dim builder As New SqlConnectionStringBuilder( _\n         &quot;Data Source=(local);Initial Catalog=AdventureWorks&quot;)\n\n        Console.Write(&quot;Enter your user id: &quot;)\n        builder.UserID = Console.ReadLine()\n        Console.Write(&quot;Enter your password: &quot;)\n        builder.Password = Console.ReadLine()\n\n        Return builder.ConnectionString\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ChangePassword_System_String_System_Data_SqlClient_SqlCredential_System_Security_SecureString_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ChangePassword_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangePassword(String,SqlCredential,SecureString)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the SQL Server password for the user indicated in the <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connectionString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The connection string that contains enough information to connect to a server. The connection string should not use any of the following connection string keywords: <code>Integrated Security = true</code>, <code>UserId</code>, or <code>Password</code>; or <code>ContextConnection = true</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newSecurePassword</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new password. <code>newSecurePassword</code> must be read only. The password must also comply with any password security policy set on the server (for example, minimum length and requirements for specific characters).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <ol>\n<li><p>The connection string contains any combination of <code>UserId</code>, <code>Password</code>, or <code>Integrated Security=true</code>.  </p>\n</li>\n<li><p>The connection string contains <code>Context Connection=true</code>.  </p>\n</li>\n<li><p><code>newSecurePassword</code> is greater than 128 characters.  </p>\n</li>\n<li><p><code>newSecurePassword</code> is not read only.  </p>\n</li>\n<li><p><code>newSecurePassword</code> is an empty string.</p>\n</li>\n</ol>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>One of the parameters (<code>connectionString</code>, <code>credential</code>, or <code>newSecurePassword</code>) is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ClearAllPools\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ClearAllPools_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearAllPools()</div>        \r\n          </div>\r\n    \r\n            <p>Empties the connection pool.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ClearAllPools ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ClearAllPools resets (or empties) the connection pool. If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Close_\" data-linktype=\"relative-path\">Close</a> is called on them.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ClearPool_System_Data_SqlClient_SqlConnection_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ClearPool_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearPool(SqlConnection)</div>        \r\n          </div>\r\n    \r\n            <p>Empties the connection pool associated with the specified connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ClearPool (System.Data.SqlClient.SqlConnection connection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> to be cleared from the pool.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ClearPool clears the connection pool that is associated with the <code>connection</code>. If additional connections associated with <code>connection</code> are in use at the time of the call, they are marked appropriately and are discarded (instead of being returned to the pool) when <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Close_\" data-linktype=\"relative-path\">Close</a> is called on them.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_Close\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the connection to the database. This is the preferred method of closing any open connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>The connection-level error that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Pending transactions started using Transact-SQL or <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a> are automatically rolled back when the connection is reset if connection pooling is enabled. If connection pooling is off, the transaction is rolled back after <code>SqlConnection.Close</code> is called. Transactions started through <a class=\"xref\" href=\"system.transactions\" data-linktype=\"relative-path\">System.Transactions</a> are controlled through the <code>System.Transactions</code> infrastructure, and are not affected by <code>SqlConnection.Close</code>.  </p>\n</div>\n<p> An application can call Close more than one time. No exception is generated.  </p>\n<p> If the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> goes out of scope, it won&#39;t be closed. Therefore, you must explicitly close the connection by calling <code>Close</code> or <code>Dispose</code>. <code>Close</code> and <code>Dispose</code> are functionally equivalent. If the connection pooling value <code>Pooling</code> is set to <code>true</code> or <code>yes</code>, the underlying connection is returned back to the connection pool. On the other hand, if <code>Pooling</code> is set to <code>false</code> or <code>no</code>, the underlying connection to the server is closed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see <a href=\"../Topic/SQL%20Server%20Connection%20Pooling%20(ADO.NET).md\" data-linktype=\"relative-path\">SQL Server Connection Pooling (ADO.NET)</a>.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not call <code>Close</code> or <code>Dispose</code> on a Connection, a DataReader, or any other managed object in the <code>Finalize</code> method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a <code>Finalize</code> method in your class definition. For more information, see <a href=\"../Topic/Garbage%20Collection.md\" data-linktype=\"relative-path\">Garbage Collection</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>, opens it, displays some of its properties. The connection is automatically closed at the end of the <code>using</code> block.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.Open Example#1\">    Private Sub OpenSqlConnection(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State)\n        End Using\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.Open Example#1\">    private static void OpenSqlConnection(string connectionString)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_CreateCommand\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_CreateCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateCommand()</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns a <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object associated with the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlCommand CreateCommand ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"SqlConnection_CreateCommand#1\">Imports System.Data\nImports System.Data.SqlClient\nPublic Class A\n   Public Shared Sub Main()\n      Using connection As New SqlConnection(&quot;Data Source=(local);Initial Catalog=Northwind;Integrated Security=SSPI;&quot;)\n      connection.Open()\n      Dim command As SqlCommand = connection.CreateCommand()\n      command.CommandText = &quot;SELECT * FROM Categories ORDER BY CategoryID&quot;\n      command.CommandTimeout = 15\n      command.CommandType = CommandType.Text\n      End Using\n   End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"SqlConnection_CreateCommand#1\">using System.Data;\nusing System.Data.SqlClient;\npublic class A {\n   public static void Main() {\n      using (SqlConnection connection = new SqlConnection(&quot;Data Source=(local);Initial Catalog=Northwind;Integrated Security=SSPI;&quot;)) {\n         connection.Open();\n         SqlCommand command= connection.CreateCommand();\n         command.CommandText = &quot;SELECT * FROM Categories ORDER BY CategoryID&quot;;\n         command.CommandTimeout = 15;\n         command.CommandType = CommandType.Text;\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_CreateDbCommand\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_CreateDbCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDbCommand()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Data.Common.DbCommand CreateDbCommand ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbcommand\" data-linktype=\"relative-path\">DbCommand</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_EnlistDistributedTransaction_System_EnterpriseServices_ITransaction_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_EnlistDistributedTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnlistDistributedTransaction(ITransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Enlists in the specified transaction as a distributed transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">System.EnterpriseServices.ITransaction</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to an existing <span class=\"xref\">stem.EnterpriseServices.ITransaction</span> in which to enlist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_EnlistTransaction_\" data-linktype=\"relative-path\">EnlistTransaction</a> method to enlist in a distributed transaction. Because it enlists a connection in a <a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a> instance, <strong>EnlistTransaction</strong> takes advantage of functionality available in the <a class=\"xref\" href=\"system.transactions\" data-linktype=\"relative-path\">System.Transactions</a> namespace for managing distributed transactions, making it preferable to <strong>EnlistDistributedTransaction</strong> for this purpose. For more information, see <a href=\"../Topic/Distributed%20Transactions.md\" data-linktype=\"relative-path\">Distributed Transactions</a>.  </p>\n<p> You can continue to enlist in an existing distributed transaction using the <strong>EnlistDistributedTransaction</strong> method if auto-enlistment is disabled. Enlisting in an existing distributed transaction makes sure that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.  </p>\n<p> <code>EnlistDistributedTransaction</code> returns an exception if the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> has already started a transaction using <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a>. However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <a class=\"xref\" href=\"system.data.sqlclient.sqlcommand\" data-linktype=\"relative-path\">SqlCommand</a> object), <strong>EnlistDistributedTransaction</strong> rolls back the local transaction and enlists in the existing distributed transaction as requested. You do not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_BeginTransaction_\" data-linktype=\"relative-path\">BeginTransaction</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_EnlistTransaction_System_Transactions_Transaction_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_EnlistTransaction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnlistTransaction(Transaction)</div>        \r\n          </div>\r\n    \r\n            <p>Enlists in the specified transaction as a distributed transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void EnlistTransaction (System.Transactions.Transaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A reference to an existing <a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a> in which to enlist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the EnlistTransaction method to enlist in a distributed transaction. Because it enlists a connection in a <a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a> instance, <strong>EnlistTransaction</strong> takes advantage of functionality available in the <a class=\"xref\" href=\"system.transactions\" data-linktype=\"relative-path\">System.Transactions</a> namespace for managing distributed transactions, making it preferable to <strong>EnlistDistributedTransaction</strong>, which uses a <strong>System.EnterpriseServices.ITransaction</strong> object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see <a href=\"../Topic/Distributed%20Transactions.md\" data-linktype=\"relative-path\">Distributed Transactions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_GetSchema\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_GetSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSchema()</div>        \r\n          </div>\r\n    \r\n            <p>Returns schema information for the data source of this <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. For more information about scheme, see <a href=\"http://msdn.microsoft.com/library/ms254969.aspx\" data-linktype=\"external\">SQL Server Schema Collections</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Data.DataTable GetSchema ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that contains schema information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_GetSchema_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_GetSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSchema(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns schema information for the data source of this <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> using the specified string for the schema name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Data.DataTable GetSchema (string collectionName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collectionName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies the name of the schema to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that contains schema information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>collectionName</code> is specified as null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You may need the schema information of the database, tables or columns. This sample:  </p>\n<ul>\n<li><p>Uses GetSchema to get schema information.  </p>\n</li>\n<li><p>Use schema restrictions to get the specified information.  </p>\n</li>\n<li><p>Gets schema information of the database, tables, and some columns.  </p>\n<p>Before you run the sample, you need to create the sample database, using the following Transact-SQL:  </p>\n</li>\n</ul>\n<pre><code>USE [master]  \nGO  \n\nCREATE DATABASE [MySchool]   \n\nGO  \n\nUSE [MySchool]  \nGO  \n\nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n\nGO  \n\nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n\nGO  \n\nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&#39;C1045&#39;, 2012, N&#39;Calculus&#39;, 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&#39;C1061&#39;, 2012, N&#39;Physics&#39;, 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&#39;C2021&#39;, 2012, N&#39;Composition&#39;, 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&#39;C2042&#39;, 2012, N&#39;Literature&#39;, 4, 2)  \n\nSET IDENTITY_INSERT [dbo].[Department] ON   \n\nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N&#39;Engineering&#39;, 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N&#39;English&#39;, 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N&#39;Economics&#39;, 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N&#39;Mathematics&#39;, 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \n\nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \n</code></pre><p> <a href=\"http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2\" data-linktype=\"external\">How to Get Schema Information from Database</a> has C# and Visual Basic versions of this code sample in a Visual Studio project.  </p>\n<pre><code>using System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n\nclass Program {  \n   static void Main(string[] args) {  \n\n      using (SqlConnection conn = new SqlConnection(&quot;Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;&quot;)) {  \n         conn.Open();  \n\n         // Get the Meta Data for Supported Schema Collections  \n         DataTable metaDataTable = conn.GetSchema(&quot;MetaDataCollections&quot;);  \n\n         Console.WriteLine(&quot;Meta Data for Supported Schema Collections:&quot;);  \n         ShowDataTable(metaDataTable, 25);  \n         Console.WriteLine();  \n\n         // Get the schema information of Databases in your instance  \n         DataTable databasesSchemaTable = conn.GetSchema(&quot;Databases&quot;);  \n\n         Console.WriteLine(&quot;Schema Information of Databases:&quot;);  \n         ShowDataTable(databasesSchemaTable, 25);  \n         Console.WriteLine();  \n\n         // First, get schema information of all the tables in current database;  \n         DataTable allTablesSchemaTable = conn.GetSchema(&quot;Tables&quot;);  \n\n         Console.WriteLine(&quot;Schema Information of All Tables:&quot;);  \n         ShowDataTable(allTablesSchemaTable, 20);  \n         Console.WriteLine();  \n\n         // You can specify the Catalog, Schema, Table Name, Table Type to get   \n         // the specified table(s).  \n         // You can use four restrictions for Table, so you should create a 4 members array.  \n         String[] tableRestrictions = new String[4];  \n\n         // For the array, 0-member represents Catalog; 1-member represents Schema;   \n         // 2-member represents Table Name; 3-member represents Table Type.   \n         // Now we specify the Table Name of the table what we want to get schema information.  \n         tableRestrictions[2] = &quot;Course&quot;;  \n\n         DataTable courseTableSchemaTable = conn.GetSchema(&quot;Tables&quot;, tableRestrictions);  \n\n         Console.WriteLine(&quot;Schema Information of Course Tables:&quot;);  \n         ShowDataTable(courseTableSchemaTable, 20);  \n         Console.WriteLine();  \n\n         // First, get schema information of all the columns in current database.  \n         DataTable allColumnsSchemaTable = conn.GetSchema(&quot;Columns&quot;);  \n\n         Console.WriteLine(&quot;Schema Information of All Columns:&quot;);  \n         ShowColumns(allColumnsSchemaTable);  \n         Console.WriteLine();  \n\n         // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).  \n         // You can use four restrictions for Column, so you should create a 4 members array.  \n         String[] columnRestrictions = new String[4];  \n\n         // For the array, 0-member represents Catalog; 1-member represents Schema;   \n         // 2-member represents Table Name; 3-member represents Column Name.   \n         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  \n         columnRestrictions[2] = &quot;Course&quot;;  \n         columnRestrictions[3] = &quot;DepartmentID&quot;;  \n\n         DataTable departmentIDSchemaTable = conn.GetSchema(&quot;Columns&quot;, columnRestrictions);  \n\n         Console.WriteLine(&quot;Schema Information of DepartmentID Column in Course Table:&quot;);  \n         ShowColumns(departmentIDSchemaTable);  \n         Console.WriteLine();  \n\n         // First, get schema information of all the IndexColumns in current database  \n         DataTable allIndexColumnsSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;);  \n\n         Console.WriteLine(&quot;Schema Information of All IndexColumns:&quot;);  \n         ShowIndexColumns(allIndexColumnsSchemaTable);  \n         Console.WriteLine();  \n\n         // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to   \n         // get the specified column(s).  \n         // You can use five restrictions for Column, so you should create a 5 members array.  \n         String[] indexColumnsRestrictions = new String[5];  \n\n         // For the array, 0-member represents Catalog; 1-member represents Schema;   \n         // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.   \n         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  \n         indexColumnsRestrictions[2] = &quot;Course&quot;;  \n         indexColumnsRestrictions[4] = &quot;CourseID&quot;;  \n\n         DataTable courseIdIndexSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;, indexColumnsRestrictions);  \n\n         Console.WriteLine(&quot;Index Schema Information of CourseID Column in Course Table:&quot;);  \n         ShowIndexColumns(courseIdIndexSchemaTable);  \n         Console.WriteLine();  \n      }  \n\n      Console.WriteLine(&quot;Please press any key to exit...&quot;);  \n      Console.ReadKey();  \n   }  \n\n   private static void ShowDataTable(DataTable table, Int32 length) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, col.ColumnName);  \n      }  \n      Console.WriteLine();  \n\n      foreach (DataRow row in table.Rows) {  \n         foreach (DataColumn col in table.Columns) {  \n            if (col.DataType.Equals(typeof(DateTime)))  \n               Console.Write(&quot;{0,-&quot; + length + &quot;:d}&quot;, row[col]);  \n            else if (col.DataType.Equals(typeof(Decimal)))  \n               Console.Write(&quot;{0,-&quot; + length + &quot;:C}&quot;, row[col]);  \n            else  \n               Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, row[col]);  \n         }  \n         Console.WriteLine();  \n      }  \n   }  \n\n   private static void ShowDataTable(DataTable table) {  \n      ShowDataTable(table, 14);  \n   }  \n\n   private static void ShowColumns(DataTable columnsTable) {  \n      var selectedRows = from info in columnsTable.AsEnumerable()  \n                         select new {  \n                            TableCatalog = info[&quot;TABLE_CATALOG&quot;],  \n                            TableSchema = info[&quot;TABLE_SCHEMA&quot;],  \n                            TableName = info[&quot;TABLE_NAME&quot;],  \n                            ColumnName = info[&quot;COLUMN_NAME&quot;],  \n                            DataType = info[&quot;DATA_TYPE&quot;]  \n                         };  \n\n      Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, &quot;TableCatalog&quot;, &quot;TABLE_SCHEMA&quot;,  \n          &quot;TABLE_NAME&quot;, &quot;COLUMN_NAME&quot;, &quot;DATA_TYPE&quot;);  \n      foreach (var row in selectedRows) {  \n         Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, row.TableCatalog,  \n             row.TableSchema, row.TableName, row.ColumnName, row.DataType);  \n      }  \n   }  \n\n   private static void ShowIndexColumns(DataTable indexColumnsTable) {  \n      var selectedRows = from info in indexColumnsTable.AsEnumerable()  \n                         select new {  \n                            TableSchema = info[&quot;table_schema&quot;],  \n                            TableName = info[&quot;table_name&quot;],  \n                            ColumnName = info[&quot;column_name&quot;],  \n                            ConstraintSchema = info[&quot;constraint_schema&quot;],  \n                            ConstraintName = info[&quot;constraint_name&quot;],  \n                            KeyType = info[&quot;KeyType&quot;]  \n                         };  \n\n      Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, &quot;table_schema&quot;, &quot;table_name&quot;, &quot;column_name&quot;, &quot;constraint_schema&quot;, &quot;constraint_name&quot;, &quot;KeyType&quot;);  \n      foreach (var row in selectedRows) {  \n         Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, row.TableSchema,  \n             row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);  \n      }  \n   }  \n}  \n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_GetSchema_System_String_System_String___\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_GetSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSchema(String,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns schema information for the data source of this <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> using the specified string for the schema name and the specified string array for the restriction values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collectionName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies the name of the schema to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>restrictionValues</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A set of restriction values for the requested schema.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that contains schema information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>collectionName</code> is specified as null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>restrictionValues</code> parameter can supply <em>n</em> depth of values, which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to <code>null</code> and then put the appropriate value in for the restriction that you would like to specify a value for.  </p>\n<p> An example of this is the &quot;Tables&quot; collection. If the &quot;Tables&quot; collection has three restrictions--database, owner, and table name--and you want to get back only the tables associated with the owner &quot;Carl&quot;, you need to pass in the following values: null, &quot;Carl&quot;. If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in <code>null</code>, which is different from passing in an empty string for the parameter value. In that case, the empty string (&quot;&quot;) is considered to be the value for the specified parameter.  </p>\n<p> For a code sample demonstrating GetSchema, see <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_GetSchema_\" data-linktype=\"relative-path\">GetSchema</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_Open\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open()</div>        \r\n          </div>\r\n    \r\n            <p>Opens a database connection with the property settings specified by the <span class=\"xref\">stem.Data.SqlClient.SqlConnection.ConnectionString*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Open ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Cannot open a connection without specifying a data source or server.  </p>\n<p> or  </p>\n<p> The connection is already open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>A connection-level error occurred while opening the connection. If the <span class=\"xref\">stem.Data.SqlClient.SqlException.Number*</span> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the <span class=\"xref\">stem.Data.SqlClient.SqlConnection.ChangePassword*</span> method for more information.  </p>\n<p> The <code>&lt;system.data.localdb&gt;</code> tag in the app.config file has invalid or unknown elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>There are two entries with the same name in the <code>&lt;localdbinstances&gt;</code> section.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to an instance of SQL Server.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Close_\" data-linktype=\"relative-path\">Close</a>.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If you specify a port number other than 1433 when you are trying to connect to an instance of SQL Server and using a protocol other than TCP/IP, the Open method fails. To specify a port number other than 1433, include &quot;server=machinename,port number&quot; in the connection string, and use the TCP/IP protocol.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The .NET Framework Data Provider for SQL Server requires the Security permission with &quot;Allows calls to unmanaged assemblies&quot; enabled (<a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a> with <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> set to <code>UnmanagedCode</code>) to open a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> with SQL Debugging enabled.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>, opens it, and displays some of its properties. The connection is automatically closed at the end of the <code>using</code> block.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlConnection.Open Example#1\">    Private Sub OpenSqlConnection(ByVal connectionString As String)\n        Using connection As New SqlConnection(connectionString)\n            connection.Open()\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion)\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State)\n        End Using\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlConnection.Open Example#1\">    private static void OpenSqlConnection(string connectionString)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            Console.WriteLine(&quot;ServerVersion: {0}&quot;, connection.ServerVersion);\n            Console.WriteLine(&quot;State: {0}&quot;, connection.State);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_OpenAsync_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_OpenAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenAsync(CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>An asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlConnection.Open*</span>, which opens a database connection with the property settings specified by the <span class=\"xref\">stem.Data.SqlClient.SqlConnection.ConnectionString*</span>. The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses.  Exceptions will be propagated via the returned Task. If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception. The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling OpenAsync more than once for the same instance before task completion.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.  </p>\n<p> A connection was not available from the connection pool before the connection time out elapsed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After calling OpenAsync, <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_State_\" data-linktype=\"relative-path\">State</a> must return <a class=\"xref\" href=\"system.data.connectionstate\" data-linktype=\"relative-path\">ConnectionState</a> until the returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> is completed. Then, if the connection was successful, <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_State_\" data-linktype=\"relative-path\">State</a> must return <a class=\"xref\" href=\"system.data.connectionstate\" data-linktype=\"relative-path\">ConnectionState</a>. If the connection fails, <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_State_\" data-linktype=\"relative-path\">State</a> must return <a class=\"xref\" href=\"system.data.connectionstate\" data-linktype=\"relative-path\">ConnectionState</a>.  </p>\n<p> A call to <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Close_\" data-linktype=\"relative-path\">Close</a> will attempt to cancel or close the corresponding OpenAsync call.  </p>\n<p> For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_RegisterColumnEncryptionKeyStoreProviders_System_Collections_Generic_IDictionary_System_String_System_Data_SqlClient_SqlColumnEncryptionKeyStoreProvider__\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_RegisterColumnEncryptionKeyStoreProviders_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegisterColumnEncryptionKeyStoreProviders(IDictionary&lt;String,SqlColumnEncryptionKeyStoreProvider&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Registers the column encryption key store providers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary&lt;string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>customProviders</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.data.sqlclient.sqlcolumnencryptionkeystoreprovider\" data-linktype=\"relative-path\">SqlColumnEncryptionKeyStoreProvider</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The custom providers</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_ResetStatistics\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_ResetStatistics_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetStatistics()</div>        \r\n          </div>\r\n    \r\n            <p>If statistics gathering is enabled, all values are reset to zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResetStatistics ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If statistics gathering is not enabled and this method is called, no error is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_RetrieveStatistics\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_RetrieveStatistics_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RetrieveStatistics()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a name value pair collection of statistics at the point in time the method is called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IDictionary RetrieveStatistics ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </div>\r\n                  <p>Returns a reference of type <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> of <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> items.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this method is called, the values retrieved are those at the current point in time. If you continue using the connection, the values are incorrect. You need to re-execute the method to obtain the most current values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_InfoMessage\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InfoMessage</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when SQL Server returns a warning or informational message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Clients that want to process warnings or informational messages sent by the server should create an <a class=\"xref\" href=\"system.data.sqlclient.sqlinfomessageeventhandler\" data-linktype=\"relative-path\">SqlInfoMessageEventHandler</a> delegate to listen to this event.  </p>\n<p> The InfoMessage event occurs when a message with a severity of 10 or less is returned by SQL Server. Messages that have a severity between 11 and 20 raise an error and messages that have a severity over 20 causes the connection to close. For more information on SQL Server error levels, see &quot;Database Engine Error Severities&quot; in SQL Server Books Online.  </p>\n<p> For more information and an example, see <a href=\"../Topic/Connection%20Events.md\" data-linktype=\"relative-path\">Connection Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlConnection_System_ICloneable_Clone\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlConnection_System_ICloneable_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICloneable.Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new object that is a copy of the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object ICloneable.Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>A new object that is a copy of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> instance is cast to an <a class=\"xref\" href=\"system.icloneable\" data-linktype=\"relative-path\">ICloneable</a> interface.  </p>\n<p> This member is only supported by the .NET Compact Framework.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlConnection.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlConnection.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection..ctor\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.AccessToken\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.BeginDbTransaction\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.BeginTransaction\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ChangeDatabase\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ChangePassword\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ClearAllPools\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ClearPool\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ClientConnectionId\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.Close\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ConnectionString\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ConnectionTimeout\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.CreateCommand\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.CreateDbCommand\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.Credential\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.Database\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.DataSource\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.DbProviderFactory\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.EnlistTransaction\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.GetSchema\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.InfoMessage\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.add_InfoMessage\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.remove_InfoMessage\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.Open\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.OpenAsync\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.PacketSize\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ResetStatistics\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.RetrieveStatistics\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ServerVersion\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.State\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.StatisticsEnabled\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.ICloneable.Clone\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlConnection.WorkstationId\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"fdf10c90-daad-f882-2d49-2a466755a8e6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an open connection to a SQL Server database. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Data.SqlClient/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.SqlClient.SqlConnection\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlConnection.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlConnection.yml","open_to_public_contributors":true,"api_name":["System.Data.SqlClient.SqlConnection","System.Data.SqlClient.SqlConnection..ctor","System.Data.SqlClient.SqlConnection.AccessToken","System.Data.SqlClient.SqlConnection.BeginDbTransaction","System.Data.SqlClient.SqlConnection.BeginTransaction","System.Data.SqlClient.SqlConnection.ChangeDatabase","System.Data.SqlClient.SqlConnection.ChangePassword","System.Data.SqlClient.SqlConnection.ClearAllPools","System.Data.SqlClient.SqlConnection.ClearPool","System.Data.SqlClient.SqlConnection.ClientConnectionId","System.Data.SqlClient.SqlConnection.Close","System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl","System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled","System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths","System.Data.SqlClient.SqlConnection.ConnectionString","System.Data.SqlClient.SqlConnection.ConnectionTimeout","System.Data.SqlClient.SqlConnection.CreateCommand","System.Data.SqlClient.SqlConnection.CreateDbCommand","System.Data.SqlClient.SqlConnection.Credential","System.Data.SqlClient.SqlConnection.Database","System.Data.SqlClient.SqlConnection.DataSource","System.Data.SqlClient.SqlConnection.DbProviderFactory","System.Data.SqlClient.SqlConnection.Dispose","System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction","System.Data.SqlClient.SqlConnection.EnlistTransaction","System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors","System.Data.SqlClient.SqlConnection.GetSchema","System.Data.SqlClient.SqlConnection.InfoMessage","System.Data.SqlClient.SqlConnection.add_InfoMessage","System.Data.SqlClient.SqlConnection.remove_InfoMessage","System.Data.SqlClient.SqlConnection.Open","System.Data.SqlClient.SqlConnection.OpenAsync","System.Data.SqlClient.SqlConnection.PacketSize","System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders","System.Data.SqlClient.SqlConnection.ResetStatistics","System.Data.SqlClient.SqlConnection.RetrieveStatistics","System.Data.SqlClient.SqlConnection.ServerVersion","System.Data.SqlClient.SqlConnection.State","System.Data.SqlClient.SqlConnection.StatisticsEnabled","System.Data.SqlClient.SqlConnection.ICloneable.Clone","System.Data.SqlClient.SqlConnection.WorkstationId"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.SqlClient.SqlConnection","System::Data::SqlClient::SqlConnection","System.Data.SqlClient.SqlConnection.#ctor","System::Data::SqlClient::SqlConnection::#ctor","System.Data.SqlClient.SqlConnection.AccessToken","System::Data::SqlClient::SqlConnection::AccessToken","System.Data.SqlClient.SqlConnection.BeginDbTransaction","System::Data::SqlClient::SqlConnection::BeginDbTransaction","System.Data.SqlClient.SqlConnection.BeginTransaction","System::Data::SqlClient::SqlConnection::BeginTransaction","System.Data.SqlClient.SqlConnection.ChangeDatabase","System::Data::SqlClient::SqlConnection::ChangeDatabase","System.Data.SqlClient.SqlConnection.ChangePassword","System::Data::SqlClient::SqlConnection::ChangePassword","System.Data.SqlClient.SqlConnection.ClearAllPools","System::Data::SqlClient::SqlConnection::ClearAllPools","System.Data.SqlClient.SqlConnection.ClearPool","System::Data::SqlClient::SqlConnection::ClearPool","System.Data.SqlClient.SqlConnection.ClientConnectionId","System::Data::SqlClient::SqlConnection::ClientConnectionId","System.Data.SqlClient.SqlConnection.Close","System::Data::SqlClient::SqlConnection::Close","System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl","System::Data::SqlClient::SqlConnection::ColumnEncryptionKeyCacheTtl","System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled","System::Data::SqlClient::SqlConnection::ColumnEncryptionQueryMetadataCacheEnabled","System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths","System::Data::SqlClient::SqlConnection::ColumnEncryptionTrustedMasterKeyPaths","System.Data.SqlClient.SqlConnection.ConnectionString","System::Data::SqlClient::SqlConnection::ConnectionString","System.Data.SqlClient.SqlConnection.ConnectionTimeout","System::Data::SqlClient::SqlConnection::ConnectionTimeout","System.Data.SqlClient.SqlConnection.CreateCommand","System::Data::SqlClient::SqlConnection::CreateCommand","System.Data.SqlClient.SqlConnection.CreateDbCommand","System::Data::SqlClient::SqlConnection::CreateDbCommand","System.Data.SqlClient.SqlConnection.Credential","System::Data::SqlClient::SqlConnection::Credential","System.Data.SqlClient.SqlConnection.Database","System::Data::SqlClient::SqlConnection::Database","System.Data.SqlClient.SqlConnection.DataSource","System::Data::SqlClient::SqlConnection::DataSource","System.Data.SqlClient.SqlConnection.DbProviderFactory","System::Data::SqlClient::SqlConnection::DbProviderFactory","System.Data.SqlClient.SqlConnection.Dispose","System::Data::SqlClient::SqlConnection::Dispose","System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction","System::Data::SqlClient::SqlConnection::EnlistDistributedTransaction","System.Data.SqlClient.SqlConnection.EnlistTransaction","System::Data::SqlClient::SqlConnection::EnlistTransaction","System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors","System::Data::SqlClient::SqlConnection::FireInfoMessageEventOnUserErrors","System.Data.SqlClient.SqlConnection.GetSchema","System::Data::SqlClient::SqlConnection::GetSchema","System.Data.SqlClient.SqlConnection.InfoMessage","System::Data::SqlClient::SqlConnection::InfoMessage","System.Data.SqlClient.SqlConnection.Open","System::Data::SqlClient::SqlConnection::Open","System.Data.SqlClient.SqlConnection.OpenAsync","System::Data::SqlClient::SqlConnection::OpenAsync","System.Data.SqlClient.SqlConnection.PacketSize","System::Data::SqlClient::SqlConnection::PacketSize","System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders","System::Data::SqlClient::SqlConnection::RegisterColumnEncryptionKeyStoreProviders","System.Data.SqlClient.SqlConnection.ResetStatistics","System::Data::SqlClient::SqlConnection::ResetStatistics","System.Data.SqlClient.SqlConnection.RetrieveStatistics","System::Data::SqlClient::SqlConnection::RetrieveStatistics","System.Data.SqlClient.SqlConnection.ServerVersion","System::Data::SqlClient::SqlConnection::ServerVersion","System.Data.SqlClient.SqlConnection.State","System::Data::SqlClient::SqlConnection::State","System.Data.SqlClient.SqlConnection.StatisticsEnabled","System::Data::SqlClient::SqlConnection::StatisticsEnabled","System.Data.SqlClient.SqlConnection.System#ICloneable#Clone","System::Data::SqlClient::SqlConnection::System#ICloneable#Clone","System.Data.SqlClient.SqlConnection.WorkstationId","System::Data::SqlClient::SqlConnection::WorkstationId"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"fdf10c90-daad-f882-2d49-2a466755a8e6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Data.SqlClient/SqlConnection.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SqlConnection class | Microsoft Docs","_op_ogTitle":"SqlConnection class","description":"Represents an open connection to a SQL Server database. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Data.SqlClient/toc.json","toc_rel":"_splitted/System.Data.SqlClient/toc.json","source_url":"","ms.assetid":"System.Data.SqlClient.SqlConnection","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlconnection","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlconnection","fileRelativePath":"System.Data.SqlClient.SqlConnection.html"},"themesRelativePathToOutputRoot":"_themes/"}