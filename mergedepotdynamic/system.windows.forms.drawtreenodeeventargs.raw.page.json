{"content":"    \r\n    <h1 id=\"System_Windows_Forms_DrawTreeNodeEventArgs\">\r\n      <span class=\"lang-csharp\">DrawTreeNodeEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class DrawTreeNodeEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DrawTreeNodeEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event to customize the appearance of nodes in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event is raised by a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control when its <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a> or <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a> and a node is displayed or updated. The DrawTreeNodeEventArgs passed to the event handler contains information about the node to draw as well as providing methods to help you draw the node.  </p>\n<p> Use the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_State_\" data-linktype=\"relative-path\">State</a> or <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Node_\" data-linktype=\"relative-path\">Node</a> properties to retrieve information about the node to draw. Use the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Graphics_\" data-linktype=\"relative-path\">Graphics</a> property to do the actual drawing within the area specified by the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> property. To make the operating system draw a node that does not need to be owner drawn, set the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\" data-linktype=\"relative-path\">DrawDefault</a> property to <code>true</code>.  </p>\n<p> When the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a>, the area indicated by the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> property includes the label portion of the node only. When the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a>, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> area includes the entire node, including the area typically used for icons, checkboxes, plus and minus signs, and lines connecting the nodes.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DrawTreeNodeEventArgs__ctor_System_Drawing_Graphics_System_Windows_Forms_TreeNode_System_Drawing_Rectangle_System_Windows_Forms_TreeNodeStates_\" data-linktype=\"self-bookmark\">DrawTreeNodeEventArgs(Graphics,TreeNode,Rectangle,TreeNodeStates)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds\" data-linktype=\"self-bookmark\">Bounds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size and location of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault\" data-linktype=\"self-bookmark\">DrawDefault</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> should be drawn by the operating system rather than being owner drawn.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DrawTreeNodeEventArgs_Graphics\" data-linktype=\"self-bookmark\">Graphics</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object used to draw the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DrawTreeNodeEventArgs_Node\" data-linktype=\"self-bookmark\">Node</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DrawTreeNodeEventArgs_State\" data-linktype=\"self-bookmark\">State</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs__ctor_System_Drawing_Graphics_System_Windows_Forms_TreeNode_System_Drawing_Rectangle_System_Windows_Forms_TreeNodeStates_\">\r\n    \r\n            <a id=\"System_Windows_Forms_DrawTreeNodeEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DrawTreeNodeEventArgs(Graphics,TreeNode,Rectangle,TreeNodeStates)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DrawTreeNodeEventArgs (System.Drawing.Graphics graphics, System.Windows.Forms.TreeNode node, System.Drawing.Rectangle bounds, System.Windows.Forms.TreeNodeStates state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>graphics</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> surface on which to draw.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>node</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bounds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> within which to draw.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodestates\" data-linktype=\"relative-path\">TreeNodeStates</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.treenodestates\" data-linktype=\"relative-path\">TreeNodeStates</a> values indicating the current state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Bounds\">\r\n    \r\n            <a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bounds</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size and location of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle Bounds { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the bounds of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The location specified by this property is relative to the upper-left corner of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.  </p>\n<p> When the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>, the area specified by the Bounds property is the region in which a node can be clicked to select it. If you draw outside this hit test region, you should provide your own code for selecting a node when its visible area is clicked. You may also want to provide your own hit test code when the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>. In this mode, the Bounds property encompasses the whole node across the entire width of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control, rather than the just hit test region.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to customize a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control in the example displays optional node tags alongside the standard node labels. Node tags are specified using the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control also uses custom colors, including a custom highlight color.  </p>\n<p> You can customize most of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  </p>\n<p> In the example, a handler for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> event draws the node tags and the custom selection highlight manually. Unselected nodes do not need customization. For these, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\" data-linktype=\"relative-path\">DrawDefault</a> property is set to <code>true</code> so that they will be drawn by the operating system.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> overview reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#3\">    &#39; Draws a node.\n    Private Sub myTreeView_DrawNode(ByVal sender As Object, _\n        ByVal e As DrawTreeNodeEventArgs) Handles myTreeView.DrawNode\n\n        &#39; Draw the background and node text for a selected node.\n        If (e.State And TreeNodeStates.Selected) &lt;&gt; 0 Then\n\n            &#39; Draw the background of the selected node. The NodeBounds\n            &#39; method makes the highlight rectangle large enough to\n            &#39; include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node))\n\n            &#39; Retrieve the node font. If the node font has not been set,\n            &#39; use the TreeView font.\n            Dim nodeFont As Font = e.Node.NodeFont\n            If nodeFont Is Nothing Then\n                nodeFont = CType(sender, TreeView).Font\n            End If\n\n            &#39; Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White, _\n                e.Bounds.Left - 2, e.Bounds.Top)\n\n        &#39; Use the default background and node text.\n        Else\n            e.DrawDefault = True\n        End If\n\n        &#39; If a node tag is present, draw its string representation \n        &#39; to the right of the label text.\n        If (e.Node.Tag IsNot Nothing) Then\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont, _\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top)\n        End If\n\n        &#39; If the node has focus, draw the focus rectangle large, making\n        &#39; it large enough to include the text of the node tag, if present.\n        If (e.State And TreeNodeStates.Focused) &lt;&gt; 0 Then\n            Dim focusPen As New Pen(Color.Black)\n            Try\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot\n                Dim focusBounds As Rectangle = NodeBounds(e.Node)\n                focusBounds.Size = New Size(focusBounds.Width - 1, _\n                    focusBounds.Height - 1)\n                e.Graphics.DrawRectangle(focusPen, focusBounds)\n            Finally\n                focusPen.Dispose()\n            End Try\n        End If\n\n    End Sub &#39;myTreeView_DrawNode\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#3\">   // Draws a node.\nprivate:\n   void myTreeView_DrawNode( Object^ sender, DrawTreeNodeEventArgs^ e )\n   {\n      // Draw the background and node text for a selected node.\n      if ( (e-&gt;State &amp; TreeNodeStates::Selected) != (TreeNodeStates)0 )\n      {\n         // Draw the background of the selected node. The NodeBounds\n         // method makes the highlight rectangle large enough to\n         // include the text of a node tag, if one is present.\n         e-&gt;Graphics-&gt;FillRectangle( Brushes::Green, NodeBounds( e-&gt;Node ) );\n\n         // Retrieve the node font. If the node font has not been set,\n         // use the TreeView font.\n         System::Drawing::Font^ nodeFont = e-&gt;Node-&gt;NodeFont;\n         if ( nodeFont == nullptr )\n                  nodeFont = (dynamic_cast&lt;TreeView^&gt;(sender))-&gt;Font;\n\n         // Draw the node text.\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Text, nodeFont, Brushes::White, Rectangle::Inflate( e-&gt;Bounds, 2, 0 ) );\n      }\n      // Use the default background and node text.\n      else\n      {\n         e-&gt;DrawDefault = true;\n      }\n\n      // If a node tag is present, draw its string representation \n      // to the right of the label text.\n      if ( e-&gt;Node-&gt;Tag != nullptr )\n      {\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Tag-&gt;ToString(), tagFont, Brushes::Yellow, (float)e-&gt;Bounds.Right + 2, (float)e-&gt;Bounds.Top );\n      }\n\n      \n      // If the node has focus, draw the focus rectangle large, making\n      // it large enough to include the text of the node tag, if present.\n      if ( (e-&gt;State &amp; TreeNodeStates::Focused) != (TreeNodeStates)0 )\n      {\n         Pen^ focusPen = gcnew Pen( Color::Black );\n         try\n         {\n            focusPen-&gt;DashStyle = System::Drawing::Drawing2D::DashStyle::Dot;\n            Rectangle focusBounds = NodeBounds( e-&gt;Node );\n            focusBounds.Size = System::Drawing::Size( focusBounds.Width - 1, focusBounds.Height - 1 );\n            e-&gt;Graphics-&gt;DrawRectangle( focusPen, focusBounds );\n         }\n         finally\n         {\n            if ( focusPen )\n               delete safe_cast&lt;IDisposable^&gt;(focusPen);\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#3\">    // Draws a node.\n    private void myTreeView_DrawNode(\n        object sender, DrawTreeNodeEventArgs e)\n    {\n        // Draw the background and node text for a selected node.\n        if ((e.State &amp; TreeNodeStates.Selected) != 0)\n        {\n            // Draw the background of the selected node. The NodeBounds\n            // method makes the highlight rectangle large enough to\n            // include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node));\n\n            // Retrieve the node font. If the node font has not been set,\n            // use the TreeView font.\n            Font nodeFont = e.Node.NodeFont;\n            if (nodeFont == null) nodeFont = ((TreeView)sender).Font;\n\n            // Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White,\n                Rectangle.Inflate(e.Bounds, 2, 0));\n        }\n\n        // Use the default background and node text.\n        else \n        {\n            e.DrawDefault = true;\n        }\n\n        // If a node tag is present, draw its string representation \n        // to the right of the label text.\n        if (e.Node.Tag != null)\n        {\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont,\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top);\n        }\n\n        // If the node has focus, draw the focus rectangle large, making\n        // it large enough to include the text of the node tag, if present.\n        if ((e.State &amp; TreeNodeStates.Focused) != 0)\n        {\n            using (Pen focusPen = new Pen(Color.Black))\n            {\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;\n                Rectangle focusBounds = NodeBounds(e.Node);\n                focusBounds.Size = new Size(focusBounds.Width - 1, \n                focusBounds.Height - 1);\n                e.Graphics.DrawRectangle(focusPen, focusBounds);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault\">\r\n    \r\n            <a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DrawDefault</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> should be drawn by the operating system rather than being owner drawn.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DrawDefault { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the node should be drawn by the operating system; <code>false</code> if the node will be drawn in the event handler. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to <code>true</code> for nodes that you do not want to customize when you handle the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event. For example, this is useful when you want to customize only nodes that are in a specific state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this property. In the example, a handler for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> event draws the node tag and a custom highlight color manually for the selected node. Nodes that are not selected do not need customization. For unselected nodes, the DrawDefault property is set to <code>true</code> so that they will be drawn by the operating system and will not have a customized appearance.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you draw a node manually and also set the DrawDefault property to <code>true</code>, some or all of what you draw may be overwritten by the operating system.  </p>\n</div>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> overview reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#3\">    &#39; Draws a node.\n    Private Sub myTreeView_DrawNode(ByVal sender As Object, _\n        ByVal e As DrawTreeNodeEventArgs) Handles myTreeView.DrawNode\n\n        &#39; Draw the background and node text for a selected node.\n        If (e.State And TreeNodeStates.Selected) &lt;&gt; 0 Then\n\n            &#39; Draw the background of the selected node. The NodeBounds\n            &#39; method makes the highlight rectangle large enough to\n            &#39; include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node))\n\n            &#39; Retrieve the node font. If the node font has not been set,\n            &#39; use the TreeView font.\n            Dim nodeFont As Font = e.Node.NodeFont\n            If nodeFont Is Nothing Then\n                nodeFont = CType(sender, TreeView).Font\n            End If\n\n            &#39; Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White, _\n                e.Bounds.Left - 2, e.Bounds.Top)\n\n        &#39; Use the default background and node text.\n        Else\n            e.DrawDefault = True\n        End If\n\n        &#39; If a node tag is present, draw its string representation \n        &#39; to the right of the label text.\n        If (e.Node.Tag IsNot Nothing) Then\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont, _\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top)\n        End If\n\n        &#39; If the node has focus, draw the focus rectangle large, making\n        &#39; it large enough to include the text of the node tag, if present.\n        If (e.State And TreeNodeStates.Focused) &lt;&gt; 0 Then\n            Dim focusPen As New Pen(Color.Black)\n            Try\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot\n                Dim focusBounds As Rectangle = NodeBounds(e.Node)\n                focusBounds.Size = New Size(focusBounds.Width - 1, _\n                    focusBounds.Height - 1)\n                e.Graphics.DrawRectangle(focusPen, focusBounds)\n            Finally\n                focusPen.Dispose()\n            End Try\n        End If\n\n    End Sub &#39;myTreeView_DrawNode\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#3\">   // Draws a node.\nprivate:\n   void myTreeView_DrawNode( Object^ sender, DrawTreeNodeEventArgs^ e )\n   {\n      // Draw the background and node text for a selected node.\n      if ( (e-&gt;State &amp; TreeNodeStates::Selected) != (TreeNodeStates)0 )\n      {\n         // Draw the background of the selected node. The NodeBounds\n         // method makes the highlight rectangle large enough to\n         // include the text of a node tag, if one is present.\n         e-&gt;Graphics-&gt;FillRectangle( Brushes::Green, NodeBounds( e-&gt;Node ) );\n\n         // Retrieve the node font. If the node font has not been set,\n         // use the TreeView font.\n         System::Drawing::Font^ nodeFont = e-&gt;Node-&gt;NodeFont;\n         if ( nodeFont == nullptr )\n                  nodeFont = (dynamic_cast&lt;TreeView^&gt;(sender))-&gt;Font;\n\n         // Draw the node text.\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Text, nodeFont, Brushes::White, Rectangle::Inflate( e-&gt;Bounds, 2, 0 ) );\n      }\n      // Use the default background and node text.\n      else\n      {\n         e-&gt;DrawDefault = true;\n      }\n\n      // If a node tag is present, draw its string representation \n      // to the right of the label text.\n      if ( e-&gt;Node-&gt;Tag != nullptr )\n      {\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Tag-&gt;ToString(), tagFont, Brushes::Yellow, (float)e-&gt;Bounds.Right + 2, (float)e-&gt;Bounds.Top );\n      }\n\n      \n      // If the node has focus, draw the focus rectangle large, making\n      // it large enough to include the text of the node tag, if present.\n      if ( (e-&gt;State &amp; TreeNodeStates::Focused) != (TreeNodeStates)0 )\n      {\n         Pen^ focusPen = gcnew Pen( Color::Black );\n         try\n         {\n            focusPen-&gt;DashStyle = System::Drawing::Drawing2D::DashStyle::Dot;\n            Rectangle focusBounds = NodeBounds( e-&gt;Node );\n            focusBounds.Size = System::Drawing::Size( focusBounds.Width - 1, focusBounds.Height - 1 );\n            e-&gt;Graphics-&gt;DrawRectangle( focusPen, focusBounds );\n         }\n         finally\n         {\n            if ( focusPen )\n               delete safe_cast&lt;IDisposable^&gt;(focusPen);\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#3\">    // Draws a node.\n    private void myTreeView_DrawNode(\n        object sender, DrawTreeNodeEventArgs e)\n    {\n        // Draw the background and node text for a selected node.\n        if ((e.State &amp; TreeNodeStates.Selected) != 0)\n        {\n            // Draw the background of the selected node. The NodeBounds\n            // method makes the highlight rectangle large enough to\n            // include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node));\n\n            // Retrieve the node font. If the node font has not been set,\n            // use the TreeView font.\n            Font nodeFont = e.Node.NodeFont;\n            if (nodeFont == null) nodeFont = ((TreeView)sender).Font;\n\n            // Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White,\n                Rectangle.Inflate(e.Bounds, 2, 0));\n        }\n\n        // Use the default background and node text.\n        else \n        {\n            e.DrawDefault = true;\n        }\n\n        // If a node tag is present, draw its string representation \n        // to the right of the label text.\n        if (e.Node.Tag != null)\n        {\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont,\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top);\n        }\n\n        // If the node has focus, draw the focus rectangle large, making\n        // it large enough to include the text of the node tag, if present.\n        if ((e.State &amp; TreeNodeStates.Focused) != 0)\n        {\n            using (Pen focusPen = new Pen(Color.Black))\n            {\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;\n                Rectangle focusBounds = NodeBounds(e.Node);\n                focusBounds.Size = new Size(focusBounds.Width - 1, \n                focusBounds.Height - 1);\n                e.Graphics.DrawRectangle(focusPen, focusBounds);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Graphics\">\r\n    \r\n            <a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Graphics_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Graphics</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object used to draw the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Graphics Graphics { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> used to draw the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> class provides properties and methods useful for drawing on the display device.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to customize a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control in the example displays optional node tags alongside the standard node labels. Node tags are specified using the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control also uses custom colors, including a custom highlight color.  </p>\n<p> You can customize most of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  </p>\n<p> In the example, a handler for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> event draws the node tags and the custom selection highlight manually. Unselected nodes do not need customization. For these, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\" data-linktype=\"relative-path\">DrawDefault</a> property is set to <code>true</code> so that they will be drawn by the operating system.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> overview reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#3\">    &#39; Draws a node.\n    Private Sub myTreeView_DrawNode(ByVal sender As Object, _\n        ByVal e As DrawTreeNodeEventArgs) Handles myTreeView.DrawNode\n\n        &#39; Draw the background and node text for a selected node.\n        If (e.State And TreeNodeStates.Selected) &lt;&gt; 0 Then\n\n            &#39; Draw the background of the selected node. The NodeBounds\n            &#39; method makes the highlight rectangle large enough to\n            &#39; include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node))\n\n            &#39; Retrieve the node font. If the node font has not been set,\n            &#39; use the TreeView font.\n            Dim nodeFont As Font = e.Node.NodeFont\n            If nodeFont Is Nothing Then\n                nodeFont = CType(sender, TreeView).Font\n            End If\n\n            &#39; Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White, _\n                e.Bounds.Left - 2, e.Bounds.Top)\n\n        &#39; Use the default background and node text.\n        Else\n            e.DrawDefault = True\n        End If\n\n        &#39; If a node tag is present, draw its string representation \n        &#39; to the right of the label text.\n        If (e.Node.Tag IsNot Nothing) Then\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont, _\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top)\n        End If\n\n        &#39; If the node has focus, draw the focus rectangle large, making\n        &#39; it large enough to include the text of the node tag, if present.\n        If (e.State And TreeNodeStates.Focused) &lt;&gt; 0 Then\n            Dim focusPen As New Pen(Color.Black)\n            Try\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot\n                Dim focusBounds As Rectangle = NodeBounds(e.Node)\n                focusBounds.Size = New Size(focusBounds.Width - 1, _\n                    focusBounds.Height - 1)\n                e.Graphics.DrawRectangle(focusPen, focusBounds)\n            Finally\n                focusPen.Dispose()\n            End Try\n        End If\n\n    End Sub &#39;myTreeView_DrawNode\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#3\">   // Draws a node.\nprivate:\n   void myTreeView_DrawNode( Object^ sender, DrawTreeNodeEventArgs^ e )\n   {\n      // Draw the background and node text for a selected node.\n      if ( (e-&gt;State &amp; TreeNodeStates::Selected) != (TreeNodeStates)0 )\n      {\n         // Draw the background of the selected node. The NodeBounds\n         // method makes the highlight rectangle large enough to\n         // include the text of a node tag, if one is present.\n         e-&gt;Graphics-&gt;FillRectangle( Brushes::Green, NodeBounds( e-&gt;Node ) );\n\n         // Retrieve the node font. If the node font has not been set,\n         // use the TreeView font.\n         System::Drawing::Font^ nodeFont = e-&gt;Node-&gt;NodeFont;\n         if ( nodeFont == nullptr )\n                  nodeFont = (dynamic_cast&lt;TreeView^&gt;(sender))-&gt;Font;\n\n         // Draw the node text.\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Text, nodeFont, Brushes::White, Rectangle::Inflate( e-&gt;Bounds, 2, 0 ) );\n      }\n      // Use the default background and node text.\n      else\n      {\n         e-&gt;DrawDefault = true;\n      }\n\n      // If a node tag is present, draw its string representation \n      // to the right of the label text.\n      if ( e-&gt;Node-&gt;Tag != nullptr )\n      {\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Tag-&gt;ToString(), tagFont, Brushes::Yellow, (float)e-&gt;Bounds.Right + 2, (float)e-&gt;Bounds.Top );\n      }\n\n      \n      // If the node has focus, draw the focus rectangle large, making\n      // it large enough to include the text of the node tag, if present.\n      if ( (e-&gt;State &amp; TreeNodeStates::Focused) != (TreeNodeStates)0 )\n      {\n         Pen^ focusPen = gcnew Pen( Color::Black );\n         try\n         {\n            focusPen-&gt;DashStyle = System::Drawing::Drawing2D::DashStyle::Dot;\n            Rectangle focusBounds = NodeBounds( e-&gt;Node );\n            focusBounds.Size = System::Drawing::Size( focusBounds.Width - 1, focusBounds.Height - 1 );\n            e-&gt;Graphics-&gt;DrawRectangle( focusPen, focusBounds );\n         }\n         finally\n         {\n            if ( focusPen )\n               delete safe_cast&lt;IDisposable^&gt;(focusPen);\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#3\">    // Draws a node.\n    private void myTreeView_DrawNode(\n        object sender, DrawTreeNodeEventArgs e)\n    {\n        // Draw the background and node text for a selected node.\n        if ((e.State &amp; TreeNodeStates.Selected) != 0)\n        {\n            // Draw the background of the selected node. The NodeBounds\n            // method makes the highlight rectangle large enough to\n            // include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node));\n\n            // Retrieve the node font. If the node font has not been set,\n            // use the TreeView font.\n            Font nodeFont = e.Node.NodeFont;\n            if (nodeFont == null) nodeFont = ((TreeView)sender).Font;\n\n            // Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White,\n                Rectangle.Inflate(e.Bounds, 2, 0));\n        }\n\n        // Use the default background and node text.\n        else \n        {\n            e.DrawDefault = true;\n        }\n\n        // If a node tag is present, draw its string representation \n        // to the right of the label text.\n        if (e.Node.Tag != null)\n        {\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont,\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top);\n        }\n\n        // If the node has focus, draw the focus rectangle large, making\n        // it large enough to include the text of the node tag, if present.\n        if ((e.State &amp; TreeNodeStates.Focused) != 0)\n        {\n            using (Pen focusPen = new Pen(Color.Black))\n            {\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;\n                Rectangle focusBounds = NodeBounds(e.Node);\n                focusBounds.Size = new Size(focusBounds.Width - 1, \n                focusBounds.Height - 1);\n                e.Graphics.DrawRectangle(focusPen, focusBounds);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Node\">\r\n    \r\n            <a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Node_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Node</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode Node { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to access the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> object to draw. This is useful when the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_State_\" data-linktype=\"relative-path\">State</a> property does not provide adequate information to meet your needs. The <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_State_\" data-linktype=\"relative-path\">State</a> property provides only basic state information that you can use, for example, to determine whether a node is selected, checked, or focused. The Node property, on the other hand, allows you to access all members of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> object. You must access the node directly, for example, when you want to determine its expansion state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to customize a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control in the example displays optional node tags alongside the standard node labels. Node tags are specified using the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control also uses custom colors, including a custom highlight color.  </p>\n<p> You can customize most of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  </p>\n<p> In the example, a handler for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> event draws the node tags and the custom selection highlight manually. Unselected nodes do not need customization. For these, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\" data-linktype=\"relative-path\">DrawDefault</a> property is set to <code>true</code> so that they will be drawn by the operating system.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> overview reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#3\">    &#39; Draws a node.\n    Private Sub myTreeView_DrawNode(ByVal sender As Object, _\n        ByVal e As DrawTreeNodeEventArgs) Handles myTreeView.DrawNode\n\n        &#39; Draw the background and node text for a selected node.\n        If (e.State And TreeNodeStates.Selected) &lt;&gt; 0 Then\n\n            &#39; Draw the background of the selected node. The NodeBounds\n            &#39; method makes the highlight rectangle large enough to\n            &#39; include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node))\n\n            &#39; Retrieve the node font. If the node font has not been set,\n            &#39; use the TreeView font.\n            Dim nodeFont As Font = e.Node.NodeFont\n            If nodeFont Is Nothing Then\n                nodeFont = CType(sender, TreeView).Font\n            End If\n\n            &#39; Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White, _\n                e.Bounds.Left - 2, e.Bounds.Top)\n\n        &#39; Use the default background and node text.\n        Else\n            e.DrawDefault = True\n        End If\n\n        &#39; If a node tag is present, draw its string representation \n        &#39; to the right of the label text.\n        If (e.Node.Tag IsNot Nothing) Then\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont, _\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top)\n        End If\n\n        &#39; If the node has focus, draw the focus rectangle large, making\n        &#39; it large enough to include the text of the node tag, if present.\n        If (e.State And TreeNodeStates.Focused) &lt;&gt; 0 Then\n            Dim focusPen As New Pen(Color.Black)\n            Try\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot\n                Dim focusBounds As Rectangle = NodeBounds(e.Node)\n                focusBounds.Size = New Size(focusBounds.Width - 1, _\n                    focusBounds.Height - 1)\n                e.Graphics.DrawRectangle(focusPen, focusBounds)\n            Finally\n                focusPen.Dispose()\n            End Try\n        End If\n\n    End Sub &#39;myTreeView_DrawNode\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#3\">   // Draws a node.\nprivate:\n   void myTreeView_DrawNode( Object^ sender, DrawTreeNodeEventArgs^ e )\n   {\n      // Draw the background and node text for a selected node.\n      if ( (e-&gt;State &amp; TreeNodeStates::Selected) != (TreeNodeStates)0 )\n      {\n         // Draw the background of the selected node. The NodeBounds\n         // method makes the highlight rectangle large enough to\n         // include the text of a node tag, if one is present.\n         e-&gt;Graphics-&gt;FillRectangle( Brushes::Green, NodeBounds( e-&gt;Node ) );\n\n         // Retrieve the node font. If the node font has not been set,\n         // use the TreeView font.\n         System::Drawing::Font^ nodeFont = e-&gt;Node-&gt;NodeFont;\n         if ( nodeFont == nullptr )\n                  nodeFont = (dynamic_cast&lt;TreeView^&gt;(sender))-&gt;Font;\n\n         // Draw the node text.\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Text, nodeFont, Brushes::White, Rectangle::Inflate( e-&gt;Bounds, 2, 0 ) );\n      }\n      // Use the default background and node text.\n      else\n      {\n         e-&gt;DrawDefault = true;\n      }\n\n      // If a node tag is present, draw its string representation \n      // to the right of the label text.\n      if ( e-&gt;Node-&gt;Tag != nullptr )\n      {\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Tag-&gt;ToString(), tagFont, Brushes::Yellow, (float)e-&gt;Bounds.Right + 2, (float)e-&gt;Bounds.Top );\n      }\n\n      \n      // If the node has focus, draw the focus rectangle large, making\n      // it large enough to include the text of the node tag, if present.\n      if ( (e-&gt;State &amp; TreeNodeStates::Focused) != (TreeNodeStates)0 )\n      {\n         Pen^ focusPen = gcnew Pen( Color::Black );\n         try\n         {\n            focusPen-&gt;DashStyle = System::Drawing::Drawing2D::DashStyle::Dot;\n            Rectangle focusBounds = NodeBounds( e-&gt;Node );\n            focusBounds.Size = System::Drawing::Size( focusBounds.Width - 1, focusBounds.Height - 1 );\n            e-&gt;Graphics-&gt;DrawRectangle( focusPen, focusBounds );\n         }\n         finally\n         {\n            if ( focusPen )\n               delete safe_cast&lt;IDisposable^&gt;(focusPen);\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#3\">    // Draws a node.\n    private void myTreeView_DrawNode(\n        object sender, DrawTreeNodeEventArgs e)\n    {\n        // Draw the background and node text for a selected node.\n        if ((e.State &amp; TreeNodeStates.Selected) != 0)\n        {\n            // Draw the background of the selected node. The NodeBounds\n            // method makes the highlight rectangle large enough to\n            // include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node));\n\n            // Retrieve the node font. If the node font has not been set,\n            // use the TreeView font.\n            Font nodeFont = e.Node.NodeFont;\n            if (nodeFont == null) nodeFont = ((TreeView)sender).Font;\n\n            // Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White,\n                Rectangle.Inflate(e.Bounds, 2, 0));\n        }\n\n        // Use the default background and node text.\n        else \n        {\n            e.DrawDefault = true;\n        }\n\n        // If a node tag is present, draw its string representation \n        // to the right of the label text.\n        if (e.Node.Tag != null)\n        {\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont,\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top);\n        }\n\n        // If the node has focus, draw the focus rectangle large, making\n        // it large enough to include the text of the node tag, if present.\n        if ((e.State &amp; TreeNodeStates.Focused) != 0)\n        {\n            using (Pen focusPen = new Pen(Color.Black))\n            {\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;\n                Rectangle focusBounds = NodeBounds(e.Node);\n                focusBounds.Size = new Size(focusBounds.Width - 1, \n                focusBounds.Height - 1);\n                e.Graphics.DrawRectangle(focusPen, focusBounds);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_State\">\r\n    \r\n            <a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_State_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">State</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNodeStates State { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodestates\" data-linktype=\"relative-path\">TreeNodeStates</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.treenodestates\" data-linktype=\"relative-path\">TreeNodeStates</a> values indicating the current state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to check whether the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> object to draw is in a particular state. This property provides only basic state information about the node. You can use this property, for example, to determine whether a node is selected, checked, or focused. If you need to know more, retrieve the node through the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Node_\" data-linktype=\"relative-path\">Node</a> property. For example, to determine whether the node is expanded, you must retrieve the node and check the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_IsExpanded_\" data-linktype=\"relative-path\">IsExpanded</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to customize a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control in the example displays optional node tags alongside the standard node labels. Node tags are specified using the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control also uses custom colors, including a custom highlight color.  </p>\n<p> You can customize most of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  </p>\n<p> In the example, a handler for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> event draws the node tags and the custom selection highlight manually. Unselected nodes do not need customization. For these, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\" data-linktype=\"relative-path\">DrawDefault</a> property is set to <code>true</code> so that they will be drawn by the operating system.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> overview reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#3\">    &#39; Draws a node.\n    Private Sub myTreeView_DrawNode(ByVal sender As Object, _\n        ByVal e As DrawTreeNodeEventArgs) Handles myTreeView.DrawNode\n\n        &#39; Draw the background and node text for a selected node.\n        If (e.State And TreeNodeStates.Selected) &lt;&gt; 0 Then\n\n            &#39; Draw the background of the selected node. The NodeBounds\n            &#39; method makes the highlight rectangle large enough to\n            &#39; include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node))\n\n            &#39; Retrieve the node font. If the node font has not been set,\n            &#39; use the TreeView font.\n            Dim nodeFont As Font = e.Node.NodeFont\n            If nodeFont Is Nothing Then\n                nodeFont = CType(sender, TreeView).Font\n            End If\n\n            &#39; Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White, _\n                e.Bounds.Left - 2, e.Bounds.Top)\n\n        &#39; Use the default background and node text.\n        Else\n            e.DrawDefault = True\n        End If\n\n        &#39; If a node tag is present, draw its string representation \n        &#39; to the right of the label text.\n        If (e.Node.Tag IsNot Nothing) Then\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont, _\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top)\n        End If\n\n        &#39; If the node has focus, draw the focus rectangle large, making\n        &#39; it large enough to include the text of the node tag, if present.\n        If (e.State And TreeNodeStates.Focused) &lt;&gt; 0 Then\n            Dim focusPen As New Pen(Color.Black)\n            Try\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot\n                Dim focusBounds As Rectangle = NodeBounds(e.Node)\n                focusBounds.Size = New Size(focusBounds.Width - 1, _\n                    focusBounds.Height - 1)\n                e.Graphics.DrawRectangle(focusPen, focusBounds)\n            Finally\n                focusPen.Dispose()\n            End Try\n        End If\n\n    End Sub &#39;myTreeView_DrawNode\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#3\">   // Draws a node.\nprivate:\n   void myTreeView_DrawNode( Object^ sender, DrawTreeNodeEventArgs^ e )\n   {\n      // Draw the background and node text for a selected node.\n      if ( (e-&gt;State &amp; TreeNodeStates::Selected) != (TreeNodeStates)0 )\n      {\n         // Draw the background of the selected node. The NodeBounds\n         // method makes the highlight rectangle large enough to\n         // include the text of a node tag, if one is present.\n         e-&gt;Graphics-&gt;FillRectangle( Brushes::Green, NodeBounds( e-&gt;Node ) );\n\n         // Retrieve the node font. If the node font has not been set,\n         // use the TreeView font.\n         System::Drawing::Font^ nodeFont = e-&gt;Node-&gt;NodeFont;\n         if ( nodeFont == nullptr )\n                  nodeFont = (dynamic_cast&lt;TreeView^&gt;(sender))-&gt;Font;\n\n         // Draw the node text.\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Text, nodeFont, Brushes::White, Rectangle::Inflate( e-&gt;Bounds, 2, 0 ) );\n      }\n      // Use the default background and node text.\n      else\n      {\n         e-&gt;DrawDefault = true;\n      }\n\n      // If a node tag is present, draw its string representation \n      // to the right of the label text.\n      if ( e-&gt;Node-&gt;Tag != nullptr )\n      {\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Tag-&gt;ToString(), tagFont, Brushes::Yellow, (float)e-&gt;Bounds.Right + 2, (float)e-&gt;Bounds.Top );\n      }\n\n      \n      // If the node has focus, draw the focus rectangle large, making\n      // it large enough to include the text of the node tag, if present.\n      if ( (e-&gt;State &amp; TreeNodeStates::Focused) != (TreeNodeStates)0 )\n      {\n         Pen^ focusPen = gcnew Pen( Color::Black );\n         try\n         {\n            focusPen-&gt;DashStyle = System::Drawing::Drawing2D::DashStyle::Dot;\n            Rectangle focusBounds = NodeBounds( e-&gt;Node );\n            focusBounds.Size = System::Drawing::Size( focusBounds.Width - 1, focusBounds.Height - 1 );\n            e-&gt;Graphics-&gt;DrawRectangle( focusPen, focusBounds );\n         }\n         finally\n         {\n            if ( focusPen )\n               delete safe_cast&lt;IDisposable^&gt;(focusPen);\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#3\">    // Draws a node.\n    private void myTreeView_DrawNode(\n        object sender, DrawTreeNodeEventArgs e)\n    {\n        // Draw the background and node text for a selected node.\n        if ((e.State &amp; TreeNodeStates.Selected) != 0)\n        {\n            // Draw the background of the selected node. The NodeBounds\n            // method makes the highlight rectangle large enough to\n            // include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node));\n\n            // Retrieve the node font. If the node font has not been set,\n            // use the TreeView font.\n            Font nodeFont = e.Node.NodeFont;\n            if (nodeFont == null) nodeFont = ((TreeView)sender).Font;\n\n            // Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White,\n                Rectangle.Inflate(e.Bounds, 2, 0));\n        }\n\n        // Use the default background and node text.\n        else \n        {\n            e.DrawDefault = true;\n        }\n\n        // If a node tag is present, draw its string representation \n        // to the right of the label text.\n        if (e.Node.Tag != null)\n        {\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont,\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top);\n        }\n\n        // If the node has focus, draw the focus rectangle large, making\n        // it large enough to include the text of the node tag, if present.\n        if ((e.State &amp; TreeNodeStates.Focused) != 0)\n        {\n            using (Pen focusPen = new Pen(Color.Black))\n            {\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;\n                Rectangle focusBounds = NodeBounds(e.Node);\n                focusBounds.Size = new Size(focusBounds.Width - 1, \n                focusBounds.Height - 1);\n                e.Graphics.DrawRectangle(focusPen, focusBounds);\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DrawTreeNodeEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DrawTreeNodeEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.Bounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.Graphics\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.Node\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.State\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c48e1f6b-4615-44c1-3a97-9ec3984ba9d3\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DrawTreeNodeEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DrawTreeNodeEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.DrawTreeNodeEventArgs","System.Windows.Forms.DrawTreeNodeEventArgs..ctor","System.Windows.Forms.DrawTreeNodeEventArgs.Bounds","System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault","System.Windows.Forms.DrawTreeNodeEventArgs.Graphics","System.Windows.Forms.DrawTreeNodeEventArgs.Node","System.Windows.Forms.DrawTreeNodeEventArgs.State"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DrawTreeNodeEventArgs","System::Windows::Forms::DrawTreeNodeEventArgs","System.Windows.Forms.DrawTreeNodeEventArgs.#ctor","System::Windows::Forms::DrawTreeNodeEventArgs::#ctor","System.Windows.Forms.DrawTreeNodeEventArgs.Bounds","System::Windows::Forms::DrawTreeNodeEventArgs::Bounds","System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault","System::Windows::Forms::DrawTreeNodeEventArgs::DrawDefault","System.Windows.Forms.DrawTreeNodeEventArgs.Graphics","System::Windows::Forms::DrawTreeNodeEventArgs::Graphics","System.Windows.Forms.DrawTreeNodeEventArgs.Node","System::Windows::Forms::DrawTreeNodeEventArgs::Node","System.Windows.Forms.DrawTreeNodeEventArgs.State","System::Windows::Forms::DrawTreeNodeEventArgs::State"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c48e1f6b-4615-44c1-3a97-9ec3984ba9d3","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/DrawTreeNodeEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DrawTreeNodeEventArgs class | Microsoft Docs","_op_ogTitle":"DrawTreeNodeEventArgs class","description":"Provides data for the  event.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DrawTreeNodeEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.drawtreenodeeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.drawtreenodeeventargs","fileRelativePath":"System.Windows.Forms.DrawTreeNodeEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}